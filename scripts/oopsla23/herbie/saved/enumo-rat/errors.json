[
  {
    "seed": 1,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.42626953125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8715.824462890625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4558.935546875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 492.06005859375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 2,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 16.966552734375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8901.356689453125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4975.609619140625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 512.386962890625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 3,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 19.2587890625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 7183.60595703125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4517.199462890625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 669.971923828125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 4,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 15.078125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9082.6171875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5653.0654296875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 606.137939453125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 5,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 21.519287109375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9634.015869140625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4364.130859375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 397.199951171875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 6,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.896484375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 10015.824462890625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4393.009521484375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 519.571533203125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 7,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.297119140625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8962.6044921875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4850.512451171875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 640.568359375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 8,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 74.057861328125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8325.543212890625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4429.010498046875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 560.317138671875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 9,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 50.33544921875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 7759.910888671875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4540.2900390625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 479.124267578125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 10,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 15.484619140625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8309.247314453125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4926.841064453125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 635.179931640625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 11,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.55224609375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8821.740234375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4472.02978515625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 439.666015625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 12,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.67138671875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9179.87451171875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5821.821533203125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 483.006103515625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 13,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 20.1513671875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 7701.50927734375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4138.843017578125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 333.232666015625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 14,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 19.6591796875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8511.234130859375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4945.240966796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 537.556884765625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 15,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 15.5791015625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9560.418212890625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4424.817138671875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 434.658203125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 16,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 18.1552734375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 6994.554931640625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4178.7431640625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 676.053955078125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 17,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 17.798583984375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8416.32861328125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4599.890625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 343.345458984375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 18,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 17.281982421875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8176.14306640625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4330.8876953125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 827.107421875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 19,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 19.776123046875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8914.763427734375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4990.64013671875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 696.80419921875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 20,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 34.94189453125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8026.082763671875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4970.2333984375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 523.770263671875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 21,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 15.0537109375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8138.588134765625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4871.4580078125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 418.0009765625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 22,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 28.80419921875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 7613.593505859375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4443.824951171875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 647.88916015625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 23,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 25.14697265625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8872.607666015625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4450.690673828125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 569.994873046875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 24,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.6279296875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8114.337158203125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4391.206298828125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 508.265380859375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 25,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.3681640625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8407.912353515625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4747.741455078125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 421.9482421875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 26,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.796630859375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9706.667236328125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4116.569091796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 492.813232421875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 27,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 75.43994140625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8229.704833984375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4933.1064453125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 492.899658203125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 28,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.005126953125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8973.503662109375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4954.140625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 560.15673828125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 29,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 15.531005859375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 7283.9892578125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4335.4501953125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 711.832275390625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 30,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 16.24365234375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8347.736328125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4048.456787109375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 659.520751953125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  }
]
