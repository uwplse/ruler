[
  {
    "seed": 1,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.214599609375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9499.946533203125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5459.267822265625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 349.626953125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 2,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.700927734375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9683.42919921875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5945.397216796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 374.542236328125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 3,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 18.60009765625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9036.00634765625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5736.4072265625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 563.349365234375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 4,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 15.9970703125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9910.397705078125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 6568.818359375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 789.462890625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 5,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.4560546875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9095.263916015625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5635.814697265625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 295.947021484375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 6,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.28759765625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9023.559326171875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5835.258056640625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 334.07861328125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 7,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.895263671875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8978.354248046875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5939.383544921875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 410.439697265625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 8,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 18.470947265625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9370.6982421875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5718.54248046875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 377.221923828125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 9,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 16.041259765625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8492.841796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4097.5888671875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 353.962890625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 10,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 19.197998046875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8994.650634765625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5054.491455078125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 610.7041015625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 11,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 18.361572265625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 7857.83837890625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 3908.73486328125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 555.141357421875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 12,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.775390625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9753.031494140625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5610.541748046875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 766.951171875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 13,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.451416015625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9316.1337890625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5529.642578125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 350.416259765625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 14,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.833740234375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9508.3837890625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5944.797607421875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 500.296875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 15,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 18.011474609375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9337.85546875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 6010.14697265625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 631.3837890625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 16,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.899169921875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9655.094482421875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5450.983642578125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 580.1806640625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 17,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.908447265625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8353.762451171875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5487.01904296875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 398.85546875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 18,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 15.999755859375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8722.65966796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5907.502685546875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 795.822021484375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 19,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 17.3984375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 7654.89208984375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4156.755615234375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 417.199462890625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 20,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 24.9423828125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8806.48388671875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4968.9443359375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 345.787109375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 21,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 246.36376953125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9351.009521484375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 6104.662353515625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 581.60546875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 22,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.189208984375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8854.330810546875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5188.37841796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 397.7861328125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 23,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.45263671875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8696.594970703125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5803.79345703125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 457.25048828125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 24,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 27.610107421875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9237.83251953125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5934.752685546875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 439.24267578125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 25,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 17.055419921875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 7522.600830078125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 3941.699462890625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 561.417236328125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 26,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 15.6474609375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8345.95947265625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4853.699462890625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 550.7451171875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 27,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 22.698486328125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 10173.66650390625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5824.06396484375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 448.6044921875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 28,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 33.372802734375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8887.550537109375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5274.178466796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 358.98486328125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 29,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.231201171875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9257.892578125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4968.92626953125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 585.904296875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 30,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 24.11083984375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9443.298095703125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 6092.96142578125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 724.2177734375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  }
]
