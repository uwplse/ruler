[
  {
    "seed": 2,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
        "link": "hamming/15-logqproblem343",
        "name": "logq (problem 3.4.3)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(* -2.0 (+ (+ eps (/ (pow eps 3.0) 3.0)) (/ (pow eps 5.0) 5.0)))",
        "time": 300000,
        "vars": [
          "eps"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 3,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 4,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
        "link": "mathematics/20-Hyperbolicarccotangent",
        "name": "Hyperbolic arc-(co)tangent",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 5,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
        "link": "mathematics/32-AsymptoteC",
        "name": "Asymptote C",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "link": "numerics/41-CompoundInterest",
        "name": "Compound Interest",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(* 100.0 (/ (- (exp (* n (if (== (+ 1.0 (/ i n)) 1.0) (/ i n) (/ (* (/ i n) (log (+ 1.0 (/ i n)))) (- (+ (/ i n) 1.0) 1.0))))) 1.0) (/ i n)))",
        "time": 300000,
        "vars": [
          "i",
          "n"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
        "link": "physics/20-GivensRotationSVDexamplesimplified",
        "name": "Given's Rotation SVD example, simplified",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      }
    ]
  },
  {
    "seed": 6,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
        "link": "mathematics/20-Hyperbolicarccotangent",
        "name": "Hyperbolic arc-(co)tangent",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
        "link": "mathematics/32-AsymptoteC",
        "name": "Asymptote C",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "link": "numerics/41-CompoundInterest",
        "name": "Compound Interest",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(* 100.0 (/ (- (exp (* n (if (== (+ 1.0 (/ i n)) 1.0) (/ i n) (/ (* (/ i n) (log (+ 1.0 (/ i n)))) (- (+ (/ i n) 1.0) 1.0))))) 1.0) (/ i n)))",
        "time": 300000,
        "vars": [
          "i",
          "n"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 7,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
        "link": "hamming/15-logqproblem343",
        "name": "logq (problem 3.4.3)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(* -2.0 (+ (+ eps (/ (pow eps 3.0) 3.0)) (/ (pow eps 5.0) 5.0)))",
        "time": 300000,
        "vars": [
          "eps"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "link": "numerics/41-CompoundInterest",
        "name": "Compound Interest",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(* 100.0 (/ (- (exp (* n (if (== (+ 1.0 (/ i n)) 1.0) (/ i n) (/ (* (/ i n) (log (+ 1.0 (/ i n)))) (- (+ (/ i n) 1.0) 1.0))))) 1.0) (/ i n)))",
        "time": 300000,
        "vars": [
          "i",
          "n"
        ]
      }
    ]
  },
  {
    "seed": 8,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 9,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      }
    ]
  },
  {
    "seed": 10,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "link": "numerics/41-CompoundInterest",
        "name": "Compound Interest",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(* 100.0 (/ (- (exp (* n (if (== (+ 1.0 (/ i n)) 1.0) (/ i n) (/ (* (/ i n) (log (+ 1.0 (/ i n)))) (- (+ (/ i n) 1.0) 1.0))))) 1.0) (/ i n)))",
        "time": 300000,
        "vars": [
          "i",
          "n"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 11,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 12,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 13,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
        "link": "mathematics/20-Hyperbolicarccotangent",
        "name": "Hyperbolic arc-(co)tangent",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
        "link": "mathematics/34-AsymptoteA",
        "name": "Asymptote A",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 14,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "link": "numerics/41-CompoundInterest",
        "name": "Compound Interest",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(* 100.0 (/ (- (exp (* n (if (== (+ 1.0 (/ i n)) 1.0) (/ i n) (/ (* (/ i n) (log (+ 1.0 (/ i n)))) (- (+ (/ i n) 1.0) 1.0))))) 1.0) (/ i n)))",
        "time": 300000,
        "vars": [
          "i",
          "n"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 15,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
        "link": "mathematics/20-Hyperbolicarccotangent",
        "name": "Hyperbolic arc-(co)tangent",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      }
    ]
  },
  {
    "seed": 16,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "link": "numerics/41-CompoundInterest",
        "name": "Compound Interest",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(* 100.0 (/ (- (exp (* n (if (== (+ 1.0 (/ i n)) 1.0) (/ i n) (/ (* (/ i n) (log (+ 1.0 (/ i n)))) (- (+ (/ i n) 1.0) 1.0))))) 1.0) (/ i n)))",
        "time": 300000,
        "vars": [
          "i",
          "n"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 17,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 18,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 19,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
        "link": "hamming/12-quadmp42negative",
        "name": "quadm (p42, negative)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(if (< b 0.0) (/ c (* a (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)))) (/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)))",
        "time": 300000,
        "vars": [
          "a",
          "b",
          "c"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
        "link": "mathematics/32-AsymptoteC",
        "name": "Asymptote C",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
        "link": "numerics/26-Thequadraticformular2",
        "name": "The quadratic formula (r2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(if (< b 0.0) (/ c (* a (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)))) (/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)))",
        "time": 300000,
        "vars": [
          "a",
          "b",
          "c"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 20,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
        "link": "mathematics/20-Hyperbolicarccotangent",
        "name": "Hyperbolic arc-(co)tangent",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
        "link": "mathematics/34-AsymptoteA",
        "name": "Asymptote A",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "link": "numerics/41-CompoundInterest",
        "name": "Compound Interest",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(* 100.0 (/ (- (exp (* n (if (== (+ 1.0 (/ i n)) 1.0) (/ i n) (/ (* (/ i n) (log (+ 1.0 (/ i n)))) (- (+ (/ i n) 1.0) 1.0))))) 1.0) (/ i n)))",
        "time": 300000,
        "vars": [
          "i",
          "n"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 21,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
        "link": "physics/20-GivensRotationSVDexamplesimplified",
        "name": "Given's Rotation SVD example, simplified",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      }
    ]
  },
  {
    "seed": 22,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      }
    ]
  },
  {
    "seed": 23,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
        "link": "hamming/7-2fracproblem331",
        "name": "2frac (problem 3.3.1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
        "link": "mathematics/32-AsymptoteC",
        "name": "Asymptote C",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "link": "numerics/41-CompoundInterest",
        "name": "Compound Interest",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(* 100.0 (/ (- (exp (* n (if (== (+ 1.0 (/ i n)) 1.0) (/ i n) (/ (* (/ i n) (log (+ 1.0 (/ i n)))) (- (+ (/ i n) 1.0) 1.0))))) 1.0) (/ i n)))",
        "time": 300000,
        "vars": [
          "i",
          "n"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 24,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 25,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
        "link": "mathematics/15-LogisticfunctionfromLakshayGarg",
        "name": "Logistic function from Lakshay Garg",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x",
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 27,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 28,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  },
  {
    "seed": 29,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
        "link": "physics/3-VandenBroeckandKellerEquation20",
        "name": "VandenBroeck and Keller, Equation (20)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "f"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
        "link": "physics/20-GivensRotationSVDexamplesimplified",
        "name": "Given's Rotation SVD example, simplified",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      }
    ]
  },
  {
    "seed": 30,
    "timeouts": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
        "link": "mathematics/34-AsymptoteA",
        "name": "Asymptote A",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(/ x (+ (* x x) 1.0))",
        "link": "numerics/21-xx21",
        "name": "x / (x^2 + 1)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(/ x (+ (* x x) 1.0))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "(/ 1.0 (+ x (/ 1.0 x)))",
        "time": 300000,
        "vars": [
          "x"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "link": "physics/7-TonioloandLinderEquation2",
        "name": "Toniolo and Linder, Equation (2)",
        "output": "#f",
        "pre": "TRUE",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
        "start": false,
        "start-est": false,
        "status": "timeout",
        "target": false,
        "target-prog": "#f",
        "time": 300000,
        "vars": [
          "t",
          "l",
          "Om",
          "Omc"
        ]
      }
    ]
  }
]
