[
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.87488418017552,
    "avg_bits_err_output": 0.04775,
    "avg_bits_err_improve": 40.82713418017552,
    "time": 6312.384521484375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -1.4e-8) (/ (- x (sin x)) (if (!= (- x (+ -2.0 (- -2.0 (tan x)))) 0.0) (* (- x (tan x)) (/ (+ (tan x) (+ (- x -2.0) 2.0)) (- x (+ -2.0 (- -2.0 (tan x)))))) (- x (tan x)))) (if (<= x -1.35e-108) (/ (if (!= (+ x (sin x)) 0.0) (if (!= (/ (* x x) (- (sin (- x)) x)) 0.0) (- (- (/ (* (* x x) (/ (- (pow (sin x) 2.0)) (+ x (sin x)))) (* x x)) 0.0) (- (/ (/ (* (* x x) (* x x)) (- (sin (- x)) x)) (* x x)) 0.0)) (/ (- (* x x) (pow (sin x) 2.0)) (+ x (sin x)))) (- x (sin x))) (- x (- (exp (log1p (tan x))) 1.0))) (if (<= x 1.35e-108) (/ (if (!= (+ x (sin x)) 0.0) (if (!= (/ (pow (sin x) 2.0) (+ x (sin x))) 0.0) (- (* (/ (* x (pow (sin x) 2.0)) (+ x (sin x))) (/ (/ x (+ x (sin x))) (/ (pow (sin x) 2.0) (+ x (sin x))))) (/ 1.0 (/ 1.0 (/ (pow (sin x) 2.0) (+ x (sin x)))))) (/ (- (* x x) (pow (sin x) 2.0)) (+ x (sin x)))) (- x (sin x))) (- x (- (exp (log1p (tan x))) 1.0))) (if (<= x 2e-8) (/ (if (!= (+ x (sin x)) 0.0) (if (!= (/ (* x x) (- (sin (- x)) x)) 0.0) (- (- (/ (* (* x x) (/ (- (pow (sin x) 2.0)) (+ x (sin x)))) (* x x)) 0.0) (- (/ (/ (* (* x x) (* x x)) (- (sin (- x)) x)) (* x x)) 0.0)) (/ (- (* x x) (pow (sin x) 2.0)) (+ x (sin x)))) (- x (sin x))) (- x (- (exp (log1p (tan x))) 1.0))) (if (!= (/ (sin x) (- (tan x) x)) 0.0) (- (/ 1.0 (/ 1.0 (/ (sin x) (- (tan x) x)))) (/ (/ (* x (sin x)) (- (tan x) x)) (sin x))) (/ (- (sin x) x) (- (tan x) x)))))))",
    "output_parens": 202,
    "avg_bits_err_input": 31.180782228138554,
    "avg_bits_err_output": 22.80767161264731,
    "avg_bits_err_improve": 8.373110615491242,
    "time": 26795.2626953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (if (!= (/ b_2 (- a)) 0.0) (+ (/ 1.0 (/ 1.0 (/ b_2 (- a)))) (* (/ b_2 (* b_2 a)) 0.0)) (/ (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2) a)) (if (<= b_2 -7.5e-274) (- (/ (sqrt (fma a (- c) (* b_2 b_2))) a) (/ b_2 a)) (- (/ (if (!= b_2 0.0) (* a (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))))) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a) 0.0)))",
    "output_parens": 46,
    "avg_bits_err_input": 34.41134914409666,
    "avg_bits_err_output": 20.8722265798363,
    "avg_bits_err_improve": 13.53912256426036,
    "time": 16707.495361328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.25264941759655,
    "avg_bits_err_output": 19.75256668731565,
    "avg_bits_err_improve": 14.500082730280901,
    "time": 20634.034912109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (- 1.0 (cos x)) x) (/ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 31.575020739923517,
    "avg_bits_err_output": 30.884434437418857,
    "avg_bits_err_improve": 0.6905863025046592,
    "time": 17659.5751953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.65983579670954,
    "avg_bits_err_output": 32.311783600921764,
    "avg_bits_err_improve": 0.3480521957877727,
    "time": 27426.759521484375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (+ (+ (log1p N) 2.0) -2.0) (log N))",
    "output_parens": 5,
    "avg_bits_err_input": 29.89630016366425,
    "avg_bits_err_output": 29.90591092852436,
    "avg_bits_err_improve": -0.00961076486010981,
    "time": 13038.816162109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (if (!= (/ x (+ x 1.0)) 0.0) (/ (* (/ (- (* x (/ x (+ x 1.0))) x) (+ x (+ x 2.0))) -2.0) (/ x (- -1.0 x))) (+ (/ x (+ x 1.0)) -1.0)) x)",
    "output_parens": 19,
    "avg_bits_err_input": 14.026953453822443,
    "avg_bits_err_output": 13.756814844768076,
    "avg_bits_err_improve": 0.27013860905436715,
    "time": 19754.974365234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(+ (fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps)))) (fma (- (sin eps)) (sin x) (* (sin x) (sin eps))))",
    "output_parens": 16,
    "avg_bits_err_input": 39.995185282530144,
    "avg_bits_err_output": 6.193811866716707,
    "avg_bits_err_improve": 33.80137341581344,
    "time": 22237.600341796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.020420158353453,
    "avg_bits_err_output": 29.721112131143286,
    "avg_bits_err_improve": 0.29930802721016647,
    "time": 14388.565185546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (/ 1.0 (sin x)) 0.0) (/ (* (/ (- 1.0 (cos x)) (sin x)) (/ 1.0 (sin x))) (/ 1.0 (sin x))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 18,
    "avg_bits_err_input": 30.4562400601662,
    "avg_bits_err_output": 30.476060864139363,
    "avg_bits_err_improve": -0.019820803973164658,
    "time": 23396.288330078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 34.46033237308252,
    "avg_bits_err_output": 22.234972510226903,
    "avg_bits_err_improve": 12.225359862855619,
    "time": 22562.618896484375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 4.0)) (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.472549351833045,
    "avg_bits_err_output": 22.23839685865645,
    "avg_bits_err_improve": 12.234152493176595,
    "time": 27752.273193359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.453730727635474,
    "avg_bits_err_output": 0.02374304531403246,
    "avg_bits_err_improve": 61.42998768232144,
    "time": 18365.7734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log1p n) (log n)) n)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 63.008218201337286,
    "avg_bits_err_output": 44.21392876338445,
    "avg_bits_err_improve": 18.794289437952834,
    "time": 13240.50048828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (+ (* (/ 0.5 (- -1.0 eps)) (+ eps eps)) (+ (* -2.0 (/ 0.5 (- -1.0 eps))) -1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 58.64187700601443,
    "avg_bits_err_output": 50.56833583477215,
    "avg_bits_err_improve": 8.073541171242283,
    "time": 19022.861083984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(if (!= (fma (/ x (tan x)) (/ -0.5 x) (/ 1.0 (/ (+ x x) (/ x (tan x))))) 0.0) (/ (- (pow (/ (- 1.0 (/ x (tan x))) (+ x x)) 2.0) (pow (+ (/ 0.5 x) (/ -1.0 (/ (+ x x) (/ x (tan x))))) 2.0)) (fma (/ x (tan x)) (/ -0.5 x) (/ 1.0 (/ (+ x x) (/ x (tan x)))))) (+ (/ -1.0 (/ (+ x x) (/ x (tan x)))) (/ (+ (/ x (- (tan x))) 2.0) (+ x x))))",
    "output_parens": 48,
    "avg_bits_err_input": 59.87792033337887,
    "avg_bits_err_output": 59.96406967022113,
    "avg_bits_err_improve": -0.08614933684226145,
    "time": 29412.531005859375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.1572632360821,
    "avg_bits_err_output": 29.501246445174395,
    "avg_bits_err_improve": 30.656016790907707,
    "time": 27484.319091796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.31012038960202,
    "avg_bits_err_output": 0.531375,
    "avg_bits_err_improve": 40.77874538960202,
    "time": 5302.935302734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.60569648221609,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.60544648221609,
    "time": 3549.024658203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.540685457791106,
    "avg_bits_err_output": 0.01914441780414224,
    "avg_bits_err_improve": 29.521541039986964,
    "time": 4721.0078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(fma (exp x) (/ -2.0 (exp x)) (- (- (/ -1.0 (exp x)) (exp x))))",
    "output_parens": 9,
    "avg_bits_err_input": 29.637424647862787,
    "avg_bits_err_output": 29.510948184626518,
    "avg_bits_err_improve": 0.12647646323626915,
    "time": 19620.37890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ -1.0 (+ x -1.0)) 0.0) (/ (if (!= (* (/ -1.0 (+ x -1.0)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))) 0.0) (/ (fma (* (/ -1.0 (+ x -1.0)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))) (* (/ -1.0 (+ x -1.0)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))) (* (/ -2.0 x) (* (/ -1.0 (+ x -1.0)) (* (/ -1.0 (+ x -1.0)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))))))) (* (/ -1.0 (+ x -1.0)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))))) (/ (+ (/ -1.0 (+ x -1.0)) (- (/ 2.0 x) (/ 1.0 (+ 1.0 x)))) (+ x -1.0))) (/ -1.0 (+ x -1.0))) (- (/ 1.0 (+ 1.0 x)) (+ (/ -1.0 (+ x -1.0)) (/ 2.0 x))))",
    "output_parens": 72,
    "avg_bits_err_input": 9.14813584865345,
    "avg_bits_err_output": 9.169794478229925,
    "avg_bits_err_improve": -0.021658629576474908,
    "time": 24678.4970703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (+ (- (tan (+ x eps)) (tan x)) 1.0) 0.0) (- (/ (+ (fma (- (tan x)) (tan (+ x eps)) (* (tan (+ x eps)) (tan x))) (* (tan (+ x eps)) (- (tan (+ x eps)) (+ (tan x) -1.0)))) (+ (- (tan (+ x eps)) (tan x)) 1.0)) (/ (* (tan x) (+ (- (tan (+ x eps)) (tan x)) 1.0)) (+ (- (tan (+ x eps)) (tan x)) 1.0))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 49,
    "avg_bits_err_input": 36.94670660178132,
    "avg_bits_err_output": 36.96925671000714,
    "avg_bits_err_improve": -0.022550108225814824,
    "time": 22332.78076171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (expm1 (log1p (/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x))))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 17,
    "avg_bits_err_input": 30.292353743518234,
    "avg_bits_err_output": 0.17100733125324513,
    "avg_bits_err_improve": 30.121346412264987,
    "time": 15040.71435546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.60663541607277,
    "avg_bits_err_output": 22.69007193985611,
    "avg_bits_err_improve": 14.916563476216659,
    "time": 21013.434814453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (!= (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x)))) 0.0) (/ (+ (/ 1.0 x) (/ -1.0 (+ 1.0 x))) (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x))))) (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (+ 1.0 x)))))",
    "output_parens": 25,
    "avg_bits_err_input": 20.151960140066578,
    "avg_bits_err_output": 20.218698157343066,
    "avg_bits_err_improve": -0.06673801727648865,
    "time": 17145.03271484375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (+ (atan (+ N 1.0)) (- -1.0 (atan N))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 14.787589356586064,
    "avg_bits_err_output": 14.792447525422403,
    "avg_bits_err_improve": -0.004858168836339161,
    "time": 11063.66943359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.99235110276065,
    "avg_bits_err_output": 1.143966587777828,
    "avg_bits_err_improve": 28.848384514982822,
    "time": 25819.705810546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (- m (* m m)) v) (+ (- 1.0 m) (* (/ m v) (- m (* m m)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.07563928593921272,
    "avg_bits_err_output": 0.07874960374151922,
    "avg_bits_err_improve": -0.0031103178023065003,
    "time": 10319.64453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(if (!= (* a b) 0.0) (/ (* (- (pow (* a b) 2.0)) (* a (/ b (* b (- a))))) -1.0) (- (pow (* a b) 2.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 16.006908175956998,
    "avg_bits_err_output": 0.28252161719245783,
    "avg_bits_err_improve": 15.72438655876454,
    "time": 13306.4609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= PI 0.0) (- (* (exp (log1p (* PI PI))) (/ (/ angle PI) 180.0)) (/ (/ angle PI) 180.0)) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 20.320657935588994,
    "avg_bits_err_output": 20.3429060935133,
    "avg_bits_err_improve": -0.0222481579243059,
    "time": 41804.792724609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) -2e+281) (* (if (!= (* (exp (* 1.0 (log (sin (* angle (/ PI -180.0)))))) (pow b 2.0)) 0.0) (- (* (pow (* a (sin (* angle (/ PI -180.0)))) 2.0) (+ 0.0 (/ 1.0 (sin (* angle (/ PI -180.0)))))) (/ 1.0 (/ 1.0 (* (sin (* angle (/ PI -180.0))) (pow b 2.0))))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0))))) (if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) 1e+199) (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* PI (/ angle 180.0))) (expm1 (log1p (cos (* PI (/ angle 180.0))))))) (* (if (!= (* (sin (* angle (/ PI -180.0))) (pow b 2.0)) 0.0) (- (* (pow (* a (sin (* angle (/ PI -180.0)))) 2.0) (* (pow b 2.0) (/ 1.0 (* (pow b 2.0) (sin (* angle (/ PI -180.0))))))) (/ 1.0 (/ 1.0 (* (sin (* angle (/ PI -180.0))) (pow b 2.0))))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0)))))))",
    "output_parens": 124,
    "avg_bits_err_input": 31.220150071696498,
    "avg_bits_err_output": 28.163771756310616,
    "avg_bits_err_improve": 3.0563783153858815,
    "time": 50318.130126953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (* (* angle PI) 0.005555555555555556))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.517435164799974,
    "avg_bits_err_output": 20.52246408769624,
    "avg_bits_err_improve": -0.005028922896265442,
    "time": 41775.599609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.17476184218813104,
    "avg_bits_err_output": 0.17458496250072117,
    "avg_bits_err_improve": 0.00017687968740986992,
    "time": 15572.717529296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(- (exp (* (log1p (pow (tan x) 2.0)) -2.0)) (/ (pow (tan x) 4.0) (pow (fma (tan x) (tan x) 1.0) 2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.30518865959940467,
    "avg_bits_err_output": 0.38347211338209714,
    "avg_bits_err_improve": -0.07828345378269247,
    "time": 19072.5244140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (sin v) (fma e (cos v) 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.13169812031259015,
    "avg_bits_err_output": 0.13171936093777042,
    "avg_bits_err_improve": -2.1240625180274364e-05,
    "time": 16307.231201171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.171775623305866,
    "avg_bits_err_output": 17.166654644343684,
    "avg_bits_err_improve": 0.005120978962182221,
    "time": 34414.123046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.83969044350404,
    "avg_bits_err_output": 0.16927857187842543,
    "avg_bits_err_improve": 52.67041187162562,
    "time": 23128.9072265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* b b) 0.0) (/ (* b (* b (fma a (* c -4.0) (* b b)))) (* b b)) (fma a (* c -4.0) (* b b)))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 35,
    "avg_bits_err_input": 28.219180534707085,
    "avg_bits_err_output": 0.35072988907665315,
    "avg_bits_err_improve": 27.868450645630432,
    "time": 24120.0029296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.685511367535874,
    "avg_bits_err_output": 0.23412578359244166,
    "avg_bits_err_improve": 43.451385583943434,
    "time": 24519.287353515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) (- INFINITY)) (/ (if (!= b 0.0) (if (!= (/ (* (* a c) -2.0) b) 0.0) (/ 1.0 (/ -0.25 (* a (/ c b)))) (* c (/ (* a -4.0) b))) (- b)) (* a 2.0)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) -5e-166) (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) 4e-134) (/ (if (!= (- (- b) 0.0) 0.0) (/ (* 4.0 (* a c)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) 1e+294) (+ (/ (sqrt (+ (* b b) (* a (* c -4.0)))) (* a 2.0)) (/ b (* a -2.0))) (/ (if (!= b 0.0) (* a (* c (/ -4.0 b))) (- b)) (* a 2.0))))))",
    "output_parens": 109,
    "avg_bits_err_input": 34.46212258103005,
    "avg_bits_err_output": 22.475067745283642,
    "avg_bits_err_improve": 11.98705483574641,
    "time": 24047.208984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (fma (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))) (pow (cos phi1) 2.0)) (cos phi1)) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.9203810234809323,
    "avg_bits_err_output": 0.9342805926216743,
    "avg_bits_err_improve": -0.013899569140741974,
    "time": 30760.453369140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (<= (* -2.0 x) 0.002) (/ (if (!= (- (exp (* -2.0 x))) 0.0) (/ (* (exp (* -2.0 x)) (expm1 (* -2.0 x))) (- (exp (* -2.0 x)))) (- 1.0 (exp (* -2.0 x)))) (- (- -1.0 (exp (* -2.0 x))))) (- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0))",
    "output_parens": 30,
    "avg_bits_err_input": 29.064811471220583,
    "avg_bits_err_output": 0.022211932895263988,
    "avg_bits_err_improve": 29.04259953832532,
    "time": 19225.231201171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ (exp (+ x x)) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 58.213622374202764,
    "avg_bits_err_output": 0.6372618421881311,
    "avg_bits_err_improve": 57.57636053201463,
    "time": 19035.649169921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (- (exp (+ x (* x -2.0))))) 2.0)",
    "output_parens": 8,
    "avg_bits_err_input": 57.93285336758055,
    "avg_bits_err_output": 0.04729248125036058,
    "avg_bits_err_improve": 57.88556088633019,
    "time": 7926.041748046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(expm1 (log1p (/ 2.0 (+ (exp x) (exp (- x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.009912798070799487,
    "avg_bits_err_output": 0.011580279321160064,
    "avg_bits_err_improve": -0.001667481250360578,
    "time": 1848.382080078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.60125,
    "avg_bits_err_output": 31.60125,
    "avg_bits_err_improve": 0,
    "time": 4985.7578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (if (!= (/ (- -1.0 x) (+ x -1.0)) 0.0) (* (/ (expm1 (log1p (- x (- -2.0 x)))) (- 1.0 x)) (/ (/ (- -1.0 x) (- x 1.0)) (/ (expm1 (log1p (- x (- -2.0 x)))) (- 1.0 x)))) (/ (- -1.0 x) (+ x -1.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 58.630511978163696,
    "avg_bits_err_output": 58.641223202566756,
    "avg_bits_err_improve": -0.010711224403060271,
    "time": 22461.38916015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.027448120312590144,
    "avg_bits_err_output": 0.027448120312590144,
    "avg_bits_err_improve": 0,
    "time": 3544.25341796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1272712406251803,
    "avg_bits_err_output": 0.1272712406251803,
    "avg_bits_err_improve": 0,
    "time": 23662.1083984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.123625,
    "avg_bits_err_output": 0.123625,
    "avg_bits_err_improve": 0,
    "time": 16459.375244140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* (cos (/ phi1 2.0)) (* (cos (/ phi2 2.0)) (- lambda1 lambda2))) (* (sin (/ phi1 2.0)) (* (sin (/ phi2 2.0)) (- lambda1 lambda2)))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 39.35118233120891,
    "avg_bits_err_output": 0.132129724624374,
    "avg_bits_err_improve": 39.21905260658453,
    "time": 26380.02001953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.805285926075854,
    "avg_bits_err_output": 14.805285926075854,
    "avg_bits_err_improve": 0,
    "time": 3544.79052734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin delta) (* (cos phi1) (sin theta))) (- (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (cos delta))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.16210147755514773,
    "avg_bits_err_output": 0.15807714731881636,
    "avg_bits_err_improve": 0.004024330236331364,
    "time": 39057.500244140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.82050532703905,
    "avg_bits_err_output": 0.1727691734413761,
    "avg_bits_err_improve": 52.64773615359768,
    "time": 26092.056396484375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* -3.0 a)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.36819594953342,
    "avg_bits_err_output": 0.343394530317451,
    "avg_bits_err_improve": 28.02480141921597,
    "time": 29439.3427734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.77758319506283,
    "avg_bits_err_output": 0.23841361238702777,
    "avg_bits_err_improve": 43.539169582675804,
    "time": 27655.7421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* a -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.51819949511365,
    "avg_bits_err_output": 22.254907716157064,
    "avg_bits_err_improve": 12.263291778956585,
    "time": 23815.88916015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.447363567738538,
    "avg_bits_err_output": 13.447363567738538,
    "avg_bits_err_improve": 0,
    "time": 36467.90771484375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (- (* (+ x x) (/ (+ x -1.0) (+ x (+ x 2.0)))) (+ x -1.0)) (+ x -1.0)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 28.907142100152114,
    "avg_bits_err_output": 24.323784360368442,
    "avg_bits_err_improve": 4.583357739783672,
    "time": 21438.774169921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.04332237716990204,
    "avg_bits_err_improve": -0.031572377169902036,
    "time": 7881.01171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (- (+ -1.0 (/ x (+ x 1.0))) (/ 1.0 (+ x 1.0))) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 14.187970758462768,
    "avg_bits_err_output": 12.33509343183673,
    "avg_bits_err_improve": 1.8528773266260377,
    "time": 17997.599609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.5e-291) (* (* (sqrt (- F)) (sqrt (* -2.0 (- (* A (* C 4.0)) (pow B 2.0))))) (/ (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt F) (sqrt (* (- (pow B 2.0) (* A (* C 4.0))) -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 48,
    "avg_bits_err_input": 52.76292766261422,
    "avg_bits_err_output": 47.062349112227395,
    "avg_bits_err_improve": 5.7005785503868225,
    "time": 41935.13720703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= B -1.65e+30) (* (atan (fma (sqrt (+ (pow (- C A) 2.0) (pow B 2.0))) (/ -1.0 B) (/ (- C A) B))) (/ 180.0 PI)) (if (<= B -4.1e-46) (* (atan (* (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0)) (- (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (/ -1.0 B))) (/ 180.0 PI)) (if (<= B -2.7e-107) (* (atan (* (- (sqrt (+ (* (- C A) (- C A)) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI)) (if (<= B -6e-302) (* (atan (* (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0)) (- (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (/ -1.0 B))) (/ 180.0 PI)) (if (<= B 3e-231) (* (atan (* (- (sqrt (+ (* (- C A) (- C A)) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI)) (if (<= B 4.2e+23) (* (atan (* (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0)) (- (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (/ -1.0 B))) (/ 180.0 PI)) (* (atan (if (!= (/ (- A C) B) 0.0) (/ (* (/ (- A C) B) (/ (- A (- C (sqrt (+ (pow (- C A) 2.0) (pow B 2.0))))) B)) (/ (- C A) B)) (/ (- (- C (sqrt (+ (pow (- C A) 2.0) (pow B 2.0)))) A) B))) (/ 180.0 PI))))))))",
    "output_parens": 172,
    "avg_bits_err_input": 29.043603710209847,
    "avg_bits_err_output": 28.53011620531755,
    "avg_bits_err_improve": 0.5134875048922964,
    "time": 26356.417724609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -5e-310) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 F)))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* 2.0 F))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.606007567516684,
    "avg_bits_err_output": 46.753195569968135,
    "avg_bits_err_improve": 5.8528119975485495,
    "time": 47341.772705078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 1.0) 0.0) (/ (+ (pow (cbrt (/ g (+ a a))) 2.0) (cbrt (/ g (+ a a)))) (+ (cbrt (/ g (+ a a))) 1.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 22,
    "avg_bits_err_input": 15.171756941918344,
    "avg_bits_err_output": 15.194837373792984,
    "avg_bits_err_improve": -0.023080431874639373,
    "time": 22477.935791015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -2e-262) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) (- g)) 0.0) (* h (/ h (- (- g) (pow (fma g g (* h (- h))) 0.5)))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 69,
    "avg_bits_err_input": 35.67640701467552,
    "avg_bits_err_output": 3.6036609541657354,
    "avg_bits_err_improve": 32.072746060509786,
    "time": 38216.449951171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos (* PI 0.3333333333333333)) (cos (fma PI 0.3333333333333333 (/ (acos (/ (- g) h)) 3.0)))) (* (sin (* PI 0.3333333333333333)) (sin (fma PI 0.3333333333333333 (/ (acos (/ (- g) h)) 3.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.9912883468827537,
    "avg_bits_err_output": 0.025127443751081738,
    "avg_bits_err_improve": 0.9661609031316719,
    "time": 16142.417724609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log1p (expm1 (/ (exp a) (+ (exp a) (exp b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.6610943609377705,
    "avg_bits_err_output": 0.6630118421881311,
    "avg_bits_err_improve": -0.0019174812503606198,
    "time": 3594.44580078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (* a1 (/ a2 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-273) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ 1.0 b2) (* a1 (/ a2 b1))) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+280) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 37,
    "avg_bits_err_input": 11.294396107797018,
    "avg_bits_err_output": 2.9237130583048425,
    "avg_bits_err_improve": 8.370683049492175,
    "time": 11745.0751953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40895293827427864,
    "avg_bits_err_output": 0.36,
    "avg_bits_err_improve": 0.04895293827427866,
    "time": 13569.736083984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.2) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 50.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.22922637428044,
    "avg_bits_err_output": 0.20667169464714424,
    "avg_bits_err_improve": 53.022554679633295,
    "time": 13885.99951171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.679809565668414,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.679809565668414,
    "time": 2045.193603515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- (/ (+ -1.0 (+ x x)) (- -2.0 (+ x x))) (/ 1.0 (- -2.0 (+ x x)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.012375,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 0.0010000000000000009,
    "time": 6980.96630859375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1195.585693359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= (* w w) 1e+249) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* w (* w r)) (* (/ r (- 1.0 v)) (- 0.375 (* v 0.25)))) 4.5)) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* w (* r (/ (* r w) (- 1.0 v))))) 4.5)))",
    "output_parens": 29,
    "avg_bits_err_input": 12.992930689537006,
    "avg_bits_err_output": 0.29826891746554673,
    "avg_bits_err_improve": 12.69466177207146,
    "time": 27832.394775390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (+ (* x1 (/ (* (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) 4.0) (fma x1 x1 1.0))) (* x1 -6.0))) (/ (fma (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (* (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* x1 -2.0)) (* (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (fma (- (fma 3.0 (* x1 x1) (* 2.0 x2))) (* x1 2.0) (* (fma 3.0 (* x1 x1) (* 2.0 x2)) (* x1 2.0))))) (- -1.0 (* x1 x1))))))))))",
    "output_parens": 71,
    "avg_bits_err_input": 0.524059527574896,
    "avg_bits_err_output": 0.25447162950988284,
    "avg_bits_err_improve": 0.2695878980650132,
    "time": 84986.64135742188,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- v) (+ t1 u)) (/ t1 (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.045396829725135,
    "avg_bits_err_output": 1.4738351962201592,
    "avg_bits_err_improve": 16.571561633504977,
    "time": 7065.687744140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* x 0.954929658551372) (* x (* x (* x 0.12900613773279798))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.28223776155338814,
    "avg_bits_err_output": 0.19343588186597835,
    "avg_bits_err_improve": 0.0888018796874098,
    "time": 7043.08642578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003125,
    "avg_bits_err_output": 0.003125,
    "avg_bits_err_improve": 0,
    "time": 4228.82861328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI (- (/ 0.5 a) (/ 0.5 b))) (+ b a)) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.1091207942105,
    "avg_bits_err_output": 0.32662840039821944,
    "avg_bits_err_improve": 13.782492393812282,
    "time": 17945.43701171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (/ (exp (- (* eps x) x)) eps) 0.0) (+ (- (/ (exp (- (* eps (+ x x)) (- x (- x)))) (exp (- (* eps x) x))) 0.0) (+ (/ (exp (fma eps (+ x x) (* x -2.0))) (* eps (exp (- (* eps x) x)))) (* (exp (- (* eps x) x)) (/ (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))) (exp (- (* eps x) x)))))) (+ (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* eps x)))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) 2.0)",
    "output_parens": 54,
    "avg_bits_err_input": 29.78789341309523,
    "avg_bits_err_output": 25.202112826304194,
    "avg_bits_err_improve": 4.585780586791035,
    "time": 24860.709228515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.0055,
    "avg_bits_err_output": 0.0055,
    "avg_bits_err_improve": 0,
    "time": 4189.04736328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.008625,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 0,
    "time": 10700.935791015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (fma (* 2.0 (/ t (+ 1.0 t))) (* 2.0 (/ t (+ 1.0 t))) 1.0) (fma (* 2.0 (/ t (+ 1.0 t))) (* 2.0 (/ t (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.048625,
    "avg_bits_err_output": 0.0085,
    "avg_bits_err_improve": 0.040125,
    "time": 19970.2529296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3748.155029296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8730.69189453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 3256.454833984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.822912304428905,
    "avg_bits_err_output": 0.248875,
    "avg_bits_err_improve": 7.574037304428905,
    "time": 34257.83544921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.3143548054901855,
    "avg_bits_err_output": 7.3143548054901855,
    "avg_bits_err_improve": 0,
    "time": 16307.98095703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.835406440542085,
    "avg_bits_err_output": 0.0281239684015375,
    "avg_bits_err_improve": 15.807282472140548,
    "time": 11862.133056640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (pow (exp 10.0) (* x x)) (+ (cos x) 2.0)) 0.0) (/ (- (* (pow (pow (exp 20.0) x) x) (pow (+ (cos x) 1.0) 2.0)) (pow (pow (exp 20.0) x) x)) (* (pow (exp 10.0) (* x x)) (+ (cos x) 2.0))) (* (pow (exp 10.0) (* x x)) (cos x)))",
    "output_parens": 31,
    "avg_bits_err_input": 3.5487659458009073,
    "avg_bits_err_output": 3.05955368977164,
    "avg_bits_err_improve": 0.4892122560292673,
    "time": 19317.34423828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -0.005) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 20.0) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 15.020530630351313,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 15.010655630351314,
    "time": 10479.81787109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.53511209548896,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.53511209548896,
    "time": 4067.76708984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.803248968089605,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 38.802373968089604,
    "time": 4562.831298828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.295625,
    "avg_bits_err_improve": 63.704375,
    "time": 24108.363525390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325147286218,
    "avg_bits_err_output": 0.40598853437914684,
    "avg_bits_err_improve": 61.43726293848303,
    "time": 17982.85888671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 4.0)) (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.472549351833045,
    "avg_bits_err_output": 22.23839685865645,
    "avg_bits_err_improve": 12.234152493176595,
    "time": 29617.144775390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) (- INFINITY)) (/ (if (!= b 0.0) (if (!= (/ (* (* a c) -2.0) b) 0.0) (/ 1.0 (/ -0.25 (* a (/ c b)))) (* c (/ (* a -4.0) b))) (- b)) (* a 2.0)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) -5e-166) (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) 4e-134) (/ (if (!= (- (- b) 0.0) 0.0) (/ (* 4.0 (* a c)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) 1e+294) (+ (/ (sqrt (+ (* b b) (* a (* c -4.0)))) (* a 2.0)) (/ b (* a -2.0))) (/ (if (!= b 0.0) (* a (* c (/ -4.0 b))) (- b)) (* a 2.0))))))",
    "output_parens": 109,
    "avg_bits_err_input": 34.46212258103005,
    "avg_bits_err_output": 22.475067745283642,
    "avg_bits_err_improve": 11.98705483574641,
    "time": 26039.508056640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2165.901123046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.76818272521393,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 39.759057725213935,
    "time": 6464.06982421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- (* x x) (* y y)) (fma x x (* y y)))",
    "output_parens": 6,
    "avg_bits_err_input": 19.798566548015334,
    "avg_bits_err_output": 19.800843052744526,
    "avg_bits_err_improve": -0.0022765047291919416,
    "time": 8262.720703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6701016891069065,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6701016891069065,
    "time": 6871.599365234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.036875,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.036,
    "time": 8535.5732421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019073120312590144,
    "avg_bits_err_output": 0.01125,
    "avg_bits_err_improve": 0.007823120312590144,
    "time": 3877.578369140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.015375,
    "avg_bits_err_output": 0.015375,
    "avg_bits_err_improve": 0,
    "time": 3523.46533203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0,
    "time": 1310.013671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ a (+ c b))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.38880225625468784,
    "avg_bits_err_output": 0.235125,
    "avg_bits_err_improve": 0.15367725625468784,
    "time": 8266.49755859375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (* (cos (* x 2.0)) 0.5) 0.0) (/ (- (* 0.5 (* (cos (* x 2.0)) 0.5)) (* (* (cos (* x 2.0)) 0.5) (* (cos (* x 2.0)) 0.5))) (* (cos (* x 2.0)) 0.5)) (- 1.0 (pow (cos x) 2.0))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 33,
    "avg_bits_err_input": 29.488135785344156,
    "avg_bits_err_output": 29.44189430600264,
    "avg_bits_err_improve": 0.046241479341514236,
    "time": 15491.718994140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (+ eps (- (* x x) (+ eps eps)))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 17,
    "avg_bits_err_input": 24.17771523680861,
    "avg_bits_err_output": 0.28894812031259015,
    "avg_bits_err_improve": 23.88876711649602,
    "time": 14484.8447265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (- (* x x) (pow (sin x) 2.0)) (fma (- (sin x)) (sin x) (pow (sin x) 2.0))) 0.0) (/ (- (pow (- (* x x) (pow (sin x) 2.0)) 2.0) (* (fma (- (sin x)) (sin x) (pow (sin x) 2.0)) (fma (- (sin x)) (sin x) (pow (sin x) 2.0)))) (- (if (!= (pow (sin x) 2.0) 0.0) (/ (if (!= (* (pow (sin x) 2.0) (* x x)) 0.0) (/ (fma (pow (sin x) 4.0) (pow (* x x) 2.0) (* (* (pow (sin x) 2.0) (* x x)) (- (pow (sin x) 4.0)))) (* (pow (sin x) 2.0) (* x x))) (* (pow (sin x) 2.0) (- (* x x) (pow (sin x) 2.0)))) (pow (sin x) 2.0)) (- (* x x) (pow (sin x) 2.0))) (fma (- (sin x)) (sin x) (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 97,
    "avg_bits_err_input": 29.920272973259017,
    "avg_bits_err_output": 29.823261627342895,
    "avg_bits_err_improve": 0.0970113459161226,
    "time": 36832.978515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007681401388979041,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.006556401388979041,
    "time": 3179.29931640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (/ (* 100.0 (pow (+ (/ i n) 1.0) n)) (/ i n)) (if (!= (/ 100.0 (/ i n)) 0.0) (- (/ (/ 10000.0 (/ i n)) 100.0) 0.0) (/ 100.0 (/ i n)))))",
    "output_parens": 32,
    "avg_bits_err_input": 47.58844782478861,
    "avg_bits_err_output": 13.314346365329937,
    "avg_bits_err_improve": 34.27410145945867,
    "time": 23909.099365234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.675386994784667,
    "avg_bits_err_output": 23.644545843138694,
    "avg_bits_err_improve": 3.030841151645973,
    "time": 14589.58154296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 5e+273) (- (/ (* b c) (+ (* d d) (* c c))) (* a (/ d (+ (* d d) (* c c))))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (+ (* d d) (* c c))))))",
    "output_parens": 30,
    "avg_bits_err_input": 26.20477483441839,
    "avg_bits_err_output": 23.807960127175043,
    "avg_bits_err_improve": 2.3968147072433474,
    "time": 14058.22412109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (+ (* ux (- maxCos)) ux))",
    "output_parens": 4,
    "avg_bits_err_input": 0.031375,
    "avg_bits_err_output": 0.018207016441828858,
    "avg_bits_err_improve": 0.013167983558171142,
    "time": 5008.46337890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (- (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)) 1.0))))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))",
    "output_parens": 29,
    "avg_bits_err_input": 13.647832149166652,
    "avg_bits_err_output": 12.233789556346833,
    "avg_bits_err_improve": 1.4140425928198184,
    "time": 34772.24462890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (if (!= (* uy (* 2.0 PI)) 0.0) (/ 1.0 (/ 1.0 (* uy (* 2.0 PI)))) (* uy (* 2.0 PI)))) (sqrt (+ (- (- 1.0 (* ux (* maxCos (fma ux maxCos (- 1.0 ux))))) (log (+ 1.0 (expm1 (* (- 1.0 ux) (- 1.0 ux)))))) (- (* ux (* (- 1.0 ux) maxCos))))))",
    "output_parens": 30,
    "avg_bits_err_input": 13.676623533641141,
    "avg_bits_err_output": 12.496261088062752,
    "avg_bits_err_improve": 1.180362445578389,
    "time": 37904.514892578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (expm1 (log1p (* PI 2.0))))) (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) xi) (fma (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (* (- 1.0 ux) maxCos) zi))))",
    "output_parens": 34,
    "avg_bits_err_input": 0.33887085912373005,
    "avg_bits_err_output": 0.345398521166611,
    "avg_bits_err_improve": -0.006527662042880966,
    "time": 41432.74365234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax)))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.2029600952810437,
    "avg_bits_err_output": 0.20308509528104368,
    "avg_bits_err_improve": -0.00012499999999998623,
    "time": 43545.403564453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (/ (+ (/ (/ (/ (* u1 u1) (- 1.0 u1)) 4.0) (- 1.0 u1)) (/ (/ (/ (* u1 u1) (- 1.0 u1)) 4.0) (- 1.0 u1))) (/ (/ u1 (- 1.0 u1)) 2.0)) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 28,
    "avg_bits_err_input": 0.5324980702766468,
    "avg_bits_err_output": 0.5753858280714671,
    "avg_bits_err_improve": -0.04288775779482035,
    "time": 22155.423828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.33138921929424436,
    "avg_bits_err_output": 0.33138921929424436,
    "avg_bits_err_improve": 0,
    "time": 21706.4560546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.33393869296766343,
    "avg_bits_err_output": 0.33381369296766344,
    "avg_bits_err_improve": 0.00012499999999998623,
    "time": 45063.0751953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05662766810866245,
    "avg_bits_err_output": 0.0381802422170575,
    "avg_bits_err_improve": 0.018447425891604953,
    "time": 10420.571044921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (- (* (log1p (exp (/ (fabs x) (- s)))) -2.0) (/ (fabs x) s))) s)",
    "output_parens": 11,
    "avg_bits_err_input": 0.17231890009084724,
    "avg_bits_err_output": 0.15757933922427045,
    "avg_bits_err_improve": 0.014739560866576795,
    "time": 19486.927490234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6627989233643427,
    "avg_bits_err_output": 0.6598612367210324,
    "avg_bits_err_improve": 0.002937686643310289,
    "time": 23697.663330078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.15328271046875777,
    "avg_bits_err_output": 0.1537164668795955,
    "avg_bits_err_improve": -0.0004337564108377323,
    "time": 22634.5400390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.599083711564975,
    "avg_bits_err_output": 2.595183742036864,
    "avg_bits_err_improve": 0.0038999695281112245,
    "time": 30730.602783203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ (/ (/ 0.5 v) v) (exp (* sinTheta_O (/ sinTheta_i v)))) (/ cosTheta_i (sinh (/ 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4628038478056186,
    "avg_bits_err_output": 0.3979605089028452,
    "avg_bits_err_improve": 0.06484333890277344,
    "time": 27325.207275390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp 0.6931) (exp (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (expm1 (log1p (log (/ 0.5 v)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.11301117382757771,
    "avg_bits_err_output": 0.11315549872696483,
    "avg_bits_err_improve": -0.00014432489938712156,
    "time": 27402.974609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow alpha (* PI 2.0)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4757510659776972,
    "avg_bits_err_output": 0.4290917369873109,
    "avg_bits_err_improve": 0.04665932899038627,
    "time": 24059.274169921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (- (- (+ (log (fma u -1.3333333333333333 1.3333333333333333)) 1.0) 1.0)) (* 3.0 s))",
    "output_parens": 7,
    "avg_bits_err_input": 1.328498093227955,
    "avg_bits_err_output": 1.145896609896081,
    "avg_bits_err_improve": 0.1826014833318741,
    "time": 23231.844482421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (- (log1p (* u -4.0))) s)",
    "output_parens": 4,
    "avg_bits_err_input": 12.502287367634787,
    "avg_bits_err_output": 0.2095,
    "avg_bits_err_improve": 12.292787367634787,
    "time": 18569.4462890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (/ (/ (* (exp (/ (/ r s) -3.0)) 0.75) (* r 6.0)) s) PI))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12988456576125287,
    "avg_bits_err_output": 0.131147092500819,
    "avg_bits_err_improve": -0.0012625267395661166,
    "time": 32088.66748046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9211871839963994,
    "avg_bits_err_output": 0.7387928352481768,
    "avg_bits_err_improve": 0.18239434874822258,
    "time": 30019.293701171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (if (!= (sqrt (- 1.0 (+ cosTheta cosTheta))) 0.0) (/ (- 1.0 (+ cosTheta cosTheta)) (sqrt (- 1.0 (+ cosTheta cosTheta)))) (sqrt (- 1.0 (+ cosTheta cosTheta)))) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.6828617256700389,
    "avg_bits_err_output": 0.4725564539578099,
    "avg_bits_err_improve": 0.210305271712229,
    "time": 25869.28271484375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.349306948014679,
    "avg_bits_err_output": 0.5162610630876762,
    "avg_bits_err_improve": 12.833045884927003,
    "time": 20416.0166015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (sqrt (- (log1p (- u1)))) (if (!= (sqrt (- (log1p (- u1)))) 0.0) (* (+ (cos (* PI (* u2 -2.0))) -1.0) (/ (log1p (- u1)) (sqrt (- (log1p (- u1)))))) (* (- 1.0 (cos (* PI (* u2 -2.0)))) (sqrt (- (log1p (- u1)))))))",
    "output_parens": 32,
    "avg_bits_err_input": 13.394814497583212,
    "avg_bits_err_output": 0.3440397705771142,
    "avg_bits_err_improve": 13.050774727006099,
    "time": 19401.340576171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* (- alpha) alpha) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.280362091942722,
    "avg_bits_err_output": 0.32506616562662266,
    "avg_bits_err_improve": 13.955295926316099,
    "time": 15867.717041015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ (/ cos2phi alphax) (- alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.65511148338157,
    "avg_bits_err_output": 0.5128110754632116,
    "avg_bits_err_improve": 12.142300407918357,
    "time": 14574.610595703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= F -3.4e-226) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (if (<= F 1.65e-199) (- (* PI l) (exp (+ (- (if (!= (log (* F F)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (log (* F F))))))) (log (* F F)))) (log (tan (* PI l)))))) (- (* PI l) (- (/ (* (/ (tan (* PI l)) F) 1.5) (+ F F)) (/ (- (/ (tan (* PI l)) (+ F F))) (+ F F))))))",
    "output_parens": 47,
    "avg_bits_err_input": 16.493597986284563,
    "avg_bits_err_output": 11.2459650962903,
    "avg_bits_err_improve": 5.247632889994263,
    "time": 24023.228759765625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2138327222622215,
    "avg_bits_err_output": 0.15629024101186093,
    "avg_bits_err_improve": 0.05754248125036057,
    "time": 17064.456298828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.859468280720668,
    "avg_bits_err_output": 10.373507091833686,
    "avg_bits_err_improve": 3.485961188886982,
    "time": 23575.397705078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (expm1 (log1p (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) 0.0) (/ (- (exp (* (* PI f) 0.5)) (exp (* PI (/ (+ f f) -4.0)))) (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))))) (/ PI -4.0))",
    "output_parens": 45,
    "avg_bits_err_input": 61.53501356036294,
    "avg_bits_err_output": 61.51411217881553,
    "avg_bits_err_improve": 0.020901381547410836,
    "time": 45907.926513671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.87654474662172,
    "avg_bits_err_output": 33.39225726413966,
    "avg_bits_err_improve": 9.48428748248206,
    "time": 27610.954345703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin th) (/ (sin ky) (sqrt (fma (sin kx) (sin kx) (pow (sin ky) 2.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 3.8751220386912992,
    "avg_bits_err_output": 3.8749333168157576,
    "avg_bits_err_improve": 0.000188721875541642,
    "time": 30851.0830078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (pow (+ (+ (* 4.0 (pow (* (/ l Om) (sin ky)) 2.0)) (* 4.0 (pow (* (/ l Om) (sin kx)) 2.0))) 1.0) -0.5) 0.5)))",
    "output_parens": 16,
    "avg_bits_err_input": 1.0164762837965524,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 1.0094762837965525,
    "time": 13858.5380859375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (* (/ Om Omc) (/ Om Omc))) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.501658317288966,
    "avg_bits_err_output": 10.501658317288966,
    "avg_bits_err_improve": 0,
    "time": 13113.2900390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 0.0) (* (sqrt (* n -2.0)) (sqrt (* U (- (* (pow (/ l Om) 2.0) (* n (- U U*))) (fma (/ l Om) (* l -2.0) t))))) (if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 1e+153) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) INFINITY) (* (sqrt (* n (- U))) (sqrt (* 2.0 (- (fma 2.0 (* l (/ l Om)) (* n (* (pow (/ l Om) 2.0) (- U U*)))) t)))) (sqrt (* (* -2.0 n) (+ (* U (fma (pow (/ l Om) 2.0) (* n (- U U*)) (- t))) (- (* (* l -2.0) (* (/ l Om) U)))))))))",
    "output_parens": 107,
    "avg_bits_err_input": 34.563245528192134,
    "avg_bits_err_output": 27.164127605537153,
    "avg_bits_err_improve": 7.39911792265498,
    "time": 35123.898681640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -5e-66) (/ 2.0 (/ (* (/ (* (pow t 3.0) (* k (/ (sin k) l))) t) (/ (* k (tan k)) l)) t)) (if (<= t 5e-34) (/ 2.0 (* (* k (/ (tan k) l)) (* (/ (sin k) l) (/ (* (pow t 3.0) k) (* t t))))) (/ 2.0 (/ (* (/ (* (pow t 3.0) (* k (/ (sin k) l))) t) (/ (* k (tan k)) l)) t))))",
    "output_parens": 40,
    "avg_bits_err_input": 47.57916968591727,
    "avg_bits_err_output": 29.766547009103636,
    "avg_bits_err_improve": 17.812622676813636,
    "time": 46426.182861328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (+ 2.0 (pow (/ k t) 2.0)) l) (* (sin k) (/ (* (tan k) (pow t 3.0)) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 33.21556720405132,
    "avg_bits_err_output": 28.500925612196166,
    "avg_bits_err_improve": 4.714641591855152,
    "time": 17797.792236328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (* (* 2.0 (cos th)) (/ (+ (* a2 a2) (* a1 a1)) 4.0)) (sqrt 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5316951156468169,
    "avg_bits_err_output": 0.4933058297076034,
    "avg_bits_err_improve": 0.038389285939213535,
    "time": 20122.402587890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* PI n) (fma k -0.5 0.5)) (/ (pow 2.0 (fma k -0.5 0.5)) (sqrt k)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5182383812897454,
    "avg_bits_err_output": 0.5508038677743855,
    "avg_bits_err_improve": -0.03256548648464008,
    "time": 21833.919189453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output_parens": 9,
    "avg_bits_err_input": 16.86010227587373,
    "avg_bits_err_output": 16.86010227587373,
    "avg_bits_err_improve": 0,
    "time": 25717.364990234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (if (!= (* K (/ (+ m n) 2.0)) 0.0) (* (fma (+ m n) (/ K 2.0) (- M)) (/ (/ (* K (+ m n)) K) (+ m n))) (fma (+ m n) (/ K 2.0) (- M)))) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n))))))",
    "output_parens": 34,
    "avg_bits_err_input": 15.470931656540774,
    "avg_bits_err_output": 15.473862631619184,
    "avg_bits_err_improve": -0.002930975078410114,
    "time": 19467.978515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.14964624062518,
    "avg_bits_err_output": 18.14964624062518,
    "avg_bits_err_improve": 0,
    "time": 40221.1875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) (- INFINITY)) (* w0 (sqrt (- 1.0 (* (* h (/ (* D (* D (/ M 2.0))) d)) (/ (/ M (* d 2.0)) l))))) (if (<= (/ h l) 1e+287) (* w0 (sqrt (- 1.0 (* (* D (/ (/ M 2.0) d)) (* (* D (/ (/ M 2.0) d)) (/ h l)))))) (* w0 (sqrt (- 1.0 (* (* h (/ (* D (* D (/ M 2.0))) d)) (/ (/ M (* d 2.0)) l)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 13.928901350771833,
    "avg_bits_err_output": 8.575444164549845,
    "avg_bits_err_improve": 5.353457186221988,
    "time": 26041.8642578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -4e+279) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) -1e-242) (* c0 (* (sqrt (- (/ 1.0 (* V l)))) (sqrt (- A)))) (if (<= (* V l) 2e-297) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) 1e+286) (* c0 (* (sqrt (/ 1.0 (* V l))) (sqrt A))) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V)))))))))",
    "output_parens": 50,
    "avg_bits_err_input": 19.465906873322314,
    "avg_bits_err_output": 7.099539489146621,
    "avg_bits_err_improve": 12.366367384175692,
    "time": 21282.0244140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) (- INFINITY)) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma d (* c0 (/ d (* D (* D (* w h))))) M)) (sqrt (fma (/ d (* D (* D (* w h)))) (* d c0) (- M))) (* d (* c0 (/ d (* D (* D (* w h)))))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (if (!= (- (* (* d c0) (/ (/ d D) (* w (* D h)))) (sqrt (- (pow (* (* d c0) (/ (/ d D) (* w (* D h)))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* (* d c0) (/ (/ d D) (* w (* D h)))) (pow (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)) 0.5))) (+ (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))))) (/ (/ (* c0 (if (!= (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))) 0.0) (* M (/ M (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (* (sqrt (- M (* c0 (/ (pow (/ d D) 2.0) (* w h))))) (sqrt (- (fma c0 (/ (pow (/ d D) 2.0) (* w h)) M))))))) (fma d (/ (* c0 (/ d (* D (* w h)))) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))))) w) 2.0)))",
    "output_parens": 202,
    "avg_bits_err_input": 59.429657685104644,
    "avg_bits_err_output": 27.168091408729108,
    "avg_bits_err_improve": 32.26156627637553,
    "time": 55029.55419921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 1e+298) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (fma 0.5 (* h (* (* D (/ 0.5 d)) (* (pow M 2.0) (* (/ D d) (/ 0.5 l))))) -1.0) (- (* (sqrt (/ d (* h l))) (sqrt d)))))",
    "output_parens": 47,
    "avg_bits_err_input": 26.602134880330688,
    "avg_bits_err_output": 22.993088563853473,
    "avg_bits_err_improve": 3.6090463164772153,
    "time": 44130.652587890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (/ 0.25 (fma x x 1.0))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 33,
    "avg_bits_err_input": 15.733236059195152,
    "avg_bits_err_output": 15.239485890538747,
    "avg_bits_err_improve": 0.49375016865640475,
    "time": 27997.1640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 4.0 (fma v v -1.0)) (- (* 3.0 PI))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.9845731203125901,
    "avg_bits_err_output": 0.013834962500721158,
    "avg_bits_err_improve": 0.970738157811869,
    "time": 6346.6875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (- (* v (* v 5.0)) (- 2.0 (* v (* v 5.0)))) (* PI (* (sqrt (fma -6.0 (* v v) 2.0)) -2.0))) (- t (* v (* v t)))) 0.0)",
    "output_parens": 17,
    "avg_bits_err_input": 0.4586993025406222,
    "avg_bits_err_output": 0.11126777418878399,
    "avg_bits_err_improve": 0.3474315283518382,
    "time": 19328.183837890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (- (* v (* v (sqrt (- 2.0 (* v (* v 6.0)))))) (sqrt (- 2.0 (* v (* v 6.0))))) -4.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.012146240625180289,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 0.004521240625180289,
    "time": 12965.70654296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (if (!= (/ (* (* v v) 5.0) (fma v v -1.0)) 0.0) (/ (- (/ (* 25.0 (pow (* v v) 2.0)) (fma v v -1.0)) (/ (* v (* v 5.0)) (fma v v -1.0))) (* v (* v -5.0))) (/ (fma v (* v -5.0) 1.0) (fma v v -1.0))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.5546123587068369,
    "avg_bits_err_output": 0.5711364966508589,
    "avg_bits_err_improve": -0.016524137944021966,
    "time": 15197.467041015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.8381491208740295,
    "avg_bits_err_output": 1.8205241208740297,
    "avg_bits_err_improve": 0.01762499999999978,
    "time": 24908.75732421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ mu (+ Vef EDonor)) Ec) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.018230344508855918,
    "avg_bits_err_output": 0.018230344508855918,
    "avg_bits_err_improve": 0,
    "time": 9649.096923828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow b 4.0) (* (* a a) (+ (* b b) (+ (* b b) (* a a))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1817998125036057,
    "avg_bits_err_output": 0.09919116562662261,
    "avg_bits_err_improve": 0.08260864687698308,
    "time": 11181.7890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (+ (* b (* b (* a a))) (* b (* b (fma a a (* b b)))))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 21,
    "avg_bits_err_input": 0.18492463672813633,
    "avg_bits_err_output": 0.07427950371969118,
    "avg_bits_err_improve": 0.11064513300844515,
    "time": 20802.8193359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (fma 4.0 (fma (* a a) (- 1.0 a) (* b (* b (+ a 3.0)))) (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (+ (+ (pow b 4.0) (* a (* a (* b b)))) (* (fma a a (* b b)) (* a a))) (pow (fma a a (* b b)) 2.0))) -1.0)",
    "output_parens": 26,
    "avg_bits_err_input": 0.18631897236993444,
    "avg_bits_err_output": 0.10345072354332002,
    "avg_bits_err_improve": 0.08286824882661442,
    "time": 19351.16650390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (if (!= (/ x (sqrt (fma 4.0 (* p p) (* x x)))) 0.0) (/ 1.0 (/ 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x)))))) (/ x (sqrt (fma 4.0 (* p p) (* x x))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 13.374506953137011,
    "avg_bits_err_output": 13.380247317467337,
    "avg_bits_err_improve": -0.0057403643303253205,
    "time": 21324.469970703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (if (!= (/ 1.0 (expm1 x)) 0.0) (/ (/ (/ (expm1 (+ x x)) (expm1 x)) (expm1 x)) (/ 1.0 (expm1 x))) (/ (expm1 (+ x x)) (expm1 x))))",
    "output_parens": 18,
    "avg_bits_err_input": 40.79512143001579,
    "avg_bits_err_output": 0.06575,
    "avg_bits_err_improve": 40.72937143001579,
    "time": 6357.247314453125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (log1p (expm1 (/ (pow (tan x) 2.0) (+ x (tan x)))))) (- x (tan x))))",
    "output_parens": 21,
    "avg_bits_err_input": 31.17525936815557,
    "avg_bits_err_output": 30.65579818109108,
    "avg_bits_err_improve": 0.5194611870644898,
    "time": 24745.451904296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))) 0.0) (* (/ c (- (- b_2) (sqrt (fma a (- c) (* b_2 b_2))))) a) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.22785241872434,
    "avg_bits_err_output": 22.044278042021112,
    "avg_bits_err_improve": 12.183574376703227,
    "time": 16414.56591796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- (sqrt (- (* b_2 b_2) (* a c)))) b_2)) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.23761159853698,
    "avg_bits_err_output": 22.588812920332597,
    "avg_bits_err_improve": 11.648798678204383,
    "time": 18539.63330078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (- 1.0 (cos x)) x) (/ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 31.549309820278808,
    "avg_bits_err_output": 30.78555387463138,
    "avg_bits_err_improve": 0.7637559456474285,
    "time": 19025.568115234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (- (pow x (/ 1.0 n)) (exp (/ (log1p x) n))) 0.0) (/ 1.0 (/ 1.0 (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 22,
    "avg_bits_err_input": 32.9093314416616,
    "avg_bits_err_output": 32.60735754398973,
    "avg_bits_err_improve": 0.3019738976718713,
    "time": 32289.758056640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (expm1 (if (!= (+ (log1p N) (log N)) 0.0) (/ (- (pow (log1p N) 2.0) (pow (log N) 2.0)) (+ (log1p N) (log N))) (- (log1p N) (log N))))))",
    "output_parens": 20,
    "avg_bits_err_input": 29.543885853594208,
    "avg_bits_err_output": 29.583951708331018,
    "avg_bits_err_improve": -0.04006585473680957,
    "time": 12732.405029296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (- (/ (+ (/ -1.0 x) (/ (/ x x) (+ 1.0 x))) 2.0) (/ (+ 1.0 (/ -1.0 (/ (+ 1.0 x) x))) (+ x x))) 0.0)",
    "output_parens": 14,
    "avg_bits_err_input": 14.112249711393671,
    "avg_bits_err_output": 14.103954630433233,
    "avg_bits_err_improve": 0.008295080960438739,
    "time": 16040.709228515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))",
    "output_parens": 8,
    "avg_bits_err_input": 39.98961918396757,
    "avg_bits_err_output": 6.558373513549458,
    "avg_bits_err_improve": 33.431245670418114,
    "time": 25022.2255859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ 1.0 x)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.10594522353427,
    "avg_bits_err_output": 29.80219313237363,
    "avg_bits_err_improve": 0.3037520911606393,
    "time": 14962.841552734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log (- 1.0 (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 30.031646316473925,
    "avg_bits_err_output": 30.03390502029305,
    "avg_bits_err_improve": -0.0022587038191268505,
    "time": 23995.088623046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c 4.0) (- (- b) (pow (fma b b (* a (* c -4.0))) 0.5)))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.14834767390882,
    "avg_bits_err_output": 22.049597738393732,
    "avg_bits_err_improve": 12.098749935515091,
    "time": 23970.87158203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.83041998751424,
    "avg_bits_err_output": 21.764935758397467,
    "avg_bits_err_improve": 12.065484229116773,
    "time": 22985.484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(if (!= (+ 1.0 (+ 1.0 (/ (log1p (- x)) (log1p x)))) 0.0) (/ (- (* (+ 1.0 (/ (log1p (- x)) (log1p x))) (+ 1.0 (/ (log1p (- x)) (log1p x)))) 1.0) (+ 1.0 (+ 1.0 (/ (log1p (- x)) (log1p x))))) (/ (log1p (- x)) (log1p x)))",
    "output_parens": 31,
    "avg_bits_err_input": 61.348962375838774,
    "avg_bits_err_output": 0.026297368752524062,
    "avg_bits_err_improve": 61.32266500708625,
    "time": 20355.42529296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(exp (* 1.0 (expm1 (log1p (log (+ (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n)))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 63.0047477116072,
    "avg_bits_err_output": 2.4598822852965263,
    "avg_bits_err_improve": 60.54486542631068,
    "time": 15685.248046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (+ (* (/ 0.5 (- -1.0 eps)) (+ eps eps)) (+ (* -2.0 (/ 0.5 (- -1.0 eps))) -1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 58.64668196380714,
    "avg_bits_err_output": 50.58583720115195,
    "avg_bits_err_improve": 8.060844762655186,
    "time": 16548.635498046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (- 1.0 (/ (/ 4.0 (tan x)) (/ 4.0 x))) x)",
    "output_parens": 6,
    "avg_bits_err_input": 59.82052690918915,
    "avg_bits_err_output": 59.832869374592306,
    "avg_bits_err_improve": -0.012342465403158087,
    "time": 33251.60107421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ (expm1 (* eps (+ a b))) (expm1 (* eps b))) (if (!= (/ eps (expm1 (* eps a))) 0.0) (/ 1.0 (/ 1.0 (/ eps (expm1 (* eps a))))) (/ eps (expm1 (* eps a)))))",
    "output_parens": 20,
    "avg_bits_err_input": 60.14925138088946,
    "avg_bits_err_output": 29.837767837184835,
    "avg_bits_err_improve": 30.311483543704625,
    "time": 26708.451904296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.10146429990704,
    "avg_bits_err_output": 0.4136981203125902,
    "avg_bits_err_improve": 40.687766179594455,
    "time": 4651.413818359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.63475144687459,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 58.63362644687459,
    "time": 3501.45703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.611401246432838,
    "avg_bits_err_output": 0.019765210880563468,
    "avg_bits_err_improve": 29.591636035552273,
    "time": 7543.946533203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (if (!= (+ (pow (exp x) 2.0) (fma (exp x) 2.0 1.0)) 0.0) (/ (fma (+ (pow (exp x) 2.0) 1.0) (+ (pow (exp x) 2.0) 1.0) (* (exp (+ x x)) -4.0)) (+ (pow (exp x) 2.0) (fma (exp x) 2.0 1.0))) (- (pow (exp x) 2.0) (fma (exp x) 2.0 -1.0))) (exp x))",
    "output_parens": 30,
    "avg_bits_err_input": 29.516741666768688,
    "avg_bits_err_output": 29.206917867773534,
    "avg_bits_err_improve": 0.3098237989951542,
    "time": 21162.465576171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ (/ 2.0 (+ 1.0 x)) 2.0) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 9.27282688135644,
    "avg_bits_err_output": 9.272576881356441,
    "avg_bits_err_improve": 0.00024999999999941735,
    "time": 18776.977294921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (if (!= (+ (tan (+ x eps)) 1.0) 0.0) (/ (* (tan (+ x eps)) (+ (tan (+ x eps)) 1.0)) (+ (tan (+ x eps)) 1.0)) (tan (+ x eps))) (tan x))",
    "output_parens": 19,
    "avg_bits_err_input": 36.824550139501774,
    "avg_bits_err_output": 36.853384995062996,
    "avg_bits_err_improve": -0.028834855561221673,
    "time": 22662.82421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.3118285325049,
    "avg_bits_err_output": 0.16534680468885218,
    "avg_bits_err_improve": 30.14648172781605,
    "time": 13466.2021484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.076640996947305,
    "avg_bits_err_output": 21.958944431346083,
    "avg_bits_err_improve": 15.117696565601221,
    "time": 19905.769775390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (+ (/ 1.0 (sqrt (+ 1.0 x))) (/ -1.0 (sqrt x))) (* (sqrt x) (/ -1.0 (sqrt x))))",
    "output_parens": 11,
    "avg_bits_err_input": 20.160534528008185,
    "avg_bits_err_output": 20.176678680086212,
    "avg_bits_err_improve": -0.01614415207802722,
    "time": 16757.26025390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 14.638241763027859,
    "avg_bits_err_output": 14.638241763027859,
    "avg_bits_err_improve": 0,
    "time": 7180.9736328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.50977604596259,
    "avg_bits_err_output": 1.410675545594294,
    "avg_bits_err_improve": 28.099100500368294,
    "time": 25613.991455078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (- m (* m m)) v) (+ (- 1.0 m) (* (/ m v) (- m (* m m)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.07411804531403245,
    "avg_bits_err_output": 0.07775391956416637,
    "avg_bits_err_improve": -0.0036358742501339247,
    "time": 13801.564453125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* (* b (+ a a)) -2.0) (/ (/ 4.0 a) b))",
    "output_parens": 6,
    "avg_bits_err_input": 16.018193993929692,
    "avg_bits_err_output": 0.2835171019691253,
    "avg_bits_err_improve": 15.734676891960568,
    "time": 12752.342529296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (+ (* (/ PI 1440.0) (+ angle (+ angle angle))) (* (/ PI 1440.0) (+ angle (* (- angle (- angle)) 2.0)))))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 20,
    "avg_bits_err_input": 20.331947925664565,
    "avg_bits_err_output": 20.348116853275304,
    "avg_bits_err_improve": -0.016168927610738848,
    "time": 37056.571533203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) -5e+238) (* (if (!= (* (sin (* PI (/ angle 180.0))) (* 2.0 (pow b 2.0))) 0.0) (fma (* 2.0 (pow (* (sin (* PI (/ angle 180.0))) a) 2.0)) (/ (- (pow b 2.0)) (* (pow b 2.0) (sin (* PI (/ angle 180.0))))) (/ 1.0 (/ (/ 0.5 (pow b 2.0)) (sin (* PI (/ angle 180.0)))))) (* (sin (* PI (/ angle 180.0))) (+ (* (pow a 2.0) -2.0) (* 2.0 (pow b 2.0))))) (cos (* PI (/ angle 180.0)))) (if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) 2e+231) (* 2.0 (* (- (pow a 2.0) (pow b 2.0)) (/ (sin (* (+ (+ angle angle) (+ angle (+ (+ angle angle) (+ angle (+ angle angle))))) (/ PI 720.0))) -2.0))) (* (if (!= (* (sin (* PI (/ angle 180.0))) (* 2.0 (pow b 2.0))) 0.0) (fma (* 2.0 (pow (* (sin (* PI (/ angle 180.0))) a) 2.0)) (/ (- (pow b 2.0)) (* (pow b 2.0) (sin (* PI (/ angle 180.0))))) (/ 1.0 (/ (/ 0.5 (pow b 2.0)) (sin (* PI (/ angle 180.0)))))) (* (sin (* PI (/ angle 180.0))) (+ (* (pow a 2.0) -2.0) (* 2.0 (pow b 2.0))))) (cos (* PI (/ angle 180.0))))))",
    "output_parens": 130,
    "avg_bits_err_input": 31.72152342700583,
    "avg_bits_err_output": 29.657670774026073,
    "avg_bits_err_improve": 2.063852652979758,
    "time": 39557.3125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (if (!= PI 0.0) (/ (* (if (!= (* PI (/ angle -180.0)) 0.0) (/ 1.0 (/ (/ 1.0 PI) (/ angle 180.0))) (* PI (/ angle 180.0))) PI) PI) (* PI (/ angle 180.0))))) 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 20.567626989963102,
    "avg_bits_err_output": 20.569096269741713,
    "avg_bits_err_improve": -0.00146927977861111,
    "time": 43357.131103515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.18167932343849155,
    "avg_bits_err_output": 0.1760498429614923,
    "avg_bits_err_improve": 0.005629480476999266,
    "time": 21879.522216796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3253321527932952,
    "avg_bits_err_output": 0.3141717054206411,
    "avg_bits_err_improve": 0.011160447372654092,
    "time": 19516.135009765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (/ e (+ 1.0 (* e (cos v)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13404248125036058,
    "avg_bits_err_output": 0.13496936093777043,
    "avg_bits_err_improve": -0.0009268796874098428,
    "time": 15842.513671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi2) (* (cos phi1) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.773023324629563,
    "avg_bits_err_output": 16.766391381084418,
    "avg_bits_err_improve": 0.006631943545144736,
    "time": 33776.89794921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c 4.0) (- (- b) (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 52.41577278449764,
    "avg_bits_err_output": 0.17526672969029447,
    "avg_bits_err_improve": 52.24050605480735,
    "time": 29407.728759765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* c a) (* b b)))) 0.0) (* (* a -4.0) (/ c (+ b (sqrt (fma -4.0 (* c a) (* b b)))))) (- (sqrt (fma -4.0 (* c a) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.773278837012505,
    "avg_bits_err_output": 0.3400695660248419,
    "avg_bits_err_improve": 28.433209270987664,
    "time": 23855.2373046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.91716270595241,
    "avg_bits_err_output": 0.23296934124656699,
    "avg_bits_err_improve": 43.68419336470584,
    "time": 28772.8955078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.32e+154) (if (!= (/ b (* a -2.0)) 0.0) (+ (/ 1.0 (/ 1.0 (/ b (* a -2.0)))) (* (/ 0.0 (* a 2.0)) (- (/ b b) (/ 0.0 (* a -4.0))))) (/ (/ (- b (sqrt (fma b b (* a (* c -4.0))))) -2.0) a)) (if (<= b -5.2e-190) (+ (/ (sqrt (+ (* b b) (* a (* c -4.0)))) (* a 2.0)) (/ b (* a -2.0))) (/ (if (!= (- b) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))))",
    "output_parens": 56,
    "avg_bits_err_input": 34.1542325955339,
    "avg_bits_err_output": 20.777067272851195,
    "avg_bits_err_improve": 13.377165322682703,
    "time": 26416.73828125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (* (cos phi1) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1))) (cos phi1)) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.9275932301321357,
    "avg_bits_err_output": 0.931289676168201,
    "avg_bits_err_improve": -0.0036964460360653373,
    "time": 31163.89599609375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(- (log (exp (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 29.428468357254232,
    "avg_bits_err_output": 29.429804032978925,
    "avg_bits_err_improve": -0.001335675724693175,
    "time": 22475.569091796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (!= (+ (/ (exp (* x -2.0)) (- -1.0 (exp (* x -2.0)))) (/ 1.0 (- -1.0 (exp (* x -2.0))))) 0.0) (/ (/ (expm1 (* x -2.0)) (+ 1.0 (exp (* x -2.0)))) (+ (/ (exp (* x -2.0)) (- -1.0 (exp (* x -2.0)))) (/ 1.0 (- -1.0 (exp (* x -2.0)))))) (/ (expm1 (* x -2.0)) (- -1.0 (exp (* x -2.0)))))",
    "output_parens": 37,
    "avg_bits_err_input": 58.248533931562456,
    "avg_bits_err_output": 0.6178443609377705,
    "avg_bits_err_improve": 57.63068957062468,
    "time": 22942.126953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x 2.0)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 58.18737650829796,
    "avg_bits_err_output": 0.05182312031259015,
    "avg_bits_err_improve": 58.13555338798537,
    "time": 9221.51171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(log (expm1 (log1p (exp (/ 2.0 (+ (exp x) (exp (- x))))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.009026789890100096,
    "avg_bits_err_output": 0.16410507536459276,
    "avg_bits_err_improve": -0.15507828547449268,
    "time": 4166.126708984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.761290241011864,
    "avg_bits_err_output": 32.761290241011864,
    "avg_bits_err_improve": 0,
    "time": 4472.04541015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(/ (- (exp (log1p (log (/ (- -1.0 x) (+ -1.0 x))))) 1.0) 2.0)",
    "output_parens": 8,
    "avg_bits_err_input": 58.62976193228778,
    "avg_bits_err_output": 58.683558324860314,
    "avg_bits_err_improve": -0.05379639257253643,
    "time": 20771.910888671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05073836132445107,
    "avg_bits_err_output": 0.05127124062518029,
    "avg_bits_err_improve": -0.0005328793007292193,
    "time": 2601.2744140625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* (cos t) (* eh (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12277124062518029,
    "avg_bits_err_output": 0.12219812031259016,
    "avg_bits_err_improve": 0.0005731203125901307,
    "time": 26086.51513671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12832312031259013,
    "avg_bits_err_output": 0.12832312031259013,
    "avg_bits_err_improve": 0,
    "time": 19010.012451171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* lambda1 (* (cos (/ phi2 2.0)) (cos (/ phi1 -2.0)))) (fma (sin (/ phi1 2.0)) (* (sin (/ phi2 2.0)) (- lambda1 lambda2)) (* (cos (/ phi2 2.0)) (* (cos (/ phi1 -2.0)) lambda2)))) (- phi1 phi2)))",
    "output_parens": 23,
    "avg_bits_err_input": 39.425490359356836,
    "avg_bits_err_output": 0.13188850884763498,
    "avg_bits_err_improve": 39.2936018505092,
    "time": 31511.29443359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.467379223809136,
    "avg_bits_err_output": 0.011271240625180288,
    "avg_bits_err_improve": 14.456107983183955,
    "time": 7879.27001953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (+ (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) (fma (- (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) (sin phi1) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 47,
    "avg_bits_err_input": 0.15031926026065223,
    "avg_bits_err_output": 0.14702582568457456,
    "avg_bits_err_improve": 0.0032934345760776695,
    "time": 42469.945068359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.432124763581655,
    "avg_bits_err_output": 0.17988477500432684,
    "avg_bits_err_improve": 52.25223998857733,
    "time": 26682.961181640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* a -3.0)))) (- b)) 0.0) (* (* a -3.0) (/ c (- (sqrt (fma b b (* c (* a -3.0)))) (- b)))) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.98665986906457,
    "avg_bits_err_output": 0.3393902425863504,
    "avg_bits_err_improve": 28.64726962647822,
    "time": 37604.850830078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.988148458846915,
    "avg_bits_err_output": 0.24230018907088313,
    "avg_bits_err_improve": 43.74584826977603,
    "time": 31930.79443359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma b b (* a (* c -3.0)))))) (* a 3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.200232836986736,
    "avg_bits_err_output": 22.09398019853001,
    "avg_bits_err_improve": 12.106252638456727,
    "time": 25026.537841796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (log (exp (cos (- lambda1 lambda2)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.309146663637202,
    "avg_bits_err_output": 13.319010284931155,
    "avg_bits_err_improve": -0.009863621293952463,
    "time": 37111.405517578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.22226749814124,
    "avg_bits_err_output": 0.5290098950059389,
    "avg_bits_err_improve": 28.6932576031353,
    "time": 21221.19189453125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.013125,
    "avg_bits_err_output": 0.013125,
    "avg_bits_err_improve": 0,
    "time": 5121.668701171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (- 1.0 (/ x (+ x -1.0))) (- (/ 1.0 (+ x -1.0)))) (+ 1.0 x))",
    "output_parens": 9,
    "avg_bits_err_input": 14.034993816559629,
    "avg_bits_err_output": 12.206121934191346,
    "avg_bits_err_improve": 1.8288718823682828,
    "time": 17687.0625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.25e-303) (* (sqrt (- F)) (* (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) (- A))) (/ (sqrt (fma 2.0 (pow B 2.0) (* A (* C -8.0)))) (- (* C (* A 4.0)) (pow B 2.0))))) (/ (* (sqrt F) (sqrt (* (* 2.0 (- (pow B 2.0) (* A (* C 4.0)))) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* 4.0 C)) (pow B 2.0))))",
    "output_parens": 46,
    "avg_bits_err_input": 51.961170785148546,
    "avg_bits_err_output": 46.76776385765099,
    "avg_bits_err_improve": 5.193406927497556,
    "time": 38191.46435546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -4.4e+20) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))) 0.0) (/ (- (pow B 2.0)) (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))) (- C (+ A (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))))))) PI)) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (* (- C A) (- C A)) (pow B 2.0)))))) PI)))",
    "output_parens": 46,
    "avg_bits_err_input": 29.392346234756975,
    "avg_bits_err_output": 26.83621642905745,
    "avg_bits_err_improve": 2.5561298056995234,
    "time": 26937.143310546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -4.9e-173) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- F))) (/ (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt F)) (/ (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.00291471876566,
    "avg_bits_err_output": 47.13868404023341,
    "avg_bits_err_improve": 4.864230678532252,
    "time": 44584.076171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.184989911331883,
    "avg_bits_err_output": 15.184989911331883,
    "avg_bits_err_improve": 0,
    "time": 23794.906005859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-242) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (if (<= g 5e+196) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) (- g)) 0.0) (* h (/ h (- (- g) (sqrt (fma g g (* h (- h))))))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- g h)) (sqrt (+ g h))))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))))))",
    "output_parens": 90,
    "avg_bits_err_input": 36.10907955477037,
    "avg_bits_err_output": 6.61341938867746,
    "avg_bits_err_improve": 29.495660166092907,
    "time": 37744.112548828125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (* 2.0 (fma (+ (* 2.0 PI) (acos (/ (- g) h))) -0.16666666666666666 PI))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9885077078205238,
    "avg_bits_err_output": 0.032221804688852176,
    "avg_bits_err_improve": 0.9562859031316716,
    "time": 22574.349365234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log1p (expm1 (/ (exp a) (+ (exp a) (exp b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.6606981203125901,
    "avg_bits_err_output": 0.6648161656266227,
    "avg_bits_err_improve": -0.004118045314032592,
    "time": 5114.70751953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -4e+276) (/ (* a2 (/ a1 b1)) b2) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-321) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 4e-307) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+246) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.550700597999379,
    "avg_bits_err_output": 2.9675429944142957,
    "avg_bits_err_improve": 8.583157603585082,
    "time": 11441.871826171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5152431164648773,
    "avg_bits_err_output": 0.43469812031259014,
    "avg_bits_err_improve": 0.08054499615228716,
    "time": 9229.41845703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.02) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 20000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.11708979415488,
    "avg_bits_err_output": 0.186286942643423,
    "avg_bits_err_improve": 52.93080285151146,
    "time": 12291.969482421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.6611866482956055,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.6611866482956055,
    "time": 2375.555908203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 2.0 (* x 2.0)) (+ x (+ x 2.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.0155,
    "avg_bits_err_output": 0.018625,
    "avg_bits_err_improve": -0.0031249999999999993,
    "time": 4149.5517578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1357.8974609375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= r -5e+79) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* (* w (* w r)) (/ (- 0.375 (* v 0.25)) (- 1.0 v))) r) 4.5)) (if (<= r 1e-18) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* w (* (* r r) (* (- 0.375 (* v 0.25)) (/ w (- 1.0 v))))) 4.5)) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* (* w (* w r)) (/ (- 0.375 (* v 0.25)) (- 1.0 v))) r) 4.5))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.560425494193913,
    "avg_bits_err_output": 0.2944458824027355,
    "avg_bits_err_improve": 12.265979611791177,
    "time": 24255.36962890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (if (!= (* 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0))) 0.0) (* (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* x2 2.0)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* x1 x1) (fma (/ (- (fma x1 (* x1 3.0) (* x2 2.0)) x1) (fma x1 x1 1.0)) 4.0 -6.0) (* (- 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 2.0)) x1) (fma x1 x1 1.0))) (* (- x1 (fma x1 (* x1 3.0) (* x2 2.0))) (* x1 (/ 2.0 (fma x1 x1 1.0))))))))) (fma (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (/ 3.0 (fma x1 x1 1.0)) x1)) (- (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1)) (/ 0.0 (fma x1 x1 1.0)))) (fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (/ (* x1 2.0) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* x1 (* x1 (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)))))))))))",
    "output_parens": 115,
    "avg_bits_err_input": 0.5183431564370132,
    "avg_bits_err_output": 0.3078169261953206,
    "avg_bits_err_improve": 0.21052623024169265,
    "time": 80416.1220703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.08953280509871,
    "avg_bits_err_output": 1.3328160756775498,
    "avg_bits_err_improve": 16.75671672942116,
    "time": 11902.9853515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* (* x x) (* x -0.12900613773279798)) (* 0.954929658551372 (- x)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.2636062031259014,
    "avg_bits_err_output": 0.18745056406367183,
    "avg_bits_err_improve": 0.07615563906222955,
    "time": 7815.512451171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0026981203125901448,
    "avg_bits_err_output": 0.0026981203125901448,
    "avg_bits_err_improve": 0,
    "time": 2622.76953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (- (/ (/ (/ PI 2.0) a) (- b a)) (/ (/ PI 2.0) (* b (- b a)))) (+ b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.646059466340832,
    "avg_bits_err_output": 0.24775037656727747,
    "avg_bits_err_improve": 14.398309089773555,
    "time": 17502.390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (/ (exp (- (- x (* eps x)))) eps) 0.0) (+ (exp (- (* x eps) x)) (+ (+ (/ (- 1.0 (/ 1.0 eps)) (exp (fma x eps x))) 0.0) (/ (exp (* (- (* x eps) x) 2.0)) (* eps (exp (- (* x eps) x)))))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x)))) 2.0)",
    "output_parens": 33,
    "avg_bits_err_input": 29.306274922815316,
    "avg_bits_err_output": 24.838496066089142,
    "avg_bits_err_improve": 4.467778856726174,
    "time": 22400.567138671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.018875,
    "avg_bits_err_output": 0.018875,
    "avg_bits_err_improve": 0,
    "time": 4532.11962890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.023,
    "avg_bits_err_output": 0.023,
    "avg_bits_err_improve": 0,
    "time": 7625.88330078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (fma (* 2.0 (/ t (+ 1.0 t))) (* 2.0 (/ t (+ 1.0 t))) 1.0) (fma (* 2.0 (/ t (+ 1.0 t))) (* 2.0 (/ t (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.04675,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 0.03975,
    "time": 17598.70556640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3276.64990234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 9048.813720703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2760.338623046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8139700812676445,
    "avg_bits_err_output": 0.24525,
    "avg_bits_err_improve": 7.568720081267644,
    "time": 38183.208251953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.418636990969528,
    "avg_bits_err_output": 7.418636990969528,
    "avg_bits_err_improve": 0,
    "time": 16766.167724609375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (+ (* x (+ eps eps)) (* eps eps)) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 15.505556957623671,
    "avg_bits_err_output": 0.03049282666678694,
    "avg_bits_err_improve": 15.475064130956884,
    "time": 10963.241455078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (exp (* x (* x 10.0))) (cos x)) 0.0) (/ 1.0 (/ 1.0 (* (pow (exp (* x x)) 10.0) (+ (+ (cos x) -1.0) 1.0)))) (* (pow (exp (* x x)) 10.0) (cos x)))",
    "output_parens": 21,
    "avg_bits_err_input": 3.5236648542646294,
    "avg_bits_err_output": 3.0351532625126065,
    "avg_bits_err_improve": 0.48851159175202286,
    "time": 23891.518798828125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 15.070886192041119,
    "avg_bits_err_output": 15.070886192041119,
    "avg_bits_err_improve": 0,
    "time": 13278.627685546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.51272108009075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.51272108009075,
    "time": 3999.989990234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.840564387060496,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 38.840064387060494,
    "time": 3975.07421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (- 1.7e+308 (+ -1.7e+308 (* t +inf.0))) -2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.29821936093777035,
    "avg_bits_err_improve": 63.70178063906223,
    "time": 19011.859130859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (* t (* t 2e-16)) 2e-16)",
    "output_parens": 3,
    "avg_bits_err_input": 61.84324597984583,
    "avg_bits_err_output": 0.39858533906799903,
    "avg_bits_err_improve": 61.44466064077783,
    "time": 14730.35791015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.83041998751424,
    "avg_bits_err_output": 21.764935758397467,
    "avg_bits_err_improve": 12.065484229116773,
    "time": 25705.396728515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.32e+154) (if (!= (/ b (* a -2.0)) 0.0) (+ (/ 1.0 (/ 1.0 (/ b (* a -2.0)))) (* (/ 0.0 (* a 2.0)) (- (/ b b) (/ 0.0 (* a -4.0))))) (/ (/ (- b (sqrt (fma b b (* a (* c -4.0))))) -2.0) a)) (if (<= b -5.2e-190) (+ (/ (sqrt (+ (* b b) (* a (* c -4.0)))) (* a 2.0)) (/ b (* a -2.0))) (/ (if (!= (- b) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))))",
    "output_parens": 56,
    "avg_bits_err_input": 34.1542325955339,
    "avg_bits_err_output": 20.777067272851195,
    "avg_bits_err_improve": 13.377165322682703,
    "time": 27514.84228515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2323.61669921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.153440145217154,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 40.14206514521715,
    "time": 4000.512451171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (fma x x (* y y)))",
    "output_parens": 6,
    "avg_bits_err_input": 20.24408881976937,
    "avg_bits_err_output": 20.24333881976937,
    "avg_bits_err_improve": 0.0007500000000000284,
    "time": 6475.819091796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6807592107043496,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6807592107043496,
    "time": 6855.57763671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ (+ b c) d))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03975,
    "avg_bits_err_output": 0.03975,
    "avg_bits_err_improve": 0,
    "time": 3232.07177734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019896240625180292,
    "avg_bits_err_output": 0.010625,
    "avg_bits_err_improve": 0.009271240625180291,
    "time": 2524.9169921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0135,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.013125,
    "time": 2870.47314453125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 1595.26025390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40911597813022865,
    "avg_bits_err_output": 0.24325,
    "avg_bits_err_improve": 0.16586597813022866,
    "time": 7757.256103515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (log (+ 1.0 (expm1 (- 1.0 (/ (+ 1.0 (cos (* x 2.0))) 2.0))))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 17,
    "avg_bits_err_input": 29.737439948755863,
    "avg_bits_err_output": 29.739550350836332,
    "avg_bits_err_improve": -0.002110402080468532,
    "time": 13787.310791015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (if (!= (sqrt (- 0.0 (- eps (* x x)))) 0.0) (/ (+ (- 0.0 (- eps (* x x))) (* x (sqrt (- 0.0 (- eps (* x x)))))) (sqrt (- 0.0 (- eps (* x x))))) (+ x (sqrt (- 0.0 (- eps (* x x))))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 36,
    "avg_bits_err_input": 24.378553841773787,
    "avg_bits_err_output": 0.06114868437626201,
    "avg_bits_err_improve": 24.317405157397523,
    "time": 13553.753662109375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (* x x) (- (pow (sin x) 2.0))) 0.0) (if (!= (/ (pow (* x x) 2.0) (fma x x (pow (sin x) 2.0))) 0.0) (/ (fma (/ (pow (* x x) 2.0) (fma x x (pow (sin x) 2.0))) (/ (pow (* x x) 2.0) (fma x x (pow (sin x) 2.0))) (* (/ (pow (* x x) 2.0) (fma x x (pow (sin x) 2.0))) (/ (pow (sin x) 4.0) (- (fma x x (pow (sin x) 2.0)))))) (/ (pow (* x x) 2.0) (fma x x (pow (sin x) 2.0)))) (/ (- (pow (* x x) 2.0) (pow (sin x) 4.0)) (fma x x (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 73,
    "avg_bits_err_input": 30.13032666123096,
    "avg_bits_err_output": 30.01548600759704,
    "avg_bits_err_improve": 0.11484065363391949,
    "time": 34689.411376953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006573120312590145,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.006073120312590144,
    "time": 3412.470458984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (/ (* (- 1.0 (pow (+ 1.0 (/ i n)) n)) -400.0) (/ (+ i (+ i (+ i i))) n)))",
    "output_parens": 25,
    "avg_bits_err_input": 47.562523908102385,
    "avg_bits_err_output": 13.56043025073427,
    "avg_bits_err_improve": 34.002093657368114,
    "time": 25176.22021484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (if (!= (/ c (fma d d (* c c))) 0.0) (/ 1.0 (/ 1.0 (/ c (fma d d (* c c))))) (/ c (fma d d (* c c))))))",
    "output_parens": 19,
    "avg_bits_err_input": 26.13673888214304,
    "avg_bits_err_output": 23.16145075052779,
    "avg_bits_err_improve": 2.9752881316152475,
    "time": 16149.05615234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 2e+303) (/ (if (!= (* a d) 0.0) (fma a d (+ (* b c) (* (- d) (+ a a)))) (- (* b c) (* a d))) (+ (* c c) (* d d))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 53,
    "avg_bits_err_input": 25.721552241386195,
    "avg_bits_err_output": 22.294685619698328,
    "avg_bits_err_improve": 3.426866621687868,
    "time": 17012.9599609375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (- (* ux maxCos) ux))",
    "output_parens": 3,
    "avg_bits_err_input": 0.033875,
    "avg_bits_err_output": 0.021859921543825708,
    "avg_bits_err_improve": 0.012015078456174295,
    "time": 6973.330078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ ux (+ -1.0 (- (+ 1.0 (* ux (* maxCos (- ux (fma ux maxCos 1.0))))) (* ux (* (+ maxCos -1.0) (- 1.0 ux))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.52321638343316,
    "avg_bits_err_output": 11.894756562154038,
    "avg_bits_err_improve": 1.6284598212791224,
    "time": 32819.25634765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (- (- 1.0 (- (fma ux maxCos 1.0) ux)) (* (- (fma ux maxCos 1.0) ux) (* ux (- maxCos 1.0))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.563306556753554,
    "avg_bits_err_output": 11.26418672376555,
    "avg_bits_err_improve": 2.299119832988005,
    "time": 29233.954345703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) xi) (fma (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (- maxCos (* ux maxCos)) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.3314456029260001,
    "avg_bits_err_output": 0.31937936701080166,
    "avg_bits_err_improve": 0.012066235915198453,
    "time": 40347.0185546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax)))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.19989265691970173,
    "avg_bits_err_output": 0.19989265691970173,
    "avg_bits_err_improve": 0,
    "time": 33001.42578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sin (* 6.28318530718 u2)) (log1p (expm1 (sqrt (/ u1 (- 1.0 u1))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5388518745975742,
    "avg_bits_err_output": 0.5468220703527968,
    "avg_bits_err_improve": -0.00797019575522262,
    "time": 21155.240966796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(if (!= (* (- 1.0 (cos (* 6.28318530718 u2))) (sqrt (/ u1 (- 1.0 u1)))) 0.0) (/ (- (* (sqrt (/ u1 (- 1.0 u1))) (* (- 1.0 (cos (* 6.28318530718 u2))) (sqrt (/ u1 (- 1.0 u1))))) (* (* (- 1.0 (cos (* 6.28318530718 u2))) (sqrt (/ u1 (- 1.0 u1)))) (* (- 1.0 (cos (* 6.28318530718 u2))) (sqrt (/ u1 (- 1.0 u1)))))) (* (- 1.0 (cos (* 6.28318530718 u2))) (sqrt (/ u1 (- 1.0 u1))))) (* (cos (* 6.28318530718 u2)) (sqrt (/ u1 (- 1.0 u1)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.3193740149427155,
    "avg_bits_err_output": 0.3984030589045939,
    "avg_bits_err_improve": -0.07902904396187838,
    "time": 21751.92822265625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.33106943524805477,
    "avg_bits_err_output": 0.3312240651477174,
    "avg_bits_err_improve": -0.0001546298996626394,
    "time": 40509.779052734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (* (expm1 (log1p (exp (/ x (* s -2.0))))) (if (!= (exp (/ x (* s -2.0))) 0.0) (/ 1.0 (/ 1.0 (exp (/ x (* s -2.0))))) (exp (/ x (* s -2.0)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.0566284130638754,
    "avg_bits_err_output": 0.06716519285812947,
    "avg_bits_err_improve": -0.010536779794254068,
    "time": 11737.73193359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.16613285452224863,
    "avg_bits_err_output": 0.11143050536168281,
    "avg_bits_err_improve": 0.05470234916056582,
    "time": 20432.5693359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6683661899137501,
    "avg_bits_err_output": 0.6683661899137501,
    "avg_bits_err_improve": 0,
    "time": 23756.284423828125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.1596515861568558,
    "avg_bits_err_output": 0.15646355769904188,
    "avg_bits_err_improve": 0.0031880284578139073,
    "time": 19374.34765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (- (+ (* (/ sinTheta_O (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) (/ sinTheta_O -4.0)) (* eta eta)) (/ (* sinTheta_O (- (/ sinTheta_O 2.0) (/ sinTheta_O -4.0))) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.5288712353957905,
    "avg_bits_err_output": 2.5386013793857622,
    "avg_bits_err_improve": -0.00973014398997174,
    "time": 36974.595703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ (* (/ 0.5 v) (/ 0.5 v)) (* (sinh (/ 1.0 v)) (exp (/ (* sinTheta_i sinTheta_O) v)))) (+ cosTheta_i cosTheta_i)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.46140259357247504,
    "avg_bits_err_output": 0.3518120309111558,
    "avg_bits_err_improve": 0.10959056266131922,
    "time": 29495.287353515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ (+ (- (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (/ 1.0 v)) 0.6931) (log (/ 0.5 v))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.13207255135387566,
    "avg_bits_err_output": 0.13207255135387566,
    "avg_bits_err_improve": 0,
    "time": 9998.26220703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow (pow alpha PI) 2.0))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4592061850091888,
    "avg_bits_err_output": 0.42174209379028815,
    "avg_bits_err_improve": 0.03746409121890065,
    "time": 25343.3701171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- -0.3333333333333333 (* u -1.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333)))))) s)",
    "output_parens": 14,
    "avg_bits_err_input": 1.3308150195375212,
    "avg_bits_err_output": 0.7692073617788995,
    "avg_bits_err_improve": 0.5616076577586218,
    "time": 26560.013427734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ (/ 2.0 (/ 2.0 (- 1.0 (* 4.0 u)))) (log (+ 1.0 (expm1 (pow (+ 1.0 (* u -4.0)) 2.0)))))) s) 2.0) (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 12.472208825576596,
    "avg_bits_err_output": 11.645976487637537,
    "avg_bits_err_improve": 0.826232337939059,
    "time": 22427.645751953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (* r -0.3333333333333333) s))) (* PI (* (/ s -0.16666666666666666) (- r)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.13923235097205922,
    "avg_bits_err_output": 0.14786477455514174,
    "avg_bits_err_improve": -0.008632423583082527,
    "time": 27042.450439453125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* u normAngle)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* u normAngle))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8455285600998349,
    "avg_bits_err_output": 0.6845863668884626,
    "avg_bits_err_improve": 0.16094219321137226,
    "time": 28029.36767578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (exp (* cosTheta cosTheta)) (* (sqrt PI) cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7076747669225678,
    "avg_bits_err_output": 0.477353563910672,
    "avg_bits_err_improve": 0.2303212030118958,
    "time": 23293.286376953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.505166915409903,
    "avg_bits_err_output": 0.5307398962198179,
    "avg_bits_err_improve": 12.974427019190086,
    "time": 19966.124755859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.554990548217358,
    "avg_bits_err_output": 0.3091342493518576,
    "avg_bits_err_improve": 13.245856298865501,
    "time": 20516.58154296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- alpha) (* (log1p (- u0)) alpha))",
    "output_parens": 5,
    "avg_bits_err_input": 14.06827126295669,
    "avg_bits_err_output": 0.33598364687698323,
    "avg_bits_err_improve": 13.732287616079708,
    "time": 16597.263671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ (/ cos2phi alphax) (- alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.607422848736979,
    "avg_bits_err_output": 0.5289648460862776,
    "avg_bits_err_improve": 12.078458002650702,
    "time": 19335.260986328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -5e+20) (- (* PI l) (/ 0.0 F)) (if (<= (* PI l) 100000000.0) (- (/ (* l (pow PI 2.0)) PI) (/ (/ (tan (* PI l)) F) F)) (- (* PI l) (/ 0.0 F))))",
    "output_parens": 20,
    "avg_bits_err_input": 16.648886789168525,
    "avg_bits_err_output": 0.607134130170766,
    "avg_bits_err_improve": 16.04175265899776,
    "time": 23317.372802734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.20313176194006882,
    "avg_bits_err_output": 0.14545264201415933,
    "avg_bits_err_improve": 0.05767911992590949,
    "time": 17393.0771484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.674082945768122,
    "avg_bits_err_output": 10.558004974720724,
    "avg_bits_err_improve": 3.116077971047398,
    "time": 23509.21337890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* (* PI f) -0.5))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0))",
    "output_parens": 31,
    "avg_bits_err_input": 61.512769494777324,
    "avg_bits_err_output": 1.6651850828684314,
    "avg_bits_err_improve": 59.84758441190889,
    "time": 44437.606689453125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.729269903665504,
    "avg_bits_err_output": 33.8878201076753,
    "avg_bits_err_improve": 8.8414497959902,
    "time": 27182.888916015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin th) (/ (sin ky) (hypot (sin kx) (sin ky))))",
    "output_parens": 7,
    "avg_bits_err_input": 3.613972633566915,
    "avg_bits_err_output": 0.21296973750504788,
    "avg_bits_err_improve": 3.401002896061867,
    "time": 30797.739501953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.0567992787880738,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 1.0500492787880737,
    "time": 10738.169921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (/ (* Om (/ Om Omc)) Omc)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.166034271136256,
    "avg_bits_err_output": 10.165784271136255,
    "avg_bits_err_improve": 0.0002500000000011937,
    "time": 21018.441162109375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -2.45e-105) (* (sqrt (* U (- (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= n -1e-267) (sqrt (* 2.0 (* U (* n (- t (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (* l (/ l Om))))))))) (if (<= n -5e-310) (* (sqrt (* U (- (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (* (sqrt (* U (- t (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* 2.0 (* l (/ l Om))))))) (sqrt (* 2.0 n))))))",
    "output_parens": 66,
    "avg_bits_err_input": 34.62495036196397,
    "avg_bits_err_output": 26.2195773607082,
    "avg_bits_err_improve": 8.405373001255768,
    "time": 42533.66259765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -5e-108) (/ 2.0 (* (/ (* (/ (/ k l) t) (* k (pow t 3.0))) t) (* (sin k) (/ (tan k) l)))) (if (<= t 1.45e-110) (/ 2.0 (* (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) l) (* (sin k) (/ (tan k) l)))) (if (<= t 3.6e-15) (/ 2.0 (* (* (pow t 3.0) (* k (/ (/ k l) t))) (/ (* (sin k) (/ (tan k) l)) t))) (if (<= t 5.7e+88) (/ 2.0 (* (/ k t) (/ (/ (* k (* (tan k) (* (pow t 3.0) (/ (sin k) l)))) t) l))) (/ 2.0 (/ (/ (* k (/ (* (* (tan k) (pow t 3.0)) (* (+ k k) (/ (sin k) l))) l)) t) (+ t t)))))))",
    "output_parens": 71,
    "avg_bits_err_input": 47.150159029512665,
    "avg_bits_err_output": 28.439214006424184,
    "avg_bits_err_improve": 18.71094502308848,
    "time": 45050.085693359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ 2.0 (/ (tan k) l)) (fma (pow t 3.0) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (sin k) l)) 0.0))",
    "output_parens": 12,
    "avg_bits_err_input": 32.954967263930065,
    "avg_bits_err_output": 27.10758790848243,
    "avg_bits_err_improve": 5.847379355447636,
    "time": 26158.2880859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (* a2 (/ a2 (sqrt 2.0))) (/ (* (+ a1 a1) (+ a1 a1)) (/ 8.0 (sqrt 2.0)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.5652188000230793,
    "avg_bits_err_output": 0.5968344015860299,
    "avg_bits_err_improve": -0.03161560156295051,
    "time": 24605.099365234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (pow (* 2.0 (* PI n)) (+ 0.5 (* k -0.5))) (sqrt k))",
    "output_parens": 7,
    "avg_bits_err_input": 0.506403650579543,
    "avg_bits_err_output": 0.45874791018442823,
    "avg_bits_err_improve": 0.04765574039511472,
    "time": 19473.311279296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (- (exp (+ l l)) (exp (fma l -1.0 l))) (exp l))) (cos (/ K 2.0))) U)",
    "output_parens": 12,
    "avg_bits_err_input": 17.422381916765367,
    "avg_bits_err_output": 17.41381006256732,
    "avg_bits_err_improve": 0.008571854198049067,
    "time": 25745.362548828125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) 1.0) (* (cos (if (!= (* K (/ (+ m n) 2.0)) 0.0) (* (fma (+ m n) (/ K 2.0) (- M)) (* K (/ (+ m n) (* K (+ m n))))) (fma (+ m n) (/ K 2.0) (- M)))) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K n) 0.0) (* (* n (+ n m)) (* K (/ K (* K n)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))))",
    "output_parens": 77,
    "avg_bits_err_input": 15.138600875798987,
    "avg_bits_err_output": 13.494271364796392,
    "avg_bits_err_improve": 1.6443295110025957,
    "time": 22151.364990234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (sqrt (+ 1.0 (pow (/ (/ U (* 2.0 J)) (cos (/ K 2.0))) 2.0))) (* (cos (/ K 2.0)) -2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 18.39296936093777,
    "avg_bits_err_output": 18.38715808281331,
    "avg_bits_err_improve": 0.005811278124458141,
    "time": 28685.936279296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (* (/ (* h (* M (/ D d))) (* l 4.0)) (* M (/ D d))))))",
    "output_parens": 11,
    "avg_bits_err_input": 14.148568107581532,
    "avg_bits_err_output": 8.646196102387158,
    "avg_bits_err_improve": 5.502372005194374,
    "time": 25516.032958984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= V -5e-309) (* c0 (* (sqrt (- (/ A l))) (sqrt (/ -1.0 V)))) (* c0 (* (sqrt (/ A l)) (sqrt (/ 1.0 V)))))",
    "output_parens": 15,
    "avg_bits_err_input": 19.35037798114036,
    "avg_bits_err_output": 11.562416543841994,
    "avg_bits_err_improve": 7.787961437298364,
    "time": 19214.089599609375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= d -1.14e+14) (/ (/ (* c0 (if (!= (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))))) (+ (* d (* d (/ c0 (* w (* h (* D D)))))) (sqrt (- (pow (* d (* d (/ c0 (* w (* h (* D D)))))) 2.0) (* M M)))))) w) 2.0) (if (<= d -6.4e-46) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma d (* d (/ (/ (/ c0 h) (* w D)) D)) M)) (sqrt (fma (* d d) (/ (/ (/ c0 h) (* w D)) D) (- M))) (* (* d d) (/ (/ (/ c0 h) (* w D)) D)))) (if (<= d -8.3e-82) (/ (/ (* c0 (if (!= (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* (/ d (* D h)) (/ c0 (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))))) (+ (* d (* d (/ c0 (* w (* h (* D D)))))) (sqrt (- (pow (* d (* d (/ c0 (* w (* h (* D D)))))) 2.0) (* M M)))))) w) 2.0) (if (<= d -2.3e-110) (* (/ c0 (* 2.0 w)) (fma c0 (* d (/ (/ (/ d D) h) (* D w))) (sqrt (- (pow (* d (* c0 (/ (/ (/ d D) h) (* D w)))) 2.0) (* M M))))) (if (<= d 1.06e+109) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* c0 (/ (/ d (* w h)) D)) D)) (sqrt (- (pow (* d (/ (* c0 (/ (/ d (* w h)) D)) D)) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* c0 (/ (/ d (* w h)) D)) D)) (sqrt (- (pow (* d (/ (* c0 (/ (/ d (* w h)) D)) D)) 2.0) (* M M))))) (fma d (/ (* c0 (/ (/ d (* w h)) D)) D) (sqrt (- (pow (* d (/ (* c0 (/ (/ d (* w h)) D)) D)) 2.0) (* M M)))))) (if (<= d 2.7e+209) (/ (/ (* c0 (if (!= (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* (/ d (* D h)) (/ c0 (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))))) (+ (* d (* d (/ c0 (* w (* h (* D D)))))) (sqrt (- (pow (* d (* d (/ c0 (* w (* h (* D D)))))) 2.0) (* M M)))))) w) 2.0) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* c0 (/ (/ d (* w h)) D)) D)) (sqrt (- (pow (* d (/ (* c0 (/ (/ d (* w h)) D)) D)) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* c0 (/ (/ d (* w h)) D)) D)) (sqrt (- (pow (* d (/ (* c0 (/ (/ d (* w h)) D)) D)) 2.0) (* M M))))) (fma d (/ (* c0 (/ (/ d (* w h)) D)) D) (sqrt (- (pow (* d (/ (* c0 (/ (/ d (* w h)) D)) D)) 2.0) (* M M))))))))))))",
    "output_parens": 344,
    "avg_bits_err_input": 60.05213465042429,
    "avg_bits_err_output": 34.37420461456916,
    "avg_bits_err_improve": 25.677930035855134,
    "time": 80126.43579101562,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) -2e+216) (* (* (pow (/ d h) 0.5) (if (!= (sqrt (/ d l)) 0.0) (/ (/ d l) (sqrt (/ d l))) (sqrt (/ d l)))) (- 1.0 (/ (* (/ (* (* M (* (/ D d) (* M D))) 0.5) 4.0) (/ h d)) l))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 2e+296) (* (sqrt (/ d l)) (* (fma 0.5 (* (/ h l) (pow (/ (* D M) (+ d d)) 2.0)) -1.0) (- (sqrt (/ d h))))) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- 1.0 (* h (* M (* (/ D (+ d d)) (* M (/ (/ D (+ d d)) (+ l l))))))))))",
    "output_parens": 87,
    "avg_bits_err_input": 26.719306999155272,
    "avg_bits_err_output": 21.7103452559488,
    "avg_bits_err_improve": 5.0089617432064735,
    "time": 49350.905517578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (exp (* 1.0 (log (if (!= (- (/ -0.5 (hypot 1.0 x)) 0.5) 0.0) (/ (+ 0.25 (/ -0.25 (fma x x 1.0))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x))))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 36,
    "avg_bits_err_input": 15.169975748055608,
    "avg_bits_err_output": 14.673480811565984,
    "avg_bits_err_improve": 0.49649493648962384,
    "time": 24825.0712890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (- 1.0 (* v v))) (* PI (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9848962406251803,
    "avg_bits_err_output": 0.01391748125036058,
    "avg_bits_err_improve": 0.9709787593748197,
    "time": 7444.6630859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (fma v (* v 5.0) -1.0) (* PI (- (sqrt (fma v (* v -6.0) 2.0))))) (- t (* v (* v t)))) 0.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.4319795188744793,
    "avg_bits_err_output": 0.11145996250072115,
    "avg_bits_err_improve": 0.3205195563737581,
    "time": 29465.74169921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (- 1.0 (* 3.0 (* v v)))) (/ (- (* (* v v) (sqrt 2.0)) (sqrt 2.0)) -4.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.0105,
    "avg_bits_err_output": 0.010198120312590144,
    "avg_bits_err_improve": 0.00030187968740985616,
    "time": 12395.264404296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5230027583132026,
    "avg_bits_err_output": 0.5230027583132026,
    "avg_bits_err_improve": 0,
    "time": 11064.352294921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.0467293448454136,
    "avg_bits_err_output": 2.0298543448454134,
    "avg_bits_err_improve": 0.016875000000000195,
    "time": 15248.536376953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (- EDonor (- Ec (+ Vef mu))) KbT)) -1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.01732905741540336,
    "avg_bits_err_output": 0.01732905741540336,
    "avg_bits_err_improve": 0,
    "time": 8959.029052734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (fma b (+ (* b (* b b)) (* b (* a (+ a a)))) (+ (pow a 4.0) (* b (* b 4.0)))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18503757405699392,
    "avg_bits_err_output": 0.06574715999043748,
    "avg_bits_err_improve": 0.11929041406655644,
    "time": 12359.260009765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (* (* b b) (+ (fma b b (* a a)) (* a a)))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.1950031027577738,
    "avg_bits_err_output": 0.1087477705281837,
    "avg_bits_err_improve": 0.0862553322295901,
    "time": 22143.1552734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (fma (fma a (- a (* a a)) (* b (* b (+ a 3.0)))) 4.0 (* a (* a (fma a a (* b b))))) (+ (* a (* a (* b b))) (pow b 4.0))) -1.0)",
    "output_parens": 18,
    "avg_bits_err_input": 0.19198460929168018,
    "avg_bits_err_output": 0.07764735175284215,
    "avg_bits_err_improve": 0.11433725753883803,
    "time": 25367.615234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (/ (exp (* 1.0 (log (if (!= (/ x (sqrt (fma x x (* 4.0 (* p p))))) 0.0) (/ (+ (* (/ x (sqrt (fma x x (* 4.0 (* p p))))) (/ x (sqrt (fma x x (* 4.0 (* p p)))))) (* (/ x (sqrt (fma x x (* 4.0 (* p p))))) (+ 2.0 (/ x (sqrt (fma x x (* 4.0 (* p p)))))))) (/ x (sqrt (fma x x (* 4.0 (* p p)))))) (+ 2.0 (* 2.0 (/ x (sqrt (fma x x (* 4.0 (* p p))))))))))) 2.0)))",
    "output_parens": 50,
    "avg_bits_err_input": 13.4454905073507,
    "avg_bits_err_output": 13.452718819688634,
    "avg_bits_err_improve": -0.007228312337934639,
    "time": 19662.2998046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.514317950428634,
    "avg_bits_err_output": 0.057125,
    "avg_bits_err_improve": 41.457192950428635,
    "time": 7747.323486328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (/ (pow (tan x) 2.0) (+ x (tan x)))) (- x (tan x))))",
    "output_parens": 19,
    "avg_bits_err_input": 31.622030420974493,
    "avg_bits_err_output": 31.093801868581014,
    "avg_bits_err_improve": 0.5282285523934789,
    "time": 24573.8076171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (- b_2) a) (if (<= b_2 -2.85e-223) (/ (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2) a) (/ (if (!= (- (- b_2) (sqrt (fma c (- a) (* b_2 b_2)))) 0.0) (* a (/ c (- (- b_2) (sqrt (fma c (- a) (* b_2 b_2)))))) (- (sqrt (fma c (- a) (* b_2 b_2))) b_2)) a)))",
    "output_parens": 34,
    "avg_bits_err_input": 33.66020273230366,
    "avg_bits_err_output": 20.32623646599062,
    "avg_bits_err_improve": 13.333966266313041,
    "time": 19527.15966796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.19653135953239,
    "avg_bits_err_output": 21.41122678678858,
    "avg_bits_err_improve": 12.785304572743815,
    "time": 18119.2607421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (exp (* 1.0 (log (- 1.0 (cos x))))) x) (/ 1.0 x))",
    "output_parens": 8,
    "avg_bits_err_input": 30.767338452662628,
    "avg_bits_err_output": 30.0559404930861,
    "avg_bits_err_improve": 0.7113979595765265,
    "time": 16283.56982421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (/ (if (!= (+ (pow (+ x 1.0) (/ 2.0 n)) (pow x (/ 2.0 n))) 0.0) (/ (if (!= (+ (pow (+ x 1.0) (/ 4.0 n)) (pow x (/ 4.0 n))) 0.0) (/ (- (pow (+ x 1.0) (/ 8.0 n)) (pow x (/ 8.0 n))) (+ (pow (+ x 1.0) (/ 4.0 n)) (pow x (/ 4.0 n)))) (- (pow (+ x 1.0) (/ 4.0 n)) (pow x (/ 4.0 n)))) (+ (pow (+ x 1.0) (/ 2.0 n)) (pow x (/ 2.0 n)))) (- (pow (+ x 1.0) (/ 2.0 n)) (pow x (/ 2.0 n)))) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 69,
    "avg_bits_err_input": 33.01816708714132,
    "avg_bits_err_output": 33.00253246740807,
    "avg_bits_err_improve": 0.015634619733255306,
    "time": 25639.138916015625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (- (- (exp (log (+ 2.0 (exp (- (log1p N) (log N)))))) 1.0) 2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.59902153910503,
    "avg_bits_err_output": 29.5694172632772,
    "avg_bits_err_improve": 0.029604275827832538,
    "time": 11619.3408203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (- (/ (+ (/ -1.0 x) (/ (/ x x) (+ 1.0 x))) 2.0) (/ (log (+ 1.0 (expm1 (+ 1.0 (/ -1.0 (/ (+ x 1.0) x)))))) (+ x x))) 0.0)",
    "output_parens": 17,
    "avg_bits_err_input": 14.712999100824304,
    "avg_bits_err_output": 14.69965252622119,
    "avg_bits_err_improve": 0.013346574603113837,
    "time": 18293.427734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -7.5e-71) (fma (sin x) (- (sin eps)) (* (+ (cos eps) -1.0) (cos x))) (if (<= x 7.5e-89) (if (!= (+ (cos x) (cos (+ eps x))) 0.0) (/ (- (pow (sin x) 2.0) (* (sin (+ eps x)) (sin (+ eps x)))) (+ (cos x) (cos (+ eps x)))) (- (cos (+ eps x)) (cos x))) (fma (sin x) (- (sin eps)) (* (+ (cos eps) -1.0) (cos x)))))",
    "output_parens": 43,
    "avg_bits_err_input": 39.53647609230894,
    "avg_bits_err_output": 1.9512864498274385,
    "avg_bits_err_improve": 37.5851896424815,
    "time": 24359.446044921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.844376805081026,
    "avg_bits_err_output": 29.53493671831749,
    "avg_bits_err_improve": 0.3094400867635372,
    "time": 14702.689697265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 29.862912215081383,
    "avg_bits_err_output": 29.862912215081383,
    "avg_bits_err_improve": 0,
    "time": 24402.052978515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c 4.0) (- (- b) (pow (fma b b (* a (* c -4.0))) 0.5)))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.558811642659755,
    "avg_bits_err_output": 21.768910638559113,
    "avg_bits_err_improve": 11.789901004100642,
    "time": 23178.650634765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- b (sqrt (fma c (* a -4.0) (* b b))))) (/ a 0.25)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.80157756696032,
    "avg_bits_err_output": 21.498945829658087,
    "avg_bits_err_improve": 12.302631737302232,
    "time": 23737.101318359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(if (!= (+ 1.0 (/ (log1p (- x)) (log1p x))) 0.0) (/ (* (log1p (- x)) (/ (+ (/ (log1p (- x)) (log1p x)) 1.0) (log1p x))) (+ 1.0 (/ (log1p (- x)) (log1p x)))) (/ (log1p (- x)) (log1p x)))",
    "output_parens": 27,
    "avg_bits_err_input": 61.472647159634384,
    "avg_bits_err_output": 0.026358646876983187,
    "avg_bits_err_improve": 61.4462885127574,
    "time": 19294.552001953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00484071284103,
    "avg_bits_err_output": 44.22522210048003,
    "avg_bits_err_improve": 18.779618612361,
    "time": 11871.355712890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.49530586794207,
    "avg_bits_err_output": 58.45653321127815,
    "avg_bits_err_improve": 0.038772656663923044,
    "time": 18541.473876953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ -1.0 (expm1 (log1p (- (- (/ 1.0 x) (/ 1.0 (tan x))) -1.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 59.992713143387256,
    "avg_bits_err_output": 59.99272659394383,
    "avg_bits_err_improve": -1.3450556572536243e-05,
    "time": 29708.99609375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ (expm1 (* eps (+ a b))) (expm1 (* eps b))) (/ eps (expm1 (* eps a))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.24891967224722,
    "avg_bits_err_output": 29.229497253052056,
    "avg_bits_err_improve": 31.019422419195163,
    "time": 28037.47216796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.9159850089408,
    "avg_bits_err_output": 0.5197924812503607,
    "avg_bits_err_improve": 41.39619252769044,
    "time": 5680.051025390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.66431510498684,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.66381510498684,
    "time": 5973.765380859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.68898603451497,
    "avg_bits_err_output": 0.018374784063608936,
    "avg_bits_err_improve": 29.67061125045136,
    "time": 6532.663818359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (- (exp x) 2.0) (exp (- x))) 0.0) (/ (if (!= (- (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0))) (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0)))) 0.0) (/ (- (pow (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0))) 2.0) (* (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))) (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))))) (- (* (+ (exp (- x)) (- 2.0 (exp x))) (if (!= (+ 2.0 (+ (exp x) (exp (- x)))) 0.0) (/ (- 4.0 (* (+ (exp x) (exp (- x))) (+ (exp x) (exp (- x))))) (+ 2.0 (+ (exp x) (exp (- x))))) (- (- 2.0 (exp x)) (exp (- x))))) (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))))) (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0)))) (- (- (exp x) 2.0) (exp (- x)))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 110,
    "avg_bits_err_input": 29.529493374551613,
    "avg_bits_err_output": 29.35032975797082,
    "avg_bits_err_improve": 0.17916361658079438,
    "time": 29036.094482421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ (/ 2.0 x) (if (!= (/ 2.0 x) 0.0) (/ (/ (+ (/ 4.0 x) (* (/ 2.0 x) (+ x x))) x) (/ 2.0 x)) (/ (fma x 2.0 2.0) x))) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 9.719244606835552,
    "avg_bits_err_output": 9.724346285633858,
    "avg_bits_err_improve": -0.005101678798306253,
    "time": 24367.74755859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (tan (+ x eps)) 0.0) (+ (* (- (tan (+ x eps)) (tan x)) (/ (tan (+ x eps)) (tan (+ x eps)))) (fma (/ (tan x) (- (tan (+ x eps)))) (tan (+ x eps)) (* (tan (+ x eps)) (/ (tan x) (tan (+ x eps)))))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 34,
    "avg_bits_err_input": 36.767742998630105,
    "avg_bits_err_output": 36.769486039764566,
    "avg_bits_err_improve": -0.0017430411344605545,
    "time": 21226.385498046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.875174423587065,
    "avg_bits_err_output": 0.16828797031547468,
    "avg_bits_err_improve": 29.70688645327159,
    "time": 13648.95556640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(+ (* (sin x) (+ (cos eps) -1.0)) (- (- (* (sin eps) (cos x)))))",
    "output_parens": 10,
    "avg_bits_err_input": 37.066784457637866,
    "avg_bits_err_output": 0.3984038925586592,
    "avg_bits_err_improve": 36.668380565079204,
    "time": 18447.40283203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (!= (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (- x -1.0)))) 0.0) (/ (+ (- (/ 1.0 x) (/ 1.0 (+ 1.0 x))) (/ (if (!= (/ (/ -1.0 (+ 1.0 x)) (+ 1.0 x)) 0.0) (/ (fma (/ (/ -1.0 (+ 1.0 x)) (+ 1.0 x)) (/ (/ -1.0 (+ 1.0 x)) (+ 1.0 x)) (* (pow (/ 1.0 (+ 1.0 x)) 2.0) (/ (/ -1.0 (+ 1.0 x)) (+ 1.0 x)))) (/ (/ -1.0 (+ 1.0 x)) (+ 1.0 x))) (+ (pow (/ 1.0 (+ 1.0 x)) 2.0) (/ (/ -1.0 (+ 1.0 x)) (+ 1.0 x)))) (/ 1.0 (+ 1.0 x)))) (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (- x -1.0))))) (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (- x -1.0)))))",
    "output_parens": 65,
    "avg_bits_err_input": 19.157797650223724,
    "avg_bits_err_output": 19.11181628057617,
    "avg_bits_err_improve": 0.04598136964755284,
    "time": 15605.768798828125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (atan (+ N 1.0)) 0.0) (* (atan (+ N 1.0)) (exp (log1p (/ (- (atan N)) (atan (+ N 1.0)))))) (- (atan (+ N 1.0)) (atan N)))",
    "output_parens": 18,
    "avg_bits_err_input": 14.900590385858418,
    "avg_bits_err_output": 15.144553311037045,
    "avg_bits_err_improve": -0.24396292517862683,
    "time": 13492.630126953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.69295475452943,
    "avg_bits_err_output": 1.187781173875969,
    "avg_bits_err_improve": 28.505173580653462,
    "time": 26158.493896484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (- m (* m m)) v) (+ (- 1.0 m) (* (- 1.0 m) (/ (* m m) v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.07188136568158808,
    "avg_bits_err_output": 0.07338603574752607,
    "avg_bits_err_improve": -0.0015046700659379908,
    "time": 14188.005126953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b a) (/ (/ -1.0 b) a))",
    "output_parens": 4,
    "avg_bits_err_input": 16.143185580880708,
    "avg_bits_err_output": 0.2696095686416129,
    "avg_bits_err_improve": 15.873576012239095,
    "time": 11342.677978515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* (+ (+ angle angle) (+ (+ angle (+ angle angle)) (+ angle (+ angle angle)))) (/ PI 1440.0)))) 2.0) (pow (* b (+ (* (sin (* (/ PI 1440.0) angle)) (cos (* (/ PI 1440.0) (+ angle (* -2.0 (- (* angle -2.0) angle)))))) (* (sin (* (/ PI 1440.0) (+ angle (* -2.0 (- (* angle -2.0) angle))))) (cos (* (/ PI 1440.0) angle))))) 2.0))",
    "output_parens": 38,
    "avg_bits_err_input": 19.8618769896957,
    "avg_bits_err_output": 19.829917771020067,
    "avg_bits_err_improve": 0.03195921867563101,
    "time": 43389.2822265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (* (- (pow b 2.0) (pow a 2.0)) (sin (* angle (/ PI 180.0)))) (cos (* angle (/ PI -180.0)))))",
    "output_parens": 12,
    "avg_bits_err_input": 30.801951198756488,
    "avg_bits_err_output": 30.711292089189772,
    "avg_bits_err_improve": 0.0906591095667153,
    "time": 32891.95263671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (if (!= (* PI (/ angle -180.0)) 0.0) (/ 1.0 (/ 1.0 (* angle (/ PI 180.0)))) (* angle (/ PI 180.0))))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.388018091198553,
    "avg_bits_err_output": 20.39729700697493,
    "avg_bits_err_improve": -0.009278915776377517,
    "time": 38706.97705078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17553303878037732,
    "avg_bits_err_output": 0.17553303878037732,
    "avg_bits_err_improve": 0,
    "time": 18482.3369140625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3283543319995591,
    "avg_bits_err_output": 0.3142632861921381,
    "avg_bits_err_improve": 0.014091045807420988,
    "time": 19008.592041015625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.14111560156295072,
    "avg_bits_err_output": 0.14111560156295072,
    "avg_bits_err_improve": 0,
    "time": 18449.34716796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.785056858727277,
    "avg_bits_err_output": 16.781479311218582,
    "avg_bits_err_improve": 0.003577547508694323,
    "time": 36535.97705078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (/ (+ (* -4.0 (* a c)) (fma b b (fma c (* -4.0 a) (* b b)))) 2.0))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 28,
    "avg_bits_err_input": 52.5625467302506,
    "avg_bits_err_output": 0.167184210940655,
    "avg_bits_err_improve": 52.39536251930995,
    "time": 24318.18505859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.566420960658263,
    "avg_bits_err_output": 0.340505640636719,
    "avg_bits_err_improve": 28.225915320021546,
    "time": 28410.60986328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.77825332635467,
    "avg_bits_err_output": 0.23457838438203107,
    "avg_bits_err_improve": 43.54367494197264,
    "time": 31458.47802734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (if (!= (/ b (* a -2.0)) 0.0) (+ (/ b (* a -2.0)) (* (/ 0.0 (* a 2.0)) (- (/ b b) (/ 0.0 (* a -2.0))))) (/ (- 0.0 b) (* a 2.0))) (if (<= b -9e-309) (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) (/ (if (!= (- b) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))))",
    "output_parens": 49,
    "avg_bits_err_input": 33.555181521123515,
    "avg_bits_err_output": 20.418349034493044,
    "avg_bits_err_improve": 13.136832486630471,
    "time": 22714.900634765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (fma (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))) (pow (cos phi1) 2.0)) (cos phi1)) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.8698663842409012,
    "avg_bits_err_output": 0.8832610578740625,
    "avg_bits_err_improve": -0.01339467363316127,
    "time": 30939.140869140625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (+ (/ (/ 4.0 (+ 2.0 (/ 4.0 (+ 1.0 (exp (* -2.0 x)))))) (pow (+ 1.0 (exp (* -2.0 x))) 2.0)) (/ (+ (/ 8.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)) -4.0) (- (/ 8.0 (+ 1.0 (exp (* -2.0 x)))) -4.0))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 36,
    "avg_bits_err_input": 29.29529444909919,
    "avg_bits_err_output": 29.291122995787852,
    "avg_bits_err_improve": 0.004171453311336393,
    "time": 14579.884765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (!= (/ (pow (exp x) 2.0) (pow (+ (exp x) (exp (- x))) 2.0)) 0.0) (/ (/ (/ (expm1 (* x 4.0)) (pow (+ (exp x) (exp (- x))) 2.0)) (pow (+ (exp x) (exp (- x))) 2.0)) (/ (pow (exp x) 2.0) (pow (+ (exp x) (exp (- x))) 2.0))) (/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x)))))",
    "output_parens": 42,
    "avg_bits_err_input": 58.179648862205234,
    "avg_bits_err_output": 1.3323653964502726,
    "avg_bits_err_improve": 56.84728346575496,
    "time": 22939.04296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.116196462917856,
    "avg_bits_err_output": 0.021323120312590146,
    "avg_bits_err_improve": 58.09487334260527,
    "time": 9589.62890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007375,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 0,
    "time": 2907.51953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.35483755496477,
    "avg_bits_err_output": 32.35483755496477,
    "avg_bits_err_improve": 0,
    "time": 5086.66552734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (- (/ (- -1.0 x) (+ -1.0 (* x (- 2.0 x)))) (* (/ (- -1.0 x) (- x 1.0)) (/ x (- 1.0 x))))))",
    "output_parens": 14,
    "avg_bits_err_input": 58.48491139901325,
    "avg_bits_err_output": 58.4900651418113,
    "avg_bits_err_improve": -0.005153742798050587,
    "time": 18986.702880859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.026698120312590144,
    "avg_bits_err_output": 0.026698120312590144,
    "avg_bits_err_improve": 0,
    "time": 2718.9208984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (expm1 (log1p (cos (atan (/ eh (* ew (tan t)))))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1285,
    "avg_bits_err_output": 0.13050244375108175,
    "avg_bits_err_improve": -0.002002443751081745,
    "time": 23479.60009765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12584436093777043,
    "avg_bits_err_output": 0.12584436093777043,
    "avg_bits_err_improve": 0,
    "time": 27842.601806640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (cos (/ phi1 2.0)) (cos (/ phi2 2.0)) (- (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0)))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 39.12957355708429,
    "avg_bits_err_output": 0.11389239670679983,
    "avg_bits_err_improve": 39.01568116037749,
    "time": 32787.962646484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.485065143779895,
    "avg_bits_err_output": 14.485065143779895,
    "avg_bits_err_improve": 0,
    "time": 3454.7890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (log (+ 1.0 (expm1 (- (cos delta) (* (sin phi1) (sin (asin (fma (sin delta) (* (cos phi1) (cos theta)) (* (cos delta) (sin phi1))))))))))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.14518239233819433,
    "avg_bits_err_output": 0.17606128079396827,
    "avg_bits_err_improve": -0.03087888845577394,
    "time": 39948.10546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (- (* b b) (* c (* a -3.0))) 0.0) (/ (- (* (* b b) (- (* b b) 0.0)) (* (* c (* a -3.0)) (* c (* a -3.0)))) (- (* b b) (* c (* a -3.0)))) (fma a (* c -3.0) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 45,
    "avg_bits_err_input": 52.63803521654936,
    "avg_bits_err_output": 0.1819297000057691,
    "avg_bits_err_improve": 52.456105516543595,
    "time": 26000.974609375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* c (* -3.0 a)) 0.0) (/ (fma (* c (* -3.0 a)) (* c (* -3.0 a)) (* b (* b (* c (* -3.0 a))))) (* c (* -3.0 a))) (fma c (* -3.0 a) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 40,
    "avg_bits_err_input": 28.75543818824443,
    "avg_bits_err_output": 0.3496304478908203,
    "avg_bits_err_improve": 28.40580774035361,
    "time": 26113.839111328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.79604538061518,
    "avg_bits_err_output": 0.2418827078205225,
    "avg_bits_err_improve": 43.55416267279466,
    "time": 26415.251708984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* c (* a -3.0))))) 0.0) (* (/ c (+ b (sqrt (fma c (* a -3.0) (* b b))))) (* a -3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* a 3.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.60464308425093,
    "avg_bits_err_output": 21.762516834706172,
    "avg_bits_err_improve": 11.842126249544759,
    "time": 25649.51220703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.115325253846082,
    "avg_bits_err_output": 13.115325253846082,
    "avg_bits_err_improve": 0,
    "time": 39817.22509765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (- (* (/ x (+ x 1.0)) (+ x -1.0)) (+ x -1.0)) (+ x -1.0)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.524752988330512,
    "avg_bits_err_output": 24.840553393839517,
    "avg_bits_err_improve": 4.684199594490995,
    "time": 17850.677978515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.0105,
    "avg_bits_err_output": 0.0105,
    "avg_bits_err_improve": 0,
    "time": 5228.74658203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (/ -1.0 (+ x 1.0)) (+ -1.0 (/ x (+ x 1.0)))) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 14.755221738489459,
    "avg_bits_err_output": 12.827242760375189,
    "avg_bits_err_improve": 1.92797897811427,
    "time": 22386.056396484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.3e-307) (/ (* (sqrt (* F -2.0)) (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) (- A))))) (- (* A (* 4.0 C)) (pow B 2.0))) (/ (* (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (sqrt (* (+ (fma (- (* A (* C 4.0))) F (* A (* F (* C 4.0)))) (* F (- (pow B 2.0) (* A (* C 4.0))))) -2.0))) (- (* A (* 4.0 C)) (pow B 2.0))))",
    "output_parens": 54,
    "avg_bits_err_input": 52.45772386407188,
    "avg_bits_err_output": 47.91356005534938,
    "avg_bits_err_improve": 4.544163808722502,
    "time": 41727.6171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -0.2) (* (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) (/ 180.0 PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 0.0) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (* (pow (- A C) 2.0) 0.0) (pow B 2.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (- C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) PI)) (* 180.0 (/ (atan (/ (- (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) A) B)) PI))))",
    "output_parens": 78,
    "avg_bits_err_input": 29.894744119429234,
    "avg_bits_err_output": 25.996927331045583,
    "avg_bits_err_improve": 3.8978167883836505,
    "time": 26235.397705078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2e-310) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 F)))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* 2.0 F))) (/ (sqrt (+ A (if (!= (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) 0.0) (/ (- (- (* C C) (pow (- A C) 2.0)) (pow B 2.0)) (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 68,
    "avg_bits_err_input": 52.169770239385244,
    "avg_bits_err_output": 45.55948627778284,
    "avg_bits_err_improve": 6.610283961602406,
    "time": 48230.998779296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (/ (+ (* (+ 1.0 (+ (cbrt (/ g (+ a a))) 1.0)) (cbrt (/ g (+ a a)))) 0.0) (+ (cbrt (/ g (+ a a))) 2.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 24,
    "avg_bits_err_input": 15.270554961776552,
    "avg_bits_err_output": 15.290661744982318,
    "avg_bits_err_improve": -0.02010678320576531,
    "time": 22768.315185546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-246) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (+ (cbrt (* (/ 0.5 a) (if (!= (- (- g) (sqrt (- (* g g) (* h h)))) 0.0) (* h (/ h (- (- g) (sqrt (- (* g g) (* h h)))))) (- (sqrt (- (* g g) (* h h))) g)))) (* (cbrt (/ 0.5 a)) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 71,
    "avg_bits_err_input": 35.99589430439149,
    "avg_bits_err_output": 5.578967634660642,
    "avg_bits_err_improve": 30.41692666973085,
    "time": 36033.330078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (- (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))) (* (sin (* PI 0.6666666666666666)) (sin (/ (acos (/ g (- h))) 3.0)))) (* (expm1 (log1p (sin (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) -3.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.9910808281331139,
    "avg_bits_err_output": 0.034634775004326955,
    "avg_bits_err_improve": 0.9564460531287869,
    "time": 20327.93896484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.678375,
    "avg_bits_err_output": 0.678375,
    "avg_bits_err_improve": 0,
    "time": 3870.23388671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-267) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+279) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.196144545501134,
    "avg_bits_err_output": 2.4983277934059993,
    "avg_bits_err_improve": 8.697816752095136,
    "time": 9196.745361328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.49046350769904495,
    "avg_bits_err_output": 0.461875,
    "avg_bits_err_improve": 0.028588507699044974,
    "time": 6996.278076171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.0001) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (expm1 (log1p (- (hypot 1.0 x) x)))) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 1000000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 46,
    "avg_bits_err_input": 52.89821046338433,
    "avg_bits_err_output": 0.14374508004027456,
    "avg_bits_err_improve": 52.754465383344055,
    "time": 11350.616455078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.727833059046273,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.727833059046273,
    "time": 2212.3544921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 4.0 (* 4.0 x)) (+ (+ x x) (+ x (+ 4.0 x)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.017375,
    "avg_bits_err_improve": -0.0033750000000000013,
    "time": 9943.12060546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1228.85302734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= (* w w) 1e+102) (- (- (+ 3.0 (- (+ (/ (/ 6.0 r) (+ r (+ r (+ r r)))) (/ (/ 1.0 r) (+ r r))) 0.0)) (* (* (* w (* w r)) (/ (- 0.375 (* v 0.25)) (- 1.0 v))) r)) 4.5) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* w (* r r)) (* (/ (- 0.375 (* v 0.25)) (- 1.0 v)) w)) 4.5)))",
    "output_parens": 37,
    "avg_bits_err_input": 12.55342337153112,
    "avg_bits_err_output": 0.25075368559369776,
    "avg_bits_err_improve": 12.302669685937422,
    "time": 27950.064208984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (+ (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) x1) (* (* x1 -6.0) x1)))))))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5125415513252507,
    "avg_bits_err_output": 0.28714067291711837,
    "avg_bits_err_improve": 0.22540087840813233,
    "time": 72623.22143554688,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.393029181735724,
    "avg_bits_err_output": 1.3476989174630924,
    "avg_bits_err_improve": 17.045330264272632,
    "time": 7965.213134765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.21761336132445105,
    "avg_bits_err_output": 0.19131372187554083,
    "avg_bits_err_improve": 0.026299639448910228,
    "time": 11282.870849609375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00275,
    "avg_bits_err_output": 0.00275,
    "avg_bits_err_improve": 0,
    "time": 3102.315185546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (- (/ (/ (/ PI 2.0) a) (+ a b)) (/ (/ PI 2.0) (* b (+ a b)))) (- b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.087345127366637,
    "avg_bits_err_output": 0.23600977500432677,
    "avg_bits_err_improve": 13.85133535236231,
    "time": 18919.537109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (/ (+ 1.0 (/ 1.0 eps)) (exp (* (- 1.0 eps) x))) (/ (/ 1.0 eps) (exp (* x (+ 1.0 eps))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.018270759143785,
    "avg_bits_err_output": 24.39071310695724,
    "avg_bits_err_improve": 4.627557652186546,
    "time": 21746.614013671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (log1p (expm1 (/ 1.0 (+ 2.0 (pow (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.012,
    "avg_bits_err_output": 0.01275,
    "avg_bits_err_improve": -0.0007499999999999989,
    "time": 5266.266357421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (log (+ 1.0 (expm1 (pow (- 2.0 (/ (/ 4.0 t) (+ (/ 2.0 t) 2.0))) 2.0))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.017375,
    "avg_bits_err_output": 0.0575,
    "avg_bits_err_improve": -0.040125,
    "time": 15332.032958984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (+ 2.0 (pow (* 2.0 (/ t (+ t 1.0))) 2.0)) 1.0) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.03925,
    "avg_bits_err_output": 0.03424906013339089,
    "avg_bits_err_improve": 0.005000939866609107,
    "time": 12081.799072265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3434.87451171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7870.4560546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2483.483642578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.824873496755416,
    "avg_bits_err_output": 0.25625,
    "avg_bits_err_improve": 7.568623496755416,
    "time": 29567.371826171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.275850852148199,
    "avg_bits_err_output": 7.275850852148199,
    "avg_bits_err_improve": 0,
    "time": 15402.642333984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (+ (* x (+ eps eps)) (* eps eps)) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 15.95633635648257,
    "avg_bits_err_output": 0.03819997840305664,
    "avg_bits_err_improve": 15.918136378079513,
    "time": 14055.24365234375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (if (!= (exp (* x (* x 10.0))) 0.0) (/ 1.0 (/ 1.0 (/ (pow (exp (* x x)) 10.0) (* (pow (exp (* x x)) 10.0) (* (- (pow (exp (* x x)) 10.0)) (* (pow (exp (* x x)) -10.0) (- (pow (exp (* x x)) -10.0)))))))) (pow (exp (* x x)) 10.0)))",
    "output_parens": 33,
    "avg_bits_err_input": 3.5403741726438858,
    "avg_bits_err_output": 3.074460843421521,
    "avg_bits_err_improve": 0.46591332922236495,
    "time": 28940.514404296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -50000.0) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 20000000.0) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 14.454857748212941,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 14.44548274821294,
    "time": 6500.549072265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.876912008031375,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.876912008031375,
    "time": 5803.52734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.914283630750894,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 38.913408630750894,
    "time": 4850.672119140625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (- 1.7e+308 (+ -1.7e+308 (* t +inf.0))) -2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2965424812503606,
    "avg_bits_err_improve": 63.70345751874964,
    "time": 25184.4931640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (* t 4e-32) t)",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325851722857,
    "avg_bits_err_output": 0.407625,
    "avg_bits_err_improve": 61.43563351722857,
    "time": 14368.980224609375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- b (sqrt (fma c (* a -4.0) (* b b))))) (/ a 0.25)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.80157756696032,
    "avg_bits_err_output": 21.498945829658087,
    "avg_bits_err_improve": 12.302631737302232,
    "time": 25985.3134765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (if (!= (/ b (* a -2.0)) 0.0) (+ (/ b (* a -2.0)) (* (/ 0.0 (* a 2.0)) (- (/ b b) (/ 0.0 (* a -2.0))))) (/ (- 0.0 b) (* a 2.0))) (if (<= b -9e-309) (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) (/ (if (!= (- b) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))))",
    "output_parens": 49,
    "avg_bits_err_input": 33.555181521123515,
    "avg_bits_err_output": 20.418349034493044,
    "avg_bits_err_improve": 13.136832486630471,
    "time": 23769.57080078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1801.2109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.656383154794554,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 39.64725815479456,
    "time": 3593.793212890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 19.89337487829978,
    "avg_bits_err_output": 19.89337487829978,
    "avg_bits_err_improve": 0,
    "time": 4418.45361328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.656178838185139,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.656178838185139,
    "time": 6272.6904296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.041,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.040375,
    "time": 10438.1123046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01929248125036058,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 0.00754248125036058,
    "time": 5615.91259765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.018625,
    "avg_bits_err_improve": -0.00375,
    "time": 3301.190673828125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00125,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 0,
    "time": 1305.982666015625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ a (+ c b))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39664661719245803,
    "avg_bits_err_output": 0.232,
    "avg_bits_err_improve": 0.16464661719245802,
    "time": 6933.57177734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(fma (+ -1.0 (* (cos x) 0.5)) (+ -1.0 (* (cos x) 0.5)) (/ (pow (cos x) 2.0) -4.0))",
    "output_parens": 10,
    "avg_bits_err_input": 30.434841256513014,
    "avg_bits_err_output": 30.449512565401722,
    "avg_bits_err_improve": -0.014671308888708268,
    "time": 10291.869873046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.636226017078148,
    "avg_bits_err_output": 0.29494812031259016,
    "avg_bits_err_improve": 24.341277896765558,
    "time": 14928.505126953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (tan (- x))) 0.0) (/ (fma (/ (sin x) (- (tan x))) (/ (sin x) (- (tan x))) (/ (* x (/ (sin x) (tan x))) (- (tan x)))) (/ (sin x) (tan (- x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 31,
    "avg_bits_err_input": 30.51449603473977,
    "avg_bits_err_output": 30.524893752777764,
    "avg_bits_err_improve": -0.010397718037992831,
    "time": 33634.9609375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005875,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.00475,
    "time": 3088.0498046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (+ (- (* (/ 100.0 (/ i n)) (pow (+ (/ i n) 1.0) n)) (/ 0.00125 (/ 4.0 (/ 80000.0 (/ i n))))) (- (/ 0.00125 (/ 4.0 (/ 80000.0 (/ i n)))))) (/ (/ 1.0 (/ 1.0 (/ 20000.0 (/ i n)))) 400.0)))",
    "output_parens": 38,
    "avg_bits_err_input": 47.42998750322962,
    "avg_bits_err_output": 13.636399553255709,
    "avg_bits_err_improve": 33.79358794997391,
    "time": 25860.65576171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= d -6e-141) (+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d))))) (if (<= d 6e-108) (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (fma c (/ a (fma c c (* d d))) (* b (/ d (fma c c (* d d)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 25.68809225727731,
    "avg_bits_err_output": 23.655829683330307,
    "avg_bits_err_improve": 2.032262573947005,
    "time": 14615.111083984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= d 1.65e-130) (fma b (/ c (+ (* d d) (* c c))) (/ (* a (- d)) (+ (* d d) (* c c)))) (- (* c (/ b (fma d d (* c c)))) (* a (/ d (fma d d (* c c))))))",
    "output_parens": 22,
    "avg_bits_err_input": 25.93468028107988,
    "avg_bits_err_output": 24.049303585359038,
    "avg_bits_err_improve": 1.8853766957208435,
    "time": 17088.08740234375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- 1.0 ux) (* ux maxCos))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03275,
    "avg_bits_err_output": 0.03275,
    "avg_bits_err_improve": 0,
    "time": 2529.280517578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ ux (+ -1.0 (- (+ 1.0 (* ux (* maxCos (- ux (fma ux maxCos 1.0))))) (* ux (* (+ maxCos -1.0) (- 1.0 ux))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.47745675145116,
    "avg_bits_err_output": 11.84908237505952,
    "avg_bits_err_improve": 1.6283743763916387,
    "time": 28620.55126953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (- (+ (* (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) ux)) (+ -1.0 (fma ux maxCos (- 1.0 ux)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.509575650849145,
    "avg_bits_err_output": 11.213862733317505,
    "avg_bits_err_improve": 2.29571291753164,
    "time": 30264.21728515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) xi) (fma (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (* (- 1.0 ux) maxCos) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.3379176676902881,
    "avg_bits_err_output": 0.3219487299470966,
    "avg_bits_err_improve": 0.01596893774319147,
    "time": 48279.212646484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (cos (atan (* (tan (* PI (+ (* 2.0 u1) 0.5))) (/ alphay alphax)))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.20632376014563122,
    "avg_bits_err_output": 0.20639688045822135,
    "avg_bits_err_improve": -7.31203125901303e-05,
    "time": 30692.728759765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (expm1 (log1p (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5389125018159427,
    "avg_bits_err_output": 0.5775577121809733,
    "avg_bits_err_improve": -0.03864521036503055,
    "time": 18609.699951171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(- (sqrt (/ u1 (- 1.0 u1))) (* (sqrt (/ u1 (- 1.0 u1))) (- 1.0 (cos (* 6.28318530718 u2)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.32966220470572555,
    "avg_bits_err_output": 0.34177756140202004,
    "avg_bits_err_improve": -0.012115356696294488,
    "time": 23106.243896484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (* (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (- 1.0 (/ 1.0 (+ 1.0 (exp (/ PI s))))) (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ PI (- s)))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 71,
    "avg_bits_err_input": 0.3328383993812466,
    "avg_bits_err_output": 0.31338963412483445,
    "avg_bits_err_improve": 0.019448765256412148,
    "time": 49679.9248046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0629791461110475,
    "avg_bits_err_output": 0.044465333529752085,
    "avg_bits_err_improve": 0.01851381258129542,
    "time": 13838.333740234375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (* (/ (fabs x) s) -0.5)) (/ (/ (* (exp (* (fabs x) (/ -0.5 (+ s s)))) (exp (* (fabs x) (/ -0.5 (+ s s))))) s) (pow (+ (exp (/ (fabs x) (- s))) 1.0) 2.0)))",
    "output_parens": 24,
    "avg_bits_err_input": 0.1524771533391353,
    "avg_bits_err_output": 0.11280245641996425,
    "avg_bits_err_improve": 0.039674696919171054,
    "time": 21836.097900390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6763791529307713,
    "avg_bits_err_output": 0.6690207173900792,
    "avg_bits_err_improve": 0.007358435540692154,
    "time": 23180.093017578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.16121027039678423,
    "avg_bits_err_output": 0.16244700337331874,
    "avg_bits_err_improve": -0.0012367329765345103,
    "time": 20066.48876953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.601394269178739,
    "avg_bits_err_output": 2.598342389491329,
    "avg_bits_err_improve": 0.00305187968740972,
    "time": 30061.682373046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ (* (/ 0.5 v) (/ 0.5 v)) (* (sinh (/ 1.0 v)) (exp (* sinTheta_i (/ sinTheta_O v))))) (* cosTheta_O (+ cosTheta_i cosTheta_i)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.46020301216139614,
    "avg_bits_err_output": 0.35951967072423807,
    "avg_bits_err_improve": 0.10068334143715807,
    "time": 28621.24072265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (+ (/ (- (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) 1.0) v) 0.6931)) (/ 0.5 v))",
    "output_parens": 9,
    "avg_bits_err_input": 0.11850146213482501,
    "avg_bits_err_output": 0.11583373681642783,
    "avg_bits_err_improve": 0.0026677253183971794,
    "time": 21338.770751953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (* (* PI (log alpha)) 2.0)) (- (- (* cosTheta (* cosTheta (* alpha alpha))) -1.0) (* cosTheta cosTheta)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.47145509358540966,
    "avg_bits_err_output": 0.4715287577283593,
    "avg_bits_err_improve": -7.366414294962542e-05,
    "time": 22615.911865234375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) s) 3.0)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3250281364382597,
    "avg_bits_err_output": 1.24226505922421,
    "avg_bits_err_improve": 0.08276307721404974,
    "time": 25540.8876953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ (/ 2.0 (/ 2.0 (- 1.0 (* 4.0 u)))) (log (+ 1.0 (expm1 (pow (+ 1.0 (* u -4.0)) 2.0)))))) s) 2.0) (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 12.524832499128747,
    "avg_bits_err_output": 11.691651247728176,
    "avg_bits_err_improve": 0.8331812514005712,
    "time": 26306.18701171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (* 0.125 (+ (exp (/ r (* -3.0 s))) (exp (/ (- r) s)))) (* (* r PI) s))",
    "output_parens": 11,
    "avg_bits_err_input": 0.13214706366884663,
    "avg_bits_err_output": 0.14055513748154977,
    "avg_bits_err_improve": -0.008408073812703143,
    "time": 24328.670166015625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9054577894286165,
    "avg_bits_err_output": 0.7212850458165323,
    "avg_bits_err_improve": 0.18417274361208424,
    "time": 28306.8154296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (sqrt (if (!= cosTheta 0.0) (- (/ (- cosTheta (* cosTheta cosTheta)) cosTheta) (* cosTheta (/ cosTheta cosTheta))) (- 1.0 (+ cosTheta cosTheta)))) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.6895539068954744,
    "avg_bits_err_output": 0.47026488176746534,
    "avg_bits_err_improve": 0.21928902512800902,
    "time": 22033.13916015625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.516249132322612,
    "avg_bits_err_output": 0.5282192337323585,
    "avg_bits_err_improve": 12.988029898590254,
    "time": 20515.909912109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (if (!= (* -2.0 (* PI u2)) 0.0) (/ 2.0 (/ 1.0 (* PI u2))) (* 2.0 (* PI u2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.568327845070785,
    "avg_bits_err_output": 0.31439931529133813,
    "avg_bits_err_improve": 13.253928529779447,
    "time": 20958.53759765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- alpha) (* (log1p (- u0)) alpha))",
    "output_parens": 5,
    "avg_bits_err_input": 14.133087496674943,
    "avg_bits_err_output": 0.328910526564393,
    "avg_bits_err_improve": 13.80417697011055,
    "time": 18516.59765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ (/ cos2phi alphax) (- alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.67058122986409,
    "avg_bits_err_output": 0.5240580071350123,
    "avg_bits_err_improve": 12.146523222729078,
    "time": 13242.033447265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -4e+184) (- (* PI l) (/ (/ (* (tan (* PI l)) (/ (/ 4.0 F) (* (+ F F) (* F (/ (/ 2.0 F) F))))) (* F (/ 1.0 F))) F)) (if (<= (* PI l) 4e+17) (- (* PI l) (/ (/ (* (tan (* PI l)) (/ 1.0 F)) (* F (/ 1.0 F))) F)) (if (<= (* PI l) 5e+102) (- (* PI l) (/ (/ (* (tan (* PI l)) (/ (/ 4.0 F) (* (+ F F) (* F (/ (/ 2.0 F) F))))) (* F (/ 1.0 F))) F)) (if (<= (* PI l) 2e+201) (- (* PI l) (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (/ (/ 1.0 l) (* (* PI l) (/ 1.0 l)))) (* PI l))) (* F F))) (- (* PI l) (/ (/ (* (tan (* PI l)) (/ (/ 4.0 F) (* (+ F F) (* F (/ (/ 2.0 F) F))))) (* F (/ 1.0 F))) F))))))",
    "output_parens": 85,
    "avg_bits_err_input": 16.816575316829883,
    "avg_bits_err_output": 12.405085345074335,
    "avg_bits_err_improve": 4.4114899717555485,
    "time": 26362.31591796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21608496250072115,
    "avg_bits_err_output": 0.154125,
    "avg_bits_err_improve": 0.06195996250072114,
    "time": 17007.25537109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.629165918357492,
    "avg_bits_err_output": 10.364107160136125,
    "avg_bits_err_improve": 3.2650587582213664,
    "time": 24181.3369140625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (- (exp (/ (* PI (+ f f)) 4.0)) (exp (* PI (* 2.0 (/ f -4.0))))) (pow (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* PI (* f -0.5)))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))) 2.0))) (/ PI -4.0))",
    "output_parens": 34,
    "avg_bits_err_input": 61.49983771544291,
    "avg_bits_err_output": 61.544395327782254,
    "avg_bits_err_improve": -0.04455761233934652,
    "time": 71921.74536132812,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.95922449358038,
    "avg_bits_err_output": 33.894366678671176,
    "avg_bits_err_improve": 9.064857814909203,
    "time": 26061.484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin th) (/ (sin ky) (hypot (sin ky) (sin kx))))",
    "output_parens": 7,
    "avg_bits_err_input": 4.050222550256112,
    "avg_bits_err_output": 0.21822913594209717,
    "avg_bits_err_improve": 3.8319934143140153,
    "time": 31585.509033203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.9870666069875106,
    "avg_bits_err_output": 0.00475,
    "avg_bits_err_improve": 0.9823166069875106,
    "time": 10761.351806640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (+ (/ (pow (/ Om Omc) 2.0) (- -1.0 (* 2.0 (pow (/ t l) 2.0)))) (/ -1.0 (- -1.0 (* 2.0 (pow (/ t l) 2.0)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 10.191200829976648,
    "avg_bits_err_output": 10.191366070988506,
    "avg_bits_err_improve": -0.0001652410118584413,
    "time": 24796.662353515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (* (sqrt (fabs n)) (sqrt (fabs U))))",
    "output_parens": 18,
    "avg_bits_err_input": 34.24242992177961,
    "avg_bits_err_output": 16.63636179255829,
    "avg_bits_err_improve": 17.60606812922132,
    "time": 48704.63818359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1e-108) (/ 2.0 (* (/ (* (/ (/ k l) t) (* k (pow t 3.0))) t) (* (sin k) (/ (tan k) l)))) (if (<= t 1.9e-122) (/ 2.0 (* (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) l) (* (sin k) (/ (tan k) l)))) (/ 2.0 (/ (* k (/ (* (* (pow t 3.0) (/ (sin k) l)) (* k (/ (tan k) l))) t)) t))))",
    "output_parens": 41,
    "avg_bits_err_input": 47.54258284319369,
    "avg_bits_err_output": 29.043269720912292,
    "avg_bits_err_improve": 18.4993131222814,
    "time": 50744.767822265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (* (sin k) (/ (pow t 3.0) l)) (/ (+ 2.0 (pow (/ k t) 2.0)) l)) (tan k)))",
    "output_parens": 12,
    "avg_bits_err_input": 32.46389821472174,
    "avg_bits_err_output": 28.05264906455764,
    "avg_bits_err_improve": 4.411249150164096,
    "time": 21408.75390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (+ (* a2 a2) (* a1 a1)) (sqrt 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5391338375223579,
    "avg_bits_err_output": 0.49081973907953863,
    "avg_bits_err_improve": 0.04831409844281925,
    "time": 21825.876220703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* PI (* n 2.0)) (* k -0.5)) (/ (sqrt (* PI (* n 2.0))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4908464607940856,
    "avg_bits_err_output": 0.41853101562950756,
    "avg_bits_err_improve": 0.07231544516457805,
    "time": 21169.213134765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (if (!= (* (exp l) J) 0.0) (* (/ (expm1 (+ l l)) (exp l)) (* J (/ J J))) (* (- (exp l) (exp (- l))) J)) (cos (/ K 2.0))) U)",
    "output_parens": 20,
    "avg_bits_err_input": 17.094553649194772,
    "avg_bits_err_output": 0.1345849625007212,
    "avg_bits_err_improve": 16.95996868669405,
    "time": 31475.50537109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (if (!= (* (- n m) K) 0.0) (* K (* (- m n) (* K (/ (+ n m) (* K (- m n)))))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 28,
    "avg_bits_err_input": 15.597584544532033,
    "avg_bits_err_output": 1.419712736524513,
    "avg_bits_err_improve": 14.17787180800752,
    "time": 23317.929931640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* -2.0 J) (* (cos (/ K 2.0)) (sqrt (+ 1.0 (pow (/ (/ U (+ J J)) (cos (/ K 2.0))) 2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.834719360937772,
    "avg_bits_err_output": 17.84478308281331,
    "avg_bits_err_improve": -0.0100637218755395,
    "time": 33411.555908203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.150926840649017,
    "avg_bits_err_output": 10.770780343125782,
    "avg_bits_err_improve": 3.380146497523235,
    "time": 20271.806884765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e+202) (* (* (sqrt (/ A (- l))) c0) (- (- (sqrt (/ -1.0 V))))) (if (<= (* V l) -5e-240) (* c0 (sqrt (/ A (* V l)))) (if (<= (* V l) 0.0) (/ (* (- (sqrt (/ A (- l)))) (* c0 (sqrt (/ -1.0 V)))) -1.0) (* c0 (* (sqrt (/ (/ 2.0 V) (+ l l))) (sqrt A))))))",
    "output_parens": 38,
    "avg_bits_err_input": 18.987251701785507,
    "avg_bits_err_output": 9.54977120957255,
    "avg_bits_err_improve": 9.437480492212957,
    "time": 23066.0517578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= d -5e-185) (/ (/ (* c0 (if (!= (- (* (/ d (* h D)) (* d (/ c0 (* D w)))) (sqrt (- (pow (* (/ d (* h D)) (* d (/ c0 (* D w)))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* (/ d (* h D)) (* d (/ c0 (* D w)))) (if (!= 0.0 0.0) (/ 0.0 0.0) (sqrt (- (pow (* d (* (/ d (* h D)) (/ (/ c0 D) w))) 2.0) (* M M)))))) (fma (/ d (* h D)) (* d (/ c0 (* D w))) (sqrt (- (pow (* (/ d (* h D)) (* d (/ c0 (* D w)))) 2.0) (* M M)))))) w) 2.0) (if (<= d 6.5e-67) (* (/ c0 (* w 2.0)) (if (!= (- (* c0 (/ (pow (/ d D) 2.0) (* h w))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* h w))) 2.0) (* M M)))) 0.0) (/ (fma M M 0.0) (- (* c0 (/ (pow (/ d D) 2.0) (* h w))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* h w))) 2.0) (* M M))))) (fma c0 (/ (pow (/ d D) 2.0) (* h w)) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* h w))) 2.0) (* M M)))))) (/ (/ (* c0 (if (!= (- (* (/ d (* h D)) (* d (/ c0 (* D w)))) (sqrt (- (pow (* (/ d (* h D)) (* d (/ c0 (* D w)))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* (/ d (* h D)) (* d (/ c0 (* D w)))) (if (!= 0.0 0.0) (/ 0.0 0.0) (sqrt (- (pow (* d (* (/ d (* h D)) (/ (/ c0 D) w))) 2.0) (* M M)))))) (fma (/ d (* h D)) (* d (/ c0 (* D w))) (sqrt (- (pow (* (/ d (* h D)) (* d (/ c0 (* D w)))) 2.0) (* M M)))))) w) 2.0)))",
    "output_parens": 175,
    "avg_bits_err_input": 59.61431169794126,
    "avg_bits_err_output": 30.242508441027663,
    "avg_bits_err_improve": 29.371803256913598,
    "time": 58716.41162109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 5e+289) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (fma 0.5 (* h (/ (pow (* M (/ D (* d 2.0))) 2.0) l)) -1.0) (- (* (sqrt (/ d (* h l))) (sqrt d)))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.885601663223525,
    "avg_bits_err_output": 23.15357589292278,
    "avg_bits_err_improve": 3.7320257703007442,
    "time": 42799.578369140625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (- (/ 0.5 (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (/ (/ 0.5 (hypot 1.0 x)) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 27,
    "avg_bits_err_input": 15.011050498090572,
    "avg_bits_err_output": 14.521608901178919,
    "avg_bits_err_improve": 0.4894415969116537,
    "time": 30099.193359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9837712406251803,
    "avg_bits_err_output": 0.011290241011860921,
    "avg_bits_err_improve": 0.9724809996133194,
    "time": 4595.709716796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (+ 1.0 (* (* v v) -5.0)) (* PI (sqrt (fma -6.0 (* v v) 2.0)))) (- t (* v (* v t))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.42716751275219256,
    "avg_bits_err_output": 0.117802286712574,
    "avg_bits_err_improve": 0.3093652260396186,
    "time": 22585.53564453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt (- 2.0 (* v (* v 6.0)))) -4.0) (+ (* v v) -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.011667481250360576,
    "avg_bits_err_output": 0.01041524101186092,
    "avg_bits_err_improve": 0.0012522402384996557,
    "time": 8656.54638671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5145300913881009,
    "avg_bits_err_output": 0.5145300913881009,
    "avg_bits_err_improve": 0,
    "time": 11997.087646484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.1490949785499773,
    "avg_bits_err_output": 2.1067506176122066,
    "avg_bits_err_improve": 0.04234436093777072,
    "time": 10925.023681640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (pow (exp (/ (- (+ Vef EDonor) (- Ec mu)) (+ KbT KbT))) 2.0))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.014188321399553346,
    "avg_bits_err_output": 0.015169321012872713,
    "avg_bits_err_improve": -0.0009809996133193673,
    "time": 11749.585205078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (* (* b b) (fma b b (* a (+ a a))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 11,
    "avg_bits_err_input": 0.18094172101615547,
    "avg_bits_err_output": 0.09231427726507385,
    "avg_bits_err_improve": 0.08862744375108161,
    "time": 9025.00537109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (if (!= (- (* (* b b) (* (fma a 3.0 -1.0) -4.0)) (fma (* a (fma a a a)) 4.0 (pow (fma a a (* b b)) 2.0))) 0.0) (* (- (* (* b b) (* (fma a 3.0 -1.0) -4.0)) (fma (* a (fma a a a)) 4.0 (pow (fma a a (* b b)) 2.0))) (/ (+ (* (* b b) (* (fma a 3.0 -1.0) -4.0)) (fma (* a (fma a a a)) 4.0 (pow (fma a a (* b b)) 2.0))) (- (* (* b b) (* (fma a 3.0 -1.0) -4.0)) (fma (* a (fma a a a)) 4.0 (if (!= (- (pow a 4.0) (pow b 4.0)) 0.0) (* (* (fma a a (* b b)) (- (* a a) (* b b))) (/ (+ (* a (* a (* b b))) (+ (* (* a a) (* a a)) (* (* b b) (fma a a (* b b))))) (- (pow a 4.0) (pow b 4.0)))) (pow (fma a a (* b b)) 2.0)))))) (fma 4.0 (fma b (* (fma a 3.0 -1.0) (- b)) (* a (fma a a a))) (pow (fma a a (* b b)) 2.0))) 1.0)",
    "output_parens": 87,
    "avg_bits_err_input": 0.18970316694580563,
    "avg_bits_err_output": 0.1081487719860973,
    "avg_bits_err_improve": 0.08155439495970833,
    "time": 29625.99462890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (* (* b b) (fma a a (* b b))) (+ (pow (* b a) 2.0) (pow a 4.0))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.18203309357999456,
    "avg_bits_err_output": 0.10142444670301153,
    "avg_bits_err_improve": 0.08060864687698303,
    "time": 21724.623046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.932476742341763,
    "avg_bits_err_output": 12.932476742341763,
    "avg_bits_err_improve": 0,
    "time": 18200.03076171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.15322183461517,
    "avg_bits_err_output": 0.056,
    "avg_bits_err_improve": 41.09722183461517,
    "time": 6408.85595703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (+ (+ (tan x) 2.0) -2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 31.533065694187442,
    "avg_bits_err_output": 30.817299916477566,
    "avg_bits_err_improve": 0.7157657777098763,
    "time": 25038.09814453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -2.05e-293) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (if (<= b_2 2.6e+146) (/ (if (!= (- 0.0 b_2) 0.0) (* a (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))))) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a) (/ (if (!= (- b_2) 0.0) (fma a (/ c (* b_2 -2.0)) (* c (/ (/ a b_2) -2.0))) (- b_2)) a)))",
    "output_parens": 38,
    "avg_bits_err_input": 34.389283387442845,
    "avg_bits_err_output": 20.525772700374127,
    "avg_bits_err_improve": 13.863510687068718,
    "time": 21460.626953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (fma a (- c) (* b_2 b_2))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.129451249660974,
    "avg_bits_err_output": 19.95648964948508,
    "avg_bits_err_improve": 14.172961600175896,
    "time": 18487.578369140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(if (<= x -0.00013) (/ (/ (- 1.0 (cos x)) x) x) (if (<= x 0.000125) (- (- (/ 1.0 (* x x)) (- 1.0 (/ (/ (cos x) x) (- x)))) -1.0) (/ (/ (- 1.0 (cos x)) x) x)))",
    "output_parens": 21,
    "avg_bits_err_input": 31.134044478686224,
    "avg_bits_err_output": 29.281589552165055,
    "avg_bits_err_improve": 1.852454926521169,
    "time": 17660.16455078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.23633584885353,
    "avg_bits_err_output": 11.183093269477437,
    "avg_bits_err_improve": 21.05324257937609,
    "time": 31879.653564453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (expm1 (- (log1p N) (log N)))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.669629428432366,
    "avg_bits_err_output": 29.680498664843533,
    "avg_bits_err_improve": -0.010869236411167549,
    "time": 10300.578369140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (if (!= (- 1.0 (/ x (- -1.0 x))) 0.0) (/ (+ -1.0 (/ (* x (/ x (+ x 1.0))) (+ x 1.0))) (- 1.0 (/ x (- -1.0 x)))) (+ (/ x (+ x 1.0)) -1.0)) x)",
    "output_parens": 19,
    "avg_bits_err_input": 14.698462470854961,
    "avg_bits_err_output": 14.68384897870492,
    "avg_bits_err_improve": 0.014613492150042262,
    "time": 17867.22509765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (sin x) (- (sin eps)) (* (+ (cos eps) -1.0) (cos x)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.75990502859051,
    "avg_bits_err_output": 6.3610693723764244,
    "avg_bits_err_improve": 33.39883565621408,
    "time": 23515.578857421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.6509733651925,
    "avg_bits_err_output": 29.34201610720836,
    "avg_bits_err_improve": 0.3089572579841402,
    "time": 15680.974609375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (/ -1.0 (sin x)) 0.0) (- (- (+ (/ (- (cos x)) (sin x)) (/ 2.0 (/ -2.0 (sin x)))) (/ -1.0 (sin x))) (/ 2.0 (/ -2.0 (sin x)))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 23,
    "avg_bits_err_input": 30.378223525986172,
    "avg_bits_err_output": 26.422102812252987,
    "avg_bits_err_improve": 3.956120713733185,
    "time": 23471.580810546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -1.9e-288) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* (* a c) 4.0) (- b (sqrt (fma a (* c -4.0) (* b b))))) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (pow (fma b b (* a (* c -4.0))) 0.5)))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0)))",
    "output_parens": 48,
    "avg_bits_err_input": 34.51695654767653,
    "avg_bits_err_output": 15.635741224445693,
    "avg_bits_err_improve": 18.881215323230833,
    "time": 25109.0380859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b 2.6e+146) (/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0)) (/ (- b) (* a 2.0)))",
    "output_parens": 28,
    "avg_bits_err_input": 34.04895770910524,
    "avg_bits_err_output": 21.317804726526415,
    "avg_bits_err_improve": 12.731152982578823,
    "time": 27553.19287109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.285247213091395,
    "avg_bits_err_output": 0.023783082813311304,
    "avg_bits_err_improve": 61.261464130278085,
    "time": 21068.888671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00828121079103,
    "avg_bits_err_output": 44.223531720743274,
    "avg_bits_err_improve": 18.78474949004776,
    "time": 14486.31298828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.7186003831563,
    "avg_bits_err_output": 58.68284699357927,
    "avg_bits_err_improve": 0.03575338957703167,
    "time": 19182.160400390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (+ -1.0 (/ 1.0 (/ x (tan x)))) (* x (/ 1.0 (/ x (tan x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 60.00642841108273,
    "avg_bits_err_output": 60.00903666310481,
    "avg_bits_err_improve": -0.0026082520220782612,
    "time": 27387.233642578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (if (!= (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a)))) 0.0) (/ 1.0 (/ 1.0 (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a)))))) (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a))))) (expm1 (* eps b)))",
    "output_parens": 28,
    "avg_bits_err_input": 60.17191290402927,
    "avg_bits_err_output": 29.586615024582244,
    "avg_bits_err_improve": 30.585297879447026,
    "time": 29010.485107421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.5112415262548,
    "avg_bits_err_output": 0.4749906015629508,
    "avg_bits_err_improve": 41.03625092469185,
    "time": 5486.111328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.77728461579644,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.77678461579644,
    "time": 2823.38330078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.252303740510047,
    "avg_bits_err_output": 0.016165233569958675,
    "avg_bits_err_improve": 29.23613850694009,
    "time": 6206.30419921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (exp (- x)) 0.0) (/ (fma (exp (- x)) (exp (- x)) (+ 1.0 (/ (* (exp (* x -2.0)) 4.0) (/ -2.0 (exp x))))) (exp (- x))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 24,
    "avg_bits_err_input": 29.845495044499835,
    "avg_bits_err_output": 29.39336697915726,
    "avg_bits_err_improve": 0.4521280653425741,
    "time": 21102.471435546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ 1.0 x)) 0.0) (/ (if (!= (pow (/ 1.0 (+ x 1.0)) 2.0) 0.0) (/ (fma (pow (/ 1.0 (+ x 1.0)) 2.0) (+ (/ -2.0 (fma x x x)) (/ 1.0 (fma x x -1.0))) (pow (/ 1.0 (+ x 1.0)) 4.0)) (pow (/ 1.0 (+ x 1.0)) 2.0)) (+ (/ -2.0 (fma x x x)) (+ (pow (/ 1.0 (+ x 1.0)) 2.0) (/ 1.0 (fma x x -1.0))))) (/ 1.0 (+ 1.0 x))) (+ (/ 1.0 (+ 1.0 x)) (+ (/ 1.0 (+ x -1.0)) (/ -2.0 x))))",
    "output_parens": 44,
    "avg_bits_err_input": 10.041605755021347,
    "avg_bits_err_output": 10.043871967099868,
    "avg_bits_err_improve": -0.002266212078520624,
    "time": 22948.398193359375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (tan (+ x eps)) 0.0) (* (tan (+ x eps)) (if (!= (/ (tan x) (- (tan (+ x eps)))) 0.0) (/ (- (* (/ (tan x) (- (log1p (expm1 (tan (+ x eps)))))) (/ (tan x) (- (log1p (expm1 (tan (+ x eps))))))) (* (/ (tan x) (- (tan (+ x eps)))) (/ (tan (+ x eps)) (- (tan (+ x eps)))))) (/ (tan x) (- (tan (+ x eps))))) (/ (- (tan (+ x eps)) (tan x)) (tan (+ x eps))))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 59,
    "avg_bits_err_input": 36.556955566873185,
    "avg_bits_err_output": 36.580991265014255,
    "avg_bits_err_improve": -0.024035698141069872,
    "time": 25400.530029296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.69974681681252,
    "avg_bits_err_output": 0.16473364687698316,
    "avg_bits_err_improve": 29.53501316993554,
    "time": 12185.871337890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (sin x) 0.0) (* (/ (sin x) (sin x)) (fma (sin x) (+ (cos eps) -1.0) (* (sin eps) (cos x)))) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 18,
    "avg_bits_err_input": 36.88128012781721,
    "avg_bits_err_output": 0.37607351440663755,
    "avg_bits_err_improve": 36.50520661341058,
    "time": 21672.88427734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (/ (+ (/ 1.0 (sqrt (+ 1.0 x))) (/ -1.0 (sqrt x))) (/ -1.0 (sqrt x))) (sqrt x))",
    "output_parens": 11,
    "avg_bits_err_input": 19.94802338498216,
    "avg_bits_err_output": 19.951119154759308,
    "avg_bits_err_improve": -0.003095769777146984,
    "time": 15118.650390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (* (- (* (atan (+ 1.0 N)) (atan (+ 1.0 N))) (* (atan N) (atan N))) (/ 1.0 (+ (atan (+ 1.0 N)) (atan N)))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 25,
    "avg_bits_err_input": 15.245350639810278,
    "avg_bits_err_output": 15.255038885246641,
    "avg_bits_err_improve": -0.009688245436363374,
    "time": 9868.751953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.844951854568617,
    "avg_bits_err_output": 1.2177357040041645,
    "avg_bits_err_improve": 28.62721615056445,
    "time": 26782.781982421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (+ (/ (fma (- m) m (* m m)) v) (/ (- m (* m m)) v)) 1.0) (- 1.0 m))",
    "output_parens": 11,
    "avg_bits_err_input": 0.07497180468885216,
    "avg_bits_err_output": 0.07195056406367188,
    "avg_bits_err_improve": 0.003021240625180277,
    "time": 23979.708984375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (/ a (/ -1.0 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.058677217463785,
    "avg_bits_err_output": 0.2709342109406549,
    "avg_bits_err_improve": 15.78774300652313,
    "time": 11129.47802734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (fma (cos (* PI (/ (+ angle (+ angle angle)) 720.0))) (cos (* PI (/ angle 720.0))) (- (* (sin (* PI (/ (+ angle (+ angle angle)) 720.0))) (- (exp (log1p (sin (* PI (/ angle 720.0))))) 1.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 30,
    "avg_bits_err_input": 20.33803249018788,
    "avg_bits_err_output": 20.337370880733918,
    "avg_bits_err_improve": 0.0006616094539637629,
    "time": 40849.3466796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(/ (* (- (pow b 2.0) (pow a 2.0)) (* (cos (* angle (/ PI 180.0))) (* -2.0 (sin (* angle (/ PI -180.0)))))) 1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 31.145442296575986,
    "avg_bits_err_output": 31.127087121589305,
    "avg_bits_err_improve": 0.018355174986680822,
    "time": 33214.468505859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ PI 180.0) angle))) 2.0) (pow (* b (cos (* (* angle PI) 0.005555555555555556))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.316869005994228,
    "avg_bits_err_output": 20.270779227520148,
    "avg_bits_err_improve": 0.046089778474080134,
    "time": 38592.4736328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.18225020351258203,
    "avg_bits_err_output": 0.1824634750397233,
    "avg_bits_err_improve": -0.00021327152714126218,
    "time": 16817.17529296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3316504019803842,
    "avg_bits_err_output": 0.31762994799929856,
    "avg_bits_err_improve": 0.014020453981085645,
    "time": 20827.219970703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (/ e (+ 1.0 (/ (* (* (cos v) e) 4.0) 4.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.13414624062518027,
    "avg_bits_err_output": 0.13429248125036058,
    "avg_bits_err_improve": -0.0001462406251803161,
    "time": 15907.2802734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.799114515947352,
    "avg_bits_err_output": 16.791983961601243,
    "avg_bits_err_improve": 0.007130554346108653,
    "time": 36930.949951171875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.903880467862585,
    "avg_bits_err_output": 0.16523853437914665,
    "avg_bits_err_improve": 52.738641933483436,
    "time": 28607.39306640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (- (* a (* c -4.0)) (* b b)) 0.0) (/ (fma (* (* c a) (* c a)) 16.0 (- (pow b 4.0))) (- (* a (* c -4.0)) (* b b))) (fma b b (* a (* c -4.0)))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 39,
    "avg_bits_err_input": 28.549210173889637,
    "avg_bits_err_output": 0.35764248282485017,
    "avg_bits_err_improve": 28.191567691064787,
    "time": 30100.096435546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.800863444631155,
    "avg_bits_err_output": 0.24230018907088305,
    "avg_bits_err_improve": 43.55856325556027,
    "time": 32700.615966796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.9e-288) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* (* a c) 4.0) (- b (sqrt (fma a (* c -4.0) (* b b))))) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 50,
    "avg_bits_err_input": 34.52001636568025,
    "avg_bits_err_output": 15.644304356005343,
    "avg_bits_err_improve": 18.875712009674906,
    "time": 23107.633544921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8023021374663263,
    "avg_bits_err_output": 0.797933177232767,
    "avg_bits_err_improve": 0.00436896023355926,
    "time": 28900.0927734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (/ (if (!= (- 1.0 (/ -4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0))) 0.0) (/ (- 1.0 (/ 16.0 (pow (+ 1.0 (exp (* -2.0 x))) 4.0))) (+ -1.0 (/ -4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)))) (- -1.0 (/ -4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)))) (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 45,
    "avg_bits_err_input": 29.07521441751625,
    "avg_bits_err_output": 29.064405719269903,
    "avg_bits_err_improve": 0.010808698246346893,
    "time": 24205.7587890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= x -50.0) (- (/ (- (exp (+ x x)) (exp (fma x -1.0 x))) (+ (exp (+ x x)) (exp (fma x -1.0 x)))) 0.0) (if (<= x 20.0) (/ (if (!= (pow (exp x) -2.0) 0.0) (if (!= 0.0 0.0) 0.0 (/ (- (expm1 (* x -4.0))) (/ (exp (- x)) (exp x)))) (- (pow (exp x) 2.0) (pow (exp x) -2.0))) (pow (+ (exp x) (exp (- x))) 2.0)) (/ (- (exp (fma x -1.0 x)) (exp (* x -2.0))) (+ (exp (* x -2.0)) (exp (fma x -1.0 x))))))",
    "output_parens": 52,
    "avg_bits_err_input": 58.215840184959255,
    "avg_bits_err_output": 0.03909025702804876,
    "avg_bits_err_improve": 58.176749927931205,
    "time": 21010.728515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (expm1 (* x 2.0)) (exp (- x))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.18402014172814,
    "avg_bits_err_output": 0.04939624062518029,
    "avg_bits_err_improve": 58.13462390110296,
    "time": 7842.29345703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.010635515405487158,
    "avg_bits_err_output": 0.010635515405487158,
    "avg_bits_err_improve": 0,
    "time": 1863.684814453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log1p (if (!= (+ (sqrt (fma x x -1.0)) (- 1.0 x)) 0.0) (/ (+ (+ x x) -2.0) (+ (sqrt (fma x x -1.0)) (- 1.0 x))) (+ (sqrt (fma x x -1.0)) (+ x -1.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 31.90577124062518,
    "avg_bits_err_output": 31.411832942980137,
    "avg_bits_err_improve": 0.4939382976450446,
    "time": 5600.486572265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(log1p (if (!= (sqrt (/ (- -1.0 x) (- x 1.0))) 0.0) (- (/ (- (/ -1.0 (+ -1.0 x)) (sqrt (/ (+ x 1.0) (- 1.0 x)))) (sqrt (/ (+ x 1.0) (- 1.0 x)))) (/ x (* (+ -1.0 x) (sqrt (/ (+ x 1.0) (- 1.0 x)))))) (+ -1.0 (sqrt (/ (- -1.0 x) (- x 1.0))))))",
    "output_parens": 32,
    "avg_bits_err_input": 58.7038449870256,
    "avg_bits_err_output": 0.8362502416339747,
    "avg_bits_err_improve": 57.86759474539162,
    "time": 19497.099365234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log1p (+ (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x) -1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.011698120312590146,
    "avg_bits_err_improve": 0.0001768796874098543,
    "time": 3968.973876953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (/ (* (- (sin t)) (* ew (cos (atan (/ eh (* ew (tan t))))))) -1.0) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12425,
    "avg_bits_err_output": 0.12494812031259014,
    "avg_bits_err_improve": -0.0006981203125901447,
    "time": 25660.1875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1296674812503606,
    "avg_bits_err_output": 0.1296674812503606,
    "avg_bits_err_improve": 0,
    "time": 26930.848876953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* (cos (/ phi2 2.0)) (* (- lambda1 lambda2) (cos (/ phi1 2.0)))) (* (- lambda1 lambda2) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0))))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 39.39515394909506,
    "avg_bits_err_output": 0.1254655021174209,
    "avg_bits_err_improve": 39.26968844697764,
    "time": 29716.10791015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 13.995094089426662,
    "avg_bits_err_output": 0.009483795589947925,
    "avg_bits_err_improve": 13.985610293836714,
    "time": 7313.09326171875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (expm1 (log1p (* (sin delta) (* (cos theta) (cos phi1))))))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.15595999319001144,
    "avg_bits_err_output": 0.15635549649786312,
    "avg_bits_err_improve": -0.0003955033078516801,
    "time": 39878.78173828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.908560327204256,
    "avg_bits_err_output": 0.1670379703154747,
    "avg_bits_err_improve": 52.74152235688878,
    "time": 32778.626953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.717548485991898,
    "avg_bits_err_output": 0.3435387234500304,
    "avg_bits_err_improve": 28.374009762541867,
    "time": 26497.6640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.82823094140982,
    "avg_bits_err_output": 0.24270338438203098,
    "avg_bits_err_improve": 43.58552755702779,
    "time": 28246.407958984375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- b (- (sqrt (fma b b (* (* a c) -3.0))))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma b b (* (* a c) -3.0))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.55748047305467,
    "avg_bits_err_output": 21.92924876730939,
    "avg_bits_err_improve": 12.628231705745279,
    "time": 27878.216796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (sin phi1) (* (cos (- lambda1 lambda2)) (cos phi2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 12.819481171290647,
    "avg_bits_err_output": 12.819858029054178,
    "avg_bits_err_improve": -0.0003768577635305803,
    "time": 33180.14697265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.702365385298744,
    "avg_bits_err_output": 0.496937864852009,
    "avg_bits_err_improve": 29.205427520446737,
    "time": 19385.346435546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.010125,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 0,
    "time": 4650.050537109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(if (<= x -6.5e+153) (- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0))) (if (<= x 1.32e+154) (- (- (+ (/ 1.0 (+ x -1.0)) (/ x (- 1.0 (* x x)))) (/ 1.0 (- 1.0 (* x x))))) (- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 14.72004917919412,
    "avg_bits_err_output": 13.315425923490936,
    "avg_bits_err_improve": 1.404623255703184,
    "time": 17442.554931640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -6.7e-308) (* (sqrt (- F)) (* (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C))) (/ (sqrt (fma (* A C) -8.0 (* 2.0 (pow B 2.0)))) (- (* C (* A 4.0)) (pow B 2.0))))) (/ (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (* F (* -2.0 (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* A (* 4.0 C)) (pow B 2.0))))",
    "output_parens": 46,
    "avg_bits_err_input": 52.124822280773145,
    "avg_bits_err_output": 46.517485403167015,
    "avg_bits_err_improve": 5.60733687760613,
    "time": 41152.2265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -0.5) (* (atan (fma A (/ -1.0 B) (- (expm1 (log1p (/ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) B)))))) (/ 180.0 PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 2000000000000.0) (* (atan (* (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0) (* (pow (- A C) 2.0) 0.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (/ -1.0 B))) (/ 180.0 PI)) (/ (* (atan (/ (- (log (+ 1.0 (expm1 (- C (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) A) B)) 180.0) PI)))",
    "output_parens": 85,
    "avg_bits_err_input": 30.321259719347697,
    "avg_bits_err_output": 26.81560672301841,
    "avg_bits_err_improve": 3.505652996329289,
    "time": 27110.047607421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -5e-310) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 F)))) (/ (sqrt (+ A (+ C (* (sqrt (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) (sqrt (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt 2.0) (* (sqrt F) (sqrt (- (pow B 2.0) (* A (* C 4.0)))))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 56,
    "avg_bits_err_input": 52.34563997338811,
    "avg_bits_err_output": 46.543231136131745,
    "avg_bits_err_improve": 5.802408837256365,
    "time": 48819.65966796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.356114480563749,
    "avg_bits_err_output": 15.356114480563749,
    "avg_bits_err_improve": 0,
    "time": 21892.4638671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-243) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) g) 0.0) (/ (* h h) (- (sqrt (- (* g g) (* h h))) g)) (- (- g) (sqrt (- (* g g) (* h h)))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) (- g)) 0.0) (/ (* h h) (- (- g) (sqrt (fma g g (* h (- h)))))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 69,
    "avg_bits_err_input": 35.675476118018906,
    "avg_bits_err_output": 5.801088351214516,
    "avg_bits_err_improve": 29.87438776680439,
    "time": 32534.503173828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) 3.0))) (* (sin (expm1 (log1p (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.9892528203183604,
    "avg_bits_err_output": 0.01804248125036058,
    "avg_bits_err_improve": 0.9712103390679998,
    "time": 23406.25390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (- (expm1 b) (- -1.0 (exp a))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.6456981203125902,
    "avg_bits_err_output": 0.671610568295179,
    "avg_bits_err_improve": -0.025912447982588738,
    "time": 5028.032470703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (* a1 a2) -2e+243) (* (/ a2 b2) (/ a1 b1)) (if (<= (* a1 a2) -2e-196) (/ (* a1 a2) (* b1 b2)) (if (<= (* a1 a2) 2e-165) (* (/ a2 b2) (/ a1 b1)) (if (<= (* a1 a2) 5e+226) (/ (/ (* a1 a2) b2) b1) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 27,
    "avg_bits_err_input": 11.785799122496455,
    "avg_bits_err_output": 5.2674982517794415,
    "avg_bits_err_improve": 6.518300870717013,
    "time": 9018.86181640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4428257887595321,
    "avg_bits_err_output": 0.396125,
    "avg_bits_err_improve": 0.0467007887595321,
    "time": 7356.71875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.0) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 50000000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.11726904540219,
    "avg_bits_err_output": 0.20231976548506517,
    "avg_bits_err_improve": 52.914949279917124,
    "time": 9468.506591796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.7380536978855154,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.7380536978855154,
    "time": 2200.609619140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (* (/ 1.0 (+ 1.0 x)) (/ (- 1.0 (* x x)) (+ 1.0 x))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.012823120312590145,
    "avg_bits_err_improve": 0.0016768796874098556,
    "time": 8958.140380859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1268.406005859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (fma 0.375 (/ (pow (* w r) 2.0) (- 1.0 v)) (* (* v 0.25) (/ (pow (* w r) 2.0) (- v 1.0)))) 4.5))",
    "output_parens": 16,
    "avg_bits_err_input": 12.970045637983286,
    "avg_bits_err_output": 0.3393124078262924,
    "avg_bits_err_improve": 12.630733230156993,
    "time": 23534.881591796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (* x1 -6.0)) (+ (* (* x1 x1) (* (/ (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) (* (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (/ (* x1 2.0) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0))))))) (+ x1 x1)))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5116868640749087,
    "avg_bits_err_output": 0.24896713813385346,
    "avg_bits_err_improve": 0.26271972594105525,
    "time": 73396.25952148438,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.28419832474688,
    "avg_bits_err_output": 1.3172969641566725,
    "avg_bits_err_improve": 16.966901360590207,
    "time": 8940.445068359375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* (* x 0.12900613773279798) (* x x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.22184436093777044,
    "avg_bits_err_output": 0.1892099625007211,
    "avg_bits_err_improve": 0.03263439843704932,
    "time": 10896.60986328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0021981203125901443,
    "avg_bits_err_output": 0.0021981203125901443,
    "avg_bits_err_improve": 0,
    "time": 2898.3330078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ (- (/ PI a) (/ PI b)) 2.0) (- b a)) (+ b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.084617614909417,
    "avg_bits_err_output": 0.2904840539021473,
    "avg_bits_err_improve": 13.79413356100727,
    "time": 18534.8017578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (/ (+ (/ (- (exp (* x (- -1.0 eps))) (exp (- (* x eps) x))) eps) (- (exp (fma eps x (- x))))) -1.0) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 21,
    "avg_bits_err_input": 30.466625857289806,
    "avg_bits_err_output": 0.9454819980282507,
    "avg_bits_err_improve": 29.521143859261556,
    "time": 37217.87744140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (expm1 (log1p (/ 1.0 (+ 2.0 (* (- (/ 2.0 (+ t (/ t t))) 2.0) (- (/ 2.0 (+ t (/ t t))) 2.0)))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.013125,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 0.005999999999999999,
    "time": 6708.939697265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.017125,
    "avg_bits_err_output": 0.017125,
    "avg_bits_err_improve": 0,
    "time": 12465.03173828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (+ 2.0 (/ (* (/ t (+ t 1.0)) (* t 4.0)) (+ t 1.0))) 1.0) (+ 2.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.0075,
    "avg_bits_err_output": 0.04245056406367187,
    "avg_bits_err_improve": -0.03495056406367187,
    "time": 13157.10986328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 2949.04248046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 9069.147216796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2497.27197265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.808299539132032,
    "avg_bits_err_output": 0.252125,
    "avg_bits_err_improve": 7.556174539132032,
    "time": 37307.97802734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.307054420725671,
    "avg_bits_err_output": 7.307054420725671,
    "avg_bits_err_improve": 0,
    "time": 17174.04296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.95912717625473,
    "avg_bits_err_output": 0.02791232390498469,
    "avg_bits_err_improve": 15.931214852349745,
    "time": 10501.479248046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (- (* (pow (exp (* x x)) 10.0) (+ (cos x) -1.0))) 0.0) (/ (* (+ (cos x) -1.0) (* (cos x) (pow (exp (* x x)) 20.0))) (* (pow (exp (* x x)) 10.0) (+ (cos x) -1.0))) (* (pow (exp (* x x)) 10.0) (cos x)))",
    "output_parens": 29,
    "avg_bits_err_input": 3.540502444771896,
    "avg_bits_err_output": 3.0810300597353413,
    "avg_bits_err_improve": 0.4594723850365545,
    "time": 25650.323486328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -1e+26) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) (/ x (fma x x 1.0))) (if (<= x 1e-26) (/ (+ (/ x (fma x x 1.0)) (/ (+ x (+ x x)) (fma x x 1.0))) 4.0) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) (/ x (fma x x 1.0)))))",
    "output_parens": 62,
    "avg_bits_err_input": 14.68810725363533,
    "avg_bits_err_output": 0.016021240625180292,
    "avg_bits_err_improve": 14.67208601301015,
    "time": 8061.09228515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.506265881854695,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.506265881854695,
    "time": 5233.524658203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.6191748059602,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.6189248059602,
    "time": 5007.44091796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.3005,
    "avg_bits_err_improve": 63.6995,
    "time": 21993.988037109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ (* t 1.6e-47) 4e-16) t)",
    "output_parens": 3,
    "avg_bits_err_input": 61.84325373223181,
    "avg_bits_err_output": 0.34979248125036055,
    "avg_bits_err_improve": 61.49346125098145,
    "time": 14928.46533203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b 2.6e+146) (/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0)) (/ (- b) (* a 2.0)))",
    "output_parens": 28,
    "avg_bits_err_input": 34.04895770910524,
    "avg_bits_err_output": 21.317804726526415,
    "avg_bits_err_improve": 12.731152982578823,
    "time": 30312.99462890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.9e-288) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* (* a c) 4.0) (- b (sqrt (fma a (* c -4.0) (* b b))))) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 50,
    "avg_bits_err_input": 34.52001636568025,
    "avg_bits_err_output": 15.644304356005343,
    "avg_bits_err_improve": 18.875712009674906,
    "time": 27787.766845703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2252.467041015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.70703321656496,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 39.69715821656496,
    "time": 5662.73095703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.166642772734377,
    "avg_bits_err_output": 20.166642772734377,
    "avg_bits_err_improve": 0,
    "time": 4547.008544921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6594213341394606,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6594213341394606,
    "time": 8139.539306640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.041125,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.040375,
    "time": 12422.2958984375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(* (+ a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.019896240625180292,
    "avg_bits_err_output": 0.019896240625180292,
    "avg_bits_err_improve": 0,
    "time": 3285.87255859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.01225,
    "time": 3882.283447265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.00075,
    "time": 2293.02978515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ c b) (+ a d)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4036797000057695,
    "avg_bits_err_output": 0.240625,
    "avg_bits_err_improve": 0.16305470000576952,
    "time": 8993.153564453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (* (cos (+ x x)) 0.5) 0.0) (/ (- (* 0.5 (* (cos (+ x x)) 0.5)) (* (* (cos (+ x x)) 0.5) (* (cos (+ x x)) 0.5))) (* (cos (+ x x)) 0.5)) (- 0.5 (* (cos (+ x x)) 0.5))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 34,
    "avg_bits_err_input": 30.16991500837944,
    "avg_bits_err_output": 30.126783741461388,
    "avg_bits_err_improve": 0.0431312669180528,
    "time": 12117.24755859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.579067066851806,
    "avg_bits_err_output": 0.29775,
    "avg_bits_err_improve": 24.281317066851805,
    "time": 13735.992431640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (- (* x x) (pow (sin x) 2.0)) (fma (sin (- x)) (sin x) (pow (sin x) 2.0))) 0.0) (/ (- (pow (- (* x x) (pow (sin x) 2.0)) 2.0) (* (fma (sin (- x)) (sin x) (pow (sin x) 2.0)) (fma (sin (- x)) (sin x) (pow (sin x) 2.0)))) (- (if (!= (pow (sin x) 2.0) 0.0) (- (* (pow (sin x) 2.0) (* x (/ x (pow (sin x) 2.0)))) (/ 1.0 (/ 1.0 (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (fma (sin (- x)) (sin x) (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 75,
    "avg_bits_err_input": 29.935148109685397,
    "avg_bits_err_output": 29.819633273124843,
    "avg_bits_err_improve": 0.11551483656055339,
    "time": 37045.2587890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006625,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 0,
    "time": 2415.10791015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (* 100.0 (/ (pow (+ (/ i n) 1.0) n) (/ i n))) (/ 100.0 (/ i n))))",
    "output_parens": 24,
    "avg_bits_err_input": 47.94170988204123,
    "avg_bits_err_output": 13.319357782013432,
    "avg_bits_err_improve": 34.6223521000278,
    "time": 24309.6015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.3920867006932,
    "avg_bits_err_output": 23.0785109303979,
    "avg_bits_err_improve": 3.313575770295298,
    "time": 13388.56591796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 0.0) (- (* (/ c (fma c c (* d d))) b) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 1e-75) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- (* (/ c (fma c c (* d d))) b) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 26.16791257004547,
    "avg_bits_err_output": 22.552850040671157,
    "avg_bits_err_improve": 3.6150625293743133,
    "time": 15249.541015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (* (- 1.0 ux) 0.5) (+ (* (- 1.0 ux) 0.5) (* ux maxCos)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.03425,
    "avg_bits_err_output": 0.041,
    "avg_bits_err_improve": -0.006749999999999999,
    "time": 12316.377685546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (* (- (fma ux maxCos 1.0) ux) (* ux (+ maxCos -1.0))) 0.0) (/ (- (* (* ux (+ maxCos -1.0)) (* (- (fma ux maxCos 1.0) ux) (+ 1.0 (- ux (fma ux maxCos 1.0))))) (* (* ux (+ maxCos -1.0)) (* (- (fma ux maxCos 1.0) ux) (* (- (fma ux maxCos 1.0) ux) (* ux (+ maxCos -1.0)))))) (* (- (fma ux maxCos 1.0) ux) (* ux (+ maxCos -1.0)))) (- 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)))))",
    "output_parens": 43,
    "avg_bits_err_input": 13.265780636450266,
    "avg_bits_err_output": 11.069918208121212,
    "avg_bits_err_improve": 2.195862428329054,
    "time": 30508.1533203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(log (+ 1.0 (expm1 (* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 13.30430100271784,
    "avg_bits_err_output": 11.876037415143706,
    "avg_bits_err_improve": 1.4282635875741345,
    "time": 28999.931396484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (* ux (* (- 1.0 ux) maxCos)) zi (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* ux (* ux (* (- 1.0 ux) maxCos))))))) xi (* (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* ux (* ux (* (- 1.0 ux) maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.3331290051909574,
    "avg_bits_err_output": 0.3245228676982762,
    "avg_bits_err_improve": 0.008606137492681187,
    "time": 47395.099853515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (log (+ 1.0 (expm1 (cos (atan (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5))))))))) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 40,
    "avg_bits_err_input": 0.20630759366319829,
    "avg_bits_err_output": 0.2066379086730966,
    "avg_bits_err_improve": -0.0003303150098983021,
    "time": 50046.64892578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (log1p (expm1 (/ u1 (- 1.0 u1))))) (sin (* 6.28318530718 u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5398968997108202,
    "avg_bits_err_output": 0.5576491399494881,
    "avg_bits_err_improve": -0.017752240238667838,
    "time": 21895.983642578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (log1p (expm1 (/ u1 (- 1.0 u1))))) (cos (* 6.28318530718 u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3178456279750203,
    "avg_bits_err_output": 0.33473291152024676,
    "avg_bits_err_improve": -0.01688728354522645,
    "time": 22658.43017578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (log (log1p (expm1 (/ 1.0 (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.33478257062772354,
    "avg_bits_err_output": 0.35048566360318484,
    "avg_bits_err_improve": -0.015703092975461297,
    "time": 34802.53271484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05820654601193664,
    "avg_bits_err_output": 0.042984626865391985,
    "avg_bits_err_improve": 0.015221919146544652,
    "time": 10688.464111328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (* (/ (fabs x) s) -0.5)) (/ (/ (exp (/ (/ (/ (- (fabs x)) s) s) (/ 2.0 s))) s) (pow (+ (exp (/ (fabs x) (- s))) 1.0) 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1562500466966886,
    "avg_bits_err_output": 0.26520335287567826,
    "avg_bits_err_improve": -0.10895330617898966,
    "time": 22561.85205078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6876513735889636,
    "avg_bits_err_output": 0.6843174074377069,
    "avg_bits_err_improve": 0.0033339661512566954,
    "time": 21700.581298828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (+ (+ 1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))) -1.0) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.1753757084092386,
    "avg_bits_err_output": 0.18054690037466858,
    "avg_bits_err_improve": -0.005171191965429978,
    "time": 19552.634765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.5257487598013366,
    "avg_bits_err_output": 2.52174063603113,
    "avg_bits_err_improve": 0.004008123770206762,
    "time": 40239.678466796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (/ (* (* (/ 0.5 v) (/ 0.5 v)) (+ cosTheta_i cosTheta_i)) (* (sinh (/ 1.0 v)) (exp (* sinTheta_i (/ sinTheta_O v))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.46658294560228564,
    "avg_bits_err_output": 0.34996790133358685,
    "avg_bits_err_improve": 0.11661504426869879,
    "time": 26363.725341796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ (if (!= 0.6931 0.0) (+ 0.6931 (/ (/ (* (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) 0.6931) v) 0.6931)) (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) 0.6931)) (log (/ 0.5 v))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.10410405243715923,
    "avg_bits_err_output": 0.11068992748945843,
    "avg_bits_err_improve": -0.006585875052299198,
    "time": 26589.051025390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow alpha (* PI 2.0)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4685091442512029,
    "avg_bits_err_output": 0.4204709253142907,
    "avg_bits_err_improve": 0.04803821893691218,
    "time": 24200.78125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(/ (* (* (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) (+ s s)) 3.0) 2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 1.3159584407674125,
    "avg_bits_err_output": 1.2191724753583222,
    "avg_bits_err_improve": 0.09678596540909035,
    "time": 24815.734130859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (- (log1p (* u -4.0))) s)",
    "output_parens": 4,
    "avg_bits_err_input": 12.56426601420522,
    "avg_bits_err_output": 0.2115,
    "avg_bits_err_improve": 12.352766014205221,
    "time": 20127.10205078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (* 2.0 PI)))) (* 0.75 (* (exp (/ r (* s -6.0))) (/ (exp (- (/ (+ (/ r s) (/ (+ r (+ r r)) s)) 24.0))) (* s (* PI 6.0)))))) r)",
    "output_parens": 25,
    "avg_bits_err_input": 0.13847928776050428,
    "avg_bits_err_output": 0.12593950668185538,
    "avg_bits_err_improve": 0.012539781078648893,
    "time": 26744.725830078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8646385385723694,
    "avg_bits_err_output": 0.6766578989420772,
    "avg_bits_err_improve": 0.1879806396302922,
    "time": 28412.366455078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (pow (- (- 1.0 cosTheta) cosTheta) 0.5) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6857721731942664,
    "avg_bits_err_output": 0.4730047331971289,
    "avg_bits_err_improve": 0.21276743999713754,
    "time": 23182.17724609375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.653590131905819,
    "avg_bits_err_output": 0.5196365272287475,
    "avg_bits_err_improve": 13.133953604677071,
    "time": 19968.746337890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (+ (+ (cos (* PI (* u2 -2.0))) -1.0) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 13.691179165085,
    "avg_bits_err_output": 0.30306841118387906,
    "avg_bits_err_improve": 13.38811075390112,
    "time": 20888.577880859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.174956408182862,
    "avg_bits_err_output": 0.3049906015629507,
    "avg_bits_err_improve": 13.869965806619911,
    "time": 14091.72412109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (* (log1p (- u0)) -2.0) (+ (/ sin2phi (* alphay alphay)) (+ (/ sin2phi (* alphay alphay)) (/ (+ cos2phi cos2phi) (* alphax alphax)))))",
    "output_parens": 13,
    "avg_bits_err_input": 12.57253538117605,
    "avg_bits_err_output": 0.5797563851093351,
    "avg_bits_err_improve": 11.992778996066715,
    "time": 14841.30029296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (* (/ (tan (* PI l)) F) (/ 1.0 F)))",
    "output_parens": 7,
    "avg_bits_err_input": 16.723557015822454,
    "avg_bits_err_output": 12.534269133516446,
    "avg_bits_err_improve": 4.189287882306008,
    "time": 20877.181884765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2184387218755409,
    "avg_bits_err_output": 0.15271936093777042,
    "avg_bits_err_improve": 0.06571936093777048,
    "time": 15669.15869140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (expm1 (log1p (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 14.13654311864041,
    "avg_bits_err_output": 11.115497215020966,
    "avg_bits_err_improve": 3.0210459036194433,
    "time": 24129.774658203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(if (<= (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))) INFINITY) (/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (- (expm1 (* PI (/ f 4.0))) (expm1 (* PI (/ f -4.0)))))) (/ PI -4.0)) 0.0)",
    "output_parens": 37,
    "avg_bits_err_input": 61.477159954499704,
    "avg_bits_err_output": 0.5876974552865015,
    "avg_bits_err_improve": 60.8894624992132,
    "time": 53542.993896484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.13593552709568,
    "avg_bits_err_output": 34.154310670842285,
    "avg_bits_err_improve": 8.981624856253397,
    "time": 31351.239990234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.142166604141708,
    "avg_bits_err_output": 0.21680921094065497,
    "avg_bits_err_improve": 3.925357393201053,
    "time": 31297.11083984375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (- (exp (log1p (sqrt (+ (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0) (+ 1.0 (pow (* (* 2.0 (/ l Om)) (sin kx)) 2.0)))))) 1.0)) 0.5)))",
    "output_parens": 20,
    "avg_bits_err_input": 1.0028867854942232,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 0.9955117854942231,
    "time": 13189.15869140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (- -1.0 (+ (- (pow (/ Om Omc) 2.0)) -1.0))) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 13,
    "avg_bits_err_input": 10.01840953910635,
    "avg_bits_err_output": 10.02029340109097,
    "avg_bits_err_improve": -0.0018838619846199833,
    "time": 18351.066162109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(* (pow (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*))))))) 0.5) (* (sqrt (fabs n)) (sqrt (fabs U))))",
    "output_parens": 18,
    "avg_bits_err_input": 35.07639001983728,
    "avg_bits_err_output": 17.56301537433095,
    "avg_bits_err_improve": 17.513374645506328,
    "time": 44757.31494140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= l -4.5e+69) (/ (/ 2.0 (/ (/ (* (* (/ k t) (* (sin k) (tan k))) (/ (pow t 3.0) l)) l) t)) k) (if (<= l 1e-246) (/ (/ 2.0 (/ (* (pow t 3.0) (* (/ (sin k) l) (/ (* k (tan k)) (* t l)))) t)) k) (/ 2.0 (/ (/ (* k (/ (* (/ k t) (* (pow t 3.0) (* (sin k) (tan k)))) l)) t) l))))",
    "output_parens": 40,
    "avg_bits_err_input": 47.59580084174757,
    "avg_bits_err_output": 31.718399483336146,
    "avg_bits_err_improve": 15.877401358411422,
    "time": 53153.966064453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= (/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0))) INFINITY) (/ 2.0 (* (* (pow t 3.0) (/ (sin k) l)) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (tan k) l)))) 0.0)",
    "output_parens": 27,
    "avg_bits_err_input": 31.955668116995383,
    "avg_bits_err_output": 21.15586593500485,
    "avg_bits_err_improve": 10.799802181990533,
    "time": 25046.7001953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (* a2 (/ a2 (sqrt 2.0))) (* a1 (/ a1 (sqrt 2.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5340962437741605,
    "avg_bits_err_output": 0.470536656266227,
    "avg_bits_err_improve": 0.06355958750793356,
    "time": 21758.22900390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* 2.0 (* PI n)) (* k -0.5)) (sqrt (* 2.0 (* PI n)))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5244609778208092,
    "avg_bits_err_output": 0.4520459827840622,
    "avg_bits_err_improve": 0.07241499503674703,
    "time": 20079.099853515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (if (!= (* J (exp l)) 0.0) (* (/ J (exp l)) (expm1 (+ l l))) (* J (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 18,
    "avg_bits_err_input": 17.133124816344267,
    "avg_bits_err_output": 0.09518872187554087,
    "avg_bits_err_improve": 17.037936094468726,
    "time": 27224.28466796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (log (+ 1.0 (expm1 (cos (- (* K (/ (+ m n) 2.0)) M))))) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 19,
    "avg_bits_err_input": 15.5280737184317,
    "avg_bits_err_output": 15.512573710076595,
    "avg_bits_err_improve": 0.015500008355106232,
    "time": 20346.226806640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(if (!= (* -2.0 (* (* J (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (cos (/ K 2.0)) (* J 2.0))) 2.0))))) 0.0) (/ 1.0 (/ 1.0 (* -2.0 (if (!= 0.0 0.0) 0.0 (* (* J (cos (/ K 2.0))) (hypot 1.0 (/ U (* (cos (/ K 2.0)) (* J 2.0))))))))) (* -2.0 (* (* J (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (cos (/ K 2.0)) (* J 2.0))) 2.0))))))",
    "output_parens": 43,
    "avg_bits_err_input": 17.995917481250363,
    "avg_bits_err_output": 7.970425189070864,
    "avg_bits_err_improve": 10.025492292179498,
    "time": 41234.20556640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* 2.0 d) -5e+72) (* w0 (sqrt (- 1.0 (* (/ M (* 2.0 d)) (* D (/ (* h (* D (/ M (* 2.0 d)))) l)))))) (if (<= (* 2.0 d) 2e+178) (* w0 (sqrt (- 1.0 (/ (/ (* D (* M (/ (/ (* h (* M D)) d) l))) d) 4.0)))) (* w0 (sqrt (- 1.0 (* D (* (* (* M (/ h (* d 4.0))) D) (/ M (* l d)))))))))",
    "output_parens": 40,
    "avg_bits_err_input": 14.067381665166643,
    "avg_bits_err_output": 9.042413374376427,
    "avg_bits_err_improve": 5.024968290790216,
    "time": 27162.77685546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e+257) (* c0 (* (sqrt (/ 1.0 l)) (sqrt (/ A V)))) (if (<= (* V l) -4e-294) (* c0 (* (sqrt (- (/ 1.0 (* l V)))) (sqrt (- A)))) (if (<= (* V l) 0.0) (* c0 (* (sqrt (/ 1.0 l)) (sqrt (/ A V)))) (if (<= (* V l) 4e+296) (* c0 (* (sqrt (/ 1.0 (* l V))) (sqrt A))) (* c0 (sqrt (/ (/ A l) V)))))))",
    "output_parens": 42,
    "avg_bits_err_input": 19.173273755806512,
    "avg_bits_err_output": 5.816897656622765,
    "avg_bits_err_improve": 13.356376099183748,
    "time": 23297.863525390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* M M) 1e-301) (/ (/ (* c0 (if (!= (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) (+ (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) w) 2.0) (if (<= (* M M) 5e-89) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* c0 (/ (/ d D) w)) (* D h))) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* c0 (/ (/ d D) w)) (* D h))) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M))))) (fma d (/ (* c0 (/ (/ d D) w)) (* D h)) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M)))))) (if (<= (* M M) 2e+296) (/ (/ (/ (* c0 (if (!= (- (* (pow (/ d D) 2.0) (/ c0 (* w h))) (sqrt (- (pow (* (pow (/ d D) 2.0) (/ c0 (* w h))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* (pow (/ d D) 2.0) (/ c0 (* w h))) (sqrt (- (pow (* (pow (/ d D) 2.0) (/ c0 (* w h))) 2.0) (* M M))))) (fma c0 (/ (pow (/ d D) 2.0) (* w h)) (sqrt (- (pow (* (pow (/ d D) 2.0) (/ c0 (* w h))) 2.0) (* M M)))))) 1.0) w) 2.0) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* d c0) (* (* D D) (* w h)))) (sqrt (fma M (- M) (pow (* d (/ (* d c0) (* (* D D) (* w h)))) 2.0)))) 0.0) (* M (/ M (- (* d (/ (* d c0) (* (* D D) (* w h)))) (sqrt (fma M (- M) (pow (* d (/ (* d c0) (* (* D D) (* w h)))) 2.0)))))) (fma d (/ (* d c0) (* (* D D) (* w h))) (sqrt (fma M (- M) (pow (* d (/ (* d c0) (* (* D D) (* w h)))) 2.0)))))))))",
    "output_parens": 227,
    "avg_bits_err_input": 59.477399904622935,
    "avg_bits_err_output": 29.647339740548727,
    "avg_bits_err_improve": 29.830060164074208,
    "time": 61431.739501953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 4e+249) (* (* (if (!= (sqrt (/ d h)) 0.0) (/ (/ d h) (sqrt (/ d h))) (sqrt (/ d h))) (sqrt (/ d l))) (- 1.0 (* (* M (/ D (+ d d))) (* (* M (/ D (+ d d))) (* h (/ 0.5 l)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) INFINITY) (* (fma 0.5 (* h (/ (pow (* M (/ D (* d 2.0))) 2.0) l)) -1.0) (- (* (* (sqrt (/ (/ 1.0 h) (+ l l))) (sqrt (+ d d))) (sqrt d)))) (* (sqrt (* d (/ d (* h l)))) (- 1.0 (* h (* 0.5 (* (* M (/ D (+ d d))) (/ (* M (/ D (+ d d))) l))))))))",
    "output_parens": 91,
    "avg_bits_err_input": 26.979217564542626,
    "avg_bits_err_output": 20.7329867925264,
    "avg_bits_err_improve": 6.246230772016226,
    "time": 70352.77709960938,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (exp (* 1.0 (log (/ 0.25 (fma x x 1.0)))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 36,
    "avg_bits_err_input": 15.441218408153023,
    "avg_bits_err_output": 14.938509850937796,
    "avg_bits_err_improve": 0.502708557215227,
    "time": 25039.94287109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9848962406251803,
    "avg_bits_err_output": 0.011198120312590145,
    "avg_bits_err_improve": 0.9736981203125902,
    "time": 4064.68701171875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ 1.0 PI) (* (sqrt (- 2.0 (* v (* v 6.0)))) (* (- 1.0 (* v v)) t))) (* (* v v) (/ (/ (/ (/ 5.0 t) PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.4508996903074717,
    "avg_bits_err_output": 0.3137974786280689,
    "avg_bits_err_improve": 0.13710221167940279,
    "time": 22865.52880859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (- (* v (* v (sqrt (- 2.0 (* v (* v 6.0)))))) (sqrt (- 2.0 (* v (* v 6.0))))) -4.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.01164624062518029,
    "avg_bits_err_output": 0.00575,
    "avg_bits_err_improve": 0.00589624062518029,
    "time": 5923.975830078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (- -1.0 (+ (* (* v v) -5.0) -1.0))) (- (* v v) 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5352647360209091,
    "avg_bits_err_output": 0.5542075845738269,
    "avg_bits_err_improve": -0.018942848552917835,
    "time": 9053.319580078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.771707114896289,
    "avg_bits_err_output": 1.7632071148962891,
    "avg_bits_err_improve": 0.008499999999999952,
    "time": 20230.08251953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (pow (exp (/ (+ mu (- EDonor (- Ec Vef))) (+ KbT KbT))) 2.0))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.03188787450397706,
    "avg_bits_err_output": 0.03190840092275805,
    "avg_bits_err_improve": -2.052641878098893e-05,
    "time": 11663.75,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow b 4.0) (* (* a a) (+ (* b (+ b b)) (* a a)))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18579697249404314,
    "avg_bits_err_output": 0.1030845662422404,
    "avg_bits_err_improve": 0.08271240625180275,
    "time": 11351.594970703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (fma b (* a (* b a)) (pow b 4.0)) (* (* a a) (fma a a (* b b)))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 20,
    "avg_bits_err_input": 0.18888333395870788,
    "avg_bits_err_output": 0.10466537844198527,
    "avg_bits_err_improve": 0.0842179555167226,
    "time": 23214.43212890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (+ (pow b 4.0) (fma (+ b b) (* a (* a b)) (pow a 4.0))) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 25,
    "avg_bits_err_input": 0.18917557175431662,
    "avg_bits_err_output": 0.01860396288740179,
    "avg_bits_err_improve": 0.17057160886691483,
    "time": 29177.24365234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.556949941172181,
    "avg_bits_err_output": 13.556949941172181,
    "avg_bits_err_improve": 0,
    "time": 20830.18115234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.4978094337969,
    "avg_bits_err_output": 0.032375,
    "avg_bits_err_improve": 40.4654344337969,
    "time": 5140.321533203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (+ (+ 1.0 (/ (pow (tan x) 2.0) (+ x (tan x)))) -1.0)) (- x (tan x))))",
    "output_parens": 21,
    "avg_bits_err_input": 31.936707880230397,
    "avg_bits_err_output": 31.116005479161245,
    "avg_bits_err_improve": 0.8207024010691519,
    "time": 27632.51025390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.9e-281) (/ (- (if (!= (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2) 0.0) (* (/ c (- b_2 (sqrt (fma c (- a) (* b_2 b_2))))) a) (+ b_2 (sqrt (fma b_2 b_2 (* c (- a)))))) (+ b_2 b_2)) a) (if (<= b_2 1.35e+154) (if (!= (/ (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2)) 0.0) (/ (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2) a)) (/ (if (!= (- b_2) 0.0) (fma a (/ c (* b_2 -2.0)) (* c (/ (/ a b_2) -2.0))) (- b_2)) a)))",
    "output_parens": 62,
    "avg_bits_err_input": 34.3296966223253,
    "avg_bits_err_output": 11.105677914009783,
    "avg_bits_err_improve": 23.22401870831552,
    "time": 21978.75048828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- (sqrt (- (* b_2 b_2) (* a c)))) b_2)) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.0714052041139,
    "avg_bits_err_output": 21.930843154677312,
    "avg_bits_err_improve": 12.14056204943659,
    "time": 19436.658447265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (* (/ 1.0 x) (- 1.0 (cos x))) x)",
    "output_parens": 5,
    "avg_bits_err_input": 31.100323104351038,
    "avg_bits_err_output": 30.310255245757364,
    "avg_bits_err_improve": 0.7900678585936731,
    "time": 17556.79052734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 33.17957847590282,
    "avg_bits_err_output": 10.925745637102743,
    "avg_bits_err_improve": 22.25383283880008,
    "time": 32992.005859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (- (- (- (+ 2.0 (exp (- (log1p N) (log N)))) -1.0) 2.0) 2.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 29.32475496090731,
    "avg_bits_err_output": 29.337323755466713,
    "avg_bits_err_improve": -0.012568794559403074,
    "time": 12421.65087890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (/ 1.0 x) (if (!= (/ x (+ x 1.0)) 0.0) (/ (- (* (/ x (+ x 1.0)) x) x) (/ (fma x x x) (+ x 1.0))) (+ (/ x (+ x 1.0)) -1.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 14.248885183343658,
    "avg_bits_err_output": 13.990088240033312,
    "avg_bits_err_improve": 0.25879694331034564,
    "time": 16150.296142578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -4.5e-190) (+ (fma (- (sin eps)) (sin x) (* (sin x) (sin eps))) (fma (sin x) (- (sin eps)) (* (+ (cos eps) -1.0) (cos x)))) (if (<= x 1.05e-112) (if (!= (+ (cos (+ x eps)) (cos x)) 0.0) (/ (- (* (sin x) (sin x)) (* (sin (+ x eps)) (sin (+ x eps)))) (+ (cos (+ x eps)) (cos x))) (- (cos (+ x eps)) (cos x))) (- (* (+ (cos eps) -1.0) (cos x)) (* (sin x) (sin eps)))))",
    "output_parens": 52,
    "avg_bits_err_input": 39.46031141867641,
    "avg_bits_err_output": 2.6713068139144536,
    "avg_bits_err_improve": 36.789004604761956,
    "time": 25872.09228515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (if (!= (- (cbrt x)) 0.0) (/ (* (cbrt x) (if (!= (cbrt (+ x 1.0)) 0.0) (/ (- (* (cbrt (+ x 1.0)) (cbrt (+ x 1.0))) (* (cbrt (+ x 1.0)) (+ (cbrt x) 1.0))) (cbrt (+ x 1.0))) (- (expm1 (* 0.3333333333333333 (log1p x))) (cbrt x)))) (cbrt x)) (- (expm1 (* 0.3333333333333333 (log1p x))) (cbrt x))) 1.0)",
    "output_parens": 37,
    "avg_bits_err_input": 29.84055146491137,
    "avg_bits_err_output": 29.466982383474463,
    "avg_bits_err_improve": 0.3735690814369086,
    "time": 15455.9892578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (if (!= (cos x) 0.0) (/ (- (cos x) (pow (cos x) 2.0)) (cos x)) (- 1.0 (cos x))) (sin x))",
    "output_parens": 13,
    "avg_bits_err_input": 30.386027519795867,
    "avg_bits_err_output": 30.441939446705298,
    "avg_bits_err_improve": -0.05591192690943103,
    "time": 23208.829345703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* a (* c (/ 4.0 (- (- b) (sqrt (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.196290081002864,
    "avg_bits_err_output": 21.574155478069912,
    "avg_bits_err_improve": 12.622134602932952,
    "time": 28426.619873046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.39471082197148,
    "avg_bits_err_output": 22.07286060604829,
    "avg_bits_err_improve": 12.321850215923188,
    "time": 24443.7822265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.22634751687551,
    "avg_bits_err_output": 0.022429323438491595,
    "avg_bits_err_improve": 61.20391819343701,
    "time": 13335.625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log1p n) (log n)) n)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 63.00267498396311,
    "avg_bits_err_output": 44.22041200741528,
    "avg_bits_err_improve": 18.782262976547834,
    "time": 14885.703369140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (/ (+ eps eps) (- -1.0 eps)))",
    "output_parens": 4,
    "avg_bits_err_input": 58.54819709755006,
    "avg_bits_err_output": 0.018625,
    "avg_bits_err_improve": 58.52957209755006,
    "time": 21028.986083984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (- 1.0 (/ 1.0 (/ (tan x) x))) x)",
    "output_parens": 5,
    "avg_bits_err_input": 59.84548669582391,
    "avg_bits_err_output": 59.84458812845568,
    "avg_bits_err_improve": 0.0008985673682246897,
    "time": 28903.511962890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.232625251042634,
    "avg_bits_err_output": 28.807408215949653,
    "avg_bits_err_improve": 31.42521703509298,
    "time": 27925.359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 40.86640520061961,
    "avg_bits_err_output": 0.37344812031259017,
    "avg_bits_err_improve": 40.49295708030702,
    "time": 5553.982666015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.54124921015561,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.54074921015561,
    "time": 2831.3369140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(if (!= (- -1.0 (exp (* a x))) 0.0) (/ (expm1 (* a (+ x x))) (+ (expm1 (* a x)) 2.0)) (expm1 (* a x)))",
    "output_parens": 14,
    "avg_bits_err_input": 29.52050738731715,
    "avg_bits_err_output": 0.06480619624580493,
    "avg_bits_err_improve": 29.455701191071345,
    "time": 4020.364990234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (- (exp x) 2.0) (exp (- x))) 0.0) (/ (+ (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))) (+ (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0))) (fma (/ -1.0 (exp x)) (exp (- x)) (exp (* x -2.0))))) (- (- (exp x) 2.0) (exp (- x)))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 41,
    "avg_bits_err_input": 29.214461849268176,
    "avg_bits_err_output": 28.926409035518414,
    "avg_bits_err_improve": 0.2880528137497613,
    "time": 25740.120361328125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (* (/ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 4.0 (+ 1.0 x))) (/ 4.0 (+ 1.0 x))) (/ 1.0 (- x 1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 9.843690680938964,
    "avg_bits_err_output": 9.843810884810939,
    "avg_bits_err_improve": -0.00012020387197431148,
    "time": 19048.372802734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (tan x))",
    "output_parens": 4,
    "avg_bits_err_input": 36.7119505772127,
    "avg_bits_err_output": 36.7119505772127,
    "avg_bits_err_improve": 0,
    "time": 20784.6806640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (pow (+ x 1.0) 0.5) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.01322397282652,
    "avg_bits_err_output": 0.17179736875252402,
    "avg_bits_err_improve": 29.841426604073995,
    "time": 13060.19482421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.02781205846847,
    "avg_bits_err_output": 21.92943708922012,
    "avg_bits_err_improve": 15.09837496924835,
    "time": 20858.150390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (!= (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x)))) 0.0) (/ (+ (/ 1.0 x) (/ -1.0 (+ 1.0 x))) (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x))))) (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (+ 1.0 x)))))",
    "output_parens": 25,
    "avg_bits_err_input": 19.67262804726614,
    "avg_bits_err_output": 19.7300004350923,
    "avg_bits_err_improve": -0.05737238782615961,
    "time": 18061.296142578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 14.925742312787628,
    "avg_bits_err_output": 14.925742312787628,
    "avg_bits_err_improve": 0,
    "time": 4753.285888671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.887854101821585,
    "avg_bits_err_output": 1.3005975755771406,
    "avg_bits_err_improve": 28.587256526244445,
    "time": 26401.49658203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (* (+ m -1.0) (- (* m m) m)) v) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07366484475338013,
    "avg_bits_err_output": 0.07686306252922256,
    "avg_bits_err_improve": -0.003198217775842435,
    "time": 15134.44677734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(- (* (/ a (/ 1.0 b)) (* b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 16.52721110657995,
    "avg_bits_err_output": 0.2625167296902943,
    "avg_bits_err_improve": 16.264694376889658,
    "time": 11959.689208984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (+ (/ (* PI (+ angle (+ angle angle))) 720.0) (/ (* PI angle) 720.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 16,
    "avg_bits_err_input": 19.863074373178627,
    "avg_bits_err_output": 19.887578823798204,
    "avg_bits_err_improve": -0.02450445061957751,
    "time": 34554.991943359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* angle (/ PI 180.0))) (cos (/ (* PI angle) -180.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 31.767193257253773,
    "avg_bits_err_output": 31.803975758646782,
    "avg_bits_err_improve": -0.036782501393009426,
    "time": 32077.484130859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (- (- (- (+ (cos (* angle (/ PI 180.0))) 1.0) -2.0) 2.0) 1.0)) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 19.959423476632974,
    "avg_bits_err_output": 19.963677943600228,
    "avg_bits_err_improve": -0.004254466967253734,
    "time": 41136.10791015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (+ (/ (fma (- m) m (* m m)) v) (/ (- m (* m m)) v)) 1.0) m)",
    "output_parens": 10,
    "avg_bits_err_input": 0.18050055538953297,
    "avg_bits_err_output": 0.1773330741391724,
    "avg_bits_err_improve": 0.0031674812503605654,
    "time": 19102.089111328125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32558722911195537,
    "avg_bits_err_output": 0.32218475922053535,
    "avg_bits_err_improve": 0.0034024698914200124,
    "time": 20811.470947265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13684436093777044,
    "avg_bits_err_output": 0.13684436093777044,
    "avg_bits_err_improve": 0,
    "time": 15734.059326171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.198816294993406,
    "avg_bits_err_output": 17.193047204826886,
    "avg_bits_err_improve": 0.005769090166520385,
    "time": 35648.169189453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.18668749439654,
    "avg_bits_err_output": 0.17068665469173674,
    "avg_bits_err_improve": 52.0160008397048,
    "time": 27830.197021484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 28.44517071933788,
    "avg_bits_err_output": 0.33703627969894845,
    "avg_bits_err_improve": 28.10813443963893,
    "time": 25123.791748046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (- (* a (* c -4.0)) (* b b)) 0.0) (/ (fma (* (* c (* c a)) a) 16.0 (- (pow b 4.0))) (- (* a (* c -4.0)) (* b b))) (fma b b (* a (* c -4.0)))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 39,
    "avg_bits_err_input": 43.67076178833966,
    "avg_bits_err_output": 0.2544558281331126,
    "avg_bits_err_improve": 43.41630596020655,
    "time": 33966.692138671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (if (!= (/ b (+ a a)) 0.0) (if (!= (/ 4.0 (/ 8.0 (/ b a))) 0.0) (/ -4.0 (/ 8.0 (/ b a))) (/ -4.0 (/ 8.0 (/ b a)))) (/ (- b (sqrt (fma b b (* a (* c -4.0))))) (* a -2.0))) (if (<= b -1.72e-196) (/ (- (+ b (sqrt (fma b b (* (* a c) -4.0)))) (+ b b)) (* a 2.0)) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* a (/ (* -4.0 c) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))))",
    "output_parens": 58,
    "avg_bits_err_input": 34.19223999182593,
    "avg_bits_err_output": 20.255901140840397,
    "avg_bits_err_improve": 13.936338850985532,
    "time": 23962.43798828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8229353861021843,
    "avg_bits_err_output": 0.8229353861021843,
    "avg_bits_err_improve": 0,
    "time": 30216.6123046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (- (/ (/ 4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)) (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) (/ 2.0 (+ 2.0 (/ 4.0 (+ 1.0 (exp (* -2.0 x))))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 30,
    "avg_bits_err_input": 29.257231818172045,
    "avg_bits_err_output": 29.253573772182968,
    "avg_bits_err_improve": 0.003658045989077152,
    "time": 15227.661865234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(- (/ (exp x) (+ (exp x) (exp (- x)))) (/ 1.0 (+ (exp (+ x x)) 1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 58.08868462277677,
    "avg_bits_err_output": 57.46190919277706,
    "avg_bits_err_improve": 0.6267754299997108,
    "time": 19196.571044921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (- (* (expm1 (* x -2.0)) (- (expm1 x))) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 9,
    "avg_bits_err_input": 57.7514954079555,
    "avg_bits_err_output": 0.18547936283216046,
    "avg_bits_err_improve": 57.56601604512334,
    "time": 10826.670654296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007344360937770433,
    "avg_bits_err_output": 0.007344360937770433,
    "avg_bits_err_improve": 0,
    "time": 2704.220458984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.241125,
    "avg_bits_err_output": 32.241125,
    "avg_bits_err_improve": 0,
    "time": 4730.8125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (if (!= (* x (/ x (pow (- 1.0 x) 2.0))) 0.0) (* (/ (* x x) (pow (- 1.0 x) 2.0)) (- (/ (/ 1.0 (pow (- 1.0 x) 2.0)) (/ (* x x) (pow (- 1.0 x) 2.0))) (* x (/ x (* x x))))) (/ (- -1.0 x) (- x 1.0)))))",
    "output_parens": 28,
    "avg_bits_err_input": 58.54673702084727,
    "avg_bits_err_output": 58.63455500493177,
    "avg_bits_err_improve": -0.08781798408450214,
    "time": 25766.181640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04369812031259015,
    "avg_bits_err_output": 0.043875,
    "avg_bits_err_improve": -0.0001768796874098491,
    "time": 3969.6552734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* (* eh (cos t)) (sin (atan (/ eh (* ew (tan t))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.125375,
    "avg_bits_err_output": 0.124625,
    "avg_bits_err_improve": 0.0007499999999999868,
    "time": 25205.345947265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12607312031259016,
    "avg_bits_err_output": 0.12607312031259016,
    "avg_bits_err_improve": 0,
    "time": 26283.757080078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (cos (/ phi1 -2.0)) (* (cos (/ phi2 -2.0)) (- lambda1 lambda2)) (* (* (sin (/ phi1 -2.0)) (sin (/ phi2 2.0))) (- lambda1 lambda2))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.01120546324586,
    "avg_bits_err_output": 0.1239628391940459,
    "avg_bits_err_improve": 38.887242624051815,
    "time": 30453.7998046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.543707163975762,
    "avg_bits_err_output": 0.011594360937770436,
    "avg_bits_err_improve": 14.532112803037991,
    "time": 6308.473388671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (+ (- (cos delta) (expm1 (log1p (* (sin phi1) (/ (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) 2.0))))) (- (* (sin phi1) (/ (sin (asin (fma (cos delta) (sin phi1) (* (cos phi1) (* (sin delta) (cos theta)))))) 2.0))))))",
    "output_parens": 39,
    "avg_bits_err_input": 0.14608197728352681,
    "avg_bits_err_output": 0.15406918018033133,
    "avg_bits_err_improve": -0.007987202896804518,
    "time": 38293.239990234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* c (* a -3.0))))) 0.0) (* (/ c (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a -3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 52.19193956543452,
    "avg_bits_err_output": 0.17287293281619595,
    "avg_bits_err_improve": 52.01906663261832,
    "time": 33259.557861328125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* a -3.0)))) (- b)) 0.0) (* (* a -3.0) (/ c (- (sqrt (fma b b (* c (* a -3.0)))) (- b)))) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.628214395472614,
    "avg_bits_err_output": 0.34630300938924335,
    "avg_bits_err_improve": 28.281911386083372,
    "time": 28527.34375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.76212072528842,
    "avg_bits_err_output": 0.23058778281908027,
    "avg_bits_err_improve": 43.53153294246934,
    "time": 27214.6435546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (!= (/ (- (- (sqrt (fma b b (* c (* a -3.0))))) b) (* a 3.0)) 0.0) (- (/ (* c (/ (* a -3.0) (* a -3.0))) (- (- (sqrt (fma b b (* c (* a -3.0))))) b)) 0.0) (/ (- (sqrt (fma b b (* c (* a -3.0)))) b) (* a 3.0)))",
    "output_parens": 29,
    "avg_bits_err_input": 34.24197516158707,
    "avg_bits_err_output": 19.53568835647334,
    "avg_bits_err_improve": 14.70628680511373,
    "time": 24392.302734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (cos (- lambda2 lambda1))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.380679768160723,
    "avg_bits_err_output": 13.382218196726374,
    "avg_bits_err_improve": -0.0015384285656505625,
    "time": 35988.21923828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 28.462837068428296,
    "avg_bits_err_output": 0.5306852920160327,
    "avg_bits_err_improve": 27.932151776412265,
    "time": 21432.647216796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.011625,
    "avg_bits_err_output": 0.011625,
    "avg_bits_err_improve": 0,
    "time": 8172.2119140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))) 0.0) (/ (if (!= (- (- (pow (/ 1.0 (+ 1.0 x)) 2.0) (/ 1.0 (pow (+ x -1.0) 2.0))) (fma (- (/ 1.0 (+ x -1.0))) (/ 1.0 (+ x -1.0)) (/ 1.0 (pow (+ x -1.0) 2.0)))) 0.0) (/ (- (pow (- (pow (/ 1.0 (+ 1.0 x)) 2.0) (/ 1.0 (pow (+ x -1.0) 2.0))) 2.0) (* (if (!= (- (/ -1.0 (pow (+ x -1.0) 2.0)) (pow (/ 1.0 (+ x -1.0)) 2.0)) 0.0) (/ (fma (- (pow (/ 1.0 (+ x -1.0)) 2.0)) (- (pow (/ 1.0 (+ x -1.0)) 2.0)) (- (pow (/ 1.0 (pow (+ x -1.0) 2.0)) 2.0))) (- (/ -1.0 (pow (+ x -1.0) 2.0)) (pow (/ 1.0 (+ x -1.0)) 2.0))) (fma (pow (/ 1.0 (+ x -1.0)) 2.0) -1.0 (/ 1.0 (pow (+ x -1.0) 2.0)))) (fma (- (/ 1.0 (+ x -1.0))) (/ 1.0 (+ x -1.0)) (/ 1.0 (pow (+ x -1.0) 2.0))))) (- (- (pow (/ 1.0 (+ 1.0 x)) 2.0) (/ 1.0 (pow (+ x -1.0) 2.0))) (fma (- (/ 1.0 (+ x -1.0))) (/ 1.0 (+ x -1.0)) (/ 1.0 (pow (+ x -1.0) 2.0))))) (- (pow (/ 1.0 (+ 1.0 x)) 2.0) (/ 1.0 (pow (+ x -1.0) 2.0)))) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))) (- (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 119,
    "avg_bits_err_input": 13.97788253504498,
    "avg_bits_err_output": 14.151510230997822,
    "avg_bits_err_improve": -0.17362769595284178,
    "time": 21966.177001953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2e-310) (* (sqrt (- F)) (* (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) (- A))) (/ (sqrt (fma (* A C) -8.0 (* 2.0 (pow B 2.0)))) (- (* C (* A 4.0)) (pow B 2.0))))) (/ (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (* (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (sqrt (* 2.0 F)))) (- (* A (* C 4.0)) (pow B 2.0))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.02378954338342,
    "avg_bits_err_output": 46.4399798017608,
    "avg_bits_err_improve": 5.583809741622623,
    "time": 43557.46044921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -1e+84) (* (atan (/ (- C (if (!= A 0.0) (/ (* A (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) A) (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) B)) (/ 180.0 PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 0.0) (/ (* (atan (/ (if (!= (+ (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (- C A)) 0.0) (/ (- (- (* (- C A) (- C A)) (pow (- A C) 2.0)) (pow B 2.0)) (+ (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (- C A))) (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) B)) 180.0) PI) (* (atan (/ (- (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) A) B)) (/ 180.0 PI))))",
    "output_parens": 90,
    "avg_bits_err_input": 29.71015275926808,
    "avg_bits_err_output": 26.129075406983645,
    "avg_bits_err_improve": 3.581077352284435,
    "time": 27579.016845703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -6.6e-299) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 F)))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (* (/ (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (- (* A (* C 4.0)) (pow B 2.0))) (sqrt F))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.740710839481196,
    "avg_bits_err_output": 46.86327212283082,
    "avg_bits_err_improve": 5.877438716650374,
    "time": 49993.618896484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.789346630896121,
    "avg_bits_err_output": 15.789346630896121,
    "avg_bits_err_improve": 0,
    "time": 14316.44775390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-228) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) (- g)) 0.0) (* h (/ h (- (- g) (sqrt (fma g g (* h (- h))))))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 69,
    "avg_bits_err_input": 35.98163594674697,
    "avg_bits_err_output": 6.124228562477392,
    "avg_bits_err_improve": 29.857407384269578,
    "time": 36504.366455078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos (* PI 0.6666666666666666)) (cos (log (+ 1.0 (expm1 (/ (acos (/ g (- h))) 3.0)))))) (* (sin (expm1 (log1p (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.9887885503953355,
    "avg_bits_err_output": 0.02479248125036058,
    "avg_bits_err_improve": 0.9639960691449749,
    "time": 19533.384765625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.684625,
    "avg_bits_err_output": 0.684625,
    "avg_bits_err_improve": 0,
    "time": 5078.7392578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-250) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ (/ a2 b1) b2) a1) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+291) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.217747438681487,
    "avg_bits_err_output": 2.9836264735695135,
    "avg_bits_err_improve": 8.234120965111973,
    "time": 7634.152099609375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.471054483806003,
    "avg_bits_err_output": 0.4055,
    "avg_bits_err_improve": 0.06555448380600298,
    "time": 10358.6533203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.0) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 40000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.0760533601966,
    "avg_bits_err_output": 0.30047498124583993,
    "avg_bits_err_improve": 52.77557837895076,
    "time": 9234.46142578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.739294068766958,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.739294068766958,
    "time": 2841.755859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (expm1 (log1p (/ (- 1.0 x) (- x -1.0)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 0.0023750000000000004,
    "time": 13953.180908203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1199.81640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (- (+ 3.0 (/ 2.0 (* r r))) (* (fma (* r w) (* r w) 0.0) (/ (* 0.125 (- 3.0 (* 2.0 v))) (- 1.0 v)))) 4.5)",
    "output_parens": 14,
    "avg_bits_err_input": 12.425687634112146,
    "avg_bits_err_output": 0.3835716332086461,
    "avg_bits_err_improve": 12.0421160009035,
    "time": 25688.2744140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* x1 (* x1 (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0))))))))))",
    "output_parens": 48,
    "avg_bits_err_input": 0.51500260748199,
    "avg_bits_err_output": 0.30044340621222354,
    "avg_bits_err_improve": 0.21455920126976646,
    "time": 73045.7333984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= t1 -6.6e-267) (/ (* (/ t1 (- (- u) t1)) v) (+ t1 u)) (if (<= t1 6.6e-270) (* (- t1) (/ (/ v (+ t1 u)) (+ t1 u))) (/ (* (/ t1 (- (- u) t1)) v) (+ t1 u))))",
    "output_parens": 22,
    "avg_bits_err_input": 18.304213894702073,
    "avg_bits_err_output": 1.5225156067112686,
    "avg_bits_err_improve": 16.781698287990803,
    "time": 10557.035888671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.26071275847734965,
    "avg_bits_err_output": 0.18391484475338007,
    "avg_bits_err_improve": 0.07679791372396957,
    "time": 9925.396728515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0021009193652572005,
    "avg_bits_err_output": 0.0021009193652572005,
    "avg_bits_err_improve": 0,
    "time": 2662.26025390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* (- (/ 1.0 (* b (- b a))) (/ 1.0 (* a (- b a)))) (/ PI -2.0)) (+ b a))",
    "output_parens": 11,
    "avg_bits_err_input": 13.757174470309106,
    "avg_bits_err_output": 0.2795362796989482,
    "avg_bits_err_improve": 13.477638190610158,
    "time": 18694.03173828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (exp (* x (- -1.0 eps))) 1.0 (- (+ (/ (- (exp (* x (- -1.0 eps))) (exp (- (* x eps) x))) eps) (- (exp (- (* eps x) x)))))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 30.03112156650771,
    "avg_bits_err_output": 0.8964047303559783,
    "avg_bits_err_improve": 29.134716836151732,
    "time": 21451.78076171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.01125,
    "avg_bits_err_improve": 0,
    "time": 5292.191162109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.015625,
    "avg_bits_err_output": 0.015625,
    "avg_bits_err_improve": 0,
    "time": 14987.2119140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (+ 2.0 (/ (* t (/ (* t 4.0) (+ t 1.0))) (+ t 1.0))) 1.0) (+ 2.0 (/ (* t (/ (* t 4.0) (+ t 1.0))) (+ t 1.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.0095,
    "avg_bits_err_output": 0.027375,
    "avg_bits_err_improve": -0.017875000000000002,
    "time": 13592.302978515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3959.387451171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7959.7548828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2712.728271484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8371841634018695,
    "avg_bits_err_output": 0.247375,
    "avg_bits_err_improve": 7.58980916340187,
    "time": 35323.6044921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (if (!= (+ (pow (+ x eps) 5.0) 1.0) 0.0) (/ (+ (pow (+ x eps) 5.0) (pow (+ x eps) 10.0)) (+ (pow (+ x eps) 5.0) 1.0)) (pow (+ x eps) 5.0)) (pow x 5.0))",
    "output_parens": 18,
    "avg_bits_err_input": 7.484800959171523,
    "avg_bits_err_output": 7.502007200033754,
    "avg_bits_err_improve": -0.017206240862230437,
    "time": 16660.19091796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (+ (* x (+ eps eps)) (* eps eps)) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 16.244735096869938,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 16.23086009686994,
    "time": 11455.70654296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (pow (pow (exp 10.0) x) x) (log (exp (cos x))))",
    "output_parens": 7,
    "avg_bits_err_input": 3.5386042855481405,
    "avg_bits_err_output": 1.2751545861052886,
    "avg_bits_err_improve": 2.2634496994428517,
    "time": 16527.656982421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -0.001) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 2e-7) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 15.0717478663596,
    "avg_bits_err_output": 0.01252124062518029,
    "avg_bits_err_improve": 15.05922662573442,
    "time": 5952.658203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.06648705772956,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.06648705772956,
    "time": 5139.023681640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.12558211302138,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.124832113021384,
    "time": 4846.7744140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.287625,
    "avg_bits_err_improve": 63.712375,
    "time": 21414.4423828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (* -2e-16 (* t -2e-16)))",
    "output_parens": 3,
    "avg_bits_err_input": 61.84325561318282,
    "avg_bits_err_output": 0.389712406251803,
    "avg_bits_err_improve": 61.453543206931016,
    "time": 15671.446044921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.39471082197148,
    "avg_bits_err_output": 22.07286060604829,
    "avg_bits_err_improve": 12.321850215923188,
    "time": 25651.66796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (if (!= (/ b (+ a a)) 0.0) (if (!= (/ 4.0 (/ 8.0 (/ b a))) 0.0) (/ -4.0 (/ 8.0 (/ b a))) (/ -4.0 (/ 8.0 (/ b a)))) (/ (- b (sqrt (fma b b (* a (* c -4.0))))) (* a -2.0))) (if (<= b -1.72e-196) (/ (- (+ b (sqrt (fma b b (* (* a c) -4.0)))) (+ b b)) (* a 2.0)) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* a (/ (* -4.0 c) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))))",
    "output_parens": 58,
    "avg_bits_err_input": 34.19223999182593,
    "avg_bits_err_output": 20.255901140840397,
    "avg_bits_err_improve": 13.936338850985532,
    "time": 28566.39892578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2239.996826171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.9475805527553,
    "avg_bits_err_output": 0.012625,
    "avg_bits_err_improve": 39.9349555527553,
    "time": 7923.330322265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- (* x x) (* y y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.49962911266229,
    "avg_bits_err_output": 20.501046593912648,
    "avg_bits_err_improve": -0.0014174812503569,
    "time": 6591.57275390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.672973892985605,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.672973892985605,
    "time": 7073.194580078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.038,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.03725,
    "time": 9385.7734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.024594360937770437,
    "avg_bits_err_output": 0.012875,
    "avg_bits_err_improve": 0.011719360937770438,
    "time": 3622.72509765625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.016875,
    "avg_bits_err_output": 0.015875,
    "avg_bits_err_improve": 0.0010000000000000009,
    "time": 2481.21630859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.001,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.001,
    "time": 1794.939697265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ c e) (+ a (+ d b)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40579285781763874,
    "avg_bits_err_output": 0.25425,
    "avg_bits_err_improve": 0.15154285781763877,
    "time": 6763.77685546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (/ (- 1.0 (cos (* x 2.0))) 2.0) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 13,
    "avg_bits_err_input": 30.059580929313302,
    "avg_bits_err_output": 30.004354100935316,
    "avg_bits_err_improve": 0.05522682837798598,
    "time": 13195.880126953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (if (!= (sqrt (- (* x x) eps)) 0.0) (/ (+ (- eps) (* x (+ x (sqrt (- (* x x) eps))))) (sqrt (- (* x x) eps))) (+ x (sqrt (- (* x x) eps))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 31,
    "avg_bits_err_input": 23.885156494912707,
    "avg_bits_err_output": 0.06628797031547472,
    "avg_bits_err_improve": 23.81886852459723,
    "time": 13222.609375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (- (* x x) (pow (sin x) 2.0)) (fma (- (sin x)) (sin x) (pow (sin x) 2.0))) 0.0) (/ (- (pow (- (* x x) (pow (sin x) 2.0)) 2.0) (* (fma (- (sin x)) (sin x) (pow (sin x) 2.0)) (fma (- (sin x)) (sin x) (pow (sin x) 2.0)))) (- (+ (fma (- (sin x)) (sin x) (pow (sin x) 2.0)) (+ (fma (- (sin x)) (sin x) (pow (sin x) 2.0)) (- (* x x) (pow (sin x) 2.0)))) (fma (- (sin x)) (sin x) (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 73,
    "avg_bits_err_input": 30.292814726161268,
    "avg_bits_err_output": 30.19526781558706,
    "avg_bits_err_improve": 0.09754691057420928,
    "time": 36337.694580078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006415241011860921,
    "avg_bits_err_output": 0.006415241011860921,
    "avg_bits_err_improve": 0,
    "time": 2291.236328125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 2e-291) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (/ (* (- 1.0 (pow (+ 1.0 (/ i n)) n)) -400.0) (/ (+ i (+ i (+ i i))) n)))",
    "output_parens": 25,
    "avg_bits_err_input": 47.69810470040508,
    "avg_bits_err_output": 13.585254832373744,
    "avg_bits_err_improve": 34.11284986803134,
    "time": 25245.425537109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.18973041289681,
    "avg_bits_err_output": 23.152272853443343,
    "avg_bits_err_improve": 3.0374575594534683,
    "time": 17085.347412109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* b (/ c (fma c c (* d d)))) (* a (if (!= (/ d (fma d d (* c c))) 0.0) (/ 1.0 (/ 1.0 (/ d (fma d d (* c c))))) (/ d (fma d d (* c c))))))",
    "output_parens": 19,
    "avg_bits_err_input": 26.389734815961095,
    "avg_bits_err_output": 23.347310588156343,
    "avg_bits_err_improve": 3.0424242278047515,
    "time": 19267.606689453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (+ (* ux (- maxCos)) ux))",
    "output_parens": 4,
    "avg_bits_err_input": 0.03575,
    "avg_bits_err_output": 0.01993080161791619,
    "avg_bits_err_improve": 0.01581919838208381,
    "time": 5718.220947265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ (- 1.0 (log (+ 1.0 (expm1 (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))) (- (* (* ux maxCos) (fma ux maxCos (- 1.0 ux)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 13.63824748318509,
    "avg_bits_err_output": 12.430228181961999,
    "avg_bits_err_improve": 1.208019301223091,
    "time": 29037.571044921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ ux (- ux (+ (* ux ux) (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.67436470532853,
    "avg_bits_err_output": 0.31572248959041743,
    "avg_bits_err_improve": 13.358642215738113,
    "time": 29330.2470703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (sin (* (* uy 2.0) PI))) yi)) (* (* ux (* (- 1.0 ux) maxCos)) zi))",
    "output_parens": 33,
    "avg_bits_err_input": 0.34068761311264495,
    "avg_bits_err_output": 0.3331438190644158,
    "avg_bits_err_improve": 0.0075437940482291355,
    "time": 55904.3212890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (+ 0.5 (/ (cos (* 2.0 (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5))))))) 2.0)) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 40,
    "avg_bits_err_input": 0.1992922197419501,
    "avg_bits_err_output": 0.2409942975082497,
    "avg_bits_err_improve": -0.04170207776629958,
    "time": 30381.873291015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(if (!= (* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2))) 0.0) (- (* (- (sin (* 6.28318530718 u2))) (/ (- (/ u1 (- 1.0 u1))) (sqrt (/ u1 (- 1.0 u1))))) 0.0) (* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2))))",
    "output_parens": 26,
    "avg_bits_err_input": 0.543569304548471,
    "avg_bits_err_output": 0.6082678049749493,
    "avg_bits_err_improve": -0.06469850042647829,
    "time": 23157.85595703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(- (sqrt (/ u1 (- 1.0 u1))) (* (sqrt (/ u1 (- 1.0 u1))) (- 1.0 (cos (* 6.28318530718 u2)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.3151450401005405,
    "avg_bits_err_output": 0.3288504305415999,
    "avg_bits_err_improve": -0.013705390441059395,
    "time": 22863.648193359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (/ (+ (- 1.0 (/ 1.0 (+ 1.0 (exp (/ PI s))))) (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ PI (- s))))))) (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 70,
    "avg_bits_err_input": 0.32963404237189015,
    "avg_bits_err_output": 0.3045264312014842,
    "avg_bits_err_improve": 0.02510761117040594,
    "time": 47237.211669921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06665255881401566,
    "avg_bits_err_output": 0.04779782351295715,
    "avg_bits_err_improve": 0.01885473530105851,
    "time": 8835.718994140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) s) (pow (+ (expm1 (/ (fabs x) (- s))) 2.0) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 0.16605002735452667,
    "avg_bits_err_output": 0.1641129144126157,
    "avg_bits_err_improve": 0.0019371129419109845,
    "time": 20057.81396484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (exp (* 1.0 (log (/ (sin (* x PI)) (* x PI))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.659869554704408,
    "avg_bits_err_output": 0.6602775697691672,
    "avg_bits_err_improve": -0.0004080150647591818,
    "time": 21775.856689453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(- (* v (+ (+ 1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))) -1.0)) -1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.16408674862765432,
    "avg_bits_err_output": 0.17587086963903517,
    "avg_bits_err_improve": -0.01178412101138085,
    "time": 22116.578857421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (+ (* eta eta) (/ (* sinTheta_O (+ sinTheta_O sinTheta_O)) (* (sqrt (- 1.0 (* sinTheta_O sinTheta_O))) -2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 2.51106599356844,
    "avg_bits_err_output": 2.5118964950194793,
    "avg_bits_err_improve": -0.000830501451039467,
    "time": 29780.292236328125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_i (* (/ 0.5 v) (* (/ cosTheta_O (sinh (/ 1.0 v))) (/ 1.0 v))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.4632674196993997,
    "avg_bits_err_output": 0.44487593301789474,
    "avg_bits_err_improve": 0.018391486681504976,
    "time": 27732.7060546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.11598676697993002,
    "avg_bits_err_output": 0.08922527250886439,
    "avg_bits_err_improve": 0.026761494471065628,
    "time": 24650.24267578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow (* alpha alpha) PI))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4787302764106153,
    "avg_bits_err_output": 0.44365529552316174,
    "avg_bits_err_improve": 0.03507498088745353,
    "time": 25255.823974609375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(/ (* (log (pow (fma u -1.3333333333333333 1.3333333333333333) 6.0)) s) -2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3375915294041014,
    "avg_bits_err_output": 1.0232917164358515,
    "avg_bits_err_improve": 0.31429981296824994,
    "time": 24992.947265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (- (log1p (* u -4.0))) s)",
    "output_parens": 4,
    "avg_bits_err_input": 12.364197765594707,
    "avg_bits_err_output": 0.202875,
    "avg_bits_err_improve": 12.161322765594706,
    "time": 21120.0908203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (* (* (* 6.0 PI) s) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.1322888898725968,
    "avg_bits_err_output": 0.13245573357631404,
    "avg_bits_err_improve": -0.000166843703717251,
    "time": 25643.001708984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8834567869471265,
    "avg_bits_err_output": 0.7148888825382897,
    "avg_bits_err_improve": 0.16856790440883673,
    "time": 29519.596435546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(log1p (expm1 (/ 1.0 (fma (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6912347107001349,
    "avg_bits_err_output": 0.47813284730424,
    "avg_bits_err_improve": 0.21310186339589487,
    "time": 22524.26220703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (if (!= (log1p (- u1)) 0.0) (/ (pow (log1p (- u1)) 2.0) (log1p (- u1))) (log1p (- u1))))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 18,
    "avg_bits_err_input": 13.64238750509035,
    "avg_bits_err_output": 0.5470505123538427,
    "avg_bits_err_improve": 13.095336992736506,
    "time": 21131.430908203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (exp (* 1.0 (log (* 2.0 (* PI u2)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 13.697039825434446,
    "avg_bits_err_output": 0.31024361968983477,
    "avg_bits_err_improve": 13.386796205744611,
    "time": 20085.081787109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.002637804717528,
    "avg_bits_err_output": 0.3024174812503606,
    "avg_bits_err_improve": 13.700220323467168,
    "time": 15633.220947265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ (/ cos2phi alphax) (- alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.555530842915715,
    "avg_bits_err_output": 0.5175715791902353,
    "avg_bits_err_improve": 12.03795926372548,
    "time": 14980.3291015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (- (/ (+ (/ (tan (* PI l)) F) (- (/ (* (/ (tan (* PI l)) F) 0.5) 2.0) (- (- (/ (tan (* PI l)) F) (/ (* (/ (tan (* PI l)) F) 0.5) 2.0)) (/ (tan (* PI l)) F)))) (+ F F)) (/ (- (/ (tan (* PI l)) (+ F F))) (+ F F))))",
    "output_parens": 35,
    "avg_bits_err_input": 16.697940926346046,
    "avg_bits_err_output": 12.286574671651456,
    "avg_bits_err_improve": 4.41136625469459,
    "time": 21400.262939453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21540127684030846,
    "avg_bits_err_output": 0.14791524101186093,
    "avg_bits_err_improve": 0.06748603582844753,
    "time": 15622.527587890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 14.169776114473212,
    "avg_bits_err_output": 10.884327565696346,
    "avg_bits_err_improve": 3.2854485487768663,
    "time": 20893.423583984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (+ 1.0 (+ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f 4.0))) 0.0) (* (exp (* PI (/ f -4.0))) (expm1 (* PI (* (/ f 4.0) 2.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) -1.0)) (/ PI -4.0))",
    "output_parens": 33,
    "avg_bits_err_input": 61.24436236411623,
    "avg_bits_err_output": 2.003037767742937,
    "avg_bits_err_improve": 59.24132459637329,
    "time": 48127.411376953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* t (sqrt 2.0)) (sqrt (fma l (- l) (* (fma t (* t 2.0) (* l l)) (/ (+ x 1.0) (+ x -1.0))))))",
    "output_parens": 13,
    "avg_bits_err_input": 43.24177929978166,
    "avg_bits_err_output": 40.203458426531704,
    "avg_bits_err_improve": 3.0383208732499583,
    "time": 26874.3271484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.953121431623882,
    "avg_bits_err_output": 0.2139390984428183,
    "avg_bits_err_improve": 3.7391823331810636,
    "time": 30230.591064453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.1960248549434027,
    "avg_bits_err_output": 0.014625,
    "avg_bits_err_improve": 1.1813998549434026,
    "time": 11350.110595703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (log1p (expm1 (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (fma 2.0 (pow (/ t l) 2.0) 1.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.343448877249196,
    "avg_bits_err_output": 10.350066247701694,
    "avg_bits_err_improve": -0.00661737045249744,
    "time": 20277.859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -5e-310) (* (sqrt (* (* 2.0 n) (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- U))) (* (sqrt (* 2.0 (* n (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt U)))",
    "output_parens": 31,
    "avg_bits_err_input": 34.87608845753049,
    "avg_bits_err_output": 24.50317975752903,
    "avg_bits_err_improve": 10.372908700001464,
    "time": 41001.43994140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (* (tan k) (/ k l)) t) (* (* (pow t 3.0) (/ (sin k) l)) (/ k t))))",
    "output_parens": 12,
    "avg_bits_err_input": 47.433712742115276,
    "avg_bits_err_output": 30.755040279944488,
    "avg_bits_err_improve": 16.678672462170788,
    "time": 45320.13623046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(- (/ (/ 2.0 (* (pow t 3.0) (/ (sin k) l))) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (tan k) l))) 0.0)",
    "output_parens": 13,
    "avg_bits_err_input": 32.875653945299014,
    "avg_bits_err_output": 26.944104489351677,
    "avg_bits_err_improve": 5.931549455947337,
    "time": 31593.887939453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* a2 (* a2 (cos th))) (* a1 (* a1 (cos th)))) (sqrt 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5192069578349481,
    "avg_bits_err_output": 0.44973966408098065,
    "avg_bits_err_improve": 0.06946729375396743,
    "time": 24144.24365234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* 2.0 n) (* k -0.5)) (* (pow PI (* k -0.5)) (sqrt (* 2.0 (* PI n))))) (sqrt k))",
    "output_parens": 12,
    "avg_bits_err_input": 0.5133391902296772,
    "avg_bits_err_output": 0.4308447375050482,
    "avg_bits_err_improve": 0.08249445272462902,
    "time": 20065.756591796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (fma (+ (/ -1.0 (exp l)) (- (exp l) (exp (- l)))) J (* (exp (- l)) J)) (cos (/ K 2.0))) U)",
    "output_parens": 15,
    "avg_bits_err_input": 17.536522096306445,
    "avg_bits_err_output": 17.561659864645584,
    "avg_bits_err_improve": -0.025137768339138944,
    "time": 25826.3681640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (if (!= (* K (+ m n)) 0.0) (/ 1.0 (- (* (- 0.0 (* (* K (+ m n)) (/ (/ 1.0 (+ m n)) K))) (- (/ (/ 1.0 (+ m n)) K))) 0.0)) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 34,
    "avg_bits_err_input": 15.244949337409441,
    "avg_bits_err_output": 14.071105119985521,
    "avg_bits_err_improve": 1.1738442174239196,
    "time": 20042.60888671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.66936560156295,
    "avg_bits_err_output": 17.66936560156295,
    "avg_bits_err_improve": 0,
    "time": 35496.842529296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) -1e+149) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))) (if (<= (/ h l) -2e-274) (* w0 (sqrt (- 1.0 (* (* (/ h l) (/ (* D (/ M d)) 4.0)) (* D (/ M d)))))) (if (<= (/ h l) -1e-284) (* w0 (sqrt (- 1.0 (/ (* (* M D) (/ (* M (/ (* h D) l)) (+ d d))) (+ d d))))) (* w0 (sqrt (+ 1.0 (* (* (* M h) (/ D d)) (/ (* D (/ M (+ d d))) (* l -2.0)))))))))",
    "output_parens": 53,
    "avg_bits_err_input": 13.942765264523583,
    "avg_bits_err_output": 9.55333961386739,
    "avg_bits_err_improve": 4.389425650656193,
    "time": 23390.155517578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 0.0) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (/ A (* V l)) 5e+304) (* c0 (sqrt (* (/ A (* l (+ V V))) 2.0))) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V)))))))",
    "output_parens": 30,
    "avg_bits_err_input": 19.754043750378862,
    "avg_bits_err_output": 11.701652212267208,
    "avg_bits_err_improve": 8.052391538111655,
    "time": 22056.996337890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* d d) 2e-190) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* c0 (/ (/ d D) w)) (* D h))) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* c0 (/ (/ d D) w)) (* D h))) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M))))) (fma d (/ (* c0 (/ (/ d D) w)) (* D h)) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M)))))) (if (<= (* d d) 8e+236) (/ (/ (* c0 (if (!= (- (* d (* d (/ (/ (/ c0 D) h) (* D w)))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) h) (* D w)))) 2.0) (* M M)))) 0.0) (/ (- (* M M) 0.0) (- (* d (* d (/ (/ (/ c0 D) h) (* D w)))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) h) (* D w)))) 2.0) (* M M))))) (fma d (* d (/ (/ (/ c0 D) h) (* D w))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) h) (* D w)))) 2.0) (* M M)))))) w) 2.0) (if (<= (* d d) 5e+271) (/ (* (/ c0 w) (if (!= (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M))))) (fma c0 (/ (pow (/ d D) 2.0) (* w h)) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) 2.0) (/ (/ (* c0 (if (!= (- (* d (* c0 (/ (/ d (* D w)) (* D h)))) (sqrt (- (pow (* d (* c0 (/ (/ d (* D w)) (* D h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* c0 (/ (/ d (* D w)) (* D h)))) (sqrt (* (+ M (* d (/ (/ (* d c0) D) (* D (* w h))))) (- (* d (/ (/ (* d c0) D) (* D (* w h)))) M)))))) (fma d (* c0 (/ (/ d (* D w)) (* D h))) (sqrt (- (pow (* d (* c0 (/ (/ d (* D w)) (* D h)))) 2.0) (* M M)))))) w) 2.0))))",
    "output_parens": 238,
    "avg_bits_err_input": 59.414281227251884,
    "avg_bits_err_output": 28.62670748509377,
    "avg_bits_err_improve": 30.787573742158113,
    "time": 70480.6669921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= h -2.35e+174) (- (sqrt (* (/ d h) (/ d l))) (* (* 0.5 (/ M d)) (* (sqrt (* (/ d h) (/ d l))) (* D (* (* D (* h (/ M l))) (/ 0.25 d)))))) (if (<= h -3.8e-88) (* (* (sqrt (/ d l)) (sqrt (/ d h))) (- 1.0 (* (* 0.5 (pow (* D (/ M (* d 2.0))) 2.0)) (/ h l)))) (if (<= h -4e-173) (* (sqrt (* d (/ d (* h l)))) (- (* (/ -0.5 l) (* (/ (pow (* M D) 2.0) d) (/ h (* d 4.0)))) -1.0)) (if (<= h 2.5e-187) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (* (/ 0.25 d) (* (* D (* h (* D (/ M l)))) (/ (* M 0.5) d))))) (if (<= h 7.2e-120) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (/ (* (* (* M (/ D (+ d d))) (* D (+ M M))) (/ (* 0.5 h) l)) (* d 4.0)))) (if (<= h 3e+88) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* M (/ (* (* D (* M (/ 0.125 d))) (* D (/ h l))) d)))) (if (<= h 7.8e+197) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (* (/ 0.25 d) (* (* D (* h (* D (/ M l)))) (/ (* M 0.5) d))))) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- (/ (* (pow (* (/ D 2.0) (/ M d)) 2.0) (* h -0.5)) l) -1.0)))))))))",
    "output_parens": 140,
    "avg_bits_err_input": 26.216037983146116,
    "avg_bits_err_output": 28.54500490903583,
    "avg_bits_err_improve": -2.3289669258897128,
    "time": 70894.82983398438,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (if (!= (+ 0.25 (/ 0.25 (fma x x 1.0))) 0.0) (/ (- 0.0625 (/ 0.0625 (pow (fma x x 1.0) 2.0))) (+ 0.25 (/ 0.25 (fma x x 1.0)))) (+ 0.25 (/ -0.25 (fma x x 1.0)))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 46,
    "avg_bits_err_input": 15.391789417137355,
    "avg_bits_err_output": 14.885256612988892,
    "avg_bits_err_improve": 0.5065328041484634,
    "time": 27167.810302734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9828202803030276,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 0.9705702803030276,
    "time": 4209.469970703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (- (fma v (* v 5.0) -1.0)) (* PI (- (fma v v -1.0)))) (* t (sqrt (- 2.0 (* v (* v 6.0)))))) 0.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.4362961123149945,
    "avg_bits_err_output": 0.2666766285860657,
    "avg_bits_err_improve": 0.16961948372892877,
    "time": 27212.393798828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (if (!= (sqrt (- 2.0 (* v (* v 6.0)))) 0.0) (/ (- 1.0 (* v v)) (/ 1.0 (sqrt (- 2.0 (* 6.0 (* v v)))))) (* (sqrt (- 2.0 (* v (* v 6.0)))) (- 1.0 (* v v)))) 4.0)",
    "output_parens": 22,
    "avg_bits_err_input": 0.01322491020269024,
    "avg_bits_err_output": 0.009682428952329663,
    "avg_bits_err_improve": 0.003542481250360578,
    "time": 11542.634521484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5586795959272463,
    "avg_bits_err_output": 0.5586795959272463,
    "avg_bits_err_improve": 0,
    "time": 10268.825439453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (if (!= (* k 10.0) 0.0) (* (* (+ k 10.0) (/ k (* k 10.0))) (* k 10.0)) (* k (+ k 10.0))) -1.0))",
    "output_parens": 15,
    "avg_bits_err_input": 1.8344327472608766,
    "avg_bits_err_output": 1.919621469136418,
    "avg_bits_err_improve": -0.08518872187554138,
    "time": 21733.4521484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- mu (- (- Ec EDonor) Vef)) KbT)))) (/ NaChar (- (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02622911122411479,
    "avg_bits_err_output": 0.02622911122411479,
    "avg_bits_err_improve": 0,
    "time": 8002.830078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow a 4.0) (+ (pow b 4.0) (* (* b b) (+ (* a (+ a a)) 4.0)))) 1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 0.17661109062806482,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 0.16723609062806483,
    "time": 11692.8740234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (/ 1.0 (/ 1.0 (if (!= (* (fma a a (* b b)) (* a a)) 0.0) (+ (* a (* a (fma a a (* b b)))) (* b (* b (fma a a (* b b))))) (pow (fma a a (* b b)) 2.0)))) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 39,
    "avg_bits_err_input": 0.1904976065326843,
    "avg_bits_err_output": 0.17717751005103555,
    "avg_bits_err_improve": 0.013320096481648752,
    "time": 24049.04296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18888481622889675,
    "avg_bits_err_output": 0.18888481622889675,
    "avg_bits_err_improve": 0,
    "time": 23450.56494140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (* (/ 1.0 (sqrt (fma x x (* 4.0 (* p p))))) x))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.998031364856104,
    "avg_bits_err_output": 13.258371506078301,
    "avg_bits_err_improve": -0.26034014122219773,
    "time": 15814.546142578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (if (!= (+ 1.0 (+ (/ (expm1 (+ x x)) (expm1 x)) 1.0)) 0.0) (/ (- (* (+ (/ (expm1 (+ x x)) (expm1 x)) 1.0) (+ (/ (expm1 (+ x x)) (expm1 x)) 1.0)) 1.0) (+ 1.0 (+ (/ (expm1 (+ x x)) (expm1 x)) 1.0))) (/ (expm1 (+ x x)) (expm1 x))))",
    "output_parens": 32,
    "avg_bits_err_input": 40.94225197430117,
    "avg_bits_err_output": 0.04469812031259015,
    "avg_bits_err_improve": 40.89755385398858,
    "time": 7952.4912109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))",
    "output_parens": 8,
    "avg_bits_err_input": 31.00025058020758,
    "avg_bits_err_output": 30.94990562879783,
    "avg_bits_err_improve": 0.050344951409751815,
    "time": 25337.609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -3.1e-297) (/ (- (if (!= (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2) 0.0) (/ (* c a) (- b_2 (sqrt (fma b_2 b_2 (* c (- a)))))) (+ b_2 (sqrt (fma b_2 b_2 (* c (- a)))))) (+ b_2 b_2)) a) (if (<= b_2 4.7e+151) (/ (if (!= (- 0.0 (- b_2)) 0.0) (* a (/ c (- (- b_2) (sqrt (fma a (- c) (* b_2 b_2)))))) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a) (/ (if (!= b_2 0.0) (fma (/ a (* b_2 -2.0)) c (/ (* c a) (* b_2 -2.0))) (- b_2)) a)))",
    "output_parens": 54,
    "avg_bits_err_input": 34.10190090268774,
    "avg_bits_err_output": 14.036190710324789,
    "avg_bits_err_improve": 20.06571019236295,
    "time": 22152.437255859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- (sqrt (- (* b_2 b_2) (* a c)))) b_2)) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.40190670582469,
    "avg_bits_err_output": 22.13380315412924,
    "avg_bits_err_improve": 12.268103551695454,
    "time": 18864.044921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (- 1.0 (cos x)) x) (/ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 31.351370300103493,
    "avg_bits_err_output": 30.575988023000495,
    "avg_bits_err_improve": 0.7753822771029988,
    "time": 18034.189697265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 33.09710080445001,
    "avg_bits_err_output": 32.86507484896743,
    "avg_bits_err_improve": 0.23202595548257676,
    "time": 31026.41357421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (+ (+ (log1p N) 2.0) -2.0) (log N))",
    "output_parens": 5,
    "avg_bits_err_input": 29.461923562613176,
    "avg_bits_err_output": 29.469611088865953,
    "avg_bits_err_improve": -0.007687526252777133,
    "time": 13237.211669921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (+ (/ x (+ x 1.0)) -1.0) x)",
    "output_parens": 4,
    "avg_bits_err_input": 14.989250107322736,
    "avg_bits_err_output": 14.988295697775369,
    "avg_bits_err_improve": 0.0009544095473668079,
    "time": 15160.77734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (sin x) (- (sin eps)) (- (* (cos eps) (cos x)) (cos x)))",
    "output_parens": 9,
    "avg_bits_err_input": 39.667621311749734,
    "avg_bits_err_output": 6.501749439692495,
    "avg_bits_err_improve": 33.16587187205724,
    "time": 23548.688720703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(- (- (cbrt (- x -1.0)) (+ 1.0 (cbrt x))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.80329868934751,
    "avg_bits_err_output": 29.50163538960708,
    "avg_bits_err_improve": 0.3016632997404294,
    "time": 12901.806396484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log1p (- (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 30.524368888568375,
    "avg_bits_err_output": 30.529593087117284,
    "avg_bits_err_improve": -0.005224198548908987,
    "time": 24893.126220703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.99866586007448,
    "avg_bits_err_output": 21.65159404797623,
    "avg_bits_err_improve": 12.347071812098253,
    "time": 26314.35302734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.516884818183726,
    "avg_bits_err_output": 22.250147527444575,
    "avg_bits_err_improve": 12.266737290739151,
    "time": 27930.818115234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.15650823780998,
    "avg_bits_err_output": 0.022304323438491595,
    "avg_bits_err_improve": 61.13420391437149,
    "time": 18308.586669921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(+ (if (!= (- (* n (- (log n) (log1p n))) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) -1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 63.00680280572232,
    "avg_bits_err_output": 44.21172250059625,
    "avg_bits_err_improve": 18.79508030512607,
    "time": 18216.16748046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ eps (- -1.0 eps)) (if (!= (+ 1.0 (/ -1.0 (- -1.0 eps))) 0.0) (/ (+ -1.0 (/ 1.0 (- (* -1.0 (- -1.0 eps)) (* (- -1.0 eps) eps)))) (+ -1.0 (/ 1.0 (- -1.0 eps)))) (+ 1.0 (/ 1.0 (- -1.0 eps))))))",
    "output_parens": 23,
    "avg_bits_err_input": 58.77462370524597,
    "avg_bits_err_output": 50.64667069342326,
    "avg_bits_err_improve": 8.127953011822711,
    "time": 21392.210693359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(- (/ (if (!= (+ 1.0 (/ x (tan x))) 0.0) (/ (- 1.0 (pow (/ x (tan x)) 2.0)) (+ 1.0 (/ x (tan x)))) (- 1.0 (/ x (tan x)))) (+ x x)) (/ (log (+ 1.0 (expm1 (- 1.0 (/ 1.0 (/ x (tan x))))))) (/ x (* (/ x (tan x)) 0.5))))",
    "output_parens": 31,
    "avg_bits_err_input": 59.95306982695454,
    "avg_bits_err_output": 59.94801337418534,
    "avg_bits_err_improve": 0.00505645276920319,
    "time": 30908.945556640625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ (expm1 (* eps (+ a b))) (expm1 (* eps b))) (/ eps (expm1 (* eps a))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.128964569987595,
    "avg_bits_err_output": 29.54757109627706,
    "avg_bits_err_improve": 30.581393473710534,
    "time": 28622.763916015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.33835830818711,
    "avg_bits_err_output": 0.405,
    "avg_bits_err_improve": 40.93335830818711,
    "time": 6672.990966796875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.77604677655998,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 58.77529677655998,
    "time": 2843.00537109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.492312971654627,
    "avg_bits_err_output": 0.024869335871256167,
    "avg_bits_err_improve": 29.467443635783372,
    "time": 3221.903564453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(fma (exp x) (/ -2.0 (exp x)) (- (- (/ -1.0 (exp x)) (exp x))))",
    "output_parens": 9,
    "avg_bits_err_input": 30.160152882582313,
    "avg_bits_err_output": 30.011671703449505,
    "avg_bits_err_improve": 0.14848117913280845,
    "time": 21389.501953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (* (/ (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 2.0 x)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 9.983138448054993,
    "avg_bits_err_output": 9.984352305568827,
    "avg_bits_err_improve": -0.0012138575138340713,
    "time": 21334.28466796875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (if (!= (+ (tan (+ x eps)) 1.0) 0.0) (/ (* (tan (+ x eps)) (+ (tan (+ x eps)) 1.0)) (+ (tan (+ x eps)) 1.0)) (tan (+ x eps))) (tan x))",
    "output_parens": 19,
    "avg_bits_err_input": 37.213770144703545,
    "avg_bits_err_output": 37.23715312448992,
    "avg_bits_err_improve": -0.023382979786376268,
    "time": 20860.60498046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (pow (+ x 1.0) 0.5) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.254410173334666,
    "avg_bits_err_output": 0.16419116562662261,
    "avg_bits_err_improve": 30.090219007708043,
    "time": 12140.55908203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin eps) (cos x) (* (sin x) (cos eps))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 36.9918538104059,
    "avg_bits_err_output": 22.048377377376216,
    "avg_bits_err_improve": 14.943476433029684,
    "time": 19962.492919921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (!= (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (- x -1.0)))) 0.0) (+ (/ (/ 1.0 x) (+ (/ 1.0 (sqrt (+ x 1.0))) (+ (/ 1.0 (sqrt (+ x 1.0))) (/ 2.0 (sqrt x))))) (/ (+ (/ 1.0 x) (/ -2.0 (+ x 1.0))) (+ (/ 1.0 (sqrt (+ x 1.0))) (+ (/ 1.0 (sqrt (+ x 1.0))) (/ 2.0 (sqrt x)))))) (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (- x -1.0)))))",
    "output_parens": 42,
    "avg_bits_err_input": 19.508638628069466,
    "avg_bits_err_output": 19.596446222458248,
    "avg_bits_err_improve": -0.0878075943887815,
    "time": 19667.655029296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 14.915952475671583,
    "avg_bits_err_output": 14.915952475671583,
    "avg_bits_err_improve": 0,
    "time": 14675.650146484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.2586342510356,
    "avg_bits_err_output": 1.1996047253163828,
    "avg_bits_err_improve": 29.059029525719215,
    "time": 25034.744140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (* (- m (* m m)) (- 1.0 m)) v) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07949080507553279,
    "avg_bits_err_output": 0.07819396160325115,
    "avg_bits_err_improve": 0.0012968434722816363,
    "time": 12424.749755859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (/ a (/ -1.0 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.12199246437602,
    "avg_bits_err_output": 0.26945545156583534,
    "avg_bits_err_improve": 15.852537012810185,
    "time": 11791.33837890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (fma (cos (fma PI (* angle 0.005555555555555556) 1.0)) (cos -1.0) (* (sin 1.0) (expm1 (log1p (sin (fma PI (* angle 0.005555555555555556) 1.0))))))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 20,
    "avg_bits_err_input": 20.039304238767144,
    "avg_bits_err_output": 20.05607394576931,
    "avg_bits_err_improve": -0.01676970700216529,
    "time": 42352.760498046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(fma (sin (* angle (/ PI 180.0))) (* (* (- (pow a 2.0) (pow b 2.0)) -2.0) (cos (* angle (/ PI 180.0)))) 0.0)",
    "output_parens": 12,
    "avg_bits_err_input": 31.154669206096404,
    "avg_bits_err_output": 31.134474168898063,
    "avg_bits_err_improve": 0.02019503719834148,
    "time": 33395.708740234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (/ PI 180.0))) a) 2.0) (pow (* b (cos (/ (* angle PI) 180.0))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.483593051521456,
    "avg_bits_err_output": 20.452695793154536,
    "avg_bits_err_improve": 0.030897258366920255,
    "time": 41153.515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (/ m v) (- m (* m m))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17922236042698106,
    "avg_bits_err_output": 0.17760164813337925,
    "avg_bits_err_improve": 0.001620712293601806,
    "time": 18439.08837890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (* (tan x) (tan x))) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.30791094300227856,
    "avg_bits_err_output": 0.31057759268006224,
    "avg_bits_err_improve": -0.0026666496777836834,
    "time": 19537.228515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (sin v) (+ (* (cos v) e) 1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13743872187554088,
    "avg_bits_err_output": 0.1382924812503606,
    "avg_bits_err_improve": -0.0008537593748197125,
    "time": 16279.877685546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.21888736549553,
    "avg_bits_err_output": 17.216134354192377,
    "avg_bits_err_improve": 0.0027530113031524195,
    "time": 38002.055908203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.45237299224613,
    "avg_bits_err_output": 0.16913233125324517,
    "avg_bits_err_improve": 52.28324066099289,
    "time": 25678.789306640625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c 4.0) (- (- b) (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.379383801467668,
    "avg_bits_err_output": 0.33014475352123585,
    "avg_bits_err_improve": 28.049239047946433,
    "time": 26392.22998046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.97590902782919,
    "avg_bits_err_output": 0.24645338438203102,
    "avg_bits_err_improve": 43.72945564344716,
    "time": 27027.98828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.99914084391831,
    "avg_bits_err_output": 21.65159404797623,
    "avg_bits_err_improve": 12.347546795942083,
    "time": 19787.295654296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (log1p (expm1 (cos (- lambda1 lambda2)))) (cos phi1))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.8633101713535926,
    "avg_bits_err_output": 0.8823769134778255,
    "avg_bits_err_improve": -0.019066742124232983,
    "time": 28097.12353515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (- (+ (/ 4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)) (+ 1.0 (/ 4.0 (+ 1.0 (exp (* -2.0 x)))))) (+ 2.0 (/ 4.0 (+ 1.0 (exp (* -2.0 x)))))) (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) (+ -1.0 (/ -2.0 (- -1.0 (exp (* -2.0 x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 29.561451474339556,
    "avg_bits_err_output": 29.58218941096261,
    "avg_bits_err_improve": -0.020737936623053344,
    "time": 12408.740966796875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= x -2e-310) (log (+ 1.0 (expm1 (/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))))) (if (!= (/ (pow (exp x) 2.0) (pow (+ (exp x) (exp (- x))) 2.0)) 0.0) (exp (* 1.0 (log (- (/ (expm1 (* x 4.0)) (pow (+ (pow (exp x) 2.0) 1.0) 2.0)) 0.0)))) (/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 58.20251103404985,
    "avg_bits_err_output": 33.101642925378336,
    "avg_bits_err_improve": 25.100868108671513,
    "time": 21301.793701171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (- (exp (- x)))) 2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 58.131545867547196,
    "avg_bits_err_output": 0.04407312031259014,
    "avg_bits_err_improve": 58.08747274723461,
    "time": 8642.98388671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.009271240625180288,
    "avg_bits_err_output": 0.009271240625180288,
    "avg_bits_err_improve": 0,
    "time": 2989.1015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log1p (+ (+ x (sqrt (fma x x -1.0))) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 31.51375,
    "avg_bits_err_output": 31.51369812031259,
    "avg_bits_err_improve": 5.187968741182658e-05,
    "time": 6314.63525390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(/ (log (if (!= (/ x (- 1.0 x)) 0.0) (/ (- (* (/ x (- 1.0 x)) (/ x (- 1.0 x))) (/ x (* (+ -1.0 x) (- 1.0 x)))) (/ x (- 1.0 x))) (/ (- -1.0 x) (+ -1.0 x)))) 2.0)",
    "output_parens": 22,
    "avg_bits_err_input": 58.766096294650104,
    "avg_bits_err_output": 58.78524509592732,
    "avg_bits_err_improve": -0.019148801277218297,
    "time": 17574.987548828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ (- (sqrt (- 1.0 (* x x))) -0.5) x) (/ 1.0 (+ x x))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.01075,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": -0.00037500000000000033,
    "time": 4811.423583984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (* (cos (atan (/ eh (* ew (tan t))))) (sin t))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.129375,
    "avg_bits_err_output": 0.1298962406251803,
    "avg_bits_err_improve": -0.0005212406251803026,
    "time": 27577.3974609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (if (!= (cos (atan (* eh (/ (tan (- t)) ew)))) 0.0) (/ 1.0 (/ 1.0 (cos (atan (* eh (/ (tan (- t)) ew)))))) (cos (atan (* eh (/ (tan (- t)) ew)))))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.12587595881547559,
    "avg_bits_err_output": 0.12772031779892273,
    "avg_bits_err_improve": -0.0018443589834471474,
    "time": 29068.438232421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (cos (/ phi2 2.0)) (cos (/ phi1 2.0)) (* (sin (/ phi1 2.0)) (sin (/ phi2 -2.0))))) (- phi1 phi2)))",
    "output_parens": 15,
    "avg_bits_err_input": 39.35066410203863,
    "avg_bits_err_output": 0.12075763561575073,
    "avg_bits_err_improve": 39.229906466422875,
    "time": 32807.9892578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.618058391079979,
    "avg_bits_err_output": 0.00975,
    "avg_bits_err_improve": 14.608308391079978,
    "time": 7485.918701171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (log1p (expm1 (+ (- (cos delta) (* (sin phi1) (sin (asin (fma (sin delta) (* (cos phi1) (cos theta)) (* (cos delta) (sin phi1))))))) (fma (- (sin (asin (fma (sin delta) (* (cos phi1) (cos theta)) (* (cos delta) (sin phi1)))))) (sin phi1) (* (sin phi1) (sin (asin (fma (sin delta) (* (cos phi1) (cos theta)) (* (cos delta) (sin phi1))))))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 0.15662077084698975,
    "avg_bits_err_output": 0.15643086487094285,
    "avg_bits_err_improve": 0.00018990597604690018,
    "time": 46711.41162109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.47411886526256,
    "avg_bits_err_output": 0.16808045156583534,
    "avg_bits_err_improve": 52.306038413696726,
    "time": 29607.552490234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.58994764020808,
    "avg_bits_err_output": 0.34123684376262037,
    "avg_bits_err_improve": 28.24871079644546,
    "time": 31085.96240234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* c (* a -3.0))))) 0.0) (* (* a -3.0) (/ c (- (- (- b) (sqrt (fma b b (* c (* a -3.0)))))))) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 44.01911326624868,
    "avg_bits_err_output": 0.24060902344426055,
    "avg_bits_err_improve": 43.77850424280442,
    "time": 32890.779541015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma b b (* a (* c -3.0)))))) (* a 3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.031625337564016,
    "avg_bits_err_output": 21.721840694537786,
    "avg_bits_err_improve": 12.30978464302623,
    "time": 26347.8583984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.194486882436959,
    "avg_bits_err_output": 13.194486882436959,
    "avg_bits_err_improve": 0,
    "time": 35015.0693359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(+ (if (!= (/ x (+ -2.0 (+ x x))) 0.0) (/ (- (* (/ x (+ -2.0 (+ x x))) (- (/ x (+ x 1.0)) (/ x (+ -2.0 (+ x x))))) (pow (/ x (+ -2.0 (+ x x))) 2.0)) (/ x (+ -2.0 (+ x x)))) (- (/ x (+ x 1.0)) (/ (+ x x) (+ -2.0 (+ x x))))) (- (/ 1.0 (+ x -1.0))))",
    "output_parens": 35,
    "avg_bits_err_input": 29.358130577874952,
    "avg_bits_err_output": 25.65067218917456,
    "avg_bits_err_improve": 3.707458388700392,
    "time": 23844.029052734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.05037399119763805,
    "avg_bits_err_improve": -0.038498991197638055,
    "time": 5703.98974609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (if (!= (/ x (+ x -1.0)) 0.0) (/ (- x (* x (/ x (+ x -1.0)))) x) (- 1.0 (/ x (+ x -1.0)))) (- (/ 1.0 (+ x -1.0)))) (+ 1.0 x))",
    "output_parens": 18,
    "avg_bits_err_input": 14.85230374844709,
    "avg_bits_err_output": 12.63163993164427,
    "avg_bits_err_improve": 2.220663816802821,
    "time": 16840.612548828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1e-310) (/ (* (sqrt (* 2.0 (- (pow B 2.0) (* A (* C 4.0))))) (sqrt (* F (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C)) 0.0) (/ (- (- (pow (+ A C) 2.0) (pow (- A C) 2.0)) (pow B 2.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* A (* 4.0 C)) (pow B 2.0))) (/ (* (sqrt F) (sqrt (* (* 2.0 (- (pow B 2.0) (* A (* C 4.0)))) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* 4.0 C)) (pow B 2.0))))",
    "output_parens": 68,
    "avg_bits_err_input": 52.566082583251784,
    "avg_bits_err_output": 47.76444839331998,
    "avg_bits_err_improve": 4.801634189931804,
    "time": 39126.050048828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -1.4e+17) (* 180.0 (/ (atan (/ (if (!= (+ (- C A) (sqrt (+ (pow (- C A) 2.0) (pow B 2.0)))) 0.0) (/ (- (pow B 2.0)) (+ (- C A) (sqrt (+ (pow (- C A) 2.0) (pow B 2.0))))) (- C (+ A (sqrt (+ (pow (- C A) 2.0) (pow B 2.0)))))) B)) PI)) (* 180.0 (/ (atan (/ (- (- C A) (sqrt (+ (* (- C A) (- C A)) (pow B 2.0)))) B)) PI)))",
    "output_parens": 44,
    "avg_bits_err_input": 29.75221806948308,
    "avg_bits_err_output": 27.168010368198782,
    "avg_bits_err_improve": 2.584207701284299,
    "time": 25511.998779296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2e-310) (/ (* (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 F))))) (- (* A (* C 4.0)) (pow B 2.0))) (* (sqrt (* 2.0 F)) (* (/ (sqrt (- (pow B 2.0) (* A (* 4.0 C)))) (- (* A (* 4.0 C)) (pow B 2.0))) (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.30050522129833,
    "avg_bits_err_output": 46.83036202272081,
    "avg_bits_err_improve": 5.470143198577517,
    "time": 47470.748291015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.34486327965288,
    "avg_bits_err_output": 15.34486327965288,
    "avg_bits_err_improve": 0,
    "time": 23603.65625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -4e-300) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) (- g)) 0.0) (* h (/ h (- (- g) (sqrt (* (+ (- h) g) (- g (- h))))))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 71,
    "avg_bits_err_input": 35.23042539824691,
    "avg_bits_err_output": 3.339279863664656,
    "avg_bits_err_improve": 31.89114553458225,
    "time": 39190.68798828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (- (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))) (* (sin (* PI 0.6666666666666666)) (sin (/ (acos (/ g (- h))) 3.0)))) (* (expm1 (log1p (sin (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) -3.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.9899345875079336,
    "avg_bits_err_output": 0.0328328953169171,
    "avg_bits_err_improve": 0.9571016921910165,
    "time": 21702.006103515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7018656015629509,
    "avg_bits_err_output": 0.7018656015629509,
    "avg_bits_err_improve": 0,
    "time": 4609.81201171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+306) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-308) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 4e+296) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.147461439121788,
    "avg_bits_err_output": 1.9036427794396122,
    "avg_bits_err_improve": 9.243818659682175,
    "time": 11764.34814453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(+ (* x y) (- (log1p (exp x)) (* x (+ y y))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.44698812628009865,
    "avg_bits_err_output": 0.4099364816370412,
    "avg_bits_err_improve": 0.037051644643057435,
    "time": 8094.140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.05) (log (if (!= (- x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 2.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 43,
    "avg_bits_err_input": 53.36214296657906,
    "avg_bits_err_output": 0.1765837326989627,
    "avg_bits_err_improve": 53.18555923388009,
    "time": 14301.559814453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.716441266604496,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.716441266604496,
    "time": 2018.7763671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- (- (/ 1.0 (+ 1.0 x)) (/ x (+ x (+ x 2.0)))) (/ x (+ x (+ x 2.0)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.010875,
    "avg_bits_err_output": 0.015573120312590146,
    "avg_bits_err_improve": -0.0046981203125901465,
    "time": 5726.67724609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1415.10009765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= w -2e+28) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* w (* (* r r) (* (/ w (- 1.0 v)) (- 0.375 (* v 0.25))))) 4.5)) (if (<= w 1.2e-44) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (/ (* (* w (* w r)) r) (- 1.0 v))) 4.5)) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* w (* (* r r) (* (/ w (- 1.0 v)) (- 0.375 (* v 0.25))))) 4.5))))",
    "output_parens": 43,
    "avg_bits_err_input": 13.010359042811723,
    "avg_bits_err_output": 0.5517531162106254,
    "avg_bits_err_improve": 12.458605926601098,
    "time": 27036.196044921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma x1 (* x1 (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)) (fma (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (* (* 2.0 (/ x1 (fma x1 x1 1.0))) (+ -3.0 (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)))) (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* 2.0 (/ x1 (fma x1 x1 1.0))) (* x1 (* (/ (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (fma x1 x1 1.0)) (/ 2.0 (fma x1 x1 1.0))))))))))))))",
    "output_parens": 73,
    "avg_bits_err_input": 0.5076809803471464,
    "avg_bits_err_output": 0.2490754818565979,
    "avg_bits_err_improve": 0.2586054984905485,
    "time": 74742.53100585938,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (- (- u) t1)) v) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.241386591681053,
    "avg_bits_err_output": 1.3519960487637437,
    "avg_bits_err_improve": 16.889390542917308,
    "time": 9541.109130859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2251156015629507,
    "avg_bits_err_output": 0.18457556406367184,
    "avg_bits_err_improve": 0.04054003749927887,
    "time": 8436.55712890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003948120312590144,
    "avg_bits_err_output": 0.003948120312590144,
    "avg_bits_err_improve": 0,
    "time": 4397.681640625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (- (/ PI (* (- b a) (* a 2.0))) (/ (/ PI 2.0) (* b (- b a)))) (+ b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.104115558514566,
    "avg_bits_err_output": 0.24141541406655634,
    "avg_bits_err_improve": 13.86270014444801,
    "time": 18559.336669921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (+ 1.0 (exp (- (* eps x) x))) 0.0) (/ (* (+ 1.0 (exp (- (* eps x) x))) (+ 1.0 (+ (exp (- (* eps x) x)) (+ (/ (- 1.0 (/ 1.0 eps)) (exp (fma x eps x))) (+ (/ (/ 1.0 eps) (exp (- x (* eps x)))) -1.0))))) (+ 1.0 (exp (- (* eps x) x)))) (+ (/ (- 1.0 (/ 1.0 eps)) (exp (fma x eps x))) (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* eps x)))))) 2.0)",
    "output_parens": 46,
    "avg_bits_err_input": 29.48144291384505,
    "avg_bits_err_output": 0.917507819485414,
    "avg_bits_err_improve": 28.563935094359636,
    "time": 22469.24462890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.01225,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 0,
    "time": 4052.3896484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- (- 4.0 (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t))) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0)))) (+ 2.0 (- (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t)))))",
    "output_parens": 31,
    "avg_bits_err_input": 0.0155,
    "avg_bits_err_output": 0.0641911656266226,
    "avg_bits_err_improve": -0.048691165626622596,
    "time": 15963.723388671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (+ 2.0 (/ (* t (/ (* t 4.0) (+ t 1.0))) (+ t 1.0))) 1.0) (+ 2.0 (/ (* t (/ (* t 4.0) (+ t 1.0))) (+ t 1.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.07075,
    "avg_bits_err_output": 0.09875,
    "avg_bits_err_improve": -0.02800000000000001,
    "time": 13834.79248046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3232.0771484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 9125.066162109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2558.9384765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.814598372922784,
    "avg_bits_err_output": 0.25275,
    "avg_bits_err_improve": 7.5618483729227846,
    "time": 38393.99853515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.403162216803511,
    "avg_bits_err_output": 7.403162216803511,
    "avg_bits_err_improve": 0,
    "time": 17981.281494140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.029201965016785,
    "avg_bits_err_output": 0.019790241011860922,
    "avg_bits_err_improve": 16.009411724004924,
    "time": 12229.09716796875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (* (if (!= (exp (* x (* x 10.0))) 0.0) (/ 1.0 (/ 1.0 (pow (exp (* x x)) 10.0))) (pow (exp (* x x)) 10.0)) (+ (cos x) 1.0)) (pow (exp (* x x)) 10.0))",
    "output_parens": 20,
    "avg_bits_err_input": 3.552710306718202,
    "avg_bits_err_output": 3.052839842758299,
    "avg_bits_err_improve": 0.4998704639599034,
    "time": 21010.003662109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -100000000000.0) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (* (/ (+ x x) (+ x (/ 1.0 x))) (/ 1.0 (+ x x))) 0.0) (/ x (fma x x 1.0))) (if (<= x 5e-37) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (* (/ (+ x x) (+ x (/ 1.0 x))) (/ 1.0 (+ x x))) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 14.791668553750958,
    "avg_bits_err_output": 0.027948120312590145,
    "avg_bits_err_improve": 14.763720433438367,
    "time": 9425.971435546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.593630075264166,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.593630075264166,
    "time": 6053.339111328125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.00222041175863,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 39.00134541175863,
    "time": 4830.558837890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.290875,
    "avg_bits_err_improve": 63.709125,
    "time": 23100.26708984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.8432554647147,
    "avg_bits_err_output": 0.4082409781302287,
    "avg_bits_err_improve": 61.43501448658447,
    "time": 14708.80078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.516884818183726,
    "avg_bits_err_output": 22.250147527444575,
    "avg_bits_err_improve": 12.266737290739151,
    "time": 30025.7353515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.99914084391831,
    "avg_bits_err_output": 21.65159404797623,
    "avg_bits_err_improve": 12.347546795942083,
    "time": 23206.979736328125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1991.881103515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.88220275472192,
    "avg_bits_err_output": 0.018375,
    "avg_bits_err_improve": 39.86382775472192,
    "time": 7098.560546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.660100310055522,
    "avg_bits_err_output": 20.660100310055522,
    "avg_bits_err_improve": 0,
    "time": 4322.21728515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.675222906064817,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.675222906064817,
    "time": 6429.27880859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.039625,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.03875,
    "time": 6792.50244140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(fma (+ a b) b (* a (+ a b)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.022073120312590146,
    "avg_bits_err_output": 0.010875,
    "avg_bits_err_improve": 0.011198120312590147,
    "time": 4279.610595703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.01275,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0.012499999999999999,
    "time": 2955.71923828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0,
    "time": 1918.35498046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ d (+ c a)) (+ e b))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40046033906799905,
    "avg_bits_err_output": 0.244375,
    "avg_bits_err_improve": 0.15608533906799904,
    "time": 7213.8935546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (+ 1.0 (pow (cos x) 2.0)) 0.0) (/ (- 1.0 (/ (* (+ 1.0 (cos (* x 2.0))) (pow (cos x) 2.0)) 2.0)) (+ 1.0 (pow (cos x) 2.0))) (- 1.0 (pow (cos x) 2.0))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 29,
    "avg_bits_err_input": 29.882990703357898,
    "avg_bits_err_output": 29.87687390648811,
    "avg_bits_err_improve": 0.0061167968697866115,
    "time": 13354.67626953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (/ (+ (- eps) (- (* x (+ x x)) eps)) 2.0)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 19,
    "avg_bits_err_input": 24.225150136310525,
    "avg_bits_err_output": 0.29809436093777036,
    "avg_bits_err_improve": 23.927055775372754,
    "time": 12652.557373046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (pow (sin x) 2.0) 0.0) (/ (if (!= (pow (sin x) 4.0) 0.0) (/ (fma (* x x) (pow (sin x) 6.0) (- (pow (sin x) 8.0))) (pow (sin x) 4.0)) (- (* x (* x (pow (sin x) 2.0))) (pow (sin x) 4.0))) (pow (sin x) 2.0)) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 43,
    "avg_bits_err_input": 30.003921320546326,
    "avg_bits_err_output": 29.890859540714516,
    "avg_bits_err_improve": 0.11306177983180987,
    "time": 36667.461669921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007573120312590144,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.006448120312590144,
    "time": 2687.882568359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* 100.0 (- (/ (pow (+ (/ i n) 1.0) n) (/ i n)) (/ 1.0 (/ i n)))))",
    "output_parens": 24,
    "avg_bits_err_input": 47.94633672975809,
    "avg_bits_err_output": 13.510333577926145,
    "avg_bits_err_improve": 34.43600315183194,
    "time": 24816.57568359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma d d (* c c)))) (* a (/ c (fma d d (* c c)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.152970838189805,
    "avg_bits_err_output": 22.75329032898852,
    "avg_bits_err_improve": 3.3996805092012856,
    "time": 15487.246826171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.438523611620948,
    "avg_bits_err_output": 23.164720900542935,
    "avg_bits_err_improve": 3.2738027110780124,
    "time": 15559.852294921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.033125,
    "avg_bits_err_output": 0.020360521314888556,
    "avg_bits_err_improve": 0.012764478685111446,
    "time": 17352.14501953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- ux (- (fma (- 1.0 ux) (* ux maxCos) (* ux (* maxCos (fma ux maxCos (- 1.0 ux))))) (- ux (* ux ux))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.686185619014726,
    "avg_bits_err_output": 0.5486427702119436,
    "avg_bits_err_improve": 13.137542848802783,
    "time": 28673.752685546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (+ (+ (- ux (* ux ux)) (* ux (* maxCos (+ ux -1.0)))) ux) (- (* (* ux maxCos) (fma ux maxCos (- 1.0 ux)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.724063613141345,
    "avg_bits_err_output": 0.3330899097792393,
    "avg_bits_err_improve": 13.390973703362105,
    "time": 26772.6669921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (- (exp (log1p (* (pow (- maxCos (* maxCos ux)) 2.0) (* ux ux)))) 1.0))) xi) (fma (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (- maxCos (* ux maxCos)) zi))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.3372387253491264,
    "avg_bits_err_output": 0.32764619442537884,
    "avg_bits_err_improve": 0.009592530923747566,
    "time": 51874.890869140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax)))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.20894844765789308,
    "avg_bits_err_output": 0.20894844765789308,
    "avg_bits_err_improve": 0,
    "time": 39347.320068359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (log1p (expm1 (sin (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5538096882505927,
    "avg_bits_err_output": 0.5578581281573773,
    "avg_bits_err_improve": -0.004048439906784607,
    "time": 21691.404541015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(- (sqrt (/ u1 (- 1.0 u1))) (if (!= (sqrt (/ u1 (- 1.0 u1))) 0.0) (/ (* (/ u1 (- 1.0 u1)) (+ (cos (* 6.28318530718 u2)) -1.0)) (- (sqrt (/ u1 (- 1.0 u1))))) (- (* (sqrt (/ u1 (- 1.0 u1))) (+ (cos (* 6.28318530718 u2)) -1.0)))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.3207886334593113,
    "avg_bits_err_output": 0.35270054171960175,
    "avg_bits_err_improve": -0.031911908260290445,
    "time": 21247.049072265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ -1.0 (/ 1.0 (+ (/ 1.0 (+ 1.0 (expm1 (log1p (exp (/ PI s)))))) (- (/ u (+ 2.0 (expm1 (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.3318218683702057,
    "avg_bits_err_output": 0.33340154711028264,
    "avg_bits_err_improve": -0.0015796787400769174,
    "time": 24755.63623046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.05961664007037485,
    "avg_bits_err_output": 0.05961664007037485,
    "avg_bits_err_improve": 0,
    "time": 14084.451416015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (* (pow (+ (exp (/ (fabs x) (- s))) 1.0) -2.0) (exp (/ (fabs x) (- s)))) s)",
    "output_parens": 12,
    "avg_bits_err_input": 0.12713487757054245,
    "avg_bits_err_output": 0.1120121482669286,
    "avg_bits_err_improve": 0.015122729303613858,
    "time": 19011.060791015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6635499846456265,
    "avg_bits_err_output": 0.6635499846456265,
    "avg_bits_err_improve": 0,
    "time": 22573.020751953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.161460654199401,
    "avg_bits_err_output": 0.15414467802558782,
    "avg_bits_err_improve": 0.007315976173813188,
    "time": 19330.577392578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.5778873774689015,
    "avg_bits_err_output": 2.5778873774689015,
    "avg_bits_err_improve": 0,
    "time": 33817.572509765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ 0.5 v) (* (/ (/ (+ cosTheta_i cosTheta_i) (exp (* sinTheta_O (/ sinTheta_i v)))) (sinh (/ 1.0 v))) (/ 0.5 v))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.45413552700512566,
    "avg_bits_err_output": 0.35563713940067065,
    "avg_bits_err_improve": 0.098498387604455,
    "time": 30281.075439453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.11152254660054957,
    "avg_bits_err_output": 0.08746631595093277,
    "avg_bits_err_improve": 0.024056230649616803,
    "time": 22368.697021484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (+ (* alpha (+ alpha alpha)) -2.0) 2.0) (log (pow (* alpha alpha) PI))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4718355008318359,
    "avg_bits_err_output": 0.427464018567578,
    "avg_bits_err_improve": 0.04437148226425791,
    "time": 26363.31103515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) s)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3317612159065804,
    "avg_bits_err_output": 1.2046944122044314,
    "avg_bits_err_improve": 0.12706680370214896,
    "time": 28187.364013671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (- (log1p (* u -4.0))) s)",
    "output_parens": 4,
    "avg_bits_err_input": 12.37033347220054,
    "avg_bits_err_output": 0.201875,
    "avg_bits_err_improve": 12.168458472200541,
    "time": 19367.75244140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (* 2.0 PI)))) (* 0.75 (/ (* (exp (/ r (* s -6.0))) (exp (- (/ (/ r s) 6.0)))) (* s (* PI 6.0))))) r)",
    "output_parens": 21,
    "avg_bits_err_input": 0.1504416214531113,
    "avg_bits_err_output": 0.14562744023893479,
    "avg_bits_err_improve": 0.004814181214176511,
    "time": 31741.857421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.9471200880812249,
    "avg_bits_err_output": 0.768693929267526,
    "avg_bits_err_improve": 0.17842615881369894,
    "time": 27337.702880859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (sqrt (log1p (expm1 (- 1.0 (+ cosTheta cosTheta))))) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.7033159359408594,
    "avg_bits_err_output": 0.483071832765545,
    "avg_bits_err_improve": 0.2202441031753144,
    "time": 23512.79345703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (log1p (expm1 (sin (* 2.0 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.689376373062071,
    "avg_bits_err_output": 0.5292192166576799,
    "avg_bits_err_improve": 13.160157156404392,
    "time": 20166.578369140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (sqrt (- (log1p (- u1)))) (- (sqrt (- (log1p (- u1)))) (* (sqrt (- (log1p (- u1)))) (cos (* u2 (* PI -2.0))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.735547786346128,
    "avg_bits_err_output": 0.30123430580710114,
    "avg_bits_err_improve": 13.434313480539027,
    "time": 19131.100830078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 13.959537248136943,
    "avg_bits_err_output": 0.305261842188131,
    "avg_bits_err_improve": 13.654275405948813,
    "time": 16271.52392578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (if (!= (/ cos2phi (* alphax alphax)) 0.0) (/ 1.0 (/ 1.0 (/ cos2phi (* alphax alphax)))) (/ cos2phi (* alphax alphax))) (/ (/ sin2phi alphay) alphay)))",
    "output_parens": 17,
    "avg_bits_err_input": 12.729088581998798,
    "avg_bits_err_output": 0.534450189141782,
    "avg_bits_err_improve": 12.194638392857016,
    "time": 15529.899169921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -2e+16) (- (* PI l) (/ 0.0 F)) (if (<= (* PI l) 1e-29) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (- (* PI l) (/ 0.0 F))))",
    "output_parens": 18,
    "avg_bits_err_input": 16.981408703704858,
    "avg_bits_err_output": 1.1392985575073684,
    "avg_bits_err_improve": 15.84211014619749,
    "time": 22588.26220703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ x (tan B)) (- (/ -1.0 (sin B)) (* (/ x (tan B)) -2.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.2161770831999919,
    "avg_bits_err_output": 0.17168648163704123,
    "avg_bits_err_improve": 0.04449060156295068,
    "time": 18261.91650390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.600603606515639,
    "avg_bits_err_output": 10.331957269435707,
    "avg_bits_err_improve": 3.2686463370799324,
    "time": 25988.52294921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (exp (* 1.0 (log (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) 0.0) (/ (if (!= (exp (* PI (/ (+ f f) -4.0))) 0.0) (/ (- (exp (* PI (+ (/ (+ f f) -4.0) (* (/ f 4.0) 2.0)))) (pow (exp (* PI (/ (+ f f) -4.0))) 2.0)) (exp (* PI (/ (+ f f) -4.0)))) (- (exp (* PI (* (/ f 4.0) 2.0))) (exp (* PI (/ (+ f f) -4.0))))) (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))))))))) (/ PI -4.0))",
    "output_parens": 71,
    "avg_bits_err_input": 61.35017041931623,
    "avg_bits_err_output": 61.364043827339955,
    "avg_bits_err_improve": -0.013873408023727052,
    "time": 47698.065673828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (+ x 1.0) (+ -1.0 x)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.45845029640257,
    "avg_bits_err_output": 34.4390437025236,
    "avg_bits_err_improve": 9.01940659387897,
    "time": 24974.3837890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (expm1 (log1p (/ (sin ky) (hypot (sin ky) (sin kx))))) (sin th))",
    "output_parens": 9,
    "avg_bits_err_input": 4.052084893928113,
    "avg_bits_err_output": 0.23802915195828478,
    "avg_bits_err_improve": 3.814055741969828,
    "time": 31208.227783203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.0803795705210955,
    "avg_bits_err_output": 0.015125,
    "avg_bits_err_improve": 1.0652545705210954,
    "time": 11413.920654296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (* (/ t l) (/ t l)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.079392923555607,
    "avg_bits_err_output": 10.079392923555607,
    "avg_bits_err_improve": 0,
    "time": 28675.1630859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -4.1e+80) (* (sqrt (- (* (* n U) (- t (* l (* (/ l Om) 2.0)))) (* (* n U) (* n (* (pow (/ l Om) 2.0) (- U U*)))))) (sqrt 2.0)) (if (<= n -1e-309) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (* (sqrt (* 2.0 (* U (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt n))))",
    "output_parens": 50,
    "avg_bits_err_input": 34.06067149106098,
    "avg_bits_err_output": 25.55871922413213,
    "avg_bits_err_improve": 8.50195226692885,
    "time": 33566.710205078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1.95e-108) (/ 2.0 (* (/ k t) (/ (* (/ k t) (* (pow t 3.0) (/ (* (sin k) (tan k)) l))) l))) (if (<= t 2.8e-92) (/ 2.0 (* (/ (* (sin k) (tan k)) (* l l)) (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))))) (/ 2.0 (* (/ k t) (/ (* (/ k t) (* (pow t 3.0) (/ (* (sin k) (tan k)) l))) l)))))",
    "output_parens": 41,
    "avg_bits_err_input": 47.43296114968898,
    "avg_bits_err_output": 29.78389287393712,
    "avg_bits_err_improve": 17.64906827575186,
    "time": 45479.7958984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= (/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0))) 5e+212) (/ 2.0 (* (/ (* (sin k) (/ (pow t 3.0) l)) l) (* (tan k) (+ (pow (/ k t) 2.0) 2.0)))) 0.0)",
    "output_parens": 27,
    "avg_bits_err_input": 32.220085978087475,
    "avg_bits_err_output": 23.870219898454845,
    "avg_bits_err_improve": 8.34986607963263,
    "time": 22522.979248046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (/ (cos th) 2.0) (* (sqrt 2.0) (fma a1 a1 (* a2 a2))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5379875968971776,
    "avg_bits_err_output": 0.502149814078096,
    "avg_bits_err_improve": 0.035837782819081565,
    "time": 25529.072509765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* 2.0 (* PI n)) (* k -0.5)) (sqrt (* 2.0 (* PI n)))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5094101744730215,
    "avg_bits_err_output": 0.4222151849179941,
    "avg_bits_err_improve": 0.08719498955502741,
    "time": 21019.853759765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (if (!= (exp (* l -2.0)) 0.0) (/ (if (!= 1.0 0.0) (- (expm1 (* l -4.0))) (- (expm1 (* l -4.0)))) (exp (* l -2.0))) (- (+ (exp (+ l l)) 0.0) (exp (* l -2.0)))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 41,
    "avg_bits_err_input": 17.457157721169843,
    "avg_bits_err_output": 0.19470076757625385,
    "avg_bits_err_improve": 17.26245695359359,
    "time": 32846.39453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (if (!= (* (sin (fma M -1.0 (fma (+ m n) (/ K 2.0) 1.0))) (sin -1.0)) 0.0) (/ (* (* (sin (fma M -1.0 (fma (+ m n) (/ K 2.0) 1.0))) (sin -1.0)) (cos (+ -1.0 (fma M -1.0 (fma (+ m n) (/ K 2.0) 1.0))))) (* (cos (- (/ PI 2.0) (fma M -1.0 (fma (+ m n) (/ K 2.0) 1.0)))) (sin -1.0))) (cos (+ -1.0 (fma M -1.0 (fma (+ m n) (/ K 2.0) 1.0))))) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 50,
    "avg_bits_err_input": 15.580029875800928,
    "avg_bits_err_output": 15.574140857137737,
    "avg_bits_err_improve": 0.005889018663191692,
    "time": 25953.057373046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.476386842188134,
    "avg_bits_err_output": 18.476386842188134,
    "avg_bits_err_improve": 0,
    "time": 40583.3935546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) -2e-101) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))) (if (<= (/ h l) 2e-282) (* w0 (sqrt (- 1.0 (* D (* (* (* M (/ h (* d 4.0))) D) (/ M (* l d))))))) (* w0 (sqrt (- 1.0 (* D (/ (/ (* (/ M (* 2.0 d)) (* h (* M (/ D d)))) l) 2.0)))))))",
    "output_parens": 38,
    "avg_bits_err_input": 13.652115268102541,
    "avg_bits_err_output": 9.196319621306431,
    "avg_bits_err_improve": 4.45579564679611,
    "time": 28109.43994140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 2e-314) (* (* (sqrt (/ A (- l))) c0) (- (- (sqrt (/ -1.0 V))))) (if (<= (/ A (* V l)) 2e+301) (* c0 (sqrt (/ A (* V l)))) (* c0 (* (sqrt (- (/ A l))) (sqrt (/ -1.0 V))))))",
    "output_parens": 28,
    "avg_bits_err_input": 19.48360003408157,
    "avg_bits_err_output": 11.832470708971124,
    "avg_bits_err_improve": 7.651129325110444,
    "time": 19331.036376953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= c0 -0.18) (/ (/ (* c0 (if (!= (- (* d (* d (/ c0 (* h (* (* D w) D))))) (sqrt (- (pow (* d (* d (/ c0 (* h (* (* D w) D))))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (* (/ c0 (* D h)) (/ d (* D w)))) (sqrt (- (pow (* d (* (/ c0 (* D h)) (/ d (* D w)))) 2.0) (* M M))))) (fma d (* d (/ c0 (* h (* (* D w) D)))) (sqrt (- (pow (* d (* d (/ c0 (* h (* (* D w) D))))) 2.0) (* M M)))))) w) 2.0) (if (<= c0 2.9e+41) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* d (/ c0 D)) (* D (* w h)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (* d (/ c0 D)) (* D (* w h)))) (pow (- (pow (* d (* d (/ c0 (* h (* (* D w) D))))) 2.0) (* M M)) 0.5)))) (fma d (/ (* d (/ c0 D)) (* D (* w h))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M)))))) (/ (/ (* c0 (if (!= (- (* d (* d (/ c0 (* h (* (* D w) D))))) (sqrt (- (pow (* d (* d (/ c0 (* h (* (* D w) D))))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (* (/ c0 (* D h)) (/ d (* D w)))) (sqrt (- (pow (* d (* (/ c0 (* D h)) (/ d (* D w)))) 2.0) (* M M))))) (fma d (* d (/ c0 (* h (* (* D w) D)))) (sqrt (- (pow (* d (* d (/ c0 (* h (* (* D w) D))))) 2.0) (* M M)))))) w) 2.0)))",
    "output_parens": 175,
    "avg_bits_err_input": 59.29148434905495,
    "avg_bits_err_output": 31.05724670634326,
    "avg_bits_err_improve": 28.234237642711687,
    "time": 64775.639404296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* h (* (/ D (* d 4.0)) (/ M l))) (/ (* M (/ D d)) 2.0)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 2e+219) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) INFINITY) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- 1.0 (* h (* 0.5 (/ (pow (* D (/ M (+ d d))) 2.0) l))))) (* (* (if (!= (sqrt (/ d h)) 0.0) (/ (/ d h) (sqrt (/ d h))) (sqrt (/ d h))) (pow (/ d l) 0.5)) (- 1.0 (* M (* (/ (/ (/ D 4.0) d) l) (* M (* (/ (/ D d) 2.0) h)))))))))",
    "output_parens": 117,
    "avg_bits_err_input": 26.562177345692803,
    "avg_bits_err_output": 22.24983958250077,
    "avg_bits_err_improve": 4.312337763192033,
    "time": 46536.239013671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (/ 0.25 (fma x x 1.0))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (expm1 (log (+ (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0)))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 15.733607877400226,
    "avg_bits_err_output": 15.232886701491084,
    "avg_bits_err_improve": 0.5007211759091419,
    "time": 25351.73291015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9838443609377705,
    "avg_bits_err_output": 0.01,
    "avg_bits_err_improve": 0.9738443609377705,
    "time": 4411.689697265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* 5.0 (* v v))) (- 1.0 (* v v))) (* PI (sqrt (+ 2.0 (* (* v v) -6.0))))) t)",
    "output_parens": 13,
    "avg_bits_err_input": 0.44108909742812363,
    "avg_bits_err_output": 0.11333292577480358,
    "avg_bits_err_improve": 0.32775617165332005,
    "time": 23448.70166015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (sqrt (- 2.0 (* (* v v) 6.0))) (- 1.0 (* v v))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.012344360937770431,
    "avg_bits_err_output": 0.009448120312590146,
    "avg_bits_err_improve": 0.0028962406251802856,
    "time": 11512.882080078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.6181967939153886,
    "avg_bits_err_output": 0.6181967939153886,
    "avg_bits_err_improve": 0,
    "time": 8778.756103515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.015190885762199,
    "avg_bits_err_output": 1.9895234045118382,
    "avg_bits_err_improve": 0.025667481250361,
    "time": 13805.497314453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (+ mu (- Vef (- Ec EDonor))) KbT)) -1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017331650391671637,
    "avg_bits_err_output": 0.017331650391671637,
    "avg_bits_err_improve": 0,
    "time": 11030.53955078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow b 4.0) (* (* a a) (+ (* b b) (fma a a (* b b))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18633289531691705,
    "avg_bits_err_output": 0.09877612812734378,
    "avg_bits_err_improve": 0.08755676718957327,
    "time": 9261.869140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (fma b (* a (* b a)) (pow b 4.0)) (* (* a a) (fma a a (* b b)))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 20,
    "avg_bits_err_input": 0.18874838106592987,
    "avg_bits_err_output": 0.09931204814185352,
    "avg_bits_err_improve": 0.08943633292407635,
    "time": 19732.98779296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (- (pow b 4.0) (- (* a (* (* b b) (+ a a)))))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.1823877602212981,
    "avg_bits_err_output": 0.02236498550190452,
    "avg_bits_err_improve": 0.16002277471939358,
    "time": 16108.601318359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (if (!= (/ x (sqrt (fma 4.0 (* p p) (* x x)))) 0.0) (/ (+ (/ x (sqrt (fma 4.0 (* p p) (* x x)))) (/ (* x x) (fma 4.0 (* p p) (* x x)))) (/ x (sqrt (fma 4.0 (* p p) (* x x))))) (+ 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x))))))))",
    "output_parens": 32,
    "avg_bits_err_input": 13.219543623686569,
    "avg_bits_err_output": 13.222324649744156,
    "avg_bits_err_improve": -0.0027810260575868995,
    "time": 24638.284912109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(pow (pow (/ (expm1 (+ x x)) (expm1 x)) 2.0) 0.25)",
    "output_parens": 6,
    "avg_bits_err_input": 41.179015890162,
    "avg_bits_err_output": 0.049,
    "avg_bits_err_improve": 41.130015890162,
    "time": 8578.8681640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(+ (/ (/ (sin x) 2.0) (- (tan x) x)) (/ (- (/ (sin x) 2.0) x) (- (tan x) x)))",
    "output_parens": 12,
    "avg_bits_err_input": 31.90397771703424,
    "avg_bits_err_output": 31.894521254495565,
    "avg_bits_err_improve": 0.009456462538675936,
    "time": 25393.13134765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (+ (/ 0.0 a) (/ b_2 (- a))) (if (<= b_2 -6.5e-276) (/ (- (+ b_2 (sqrt (fma b_2 b_2 (* c (- a))))) (+ b_2 b_2)) a) (if (<= b_2 1.35e+154) (/ (if (!= (- 0.0 b_2) 0.0) (* a (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))))) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a) (/ (if (!= (- b_2) 0.0) (fma c (/ a (* b_2 -2.0)) (/ (* c a) (* b_2 -2.0))) (- b_2)) a))))",
    "output_parens": 46,
    "avg_bits_err_input": 34.14185691002886,
    "avg_bits_err_output": 18.947172495378993,
    "avg_bits_err_improve": 15.194684414649863,
    "time": 21267.908203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 33.84744890084061,
    "avg_bits_err_output": 22.1854777182856,
    "avg_bits_err_improve": 11.66197118255501,
    "time": 19270.82177734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 32.20379012175142,
    "avg_bits_err_output": 31.391111354622687,
    "avg_bits_err_improve": 0.8126787671287303,
    "time": 17235.63427734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 33.25467620735367,
    "avg_bits_err_output": 11.051657888273718,
    "avg_bits_err_improve": 22.203018319079952,
    "time": 31155.081298828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (+ (+ (log1p N) 2.0) -2.0) (log N))",
    "output_parens": 5,
    "avg_bits_err_input": 29.486007637322597,
    "avg_bits_err_output": 29.488734537274855,
    "avg_bits_err_improve": -0.002726899952257611,
    "time": 14141.32421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (/ 1.0 x) (if (!= (/ x (+ x 1.0)) 0.0) (/ (- (* (/ x (+ x 1.0)) x) x) (/ (fma x x x) (+ x 1.0))) (+ (/ x (+ x 1.0)) -1.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 14.542454852721805,
    "avg_bits_err_output": 14.306411791940516,
    "avg_bits_err_improve": 0.23604306078128978,
    "time": 17919.089599609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(+ (fma (sin (- eps)) (sin x) (* (sin x) (sin eps))) (fma (+ (cos eps) -1.0) (cos x) (* (sin x) (sin (- eps)))))",
    "output_parens": 16,
    "avg_bits_err_input": 39.236232941011416,
    "avg_bits_err_output": 5.928977064164666,
    "avg_bits_err_improve": 33.30725587684675,
    "time": 26383.436767578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.8676301540041,
    "avg_bits_err_output": 29.57744759226878,
    "avg_bits_err_improve": 0.2901825617353211,
    "time": 14527.155029296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.61912989970838,
    "avg_bits_err_output": 30.61912989970838,
    "avg_bits_err_improve": 0,
    "time": 23941.578369140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.96605243463104,
    "avg_bits_err_output": 21.89811891718765,
    "avg_bits_err_improve": 12.06793351744339,
    "time": 22310.5322265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* a (/ (* c 4.0) (- (sqrt (fma c (* a -4.0) (* b b))) b))) (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.06103919246469,
    "avg_bits_err_output": 22.133483189368867,
    "avg_bits_err_improve": 11.927556003095823,
    "time": 26988.51611328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (expm1 (log1p (log1p x))))",
    "output_parens": 6,
    "avg_bits_err_input": 61.468757477423495,
    "avg_bits_err_output": 0.04405432343849157,
    "avg_bits_err_improve": 61.424703153985,
    "time": 14988.943603515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (log1p n) 0.0) (/ (+ (pow (log1p n) 2.0) (* (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n))))) (log1p n)) (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0)))",
    "output_parens": 22,
    "avg_bits_err_input": 63.005613431672735,
    "avg_bits_err_output": 0.7634624242284052,
    "avg_bits_err_improve": 62.24215100744433,
    "time": 17555.931640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (+ (* (/ 0.5 (- -1.0 eps)) (+ eps eps)) (if (!= (- (/ -1.0 (- -1.0 eps)) -1.0) 0.0) (/ (+ -1.0 (pow (/ -1.0 (- -1.0 eps)) 2.0)) (- (/ -1.0 (- -1.0 eps)) -1.0)) (- -1.0 (/ 1.0 (- -1.0 eps))))))",
    "output_parens": 22,
    "avg_bits_err_input": 58.46515362392268,
    "avg_bits_err_output": 50.45171662413065,
    "avg_bits_err_improve": 8.013436999792034,
    "time": 17785.697509765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (if (!= (+ 1.0 (/ 1.0 (/ x (tan x)))) 0.0) (/ (if (!= (+ 1.0 (/ 1.0 (pow (/ x (tan x)) 2.0))) 0.0) (/ (- 1.0 (/ 1.0 (pow (/ x (tan x)) 4.0))) (+ 1.0 (/ 1.0 (pow (/ x (tan x)) 2.0)))) (- 1.0 (/ 1.0 (pow (/ x (tan x)) 2.0)))) (+ -1.0 (/ -1.0 (/ x (tan x))))) (+ -1.0 (/ 1.0 (/ x (tan x))))) (* x (/ 1.0 (/ x (tan x)))))",
    "output_parens": 43,
    "avg_bits_err_input": 59.88804697047933,
    "avg_bits_err_output": 59.86940424894651,
    "avg_bits_err_improve": 0.018642721532820872,
    "time": 31628.02490234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ (expm1 (* eps (+ a b))) (expm1 (* eps a))) (if (!= (/ eps (expm1 (* eps b))) 0.0) (/ 1.0 (/ 1.0 (/ eps (expm1 (* eps b))))) (/ eps (expm1 (* eps b)))))",
    "output_parens": 20,
    "avg_bits_err_input": 60.36918945083786,
    "avg_bits_err_output": 29.526343285473594,
    "avg_bits_err_improve": 30.842846165364264,
    "time": 27815.86669921875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(- 1.0 (/ -1.0 (expm1 x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.51891809206283,
    "avg_bits_err_output": 0.12019875157544475,
    "avg_bits_err_improve": 41.39871934048739,
    "time": 9555.259033203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.58823761586692,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.58736261586692,
    "time": 3175.970947265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.314059832286034,
    "avg_bits_err_output": 0.020062931983547826,
    "avg_bits_err_improve": 29.293996900302485,
    "time": 7256.893310546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(* (exp (- x)) (fma (exp x) (exp x) (- 1.0 (* (exp x) 2.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 29.562467002314683,
    "avg_bits_err_output": 28.709481005921095,
    "avg_bits_err_improve": 0.8529859963935884,
    "time": 19188.0634765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (if (!= (- (/ 2.0 x) (/ 1.0 (+ 1.0 x))) 0.0) (/ 1.0 (/ 2.0 (- (/ 2.0 (+ 1.0 x)) (/ 4.0 x)))) (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x))) (/ 1.0 (- x 1.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 9.608333295066489,
    "avg_bits_err_output": 9.630973838931554,
    "avg_bits_err_improve": -0.022640543865065865,
    "time": 26714.11328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (- -1.0 (tan x)) 0.0) (- (/ (- (tan (+ x eps)) (tan x)) (+ (tan x) 1.0)) (/ (* (tan x) (- (tan (+ x eps)) (tan x))) (- -1.0 (tan x)))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 25,
    "avg_bits_err_input": 36.840457708542395,
    "avg_bits_err_output": 36.8419045999756,
    "avg_bits_err_improve": -0.0014468914332042004,
    "time": 19676.67041015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.04240395230425,
    "avg_bits_err_output": 0.16565112812734376,
    "avg_bits_err_improve": 29.876752824176908,
    "time": 12928.58642578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.05896402966488,
    "avg_bits_err_output": 22.257462751629237,
    "avg_bits_err_improve": 14.80150127803564,
    "time": 19031.768310546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (!= (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x)))) 0.0) (/ (+ (/ 1.0 x) (/ -1.0 (+ 1.0 x))) (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x))))) (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (+ 1.0 x)))))",
    "output_parens": 25,
    "avg_bits_err_input": 20.026034465467962,
    "avg_bits_err_output": 20.08884955657579,
    "avg_bits_err_improve": -0.06281509110782935,
    "time": 15329.9296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(exp (* 1.0 (log (- (atan (+ N 1.0)) (atan N)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.991472377652421,
    "avg_bits_err_output": 14.991602084304768,
    "avg_bits_err_improve": -0.00012970665234668388,
    "time": 10883.02734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.174707168965995,
    "avg_bits_err_output": 1.2664966232126014,
    "avg_bits_err_improve": 28.908210545753395,
    "time": 25226.543701171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (- m (+ 1.0 (/ (- (* m m) m) v))) (* (/ m v) (- m (* m m))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.07847755746635404,
    "avg_bits_err_output": 0.0780339588553331,
    "avg_bits_err_improve": 0.00044359861102094555,
    "time": 16181.034912109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b (- a)) (* a b))",
    "output_parens": 4,
    "avg_bits_err_input": 15.852117248422408,
    "avg_bits_err_output": 0.29742481250360575,
    "avg_bits_err_improve": 15.554692435918803,
    "time": 12568.88037109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (if (!= (* (cos 1.0) (cos (fma PI (/ angle 180.0) 1.0))) 0.0) (/ (- (* (* (cos 1.0) (cos (fma PI (/ angle 180.0) 1.0))) (* (cos 1.0) (cos (fma PI (/ angle 180.0) 1.0)))) (* (* (cos 1.0) (log (+ 1.0 (expm1 (cos (fma PI (/ angle 180.0) 1.0)))))) (* (sin -1.0) (sin (fma PI (/ angle 180.0) 1.0))))) (* (cos 1.0) (cos (fma PI (/ angle 180.0) 1.0)))) (cos (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 50,
    "avg_bits_err_input": 19.82264113287219,
    "avg_bits_err_output": 19.810870194361414,
    "avg_bits_err_improve": 0.011770938510775153,
    "time": 51239.9189453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) -2e+116) (* (if (!= (* (exp (* 1.0 (log (sin (* angle (/ PI -180.0)))))) (pow b 2.0)) 0.0) (- (- (/ (pow (* (sin (* angle (/ PI -180.0))) a) 2.0) (sin (* angle (/ PI -180.0)))) 0.0) (/ 2.0 (/ 2.0 (* (sin (* angle (/ PI -180.0))) (pow b 2.0))))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0))))) (if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) 2e-58) (/ (* (sin (if (!= (* PI (/ (+ angle angle) 180.0)) 0.0) (/ 1.0 (/ 1.0 (* PI (/ (+ angle angle) 180.0)))) (* PI (/ (+ angle angle) 180.0)))) (- (pow b 2.0) (pow a 2.0))) 1.0) (* (if (!= (* (cos (- (/ PI 2.0) (* angle (/ PI -180.0)))) (pow b 2.0)) 0.0) (- (- (/ (pow (* (sin (* angle (/ PI -180.0))) a) 2.0) (sin (* angle (/ PI -180.0)))) 0.0) (/ 2.0 (/ 2.0 (* (sin (* angle (/ PI -180.0))) (pow b 2.0))))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0)))))))",
    "output_parens": 126,
    "avg_bits_err_input": 31.069179065568253,
    "avg_bits_err_output": 27.31035409664968,
    "avg_bits_err_improve": 3.7588249689185744,
    "time": 49935.868896484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (/ PI 180.0))) a) 2.0) (pow (* b (log1p (expm1 (cos (* PI (* angle 0.005555555555555556)))))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.27522524694481,
    "avg_bits_err_output": 20.230412660963953,
    "avg_bits_err_improve": 0.04481258598085702,
    "time": 36913.28662109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17585416639998386,
    "avg_bits_err_output": 0.17267025517746534,
    "avg_bits_err_improve": 0.003183911222518515,
    "time": 18820.902099609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32912410109759316,
    "avg_bits_err_output": 0.3237888249507136,
    "avg_bits_err_improve": 0.005335276146879564,
    "time": 19580.02197265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (sin v) (- (* (cos v) e) -1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.14231372187554087,
    "avg_bits_err_output": 0.143761842188131,
    "avg_bits_err_improve": -0.0014481203125901454,
    "time": 16832.07080078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi2) (* (cos (- lambda1 lambda2)) (cos phi1)) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.90002975143135,
    "avg_bits_err_output": 16.895645031662273,
    "avg_bits_err_improve": 0.00438471976907806,
    "time": 35877.116943359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (/ (+ (* -4.0 (* a c)) (fma b b (fma c (* -4.0 a) (* b b)))) 2.0))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 28,
    "avg_bits_err_input": 52.823534972120875,
    "avg_bits_err_output": 0.1772810156295071,
    "avg_bits_err_improve": 52.64625395649137,
    "time": 28024.399169921875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 28.784753414520114,
    "avg_bits_err_output": 0.32857592093974647,
    "avg_bits_err_improve": 28.45617749358037,
    "time": 25951.66552734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 44.354955677005634,
    "avg_bits_err_output": 0.23243214375685073,
    "avg_bits_err_improve": 44.12252353324878,
    "time": 24473.65625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -6.2e-255) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* a (* c -4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0)))",
    "output_parens": 49,
    "avg_bits_err_input": 33.9724835388945,
    "avg_bits_err_output": 15.631496424514939,
    "avg_bits_err_improve": 18.340987114379562,
    "time": 23526.460693359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (expm1 (log1p (cos (- lambda1 lambda2))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.9316221955006693,
    "avg_bits_err_output": 0.9398363081706664,
    "avg_bits_err_improve": -0.008214112669997164,
    "time": 27716.03857421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (/ 1.0 (+ 1.0 (exp (* -2.0 x)))) 0.0) (if (!= (/ (+ (exp (* -2.0 x)) 3.0) (+ 1.0 (exp (* -2.0 x)))) 0.0) (- (/ (/ (* (expm1 (* -2.0 x)) (+ (exp (* -2.0 x)) 3.0)) (- -1.0 (exp (* -2.0 x)))) (+ (exp (* -2.0 x)) 3.0)) 0.0) (/ (expm1 (* -2.0 x)) (- -1.0 (exp (* -2.0 x))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 41,
    "avg_bits_err_input": 29.48928923050382,
    "avg_bits_err_output": 0.015511842188131012,
    "avg_bits_err_improve": 29.47377738831569,
    "time": 22582.6650390625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(* (/ 1.0 (+ (exp (+ x x)) 1.0)) (expm1 (* x 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 58.10358578893647,
    "avg_bits_err_output": 0.6832830828133114,
    "avg_bits_err_improve": 57.42030270612316,
    "time": 19556.119384765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (log (exp (/ -1.0 (exp x))))) 2.0)",
    "output_parens": 8,
    "avg_bits_err_input": 58.02302317436167,
    "avg_bits_err_output": 0.3991922413541126,
    "avg_bits_err_improve": 57.623830933007554,
    "time": 9883.801513671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008240601562950723,
    "avg_bits_err_output": 0.008240601562950723,
    "avg_bits_err_improve": 0,
    "time": 2052.293212890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log1p (if (!= (- (+ x -1.0) (sqrt (fma x x -1.0))) 0.0) (/ (- (+ x x) 2.0) (+ (sqrt (fma x x -1.0)) (- 1.0 x))) (+ x (+ -1.0 (sqrt (fma x x -1.0))))))",
    "output_parens": 18,
    "avg_bits_err_input": 32.161125,
    "avg_bits_err_output": 31.612463703829196,
    "avg_bits_err_improve": 0.5486612961708026,
    "time": 8902.079345703125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(/ (+ (+ 1.0 (log (/ (+ x 1.0) (- 1.0 x)))) -1.0) 2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 58.456263283840364,
    "avg_bits_err_output": 58.45778525549785,
    "avg_bits_err_improve": -0.0015219716574890185,
    "time": 17380.791259765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04375,
    "avg_bits_err_output": 0.04325,
    "avg_bits_err_improve": 0.0005000000000000004,
    "time": 3232.512451171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1302712406251803,
    "avg_bits_err_output": 0.1302712406251803,
    "avg_bits_err_improve": 0,
    "time": 22056.23828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12832312031259016,
    "avg_bits_err_output": 0.12832312031259016,
    "avg_bits_err_improve": 0,
    "time": 26701.63134765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (- (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0))) (if (!= (* (cos (/ phi2 2.0)) (cos (/ phi1 2.0))) 0.0) (- (* (* (cos (/ phi1 2.0)) (sin (/ phi1 2.0))) (/ (sin (/ phi2 2.0)) (cos (/ phi1 2.0)))) 0.0) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0)))))) (- phi1 phi2)))",
    "output_parens": 35,
    "avg_bits_err_input": 39.37138127544293,
    "avg_bits_err_output": 0.12974778780903115,
    "avg_bits_err_improve": 39.2416334876339,
    "time": 28371.3603515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.283674373791138,
    "avg_bits_err_output": 14.283674373791138,
    "avg_bits_err_improve": 0,
    "time": 3752.792236328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (if (!= (- (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) (cos delta)) 0.0) (/ (pow (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) 2.0) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 67,
    "avg_bits_err_input": 0.13904330086437403,
    "avg_bits_err_output": 0.140902113581307,
    "avg_bits_err_improve": -0.0018588127169329727,
    "time": 44042.112060546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.84631070773147,
    "avg_bits_err_output": 0.1749698862180128,
    "avg_bits_err_improve": 52.67134082151345,
    "time": 23554.175048828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.85335407011293,
    "avg_bits_err_output": 0.34972049063960353,
    "avg_bits_err_improve": 28.503633579473323,
    "time": 24818.5185546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* a -3.0)))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma c (* a -3.0) (* b b))))) (* a -3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 44.42040056330815,
    "avg_bits_err_output": 0.23875526406944084,
    "avg_bits_err_improve": 44.18164529923871,
    "time": 32513.50390625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* a (* c -3.0))))) 0.0) (/ (* (/ c (+ b (sqrt (fma a (* c -3.0) (* b b))))) (* a -3.0)) 1.0) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.013366455742556,
    "avg_bits_err_output": 21.931308967246146,
    "avg_bits_err_improve": 12.08205748849641,
    "time": 26902.1484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (log1p (expm1 (cos (- lambda2 lambda1))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.70846327050992,
    "avg_bits_err_output": 13.714979270486957,
    "avg_bits_err_improve": -0.006515999977036557,
    "time": 35171.9130859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.027332819947535,
    "avg_bits_err_output": 0.45932753909899127,
    "avg_bits_err_improve": 28.568005280848546,
    "time": 20981.7255859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (- (/ x (+ 1.0 x)) (- -1.0 (/ 1.0 (+ x -1.0)))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.013740601562950722,
    "avg_bits_err_improve": -0.0018656015629507222,
    "time": 8671.68505859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (if (!= (/ -1.0 (- 1.0 (* x x))) 0.0) (/ (- (* (pow (/ -1.0 (+ x 1.0)) 2.0) (/ -1.0 (- 1.0 (* x x)))) (* (/ -1.0 (- 1.0 (* x x))) (/ -1.0 (- 1.0 (* x x))))) (/ -1.0 (- 1.0 (* x x)))) (- (/ -1.0 (fma x x -1.0)) (/ -1.0 (pow (+ x 1.0) 2.0)))) (/ 1.0 (+ 1.0 x)))",
    "output_parens": 33,
    "avg_bits_err_input": 14.619113870524966,
    "avg_bits_err_output": 14.58606692245325,
    "avg_bits_err_improve": 0.03304694807171593,
    "time": 18812.537841796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -3.1e-308) (* (sqrt (- F)) (* (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C))) (/ (if (!= (sqrt (fma (* A C) -8.0 (* 2.0 (pow B 2.0)))) 0.0) (/ (fma (* A C) -8.0 (* 2.0 (pow B 2.0))) (sqrt (fma (* A C) -8.0 (* 2.0 (pow B 2.0))))) (sqrt (fma (* A C) -8.0 (* 2.0 (pow B 2.0))))) (- (* A (* C 4.0)) (pow B 2.0))))) (* (sqrt (- (* (* A C) 8.0) (* 2.0 (pow B 2.0)))) (* (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (/ (sqrt F) (- (* A (* C 4.0)) (pow B 2.0))))))",
    "output_parens": 64,
    "avg_bits_err_input": 52.557777024598984,
    "avg_bits_err_output": 47.264550394018855,
    "avg_bits_err_improve": 5.293226630580129,
    "time": 40387.559814453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -0.99999999999999) (* (atan (/ (- C (if (!= A 0.0) (/ (* A (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) A) (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) B)) (/ 180.0 PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 0.0) (* (atan (* (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0) (* (pow (- A C) 2.0) 0.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (/ -1.0 B))) (/ 180.0 PI)) (* (atan (/ (- C (if (!= A 0.0) (/ (* A (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) A) (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) B)) (/ 180.0 PI))))",
    "output_parens": 98,
    "avg_bits_err_input": 29.85365437021454,
    "avg_bits_err_output": 26.90656603079465,
    "avg_bits_err_improve": 2.9470883394198886,
    "time": 26362.46044921875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2.35e-296) (/ (* (* (sqrt (- F)) (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ C A))))) (+ (sqrt 2.0) (sqrt 2.0))) (- (- (pow B 2.0)) (- (pow B 2.0) (* A (* C 8.0))))) (* (sqrt (* 2.0 F)) (* (sqrt (fabs (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (/ (sqrt (fabs (- (* A (* 4.0 C)) (pow B 2.0)))) (- (* A (* 4.0 C)) (pow B 2.0))))))",
    "output_parens": 55,
    "avg_bits_err_input": 52.76154166964942,
    "avg_bits_err_output": 46.526000440687035,
    "avg_bits_err_improve": 6.235541228962383,
    "time": 52336.67431640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.391838770633505,
    "avg_bits_err_output": 15.391838770633505,
    "avg_bits_err_improve": 0,
    "time": 17941.131103515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -6.2e+155) (+ (cbrt (* (/ 0.5 a) (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (cbrt (* (+ g (* (sqrt (- h g)) (sqrt (- (+ g h))))) (/ -0.5 a)))) (if (<= g -4e-291) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (sqrt (- (* g g) (* h h))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) (- g)) 0.0) (* h (/ h (- (- g) (sqrt (fma g g (* h (- h))))))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))))))",
    "output_parens": 90,
    "avg_bits_err_input": 35.81750611425101,
    "avg_bits_err_output": 11.966486749589926,
    "avg_bits_err_improve": 23.851019364661084,
    "time": 36469.137451171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos (/ (acos (/ g (- h))) 6.0)) (cos (/ (fma PI 4.0 (acos (/ g (- h)))) 6.0))) (* (sin (/ (acos (/ g (- h))) 6.0)) (sin (/ (fma PI 4.0 (acos (/ g (- h)))) 6.0)))))",
    "output_parens": 26,
    "avg_bits_err_input": 0.9924015046946224,
    "avg_bits_err_output": 0.036689098442818535,
    "avg_bits_err_improve": 0.9557124062518039,
    "time": 15886.939697265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.931125,
    "avg_bits_err_output": 0.931125,
    "avg_bits_err_improve": 0,
    "time": 6075.66162109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -2e+272) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-305) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+288) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.28370955146603,
    "avg_bits_err_output": 2.434714390410962,
    "avg_bits_err_improve": 8.848995161055068,
    "time": 10003.893798828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5119730148866263,
    "avg_bits_err_output": 0.4845,
    "avg_bits_err_improve": 0.02747301488662629,
    "time": 9773.0107421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 1e-5) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (if (!= (+ 1.0 x) 0.0) (/ (- (* (+ 1.0 (hypot 1.0 x)) (+ 1.0 x)) (* (+ 1.0 x) (+ 1.0 x))) (+ 1.0 x)) (- (hypot 1.0 x) x))) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 100000000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 57,
    "avg_bits_err_input": 52.99372040857784,
    "avg_bits_err_output": 0.09263969906321387,
    "avg_bits_err_improve": 52.90108070951463,
    "time": 15320.8583984375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.684403591105956,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.684403591105956,
    "time": 2697.54931640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 2.0 (* x 2.0)) (+ x (+ x 2.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.017375,
    "avg_bits_err_improve": -0.0037500000000000016,
    "time": 7136.1376953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1323.738525390625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= r -4e+134) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* r (* w (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (if (<= r 1e+19) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* w (* r (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* r (* w (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.565362110838905,
    "avg_bits_err_output": 0.2963400535154667,
    "avg_bits_err_improve": 12.269022057323438,
    "time": 23102.258056640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (+ (* (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0) (* x1 x1)) (* -6.0 (* x1 x1))))))))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5180940075640867,
    "avg_bits_err_output": 0.277357127715055,
    "avg_bits_err_improve": 0.24073687984903175,
    "time": 77551.41040039062,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.25644350928271,
    "avg_bits_err_output": 1.1995300526959174,
    "avg_bits_err_improve": 17.056913456586795,
    "time": 10015.9296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.22679248125036058,
    "avg_bits_err_output": 0.18691748125036056,
    "avg_bits_err_improve": 0.03987500000000002,
    "time": 8212.456298828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002625,
    "avg_bits_err_output": 0.002625,
    "avg_bits_err_improve": 0,
    "time": 2729.426513671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (- (* (/ 1.0 a) (/ PI (- b a))) (/ (/ PI (- b a)) b)) 2.0) (+ b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.54698531867687,
    "avg_bits_err_output": 0.24865150469462113,
    "avg_bits_err_improve": 14.298333813982248,
    "time": 17445.0185546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (exp (- (fma eps x x))) (- (/ (/ -1.0 eps) (exp (fma eps x x))) (/ (+ -1.0 (/ -1.0 eps)) (exp (- x (* eps x)))))) 2.0)",
    "output_parens": 16,
    "avg_bits_err_input": 28.848695455601533,
    "avg_bits_err_output": 24.23278296795212,
    "avg_bits_err_improve": 4.615912487649414,
    "time": 23987.44189453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (+ (- 4.0 (/ 4.0 (+ t (/ t t)))) (/ (- (/ 4.0 (+ t (/ t t))) 4.0) (+ t (/ t t)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.004125,
    "avg_bits_err_output": 0.003875,
    "avg_bits_err_improve": 0.0002500000000000002,
    "time": 10772.349609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.0085,
    "avg_bits_err_output": 0.0085,
    "avg_bits_err_improve": 0,
    "time": 8433.937255859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ (* (/ (* 4.0 t) (+ t 1.0)) t) (+ 1.0 t))) (+ 2.0 (/ (* (/ (* 4.0 t) (+ t 1.0)) t) (+ 1.0 t))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.046573120312590144,
    "avg_bits_err_output": 0.07869812031259014,
    "avg_bits_err_improve": -0.032125,
    "time": 9701.372802734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3833.614501953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 9411.361328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2967.124267578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.868468556723507,
    "avg_bits_err_output": 0.2465,
    "avg_bits_err_improve": 7.621968556723507,
    "time": 32719.6279296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.2546251846211645,
    "avg_bits_err_output": 7.2546251846211645,
    "avg_bits_err_improve": 0,
    "time": 15880.530029296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.755211617548808,
    "avg_bits_err_output": 0.037641451702802566,
    "avg_bits_err_improve": 15.717570165846006,
    "time": 11254.784423828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (pow (pow (exp 10.0) x) x) (- (pow (+ 0.5 (* (cos x) 0.5)) 2.0) (pow (+ (* (cos x) 0.5) -0.5) 2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 3.532546884364404,
    "avg_bits_err_output": 1.2753887936633859,
    "avg_bits_err_improve": 2.257158090701018,
    "time": 16918.75732421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -400000000000.0) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 2e-35) (+ (/ x (* (* (fma x x 1.0) 2.0) 2.0)) (/ (+ x (+ x x)) (* (* (fma x x 1.0) 2.0) 2.0))) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 67,
    "avg_bits_err_input": 15.344769544218986,
    "avg_bits_err_output": 0.01689624062518029,
    "avg_bits_err_improve": 15.327873303593805,
    "time": 7225.771728515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.849550129934634,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.849550129934634,
    "time": 4962.811279296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.14092750219331,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.140427502193305,
    "time": 4165.4736328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (- 1.7e+308 (+ -1.7e+308 (* t +inf.0))) -2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2927193609377705,
    "avg_bits_err_improve": 63.707280639062226,
    "time": 21487.567138671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (* t (* t 2e-16)) 2e-16)",
    "output_parens": 3,
    "avg_bits_err_input": 61.84325466514815,
    "avg_bits_err_output": 0.4051890984428189,
    "avg_bits_err_improve": 61.43806556670533,
    "time": 16188.058349609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* a (/ (* c 4.0) (- (sqrt (fma c (* a -4.0) (* b b))) b))) (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.06103919246469,
    "avg_bits_err_output": 22.133483189368867,
    "avg_bits_err_improve": 11.927556003095823,
    "time": 29588.302001953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -6.2e-255) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* a (* c -4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0)))",
    "output_parens": 49,
    "avg_bits_err_input": 33.9724835388945,
    "avg_bits_err_output": 15.631496424514939,
    "avg_bits_err_improve": 18.340987114379562,
    "time": 25999.4375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2672.879150390625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.804810527354064,
    "avg_bits_err_output": 0.011875,
    "avg_bits_err_improve": 39.79293552735406,
    "time": 3849.849609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.48084172065822,
    "avg_bits_err_output": 20.48084172065822,
    "avg_bits_err_improve": 0,
    "time": 4590.888916015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6571481356869886,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6571481356869886,
    "time": 5979.818115234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0395,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 0.03825,
    "time": 6383.527587890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02239624062518029,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 0.011021240625180291,
    "time": 5188.379638671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.01425,
    "avg_bits_err_output": 0.01425,
    "avg_bits_err_improve": 0,
    "time": 3345.961669921875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000875,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0,
    "time": 1881.49267578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ a (+ c b))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.41169605312878627,
    "avg_bits_err_output": 0.231125,
    "avg_bits_err_improve": 0.18057105312878627,
    "time": 6191.614990234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (- 0.5 (/ (cos (* x 2.0)) 2.0)) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 13,
    "avg_bits_err_input": 30.224150718920463,
    "avg_bits_err_output": 30.16921353477595,
    "avg_bits_err_improve": 0.05493718414451365,
    "time": 13815.67822265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (/ (+ (sqrt (- (* x x) eps)) (+ (sqrt (- (* x x) eps)) (+ x x))) 2.0)) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 21,
    "avg_bits_err_input": 24.325377732130907,
    "avg_bits_err_output": 0.30102124062518026,
    "avg_bits_err_improve": 24.024356491505728,
    "time": 13445.280517578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (- (* x x) (pow (sin x) 2.0)) (fma (sin (- x)) (sin x) (pow (sin x) 2.0))) 0.0) (/ (- (pow (* (- x (sin x)) (+ x (sin x))) 2.0) (* (fma (sin (- x)) (sin x) (pow (sin x) 2.0)) (fma (sin (- x)) (sin x) (pow (sin x) 2.0)))) (- (- (* x x) (pow (sin x) 2.0)) (fma (sin (- x)) (sin x) (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 60,
    "avg_bits_err_input": 29.580091874103584,
    "avg_bits_err_output": 29.499529993413347,
    "avg_bits_err_improve": 0.08056188069023662,
    "time": 36317.131591796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006573120312590144,
    "avg_bits_err_output": 0.001625,
    "avg_bits_err_improve": 0.004948120312590144,
    "time": 2709.7763671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (/ (* (- 200.0 (* 200.0 (pow (+ (/ i n) 1.0) n))) (/ 0.5 (/ i n))) -1.0))",
    "output_parens": 24,
    "avg_bits_err_input": 47.72965976414739,
    "avg_bits_err_output": 13.943319683684264,
    "avg_bits_err_improve": 33.78634008046313,
    "time": 25327.25,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.436088356440877,
    "avg_bits_err_output": 22.40581588245114,
    "avg_bits_err_improve": 3.0302724739897364,
    "time": 14319.119873046875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.623499127443804,
    "avg_bits_err_output": 22.623480160864283,
    "avg_bits_err_improve": 3.000018966579521,
    "time": 14396.216552734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (+ (* ux (- maxCos)) ux))",
    "output_parens": 4,
    "avg_bits_err_input": 0.035,
    "avg_bits_err_output": 0.021077042243096474,
    "avg_bits_err_improve": 0.013922957756903529,
    "time": 7979.943603515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.505415196103039,
    "avg_bits_err_output": 12.056887532000678,
    "avg_bits_err_improve": 1.448527664102361,
    "time": 31684.21435546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.548809366169355,
    "avg_bits_err_output": 12.046657509373897,
    "avg_bits_err_improve": 1.5021518567954573,
    "time": 28937.34912109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* ux maxCos) (- (+ ux 1.0) (+ ux ux))) zi))",
    "output_parens": 36,
    "avg_bits_err_input": 0.34026445899576524,
    "avg_bits_err_output": 0.34919577693822057,
    "avg_bits_err_improve": -0.00893131794245533,
    "time": 41969.66650390625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax)))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.20140481469338017,
    "avg_bits_err_output": 0.2016029350059703,
    "avg_bits_err_improve": -0.00019812031259011653,
    "time": 27736.048828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (- (/ (* u1 (/ u1 (- 1.0 u1))) u1) 0.0) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.542935509015052,
    "avg_bits_err_output": 0.5521146837405791,
    "avg_bits_err_improve": -0.009179174725527095,
    "time": 21820.229736328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (* (/ 1.0 u1) (/ u1 (/ (- 1.0 u1) u1))) (/ u1 (- 1.0 u1)))) (cos (* 6.28318530718 u2)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.32672121110921293,
    "avg_bits_err_output": 0.3849019434378526,
    "avg_bits_err_improve": -0.058180732328639684,
    "time": 21427.431640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.32466646930498516,
    "avg_bits_err_output": 0.32526353104977934,
    "avg_bits_err_improve": -0.0005970617447941806,
    "time": 45309.30419921875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.062307858716118235,
    "avg_bits_err_output": 0.04594906031780625,
    "avg_bits_err_improve": 0.01635879839831198,
    "time": 15925.397216796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(- (/ (/ (exp (/ (fabs x) (- s))) (fma s (exp (/ (fabs x) (- s))) s)) (+ (exp (/ (fabs x) (- s))) 1.0)) 0.0)",
    "output_parens": 17,
    "avg_bits_err_input": 0.13040594065941177,
    "avg_bits_err_output": 0.11885608693123609,
    "avg_bits_err_improve": 0.011549853728175685,
    "time": 20550.478515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6827529928988721,
    "avg_bits_err_output": 0.6889228779478774,
    "avg_bits_err_improve": -0.006169885049005286,
    "time": 24550.962890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.15776153656422884,
    "avg_bits_err_output": 0.15776153656422884,
    "avg_bits_err_improve": 0,
    "time": 20403.71875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.668334903845633,
    "avg_bits_err_output": 2.668334903845633,
    "avg_bits_err_improve": 0,
    "time": 33327.248291015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (* (/ (/ 0.5 v) (sinh (/ 1.0 v))) (* 2.0 (* v (sinh (/ 1.0 v))))) (* cosTheta_i (* (/ cosTheta_O v) (/ (/ 0.5 v) (sinh (/ 1.0 v))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.45579228081252515,
    "avg_bits_err_output": 0.47625132455083746,
    "avg_bits_err_improve": -0.02045904373831231,
    "time": 27278.168212890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (+ (/ (- (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) 1.0) v) 0.6931)) (/ 0.5 v))",
    "output_parens": 9,
    "avg_bits_err_input": 0.10260851389960937,
    "avg_bits_err_output": 0.10196636316850573,
    "avg_bits_err_improve": 0.000642150731103644,
    "time": 8124.2978515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow alpha (* PI 2.0)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.46990039415795626,
    "avg_bits_err_output": 0.4200115657452162,
    "avg_bits_err_improve": 0.04988882841274006,
    "time": 25253.569091796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (+ 1.0 (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) 0.0) (/ (if (!= (- 1.0 (/ -1.0 (pow (fma u -1.3333333333333333 1.3333333333333333) 2.0))) 0.0) (/ (- 1.0 (/ 1.0 (pow (fma u -1.3333333333333333 1.3333333333333333) 4.0))) (- 1.0 (/ -1.0 (pow (fma u -1.3333333333333333 1.3333333333333333) 2.0)))) (+ 1.0 (/ -1.0 (pow (fma u -1.3333333333333333 1.3333333333333333) 2.0)))) (+ -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333)))) (+ -1.0 (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 34,
    "avg_bits_err_input": 1.3279020321432367,
    "avg_bits_err_output": 1.1536078712412579,
    "avg_bits_err_improve": 0.1742941609019788,
    "time": 27430.6220703125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (+ (+ (log (/ 1.0 (fma u -4.0 1.0))) -1.0) 1.0) s)",
    "output_parens": 6,
    "avg_bits_err_input": 12.385976548948085,
    "avg_bits_err_output": 12.398316141862722,
    "avg_bits_err_improve": -0.012339592914637265,
    "time": 23858.764404296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (* 2.0 PI)))) (* 0.75 (/ (exp (/ (/ r -3.0) s)) (* s (* PI 6.0))))) r)",
    "output_parens": 16,
    "avg_bits_err_input": 0.1447449350722043,
    "avg_bits_err_output": 0.1475545705986238,
    "avg_bits_err_improve": -0.002809635526419524,
    "time": 28400.63671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9024449258931355,
    "avg_bits_err_output": 0.7246776663520006,
    "avg_bits_err_improve": 0.17776725954113493,
    "time": 29116.45263671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (if (!= (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)) 0.0) (/ (- 1.0 (+ cosTheta cosTheta)) (* (* cosTheta (sqrt PI)) (sqrt (- 1.0 (+ cosTheta cosTheta))))) (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta))) (exp (* (- cosTheta) cosTheta)))))",
    "output_parens": 30,
    "avg_bits_err_input": 0.6945803313842076,
    "avg_bits_err_output": 0.46994195683321893,
    "avg_bits_err_improve": 0.22463837455098867,
    "time": 22447.478271484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(log1p (expm1 (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.570361051648597,
    "avg_bits_err_output": 0.525841684982147,
    "avg_bits_err_improve": 13.04451936666645,
    "time": 19014.914306640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.617788886988382,
    "avg_bits_err_output": 0.3037011847878007,
    "avg_bits_err_improve": 13.314087702200581,
    "time": 21506.876953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- alpha) (* (log1p (- u0)) alpha))",
    "output_parens": 5,
    "avg_bits_err_input": 13.988949961053551,
    "avg_bits_err_output": 0.3352855265643931,
    "avg_bits_err_improve": 13.653664434489158,
    "time": 17211.405029296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ (/ cos2phi alphax) alphax) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.657846703115,
    "avg_bits_err_output": 0.504306510249692,
    "avg_bits_err_improve": 12.153540192865307,
    "time": 18912.2490234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.51630223095017,
    "avg_bits_err_output": 12.149131688793489,
    "avg_bits_err_improve": 4.367170542156682,
    "time": 22263.646728515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.210761842188131,
    "avg_bits_err_output": 0.15275,
    "avg_bits_err_improve": 0.05801184218813099,
    "time": 15948.61865234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.812547798383543,
    "avg_bits_err_output": 10.664861573467572,
    "avg_bits_err_improve": 3.1476862249159705,
    "time": 22407.58154296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (- (expm1 (* PI (/ f 4.0))) (expm1 (* PI (/ f -4.0)))))) (/ PI -4.0))",
    "output_parens": 18,
    "avg_bits_err_input": 61.69592345952694,
    "avg_bits_err_output": 2.0829268143991486,
    "avg_bits_err_improve": 59.61299664512779,
    "time": 66686.86767578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.855677604555986,
    "avg_bits_err_output": 34.11662580846703,
    "avg_bits_err_improve": 8.739051796088958,
    "time": 30545.3896484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.8710282331018293,
    "avg_bits_err_output": 0.2092197375050479,
    "avg_bits_err_improve": 3.6618084955967816,
    "time": 34589.1103515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0) (pow (* (* 2.0 (/ l Om)) (sin kx)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.0442544754655605,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 1.0375044754655605,
    "time": 25058.938720703125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (/ (* Om (/ Om Omc)) Omc)) (+ 1.0 (* 2.0 (* (/ t l) (/ t l)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.231380863159591,
    "avg_bits_err_output": 10.231380863159591,
    "avg_bits_err_improve": 0,
    "time": 22129.337890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -4.1e-108) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (sqrt (fabs (* n U)))) (if (<= U -4.4e-231) (* (sqrt (* (* 2.0 n) (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- U))) (if (<= U 6e-304) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (sqrt (fabs (* n U)))) (if (<= U 3.2e-158) (* (sqrt (* 2.0 (* n (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt U)) (if (<= U 1.05e+76) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (sqrt (fabs (* n U)))) (* (sqrt (* 2.0 (* n (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt U)))))))",
    "output_parens": 101,
    "avg_bits_err_input": 34.9832577964157,
    "avg_bits_err_output": 23.723502275400417,
    "avg_bits_err_improve": 11.259755521015283,
    "time": 47199.66943359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ k t) (/ (* (/ (* (tan k) (pow t 3.0)) t) (* k (/ (sin k) l))) l)))",
    "output_parens": 12,
    "avg_bits_err_input": 47.14853979378786,
    "avg_bits_err_output": 30.568270841230678,
    "avg_bits_err_improve": 16.580268952557184,
    "time": 47009.306884765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (* (sin k) (/ (pow t 3.0) l)) l) (* (tan k) (+ (pow (/ k t) 2.0) 2.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.55534704050198,
    "avg_bits_err_output": 28.228449632379185,
    "avg_bits_err_improve": 4.326897408122793,
    "time": 26141.336181640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* (cos th) (* a1 a1)) (* (cos th) (* a2 a2))) (sqrt 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4899924843993411,
    "avg_bits_err_output": 0.43412161876694827,
    "avg_bits_err_improve": 0.05587086563239285,
    "time": 24125.652587890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (* k -0.5)) (/ (sqrt (* 2.0 (* PI n))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.48712105639185577,
    "avg_bits_err_output": 0.38266583811874016,
    "avg_bits_err_improve": 0.1044552182731156,
    "time": 19942.21337890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (if (!= (+ (exp (* l -2.0)) (exp (fma l -1.0 l))) 0.0) (/ (- (exp (* l -4.0)) (pow (exp (fma l -1.0 l)) 2.0)) (+ (exp (* l -2.0)) (exp (fma l -1.0 l)))) (- (exp (* l -2.0)) (exp (fma l -1.0 l)))) (/ -1.0 (exp l)))) (cos (/ K 2.0))) U)",
    "output_parens": 32,
    "avg_bits_err_input": 16.93383418685015,
    "avg_bits_err_output": 16.94734511276174,
    "avg_bits_err_improve": -0.013510925911592864,
    "time": 28556.400634765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (if (!= (cos (- (* K (/ (+ m n) 2.0)) M)) 0.0) (log1p (expm1 (/ 1.0 (/ 1.0 (cos (- (* K (/ (+ m n) 2.0)) M)))))) (cos (- (* K (/ (+ m n) 2.0)) M))) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n))))))",
    "output_parens": 35,
    "avg_bits_err_input": 14.87102626627843,
    "avg_bits_err_output": 14.855573178456773,
    "avg_bits_err_improve": 0.015453087821656553,
    "time": 23264.260009765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.872313721875543,
    "avg_bits_err_output": 17.872313721875543,
    "avg_bits_err_improve": 0,
    "time": 40213.14013671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= l -5e+65) (* w0 (sqrt (- 1.0 (* (* D (/ (/ M 2.0) d)) (* (* D (/ (/ M 2.0) d)) (/ h l)))))) (if (<= l 1e-233) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))) (* w0 (sqrt (- 1.0 (* (* D (/ (/ M 2.0) d)) (* h (/ (* M (/ D d)) (+ l l)))))))))",
    "output_parens": 37,
    "avg_bits_err_input": 13.919590528764356,
    "avg_bits_err_output": 9.267743167513977,
    "avg_bits_err_improve": 4.651847361250379,
    "time": 25863.515380859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+135) (* c0 (* (sqrt (- (/ A l))) (sqrt (/ -1.0 V)))) (if (<= (* V l) -5e-188) (* c0 (if (!= (sqrt (+ (/ A (* l (+ V V))) (/ A (* l (+ V V))))) 0.0) (/ (+ (/ A (* l (+ V V))) (/ A (* l (+ V V)))) (sqrt (+ (/ A (* l (+ V V))) (/ A (* l (+ V V)))))) (sqrt (+ (/ A (* l (+ V V))) (/ A (* l (+ V V))))))) (if (<= (* V l) 0.0) (* c0 (* (sqrt (- (/ A l))) (sqrt (/ -1.0 V)))) (* c0 (sqrt (/ A (* V l)))))))",
    "output_parens": 62,
    "avg_bits_err_input": 19.01020085077524,
    "avg_bits_err_output": 13.04070027890709,
    "avg_bits_err_improve": 5.969500571868151,
    "time": 21522.885498046875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -3e+42) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* c0 (/ (/ d D) w)) (* D h))) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* c0 (/ (/ d D) w)) (* D h))) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M))))) (fma d (/ (* c0 (/ (/ d D) w)) (* D h)) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M)))))) (if (<= w 5e-73) (/ (/ (* c0 (if (!= (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) (+ (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) w) 2.0) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (* c0 (/ (/ d (* D w)) (* D h)))) (sqrt (- (pow (* d (* c0 (/ (/ d (* D w)) (* D h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* c0 (/ (/ d (* D w)) (* D h)))) (sqrt (- (pow (* d (* c0 (/ (/ d (* D w)) (* D h)))) 2.0) (* M M)))))) (fma d (* c0 (/ (/ d (* D w)) (* D h))) (sqrt (- (pow (* d (* c0 (/ (/ d (* D w)) (* D h)))) 2.0) (* M M))))))))",
    "output_parens": 170,
    "avg_bits_err_input": 59.29488111332215,
    "avg_bits_err_output": 28.532927969436216,
    "avg_bits_err_improve": 30.761953143885933,
    "time": 60804.79638671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 1e+291) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (* (/ (* M D) (+ d d)) (* (/ (* M D) (+ d d)) (* h (/ 0.5 l)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) INFINITY) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- 1.0 (* h (* (* 0.5 (/ D d)) (* M (/ (* M (/ D (* d 4.0))) l)))))) (* (sqrt (* d (/ d (* h l)))) (- 1.0 (* (* (/ M (+ l l)) (pow (/ (* D 0.5) d) 2.0)) (* h M))))))",
    "output_parens": 79,
    "avg_bits_err_input": 26.725104960433168,
    "avg_bits_err_output": 20.808261085924606,
    "avg_bits_err_improve": 5.916843874508562,
    "time": 47522.934326171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (- 0.5 (/ -0.5 (hypot 1.0 x))) 0.0) (/ (+ 0.25 (/ -0.25 (fma x x 1.0))) (- 0.5 (/ -0.5 (hypot 1.0 x)))) (- 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 33,
    "avg_bits_err_input": 15.265705062211147,
    "avg_bits_err_output": 14.759477848702488,
    "avg_bits_err_improve": 0.5062272135086587,
    "time": 21764.3662109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ 1.3333333333333333 (* PI (* (- 1.0 (* v v)) (sqrt (- 2.0 (* 6.0 (* v v)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9835490396778473,
    "avg_bits_err_output": 0.014151789890100096,
    "avg_bits_err_improve": 0.9693972497877472,
    "time": 4591.761474609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (+ 1.0 (* (* v v) -5.0)) (* PI (sqrt (fma -6.0 (* v v) 2.0)))) (- t (* v (* v t))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.44247189432537193,
    "avg_bits_err_output": 0.11223675239082125,
    "avg_bits_err_improve": 0.33023514193455067,
    "time": 23319.11962890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (fma v v -1.0) (/ (sqrt (- 2.0 (* v (* v 6.0)))) -4.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.013216520928207924,
    "avg_bits_err_output": 0.009198120312590145,
    "avg_bits_err_improve": 0.004018400615617779,
    "time": 4240.79833984375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5169218506131418,
    "avg_bits_err_output": 0.5169218506131418,
    "avg_bits_err_improve": 0,
    "time": 10928.9072265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.0931415881287134,
    "avg_bits_err_output": 2.075818467816123,
    "avg_bits_err_improve": 0.017323120312590312,
    "time": 21587.65869140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ Vef (+ mu EDonor)) Ec) KbT)))) (/ NaChar (+ 1.0 (pow (exp (/ (+ EAccept (- (+ Ev Vef) mu)) (+ KbT KbT))) 2.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.015361468716510129,
    "avg_bits_err_output": 0.016026709728371044,
    "avg_bits_err_improve": -0.0006652410118609155,
    "time": 11116.085693359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (fma b (+ (* b (* b b)) (* b (* a (+ a a)))) (+ (pow a 4.0) (* b (* b 4.0)))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.17933914418249194,
    "avg_bits_err_output": 0.06414340061561778,
    "avg_bits_err_improve": 0.11519574356687416,
    "time": 8435.32373046875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (+ (pow a 4.0) (* (* b b) (+ (* a a) (fma a a (* b b))))) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 27,
    "avg_bits_err_input": 0.18458191605492125,
    "avg_bits_err_output": 0.10112575890211503,
    "avg_bits_err_improve": 0.08345615715280622,
    "time": 20308.477783203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (* (* b b) (fma a a (* b b))) (fma a (* a (* b b)) (pow a 4.0))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.18646520187983545,
    "avg_bits_err_output": 0.1064202768783932,
    "avg_bits_err_improve": 0.08004492500144225,
    "time": 17609.616455078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.173163709861829,
    "avg_bits_err_output": 13.173163709861829,
    "avg_bits_err_improve": 0,
    "time": 16541.744384765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (- (+ (/ (expm1 (+ x x)) (expm1 x)) 1.0) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 40.89116367628887,
    "avg_bits_err_output": 0.05,
    "avg_bits_err_improve": 40.84116367628887,
    "time": 7123.187744140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (* -2.0 (- (/ (/ (pow (tan x) 2.0) 2.0) (+ x (tan x))) (* x (/ (/ x (+ x (tan x))) 2.0)))) (- x (tan x))))",
    "output_parens": 22,
    "avg_bits_err_input": 31.729140590893675,
    "avg_bits_err_output": 31.178467020031096,
    "avg_bits_err_improve": 0.5506735708625783,
    "time": 27353.091796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (exp (* 1.0 (log (- 0.0 b_2)))) a) (if (<= b_2 -2.1e-308) (- (+ (/ (sqrt (fma c (- a) (* b_2 b_2))) a) (/ b_2 (* a -2.0))) (- (/ b_2 (* a -2.0)))) (/ (if (!= (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))) 0.0) (* (/ c (- (- b_2) (sqrt (fma a (- c) (* b_2 b_2))))) a) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a)))",
    "output_parens": 43,
    "avg_bits_err_input": 33.53619996649882,
    "avg_bits_err_output": 20.443975908373147,
    "avg_bits_err_improve": 13.092224058125673,
    "time": 19704.86328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 33.7289563848553,
    "avg_bits_err_output": 19.51914510729495,
    "avg_bits_err_improve": 14.209811277560352,
    "time": 17586.989501953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (exp (* 1.0 (log1p (- (cos x))))) x) x)",
    "output_parens": 7,
    "avg_bits_err_input": 31.625737249144954,
    "avg_bits_err_output": 30.87600997706421,
    "avg_bits_err_improve": 0.7497272720807437,
    "time": 18698.77880859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (- (/ (pow (exp (/ (log1p x) n)) 2.0) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (/ (pow x (/ 2.0 n)) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 35,
    "avg_bits_err_input": 32.77697784492157,
    "avg_bits_err_output": 32.50318278955675,
    "avg_bits_err_improve": 0.27379505536481474,
    "time": 32954.897705078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (+ (log1p N) (- -1.0 (log N))) -1.0)",
    "output_parens": 5,
    "avg_bits_err_input": 30.06302376670628,
    "avg_bits_err_output": 30.06654976353246,
    "avg_bits_err_improve": -0.0035259968261804886,
    "time": 11687.796142578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (if (!= (/ x (+ x 1.0)) 0.0) (/ (- (* x (/ x (+ x 1.0))) x) (/ (fma x x x) (+ x 1.0))) (+ (/ x (+ x 1.0)) -1.0)) x)",
    "output_parens": 16,
    "avg_bits_err_input": 13.664943789160496,
    "avg_bits_err_output": 13.413806850889332,
    "avg_bits_err_improve": 0.25113693827116457,
    "time": 17980.60888671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))",
    "output_parens": 8,
    "avg_bits_err_input": 39.57246204492315,
    "avg_bits_err_output": 6.032140186867398,
    "avg_bits_err_improve": 33.54032185805575,
    "time": 24103.53369140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.527942284184142,
    "avg_bits_err_output": 30.222840666258705,
    "avg_bits_err_improve": 0.30510161792543755,
    "time": 14856.775634765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log (- 1.0 (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 30.226092642270725,
    "avg_bits_err_output": 30.230703990025983,
    "avg_bits_err_improve": -0.004611347755258066,
    "time": 21754.818603515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -1.32e+154) (/ (- (if (!= (- (sqrt (- (* b b) (if (!= (* a (* c -4.0)) 0.0) (* a (* c 4.0)) (* a (* c 4.0))))) b) 0.0) (/ (if (!= (* a (* c -4.0)) 0.0) (* a (* c 4.0)) (* a (* c 4.0))) (- b (sqrt (- (* b b) (if (!= (* a (* c -4.0)) 0.0) (* a (* c 4.0)) (* a (* c 4.0))))))) (+ b (sqrt (- (* b b) (if (!= (* a (* c -4.0)) 0.0) (* a (* c 4.0)) (* a (* c 4.0))))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 77,
    "avg_bits_err_input": 33.8680721684986,
    "avg_bits_err_output": 16.460874346016304,
    "avg_bits_err_improve": 17.407197822482296,
    "time": 24827.865478515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (* a -4.0) (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b))) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.8941878028341,
    "avg_bits_err_output": 22.059938862087876,
    "avg_bits_err_improve": 11.834248940746221,
    "time": 26366.929443359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (/ (/ (log1p (- x)) (log1p x)) (log1p x)) (/ 1.0 (log1p x)))",
    "output_parens": 9,
    "avg_bits_err_input": 61.33709469106678,
    "avg_bits_err_output": 0.03246485000288464,
    "avg_bits_err_improve": 61.3046298410639,
    "time": 15908.875732421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.0022783914742,
    "avg_bits_err_output": 44.23671744432036,
    "avg_bits_err_improve": 18.765560947153837,
    "time": 13763.79931640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(if (!= (- -2.0 (log (/ (- 1.0 eps) (- eps -1.0)))) 0.0) (- (/ (pow (+ 1.0 (log (/ (+ eps -1.0) (- -1.0 eps)))) 2.0) (- (log (/ (+ eps -1.0) (- -1.0 eps))) -2.0)) (/ 1.0 (- (log (/ (+ eps -1.0) (- -1.0 eps))) -2.0))) (log (/ (- 1.0 eps) (- eps -1.0))))",
    "output_parens": 30,
    "avg_bits_err_input": 58.44410861979138,
    "avg_bits_err_output": 58.447427596076814,
    "avg_bits_err_improve": -0.0033189762854348714,
    "time": 21830.25830078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ (/ (+ (/ (- x) (tan x)) 0.5) x) (/ 1.0 (+ x x)))",
    "output_parens": 8,
    "avg_bits_err_input": 59.86598605168939,
    "avg_bits_err_output": 59.85496525266563,
    "avg_bits_err_improve": 0.011020799023761185,
    "time": 31645.115234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ a b)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.25932700563275,
    "avg_bits_err_output": 29.174127042860317,
    "avg_bits_err_improve": 31.085199962772432,
    "time": 28397.091552734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.29180283119123,
    "avg_bits_err_output": 0.3900943609377705,
    "avg_bits_err_improve": 40.90170847025345,
    "time": 6403.348876953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.69584748524195,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.69584748524195,
    "time": 2831.5810546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.58006687886283,
    "avg_bits_err_output": 0.015464992043082168,
    "avg_bits_err_improve": 29.564601886819748,
    "time": 4474.91845703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (- (exp x) 2.0) (exp (- x))) 0.0) (/ (+ (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))) (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0)))) (- (- (exp x) 2.0) (exp (- x)))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 33,
    "avg_bits_err_input": 29.587006303554848,
    "avg_bits_err_output": 29.512066880920454,
    "avg_bits_err_improve": 0.07493942263439379,
    "time": 21976.070556640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (if (!= (- (/ 2.0 x) (/ 1.0 (+ 1.0 x))) 0.0) (/ 1.0 (/ 2.0 (- (/ 2.0 (+ 1.0 x)) (/ 4.0 x)))) (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x))) (/ 1.0 (- x 1.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 9.74572717208754,
    "avg_bits_err_output": 9.756174923006128,
    "avg_bits_err_improve": -0.010447750918588739,
    "time": 25516.549560546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (tan (+ x eps)) 0.0) (* (tan (+ x eps)) (- (/ (tan (+ x eps)) (tan (+ x eps))) (/ (tan x) (log1p (expm1 (tan (+ x eps))))))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 23,
    "avg_bits_err_input": 36.990941654153616,
    "avg_bits_err_output": 37.014603493252125,
    "avg_bits_err_improve": -0.023661839098508608,
    "time": 21058.328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.42149008764258,
    "avg_bits_err_output": 0.16681860937770432,
    "avg_bits_err_improve": 30.25467147826488,
    "time": 13829.362060546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.503821979855935,
    "avg_bits_err_output": 22.055776932350565,
    "avg_bits_err_improve": 15.44804504750537,
    "time": 20914.249755859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (+ (/ 1.0 (sqrt (+ 1.0 x))) (/ -1.0 (sqrt x))) (* (sqrt x) (/ -1.0 (sqrt x))))",
    "output_parens": 11,
    "avg_bits_err_input": 19.814181388769363,
    "avg_bits_err_output": 19.835337897558418,
    "avg_bits_err_improve": -0.02115650878905484,
    "time": 18462.642333984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (- (atan (+ N 1.0)) (+ (atan N) -1.0)) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 14.277424160347712,
    "avg_bits_err_output": 14.29006086692441,
    "avg_bits_err_improve": -0.012636706576698131,
    "time": 12578.174072265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 28.96638773513798,
    "avg_bits_err_output": 1.2500851671895141,
    "avg_bits_err_improve": 27.716302567948468,
    "time": 26045.5458984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (* (- m (* m m)) (- 1.0 m)) v) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.08487256701560164,
    "avg_bits_err_output": 0.07726936337891083,
    "avg_bits_err_improve": 0.007603203636690814,
    "time": 13705.7900390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b a) (/ (/ -1.0 b) a))",
    "output_parens": 4,
    "avg_bits_err_input": 16.225169185566404,
    "avg_bits_err_output": 0.267519720525782,
    "avg_bits_err_improve": 15.957649465040623,
    "time": 11503.246826171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (fma (sin (fma PI (/ angle 180.0) 1.0)) (sin 1.0) (* (cos (fma PI (/ angle 180.0) 1.0)) (cos 1.0)))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.348666461291202,
    "avg_bits_err_output": 20.38298063678371,
    "avg_bits_err_improve": -0.034314175492507815,
    "time": 41146.08447265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(/ (* (sin (* PI (/ (+ angle angle) 180.0))) (- (pow b 2.0) (pow a 2.0))) 1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 31.37059061946111,
    "avg_bits_err_output": 31.345136794159835,
    "avg_bits_err_improve": 0.025453825301276822,
    "time": 31261.3603515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (/ (+ (cos (- (* angle (/ PI 180.0)) (* PI 2.0))) (/ (+ (/ (+ (cos (- (/ (* PI angle) -180.0) (* PI 2.0))) (cos (fma angle (/ PI -180.0) (* PI 2.0)))) 2.0) (cos (- (* PI 2.0) (/ (* angle PI) -180.0)))) 2.0)) 2.0)) 2.0))",
    "output_parens": 33,
    "avg_bits_err_input": 20.541261682835103,
    "avg_bits_err_output": 20.585265716818782,
    "avg_bits_err_improve": -0.044004033983679136,
    "time": 41816.936279296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.18474279776851638,
    "avg_bits_err_output": 0.18260642424864698,
    "avg_bits_err_improve": 0.0021363735198693945,
    "time": 20393.587890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3180175992242749,
    "avg_bits_err_output": 0.317929261103917,
    "avg_bits_err_improve": 8.833812035791144e-05,
    "time": 17888.5234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13227124062518028,
    "avg_bits_err_output": 0.13227124062518028,
    "avg_bits_err_improve": 0,
    "time": 16526.666259765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.004589539228938,
    "avg_bits_err_output": 17.003400863830354,
    "avg_bits_err_improve": 0.001188675398584138,
    "time": 37830.58740234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.31160300809916,
    "avg_bits_err_output": 0.16246485000288458,
    "avg_bits_err_improve": 52.14913815809628,
    "time": 29574.5615234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 28.508292504147214,
    "avg_bits_err_output": 0.33564248282484993,
    "avg_bits_err_improve": 28.172650021322365,
    "time": 26003.779052734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.87748042462839,
    "avg_bits_err_output": 0.2377009406309494,
    "avg_bits_err_improve": 43.63977948399744,
    "time": 27376.732666015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.88879999874394,
    "avg_bits_err_output": 22.03698005171859,
    "avg_bits_err_improve": 11.851819947025351,
    "time": 23705.26416015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (expm1 (log1p (cos (- lambda1 lambda2))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.8908471282957333,
    "avg_bits_err_output": 0.9026760529839578,
    "avg_bits_err_improve": -0.011828924688224496,
    "time": 27609.02294921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (/ (+ -1.0 (/ 4.0 (+ (exp (* x -4.0)) (+ 1.0 (* 2.0 (exp (* -2.0 x))))))) (- (exp (log (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 2.0))) 1.0)) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 30,
    "avg_bits_err_input": 29.039778307518205,
    "avg_bits_err_output": 29.014467461350566,
    "avg_bits_err_improve": 0.025310846167638346,
    "time": 20222.841552734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (* (exp x) (if (!= (+ (exp (fma x -1.0 x)) (exp (* x -2.0))) 0.0) (/ (if (!= (+ (pow (exp (fma x -1.0 x)) 2.0) (exp (* x -4.0))) 0.0) (/ (if (!= (+ (pow (exp (fma x -1.0 x)) 4.0) (exp (* x -8.0))) 0.0) (/ (- (pow (exp (fma x -1.0 x)) 8.0) (exp (* x -16.0))) (+ (pow (exp (fma x -1.0 x)) 4.0) (exp (* x -8.0)))) (- (pow (exp (fma x -1.0 x)) 4.0) (exp (* x -8.0)))) (+ (pow (exp (fma x -1.0 x)) 2.0) (exp (* x -4.0)))) (- (pow (exp (fma x -1.0 x)) 2.0) (exp (* x -4.0)))) (+ (exp (fma x -1.0 x)) (exp (* x -2.0)))) (- (exp (fma x -1.0 x)) (exp (* x -2.0))))) (+ (exp x) (exp (- x))))",
    "output_parens": 73,
    "avg_bits_err_input": 58.189138759505,
    "avg_bits_err_output": 58.15997080822109,
    "avg_bits_err_improve": 0.029167951283909588,
    "time": 23050.3330078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x 2.0)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 58.02941010114313,
    "avg_bits_err_output": 0.052896240625180294,
    "avg_bits_err_improve": 57.97651386051795,
    "time": 7435.04443359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008094360937770434,
    "avg_bits_err_output": 0.008094360937770434,
    "avg_bits_err_improve": 0,
    "time": 2890.1220703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (- (* x x) 1.0))) 5e+150) (log1p (+ (+ x (sqrt (fma x x -1.0))) -1.0)) (log1p (+ (+ x 0.0) -1.0)))",
    "output_parens": 14,
    "avg_bits_err_input": 32.07325,
    "avg_bits_err_output": 22.002329859288068,
    "avg_bits_err_improve": 10.070920140711934,
    "time": 5070.823486328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(/ (if (!= (- -2.0 (log (/ (- -1.0 x) (- x 1.0)))) 0.0) (/ (+ -1.0 (/ (* (+ 1.0 (log (/ (- -1.0 x) (+ -1.0 x)))) (+ (log (/ (- -1.0 x) (+ -1.0 x))) (+ (log (/ (- -1.0 x) (+ -1.0 x))) 2.0))) 2.0)) (+ (log (/ (- -1.0 x) (- x 1.0))) 2.0)) (log (/ (- -1.0 x) (- x 1.0)))) 2.0)",
    "output_parens": 36,
    "avg_bits_err_input": 58.43124789208118,
    "avg_bits_err_output": 58.44176710665627,
    "avg_bits_err_improve": -0.01051921457509053,
    "time": 21531.429443359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04369812031259015,
    "avg_bits_err_output": 0.042863361324451066,
    "avg_bits_err_improve": 0.0008347589881390824,
    "time": 2737.480224609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (- (exp (log1p (cos (atan (/ eh (* ew (tan t))))))) 1.0)) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.13021936093777042,
    "avg_bits_err_output": 0.13296936093777043,
    "avg_bits_err_improve": -0.0027500000000000024,
    "time": 24923.343994140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (- (* (exp (log1p (cos (atan (* eh (/ (tan (- t)) ew)))))) (* ew (cos t))) (* ew (cos t))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.122625,
    "avg_bits_err_output": 0.1562830828133113,
    "avg_bits_err_improve": -0.0336580828133113,
    "time": 18393.541748046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* (* (- lambda1 lambda2) (cos (/ phi1 2.0))) (cos (/ phi2 2.0))) (* (- lambda1 lambda2) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0))))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 38.849716132013,
    "avg_bits_err_output": 0.13009651281564025,
    "avg_bits_err_improve": 38.71961961919736,
    "time": 28538.162353515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.657914333518113,
    "avg_bits_err_output": 14.657914333518113,
    "avg_bits_err_improve": 0,
    "time": 5575.608642578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (if (!= (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos theta) (cos phi1))))))) 0.0) (/ (fma (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos theta) (cos phi1))))))) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos theta) (cos phi1))))))) (* (- (cos delta)) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos theta) (cos phi1))))))))) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos theta) (cos phi1)))))))) (fma (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos theta) (cos phi1)))))) (- (cos delta)))))))",
    "output_parens": 89,
    "avg_bits_err_input": 0.16004668487053925,
    "avg_bits_err_output": 0.16415086467091067,
    "avg_bits_err_improve": -0.004104179800371421,
    "time": 39694.900634765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.33944271674547,
    "avg_bits_err_output": 0.17096729375396633,
    "avg_bits_err_improve": 52.1684754229915,
    "time": 26780.669677734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.646493578571594,
    "avg_bits_err_output": 0.3396686109521939,
    "avg_bits_err_improve": 28.3068249676194,
    "time": 27122.967529296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* a -3.0)))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a -3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 43.89042012060226,
    "avg_bits_err_output": 0.23140150469462112,
    "avg_bits_err_improve": 43.659018615907634,
    "time": 27872.3642578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (/ (* (* a -3.0) (/ c (- b (- (sqrt (fma b b (* a (* c -3.0)))))))) 1.0) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 33.93005751268642,
    "avg_bits_err_output": 22.094161346040185,
    "avg_bits_err_improve": 11.835896166646233,
    "time": 24883.12646484375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.362692445980375,
    "avg_bits_err_output": 13.362692445980375,
    "avg_bits_err_improve": 0,
    "time": 36197.873779296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.32578772281659,
    "avg_bits_err_output": 0.5213110932762175,
    "avg_bits_err_improve": 28.80447662954037,
    "time": 19619.540771484375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(if (!= (- (/ -1.0 (+ x -1.0)) (/ x (- -1.0 x))) 0.0) (/ (- (/ 1.0 (pow (+ x -1.0) 2.0)) (pow (/ x (+ 1.0 x)) 2.0)) (+ (/ 1.0 (+ x -1.0)) (/ x (- -1.0 x)))) (+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.011125,
    "avg_bits_err_output": 0.01918892538812295,
    "avg_bits_err_improve": -0.00806392538812295,
    "time": 8653.46923828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (if (!= (pow (/ -1.0 (+ -1.0 x)) 2.0) 0.0) (/ (fma (pow (/ -1.0 (+ -1.0 x)) 2.0) (- (/ -1.0 (fma x x -1.0))) (- (pow (/ -1.0 (+ -1.0 x)) 4.0))) (pow (/ -1.0 (+ -1.0 x)) 2.0)) (- (/ -1.0 (pow (+ -1.0 x) 2.0)) (/ -1.0 (fma x x -1.0)))) (/ 1.0 (+ x -1.0)))",
    "output_parens": 29,
    "avg_bits_err_input": 14.143255548844879,
    "avg_bits_err_output": 14.065574631162876,
    "avg_bits_err_improve": 0.07768091768200236,
    "time": 21808.670654296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -8.8e-299) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* F -2.0))) (/ (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt F) (sqrt (* (- (pow B 2.0) (* A (* C 4.0))) -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.36936568687435,
    "avg_bits_err_output": 46.76939782140732,
    "avg_bits_err_improve": 5.599967865467036,
    "time": 40868.95849609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= B -2.4e+55) (* 180.0 (/ (atan (fma C (/ 1.0 B) (* (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) (/ -1.0 B)))) PI)) (if (<= B -6.2e-212) (* (atan (* (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0)) (- (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (/ -1.0 B))) (/ 180.0 PI)) (if (<= B 1.7e-147) (* (atan (* (- (sqrt (+ (* (- C A) (- C A)) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI)) (if (<= B 7.4e+50) (* (atan (* (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0)) (- (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (/ -1.0 B))) (/ 180.0 PI)) (* 180.0 (/ (atan (fma C (/ 1.0 B) (* (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) (/ -1.0 B)))) PI))))))",
    "output_parens": 109,
    "avg_bits_err_input": 29.552095268521562,
    "avg_bits_err_output": 29.025594478725147,
    "avg_bits_err_improve": 0.5265007897964153,
    "time": 26644.256103515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (pow B 2.0) 5.2e-279) (/ (* (sqrt (* F (- (pow B 2.0) (* A (* 4.0 C))))) (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* A (* 4.0 C)) (pow B 2.0))) (if (<= (pow B 2.0) 50000000000.0) (* (sqrt (* 2.0 F)) (/ (sqrt (* (- (pow B 2.0) (* A (* 4.0 C))) (+ C (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A)))) (- (* A (* 4.0 C)) (pow B 2.0)))) (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (/ (* (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (sqrt F)) (- (* A (* C 4.0)) (pow B 2.0))))))",
    "output_parens": 70,
    "avg_bits_err_input": 52.91519349146561,
    "avg_bits_err_output": 49.65023678061093,
    "avg_bits_err_improve": 3.264956710854676,
    "time": 47260.621337890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (cbrt (/ g (+ a a))) 0.0) (/ 1.0 (/ 1.0 (cbrt (/ g (+ a a))))) (cbrt (/ g (+ a a))))",
    "output_parens": 13,
    "avg_bits_err_input": 16.01564985920578,
    "avg_bits_err_output": 16.050518874732223,
    "avg_bits_err_improve": -0.03486901552644284,
    "time": 19579.03125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -5e-288) (+ (* (cbrt (/ 0.5 a)) (cbrt (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (cbrt (* (/ 0.5 a) (if (!= (- (sqrt (* (- g h) (+ g h))) g) 0.0) (/ (* h h) (- (sqrt (* (- g h) (+ g h))) g)) (- (- g) (sqrt (* (- g h) (+ g h)))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- g (- (sqrt (- (* g g) (* h h))))) 0.0) (* h (/ h (- (- g) (sqrt (- (* g g) (* h h)))))) (- (sqrt (- (* g g) (* h h))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 71,
    "avg_bits_err_input": 35.977806423664475,
    "avg_bits_err_output": 5.384974014289049,
    "avg_bits_err_improve": 30.592832409375426,
    "time": 34298.689697265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9911727453198026,
    "avg_bits_err_output": 0.9777218046888523,
    "avg_bits_err_improve": 0.013450940630950314,
    "time": 7472.185302734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (+ (+ (exp a) 1.0) -1.0) (+ (exp a) (exp b)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.9006462406251803,
    "avg_bits_err_output": 1.0188299995149501,
    "avg_bits_err_improve": -0.11818375888976984,
    "time": 3833.499267578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-299) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e-287) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+208) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.103851474437171,
    "avg_bits_err_output": 3.210259701041634,
    "avg_bits_err_improve": 7.893591773395537,
    "time": 12220.63232421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5259289385955593,
    "avg_bits_err_output": 0.434375,
    "avg_bits_err_improve": 0.09155393859555933,
    "time": 12654.79931640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.1) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 100000000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.251528206832646,
    "avg_bits_err_output": 0.032629685183876815,
    "avg_bits_err_improve": 53.21889852164877,
    "time": 12086.403076171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.740628981971858,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.740628981971858,
    "time": 1981.881591796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.014,
    "avg_bits_err_improve": 0,
    "time": 3905.478515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1540.657958984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.582187331450612,
    "avg_bits_err_output": 0.6024493636807774,
    "avg_bits_err_improve": 11.979737967769834,
    "time": 23601.868896484375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (+ (* x1 (/ (* (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) 4.0) (fma x1 x1 1.0))) (* x1 -6.0))) (/ (fma (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (* (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* x1 -2.0)) (* (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (fma (- (fma 3.0 (* x1 x1) (* 2.0 x2))) (* x1 2.0) (* (fma 3.0 (* x1 x1) (* 2.0 x2)) (* x1 2.0))))) (- -1.0 (* x1 x1))))))))))",
    "output_parens": 71,
    "avg_bits_err_input": 0.5148986108851147,
    "avg_bits_err_output": 0.2506498056762933,
    "avg_bits_err_improve": 0.2642488052088214,
    "time": 72392.77758789062,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- v) (+ t1 u)) (/ t1 (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.313158470463996,
    "avg_bits_err_output": 1.409984404663397,
    "avg_bits_err_improve": 16.9031740658006,
    "time": 10254.123291015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2306079264948677,
    "avg_bits_err_output": 0.2306079264948677,
    "avg_bits_err_improve": 0,
    "time": 9529.6982421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2326.877197265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* (/ (- (/ -0.5 b) (/ -0.5 a)) (- b a)) (/ PI (+ b a)))",
    "output_parens": 8,
    "avg_bits_err_input": 14.656241829431005,
    "avg_bits_err_output": 0.28152932501298045,
    "avg_bits_err_improve": 14.374712504418024,
    "time": 16424.481201171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (if (!= (* (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x))) 0.0) (/ 1.0 (/ (exp (- (- (* eps x) x))) (+ 1.0 (/ 1.0 eps)))) (* (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x)))) (/ (/ 1.0 eps) (exp (* x (+ 1.0 eps))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 35,
    "avg_bits_err_input": 29.178838880393464,
    "avg_bits_err_output": 24.65576788906427,
    "avg_bits_err_improve": 4.523070991329195,
    "time": 28383.59326171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ 2.0 (+ t (/ t t))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.0125,
    "avg_bits_err_output": 0.014,
    "avg_bits_err_improve": -0.0014999999999999996,
    "time": 7475.545166015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.01725,
    "avg_bits_err_output": 0.01725,
    "avg_bits_err_improve": 0,
    "time": 10459.65576171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ (* (/ (* 4.0 t) (+ t 1.0)) t) (+ 1.0 t))) (+ 2.0 (/ (* (/ (* 4.0 t) (+ t 1.0)) t) (+ 1.0 t))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.04275,
    "avg_bits_err_output": 0.082125,
    "avg_bits_err_improve": -0.039375,
    "time": 11905.4111328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3984.4736328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8215.679931640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2820.357421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.843910449075863,
    "avg_bits_err_output": 0.249875,
    "avg_bits_err_improve": 7.594035449075863,
    "time": 31257.19482421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.7158885577526855,
    "avg_bits_err_output": 7.7158885577526855,
    "avg_bits_err_improve": 0,
    "time": 17986.622314453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.11846614546361,
    "avg_bits_err_output": 0.03714616657432164,
    "avg_bits_err_improve": 16.08131997888929,
    "time": 13458.29541015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (cos x) 0.0) (* (pow (cos x) 2.0) (/ (pow (pow (exp x) 10.0) x) (cos x))) (* (pow (exp (* x 10.0)) x) (cos x)))",
    "output_parens": 16,
    "avg_bits_err_input": 3.5323393279850985,
    "avg_bits_err_output": 2.075083203331266,
    "avg_bits_err_improve": 1.4572561246538327,
    "time": 17167.924072265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -1e+55) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 2e-31) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 15.29409370700576,
    "avg_bits_err_output": 0.024573120312590145,
    "avg_bits_err_improve": 15.26952058669317,
    "time": 8875.051513671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.96791563568305,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.96791563568305,
    "time": 6178.116943359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.30441054977922,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 38.30403554977922,
    "time": 4340.9248046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2985,
    "avg_bits_err_improve": 63.7015,
    "time": 20327.45361328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ (* t 1.6e-47) 4e-16) t)",
    "output_parens": 3,
    "avg_bits_err_input": 61.843251042012014,
    "avg_bits_err_output": 0.3566981203125902,
    "avg_bits_err_improve": 61.48655292169942,
    "time": 15748.63671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (* a -4.0) (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b))) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.8941878028341,
    "avg_bits_err_output": 22.059938862087876,
    "avg_bits_err_improve": 11.834248940746221,
    "time": 29500.208251953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.88879999874394,
    "avg_bits_err_output": 22.03698005171859,
    "avg_bits_err_improve": 11.851819947025351,
    "time": 25999.93701171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2814.2392578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.16383456716739,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 40.15370956716739,
    "time": 7563.845947265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.353977514116686,
    "avg_bits_err_output": 20.353977514116686,
    "avg_bits_err_improve": 0,
    "time": 7480.17626953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6186085787196505,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6186085787196505,
    "time": 6075.66943359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.036,
    "time": 8650.130615234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ a b)) (* a (+ a b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021969360937770434,
    "avg_bits_err_output": 0.01575,
    "avg_bits_err_improve": 0.006219360937770434,
    "time": 3812.203369140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.01275,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 0.0013749999999999995,
    "time": 1781.650390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00025,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0,
    "time": 1683.499267578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3988729328161961,
    "avg_bits_err_output": 0.240875,
    "avg_bits_err_improve": 0.15799793281619612,
    "time": 6397.520263671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (* (cos (+ x x)) 0.5) 0.0) (/ (- (* 0.5 (* (cos (+ x x)) 0.5)) (* (* (cos (+ x x)) 0.5) (* (cos (+ x x)) 0.5))) (* (cos (+ x x)) 0.5)) (- 0.5 (* (cos (+ x x)) 0.5))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 34,
    "avg_bits_err_input": 29.483744802675492,
    "avg_bits_err_output": 29.439917223302043,
    "avg_bits_err_improve": 0.043827579373449055,
    "time": 12157.110107421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.967283559370152,
    "avg_bits_err_output": 0.29094812031259015,
    "avg_bits_err_improve": 24.676335439057564,
    "time": 12395.61669921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (- (* x x) (pow (sin x) 2.0)) (fma (- (sin x)) (sin x) (pow (sin x) 2.0))) 0.0) (/ (- (pow (- (* x x) (pow (sin x) 2.0)) 2.0) (* (fma (- (sin x)) (sin x) (pow (sin x) 2.0)) (/ (fma (sin x) (- (sin x)) (pow (sin x) 2.0)) 2.0))) (- (if (!= (pow (sin x) 2.0) 0.0) (/ (- (* (* x x) (pow (sin x) 2.0)) (pow (sin x) 4.0)) (pow (sin x) 2.0)) (- (* x x) (pow (sin x) 2.0))) (fma (- (sin x)) (sin x) (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 74,
    "avg_bits_err_input": 30.077157344841027,
    "avg_bits_err_output": 29.974147161273546,
    "avg_bits_err_improve": 0.1030101835674806,
    "time": 38316.374755859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00764624062518029,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.00652124062518029,
    "time": 2977.5498046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 2e-231) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* (/ (- 1.0 (pow (+ (/ i n) 1.0) n)) i) (/ -200.0 (/ 2.0 n))))",
    "output_parens": 23,
    "avg_bits_err_input": 47.686514191116316,
    "avg_bits_err_output": 13.18205775185164,
    "avg_bits_err_improve": 34.50445643926467,
    "time": 24379.291259765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) -2e+177) (+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 1e-173) (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 26.1341579976068,
    "avg_bits_err_output": 22.828184262187495,
    "avg_bits_err_improve": 3.305973735419304,
    "time": 15301.830078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* b (/ c (fma c c (* d d)))) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.197595971955746,
    "avg_bits_err_output": 23.080880370750236,
    "avg_bits_err_improve": 3.1167156012055095,
    "time": 15240.0458984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (+ (* ux (- maxCos)) ux))",
    "output_parens": 4,
    "avg_bits_err_input": 0.03375,
    "avg_bits_err_output": 0.023450605288241753,
    "avg_bits_err_improve": 0.01029939471175825,
    "time": 7812.9833984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ ux (+ -1.0 (- (+ 1.0 (* ux (* maxCos (- ux (fma ux maxCos 1.0))))) (* ux (* (+ maxCos -1.0) (- 1.0 ux))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.703806796572488,
    "avg_bits_err_output": 12.017448152635671,
    "avg_bits_err_improve": 1.686358643936817,
    "time": 31908.99365234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (- 1.0 (* ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))) 0.0) (/ (* (fma (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (- (* ux ux) (+ ux ux))) (+ (* ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))) -1.0)) (- 1.0 (* ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))) (+ ux (- (- ux (* ux ux)) (* ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 13.741929338666584,
    "avg_bits_err_output": 0.3236512145392121,
    "avg_bits_err_improve": 13.418278124127372,
    "time": 34035.376708984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) xi) (fma (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (- maxCos (* ux maxCos)) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.33763074281731875,
    "avg_bits_err_output": 0.33065201299150354,
    "avg_bits_err_improve": 0.006978729825815211,
    "time": 45046.699951171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax)))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.1906883504838014,
    "avg_bits_err_output": 0.1908133504838014,
    "avg_bits_err_improve": -0.000125000000000014,
    "time": 27291.807373046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (/ (+ (* (/ (/ u1 (- 1.0 u1)) 2.0) (/ (/ u1 (- 1.0 u1)) 2.0)) (* (/ (/ u1 (- 1.0 u1)) 2.0) (/ (/ u1 (- 1.0 u1)) 2.0))) (/ (/ u1 (- 1.0 u1)) 2.0)) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 30,
    "avg_bits_err_input": 0.5439826908594201,
    "avg_bits_err_output": 0.555433111060566,
    "avg_bits_err_improve": -0.01145042020114595,
    "time": 23796.023193359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (log (exp (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3170521316007832,
    "avg_bits_err_output": 0.3196370941015044,
    "avg_bits_err_improve": -0.0025849625007212107,
    "time": 25480.682861328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(+ (* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))) (fma (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)) (* s (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))))",
    "output_parens": 60,
    "avg_bits_err_input": 0.33130660728913075,
    "avg_bits_err_output": 0.33276365068087543,
    "avg_bits_err_improve": -0.0014570433917446834,
    "time": 33677.390380859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.061751992049796756,
    "avg_bits_err_output": 0.04154837748020238,
    "avg_bits_err_improve": 0.020203614569594373,
    "time": 11426.01953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (+ (exp (/ (fabs x) (- s))) 1.0)) (fma s (exp (/ (fabs x) (- s))) s))",
    "output_parens": 16,
    "avg_bits_err_input": 0.15397063354866408,
    "avg_bits_err_output": 0.13114337421793804,
    "avg_bits_err_improve": 0.022827259330726046,
    "time": 18843.0859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.648488859115783,
    "avg_bits_err_output": 0.648488859115783,
    "avg_bits_err_improve": 0,
    "time": 21245.33544921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (- (exp (/ -2.0 v)) (* u (exp (/ -2.0 v)))) u)) 1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.1675748508106349,
    "avg_bits_err_output": 0.1686501848340153,
    "avg_bits_err_improve": -0.0010753340233804198,
    "time": 19947.0068359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.4634390628625606,
    "avg_bits_err_output": 2.461625047994461,
    "avg_bits_err_improve": 0.0018140148680996226,
    "time": 37460.8935546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ (/ 0.5 v) (* (exp (* sinTheta_i (/ sinTheta_O v))) (sinh (/ 1.0 v)))) (* cosTheta_O (/ cosTheta_i v)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.47404769640329625,
    "avg_bits_err_output": 0.40687812930775485,
    "avg_bits_err_improve": 0.0671695670955414,
    "time": 28925.365966796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.1179853212986712,
    "avg_bits_err_output": 0.08395004935343015,
    "avg_bits_err_improve": 0.03403527194524106,
    "time": 12419.16162109375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (+ (* alpha alpha) -1.0) (log (pow (* alpha alpha) PI))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.47274946954319436,
    "avg_bits_err_output": 0.4252315136027027,
    "avg_bits_err_improve": 0.04751795594049163,
    "time": 23842.21630859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* 3.0 (* s (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)))))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3164124899728602,
    "avg_bits_err_output": 1.2288148008499549,
    "avg_bits_err_improve": 0.08759768912290533,
    "time": 23898.60205078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ (/ 2.0 (/ 2.0 (- 1.0 (* 4.0 u)))) (log (+ 1.0 (expm1 (pow (+ 1.0 (* u -4.0)) 2.0)))))) s) 2.0) (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 12.394417548115204,
    "avg_bits_err_output": 11.539929279386723,
    "avg_bits_err_improve": 0.8544882687284812,
    "time": 24159.74853515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (* 2.0 PI)))) (/ (* 1.5 (/ (exp (/ r (* -3.0 s))) s)) (* PI 12.0))) r)",
    "output_parens": 16,
    "avg_bits_err_input": 0.1410571449845021,
    "avg_bits_err_output": 0.14310077581427777,
    "avg_bits_err_improve": -0.0020436308297756833,
    "time": 18483.876220703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8889425159661124,
    "avg_bits_err_output": 0.7110059506837316,
    "avg_bits_err_improve": 0.17793656528238078,
    "time": 31670.021240234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) cosTheta) (sqrt PI)) (exp (* (- cosTheta) cosTheta)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6715434552179841,
    "avg_bits_err_output": 0.5053896911196913,
    "avg_bits_err_improve": 0.16615376409829274,
    "time": 23087.89208984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (if (!= (* 2.0 (* PI u2)) 0.0) (* (* PI (* PI (* u2 4.0))) (/ u2 (* 2.0 (* PI u2)))) (* 2.0 (* PI u2)))))",
    "output_parens": 19,
    "avg_bits_err_input": 13.621784274776658,
    "avg_bits_err_output": 0.6161260430718272,
    "avg_bits_err_improve": 13.005658231704832,
    "time": 22409.712158203125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(fma (sqrt (- (log1p (- u1)))) (* 2.0 (cos (* u2 (* PI -2.0)))) (- (* (sqrt (- (log1p (- u1)))) (cos (* u2 (* PI -2.0))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.665214078245482,
    "avg_bits_err_output": 0.34592216296354905,
    "avg_bits_err_improve": 13.319291915281934,
    "time": 21055.73876953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* (- alpha) alpha) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.170012526780337,
    "avg_bits_err_output": 0.32003552656439316,
    "avg_bits_err_improve": 13.849977000215944,
    "time": 14386.721435546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ (/ cos2phi alphax) (- alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.597309665124838,
    "avg_bits_err_output": 0.5140621588863046,
    "avg_bits_err_improve": 12.083247506238534,
    "time": 17666.84814453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -2e+25) (- (* PI l) 0.0) (if (<= (* PI l) 20000000.0) (- (* PI l) (/ (/ (tan (expm1 (log1p (* PI l)))) F) F)) (- (* PI l) 0.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 16.6436605511083,
    "avg_bits_err_output": 1.4990293762026428,
    "avg_bits_err_improve": 15.144631174905658,
    "time": 20249.759033203125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.20960112287783922,
    "avg_bits_err_output": 0.14833928068970825,
    "avg_bits_err_improve": 0.061261842188130966,
    "time": 14441.96875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.19585464388637,
    "avg_bits_err_output": 10.139288202831374,
    "avg_bits_err_improve": 3.056566441054997,
    "time": 22033.2119140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* (* PI f) -0.5))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0))",
    "output_parens": 31,
    "avg_bits_err_input": 61.58779739507401,
    "avg_bits_err_output": 1.8773656009898319,
    "avg_bits_err_improve": 59.71043179408418,
    "time": 58954.750244140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.70191322909703,
    "avg_bits_err_output": 33.37680284899168,
    "avg_bits_err_improve": 9.32511038010535,
    "time": 25980.4892578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin ky) (/ (sin th) (hypot (sin kx) (sin ky))))",
    "output_parens": 7,
    "avg_bits_err_input": 4.202135922791699,
    "avg_bits_err_output": 0.2733659781302282,
    "avg_bits_err_improve": 3.928769944661471,
    "time": 31803.07421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (log (+ 1.0 (expm1 (/ 1.0 (sqrt (+ (pow (* (* l (/ 2.0 Om)) (sin ky)) 2.0) (+ 1.0 (pow (* (* l (/ 2.0 Om)) (sin kx)) 2.0)))))))) 0.5)))",
    "output_parens": 20,
    "avg_bits_err_input": 1.060151335454401,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 1.053026335454401,
    "time": 14002.544677734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (/ (* Om (/ Om Omc)) Omc)) (+ 1.0 (* 2.0 (* (/ t l) (/ t l)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.389237730312896,
    "avg_bits_err_output": 10.389362730312898,
    "avg_bits_err_improve": -0.0001250000000023732,
    "time": 17897.140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -5e-310) (* (sqrt (* (* 2.0 n) (- (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- U))) (* (sqrt (* 2.0 (* n (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt U)))",
    "output_parens": 32,
    "avg_bits_err_input": 34.559575328156924,
    "avg_bits_err_output": 25.31073411247885,
    "avg_bits_err_improve": 9.248841215678073,
    "time": 39397.71533203125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (tan k) (/ (sin k) l)) (* (/ k t) (/ (* (/ k t) (pow t 3.0)) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 47.90102348639842,
    "avg_bits_err_output": 31.049288671541703,
    "avg_bits_err_improve": 16.85173481485672,
    "time": 47837.12939453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (pow t 3.0) (/ (sin k) l)) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (tan k) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.68437030765328,
    "avg_bits_err_output": 26.607973675675993,
    "avg_bits_err_improve": 6.076396631977289,
    "time": 23162.414794921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (/ (+ (fma a1 a1 (* a2 a2)) (* a1 a1)) (* (sqrt 2.0) 2.0)) (/ (* a2 a2) (* (sqrt 2.0) 2.0))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.5266481234615706,
    "avg_bits_err_output": 0.49543082970760366,
    "avg_bits_err_improve": 0.03121729375396698,
    "time": 22948.79248046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* 2.0 (* PI n)) (* k -0.5)) (sqrt (* 2.0 (* PI n)))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5506039723449057,
    "avg_bits_err_output": 0.4176032930769653,
    "avg_bits_err_improve": 0.13300067926794035,
    "time": 20412.3095703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(fma (* (exp l) (if (!= (+ (exp (fma l -1.0 l)) (exp (* l -2.0))) 0.0) (/ (if (!= (+ (pow (exp (fma l -1.0 l)) 2.0) (exp (* l -4.0))) 0.0) (/ (- (expm1 (* l -8.0))) (+ (pow (exp (fma l -1.0 l)) 2.0) (exp (* l -4.0)))) (- (pow (exp (fma l -1.0 l)) 2.0) (exp (* l -4.0)))) (+ (exp (fma l -1.0 l)) (exp (* l -2.0)))) (- (exp (fma l -1.0 l)) (exp (* l -2.0))))) (* J (cos (/ K 2.0))) U)",
    "output_parens": 48,
    "avg_bits_err_input": 17.57793623564195,
    "avg_bits_err_output": 0.13616317382805684,
    "avg_bits_err_improve": 17.441773061813894,
    "time": 32463.195556640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= m -9.6e+45) (* (cos (- (/ (if (!= (* K m) 0.0) (* m (* K (* (+ m n) (- (exp (log1p (/ K (* K m)))) 1.0)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (if (<= m 5e-16) (* (cos (- (/ (if (!= (* K n) 0.0) (if (!= (/ (/ 1.0 n) K) 0.0) (/ (/ (/ (+ n m) n) 1.0) (/ (/ 1.0 n) K)) (* (* K n) (* (+ n m) (/ K (* K n))))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K m) 0.0) (* m (* K (* (+ m n) (- (exp (log1p (/ K (* K m)))) 1.0)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))))",
    "output_parens": 95,
    "avg_bits_err_input": 15.525022680929563,
    "avg_bits_err_output": 6.354200508319822,
    "avg_bits_err_improve": 9.170822172609741,
    "time": 23570.674560546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (hypot 1.0 (/ U (* (cos (/ K 2.0)) (* 2.0 J)))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.301167481250364,
    "avg_bits_err_output": 8.30354248125036,
    "avg_bits_err_improve": 9.997625000000003,
    "time": 27138.75244140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= l 1e-101) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))) (if (<= l 1e+293) (* w0 (sqrt (- 1.0 (* (* D (/ (/ M 2.0) d)) (* (* D (/ (/ M 2.0) d)) (/ h l)))))) (* w0 (sqrt (- 1.0 (* (/ (* (* D h) (* M (/ (/ M d) (* 2.0 d)))) 2.0) (/ D l)))))))",
    "output_parens": 37,
    "avg_bits_err_input": 14.097235306350637,
    "avg_bits_err_output": 10.00466323096134,
    "avg_bits_err_improve": 4.092572075389297,
    "time": 25117.5458984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -2e+174) (* c0 (* (sqrt (- (/ A l))) (sqrt (/ -1.0 V)))) (if (<= (* V l) -4e-21) (* c0 (sqrt (if (!= (/ A (* l V)) 0.0) (/ 1.0 (/ 1.0 (/ A (* l V)))) (/ A (* l V))))) (if (<= (* V l) 0.0) (* c0 (* (sqrt (/ A V)) (sqrt (/ 1.0 l)))) (* c0 (* (sqrt (/ (/ 2.0 V) (+ l l))) (sqrt A))))))",
    "output_parens": 41,
    "avg_bits_err_input": 18.458718662940683,
    "avg_bits_err_output": 9.931546455957093,
    "avg_bits_err_improve": 8.52717220698359,
    "time": 22405.3115234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -5.5e+63) (* c0 (/ (if (!= (- (* d (* (/ (/ d w) (* h D)) (/ c0 D))) (sqrt (- (pow (* d (* (/ (/ d w) (* h D)) (/ c0 D))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* (/ (/ d w) (* h D)) (/ c0 D))) (sqrt (- (pow (* d (* (/ (/ d w) (* h D)) (/ c0 D))) 2.0) (* M M)))))) (fma d (* (/ (/ d w) (* h D)) (/ c0 D)) (sqrt (- (pow (* d (* (/ (/ d w) (* h D)) (/ c0 D))) 2.0) (* M M))))) (+ w w))) (if (<= w 9.5e+72) (* c0 (/ (if (!= (- (* d (* (/ (/ d w) (* h D)) (/ c0 D))) (sqrt (- (pow (* d (* (/ (/ d w) (* h D)) (/ c0 D))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* (/ (/ d w) (* h D)) (/ c0 D))) (sqrt (* (+ M (* d (/ (* (/ c0 D) (/ d (* w h))) D))) (- (* d (/ (* (/ c0 D) (/ d (* w h))) D)) M)))))) (fma d (* (/ (/ d w) (* h D)) (/ c0 D)) (sqrt (- (pow (* d (* (/ (/ d w) (* h D)) (/ c0 D))) 2.0) (* M M))))) (+ w w))) (* (/ c0 (* 2.0 w)) (if (!= (- (* c0 (* d (/ d (* D (* (* h D) w))))) (sqrt (- (pow (* c0 (* d (/ d (* D (* (* h D) w))))) 2.0) (* M M)))) 0.0) (/ (fma M M 0.0) (- (* c0 (* d (/ d (* D (* (* h D) w))))) (sqrt (- (pow (* c0 (* d (/ d (* D (* (* h D) w))))) 2.0) (* M M))))) (fma c0 (* (/ d w) (/ d (* D (* D h)))) (sqrt (- (pow (* c0 (* (/ d w) (/ d (* D (* D h))))) 2.0) (* M M))))))))",
    "output_parens": 181,
    "avg_bits_err_input": 59.269508356723485,
    "avg_bits_err_output": 28.756824856952697,
    "avg_bits_err_improve": 30.512683499770787,
    "time": 56051.1416015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (/ (* h (* (* D (/ M (* 8.0 l))) (* M (/ D d)))) d))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 1e+283) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) INFINITY) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- 1.0 (* (* D (* M (/ (* D M) (+ d d)))) (/ (/ (/ h l) 4.0) d)))) (* (sqrt (* d (/ d (* h l)))) (- 1.0 (/ (/ (* (/ (pow (* D M) 2.0) (+ d d)) (/ h 4.0)) d) l))))))",
    "output_parens": 108,
    "avg_bits_err_input": 26.68856513104088,
    "avg_bits_err_output": 21.543690294184145,
    "avg_bits_err_improve": 5.144874836856733,
    "time": 57148.43994140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (expm1 (log1p (/ 0.25 (fma x x 1.0))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 16.00784359152053,
    "avg_bits_err_output": 15.510868884125793,
    "avg_bits_err_improve": 0.49697470739473637,
    "time": 21425.940673828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 4.0 (fma v v -1.0)) (- (* 3.0 PI))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.9842193609377705,
    "avg_bits_err_output": 0.015334962500721158,
    "avg_bits_err_improve": 0.9688843984370493,
    "time": 4704.801025390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (+ 1.0 (* (* v v) -5.0)) PI) (* (* (sqrt (fma v (* v -6.0) 2.0)) (- 1.0 (* v v))) t))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4448520355945246,
    "avg_bits_err_output": 0.2769276574046925,
    "avg_bits_err_improve": 0.16792437818983208,
    "time": 23477.9169921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt (- 2.0 (* v (* v 6.0)))) -4.0) (- (* v v) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.014292481250360577,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 0.004167481250360577,
    "time": 7242.9931640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* v (* v 5.0))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.515697075733991,
    "avg_bits_err_output": 0.515572075733991,
    "avg_bits_err_improve": 0.00012500000000004174,
    "time": 13493.751220703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.106638157000591,
    "avg_bits_err_output": 2.0738881570005905,
    "avg_bits_err_improve": 0.0327500000000005,
    "time": 15172.2265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ mu (+ Vef EDonor)) Ec) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017997431866599887,
    "avg_bits_err_output": 0.017997431866599887,
    "avg_bits_err_improve": 0,
    "time": 8110.962890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (* (* b b) (+ (+ (* b b) (* a a)) (* a a)))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1822479328161959,
    "avg_bits_err_output": 0.09093176718957331,
    "avg_bits_err_improve": 0.09131616562662258,
    "time": 12287.48046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (+ (pow a 4.0) (* (* b b) (+ (fma a a (* b b)) (* a a)))) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 27,
    "avg_bits_err_input": 0.1846298982688467,
    "avg_bits_err_output": 0.10476160540929838,
    "avg_bits_err_improve": 0.07986829285954833,
    "time": 20119.395263671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (+ (pow a 4.0) (* (* b b) (+ (fma b b (* a a)) (* a a)))) (* 4.0 (+ (* (* b b) (+ a 3.0)) (* (* a a) (- 1.0 a))))) -1.0)",
    "output_parens": 18,
    "avg_bits_err_input": 0.18933762053106826,
    "avg_bits_err_output": 0.10928741176898181,
    "avg_bits_err_improve": 0.08005020876208645,
    "time": 18693.708984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (log (exp (+ (/ x (sqrt (fma 4.0 (* p p) (* x x)))) 1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.235230172694507,
    "avg_bits_err_output": 13.242528750700158,
    "avg_bits_err_improve": -0.007298578005650924,
    "time": 17483.842041015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.279883517511536,
    "avg_bits_err_output": 0.050125,
    "avg_bits_err_improve": 40.229758517511534,
    "time": 5965.97509765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (/ (pow (tan x) 2.0) (+ x (tan x)))) (- x (tan x))))",
    "output_parens": 19,
    "avg_bits_err_input": 31.887283812701988,
    "avg_bits_err_output": 31.356508805139775,
    "avg_bits_err_improve": 0.5307750075622124,
    "time": 23973.739501953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))) 0.0) (* (/ c (- (- b_2) (sqrt (fma a (- c) (* b_2 b_2))))) a) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.25679418892966,
    "avg_bits_err_output": 21.694746470597053,
    "avg_bits_err_improve": 12.562047718332607,
    "time": 16042.698974609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (fma a (- c) (* b_2 b_2))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.646977942311466,
    "avg_bits_err_output": 19.717073417268246,
    "avg_bits_err_improve": 14.92990452504322,
    "time": 18381.562255859375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.51567623839316,
    "avg_bits_err_output": 30.72817746013369,
    "avg_bits_err_improve": 0.7874987782594687,
    "time": 20610.93896484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (if (!= (- 1.0 (pow x (/ 1.0 n))) 0.0) (/ 1.0 (/ 1.0 (expm1 (/ (log x) n)))) (expm1 (/ (log x) n))))",
    "output_parens": 17,
    "avg_bits_err_input": 32.593478801695994,
    "avg_bits_err_output": 11.217170084713006,
    "avg_bits_err_improve": 21.37630871698299,
    "time": 29304.427490234375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (log1p N) (log N))",
    "output_parens": 3,
    "avg_bits_err_input": 29.482993288620186,
    "avg_bits_err_output": 29.483117328523058,
    "avg_bits_err_improve": -0.00012403990287168654,
    "time": 15054.676513671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (+ (/ -0.5 x) (/ 0.5 (+ 1.0 x))) (+ (/ (/ -0.25 x) (+ x 1.0)) (/ (/ -0.25 x) (+ x 1.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.84130662861528,
    "avg_bits_err_output": 12.882341479613912,
    "avg_bits_err_improve": 1.9589651490013686,
    "time": 16391.47314453125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -3.6e-116) (- (* (log1p (expm1 (+ (cos eps) -1.0))) (cos x)) (* (sin x) (sin eps))) (if (<= x 1.25e-95) (if (!= (+ (cos x) (cos (+ eps x))) 0.0) (/ (- (pow (sin x) 2.0) (* (sin (+ eps x)) (sin (+ eps x)))) (+ (cos x) (cos (+ eps x)))) (- (cos (+ eps x)) (cos x))) (fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))))",
    "output_parens": 45,
    "avg_bits_err_input": 39.39427075411002,
    "avg_bits_err_output": 1.8843238805206353,
    "avg_bits_err_improve": 37.509946873589385,
    "time": 23181.9326171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(exp (* 1.0 (log1p (- (cbrt (+ x 1.0)) (- (cbrt x) -1.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 29.94498734798447,
    "avg_bits_err_output": 29.65375781637517,
    "avg_bits_err_improve": 0.2912295316093001,
    "time": 14321.50244140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(* (- 1.0 (cos x)) (/ 1.0 (sin x)))",
    "output_parens": 5,
    "avg_bits_err_input": 30.263074593365097,
    "avg_bits_err_output": 30.298260720862523,
    "avg_bits_err_improve": -0.035186127497425446,
    "time": 20979.538330078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -2e-244) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* (* a c) 4.0) (- b (sqrt (fma a (* c -4.0) (* b b))))) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0)))",
    "output_parens": 48,
    "avg_bits_err_input": 34.195757106768276,
    "avg_bits_err_output": 15.968632018293707,
    "avg_bits_err_improve": 18.22712508847457,
    "time": 27416.8701171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* a (/ (* c 4.0) (- (sqrt (fma b b (* a (* c -4.0)))) b))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.44614432655109,
    "avg_bits_err_output": 22.10071893077893,
    "avg_bits_err_improve": 12.345425395772164,
    "time": 25690.32177734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(if (!= (+ 1.0 (/ (log1p (- x)) (log1p x))) 0.0) (/ (- (* (+ 1.0 (/ (log1p (- x)) (log1p x))) (+ 1.0 (/ (log1p (- x)) (log1p x)))) (* (+ 1.0 (/ (log1p (- x)) (log1p x))) 1.0)) (+ 1.0 (/ (log1p (- x)) (log1p x)))) (/ (log1p (- x)) (log1p x)))",
    "output_parens": 35,
    "avg_bits_err_input": 61.305152710857946,
    "avg_bits_err_output": 0.026785526564393047,
    "avg_bits_err_improve": 61.27836718429355,
    "time": 17762.14501953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (- 1.0 (fma n (- (log1p n) (log n)) (log1p n))) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (+ (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n))))))))) (+ (fma n (- (log1p n) (log n)) (log1p n)) -1.0))",
    "output_parens": 27,
    "avg_bits_err_input": 62.99370881589905,
    "avg_bits_err_output": 6.787718361008622,
    "avg_bits_err_improve": 56.205990454890426,
    "time": 17677.519287109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ eps (- -1.0 eps)) (+ (/ -1.0 (+ eps 1.0)) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 58.463043797532045,
    "avg_bits_err_output": 50.446699119954964,
    "avg_bits_err_improve": 8.01634467757708,
    "time": 22693.767822265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(- (/ 0.5 x) (/ (- 2.0 (/ 1.0 (/ x (tan x)))) (/ (+ x x) (log (exp (/ x (tan x)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 59.90029006700842,
    "avg_bits_err_output": 59.89686419454311,
    "avg_bits_err_improve": 0.0034258724653071226,
    "time": 29667.71728515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (/ eps (expm1 (* eps a))) (expm1 (+ (* eps b) (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 11,
    "avg_bits_err_input": 60.35248503890346,
    "avg_bits_err_output": 28.847369209207578,
    "avg_bits_err_improve": 31.50511582969588,
    "time": 27770.50634765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 40.71257744821935,
    "avg_bits_err_output": 0.4538962406251803,
    "avg_bits_err_improve": 40.25868120759417,
    "time": 5658.666015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.639894128298145,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.63939412829814,
    "time": 3422.528076171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 28.49945657089388,
    "avg_bits_err_output": 0.01815499375684071,
    "avg_bits_err_improve": 28.48130157713704,
    "time": 4837.881103515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(* (exp (- x)) (fma (exp x) (exp x) (- (fma (exp x) 2.0 -1.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 29.14058623538579,
    "avg_bits_err_output": 28.258312859372708,
    "avg_bits_err_improve": 0.8822733760130816,
    "time": 24423.424072265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 10.00177022459701,
    "avg_bits_err_output": 10.00177022459701,
    "avg_bits_err_improve": 0,
    "time": 24058.593017578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (+ (tan x) 1.0) 0.0) (/ (+ (- (* (tan (+ x eps)) (+ 1.0 (tan x))) (pow (tan x) 2.0)) (- (tan x))) (+ (tan x) 1.0)) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 22,
    "avg_bits_err_input": 37.06446869702387,
    "avg_bits_err_output": 37.07555476937511,
    "avg_bits_err_improve": -0.011086072351240261,
    "time": 19724.840576171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.073167042723615,
    "avg_bits_err_output": 0.16090112812734375,
    "avg_bits_err_improve": 29.912265914596272,
    "time": 14432.581787109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (sin x) 0.0) (* (/ (sin x) (sin x)) (fma (sin x) (+ (cos eps) -1.0) (* (sin eps) (cos x)))) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 18,
    "avg_bits_err_input": 37.03248519238114,
    "avg_bits_err_output": 0.3992724225279425,
    "avg_bits_err_improve": 36.633212769853195,
    "time": 19949.484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.56944854718025,
    "avg_bits_err_output": 19.56944854718025,
    "avg_bits_err_improve": 0,
    "time": 16404.60595703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (- (atan (- N -1.0)) (atan N)) 2.0) 0.0) (if (!= (/ (pow (+ (- (atan (+ N 1.0)) (atan N)) 1.0) 2.0) (+ (- (atan (+ N 1.0)) (atan N)) 2.0)) 0.0) (/ (- (* (/ (pow (+ (- (atan (+ N 1.0)) (atan N)) 1.0) 2.0) (+ (- (atan (+ N 1.0)) (atan N)) 2.0)) (/ (pow (+ (- (atan (+ N 1.0)) (atan N)) 1.0) 2.0) (+ (- (atan (+ N 1.0)) (atan N)) 2.0))) (* (/ (pow (+ (- (atan (+ N 1.0)) (atan N)) 1.0) 2.0) (+ (- (atan (+ N 1.0)) (atan N)) 2.0)) (/ 1.0 (+ (- (atan (+ N 1.0)) (atan N)) 2.0)))) (/ (pow (+ (- (atan (+ N 1.0)) (atan N)) 1.0) 2.0) (+ (- (atan (+ N 1.0)) (atan N)) 2.0))) (/ (expm1 (* 2.0 (log1p (- (atan (+ N 1.0)) (atan N))))) (+ (- (atan (+ N 1.0)) (atan N)) 2.0))) (- (atan (- N -1.0)) (atan N)))",
    "output_parens": 96,
    "avg_bits_err_input": 14.825275473549802,
    "avg_bits_err_output": 14.848584044391567,
    "avg_bits_err_improve": -0.023308570841765075,
    "time": 9064.840576171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.209372297151717,
    "avg_bits_err_output": 1.4312366936942307,
    "avg_bits_err_improve": 27.778135603457486,
    "time": 30009.34716796875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- m (+ (* m (* (/ m v) (- 1.0 m))) (- 1.0 (/ (- m (* m m)) v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.07142932343849158,
    "avg_bits_err_output": 0.07710977564247733,
    "avg_bits_err_improve": -0.0056804522039857475,
    "time": 16405.26171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (/ a (/ -1.0 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 15.762112566706982,
    "avg_bits_err_output": 0.2677879703154747,
    "avg_bits_err_improve": 15.494324596391507,
    "time": 12039.052734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (log1p (expm1 (sin (if (!= PI 0.0) (/ (* (/ angle 180.0) (* PI PI)) PI) (* PI (/ angle 180.0))))))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.553976437900413,
    "avg_bits_err_output": 20.566371237751948,
    "avg_bits_err_improve": -0.012394799851534799,
    "time": 35712.775390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (expm1 (log1p (sin (* angle (/ PI 180.0))))) (cos (/ (* PI angle) -180.0))))",
    "output_parens": 14,
    "avg_bits_err_input": 31.68913021245405,
    "avg_bits_err_output": 31.776951057353447,
    "avg_bits_err_improve": -0.08782084489939734,
    "time": 35675.67236328125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (/ PI 180.0))) a) 2.0) (pow (* b (cos (if (!= (* (* angle PI) -0.005555555555555556) 0.0) (/ -1.0 (* (/ -2.0 angle) (/ 90.0 PI))) (* angle (* PI 0.005555555555555556))))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.992348440806676,
    "avg_bits_err_output": 20.981217694613427,
    "avg_bits_err_improve": 0.011130746193249053,
    "time": 40451.553466796875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.18145772226222148,
    "avg_bits_err_output": 0.18177144413776233,
    "avg_bits_err_improve": -0.00031372187554085107,
    "time": 17052.128662109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32372057079218763,
    "avg_bits_err_output": 0.31334727931679757,
    "avg_bits_err_improve": 0.010373291475390067,
    "time": 22250.4501953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (sin v) (+ (* (cos v) e) 1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1403962406251803,
    "avg_bits_err_output": 0.14136560156295072,
    "avg_bits_err_improve": -0.0009693609377704193,
    "time": 16303.39697265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.526754732811064,
    "avg_bits_err_output": 16.518641149385836,
    "avg_bits_err_improve": 0.008113583425227944,
    "time": 35923.9697265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.58784690087849,
    "avg_bits_err_output": 0.16811597813022824,
    "avg_bits_err_improve": 52.41973092274826,
    "time": 27766.697021484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 28.054785036784796,
    "avg_bits_err_output": 0.33769191876117804,
    "avg_bits_err_improve": 27.71709311802362,
    "time": 26205.551513671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.88496704593725,
    "avg_bits_err_output": 0.2430877828190802,
    "avg_bits_err_improve": 43.64187926311817,
    "time": 27636.787109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -2e-244) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* (* a c) 4.0) (- b (sqrt (fma a (* c -4.0) (* b b))))) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 50,
    "avg_bits_err_input": 34.194225814587526,
    "avg_bits_err_output": 15.977497419560065,
    "avg_bits_err_improve": 18.21672839502746,
    "time": 24661.7890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (expm1 (log1p (cos (- lambda1 lambda2))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.8901279830007941,
    "avg_bits_err_output": 0.9004377733456242,
    "avg_bits_err_improve": -0.01030979034483015,
    "time": 28777.31201171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (<= (* -2.0 x) 0.002) (/ (+ (- 4.0 (* (+ 2.0 (expm1 (* -2.0 x))) (/ 4.0 (+ 2.0 (expm1 (* -2.0 x)))))) (- (* (+ 2.0 (expm1 (* -2.0 x))) (/ (expm1 (* -2.0 x)) (- (/ (exp (* -2.0 x)) 2.0) -0.5))))) (+ -2.0 (fma 2.0 (exp (* -2.0 x)) 4.0))) (- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0))",
    "output_parens": 35,
    "avg_bits_err_input": 29.18561948043984,
    "avg_bits_err_output": 0.05286992791053129,
    "avg_bits_err_improve": 29.132749552529308,
    "time": 25674.51953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= x -200.0) (- (/ (- (exp (+ x x)) (exp (fma x -1.0 x))) (+ (exp (+ x x)) (exp (fma x -1.0 x)))) 0.0) (/ (- 0.0 (if (!= (exp x) 0.0) (/ (* (expm1 (* x -2.0)) (pow (exp x) 2.0)) (exp x)) (* (exp x) (expm1 (* x -2.0))))) (+ (exp x) (exp (- x)))))",
    "output_parens": 34,
    "avg_bits_err_input": 58.03829425603023,
    "avg_bits_err_output": 0.7195355265643932,
    "avg_bits_err_improve": 57.318758729465834,
    "time": 18430.2373046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (+ (/ (expm1 (* x -2.0)) (/ -4.0 (exp x))) (/ (+ (expm1 (* x -2.0)) (* (expm1 (* x -2.0)) 2.0)) (/ -4.0 (exp x)))) 2.0)",
    "output_parens": 16,
    "avg_bits_err_input": 57.95333233912599,
    "avg_bits_err_output": 0.0667830828133113,
    "avg_bits_err_improve": 57.886549256312684,
    "time": 8340.0927734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01337461079306209,
    "avg_bits_err_output": 0.01337461079306209,
    "avg_bits_err_improve": 0,
    "time": 1709.273681640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.129375,
    "avg_bits_err_output": 32.129375,
    "avg_bits_err_improve": 0,
    "time": 4422.023193359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (+ (/ 1.0 (* (+ -1.0 x) (+ -1.0 x))) (/ (* x (/ x (+ -1.0 x))) (- 1.0 x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 58.44706635597823,
    "avg_bits_err_output": 58.480583087492654,
    "avg_bits_err_improve": -0.03351673151442469,
    "time": 19928.6796875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04344812031259015,
    "avg_bits_err_output": 0.042875,
    "avg_bits_err_improve": 0.0005731203125901446,
    "time": 3919.833984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12591748125036056,
    "avg_bits_err_output": 0.12591748125036056,
    "avg_bits_err_improve": 0,
    "time": 14159.78564453125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12221936093777043,
    "avg_bits_err_output": 0.12221936093777043,
    "avg_bits_err_improve": 0,
    "time": 26286.629150390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0))) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0)))) (- lambda1 lambda2) (fma (- lambda2) (cos (/ (+ phi1 phi2) 2.0)) (* (cos (/ (+ phi1 phi2) 2.0)) lambda2))) (- phi1 phi2)))",
    "output_parens": 25,
    "avg_bits_err_input": 38.550200061136444,
    "avg_bits_err_output": 0.14016383061689885,
    "avg_bits_err_improve": 38.410036230519545,
    "time": 27534.521240234375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (* (+ a b) (/ (- a b) a)) a)))",
    "output_parens": 7,
    "avg_bits_err_input": 14.63862258158851,
    "avg_bits_err_output": 0.016125,
    "avg_bits_err_improve": 14.62249758158851,
    "time": 4812.218994140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (log (+ 1.0 (expm1 (* (sin delta) (* (cos phi1) (cos theta)))))))))))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.1578551135373302,
    "avg_bits_err_output": 0.16265372778092227,
    "avg_bits_err_improve": -0.00479861424359207,
    "time": 42296.5166015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.604906270673375,
    "avg_bits_err_output": 0.16688233125324514,
    "avg_bits_err_improve": 52.43802393942013,
    "time": 30083.086181640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.272329037636187,
    "avg_bits_err_output": 0.3407911672011121,
    "avg_bits_err_improve": 27.931537870435076,
    "time": 30895.1591796875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* -3.0 a)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.96643487876498,
    "avg_bits_err_output": 0.2432646625064901,
    "avg_bits_err_improve": 43.72317021625849,
    "time": 24772.450927734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -1.35e+154) (fma (/ -0.3333333333333333 a) b (fma (+ (/ -0.3333333333333333 a) -1.0) b (- b (* -0.3333333333333333 (/ b a))))) (/ (if (!= (+ (sqrt (fma c (* a -3.0) (* b b))) b) 0.0) (* (/ c (+ b (sqrt (fma c (* a -3.0) (* b b))))) (* a -3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a)))",
    "output_parens": 32,
    "avg_bits_err_input": 34.196854534573504,
    "avg_bits_err_output": 20.984740595027173,
    "avg_bits_err_improve": 13.212113939546331,
    "time": 32489.993896484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (expm1 (log1p (* (cos (- lambda1 lambda2)) (sin phi1)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.156630702960724,
    "avg_bits_err_output": 13.164186795080056,
    "avg_bits_err_improve": -0.0075560921193318364,
    "time": 36343.150390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.514354193511846,
    "avg_bits_err_output": 0.5485050926542355,
    "avg_bits_err_improve": 28.96584910085761,
    "time": 22541.713623046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.013,
    "avg_bits_err_output": 0.013,
    "avg_bits_err_improve": 0,
    "time": 5543.599609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))) 0.0) (/ (if (!= (- (/ -1.0 (pow (+ 1.0 x) 2.0)) (pow (/ 1.0 (+ x -1.0)) 2.0)) 0.0) (/ (- (pow (/ 1.0 (+ x -1.0)) 4.0) (pow (/ 1.0 (pow (+ 1.0 x) 2.0)) 2.0)) (- (/ -1.0 (pow (+ 1.0 x) 2.0)) (pow (/ 1.0 (+ x -1.0)) 2.0))) (- (/ 1.0 (pow (+ 1.0 x) 2.0)) (pow (/ 1.0 (+ x -1.0)) 2.0))) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))) (- (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 50,
    "avg_bits_err_input": 14.359911804127425,
    "avg_bits_err_output": 14.555439757354739,
    "avg_bits_err_improve": -0.1955279532273142,
    "time": 20160.547119140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= C -6.7e-161) (* (sqrt (* (* F (- (pow B 2.0) (* A (* C 4.0)))) -2.0)) (/ (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C))) (- (* A (* C 4.0)) (pow B 2.0)))) (if (<= C 5.8e-89) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* F -2.0))) (/ (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C))) (- (* A (* C 4.0)) (pow B 2.0)))) (/ (exp (log (sqrt (* (* 2.0 (* F (- (pow B 2.0) (* A (* C 4.0))))) (if (!= (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) 0.0) (/ (- (- (* (+ A C) (+ A C)) (pow (- A C) 2.0)) (pow B 2.0)) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))))) (- (* A (* 4.0 C)) (pow B 2.0)))))",
    "output_parens": 96,
    "avg_bits_err_input": 52.764235445500084,
    "avg_bits_err_output": 49.79488904733443,
    "avg_bits_err_improve": 2.969346398165655,
    "time": 42996.24267578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -1.0) (* 180.0 (/ (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 2.0) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))) 0.0) (/ (- (* (pow (- C A) 2.0) 0.0) (pow B 2.0)) (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))) (- (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))))) PI)) (/ (* (atan (/ (if (!= C 0.0) (- (/ (* C (- C (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) C) (* A (/ C C))) (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) B)) 180.0) PI)))",
    "output_parens": 91,
    "avg_bits_err_input": 29.396248183615747,
    "avg_bits_err_output": 25.29172626780543,
    "avg_bits_err_improve": 4.104521915810317,
    "time": 28030.2578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2.05e-227) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 F)))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (sqrt F)) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.38526105972533,
    "avg_bits_err_output": 46.87573297714849,
    "avg_bits_err_improve": 5.509528082576843,
    "time": 45238.584228515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.471001910125102,
    "avg_bits_err_output": 15.471001910125102,
    "avg_bits_err_improve": 0,
    "time": 17896.88623046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -5e-302) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (+ (* h (- h)) (* g g))) (- g)) 0.0) (* h (/ h (- (- g) (sqrt (fma g g (* h (- h))))))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 70,
    "avg_bits_err_input": 36.41911381376894,
    "avg_bits_err_output": 4.994583750224518,
    "avg_bits_err_improve": 31.42453006354442,
    "time": 30660.882080078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (/ (+ 1.0 (cos (* (fma 2.0 PI (acos (/ g (- h)))) 0.3333333333333333))) 2.0) (/ (- 1.0 (cos (+ (* PI 1.3333333333333333) (/ (- (acos (/ g (- h)))) 3.0)))) 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.9922577078205239,
    "avg_bits_err_output": 0.028118045314032464,
    "avg_bits_err_improve": 0.9641396625064914,
    "time": 26465.64306640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7405,
    "avg_bits_err_output": 0.7405,
    "avg_bits_err_improve": 0,
    "time": 4654.54736328125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -5e+258) (/ (* a1 (/ a2 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-303) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ (* a1 (/ a2 b1)) b2) (if (<= (/ (* a1 a2) (* b1 b2)) 4e+259) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.56122765733664,
    "avg_bits_err_output": 3.4920203051941385,
    "avg_bits_err_improve": 8.069207352142502,
    "time": 10537.6005859375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4620794223799711,
    "avg_bits_err_output": 0.4232259193652572,
    "avg_bits_err_improve": 0.03885350301471391,
    "time": 14852.693603515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 1e-6) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 100.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 52.80995237557292,
    "avg_bits_err_output": 0.2109515929210294,
    "avg_bits_err_improve": 52.59900078265189,
    "time": 12055.725341796875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.6820655613684465,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.6820655613684465,
    "time": 2700.90966796875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 2.0 (* x 2.0)) (+ x (+ x 2.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.018,
    "avg_bits_err_improve": -0.003999999999999998,
    "time": 5069.518798828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1382.985595703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (/ (* w r) (- 1.0 v)))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.81312687351412,
    "avg_bits_err_output": 0.3395820502845261,
    "avg_bits_err_improve": 12.473544823229593,
    "time": 26336.8193359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0) (* x1 x1)) (* (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (* x1 2.0) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0))))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 0.5178261617280987,
    "avg_bits_err_output": 0.2840339775085488,
    "avg_bits_err_improve": 0.2337921842195499,
    "time": 76368.91845703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 17.86576924066963,
    "avg_bits_err_output": 1.304463772085617,
    "avg_bits_err_improve": 16.56130546858401,
    "time": 8391.595703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2370827222622215,
    "avg_bits_err_output": 0.1859052428037488,
    "avg_bits_err_improve": 0.0511774794584727,
    "time": 7968.1025390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0031981203125901443,
    "avg_bits_err_output": 0.0031981203125901443,
    "avg_bits_err_improve": 0,
    "time": 2493.77734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ (- (/ PI a) (/ PI b)) 2.0) (+ b a)) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 13.890576369762117,
    "avg_bits_err_output": 0.2889554515658353,
    "avg_bits_err_improve": 13.601620918196282,
    "time": 18143.330322265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (exp (* x (- -1.0 eps))) (- (+ (- (/ (exp (* x (- -1.0 eps))) eps) (* (/ 1.0 eps) (exp (- (* x eps) x)))) (- (exp (- (* x eps) x)))))) 2.0)",
    "output_parens": 21,
    "avg_bits_err_input": 29.582559723460626,
    "avg_bits_err_output": 1.125464375242469,
    "avg_bits_err_improve": 28.457095348218157,
    "time": 22437.74072265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (if (!= (+ 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) 0.0) (/ (- 4.0 (pow (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))) 2.0)) (+ 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.021875,
    "avg_bits_err_output": 0.022625,
    "avg_bits_err_improve": -0.0007500000000000007,
    "time": 7173.04736328125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.025125,
    "avg_bits_err_output": 0.025125,
    "avg_bits_err_improve": 0,
    "time": 12962.06884765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ (* (/ (* 4.0 t) (+ t 1.0)) t) (+ 1.0 t))) (+ 2.0 (/ (* (/ (* 4.0 t) (+ t 1.0)) t) (+ 1.0 t))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.033375,
    "avg_bits_err_output": 0.072375,
    "avg_bits_err_improve": -0.03899999999999999,
    "time": 11015.827392578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3639.206298828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8919.267578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2806.331298828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.85217844556147,
    "avg_bits_err_output": 0.250625,
    "avg_bits_err_improve": 7.6015534455614695,
    "time": 29759.079345703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.356420441774422,
    "avg_bits_err_output": 7.356420441774422,
    "avg_bits_err_improve": 0,
    "time": 15660.725830078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.065916226199413,
    "avg_bits_err_output": 0.031577547377846744,
    "avg_bits_err_improve": 16.034338678821566,
    "time": 11700.255126953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(fma (cos x) (* 2.0 (pow (exp (* x x)) 10.0)) (* (cos x) (- (pow (if (!= (+ 1.0 (+ (exp (* x x)) 1.0)) 0.0) (/ (- (* (+ (exp (* x x)) 1.0) (+ (exp (* x x)) 1.0)) 1.0) (+ 1.0 (+ (+ (expm1 (* x x)) 1.0) 1.0))) (exp (* x x))) 10.0))))",
    "output_parens": 32,
    "avg_bits_err_input": 3.545927065533903,
    "avg_bits_err_output": 3.0550585877780083,
    "avg_bits_err_improve": 0.4908684777558947,
    "time": 21666.897216796875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 15.232342327066089,
    "avg_bits_err_output": 15.232342327066089,
    "avg_bits_err_improve": 0,
    "time": 17523.210205078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.28054089694213,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.28054089694213,
    "time": 4776.500732421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.16200663003109,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.16125663003109,
    "time": 5489.375244140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.297375,
    "avg_bits_err_improve": 63.702625,
    "time": 25539.639404296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ t 2.5e+31) t)",
    "output_parens": 2,
    "avg_bits_err_input": 61.84324714829695,
    "avg_bits_err_output": 0.38207312031259016,
    "avg_bits_err_improve": 61.46117402798436,
    "time": 15001.785400390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* a (/ (* c 4.0) (- (sqrt (fma b b (* a (* c -4.0)))) b))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.44614432655109,
    "avg_bits_err_output": 22.10071893077893,
    "avg_bits_err_improve": 12.345425395772164,
    "time": 26197.970703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -2e-244) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* (* a c) 4.0) (- b (sqrt (fma a (* c -4.0) (* b b))))) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 50,
    "avg_bits_err_input": 34.194225814587526,
    "avg_bits_err_output": 15.977497419560065,
    "avg_bits_err_improve": 18.21672839502746,
    "time": 25673.65673828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2434.80712890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.02494290489038,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 40.01456790489038,
    "time": 3559.86279296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(- (/ (* x x) (fma x x (* y y))) (/ (* y y) (fma x x (* y y))))",
    "output_parens": 9,
    "avg_bits_err_input": 20.003784732652008,
    "avg_bits_err_output": 20.00508544525335,
    "avg_bits_err_improve": -0.0013007126013420134,
    "time": 5740.2177734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.640094545805552,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.640094545805552,
    "time": 7328.75048828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03475,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.034375,
    "time": 8914.0625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ a b)) (* a (+ a b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02429248125036058,
    "avg_bits_err_output": 0.01625,
    "avg_bits_err_improve": 0.00804248125036058,
    "time": 4250.50341796875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0.013375,
    "time": 4618.530517578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 1937.469970703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ a (+ c b))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4062834593805893,
    "avg_bits_err_output": 0.233,
    "avg_bits_err_improve": 0.17328345938058928,
    "time": 6551.45751953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (if (!= (/ -1.0 (- -1.0 (cos x))) 0.0) (/ (+ (/ (- (/ -1.0 (- -1.0 (cos x)))) (- -1.0 (cos x))) (/ (* -1.0 (/ (/ (+ 1.0 (cos (* x -2.0))) 2.0) (- -1.0 (cos x)))) (- -1.0 (cos x)))) (/ -1.0 (- -1.0 (cos x)))) (/ (+ (pow (cos x) 2.0) -1.0) (- -1.0 (cos x)))) (- 1.0 (cos x)))",
    "output_parens": 40,
    "avg_bits_err_input": 29.794982550211905,
    "avg_bits_err_output": 29.794828243446187,
    "avg_bits_err_improve": 0.00015430676571881463,
    "time": 12207.6171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (if (!= (sqrt (- (* x x) eps)) 0.0) (/ (- (* x (+ x (sqrt (- (* x x) eps)))) eps) (sqrt (- (* x x) eps))) (+ x (sqrt (- (* x x) eps))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 30,
    "avg_bits_err_input": 24.974306063092257,
    "avg_bits_err_output": 0.06224548906511416,
    "avg_bits_err_improve": 24.912060574027144,
    "time": 13923.524658203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (* x x) (- (pow (sin x) 2.0))) 0.0) (/ (fma (* x x) (* x x) (- (pow (sin x) 4.0))) (- (* x x) (- (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 34,
    "avg_bits_err_input": 29.917198975434502,
    "avg_bits_err_output": 29.82390401975028,
    "avg_bits_err_improve": 0.09329495568422175,
    "time": 35152.074951171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005448120312590145,
    "avg_bits_err_output": 0.005448120312590145,
    "avg_bits_err_improve": 0,
    "time": 2200.07958984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n))))",
    "output_parens": 22,
    "avg_bits_err_input": 47.42313709608519,
    "avg_bits_err_output": 13.950917285344405,
    "avg_bits_err_improve": 33.47221981074079,
    "time": 27280.162353515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.400683635839055,
    "avg_bits_err_output": 23.05991784834867,
    "avg_bits_err_improve": 3.3407657874903833,
    "time": 15067.765380859375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) -1e+256) (- (* (+ (/ c (* (* (fma c c (* d d)) 2.0) 2.0)) (if (!= (/ (/ c 2.0) (fma d d (* c c))) 0.0) (/ (/ (* c (+ c (+ c c))) (* (fma d d (* c c)) 4.0)) c) (/ (/ (+ c (+ c c)) (fma d d (* c c))) 4.0))) b) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 1e-130) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 66,
    "avg_bits_err_input": 25.865055488060655,
    "avg_bits_err_output": 22.441821456291144,
    "avg_bits_err_improve": 3.4232340317695105,
    "time": 16281.20361328125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- 1.0 ux) (* ux maxCos))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03575,
    "avg_bits_err_output": 0.03575,
    "avg_bits_err_improve": 0,
    "time": 10609.845947265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (* (- (fma ux maxCos 1.0) ux) (* ux (+ maxCos -1.0))) 0.0) (/ (fma (* (- (fma ux maxCos 1.0) ux) (* ux (+ maxCos -1.0))) (+ 1.0 (- ux (fma ux maxCos 1.0))) (- (* (* ux (+ maxCos -1.0)) (* (- (fma ux maxCos 1.0) ux) (* (- (fma ux maxCos 1.0) ux) (* ux (+ maxCos -1.0))))))) (* (- (fma ux maxCos 1.0) ux) (* ux (+ maxCos -1.0)))) (- 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)))))",
    "output_parens": 43,
    "avg_bits_err_input": 13.53660620613949,
    "avg_bits_err_output": 11.277342130820044,
    "avg_bits_err_improve": 2.2592640753194466,
    "time": 34078.283447265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.573655209608024,
    "avg_bits_err_output": 12.035235068171911,
    "avg_bits_err_improve": 1.538420141436113,
    "time": 29074.080322265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) xi) (fma (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (- maxCos (* ux maxCos)) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.3487942396280732,
    "avg_bits_err_output": 0.3404867568358027,
    "avg_bits_err_improve": 0.008307482792270504,
    "time": 39158.663818359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (- (+ 1.0 (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax))))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.19875731732960175,
    "avg_bits_err_output": 0.19990591533318847,
    "avg_bits_err_improve": -0.001148598003586715,
    "time": 47861.93896484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sin (* 6.28318530718 u2)) (pow (/ (/ (* u1 u1) (- 1.0 u1)) (- 1.0 u1)) 0.25))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5274287772379858,
    "avg_bits_err_output": 0.5309391869605287,
    "avg_bits_err_improve": -0.0035104097225429065,
    "time": 21921.913330078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3212644161665526,
    "avg_bits_err_output": 0.3212644161665526,
    "avg_bits_err_improve": 0,
    "time": 23392.157958984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 0.3398029990847761,
    "avg_bits_err_output": 0.3398029990847761,
    "avg_bits_err_improve": 0,
    "time": 55918.677978515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.055718613676711756,
    "avg_bits_err_output": 0.04193243549330766,
    "avg_bits_err_improve": 0.013786178183404094,
    "time": 9461.05712890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (/ (exp (/ (fabs x) (* s -2.0))) s) (log (+ 1.0 (expm1 (pow (+ (exp (/ (fabs x) (- s))) 1.0) 2.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.16732094247556387,
    "avg_bits_err_output": 0.11986104325801152,
    "avg_bits_err_improve": 0.04745989921755235,
    "time": 19873.181640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6693614518190241,
    "avg_bits_err_output": 0.6693614518190241,
    "avg_bits_err_improve": 0,
    "time": 24655.998046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (+ (+ v (* v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)))) (- v)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.14976554748583387,
    "avg_bits_err_output": 0.16315740197959297,
    "avg_bits_err_improve": -0.013391854493759098,
    "time": 20695.244873046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.5517181718552395,
    "avg_bits_err_output": 2.5497890519293303,
    "avg_bits_err_improve": 0.0019291199259092728,
    "time": 34590.10546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(fma cosTheta_i (/ (* (/ cosTheta_O v) (/ (/ 0.5 v) (exp (* sinTheta_i (/ sinTheta_O v))))) (sinh (/ 1.0 v))) 0.0)",
    "output_parens": 11,
    "avg_bits_err_input": 0.46066836139509765,
    "avg_bits_err_output": 0.3919300977585562,
    "avg_bits_err_improve": 0.06873826363654145,
    "time": 29565.701416015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(fma (exp (* (* (log (/ 0.5 v)) 1.4427932477276006) 0.6931)) (exp (+ 0.6931 (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v))) 0.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.1147120518670971,
    "avg_bits_err_output": 0.11286785725319226,
    "avg_bits_err_improve": 0.001844194613904837,
    "time": 18033.229248046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (* (pow alpha PI) (pow alpha PI)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.45996173427410836,
    "avg_bits_err_output": 0.42187546533572196,
    "avg_bits_err_improve": 0.0380862689383864,
    "time": 25031.894287109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (fma u -1.3333333333333333 1.3333333333333333)) (* s -3.0))",
    "output_parens": 4,
    "avg_bits_err_input": 1.317276311743076,
    "avg_bits_err_output": 1.0046423297859794,
    "avg_bits_err_improve": 0.31263398195709646,
    "time": 24292.6806640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ (/ 2.0 (/ 2.0 (- 1.0 (* 4.0 u)))) (log (+ 1.0 (expm1 (pow (+ 1.0 (* u -4.0)) 2.0)))))) s) 2.0) (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 12.682042951267007,
    "avg_bits_err_output": 11.804626331114227,
    "avg_bits_err_improve": 0.8774166201527809,
    "time": 23285.3310546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (* (/ s -0.16666666666666666) (- (* PI r)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.13378643935956866,
    "avg_bits_err_output": 0.13328287635019437,
    "avg_bits_err_improve": 0.0005035630093742915,
    "time": 28431.356689453125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9084112578988484,
    "avg_bits_err_output": 0.7231145568365862,
    "avg_bits_err_improve": 0.18529670106226215,
    "time": 28453.75,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) (* cosTheta (exp (* cosTheta cosTheta)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.678554291109187,
    "avg_bits_err_output": 0.4826771905187126,
    "avg_bits_err_improve": 0.19587710059047436,
    "time": 27010.691162109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.461463227361117,
    "avg_bits_err_output": 0.521260167472435,
    "avg_bits_err_improve": 12.940203059888681,
    "time": 21018.48193359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (+ (* u2 (- -1.0 (* PI -2.0))) u2)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.50769491823571,
    "avg_bits_err_output": 0.31949525124518063,
    "avg_bits_err_improve": 13.18819966699053,
    "time": 18381.412353515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.041905495798238,
    "avg_bits_err_output": 0.3198656015629507,
    "avg_bits_err_improve": 13.722039894235287,
    "time": 14243.7119140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ (/ cos2phi alphax) (- alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.349824006685278,
    "avg_bits_err_output": 0.5216392617643689,
    "avg_bits_err_improve": 11.82818474492091,
    "time": 15564.442626953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -5e+20) (- (* PI l) (/ 0.0 F)) (if (<= (* PI l) 5e-22) (- (* PI l) (* (/ (tan (* PI l)) F) (/ 1.0 F))) (- (* PI l) (/ 0.0 F))))",
    "output_parens": 19,
    "avg_bits_err_input": 17.053863350340244,
    "avg_bits_err_output": 1.073351119910558,
    "avg_bits_err_improve": 15.980512230429685,
    "time": 23384.931884765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ x (tan B)) (- (/ (+ x x) (tan B)) (/ 1.0 (sin B))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.217504167120048,
    "avg_bits_err_output": 0.2023060468074578,
    "avg_bits_err_improve": 0.015198120312590185,
    "time": 14661.108154296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (* (/ (pow (fma 2.0 x (fma F F 2.0)) -0.5) (sin B)) F))",
    "output_parens": 10,
    "avg_bits_err_input": 14.088389699750529,
    "avg_bits_err_output": 10.789965073266458,
    "avg_bits_err_improve": 3.2984246264840706,
    "time": 23504.283203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (+ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (* f 2.0) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) 1.0) 1.0) (/ PI -4.0))",
    "output_parens": 34,
    "avg_bits_err_input": 61.656665015601824,
    "avg_bits_err_output": 1.8357167313016662,
    "avg_bits_err_improve": 59.82094828430016,
    "time": 41629.91015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= (* l l) 2e+300) (* (/ (sqrt 2.0) (sqrt (+ (+ (* l (- l)) (* (/ (+ x 1.0) (+ x -1.0)) (* l l))) (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t)))))) t) (/ (* (sqrt 2.0) t) (sqrt (fma l (- l) (fma l (fma l -1.0 l) (/ (+ (* (+ x 1.0) (* l l)) (* (+ x 1.0) (* 2.0 (* t t)))) (+ x -1.0)))))))",
    "output_parens": 40,
    "avg_bits_err_input": 43.0332305403977,
    "avg_bits_err_output": 36.46235817030709,
    "avg_bits_err_improve": 6.570872370090612,
    "time": 24000.052734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (expm1 (log1p (pow (sin kx) 2.0))) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 12,
    "avg_bits_err_input": 3.822046058506583,
    "avg_bits_err_output": 3.8377114725731407,
    "avg_bits_err_improve": -0.015665414066557748,
    "time": 31561.1484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.0909239778258346,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 1.0844239778258347,
    "time": 11719.416748046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.250903229399619,
    "avg_bits_err_output": 10.250903229399619,
    "avg_bits_err_improve": 0,
    "time": 19316.287109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -5e-310) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= n 6e-221) (* (sqrt (* U (- (- t (* 2.0 (* l (/ l Om)))) (* (pow (/ l Om) 2.0) (* n (- U U*)))))) (sqrt (* 2.0 n))) (if (<= n 4.5e-179) (sqrt (* (* (* n U) -2.0) (- (fma (/ (* (/ l Om) l) Om) (* n (- U U*)) (* 2.0 (* l (/ l Om)))) t))) (* (sqrt (* 2.0 (* U (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt n)))))",
    "output_parens": 64,
    "avg_bits_err_input": 34.73260626226498,
    "avg_bits_err_output": 25.176713516881016,
    "avg_bits_err_improve": 9.555892745383964,
    "time": 39887.608642578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -4e-108) (- (/ (/ 2.0 (/ (tan k) l)) (* (/ k t) (* (pow t 3.0) (* (/ (sin k) l) (/ k t))))) 0.0) (if (<= t 9.5e-146) (/ (/ 2.0 (pow (/ k t) 2.0)) (* (exp (fma 3.0 (log t) (log (/ (sin k) (* l l))))) (tan k))) (- (/ (/ 2.0 (/ (tan k) l)) (* (/ k t) (* (pow t 3.0) (* (/ (sin k) l) (/ k t))))) 0.0)))",
    "output_parens": 43,
    "avg_bits_err_input": 47.42179906374774,
    "avg_bits_err_output": 29.25404112737552,
    "avg_bits_err_improve": 18.167757936372222,
    "time": 45335.899169921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (* (+ 2.0 (pow (/ k t) 2.0)) (* (tan k) (pow t 3.0))) l) (/ (sin k) l)))",
    "output_parens": 12,
    "avg_bits_err_input": 32.4004713729434,
    "avg_bits_err_output": 27.828973575800266,
    "avg_bits_err_improve": 4.5714977971431345,
    "time": 27131.603515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(+ (+ (* (/ a1 (* (sqrt 2.0) 4.0)) (* a1 (cos th))) (* a1 (* (/ (+ a1 (+ a1 a1)) (* (sqrt 2.0) 4.0)) (cos th)))) (* a2 (* (cos th) (/ a2 (sqrt 2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.5111644765845871,
    "avg_bits_err_output": 0.44853703283350477,
    "avg_bits_err_improve": 0.06262744375108231,
    "time": 25792.27685546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* PI (* n 2.0)) (* k -0.5)) (sqrt (* PI (* n 2.0)))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4632588704756291,
    "avg_bits_err_output": 0.3693614844538952,
    "avg_bits_err_improve": 0.09389738602173386,
    "time": 19305.976806640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (+ (* (* (exp (- l)) (- (exp (+ l l)) (exp (fma l -1.0 l)))) J) (+ (fma (/ -1.0 (exp l)) J (/ J (exp l))) (fma (/ -1.0 (exp l)) J (/ J (exp l))))) (cos (/ K 2.0))) U)",
    "output_parens": 25,
    "avg_bits_err_input": 17.31387788804528,
    "avg_bits_err_output": 17.370376337772203,
    "avg_bits_err_improve": -0.05649844972692364,
    "time": 24958.92138671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= K -1.35e+154) (* (cos (- (/ (if (!= (* K m) 0.0) (* K (* K (/ (* m (+ m n)) (* K m)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (if (<= K -1.5e+78) (* (cos (- (/ (if (!= (* K m) 0.0) (* (* m (/ (+ m n) (* K m))) (* K K)) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (if (<= K 4.4e-14) (* (cos (- (* (+ m n) (/ K 2.0)) M)) (exp (- (- (fabs (- n m)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) (if (<= K 1.32e+154) (* (cos (- (/ (if (!= (* K m) 0.0) (* (* m (/ (+ m n) (* K m))) (* K K)) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K m) 0.0) (* (* (* K m) (* (+ m n) (/ K (* K m)))) (* m (/ K (* K m)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))))))",
    "output_parens": 127,
    "avg_bits_err_input": 15.628191190906573,
    "avg_bits_err_output": 13.599177376805102,
    "avg_bits_err_improve": 2.0290138141014715,
    "time": 24128.92431640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* -2.0 (* (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))) (* J (cos (/ K 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.778667481250363,
    "avg_bits_err_output": 8.308228962887402,
    "avg_bits_err_improve": 9.470438518362961,
    "time": 20914.684326171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) (- INFINITY)) (* w0 (sqrt (- 1.0 (* (* D (/ (/ M 2.0) d)) (/ (* (/ (/ M 2.0) d) (* D h)) l))))) (if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) 5e-43) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (* (* D (/ (/ M 2.0) d)) (/ (* (/ (/ M 2.0) d) (* D h)) l)))))))",
    "output_parens": 50,
    "avg_bits_err_input": 14.522832118794017,
    "avg_bits_err_output": 8.589976059725721,
    "avg_bits_err_improve": 5.932856059068296,
    "time": 22928.792724609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -2e+166) (* c0 (* (sqrt (- (/ A l))) (sqrt (/ -1.0 V)))) (if (<= (* V l) -1e-67) (* c0 (sqrt (/ A (* V l)))) (if (<= (* V l) 0.0) (* (* (sqrt (/ A (- l))) c0) (- (- (sqrt (/ -1.0 V))))) (if (<= (* V l) 1e+241) (* c0 (sqrt (+ (/ (/ A (* l V)) 4.0) (/ (+ A (+ A A)) (* (+ l l) (+ V V)))))) (* c0 (sqrt (* (/ A V) (/ 1.0 l))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 19.03724219765438,
    "avg_bits_err_output": 12.051446738503754,
    "avg_bits_err_improve": 6.985795459150625,
    "time": 20281.171142578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* M M) 2e+305) (/ (/ (/ (* c0 (if (!= (- (* d (* (/ (/ (/ d D) (* w D)) h) c0)) (sqrt (- (pow (* d (* (/ (/ (/ d D) (* w D)) h) c0)) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (* (/ (/ (/ d D) (* w D)) h) c0)) (sqrt (- (pow (* d (* (/ (/ (/ d D) (* w D)) h) c0)) 2.0) (* M M))))) (fma d (* (/ (/ (/ d D) (* w D)) h) c0) (sqrt (- (pow (* d (* (/ (/ (/ d D) (* w D)) h) c0)) 2.0) (* M M)))))) 1.0) w) 2.0) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (* d (/ (/ (/ c0 D) D) (* h w)))) (sqrt (fma M (- M) (pow (* d (* d (/ (/ (/ c0 D) D) (* h w)))) 2.0)))) 0.0) (* M (/ M (- (* d (* d (/ (/ (/ c0 D) D) (* h w)))) (sqrt (fma M (- M) (pow (* d (* d (/ (/ (/ c0 D) D) (* h w)))) 2.0)))))) (fma d (* d (/ (/ (/ c0 D) D) (* h w))) (sqrt (fma M (- M) (pow (* d (* d (/ (/ (/ c0 D) D) (* h w)))) 2.0)))))))",
    "output_parens": 118,
    "avg_bits_err_input": 59.62991978504072,
    "avg_bits_err_output": 27.56175901608282,
    "avg_bits_err_improve": 32.068160768957895,
    "time": 62224.316650390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 5e+284) (fma (sqrt (/ d l)) (* (- 1.0 (* (/ (* h (/ (/ (* D M) d) (+ l l))) 4.0) (/ (* D M) d))) (sqrt (/ d h))) 0.0) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) INFINITY) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- (* (pow (* (/ D 2.0) (/ M d)) 2.0) (* (/ h l) -0.5)) -1.0)) (* (fma 0.5 (* h (* (/ D (+ d d)) (/ (/ (* (pow M 2.0) (+ D (+ D (+ D D)))) l) (+ (+ d d) (+ d (+ d (+ (+ d d) (+ d d)))))))) -1.0) (- (sqrt (* d (/ (/ d h) l)))))))",
    "output_parens": 87,
    "avg_bits_err_input": 26.625379458411643,
    "avg_bits_err_output": 21.312923144111434,
    "avg_bits_err_improve": 5.31245631430021,
    "time": 48550.754150390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (expm1 (log1p (/ 0.25 (fma x x 1.0))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 15.827180933665998,
    "avg_bits_err_output": 15.324493057988843,
    "avg_bits_err_improve": 0.5026878756771556,
    "time": 21253.8515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9823231203125902,
    "avg_bits_err_output": 0.013073120312590145,
    "avg_bits_err_improve": 0.9692500000000001,
    "time": 3506.338134765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (+ 1.0 (* (* v v) -5.0)) (* PI (sqrt (fma v (* v -6.0) 2.0)))) (- t (* v (* v t)))) 0.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.46706241769983164,
    "avg_bits_err_output": 0.11150244375108176,
    "avg_bits_err_improve": 0.3555599739487499,
    "time": 22615.724853515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (fma v v -1.0) (/ (sqrt (- 2.0 (* v (* v 6.0)))) -4.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.012896240625180291,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.0025212406251802905,
    "time": 3142.967529296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5246140864383407,
    "avg_bits_err_output": 0.5246140864383407,
    "avg_bits_err_improve": 0,
    "time": 9271.20751953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (+ (/ (pow k m) (* (* (fma k k (- (* k 10.0) -1.0)) 2.0) 2.0)) (/ (+ (pow k m) (* (pow k m) 2.0)) (* (* (fma k k (- (* k 10.0) -1.0)) 2.0) 2.0))))",
    "output_parens": 19,
    "avg_bits_err_input": 2.1306996052535694,
    "avg_bits_err_output": 2.110980477614971,
    "avg_bits_err_improve": 0.019719127638598177,
    "time": 18846.65087890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ (exp (/ (+ mu (- Vef (- Ec EDonor))) KbT)) 1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02299749334274228,
    "avg_bits_err_output": 0.02299749334274228,
    "avg_bits_err_improve": 0,
    "time": 8289.902099609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (* (* b b) (- (* b b) (- (* a (+ a a)))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18560825061850234,
    "avg_bits_err_output": 0.09555676718957333,
    "avg_bits_err_improve": 0.090051483428929,
    "time": 14176.791748046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (if (!= (* (* b b) (* (fma a 3.0 -1.0) -4.0)) 0.0) (- (fma b (* b (* (fma a 3.0 -1.0) -4.0)) (fma (* a (fma a a a)) 4.0 (pow (fma b b (* a a)) 2.0))) (/ (/ 0.0 (fma a 3.0 -1.0)) (/ b b))) (fma 4.0 (fma b (* (fma a 3.0 -1.0) (- b)) (* a (fma a a a))) (fma (* b b) (fma a a (* b b)) (* a (* a (fma a a (* b b))))))) 1.0)",
    "output_parens": 37,
    "avg_bits_err_input": 0.1839420758309814,
    "avg_bits_err_output": 0.17622987309176064,
    "avg_bits_err_improve": 0.007712202739220769,
    "time": 28842.844970703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (+ (* (* a a) (* b b)) (+ (* b (* b (* b b))) (fma a (* a (* a a)) (* (* a b) (* a b))))) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 32,
    "avg_bits_err_input": 0.1864564212650287,
    "avg_bits_err_output": 0.13940660876142305,
    "avg_bits_err_improve": 0.047049812503605654,
    "time": 27755.67333984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (+ (/ x (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0)) (/ (+ x (+ x x)) (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.228236724088283,
    "avg_bits_err_output": 13.40397663747468,
    "avg_bits_err_improve": -0.17573991338639594,
    "time": 16609.71484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(pow (pow (/ (expm1 (+ x x)) (expm1 x)) 2.0) 0.25)",
    "output_parens": 6,
    "avg_bits_err_input": 41.60856231977707,
    "avg_bits_err_output": 0.064125,
    "avg_bits_err_improve": 41.544437319777074,
    "time": 8619.0341796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (tan x)))",
    "output_parens": 5,
    "avg_bits_err_input": 31.193350173374697,
    "avg_bits_err_output": 31.193350173374697,
    "avg_bits_err_improve": 0,
    "time": 15763.067626953125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 4e-235) (/ (- (if (!= (- (sqrt (- (* b_2 b_2) (* c a))) b_2) 0.0) (* a (/ c (- b_2 (sqrt (- (* b_2 b_2) (* c a)))))) (+ b_2 (sqrt (- (* b_2 b_2) (* c a))))) (+ b_2 b_2)) a) (/ (if (!= (- b_2) 0.0) (* (/ c (- (- b_2) (sqrt (fma a (- c) (* b_2 b_2))))) a) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a))",
    "output_parens": 41,
    "avg_bits_err_input": 34.538466372829376,
    "avg_bits_err_output": 15.31652920440756,
    "avg_bits_err_improve": 19.221937168421817,
    "time": 19384.182861328125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (+ (* a (/ c (+ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)))) (* a (/ c (+ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) (- (sqrt (- (* b_2 b_2) (* a c))) b_2))))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 41,
    "avg_bits_err_input": 34.359671427520006,
    "avg_bits_err_output": 22.20240714940101,
    "avg_bits_err_improve": 12.157264278118994,
    "time": 17610.293701171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (- 1.0 (cos x)) x) (/ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 31.863183204671362,
    "avg_bits_err_output": 31.056252395047103,
    "avg_bits_err_improve": 0.8069308096242587,
    "time": 16318.625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (if (!= (- 1.0 (pow x (/ 1.0 n))) 0.0) (/ 1.0 (/ 1.0 (expm1 (/ (log x) n)))) (expm1 (/ (log x) n))))",
    "output_parens": 17,
    "avg_bits_err_input": 32.715736835205774,
    "avg_bits_err_output": 11.10921260500066,
    "avg_bits_err_improve": 21.606524230205114,
    "time": 33286.06494140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (expm1 (- (log1p N) (log N)))))",
    "output_parens": 6,
    "avg_bits_err_input": 28.931379202585735,
    "avg_bits_err_output": 28.932099773476033,
    "avg_bits_err_improve": -0.0007205708902979779,
    "time": 13894.248046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (/ (+ -1.0 (/ (+ x x) (+ 1.0 x))) (+ x x)) (/ -0.5 x))",
    "output_parens": 8,
    "avg_bits_err_input": 14.697968263542883,
    "avg_bits_err_output": 14.724072275936434,
    "avg_bits_err_improve": -0.0261040123935512,
    "time": 14039.0693359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(+ (- (* (cos eps) (cos x)) (cos x)) (- (* (sin x) (sin eps))))",
    "output_parens": 10,
    "avg_bits_err_input": 39.53909484960069,
    "avg_bits_err_output": 6.2082578421509185,
    "avg_bits_err_improve": 33.330837007449766,
    "time": 24410.671142578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(exp (* 1.0 (log1p (- (cbrt (+ x 1.0)) (- (cbrt x) -1.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 29.693757557383183,
    "avg_bits_err_output": 29.39753272864543,
    "avg_bits_err_improve": 0.2962248287377527,
    "time": 14071.71923828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log1p (- (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 29.664429132167218,
    "avg_bits_err_output": 29.666761434639106,
    "avg_bits_err_improve": -0.0023323024718884255,
    "time": 23070.84228515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.96952294757647,
    "avg_bits_err_output": 21.46813402032787,
    "avg_bits_err_improve": 12.501388927248602,
    "time": 27370.5693359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.07549345058352,
    "avg_bits_err_output": 21.7542797247289,
    "avg_bits_err_improve": 12.321213725854623,
    "time": 26268.684326171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.2319294488308,
    "avg_bits_err_output": 0.022511842188131015,
    "avg_bits_err_improve": 61.20941760664267,
    "time": 13101.07958984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (- 1.0 (fma n (- (log1p n) (log n)) (log1p n))) 0.0) (expm1 (log1p (/ 4.0 (/ 4.0 (+ (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n)))))))) (+ (fma n (- (log1p n) (log n)) (log1p n)) -1.0))",
    "output_parens": 26,
    "avg_bits_err_input": 63.01122761611562,
    "avg_bits_err_output": 1.76985180319686,
    "avg_bits_err_improve": 61.24137581291876,
    "time": 18363.36279296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ (+ eps eps) (+ eps 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.61476200552469,
    "avg_bits_err_output": 0.0155,
    "avg_bits_err_improve": 58.599262005524686,
    "time": 20295.375244140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(if (<= x -1e-154) (if (!= (+ (/ 1.0 x) (/ 1.0 (tan x))) 0.0) (/ (if (!= (+ 1.0 (/ (/ 1.0 x) x)) 0.0) (+ (* (+ 1.0 (/ 1.0 (* x x))) (/ (- (/ -1.0 (pow (tan x) 2.0)) (/ -1.0 (* x x))) (+ 1.0 (/ 1.0 (* x x))))) (* (+ 1.0 (+ (/ 1.0 (pow (tan x) 2.0)) (- -1.0 (/ 1.0 (pow (tan x) 2.0))))) (/ (+ 1.0 (/ 1.0 (* x x))) (+ 2.0 (/ 2.0 (* x x)))))) (+ (/ (/ 1.0 x) x) (/ -1.0 (pow (tan x) 2.0)))) (+ (/ 1.0 x) (/ 1.0 (tan x)))) (+ (/ 1.0 x) (/ -1.0 (tan x)))) (if (<= x 5e-156) (log (+ 1.0 (expm1 (+ (/ 1.0 x) (/ -1.0 (tan x)))))) (if (!= (+ (/ 1.0 x) (/ 1.0 (tan x))) 0.0) (/ (if (!= (+ 1.0 (/ (/ 1.0 x) x)) 0.0) (+ (* (+ 1.0 (/ 1.0 (* x x))) (/ (- (/ -1.0 (pow (tan x) 2.0)) (/ -1.0 (* x x))) (+ 1.0 (/ 1.0 (* x x))))) (* (+ 1.0 (+ (/ 1.0 (pow (tan x) 2.0)) (- -1.0 (/ 1.0 (pow (tan x) 2.0))))) (/ (+ 1.0 (/ 1.0 (* x x))) (+ 2.0 (/ 2.0 (* x x)))))) (+ (/ (/ 1.0 x) x) (/ -1.0 (pow (tan x) 2.0)))) (+ (/ 1.0 x) (/ 1.0 (tan x)))) (+ (/ 1.0 x) (/ -1.0 (tan x))))))",
    "output_parens": 127,
    "avg_bits_err_input": 59.8891276216965,
    "avg_bits_err_output": 54.67759262526796,
    "avg_bits_err_improve": 5.21153499642854,
    "time": 35558.17822265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.466944364512365,
    "avg_bits_err_output": 29.96132041562214,
    "avg_bits_err_improve": 30.505623948890225,
    "time": 28272.298095703125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (+ (+ (/ 1.0 (expm1 x)) -1.0) 1.0) (exp x))",
    "output_parens": 6,
    "avg_bits_err_input": 41.968656923695356,
    "avg_bits_err_output": 0.6268758611497545,
    "avg_bits_err_improve": 41.3417810625456,
    "time": 8680.72998046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.45593533040235,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.455435330402345,
    "time": 2900.492431640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.140522535259453,
    "avg_bits_err_output": 0.014320968774394887,
    "avg_bits_err_improve": 29.126201566485058,
    "time": 4477.878173828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (exp x) (- 1.0 (* (exp x) 2.0))) (exp x))",
    "output_parens": 8,
    "avg_bits_err_input": 29.22318893748671,
    "avg_bits_err_output": 28.34879187348234,
    "avg_bits_err_improve": 0.8743970640043699,
    "time": 20967.85693359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ -1.0 (+ x -1.0)) 0.0) (/ (if (!= (* (/ -1.0 (+ x -1.0)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))) 0.0) (/ (fma (* (/ -1.0 (+ x -1.0)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))) (* (/ -1.0 (+ x -1.0)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))) (* (/ -2.0 x) (* (/ -1.0 (+ x -1.0)) (* (/ -1.0 (+ x -1.0)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))))))) (* (/ -1.0 (+ x -1.0)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))))) (/ (+ (/ -1.0 (+ x -1.0)) (- (/ 2.0 x) (/ 1.0 (+ 1.0 x)))) (+ x -1.0))) (/ -1.0 (+ x -1.0))) (- (/ 1.0 (+ 1.0 x)) (+ (/ -1.0 (+ x -1.0)) (/ 2.0 x))))",
    "output_parens": 72,
    "avg_bits_err_input": 10.087273144814745,
    "avg_bits_err_output": 10.08659049186087,
    "avg_bits_err_improve": 0.0006826529538752624,
    "time": 19899.0234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (if (!= (+ (tan (+ x eps)) 1.0) 0.0) (/ (+ (pow (tan (+ x eps)) 2.0) (tan (+ x eps))) (+ (tan (+ x eps)) 1.0)) (tan (+ x eps))) (tan x))",
    "output_parens": 19,
    "avg_bits_err_input": 37.007013946764296,
    "avg_bits_err_output": 37.12166555569488,
    "avg_bits_err_improve": -0.11465160893058624,
    "time": 20816.5517578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.700997026746272,
    "avg_bits_err_output": 0.16418176718957328,
    "avg_bits_err_improve": 29.5368152595567,
    "time": 11207.754150390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (* (sin eps) (cos x)) (- -1.0 (- (* (sin x) (cos eps)) (+ (sin x) 1.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 37.16570685385567,
    "avg_bits_err_output": 2.3207846914531496,
    "avg_bits_err_improve": 34.84492216240252,
    "time": 20521.644775390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ (- (/ x x) (/ (sqrt x) (sqrt (+ x 1.0)))) (sqrt x)) 0.0)",
    "output_parens": 9,
    "avg_bits_err_input": 19.874430557313985,
    "avg_bits_err_output": 19.8569376503347,
    "avg_bits_err_improve": 0.017492906979285294,
    "time": 17444.0791015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(exp (* 1.0 (log1p (- (atan (+ N 1.0)) (log (+ 1.0 (expm1 (+ 1.0 (atan N)))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 15.409385879312945,
    "avg_bits_err_output": 15.407559136647242,
    "avg_bits_err_improve": 0.0018267426657025965,
    "time": 11995.705810546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.50234736225663,
    "avg_bits_err_output": 1.4976939463424883,
    "avg_bits_err_improve": 28.00465341591414,
    "time": 25284.00634765625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07098120312590143,
    "avg_bits_err_output": 0.07098120312590143,
    "avg_bits_err_improve": 0,
    "time": 11279.19873046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (/ a (/ -1.0 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.46280725844037,
    "avg_bits_err_output": 0.26302857187842527,
    "avg_bits_err_improve": 16.199778686561945,
    "time": 11314.134521484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (if (!= (pow (* (sin (* PI (/ angle 180.0))) b) 2.0) 0.0) (/ 1.0 (/ 1.0 (pow (* (sin (* PI (/ angle 180.0))) b) 2.0))) (pow (* (sin (* PI (/ angle 180.0))) b) 2.0)))",
    "output_parens": 25,
    "avg_bits_err_input": 20.387664189979713,
    "avg_bits_err_output": 20.44855443546065,
    "avg_bits_err_improve": -0.060890245480937466,
    "time": 37090.573974609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (log1p (expm1 (sin (* angle (/ PI 180.0))))) (cos (/ (* PI angle) -180.0))))",
    "output_parens": 14,
    "avg_bits_err_input": 31.456932807889103,
    "avg_bits_err_output": 31.420602580327937,
    "avg_bits_err_improve": 0.036330227561165884,
    "time": 35682.61083984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (/ PI 180.0))) a) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.077501069464418,
    "avg_bits_err_output": 20.054669071468055,
    "avg_bits_err_improve": 0.02283199799636293,
    "time": 38091.712646484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17320996250072115,
    "avg_bits_err_output": 0.16566748125036057,
    "avg_bits_err_improve": 0.007542481250360583,
    "time": 19697.548828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32397650950092693,
    "avg_bits_err_output": 0.31479151777391656,
    "avg_bits_err_improve": 0.009184991727010372,
    "time": 21074.455078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (+ (/ (+ 1.0 (* (* e (cos v)) 2.0)) 2.0) -0.5)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.13916748125036058,
    "avg_bits_err_output": 0.14132556406367186,
    "avg_bits_err_improve": -0.002158082813311285,
    "time": 15996.05419921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (expm1 (log1p (* (sin phi1) (sin phi2)))) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 14,
    "avg_bits_err_input": 16.9079449299305,
    "avg_bits_err_output": 16.915599792994147,
    "avg_bits_err_improve": -0.007654863063645934,
    "time": 36980.646484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.931795447052565,
    "avg_bits_err_output": 0.16554981250360573,
    "avg_bits_err_improve": 52.76624563454896,
    "time": 31344.29833984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.60219856016556,
    "avg_bits_err_output": 0.34318252032412877,
    "avg_bits_err_improve": 28.259016039841434,
    "time": 26378.19482421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (- (* a (* c -4.0)) (* b b)) 0.0) (/ (fma (* (* c a) (* c a)) 16.0 (- (pow b 4.0))) (- (* a (* c -4.0)) (* b b))) (fma b b (* a (* c -4.0)))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 39,
    "avg_bits_err_input": 44.26002592204503,
    "avg_bits_err_output": 0.2526723490613204,
    "avg_bits_err_improve": 44.00735357298371,
    "time": 24536.65966796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.96409567475518,
    "avg_bits_err_output": 21.469297478183236,
    "avg_bits_err_improve": 12.494798196571942,
    "time": 26650.892333984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (* (cos phi1) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1))) (cos phi1)) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.8975531091494992,
    "avg_bits_err_output": 0.8981351940633159,
    "avg_bits_err_improve": -0.0005820849138167272,
    "time": 29765.191162109375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (/ 1.0 (+ 1.0 (exp (* -2.0 x)))) 0.0) (/ (expm1 (* -2.0 x)) (- -1.0 (exp (* -2.0 x)))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 17,
    "avg_bits_err_input": 29.275680607362645,
    "avg_bits_err_output": 0.012719360937770435,
    "avg_bits_err_improve": 29.262961246424876,
    "time": 23373.798828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (* x -2.0)) (- -1.0 (exp (* x -2.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.096357746333474,
    "avg_bits_err_output": 0.6442712406251804,
    "avg_bits_err_improve": 57.452086505708294,
    "time": 18798.9775390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 57.96805335612618,
    "avg_bits_err_output": 0.05757312031259014,
    "avg_bits_err_improve": 57.91048023581359,
    "time": 6887.643798828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.010417481250360577,
    "avg_bits_err_output": 0.010417481250360577,
    "avg_bits_err_improve": 0,
    "time": 2218.01220703125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.698094360937773,
    "avg_bits_err_output": 31.698094360937773,
    "avg_bits_err_improve": 0,
    "time": 4816.8720703125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (if (!= (- 1.0 (+ -1.0 (log (/ (+ 1.0 x) (- 1.0 x))))) 0.0) (/ (- 1.0 (* (+ -1.0 (log (/ (- x (- -2.0 x)) (- 2.0 (+ x x))))) (+ -1.0 (log (/ (+ 1.0 x) (- 1.0 x)))))) (- 1.0 (+ -1.0 (log (/ (+ 1.0 x) (- 1.0 x)))))) (log (/ (+ 1.0 x) (- 1.0 x)))))",
    "output_parens": 34,
    "avg_bits_err_input": 58.610680513426786,
    "avg_bits_err_output": 58.63181858557961,
    "avg_bits_err_improve": -0.02113807215282293,
    "time": 24037.728515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0105,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0.0002500000000000002,
    "time": 2371.05419921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.124,
    "avg_bits_err_output": 0.124,
    "avg_bits_err_improve": 0,
    "time": 22881.16748046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1261462406251803,
    "avg_bits_err_output": 0.1261462406251803,
    "avg_bits_err_improve": 0,
    "time": 13924.13623046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (- (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0))) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 39.29166150430416,
    "avg_bits_err_output": 0.12676039564391442,
    "avg_bits_err_improve": 39.164901108660246,
    "time": 27754.6845703125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.241415957400738,
    "avg_bits_err_output": 14.241415957400738,
    "avg_bits_err_improve": 0,
    "time": 3758.6630859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (log1p (expm1 (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (cos phi1) (* (sin delta) (cos theta))))))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.15151540977261335,
    "avg_bits_err_output": 0.15607723787361444,
    "avg_bits_err_improve": -0.004561828101001086,
    "time": 40508.390380859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.923375528437695,
    "avg_bits_err_output": 0.16821729375396624,
    "avg_bits_err_improve": 52.75515823468373,
    "time": 28415.52880859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (!= (/ (if (!= (- b (- (sqrt (fma -3.0 (* c a) (* b b))))) 0.0) (* c (/ (* a 3.0) (- (- b) (sqrt (fma -3.0 (* c a) (* b b)))))) (- (sqrt (fma -3.0 (* c a) (* b b))) b)) (* a 3.0)) 0.0) (- (/ (pow (/ (if (!= (+ b (sqrt (fma -3.0 (* c a) (* b b)))) 0.0) (* (* a 3.0) (/ c (- (- (sqrt (fma -3.0 (* c a) (* b b)))) b))) (- (sqrt (fma -3.0 (* c a) (* b b))) b)) (* a 3.0)) 2.0) (/ (if (!= (+ b (sqrt (fma -3.0 (* c a) (* b b)))) 0.0) (* (* a 3.0) (/ c (- (- (sqrt (fma -3.0 (* c a) (* b b)))) b))) (- (sqrt (fma -3.0 (* c a) (* b b))) b)) (* a 3.0))) 0.0) (/ (if (!= (- b (- (sqrt (fma -3.0 (* c a) (* b b))))) 0.0) (* c (/ (* a 3.0) (- (- b) (sqrt (fma -3.0 (* c a) (* b b)))))) (- (sqrt (fma -3.0 (* c a) (* b b))) b)) (* a 3.0)))",
    "output_parens": 99,
    "avg_bits_err_input": 28.7157085658012,
    "avg_bits_err_output": 0.38568043344912223,
    "avg_bits_err_improve": 28.33002813235208,
    "time": 30170.6865234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 44.29182590516657,
    "avg_bits_err_output": 0.23307838438203105,
    "avg_bits_err_improve": 44.058747520784536,
    "time": 27324.237548828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 34.013940608330714,
    "avg_bits_err_output": 21.50028209221972,
    "avg_bits_err_improve": 12.513658516110993,
    "time": 22658.674072265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.473314311980436,
    "avg_bits_err_output": 13.473314311980436,
    "avg_bits_err_improve": 0,
    "time": 35606.283203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 28.91820384602095,
    "avg_bits_err_output": 0.5088977234459241,
    "avg_bits_err_improve": 28.40930612257503,
    "time": 22439.998291015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(if (!= (/ x (+ 1.0 x)) 0.0) (/ (+ (pow (/ x (+ 1.0 x)) 2.0) (/ x (+ (* x x) -1.0))) (/ x (+ 1.0 x))) (+ (/ x (+ 1.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.011,
    "avg_bits_err_output": 0.013094360937770434,
    "avg_bits_err_improve": -0.002094360937770434,
    "time": 9624.451416015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (- (/ -1.0 (- x 1.0)) (/ (+ (+ (- 1.0 x) (- 1.0 x)) (* -2.0 (- (- x) 0.0))) (+ x (+ x -2.0)))) (+ x 1.0))",
    "output_parens": 15,
    "avg_bits_err_input": 14.696180249082623,
    "avg_bits_err_output": 12.268914274040737,
    "avg_bits_err_improve": 2.4272659750418857,
    "time": 18064.032958984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1e-310) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* F -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt F) (sqrt (* (- (pow B 2.0) (* A (* C 4.0))) -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 46,
    "avg_bits_err_input": 52.2410603264072,
    "avg_bits_err_output": 46.45446671555337,
    "avg_bits_err_improve": 5.786593610853828,
    "time": 44420.658447265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -4.5e+125) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (- (- C A) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) PI)) (if (<= A -11200000.0) (* (atan (* (- (sqrt (+ (* (- C A) (- C A)) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI)) (if (<= A 1.35e-284) (* 180.0 (/ (atan (/ (* 1.0 (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (- C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) B)) PI)) (* (atan (/ (- C (+ A (sqrt (+ (* (- C A) (- C A)) (pow B 2.0))))) B)) (/ 180.0 PI)))))",
    "output_parens": 93,
    "avg_bits_err_input": 29.474804534991712,
    "avg_bits_err_output": 27.899192653763997,
    "avg_bits_err_improve": 1.5756118812277151,
    "time": 28628.28271484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -5e-310) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- F))) (/ (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (sqrt F)) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.72704333584218,
    "avg_bits_err_output": 46.865614089872885,
    "avg_bits_err_improve": 5.861429245969298,
    "time": 45297.954345703125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.773959931546122,
    "avg_bits_err_output": 15.773959931546122,
    "avg_bits_err_improve": 0,
    "time": 18249.183837890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -5e-241) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (if (<= g 2e+146) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- g) 0.0) (/ (* (- g) (- (sqrt (fma g g (* h (- h)))) g)) (- g)) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))) (+ (cbrt (* (/ 0.5 a) (+ (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))) (* (cbrt (fma (sqrt (+ g h)) (sqrt (- g h)) g)) (cbrt (/ -0.5 a))))))",
    "output_parens": 87,
    "avg_bits_err_input": 35.86431059287852,
    "avg_bits_err_output": 8.929032093681423,
    "avg_bits_err_improve": 26.935278499197096,
    "time": 33117.462646484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (- (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))) (* (sin (* PI 0.6666666666666666)) (sin (/ (acos (/ g (- h))) 3.0)))) (* (expm1 (log1p (sin (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) -3.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.9894441894575653,
    "avg_bits_err_output": 0.03718909844281852,
    "avg_bits_err_improve": 0.9522550910147468,
    "time": 19362.451416015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (+ (exp a) (expm1 b)) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.7002193609377705,
    "avg_bits_err_output": 0.7256982392205324,
    "avg_bits_err_improve": -0.025478878282761963,
    "time": 15607.9072265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -2e+290) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-300) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e-296) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+294) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.460099516228876,
    "avg_bits_err_output": 2.5307256400191145,
    "avg_bits_err_improve": 8.929373876209763,
    "time": 10516.623779296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5379376695931969,
    "avg_bits_err_output": 0.467375,
    "avg_bits_err_improve": 0.0705626695931969,
    "time": 12048.967529296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.04) (log (if (!= (- x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 500000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 43,
    "avg_bits_err_input": 53.05676708120647,
    "avg_bits_err_output": 0.15609540603723418,
    "avg_bits_err_improve": 52.90067167516924,
    "time": 14035.27978515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.675553231529634,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.675553231529634,
    "time": 3408.1044921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (+ x (+ x -2.0)) (- -2.0 (+ x x))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.016323120312590145,
    "avg_bits_err_improve": -0.005073120312590145,
    "time": 3139.63232421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1147.537109375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (- (+ (/ (/ 6.0 r) (+ r (+ r (+ r r)))) (/ 0.5 (* r r))) 0.0)) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 20,
    "avg_bits_err_input": 13.006076314377172,
    "avg_bits_err_output": 0.576819700972613,
    "avg_bits_err_improve": 12.429256613404558,
    "time": 25934.71875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma x1 (* x1 (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)) (fma (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (* (* 2.0 (/ x1 (fma x1 x1 1.0))) (+ -3.0 (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)))) (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* 2.0 (/ x1 (fma x1 x1 1.0))) (* x1 (* (/ (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (fma x1 x1 1.0)) (/ 2.0 (fma x1 x1 1.0))))))))))))))",
    "output_parens": 73,
    "avg_bits_err_input": 0.5146300528268175,
    "avg_bits_err_output": 0.25327207945411023,
    "avg_bits_err_improve": 0.2613579733727073,
    "time": 75614.90576171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.04225740340445,
    "avg_bits_err_output": 1.3973193946950893,
    "avg_bits_err_improve": 16.64493800870936,
    "time": 10004.025634765625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.19424060156295073,
    "avg_bits_err_output": 0.19424060156295073,
    "avg_bits_err_improve": 0,
    "time": 9472.64306640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0035,
    "avg_bits_err_output": 0.0035,
    "avg_bits_err_improve": 0,
    "time": 3096.327880859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (+ (/ PI (* (* 2.0 (+ b a)) a)) (/ (/ (/ PI -2.0) (+ b a)) b)) (- b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.080555225714622,
    "avg_bits_err_output": 0.24230470000576892,
    "avg_bits_err_improve": 13.838250525708853,
    "time": 16900.683837890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (- (/ -1.0 (- (exp (- x (* eps x))))) (/ (- (/ -1.0 (exp (- x (* eps x)))) (/ -1.0 (exp (fma eps x x)))) eps)) (/ 1.0 (- (exp (fma eps x x))))) 2.0)",
    "output_parens": 21,
    "avg_bits_err_input": 29.945426673179135,
    "avg_bits_err_output": 0.9239520108882741,
    "avg_bits_err_improve": 29.02147466229086,
    "time": 22178.65478515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- (+ 2.0 (/ (/ -2.0 t) (+ 2.0 (/ 2.0 t)))) (/ (/ 2.0 t) (+ 2.0 (/ 2.0 t))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.020125,
    "avg_bits_err_output": 0.022625,
    "avg_bits_err_improve": -0.0024999999999999988,
    "time": 6714.529541015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.02475,
    "avg_bits_err_output": 0.02475,
    "avg_bits_err_improve": 0,
    "time": 10695.941650390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (* 2.0 (pow (/ t (- t -1.0)) 2.0)) (+ -1.0 (* (pow (/ t (- t -1.0)) 2.0) -2.0))) (+ 2.0 (* 4.0 (* (/ t (- t -1.0)) (/ t (- t -1.0))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.0315,
    "avg_bits_err_output": 0.005125,
    "avg_bits_err_improve": 0.026375,
    "time": 13269.140869140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3189.98779296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8771.793701171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 3321.29150390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(- (+ (/ -10.0 (fma x x -1.0)) 1.0) 1.0)",
    "output_parens": 4,
    "avg_bits_err_input": 7.860831900243411,
    "avg_bits_err_output": 0.2485,
    "avg_bits_err_improve": 7.612331900243411,
    "time": 34317.11083984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.365979288052949,
    "avg_bits_err_output": 7.365979288052949,
    "avg_bits_err_improve": 0,
    "time": 15955.25537109375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.15603944471507,
    "avg_bits_err_output": 0.04307388849343496,
    "avg_bits_err_improve": 16.112965556221635,
    "time": 11530.56640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (if (!= (* (exp (* x (* x 10.0))) (- (+ (cos x) 2.0) -1.0)) 0.0) (/ (- (pow (exp (* x x)) 20.0) (pow (* (pow (exp (* x x)) 10.0) (+ (cos x) 2.0)) 2.0)) (* (pow (exp (* x x)) 10.0) (- -1.0 (+ (cos x) 2.0)))) (* (pow (exp (* x x)) 10.0) (+ (+ (cos x) 2.0) -1.0))) (pow (exp (* x x)) 10.0))",
    "output_parens": 39,
    "avg_bits_err_input": 3.531589396523647,
    "avg_bits_err_output": 3.0687421148340874,
    "avg_bits_err_improve": 0.4628472816895597,
    "time": 19762.372314453125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -5e+21) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (* (/ (+ x x) (+ x (/ 1.0 x))) (/ 1.0 (+ x x))) 0.0) (/ x (fma x x 1.0))) (if (<= x 5e-6) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (* (/ (+ x x) (+ x (/ 1.0 x))) (/ 1.0 (+ x x))) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 15.335924263130591,
    "avg_bits_err_output": 0.019875,
    "avg_bits_err_improve": 15.31604926313059,
    "time": 9868.085693359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.289253767540075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.289253767540075,
    "time": 4764.0009765625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.72356555091175,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.72306555091175,
    "time": 4580.55322265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2945,
    "avg_bits_err_improve": 63.7055,
    "time": 16908.23046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ (* t 1.6e-47) 4e-16) t)",
    "output_parens": 3,
    "avg_bits_err_input": 61.84325825111469,
    "avg_bits_err_output": 0.352625,
    "avg_bits_err_improve": 61.49063325111469,
    "time": 16049.102294921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.07549345058352,
    "avg_bits_err_output": 21.7542797247289,
    "avg_bits_err_improve": 12.321213725854623,
    "time": 27107.540771484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.96409567475518,
    "avg_bits_err_output": 21.469297478183236,
    "avg_bits_err_improve": 12.494798196571942,
    "time": 30432.00146484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2130.330810546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.09852066573798,
    "avg_bits_err_output": 0.01125,
    "avg_bits_err_improve": 40.08727066573798,
    "time": 8878.546142578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.502515420042872,
    "avg_bits_err_output": 20.502515420042872,
    "avg_bits_err_improve": 0,
    "time": 5391.803955078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6591384579897333,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6591384579897333,
    "time": 6603.000244140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037375,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.0365,
    "time": 7271.15087890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ a b)) (* a (+ a b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021948120312590146,
    "avg_bits_err_output": 0.0175,
    "avg_bits_err_improve": 0.004448120312590145,
    "time": 2957.126953125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.014625,
    "avg_bits_err_output": 0.014625,
    "avg_bits_err_improve": 0,
    "time": 2423.34716796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0,
    "time": 1825.808837890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ a (+ c b))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39961353437914676,
    "avg_bits_err_output": 0.228,
    "avg_bits_err_improve": 0.17161353437914675,
    "time": 6719.085693359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (if (!= (/ -0.5 (- -1.0 (cos x))) 0.0) (/ (fma (/ (/ (* -0.5 (cos (* x -2.0))) (- -2.0 (* (cos x) 2.0))) (- -1.0 (cos x))) 1.0 (/ 0.25 (pow (- -1.0 (cos x)) 2.0))) (/ -0.5 (- -1.0 (cos x)))) (/ (expm1 (log (pow (cos x) 2.0))) (- -1.0 (cos x)))) (- 1.0 (cos x)))",
    "output_parens": 37,
    "avg_bits_err_input": 30.290450352934208,
    "avg_bits_err_output": 30.246508417828977,
    "avg_bits_err_improve": 0.04394193510523081,
    "time": 14506.267333984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.796915210370255,
    "avg_bits_err_output": 0.29532312031259017,
    "avg_bits_err_improve": 24.501592090057663,
    "time": 13211.6669921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (* x x) (- (pow (sin x) 2.0))) 0.0) (/ (fma (* x x) (* x x) (- (pow (sin x) 4.0))) (- (* x x) (- (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 34,
    "avg_bits_err_input": 29.532143519155557,
    "avg_bits_err_output": 29.427224803094745,
    "avg_bits_err_improve": 0.10491871606081205,
    "time": 35291.590087890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006198120312590144,
    "avg_bits_err_output": 0.006198120312590144,
    "avg_bits_err_improve": 0,
    "time": 2117.09228515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 5e-251) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (* 100.0 (/ (pow (+ (/ i n) 1.0) n) (/ i n))) (if (!= (/ 100.0 (/ i n)) 0.0) (- (/ (/ 10000.0 (/ i n)) 100.0) 0.0) (/ 100.0 (/ i n)))))",
    "output_parens": 32,
    "avg_bits_err_input": 47.44885723323919,
    "avg_bits_err_output": 14.359678381311207,
    "avg_bits_err_improve": 33.08917885192798,
    "time": 28878.5927734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= c -7.5e-58) (+ (* d (/ b (fma d d (* c c)))) (* a (/ c (fma c c (* d d))))) (if (<= c 2.4e+72) (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (+ (* d (/ b (fma d d (* c c)))) (* a (/ c (fma c c (* d d)))))))",
    "output_parens": 29,
    "avg_bits_err_input": 26.07241525507372,
    "avg_bits_err_output": 24.097631279040616,
    "avg_bits_err_improve": 1.9747839760331054,
    "time": 16352.48828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma d d (* c c))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 2e+297) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma d d (* c c)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.106454942368067,
    "avg_bits_err_output": 22.757017176074317,
    "avg_bits_err_improve": 3.3494377662937502,
    "time": 19366.734130859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (+ (* ux (- maxCos)) ux))",
    "output_parens": 4,
    "avg_bits_err_input": 0.033625,
    "avg_bits_err_output": 0.022340287485935275,
    "avg_bits_err_improve": 0.011284712514064727,
    "time": 5760.62890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- ux (- (+ (* ux (* maxCos (fma ux maxCos (- 1.0 ux)))) (* ux (* maxCos (- 1.0 ux)))) (- ux (* ux ux))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.369883984414619,
    "avg_bits_err_output": 0.5571733318731327,
    "avg_bits_err_improve": 12.812710652541487,
    "time": 28314.517333984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- 1.0 (log (+ 1.0 (expm1 (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))) (- (* (fma ux maxCos (- 1.0 ux)) (* ux maxCos))))))",
    "output_parens": 19,
    "avg_bits_err_input": 13.402046285481308,
    "avg_bits_err_output": 12.2395279821407,
    "avg_bits_err_improve": 1.1625183033406081,
    "time": 26210.849609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) xi) (fma (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (- maxCos (* ux maxCos)) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.33738181104624615,
    "avg_bits_err_output": 0.32829889840653403,
    "avg_bits_err_improve": 0.009082912639712115,
    "time": 45149.513671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (- (+ 1.0 (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax))))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.20460615593600745,
    "avg_bits_err_output": 0.20700348523920598,
    "avg_bits_err_improve": -0.0023973293031985254,
    "time": 40984.66455078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (/ 1.0 (/ 1.0 (/ u1 (- 1.0 u1)))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 14,
    "avg_bits_err_input": 0.5396182899107279,
    "avg_bits_err_output": 0.554605575255183,
    "avg_bits_err_improve": -0.014987285344455037,
    "time": 20530.486328125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (pow (/ (/ (* u1 u1) (- 1.0 u1)) (- 1.0 u1)) 0.25) (cos (* 6.28318530718 u2)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.3202862910193155,
    "avg_bits_err_output": 0.3322277098072713,
    "avg_bits_err_improve": -0.011941418787955793,
    "time": 20926.301513671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (expm1 (log1p (exp (/ PI s)))))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 22,
    "avg_bits_err_input": 0.33423293891705724,
    "avg_bits_err_output": 0.33470513986439016,
    "avg_bits_err_improve": -0.0004722009473329125,
    "time": 57509.361572265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.06337955531749875,
    "avg_bits_err_output": 0.06337955531749875,
    "avg_bits_err_improve": 0,
    "time": 15300.014404296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (/ (/ 1.0 s) (pow (+ (exp (/ (fabs x) (- s))) 1.0) 2.0)) (exp (/ (fabs x) (- s))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.16429215136219916,
    "avg_bits_err_output": 0.20638623691637442,
    "avg_bits_err_improve": -0.042094085554175265,
    "time": 17891.6875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641084826074513,
    "avg_bits_err_output": 0.6641084826074513,
    "avg_bits_err_improve": 0,
    "time": 22831.3671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.16916530269330018,
    "avg_bits_err_output": 0.16916530269330018,
    "avg_bits_err_improve": 0,
    "time": 20817.282470703125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (if (!= (sqrt (fma eta eta (/ (* sinTheta_O sinTheta_O) (- (sqrt (- (fma sinTheta_O sinTheta_O -1.0))))))) 0.0) (+ (/ 0.5 (/ 1.0 (sqrt (fma eta eta (* (- sinTheta_O) (/ sinTheta_O (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))) (+ (* eta (/ eta (+ (sqrt (fma eta eta (* (- sinTheta_O) (/ sinTheta_O (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))) (sqrt (fma eta eta (* (- sinTheta_O) (/ sinTheta_O (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))) (/ (* sinTheta_O (/ sinTheta_O (* (sqrt (- 1.0 (* sinTheta_O sinTheta_O))) -2.0))) (sqrt (fma eta eta (* (- sinTheta_O) (/ sinTheta_O (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))) (sqrt (fma eta eta (/ (* sinTheta_O sinTheta_O) (- (sqrt (- (fma sinTheta_O sinTheta_O -1.0))))))))))",
    "output_parens": 66,
    "avg_bits_err_input": 2.514782104455441,
    "avg_bits_err_output": 2.282053878867964,
    "avg_bits_err_improve": 0.23272822558747697,
    "time": 37247.201171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_i (/ sinTheta_O v)))) (* (/ 0.5 v) (/ cosTheta_i (* v (sinh (/ 1.0 v))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4633497118029939,
    "avg_bits_err_output": 0.39161542713056924,
    "avg_bits_err_improve": 0.07173428467242465,
    "time": 28663.017578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp 0.6931) (exp (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (log (/ 0.5 v)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.12518526195804403,
    "avg_bits_err_output": 0.12694035752606955,
    "avg_bits_err_improve": -0.0017550955680255276,
    "time": 26310.263671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow (* alpha alpha) PI))) (- (- (- (+ (* alpha alpha) 1.0) (- (* alpha alpha) (* (* alpha cosTheta) (* alpha cosTheta)))) 1.0) (+ -1.0 (* cosTheta cosTheta))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.46386933414691894,
    "avg_bits_err_output": 0.45462265520657347,
    "avg_bits_err_improve": 0.009246678940345476,
    "time": 26922.76806640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (log1p (+ (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0) -1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 1.3216063405233007,
    "avg_bits_err_output": 1.201066878650842,
    "avg_bits_err_improve": 0.12053946187245868,
    "time": 28128.669677734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (log1p (if (!= (- 1.0 (/ -1.0 (fma 4.0 u -1.0))) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ 1.0 (/ -1.0 (fma 4.0 u -1.0))) 0.0) (/ (if (!= (+ 1.0 (/ 1.0 (pow (fma 4.0 u -1.0) 2.0))) 0.0) (/ (- 1.0 (/ 1.0 (pow (fma 4.0 u -1.0) 4.0))) (+ -1.0 (/ -1.0 (pow (fma 4.0 u -1.0) 2.0)))) (expm1 (* (log (fma 4.0 u -1.0)) -2.0))) (+ 1.0 (/ -1.0 (fma 4.0 u -1.0)))) (+ -1.0 (/ -1.0 (fma 4.0 u -1.0)))))) (+ (/ -1.0 (fma 4.0 u -1.0)) -1.0))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.438894629017375,
    "avg_bits_err_output": 11.710668141538209,
    "avg_bits_err_improve": 0.7282264874791657,
    "time": 27653.365234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (* 2.0 PI)))) (* 0.75 (/ (exp (/ (/ r -3.0) s)) (* s (* PI 6.0))))) r)",
    "output_parens": 16,
    "avg_bits_err_input": 0.14841609693991722,
    "avg_bits_err_output": 0.148146425606883,
    "avg_bits_err_improve": 0.0002696713330342382,
    "time": 23717.3017578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9172214596710796,
    "avg_bits_err_output": 0.7124615228132269,
    "avg_bits_err_improve": 0.20475993685785265,
    "time": 29780.82568359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.7000439462243894,
    "avg_bits_err_output": 0.48994152699850196,
    "avg_bits_err_improve": 0.2101024192258874,
    "time": 19814.362548828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.726960596178067,
    "avg_bits_err_output": 0.5357439350626454,
    "avg_bits_err_improve": 13.191216661115421,
    "time": 21199.80615234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (pow (- (log1p (- u1))) 0.5) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.768073639905353,
    "avg_bits_err_output": 0.3062655690270495,
    "avg_bits_err_improve": 13.461808070878304,
    "time": 21307.073486328125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- alpha) (* (log1p (- u0)) alpha))",
    "output_parens": 5,
    "avg_bits_err_input": 14.356825423854707,
    "avg_bits_err_output": 0.3233255640636719,
    "avg_bits_err_improve": 14.033499859791034,
    "time": 14046.159423828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (/ -1.0 (+ (if (!= (/ (+ cos2phi (+ cos2phi cos2phi)) (* (* alphax alphax) -2.0)) 0.0) (/ 2.0 (/ 4.0 (/ (+ cos2phi (+ cos2phi cos2phi)) (* alphax alphax)))) (/ (+ cos2phi (+ cos2phi cos2phi)) (* alphax (+ alphax alphax)))) (+ (/ cos2phi (* alphax (+ alphax alphax))) (/ (+ sin2phi sin2phi) (* alphay alphay))))) (+ (log1p (- u0)) (log1p (- u0))))",
    "output_parens": 33,
    "avg_bits_err_input": 12.657366776701199,
    "avg_bits_err_output": 0.6401748612865812,
    "avg_bits_err_improve": 12.017191915414617,
    "time": 16369.156005859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (+ (/ (/ (tan (* PI l)) F) (+ F (+ F (+ F F)))) (/ (* (tan (* PI l)) (+ (/ 1.0 F) (/ 2.0 F))) (+ F (+ F (+ F F))))))",
    "output_parens": 20,
    "avg_bits_err_input": 16.61431987146278,
    "avg_bits_err_output": 12.421037710072383,
    "avg_bits_err_improve": 4.193282161390396,
    "time": 20858.166748046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (+ (/ x (tan B)) (/ 1.0 (sin B))) (* (/ x (tan B)) 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.21891901566846755,
    "avg_bits_err_output": 0.17302277504328728,
    "avg_bits_err_improve": 0.045896240625180273,
    "time": 15627.802734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.808494131170866,
    "avg_bits_err_output": 10.454000934505217,
    "avg_bits_err_improve": 3.354493196665649,
    "time": 21867.25244140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(if (!= (/ (/ (log (+ (/ -1.0 (expm1 (* PI (* (/ f -4.0) 2.0)))) (/ 1.0 (expm1 (* PI (* (/ f -4.0) -2.0)))))) (/ PI -4.0)) 2.0) 0.0) (/ (+ (* (/ (/ (log (+ (/ -1.0 (expm1 (* PI (* (/ f -4.0) 2.0)))) (/ 1.0 (expm1 (* PI (* (/ f -4.0) -2.0)))))) (/ PI -4.0)) 2.0) (/ (/ (log (+ (/ -1.0 (expm1 (* PI (* (/ f -4.0) 2.0)))) (/ 1.0 (expm1 (* PI (* (/ f -4.0) -2.0)))))) (/ PI -4.0)) 2.0)) (* (/ (/ (log (+ (/ -1.0 (expm1 (* PI (* (/ f -4.0) 2.0)))) (/ 1.0 (expm1 (* PI (* (/ f -4.0) -2.0)))))) (/ PI -4.0)) 2.0) (/ (/ (log (+ (/ -1.0 (expm1 (* PI (* (/ f -4.0) 2.0)))) (/ 1.0 (expm1 (* PI (* (/ f -4.0) -2.0)))))) (/ PI -4.0)) 2.0))) (/ (/ (log (+ (/ -1.0 (expm1 (* PI (* (/ f -4.0) 2.0)))) (/ 1.0 (expm1 (* PI (* (/ f -4.0) -2.0)))))) (/ PI -4.0)) 2.0)) (/ (log (+ (/ -1.0 (expm1 (* PI (* (/ f -4.0) 2.0)))) (/ 1.0 (expm1 (* PI (* (/ f -4.0) -2.0)))))) (/ PI -4.0)))",
    "output_parens": 110,
    "avg_bits_err_input": 61.56136905097554,
    "avg_bits_err_output": 0.7383809399504939,
    "avg_bits_err_improve": 60.82298811102505,
    "time": 40538.98681640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= (* l l) 2e+302) (/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (+ x 1.0) (+ -1.0 x)) (* 2.0 (* t t))) (+ (* (* l l) (/ (+ x 1.0) (+ -1.0 x))) (- (* l l)))))) (/ (* (sqrt 2.0) t) (sqrt (fma l (- l) (fma l (fma l -1.0 l) (/ (+ (* (+ x 1.0) (* l l)) (* (+ x 1.0) (* 2.0 (* t t)))) (+ x -1.0)))))))",
    "output_parens": 40,
    "avg_bits_err_input": 42.539973515654495,
    "avg_bits_err_output": 36.520203636437856,
    "avg_bits_err_improve": 6.019769879216639,
    "time": 29631.605224609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.8189911087062542,
    "avg_bits_err_output": 3.8189911087062542,
    "avg_bits_err_improve": 0,
    "time": 31093.011962890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.8909181020552495,
    "avg_bits_err_output": 0.015125,
    "avg_bits_err_improve": 0.8757931020552494,
    "time": 11343.571044921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (* (/ t l) (/ t l)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.300471547290924,
    "avg_bits_err_output": 10.300471547290924,
    "avg_bits_err_improve": 0,
    "time": 19134.291015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -4.7e-228) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (sqrt (fabs (* n U)))) (if (<= n -1.1e-278) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= n 3.25e-276) (* (exp (log (sqrt (* 2.0 (fabs (- (fma 2.0 (* l (/ l Om)) (* (pow (/ l Om) 2.0) (* n (- U U*)))) t)))))) (sqrt (fabs (* n U)))) (if (<= n 4.5e-219) (* (sqrt (* 2.0 (* U (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt n)) (if (<= n 3.4e-179) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (sqrt (fabs (* n U)))) (if (<= n 6.6e-111) (sqrt (fma U (* (* 2.0 n) (- t (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (* l (/ l Om)))))) 0.0)) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (sqrt (fabs (* n U))))))))))",
    "output_parens": 120,
    "avg_bits_err_input": 34.25266843955151,
    "avg_bits_err_output": 23.287782553092953,
    "avg_bits_err_improve": 10.96488588645856,
    "time": 43542.658935546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (tan k) (/ (sin k) l)) (* (/ k t) (* k (/ (/ (pow t 3.0) l) t)))))",
    "output_parens": 12,
    "avg_bits_err_input": 47.49037683069059,
    "avg_bits_err_output": 31.92683574000992,
    "avg_bits_err_improve": 15.563541090680673,
    "time": 43892.02734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= k -1e+44) (/ 2.0 (* (/ (* (+ 2.0 (pow (/ k t) 2.0)) (tan k)) l) (* (sin k) (/ (pow t 3.0) l)))) (if (<= k 3e-118) (/ 2.0 (* (/ (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (pow t 3.0))) l) (/ (tan k) l))) (/ 2.0 (/ (* (tan k) (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ (pow t 3.0) l)))) l))))",
    "output_parens": 40,
    "avg_bits_err_input": 32.127143358607746,
    "avg_bits_err_output": 27.269755364691974,
    "avg_bits_err_improve": 4.857387993915772,
    "time": 26177.052001953125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (fma a1 a1 (* a2 a2)) (sqrt 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5379524469000625,
    "avg_bits_err_output": 0.49096842345580066,
    "avg_bits_err_improve": 0.046984023444261835,
    "time": 22913.839599609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (* (sqrt 2.0) (pow (* 2.0 (* PI n)) (* k -0.5))) (/ (sqrt (* PI n)) (sqrt k)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4852067580956259,
    "avg_bits_err_output": 0.4485502463679444,
    "avg_bits_err_improve": 0.03665651172768153,
    "time": 19609.736572265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (- (exp (+ l l)) (exp (* l -2.0))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 25,
    "avg_bits_err_input": 17.53553653168156,
    "avg_bits_err_output": 17.55521596511112,
    "avg_bits_err_improve": -0.019679433429558912,
    "time": 26945.962158203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (log1p (+ (+ 2.0 (expm1 (cos (- (* K (/ (+ m n) 2.0)) M)))) -2.0)) (exp (- (fabs (- m n)) (+ l (pow (- (/ (+ m n) 2.0) M) 2.0)))))",
    "output_parens": 19,
    "avg_bits_err_input": 15.58374602098597,
    "avg_bits_err_output": 15.553186465570269,
    "avg_bits_err_improve": 0.03055955541570121,
    "time": 17922.97314453125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (sqrt (+ 1.0 (pow (/ (/ U (* 2.0 J)) (cos (/ K 2.0))) 2.0))) (* (cos (/ K 2.0)) -2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 18.186511842188136,
    "avg_bits_err_output": 18.18670996250072,
    "avg_bits_err_improve": -0.00019812031258581442,
    "time": 34992.705810546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* M D) -1e+111) (* w0 (sqrt (- 1.0 (* (/ M (+ d d)) (* D (/ (* D (* h (/ M (+ d d)))) l)))))) (if (<= (* M D) 1e+36) (* w0 (sqrt (- 1.0 (/ (* (pow (/ (/ (* D M) d) 2.0) 2.0) h) l)))) (* w0 (sqrt (- 1.0 (* (/ M d) (* (* D (* (/ M d) h)) (/ D (* 4.0 l)))))))))",
    "output_parens": 38,
    "avg_bits_err_input": 14.013086210429998,
    "avg_bits_err_output": 9.745885744178302,
    "avg_bits_err_improve": 4.267200466251696,
    "time": 21816.7626953125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 4e-308) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (/ A (* V l)) 1e+303) (* c0 (sqrt (+ (/ (/ A (* l V)) 4.0) (/ (+ A (+ A A)) (* (+ l l) (+ V V)))))) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V)))))))",
    "output_parens": 36,
    "avg_bits_err_input": 18.845743201392345,
    "avg_bits_err_output": 11.620482112685915,
    "avg_bits_err_improve": 7.22526108870643,
    "time": 18356.766357421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= d -1.15e+215) (/ (/ (* c0 (if (!= (- (* c0 (/ (* d (/ d w)) (* D (* D h)))) (sqrt (- (pow (* c0 (/ (* d (/ d w)) (* D (* D h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* c0 (if (!= (* d (/ d (* (* D h) (* w D)))) 0.0) (/ 1.0 (/ 1.0 (* d (/ d (* (* D h) (* w D)))))) (* d (/ d (* (* D h) (* w D)))))) (sqrt (* (+ M (* (/ d (* (* D h) (* w D))) (* c0 d))) (- (* (/ d (* (* D h) (* w D))) (* c0 d)) M)))))) (fma c0 (/ (* d (/ d w)) (* D (* D h))) (sqrt (- (pow (* c0 (/ (* d (/ d w)) (* D (* D h)))) 2.0) (* M M)))))) w) 2.0) (if (<= d -8.4e+66) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (/ (* (/ d D) c0) (* w h)) D)) (sqrt (- (pow (* d (/ (/ (* (/ d D) c0) (* w h)) D)) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (/ (* (/ d D) c0) (* w h)) D)) (sqrt (- (pow (* d (/ (/ (* (/ d D) c0) (* w h)) D)) 2.0) (* M M)))))) (fma d (/ (/ (* (/ d D) c0) (* w h)) D) (sqrt (- (pow (* d (/ (/ (* (/ d D) c0) (* w h)) D)) 2.0) (* M M)))))) (if (<= d -2.2e-84) (/ (/ (* c0 (if (!= (- (* c0 (/ (* d (/ d w)) (* D (* D h)))) (sqrt (- (pow (* c0 (/ (* d (/ d w)) (* D (* D h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* c0 (if (!= (* d (/ d (* (* D h) (* w D)))) 0.0) (/ 1.0 (/ 1.0 (* d (/ d (* (* D h) (* w D)))))) (* d (/ d (* (* D h) (* w D)))))) (sqrt (* (+ M (* (/ d (* (* D h) (* w D))) (* c0 d))) (- (* (/ d (* (* D h) (* w D))) (* c0 d)) M)))))) (fma c0 (/ (* d (/ d w)) (* D (* D h))) (sqrt (- (pow (* c0 (/ (* d (/ d w)) (* D (* D h)))) 2.0) (* M M)))))) w) 2.0) (if (<= d 1.15e-110) (/ (/ (* c0 (if (!= (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))) 0.0) (/ (* M (- M)) (- (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M))) (* c0 (/ (pow (/ d D) 2.0) (* w h))))) (fma c0 (/ (pow (/ d D) 2.0) (* w h)) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) w) 2.0) (/ (/ (* c0 (if (!= (- (* c0 (/ (* d (/ d w)) (* D (* D h)))) (sqrt (- (pow (* c0 (/ (* d (/ d w)) (* D (* D h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* c0 (if (!= (* d (/ d (* (* D h) (* w D)))) 0.0) (/ 1.0 (/ 1.0 (* d (/ d (* (* D h) (* w D)))))) (* d (/ d (* (* D h) (* w D)))))) (sqrt (* (+ M (* (/ d (* (* D h) (* w D))) (* c0 d))) (- (* (/ d (* (* D h) (* w D))) (* c0 d)) M)))))) (fma c0 (/ (* d (/ d w)) (* D (* D h))) (sqrt (- (pow (* c0 (/ (* d (/ d w)) (* D (* D h)))) 2.0) (* M M)))))) w) 2.0)))))",
    "output_parens": 348,
    "avg_bits_err_input": 59.545428212516434,
    "avg_bits_err_output": 30.374578767857734,
    "avg_bits_err_improve": 29.1708494446587,
    "time": 80722.45629882812,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (- (sqrt (* (/ d h) (/ d l))) (* (* M (/ D d)) (* (sqrt (* (/ d h) (/ d l))) (/ (* (/ (/ D d) 2.0) (* h M)) (* l 4.0))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 2e+259) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) INFINITY) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- (* (pow (* (/ D 2.0) (/ M d)) 2.0) (* (/ h l) -0.5)) -1.0)) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (* (* (/ (/ D l) (* d 4.0)) (/ M 2.0)) (+ (* h (/ (* D M) (* d 2.0))) (* h (/ (* D M) (* d 2.0))))))))))",
    "output_parens": 118,
    "avg_bits_err_input": 26.92738928625457,
    "avg_bits_err_output": 21.65123365347545,
    "avg_bits_err_improve": 5.276155632779119,
    "time": 48955.96923828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (if (!= (/ 0.5 (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) 0.0) (- (/ 1.0 (/ 1.0 (/ 0.5 (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))) (/ (/ 1.0 (/ 1.0 (/ 0.5 (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))) (hypot 1.0 x))) (/ (+ 0.5 (/ -0.5 (hypot 1.0 x))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 48,
    "avg_bits_err_input": 15.40199340572836,
    "avg_bits_err_output": 14.9063320397773,
    "avg_bits_err_improve": 0.4956613659510598,
    "time": 25365.575927734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9841981203125901,
    "avg_bits_err_output": 0.013167481250360578,
    "avg_bits_err_improve": 0.9710306390622295,
    "time": 4521.344482421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ (+ 1.0 (* (* v v) -5.0)) PI) (* (sqrt (fma v (* v -6.0) 2.0)) (- 1.0 (* v v)))) t) 0.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.4565768815682678,
    "avg_bits_err_output": 0.1144908050755328,
    "avg_bits_err_improve": 0.34208607649273504,
    "time": 22940.43310546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (fma v v -1.0) (/ (sqrt (- 2.0 (* v (* v 6.0)))) -4.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.012323120312590145,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 0.002948120312590145,
    "time": 3128.366943359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (if (!= (/ (+ 1.0 (* v (* v 5.0))) (- 1.0 (* v v))) 0.0) (* (/ (+ 1.0 (* v (* v 5.0))) (fma v v -1.0)) (- (/ (fma v (* v -5.0) 1.0) (+ 1.0 (* v (* v 5.0)))) 0.0)) (/ (fma v (* v -5.0) 1.0) (fma v v -1.0))))",
    "output_parens": 26,
    "avg_bits_err_input": 0.508847125251714,
    "avg_bits_err_output": 0.5299671767584649,
    "avg_bits_err_improve": -0.021120051506750892,
    "time": 13755.091796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.9987596601181528,
    "avg_bits_err_output": 1.9652384194929726,
    "avg_bits_err_improve": 0.03352124062518014,
    "time": 18793.5576171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (pow (exp (/ (- (+ mu (+ Vef EDonor)) Ec) (+ KbT KbT))) 2.0))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.016281150418828574,
    "avg_bits_err_output": 0.01605894947149563,
    "avg_bits_err_improve": 0.00022220094733294352,
    "time": 9376.337158203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow b 4.0) (* (* a a) (+ (* b b) (fma a a (* b b))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18960735349127605,
    "avg_bits_err_output": 0.10167558630170286,
    "avg_bits_err_improve": 0.0879317671895732,
    "time": 14233.04345703125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (* (* b b) (fma a a (* b b))) (fma a (* b (* a b)) (pow a 4.0))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 20,
    "avg_bits_err_input": 0.18656697967695074,
    "avg_bits_err_output": 0.10432825255190559,
    "avg_bits_err_improve": 0.08223872712504515,
    "time": 23708.194091796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (fma (* a a) (fma b b (* a a)) (* b (+ (* b (* b b)) (* b (* a a))))) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 28,
    "avg_bits_err_input": 0.18854912789656242,
    "avg_bits_err_output": 0.16125420289512019,
    "avg_bits_err_improve": 0.027294925001442233,
    "time": 18827.066650390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (- (+ (/ x (sqrt (+ (* x x) (* 4.0 (* p p))))) 2.0) 1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.75244049231281,
    "avg_bits_err_output": 13.762138326302283,
    "avg_bits_err_improve": -0.009697833989473992,
    "time": 17035.6513671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.75957069438255,
    "avg_bits_err_output": 0.081375,
    "avg_bits_err_improve": 40.67819569438255,
    "time": 6077.8046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (fma x (/ (/ x (+ x (tan x))) 2.0) (fma x (/ (/ x (+ x (tan x))) 2.0) (/ (- (pow (tan x) 2.0)) (+ x (tan x))))) (- x (tan x))))",
    "output_parens": 25,
    "avg_bits_err_input": 31.426259028215274,
    "avg_bits_err_output": 30.985731516783602,
    "avg_bits_err_improve": 0.44052751143167157,
    "time": 28878.5654296875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (+ (/ 0.0 a) (/ b_2 (- a))) (if (<= b_2 9.5e-305) (+ (/ (sqrt (- (* b_2 b_2) (* a c))) a) (/ b_2 (- a))) (if (<= b_2 2.6e+124) (/ (if (!= (- b_2) 0.0) (* (/ c (- (- b_2) (sqrt (fma a (- c) (* b_2 b_2))))) a) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a) (/ (if (!= (- b_2) 0.0) (fma a (/ c (* b_2 -2.0)) (* c (/ (/ a b_2) -2.0))) (- b_2)) a))))",
    "output_parens": 46,
    "avg_bits_err_input": 34.40629718842668,
    "avg_bits_err_output": 19.528009677522263,
    "avg_bits_err_improve": 14.878287510904414,
    "time": 21191.655517578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 22,
    "avg_bits_err_input": 33.97145927407366,
    "avg_bits_err_output": 19.777673612810595,
    "avg_bits_err_improve": 14.193785661263064,
    "time": 19307.185302734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (if (!= (/ (- 1.0 (cos x)) x) 0.0) (/ 1.0 (/ 1.0 (/ (- 1.0 (cos x)) x))) (/ (- 1.0 (cos x)) x)) x)",
    "output_parens": 14,
    "avg_bits_err_input": 31.411070634483735,
    "avg_bits_err_output": 30.66657130221004,
    "avg_bits_err_improve": 0.7444993322736941,
    "time": 19206.30810546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (<= x 1.0) (- (expm1 (/ (log x) n))) (- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.65270767685723,
    "avg_bits_err_output": 11.787534219544737,
    "avg_bits_err_improve": 20.865173457312494,
    "time": 34891.0439453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (expm1 (- (- (+ (log1p N) 1.0) 1.0) (log N)))))",
    "output_parens": 8,
    "avg_bits_err_input": 29.968340199517087,
    "avg_bits_err_output": 29.981614361764716,
    "avg_bits_err_improve": -0.013274162247629562,
    "time": 13044.817138671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (/ -0.5 x) (/ (+ (/ (- -1.0 x) x) 2.0) (+ x (+ x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 14.957259567815925,
    "avg_bits_err_output": 14.96109737614972,
    "avg_bits_err_improve": -0.003837808333795323,
    "time": 16982.8779296875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (sin x) (- (sin eps)) (* (+ (cos eps) -1.0) (cos x)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.8583013065861,
    "avg_bits_err_output": 6.291374340629157,
    "avg_bits_err_improve": 33.566926965956945,
    "time": 24492.716064453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (!= (+ 1.0 (cbrt x)) 0.0) (/ (+ (+ (- (pow (+ 1.0 (cbrt x)) 2.0)) (* (+ 1.0 (cbrt x)) (cbrt (- x -1.0)))) (+ 1.0 (cbrt x))) (+ 1.0 (cbrt x))) (- (cbrt (- x -1.0)) (cbrt x)))",
    "output_parens": 24,
    "avg_bits_err_input": 30.21417733891934,
    "avg_bits_err_output": 29.813595607885354,
    "avg_bits_err_improve": 0.40058173103398786,
    "time": 15293.11474609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 29.98425757669562,
    "avg_bits_err_output": 29.98425757669562,
    "avg_bits_err_improve": 0,
    "time": 22562.11181640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (pow (fma b b (* a (* c -4.0))) 0.5)))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 34.02880879723151,
    "avg_bits_err_output": 21.636118597987696,
    "avg_bits_err_improve": 12.392690199243816,
    "time": 25734.114013671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.31682482700995,
    "avg_bits_err_output": 21.77413400718346,
    "avg_bits_err_improve": 12.542690819826493,
    "time": 28822.409912109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.506351104515716,
    "avg_bits_err_output": 0.02231372187554087,
    "avg_bits_err_improve": 61.484037382640174,
    "time": 18599.201416015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 62.99830314314377,
    "avg_bits_err_output": 44.20458561864122,
    "avg_bits_err_improve": 18.793717524502554,
    "time": 15013.0732421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ eps (- -1.0 eps)) (log (+ 1.0 (expm1 (if (!= (+ 1.0 (/ 1.0 (+ 1.0 eps))) 0.0) (/ (- 1.0 (/ 1.0 (pow (+ 1.0 eps) 2.0))) (+ 1.0 (/ 1.0 (+ 1.0 eps)))) (+ 1.0 (/ -1.0 (+ 1.0 eps)))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 58.69856530902926,
    "avg_bits_err_output": 50.60310956633906,
    "avg_bits_err_improve": 8.095455742690206,
    "time": 18753.094482421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ (+ 1.0 (/ (- 1.0 (/ x (tan x))) x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 60.03390797384855,
    "avg_bits_err_output": 60.020326004172674,
    "avg_bits_err_improve": 0.013581969675875882,
    "time": 26301.7255859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* eps (/ (expm1 (* eps (+ a b))) (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.545498997463795,
    "avg_bits_err_output": 29.28348397923268,
    "avg_bits_err_improve": 31.262015018231114,
    "time": 27946.677001953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (expm1 (log1p (exp x))) (expm1 x))",
    "output_parens": 5,
    "avg_bits_err_input": 41.14198855681147,
    "avg_bits_err_output": 0.5001115281111156,
    "avg_bits_err_improve": 40.64187702870036,
    "time": 8607.051513671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.72375050291582,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.72312550291582,
    "time": 3222.405029296875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(if (!= (- -1.0 (exp (* a x))) 0.0) (/ (expm1 (* a (+ x x))) (+ (- (exp (log1p (exp (* a x)))) 2.0) 2.0)) (expm1 (* a x)))",
    "output_parens": 17,
    "avg_bits_err_input": 29.752675469533614,
    "avg_bits_err_output": 0.038587073966394984,
    "avg_bits_err_improve": 29.71408839556722,
    "time": 7423.134033203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (exp (- x)) 0.0) (/ (fma (exp (- x)) (exp (- x)) (+ 1.0 (/ -2.0 (exp x)))) (exp (- x))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 20,
    "avg_bits_err_input": 29.97256274512492,
    "avg_bits_err_output": 29.536719905196406,
    "avg_bits_err_improve": 0.43584283992851525,
    "time": 23903.383544921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.883531490737864,
    "avg_bits_err_output": 9.883531490737864,
    "avg_bits_err_improve": 0,
    "time": 23120.893798828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (tan (+ x eps)) 0.0) (* (tan (+ x eps)) (- (/ (tan (+ x eps)) (tan (+ x eps))) (/ (tan x) (log1p (expm1 (tan (+ x eps))))))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 23,
    "avg_bits_err_input": 36.82708596163752,
    "avg_bits_err_output": 36.84763924795602,
    "avg_bits_err_improve": -0.020553286318495623,
    "time": 20617.485107421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.46279392718438,
    "avg_bits_err_output": 0.16608740625180285,
    "avg_bits_err_improve": 30.296706520932577,
    "time": 11958.7177734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.2820694714606,
    "avg_bits_err_output": 22.28036536556501,
    "avg_bits_err_improve": 15.001704105895591,
    "time": 17215.48779296875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.53816983068328,
    "avg_bits_err_output": 19.53816983068328,
    "avg_bits_err_improve": 0,
    "time": 12995.208251953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 15.104404949952972,
    "avg_bits_err_output": 15.104404949952972,
    "avg_bits_err_improve": 0,
    "time": 4252.61328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.58275976293066,
    "avg_bits_err_output": 1.2541989507961064,
    "avg_bits_err_improve": 28.328560812134555,
    "time": 28595.29296875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (- (- 0.0 (* (/ m v) (* (- 1.0 m) (- 1.0 m)))) (- m 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.07792999596793129,
    "avg_bits_err_output": 0.07790875534275102,
    "avg_bits_err_improve": 2.1240625180274364e-05,
    "time": 17125.9482421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (/ a (/ -1.0 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.681627241265716,
    "avg_bits_err_output": 0.27786808611738,
    "avg_bits_err_improve": 16.403759155148336,
    "time": 11869.782958984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* (* PI angle) 0.005555555555555556))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.25536766350176,
    "avg_bits_err_output": 20.261797931330502,
    "avg_bits_err_improve": -0.006430267828740455,
    "time": 36353.97314453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (sin (/ (* PI (+ angle angle)) -180.0)) (- (pow a 2.0) (pow b 2.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 31.64041768746994,
    "avg_bits_err_output": 31.64894545353709,
    "avg_bits_err_improve": -0.008527766067150111,
    "time": 34442.406005859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (/ PI 180.0))) a) 2.0) (pow (* b (- (* (cos (fma (/ angle 180.0) PI 1.0)) (cos 1.0)) (* (sin (+ (* angle (/ PI -180.0)) -1.0)) (sin 1.0)))) 2.0))",
    "output_parens": 20,
    "avg_bits_err_input": 20.034816628433592,
    "avg_bits_err_output": 20.05945009487716,
    "avg_bits_err_improve": -0.024633466443567897,
    "time": 39632.4033203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.17814300435713698,
    "avg_bits_err_output": 0.18136236529490746,
    "avg_bits_err_improve": -0.003219360937770477,
    "time": 18158.8173828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.33644979461744556,
    "avg_bits_err_output": 0.3246097765696509,
    "avg_bits_err_improve": 0.011840018047794665,
    "time": 21437.436767578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (/ (sin v) (- -1.0 (* e (cos v)))) (- e))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13521936093777043,
    "avg_bits_err_output": 0.13586560156295072,
    "avg_bits_err_improve": -0.0006462406251802888,
    "time": 17321.484130859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.959706606356065,
    "avg_bits_err_output": 16.955021869545124,
    "avg_bits_err_improve": 0.004684736810940393,
    "time": 35775.28076171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* (* 4.0 (/ c (- (- b) (+ (+ b (sqrt (fma b b (* a (* c -4.0))))) (sqrt (fma b b (* a (* c -4.0)))))))) (+ a a)) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 30,
    "avg_bits_err_input": 52.39074677848369,
    "avg_bits_err_output": 0.1792503765672775,
    "avg_bits_err_improve": 52.21149640191641,
    "time": 29184.43701171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.434346419993858,
    "avg_bits_err_output": 0.3346400390737681,
    "avg_bits_err_improve": 28.09970638092009,
    "time": 26087.46875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 43.21024841021872,
    "avg_bits_err_output": 0.244613910946424,
    "avg_bits_err_improve": 42.96563449927229,
    "time": 27292.80810546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b 3.9e+148) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)) (+ (/ (if (!= (- b) 0.0) (* c (/ (* -4.0 a) b)) (- b)) (* a 8.0)) (if (!= (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0)) 0.0) (+ (/ (pow (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0)) 2.0) (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 16.0))) (/ 1.0 (/ 1.0 (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0))))) (/ (- (* (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) 0.25) (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) -8.0)) a))))",
    "output_parens": 97,
    "avg_bits_err_input": 34.03373881434307,
    "avg_bits_err_output": 19.789958590594868,
    "avg_bits_err_improve": 14.2437802237482,
    "time": 37643.433349609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.9227916492343113,
    "avg_bits_err_output": 0.9227916492343113,
    "avg_bits_err_improve": 0,
    "time": 29177.2841796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (/ 1.0 (+ 1.0 (exp (* -2.0 x)))) 0.0) (/ (+ 2.0 (- -1.0 (exp (* -2.0 x)))) (+ 1.0 (exp (* -2.0 x)))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 19,
    "avg_bits_err_input": 29.48602237292531,
    "avg_bits_err_output": 29.47595599773863,
    "avg_bits_err_improve": 0.0100663751866783,
    "time": 24678.799560546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (* x 2.0)) (+ (exp (fma x -1.0 x)) (exp (+ x x))))",
    "output_parens": 8,
    "avg_bits_err_input": 58.31821049390211,
    "avg_bits_err_output": 0.67525,
    "avg_bits_err_improve": 57.64296049390211,
    "time": 18848.963623046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (- (* (expm1 (* x -2.0)) (- (expm1 x))) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 9,
    "avg_bits_err_input": 58.194048431410835,
    "avg_bits_err_output": 0.1836385914939978,
    "avg_bits_err_improve": 58.01040983991684,
    "time": 8899.60595703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007948120312590144,
    "avg_bits_err_output": 0.007948120312590144,
    "avg_bits_err_improve": 0,
    "time": 3091.461669921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log1p (+ x (+ (sqrt (fma x x -1.0)) -1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 31.8415,
    "avg_bits_err_output": 31.841875,
    "avg_bits_err_improve": -0.00037500000000179057,
    "time": 5797.394775390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(/ (- (exp (log1p (log (if (!= (/ 1.0 (- x 1.0)) 0.0) (/ (- (* (/ x (- 1.0 x)) (/ 1.0 (- x 1.0))) (/ (/ 1.0 (- 1.0 x)) (- 1.0 x))) (/ 1.0 (- x 1.0))) (/ (- -1.0 x) (- x 1.0)))))) 1.0) 2.0)",
    "output_parens": 25,
    "avg_bits_err_input": 58.690047170071864,
    "avg_bits_err_output": 58.77104615841605,
    "avg_bits_err_improve": -0.0809989883441844,
    "time": 19580.987548828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log1p (+ (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x) -1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.04382312031259015,
    "avg_bits_err_output": 0.04432312031259015,
    "avg_bits_err_improve": -0.0005000000000000004,
    "time": 3509.078369140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12657312031259016,
    "avg_bits_err_output": 0.12657312031259016,
    "avg_bits_err_improve": 0,
    "time": 21480.740478515625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13507312031259017,
    "avg_bits_err_output": 0.13507312031259017,
    "avg_bits_err_improve": 0,
    "time": 27605.47314453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (cos (/ phi2 2.0)) (cos (/ phi1 2.0))) (* (- lambda1 lambda2) (* (sin (/ phi1 2.0)) (sin (/ phi2 -2.0))))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 38.737575955172545,
    "avg_bits_err_output": 0.11534741241823435,
    "avg_bits_err_improve": 38.622228542754314,
    "time": 29783.8896484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (/ (* (/ (fabs (+ a b)) a) (fabs (- a b))) a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.581460396180367,
    "avg_bits_err_output": 0.025875,
    "avg_bits_err_improve": 14.555585396180367,
    "time": 5945.33154296875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin delta) (* (cos phi1) (sin theta))) (- (cos delta) (* (sin phi1) (sin (asin (fma (sin delta) (* (cos phi1) (cos theta)) (* (cos delta) (sin phi1)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.14823173516493837,
    "avg_bits_err_output": 0.14790012172876194,
    "avg_bits_err_improve": 0.0003316134361764367,
    "time": 43457.70166015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.348724220987485,
    "avg_bits_err_output": 0.18395789531691695,
    "avg_bits_err_improve": 52.16476632567057,
    "time": 30463.335205078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.62054275743222,
    "avg_bits_err_output": 0.33738064063671913,
    "avg_bits_err_improve": 28.2831621167955,
    "time": 23516.590087890625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* c (* -3.0 a)) 0.0) (/ (fma (* c (* -3.0 a)) (* c (* -3.0 a)) (* b (* b (* c (* -3.0 a))))) (* c (* -3.0 a))) (fma c (* -3.0 a) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 40,
    "avg_bits_err_input": 43.33573691100468,
    "avg_bits_err_output": 0.25949830938347324,
    "avg_bits_err_improve": 43.076238601621206,
    "time": 26013.158935546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (* a -3.0) (/ c (- b (- (pow (fma b b (* a (* c -3.0))) 0.5))))) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 34.085782308532885,
    "avg_bits_err_output": 21.68662455241146,
    "avg_bits_err_improve": 12.399157756121426,
    "time": 22406.328369140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (cos (- lambda2 lambda1))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.54259765526681,
    "avg_bits_err_output": 13.542595884045163,
    "avg_bits_err_improve": 1.7712216475729292e-06,
    "time": 35273.145263671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (- (+ (/ x (+ x 1.0)) (/ 1.0 (+ x -1.0))) (/ x (+ x -1.0))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.278962175140784,
    "avg_bits_err_output": 24.876557318318262,
    "avg_bits_err_improve": 4.402404856822521,
    "time": 21767.148681640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (log (log1p (expm1 (exp (/ 1.0 (+ x -1.0)))))) (/ x (+ x 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.015219360937770434,
    "avg_bits_err_improve": -0.0034693609377704337,
    "time": 3141.774658203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ (if (!= (/ x (+ x -1.0)) 0.0) (/ (- x (* x (/ x (+ x -1.0)))) x) (- 1.0 (/ x (+ x -1.0)))) (+ 1.0 x)) (/ (- (/ 1.0 (+ x -1.0))) (+ 1.0 x)))",
    "output_parens": 20,
    "avg_bits_err_input": 14.511259199520136,
    "avg_bits_err_output": 12.364369784605024,
    "avg_bits_err_improve": 2.146889414915112,
    "time": 20276.765380859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2e-310) (* (* (sqrt (- F)) (sqrt (* -2.0 (- (* A (* C 4.0)) (pow B 2.0))))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt F) (sqrt (* (- (pow B 2.0) (* A (* C 4.0))) -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.38712920987268,
    "avg_bits_err_output": 47.20785609324351,
    "avg_bits_err_improve": 5.179273116629176,
    "time": 50017.64990234375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -6.2e-115) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (- (- C A) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) PI)) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (* (- C A) (- C A)) (pow B 2.0)))))) PI)))",
    "output_parens": 46,
    "avg_bits_err_input": 30.086011349813948,
    "avg_bits_err_output": 26.92397151751108,
    "avg_bits_err_improve": 3.1620398323028667,
    "time": 28165.9365234375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -5e-310) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- F))) (/ (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (sqrt (* 2.0 F)) (* (sqrt (- (pow B 2.0) (* A (* 4.0 C)))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* 4.0 C)) (pow B 2.0))))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.49758604289484,
    "avg_bits_err_output": 46.758737341769965,
    "avg_bits_err_improve": 5.738848701124873,
    "time": 40432.011962890625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (* (/ g a) 0.5))",
    "output_parens": 3,
    "avg_bits_err_input": 15.747999065916055,
    "avg_bits_err_output": 15.762347569627485,
    "avg_bits_err_improve": -0.014348503711429927,
    "time": 14990.218994140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1.35e+154) (+ (cbrt (* (/ 0.5 a) (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (cbrt (* (/ 0.5 a) (- (- g) (* (sqrt (- h g)) (sqrt (- (+ g h)))))))) (if (<= g -5e-263) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (sqrt (- (* g g) (* h h))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) (- g)) 0.0) (* h (/ h (- (- g) (sqrt (fma g g (* h (- h))))))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))))))",
    "output_parens": 91,
    "avg_bits_err_input": 36.39747149191954,
    "avg_bits_err_output": 12.545447435608972,
    "avg_bits_err_improve": 23.85202405631057,
    "time": 30966.96923828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (if (!= (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))) 0.0) (- (/ 0.0 (/ 1.0 (/ 1.0 (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))) (/ (/ 1.0 (pow (/ 1.0 (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))) 2.0)) (- (/ 1.0 (/ 1.0 (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))))) (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.9896372187554094,
    "avg_bits_err_output": 0.03987782031835937,
    "avg_bits_err_improve": 0.94975939843705,
    "time": 27609.31005859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log1p (expm1 (/ (exp a) (+ (exp a) (exp b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.8134481203125902,
    "avg_bits_err_output": 0.8173680453140325,
    "avg_bits_err_improve": -0.003919925001442337,
    "time": 5042.47900390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (* a1 a2) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (* a1 a2) -1e-184) (/ (* a1 a2) (* b1 b2)) (if (<= (* a1 a2) 2e-231) (* (/ a2 b2) (/ a1 b1)) (if (<= (* a1 a2) 4e+106) (/ (/ (* a1 a2) b2) b1) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 28,
    "avg_bits_err_input": 11.2541952019844,
    "avg_bits_err_output": 5.458697090123406,
    "avg_bits_err_improve": 5.795498111860994,
    "time": 9218.378173828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5053160970876119,
    "avg_bits_err_output": 0.44432312031259014,
    "avg_bits_err_improve": 0.0609929767750218,
    "time": 9823.8505859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.1) (log (if (!= (- x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 2000000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 43,
    "avg_bits_err_input": 53.08757398226754,
    "avg_bits_err_output": 0.1325165410464109,
    "avg_bits_err_improve": 52.95505744122113,
    "time": 10809.356201171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.738474669718629,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.738474669718629,
    "time": 2239.87451171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.011875,
    "avg_bits_err_improve": 0,
    "time": 3296.272705078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1350.24267578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (- (+ 3.0 (/ 2.0 (* r r))) (* (fma (* r w) (* r w) 0.0) (/ (* 0.125 (- 3.0 (* 2.0 v))) (- 1.0 v)))) 4.5)",
    "output_parens": 14,
    "avg_bits_err_input": 13.043903285727616,
    "avg_bits_err_output": 0.40436187422050734,
    "avg_bits_err_improve": 12.639541411507109,
    "time": 19696.29736328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- -3.0 (/ (/ (* (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) 3.0) (fma x1 x1 1.0)) -3.0)) (+ (* (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0) (* x1 x1)) (* -6.0 (* x1 x1))))))))))",
    "output_parens": 53,
    "avg_bits_err_input": 0.511444133549421,
    "avg_bits_err_output": 0.2841156263295557,
    "avg_bits_err_improve": 0.22732850721986525,
    "time": 72383.56787109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (if (!= (/ (* v t1) (+ t1 u)) 0.0) (/ 1.0 (/ (/ 1.0 v) (/ (- t1) (+ t1 u)))) (* v (/ (- t1) (+ t1 u)))) (+ t1 u))",
    "output_parens": 17,
    "avg_bits_err_input": 18.071336238946007,
    "avg_bits_err_output": 1.4409497757845973,
    "avg_bits_err_improve": 16.630386463161408,
    "time": 8603.0673828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2382406015629507,
    "avg_bits_err_output": 0.19248120312590142,
    "avg_bits_err_improve": 0.04575939843704929,
    "time": 6546.1513671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003875,
    "avg_bits_err_output": 0.003875,
    "avg_bits_err_improve": 0,
    "time": 2200.599853515625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ (- (/ PI a) (/ PI b)) 2.0) (+ b a)) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.060157334164336,
    "avg_bits_err_output": 0.28442725625468745,
    "avg_bits_err_improve": 13.775730077909648,
    "time": 17552.552734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (+ (- (+ -1.0 (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* eps x))))) (/ (exp (- (fma eps x x))) eps)) (- (/ -1.0 (exp (fma eps x x))))) 1.0) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.404405551391168,
    "avg_bits_err_output": 1.3000331159567682,
    "avg_bits_err_improve": 28.1043724354344,
    "time": 24538.700927734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (- 4.0 (+ (/ (- 4.0 (/ (/ 4.0 t) (+ 1.0 (/ 1.0 t)))) (* t (+ 1.0 (/ 1.0 t)))) (/ (/ 4.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.034,
    "avg_bits_err_output": 0.045375,
    "avg_bits_err_improve": -0.011374999999999996,
    "time": 7319.03515625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.04125,
    "avg_bits_err_output": 0.04125,
    "avg_bits_err_improve": 0,
    "time": 14727.3515625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))) (+ 2.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0395,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 0.032375,
    "time": 14373.34814453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3064.91357421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8865.147705078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2204.357666015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.83415294849226,
    "avg_bits_err_output": 0.242125,
    "avg_bits_err_improve": 7.592027948492261,
    "time": 37768.9892578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.251812304277228,
    "avg_bits_err_output": 7.251812304277228,
    "avg_bits_err_improve": 0,
    "time": 17292.41650390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.811674165106716,
    "avg_bits_err_output": 0.03492161928009981,
    "avg_bits_err_improve": 15.776752545826616,
    "time": 11247.364501953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (pow (exp (* x x)) 10.0) (- (pow (exp (* x x)) 10.0) (- (+ (fma (pow (exp (* x x)) 10.0) (- 1.0 (cos x)) (+ (pow (exp (* x x)) 10.0) 1.0)) (* (pow (exp (* x x)) 10.0) (+ (+ (cos x) -1.0) (+ (cos x) -1.0)))) 1.0)))",
    "output_parens": 29,
    "avg_bits_err_input": 3.533808319946438,
    "avg_bits_err_output": 3.082329299821193,
    "avg_bits_err_improve": 0.451479020125245,
    "time": 23010.375244140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -2e+14) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (* (/ (+ x x) (+ x (/ 1.0 x))) (/ 1.0 (+ x x))) 0.0) (/ x (fma x x 1.0))) (if (<= x 5e-20) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (* (/ (+ x x) (+ x (/ 1.0 x))) (/ 1.0 (+ x x))) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 14.969313845086171,
    "avg_bits_err_output": 0.04344812031259015,
    "avg_bits_err_improve": 14.925865724773582,
    "time": 10483.94189453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.13321700459055,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.13321700459055,
    "time": 5864.179931640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.14235252904971,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.14160252904971,
    "time": 4341.6552734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.297375,
    "avg_bits_err_improve": 63.702625,
    "time": 16896.373046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ t 5e+15) (* t 2e-16))",
    "output_parens": 3,
    "avg_bits_err_input": 61.84325748725749,
    "avg_bits_err_output": 0.350125,
    "avg_bits_err_improve": 61.49313248725749,
    "time": 15134.624755859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.31682482700995,
    "avg_bits_err_output": 21.77413400718346,
    "avg_bits_err_improve": 12.542690819826493,
    "time": 28752.956787109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b 3.9e+148) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)) (+ (/ (if (!= (- b) 0.0) (* c (/ (* -4.0 a) b)) (- b)) (* a 8.0)) (if (!= (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0)) 0.0) (+ (/ (pow (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0)) 2.0) (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 16.0))) (/ 1.0 (/ 1.0 (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0))))) (/ (- (* (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) 0.25) (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) -8.0)) a))))",
    "output_parens": 97,
    "avg_bits_err_input": 34.03373881434307,
    "avg_bits_err_output": 19.789958590594868,
    "avg_bits_err_improve": 14.2437802237482,
    "time": 37682.7958984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2042.50634765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.27328378007921,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 40.26315878007921,
    "time": 7313.455322265625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(- (/ (* x x) (fma x x (* y y))) (/ (* y y) (fma x x (* y y))))",
    "output_parens": 9,
    "avg_bits_err_input": 20.603900004970843,
    "avg_bits_err_output": 20.602854738884897,
    "avg_bits_err_improve": 0.0010452660859456842,
    "time": 7428.484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.675466294662739,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.675466294662739,
    "time": 7166.785400390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ (+ b c) d))",
    "output_parens": 3,
    "avg_bits_err_input": 0.039,
    "avg_bits_err_output": 0.039,
    "avg_bits_err_improve": 0,
    "time": 5244.224365234375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02052124062518029,
    "avg_bits_err_output": 0.0115,
    "avg_bits_err_improve": 0.00902124062518029,
    "time": 3385.23095703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 0.0006250000000000006,
    "time": 3105.1162109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 1544.80224609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ a (+ c (+ b d))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39513477500432725,
    "avg_bits_err_output": 0.261125,
    "avg_bits_err_improve": 0.13400977500432726,
    "time": 8382.992431640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (pow (cos x) 2.0) 0.0) (/ (if (!= (pow (cos x) 4.0) 0.0) (/ (- (pow (cos x) 8.0) (pow (cos x) 6.0)) (pow (cos x) 4.0)) (- (pow (cos x) 4.0) (pow (cos x) 2.0))) (pow (cos x) 2.0)) (+ -1.0 (pow (cos x) 2.0))) (- -1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 36,
    "avg_bits_err_input": 29.82809672115579,
    "avg_bits_err_output": 29.82872956260173,
    "avg_bits_err_improve": -0.0006328414459382259,
    "time": 10442.9765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 25.156603882026246,
    "avg_bits_err_output": 0.29327124062518034,
    "avg_bits_err_improve": 24.863332641401065,
    "time": 8712.042236328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (tan x)) 0.0) (- (/ (* (/ x (tan x)) (/ (sin x) (tan x))) (/ (sin x) (tan x))) (/ 1.0 (/ 1.0 (/ (sin x) (tan x))))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 25,
    "avg_bits_err_input": 30.202534991187456,
    "avg_bits_err_output": 30.230527783950276,
    "avg_bits_err_improve": -0.027992792762820073,
    "time": 29258.44091796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00475,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.00375,
    "time": 1843.2392578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 1e-270) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* (/ (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ 2.0 n)) (/ -200.0 i)))",
    "output_parens": 23,
    "avg_bits_err_input": 47.793414774631046,
    "avg_bits_err_output": 13.12597555374833,
    "avg_bits_err_improve": 34.66743922088271,
    "time": 22827.266845703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) -2e-58) (+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 2e-102) (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 26.54672000234614,
    "avg_bits_err_output": 22.852501626345237,
    "avg_bits_err_improve": 3.6942183760009044,
    "time": 15084.2373046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) -1e-240) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.919322503604423,
    "avg_bits_err_output": 24.57790072785116,
    "avg_bits_err_improve": 2.3414217757532647,
    "time": 14612.7587890625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (+ (* ux (- maxCos)) ux))",
    "output_parens": 4,
    "avg_bits_err_input": 0.034625,
    "avg_bits_err_output": 0.02209512018848141,
    "avg_bits_err_improve": 0.012529879811518593,
    "time": 8022.5048828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (if (!= (pow (fma ux maxCos (- 1.0 ux)) 4.0) 0.0) (/ 1.0 (/ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))) (pow (fma ux maxCos (- 1.0 ux)) 4.0)))))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))",
    "output_parens": 37,
    "avg_bits_err_input": 13.48019772248627,
    "avg_bits_err_output": 12.072101467881396,
    "avg_bits_err_improve": 1.4080962546048745,
    "time": 34184.72509765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (fma ux (- 1.0 ux) (- ux (* ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.519301336611504,
    "avg_bits_err_output": 0.3236254053356084,
    "avg_bits_err_improve": 13.195675931275895,
    "time": 26675.7578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (if (!= uy 0.0) (/ (* PI (* uy (* uy 2.0))) uy) (* PI (* 2.0 uy)))) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output_parens": 40,
    "avg_bits_err_input": 0.3487379499286087,
    "avg_bits_err_output": 0.3566955492992228,
    "avg_bits_err_improve": -0.007957599370614132,
    "time": 44511.21435546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax)))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.20178646459810826,
    "avg_bits_err_output": 0.20185958491069844,
    "avg_bits_err_improve": -7.312031259018581e-05,
    "time": 45153.21728515625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (pow (/ u1 (- 1.0 u1)) 0.5) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5406407732888537,
    "avg_bits_err_output": 0.5407657732888538,
    "avg_bits_err_improve": -0.00012500000000004174,
    "time": 18898.818359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (pow (/ u1 (- 1.0 u1)) 0.5) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.33783987387645614,
    "avg_bits_err_output": 0.3377148738764561,
    "avg_bits_err_improve": 0.00012500000000004174,
    "time": 19894.80810546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0) 0.0) (/ (pow (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0) 2.0) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 75,
    "avg_bits_err_input": 0.34373294970418733,
    "avg_bits_err_output": 0.3464090164314057,
    "avg_bits_err_improve": -0.0026760667272183736,
    "time": 40814.0810546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.053398950078813255,
    "avg_bits_err_output": 0.03756563589897472,
    "avg_bits_err_improve": 0.015833314179838534,
    "time": 10131.050048828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (+ (exp (/ (fabs x) (- s))) 1.0)) (fma s (exp (/ (fabs x) (- s))) s))",
    "output_parens": 16,
    "avg_bits_err_input": 0.13206295199689416,
    "avg_bits_err_output": 0.11082314531724491,
    "avg_bits_err_improve": 0.021239806679649254,
    "time": 21792.94677734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641972797300889,
    "avg_bits_err_output": 0.6641972797300889,
    "avg_bits_err_improve": 0,
    "time": 23609.982421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (exp (* 1.0 (log (* (- 1.0 u) (exp (/ -2.0 v)))))) u)) 1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 0.16187538088854972,
    "avg_bits_err_output": 0.15910596362515486,
    "avg_bits_err_improve": 0.0027694172633948577,
    "time": 22075.391357421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O sinTheta_O) (- (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.549048912363797,
    "avg_bits_err_output": 2.5433323914355888,
    "avg_bits_err_improve": 0.00571652092820818,
    "time": 28234.4443359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_i (* (/ 1.0 v) (* cosTheta_O (/ (/ 0.5 (* v (exp (* sinTheta_O (/ sinTheta_i v))))) (sinh (/ 1.0 v))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4686063684886611,
    "avg_bits_err_output": 0.35428378233686003,
    "avg_bits_err_improve": 0.11432258615180108,
    "time": 28090.51171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp 0.6931) (* (if (!= (exp (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v)) 0.0) (/ 1.0 (/ 1.0 (exp (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v)))) (exp (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v))) (/ 0.5 v)))",
    "output_parens": 23,
    "avg_bits_err_input": 0.11032161080318517,
    "avg_bits_err_output": 0.15016147843307606,
    "avg_bits_err_improve": -0.03983986762989089,
    "time": 30955.064208984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (+ (* alpha (+ alpha alpha)) -2.0) 2.0) (log (pow (* alpha alpha) PI))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 0.47728999914480447,
    "avg_bits_err_output": 0.43286650676883676,
    "avg_bits_err_improve": 0.04442349237596771,
    "time": 26323.685791015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (fma u -1.3333333333333333 1.3333333333333333)) (* s -3.0))",
    "output_parens": 4,
    "avg_bits_err_input": 1.2990784434495346,
    "avg_bits_err_output": 1.017364274225338,
    "avg_bits_err_improve": 0.2817141692241967,
    "time": 26198.14697265625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (if (!= (log (/ 1.0 (- 1.0 (* 4.0 u)))) 0.0) (/ 1.0 (/ 1.0 (log (/ 1.0 (- 1.0 (* 4.0 u)))))) (log (/ 1.0 (- 1.0 (* 4.0 u))))) s) 2.0) (/ (* (log (* (/ 1.0 (* (+ 1.0 (* u -4.0)) (+ 1.0 (* u -4.0)))) (/ 1.0 (/ 1.0 (- 1.0 (* 4.0 u)))))) s) 2.0))",
    "output_parens": 33,
    "avg_bits_err_input": 12.58015451999077,
    "avg_bits_err_output": 11.953328576605008,
    "avg_bits_err_improve": 0.6268259433857626,
    "time": 23220.0947265625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* 2.0 PI) (* r s))) (/ (/ (* (pow (exp (/ r s)) -0.3333333333333333) 1.5) (* r s)) (* PI 12.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.1470153545370418,
    "avg_bits_err_output": 0.4878226221436344,
    "avg_bits_err_improve": -0.34080726760659263,
    "time": 27491.662841796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8823517852884531,
    "avg_bits_err_output": 0.7443515937158445,
    "avg_bits_err_improve": 0.13800019157260868,
    "time": 28103.538818359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (/ (pow (- (- 1.0 cosTheta) cosTheta) 0.5) (* (sqrt PI) (* cosTheta (exp (* cosTheta cosTheta))))) (+ c 1.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6824175854522285,
    "avg_bits_err_output": 0.4613685562333872,
    "avg_bits_err_improve": 0.22104902921884134,
    "time": 22902.784912109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(if (!= (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2)))) 0.0) (- (/ (sin (* 2.0 (* PI u2))) (/ 1.0 (sqrt (- (log1p (- u1)))))) 0.0) (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2)))))",
    "output_parens": 28,
    "avg_bits_err_input": 13.323353505942526,
    "avg_bits_err_output": 0.5872495925138695,
    "avg_bits_err_improve": 12.736103913428657,
    "time": 21423.8974609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.368858134355358,
    "avg_bits_err_output": 0.3132657387652689,
    "avg_bits_err_improve": 13.05559239559009,
    "time": 19459.53955078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.121224912919445,
    "avg_bits_err_output": 0.3114387218755409,
    "avg_bits_err_improve": 13.809786191043903,
    "time": 16937.975830078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ cos2phi (* alphax (- alphax))) (/ (/ sin2phi alphay) alphay)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.447327489928941,
    "avg_bits_err_output": 0.5208219899218693,
    "avg_bits_err_improve": 11.926505500007073,
    "time": 13975.778564453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -2e+37) (- (if (!= (* PI l) 0.0) (/ 1.0 (/ 1.0 (* PI l))) (* PI l)) (/ 0.0 F)) (if (<= (* PI l) 5e-5) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (- (* PI l) (/ 0.0 F))))",
    "output_parens": 24,
    "avg_bits_err_input": 16.601878004565418,
    "avg_bits_err_output": 1.216885300965725,
    "avg_bits_err_improve": 15.384992703599693,
    "time": 20500.380859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2144387218755409,
    "avg_bits_err_output": 0.15,
    "avg_bits_err_improve": 0.0644387218755409,
    "time": 15946.236083984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (* (/ (pow (fma 2.0 x (fma F F 2.0)) -0.5) (sin B)) F))",
    "output_parens": 10,
    "avg_bits_err_input": 14.15189048950995,
    "avg_bits_err_output": 10.708669793339524,
    "avg_bits_err_improve": 3.4432206961704264,
    "time": 21899.03125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* PI (* (/ f -4.0) 2.0)))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0))",
    "output_parens": 32,
    "avg_bits_err_input": 61.46676337592357,
    "avg_bits_err_output": 1.8971150249882986,
    "avg_bits_err_improve": 59.569648350935275,
    "time": 48067.823974609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* (* l l) (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.27858462668803,
    "avg_bits_err_output": 35.34388826983929,
    "avg_bits_err_improve": 7.93469635684874,
    "time": 26744.687744140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.821904746008287,
    "avg_bits_err_output": 0.223667857817638,
    "avg_bits_err_improve": 3.598236888190649,
    "time": 30111.618408203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (pow (+ (+ (* 4.0 (pow (* (/ l Om) (sin ky)) 2.0)) (* 4.0 (pow (* (/ l Om) (sin kx)) 2.0))) 1.0) -0.5) 0.5)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9649431985483787,
    "avg_bits_err_output": 0.006375,
    "avg_bits_err_improve": 0.9585681985483787,
    "time": 17349.96240234375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (- -1.0 (+ (- (pow (/ Om Omc) 2.0)) -1.0))) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 13,
    "avg_bits_err_input": 10.122000677655011,
    "avg_bits_err_output": 10.12306861262298,
    "avg_bits_err_improve": -0.0010679349679687533,
    "time": 24460.009033203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (* (sqrt (fabs n)) (sqrt (fabs U))))",
    "output_parens": 18,
    "avg_bits_err_input": 33.972974253867456,
    "avg_bits_err_output": 16.987533459870487,
    "avg_bits_err_improve": 16.98544079399697,
    "time": 41669.550048828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= l -8e+56) (/ 2.0 (* (* (tan k) (/ (sin k) l)) (* (/ k t) (* k (/ (/ (pow t 3.0) l) t))))) (if (<= l 2.2e+148) (/ 2.0 (* (* (tan k) (/ (sin k) l)) (/ (* (/ (/ k l) t) (* k (pow t 3.0))) t))) (/ 2.0 (/ (* k (* (* (tan k) (/ (sin k) l)) (/ (* k (/ (pow t 3.0) l)) t))) t))))",
    "output_parens": 40,
    "avg_bits_err_input": 47.131482056898776,
    "avg_bits_err_output": 30.82379467657022,
    "avg_bits_err_improve": 16.307687380328556,
    "time": 46465.46875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (tan k) l) (* (pow t 3.0) (* (sin k) (/ (+ 2.0 (pow (/ k t) 2.0)) l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.47317359083393,
    "avg_bits_err_output": 26.67154957465348,
    "avg_bits_err_improve": 5.801624016180451,
    "time": 26010.389892578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (+ (* a2 a2) (* a1 a1)) (sqrt 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5343601531460959,
    "avg_bits_err_output": 0.48717594220544014,
    "avg_bits_err_improve": 0.047184210940655724,
    "time": 22659.21240234375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 n) (* k -0.5)) (* (pow PI (* k -0.5)) (/ (sqrt (* PI (* 2.0 n))) (sqrt k))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.49964689433809917,
    "avg_bits_err_output": 0.42139661719245824,
    "avg_bits_err_improve": 0.07825027714564092,
    "time": 20980.073486328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (+ (* (- (exp l) (exp (- l))) (* J (cos (/ K 2.0)))) (* (cos (/ K 2.0)) (fma (/ -1.0 (exp l)) J (/ J (exp l))))) U)",
    "output_parens": 18,
    "avg_bits_err_input": 17.01749178768661,
    "avg_bits_err_output": 17.022475371114787,
    "avg_bits_err_improve": -0.004983583428177951,
    "time": 26808.94775390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (+ (+ (* K (/ (+ m n) 2.0)) (* K (/ m 2.0))) (* K (/ n 2.0))) 2.0) M)) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n))))))",
    "output_parens": 26,
    "avg_bits_err_input": 15.429412809716103,
    "avg_bits_err_output": 15.425068217421785,
    "avg_bits_err_improve": 0.004344592294318161,
    "time": 19410.173828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* -2.0 J) (* (cos (/ K 2.0)) (sqrt (+ 1.0 (pow (/ (/ U (+ J J)) (cos (/ K 2.0))) 2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.04782312031259,
    "avg_bits_err_output": 18.055179323438498,
    "avg_bits_err_improve": -0.007356203125908678,
    "time": 42255.584228515625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 1e-145) (* w0 (sqrt (- 1.0 (* (* D (/ (/ M 2.0) d)) (/ (/ (- (+ (* h (* D (/ M (+ d d)))) (/ M d)) (- (/ M d) (* h (* D (/ M (+ d d)))))) l) 2.0))))) (if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 1e+244) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (* (* D (/ (/ M 2.0) d)) (/ (/ (* h (* D (/ M d))) l) 2.0)))))))",
    "output_parens": 55,
    "avg_bits_err_input": 13.978490889181716,
    "avg_bits_err_output": 8.23551308221359,
    "avg_bits_err_improve": 5.742977806968126,
    "time": 25649.150634765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e+151) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) -2e-187) (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (+ (/ A (* (sqrt (/ A (* l V))) (* (* l (+ V V)) 2.0))) (+ (/ A (* (sqrt (/ A (* l V))) (* (* l (+ V V)) 2.0))) (/ (/ 1.0 (/ 1.0 (sqrt (/ A (* l V))))) 2.0))) (sqrt (/ A (* l V))))) (if (<= (* V l) 0.0) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) 1e+260) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (+ (/ (/ A (+ l l)) (+ V V)) (/ (/ (+ A (+ A A)) l) (+ V (+ V (+ V V)))))))))))",
    "output_parens": 79,
    "avg_bits_err_input": 18.650584142982236,
    "avg_bits_err_output": 11.535576891391822,
    "avg_bits_err_improve": 7.115007251590415,
    "time": 22989.12548828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= h -8.2e-128) (* (/ c0 (* 2.0 w)) (if (!= (- (* (* d c0) (/ d (* D (* h (* w D))))) (sqrt (- (pow (* (* d c0) (/ d (* D (* h (* w D))))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* (* d c0) (/ d (* D (* h (* w D))))) (sqrt (- (pow (* (* d c0) (/ d (* D (* h (* w D))))) 2.0) (* M M)))))) (fma d (/ (/ (* d c0) (* w D)) (* D h)) (sqrt (- (pow (* (* d c0) (/ d (* D (* h (* w D))))) 2.0) (* M M)))))) (if (<= h 2.5e-157) (/ (/ (* c0 (if (!= (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))) 0.0) (* M (/ M (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))))) (+ (* d (* (/ (/ d (* w h)) D) (/ c0 D))) (sqrt (- (pow (* d (* (/ (/ d (* w h)) D) (/ c0 D))) 2.0) (* M M)))))) w) 2.0) (if (<= h 8e-151) (* c0 (/ (fma d (* c0 (/ (/ d D) (* w (* D h)))) (sqrt (- (pow (* (* d c0) (/ (/ d D) (* w (* D h)))) 2.0) (* M M)))) (+ w w))) (if (<= h 9e-37) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (* (/ (/ (/ d w) h) D) (/ c0 D))) (sqrt (- (pow (* d (* (/ (/ (/ d w) h) D) (/ c0 D))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (* (/ (/ (/ d w) h) D) (/ c0 D))) (sqrt (- (pow (* d (* (/ (/ (/ d w) h) D) (/ c0 D))) 2.0) (* M M))))) (fma d (* (/ (/ (/ d w) h) D) (/ c0 D)) (sqrt (- (pow (* d (* (/ (/ (/ d w) h) D) (/ c0 D))) 2.0) (* M M)))))) (if (<= h 9e+168) (/ (/ (* c0 (if (!= (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))) 0.0) (* M (/ M (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))))) (+ (* d (* (/ (/ d (* w h)) D) (/ c0 D))) (sqrt (- (pow (* d (* (/ (/ d (* w h)) D) (/ c0 D))) 2.0) (* M M)))))) w) 2.0) (* (/ c0 (* 2.0 w)) (if (!= (- (* (* d c0) (/ d (* D (* h (* w D))))) (sqrt (- (pow (* (* d c0) (/ d (* D (* h (* w D))))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* (* d c0) (/ d (* D (* h (* w D))))) (sqrt (- (pow (* (* d c0) (/ d (* D (* h (* w D))))) 2.0) (* M M)))))) (fma d (/ (/ (* d c0) (* w D)) (* D h)) (sqrt (- (pow (* (* d c0) (/ d (* D (* h (* w D))))) 2.0) (* M M)))))))))))",
    "output_parens": 316,
    "avg_bits_err_input": 59.53759391199181,
    "avg_bits_err_output": 31.98208039602914,
    "avg_bits_err_improve": 27.555513515962673,
    "time": 62876.311767578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (- (sqrt (* (/ d l) (/ d h))) (* (* 0.5 (pow (* M (/ (/ D d) 2.0)) 2.0)) (* (/ h l) (* (sqrt (/ d l)) (sqrt (/ d h)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 5e+271) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (fma 0.5 (fma (/ (/ (* D M) 2.0) (* d l)) (* (/ D d) (* h (* M 0.5))) 0.0) -1.0) (- (* (sqrt (/ d (* h l))) (sqrt d))))))",
    "output_parens": 82,
    "avg_bits_err_input": 25.561166891117207,
    "avg_bits_err_output": 21.42146151167129,
    "avg_bits_err_improve": 4.1397053794459175,
    "time": 49232.699462890625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (- (/ 0.5 (hypot 1.0 x)) 0.5) (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 21,
    "avg_bits_err_input": 15.804121893032281,
    "avg_bits_err_output": 15.318701828792177,
    "avg_bits_err_improve": 0.4854200642401043,
    "time": 11115.77294921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9842712406251803,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 0.9732712406251803,
    "time": 5500.207763671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (- 1.0 (* 5.0 (* v v))) (* PI (* (- 1.0 (* v v)) (sqrt (- 2.0 (* (* v v) 6.0)))))) t)",
    "output_parens": 13,
    "avg_bits_err_input": 0.43664791206242864,
    "avg_bits_err_output": 0.11426144592965025,
    "avg_bits_err_improve": 0.3223864661327784,
    "time": 21486.70703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt (+ (* v (* v -6.0)) 2.0)) 4.0) (- 1.0 (* v v)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.01102124062518029,
    "avg_bits_err_output": 0.00825,
    "avg_bits_err_improve": 0.002771240625180289,
    "time": 13053.132568359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5026736243882015,
    "avg_bits_err_output": 0.5026736243882015,
    "avg_bits_err_improve": 0,
    "time": 9939.842041015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* (/ (pow k m) (+ (* k (+ k 10.0)) 1.0)) a)",
    "output_parens": 6,
    "avg_bits_err_input": 2.1803358968477475,
    "avg_bits_err_output": 2.1873052577855177,
    "avg_bits_err_improve": -0.006969360937770119,
    "time": 10920.572021484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (- (- (/ (- mu (- (- Ec Vef) EDonor)) KbT) -1.0) 1.0)) -1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.01842832603964897,
    "avg_bits_err_output": 0.018428326039648966,
    "avg_bits_err_improve": 3.469446951953614e-18,
    "time": 11464.889892578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow b 4.0) (* (* a a) (+ (* b b) (fma a a (* b b))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18791059254041304,
    "avg_bits_err_output": 0.10446698316270876,
    "avg_bits_err_improve": 0.08344360937770427,
    "time": 8184.797119140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (fma b (* a (* b a)) (pow b 4.0)) (* (* a a) (fma a a (* b b)))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 20,
    "avg_bits_err_input": 0.1883576957532427,
    "avg_bits_err_output": 0.10206032700071874,
    "avg_bits_err_improve": 0.08629736875252397,
    "time": 26850.0537109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (fma b (* a (* b a)) (pow b 4.0)) (* (* a a) (fma b b (* a a)))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.18364499700213033,
    "avg_bits_err_output": 0.10074386887478667,
    "avg_bits_err_improve": 0.08290112812734365,
    "time": 21036.063232421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (+ (/ x (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0)) (/ (+ x (+ x x)) (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.064064303577362,
    "avg_bits_err_output": 13.168073381764538,
    "avg_bits_err_improve": -0.10400907818717542,
    "time": 19631.012451171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.81136276382824,
    "avg_bits_err_output": 0.048375,
    "avg_bits_err_improve": 40.76298776382824,
    "time": 5223.515380859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (/ (pow (tan x) 2.0) (+ x (tan x)))) (- x (tan x))))",
    "output_parens": 19,
    "avg_bits_err_input": 30.762234360860536,
    "avg_bits_err_output": 30.219496918156175,
    "avg_bits_err_improve": 0.542737442704361,
    "time": 27283.927734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (+ (/ 0.0 a) (/ b_2 (- a))) (if (<= b_2 -1.55e-272) (/ (- (sqrt (- (* b_2 b_2) (* c a))) b_2) a) (/ (if (!= (- b_2) 0.0) (* (/ c (- (- b_2) (sqrt (fma a (- c) (* b_2 b_2))))) a) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a)))",
    "output_parens": 31,
    "avg_bits_err_input": 33.928949676298444,
    "avg_bits_err_output": 20.654110729138846,
    "avg_bits_err_improve": 13.274838947159598,
    "time": 17491.316162109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.00131642707157,
    "avg_bits_err_output": 21.866915988993675,
    "avg_bits_err_improve": 12.134400438077897,
    "time": 19443.4677734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (exp (* 1.0 (log (- 1.0 (cos x))))) x) x)",
    "output_parens": 7,
    "avg_bits_err_input": 31.479503745857624,
    "avg_bits_err_output": 30.703059786724655,
    "avg_bits_err_improve": 0.776443959132969,
    "time": 19222.8525390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (pow x (/ 1.0 n)) (exp (/ (log1p x) n))) 0.0) (/ (if (!= (pow x (/ 2.0 n)) 0.0) (/ (if (!= (fma (pow (exp (/ (log1p x) n)) 2.0) (pow x (/ 2.0 n)) (pow x (/ 4.0 n))) 0.0) (/ (fma (pow x (/ 4.0 n)) (pow (exp (/ (log1p x) n)) 4.0) (- (pow x (/ 8.0 n)))) (fma (pow (exp (/ (log1p x) n)) 2.0) (pow x (/ 2.0 n)) (pow x (/ 4.0 n)))) (fma (pow (exp (/ (log1p x) n)) 2.0) (pow x (/ 2.0 n)) (- (pow x (/ 4.0 n))))) (pow x (/ 2.0 n))) (- (pow (exp (/ (log1p x) n)) 2.0) (pow x (/ 2.0 n)))) (+ (pow x (/ 1.0 n)) (exp (/ (log1p x) n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 76,
    "avg_bits_err_input": 32.72777396419889,
    "avg_bits_err_output": 32.489904287429276,
    "avg_bits_err_improve": 0.23786967676961268,
    "time": 33314.132568359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (expm1 (- (if (!= (+ (log1p N) 2.0) 0.0) (/ (* (log1p N) (+ (log1p N) 2.0)) (+ (log1p N) 2.0)) (log1p N)) (log N)))))",
    "output_parens": 17,
    "avg_bits_err_input": 29.78660663386939,
    "avg_bits_err_output": 29.800181226943344,
    "avg_bits_err_improve": -0.013574593073954588,
    "time": 13038.3955078125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (if (!= (- 1.0 (/ x (- -1.0 x))) 0.0) (/ (+ -1.0 (/ (* x (/ x (+ x 1.0))) (+ x 1.0))) (- 1.0 (/ x (- -1.0 x)))) (+ (/ x (+ x 1.0)) -1.0)) x)",
    "output_parens": 19,
    "avg_bits_err_input": 14.227968964086289,
    "avg_bits_err_output": 14.212241757915825,
    "avg_bits_err_improve": 0.01572720617046386,
    "time": 16918.140380859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -3.9e-59) (fma (sin x) (- (sin eps)) (- (* (cos eps) (cos x)) (cos x))) (if (<= x 4.2e-96) (if (!= (+ (cos x) (cos (+ x eps))) 0.0) (/ (- (pow (sin x) 2.0) (* (sin (+ x eps)) (sin (+ x eps)))) (+ (cos x) (cos (+ x eps)))) (- (cos (+ x eps)) (cos x))) (+ (log (exp (* (+ (cos eps) -1.0) (cos x)))) (- (* (sin x) (sin eps))))))",
    "output_parens": 47,
    "avg_bits_err_input": 39.80847367086928,
    "avg_bits_err_output": 2.239074814779804,
    "avg_bits_err_improve": 37.56939885608948,
    "time": 23305.9013671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.97572181503202,
    "avg_bits_err_output": 29.672793035114093,
    "avg_bits_err_improve": 0.3029287799179272,
    "time": 15378.123291015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(log (exp (/ (- 1.0 (cos x)) (sin x))))",
    "output_parens": 6,
    "avg_bits_err_input": 30.441579290088793,
    "avg_bits_err_output": 30.500896650281355,
    "avg_bits_err_improve": -0.05931736019256206,
    "time": 22565.28271484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.157592644304245,
    "avg_bits_err_output": 21.930379676231873,
    "avg_bits_err_improve": 12.227212968072372,
    "time": 24344.32568359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma b b (* c (* a -4.0)))) b) 0.0) (* (* a -4.0) (/ c (- (sqrt (fma b b (* c (* a -4.0)))) b))) (+ b (sqrt (fma b b (* c (* a -4.0)))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.35626756182946,
    "avg_bits_err_output": 22.286268510528476,
    "avg_bits_err_improve": 12.069999051300986,
    "time": 22634.93505859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.43951174953297,
    "avg_bits_err_output": 0.021627443751081738,
    "avg_bits_err_improve": 61.41788430578189,
    "time": 14957.334228515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log (+ n 1.0)) (log n)) n)) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 63.00671293506907,
    "avg_bits_err_output": 44.217691249522346,
    "avg_bits_err_improve": 18.78902168554672,
    "time": 16882.448974609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ eps (- -1.0 eps)) (if (!= (+ 1.0 (/ 1.0 (+ eps 1.0))) 0.0) (/ (- (/ 1.0 (pow (+ 1.0 eps) 2.0)) 1.0) (+ -1.0 (/ -1.0 (+ eps 1.0)))) (+ 1.0 (/ -1.0 (+ eps 1.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 58.7625527710156,
    "avg_bits_err_output": 50.638942329182726,
    "avg_bits_err_improve": 8.123610441832874,
    "time": 17701.134521484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(- (exp (log1p (/ (+ (- 1.0 (/ (/ x 2.0) (tan x))) (- (/ (/ x 2.0) (tan x)))) x))) 1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 59.934265574616184,
    "avg_bits_err_output": 59.942046656405054,
    "avg_bits_err_improve": -0.007781081788870381,
    "time": 30417.8955078125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* eps (/ (expm1 (* eps (+ a b))) (expm1 (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.224248678815805,
    "avg_bits_err_output": 28.918644250614495,
    "avg_bits_err_improve": 31.30560442820131,
    "time": 28015.12646484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(- (/ (+ (exp x) 1.0) (expm1 x)) (/ 1.0 (expm1 x)))",
    "output_parens": 7,
    "avg_bits_err_input": 41.09620958617261,
    "avg_bits_err_output": 0.5184289769542354,
    "avg_bits_err_improve": 40.57778060921838,
    "time": 4850.28515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.8305333361147,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.8299083361147,
    "time": 3488.96630859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.26460244412646,
    "avg_bits_err_output": 0.017303307870343385,
    "avg_bits_err_improve": 29.247299136256117,
    "time": 5780.543212890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (- (exp x) 2.0) (exp (- x))) 0.0) (/ (if (!= (- (* (exp x) (- (exp x) 2.0)) (exp (* x -2.0))) 0.0) (/ (fma (- (* (exp x) (- (exp x) 2.0)) (exp (* x -2.0))) (- (* (exp x) (- (exp x) 2.0)) (exp (* x -2.0))) (* (- (* (exp x) (- (exp x) 2.0)) (exp (* x -2.0))) (- 4.0 (* (exp x) 2.0)))) (- (* (exp x) (- (exp x) 2.0)) (exp (* x -2.0)))) (- (* (- (exp x) 2.0) (- (exp x) 2.0)) (exp (* x -2.0)))) (- (- (exp x) 2.0) (exp (- x)))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 69,
    "avg_bits_err_input": 29.557129343382474,
    "avg_bits_err_output": 29.21169362760043,
    "avg_bits_err_improve": 0.34543571578204535,
    "time": 26949.186767578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (if (!= (/ 1.0 (pow (+ x -1.0) 2.0)) 0.0) (/ (+ (/ (/ 1.0 (pow (+ x -1.0) 2.0)) (pow (+ x -1.0) 2.0)) (/ (/ (- (/ 2.0 x) (/ 1.0 (+ 1.0 x))) (- 1.0 x)) (pow (+ x -1.0) 2.0))) (/ 1.0 (pow (+ x -1.0) 2.0))) (/ (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) (+ x -1.0))) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 48,
    "avg_bits_err_input": 9.862247228978633,
    "avg_bits_err_output": 9.862878535850369,
    "avg_bits_err_improve": -0.0006313068717354042,
    "time": 29459.036376953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (tan x))",
    "output_parens": 4,
    "avg_bits_err_input": 37.14351349314595,
    "avg_bits_err_output": 37.14351349314595,
    "avg_bits_err_improve": 0,
    "time": 18947.25732421875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.103093410625217,
    "avg_bits_err_output": 0.1642430453140325,
    "avg_bits_err_improve": 29.938850365311183,
    "time": 12584.429931640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.06058064168207,
    "avg_bits_err_output": 21.970523238028804,
    "avg_bits_err_improve": 15.090057403653269,
    "time": 19001.76416015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (!= (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (- x -1.0)))) 0.0) (/ (if (!= (/ -1.0 (+ 1.0 x)) 0.0) (/ (if (!= (pow (/ -1.0 (+ 1.0 x)) 2.0) 0.0) (/ (+ (pow (/ -1.0 (+ 1.0 x)) 4.0) (* (pow (/ -1.0 (+ 1.0 x)) 2.0) (/ (/ -1.0 (+ 1.0 x)) x))) (pow (/ -1.0 (+ 1.0 x)) 2.0)) (/ (+ (/ 1.0 (+ 1.0 x)) (/ -1.0 x)) (+ 1.0 x))) (/ -1.0 (+ 1.0 x))) (+ (/ -1.0 (+ 1.0 x)) (/ 1.0 x))) (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (- x -1.0))))) (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (- x -1.0)))))",
    "output_parens": 58,
    "avg_bits_err_input": 19.78679781097523,
    "avg_bits_err_output": 19.795499415780675,
    "avg_bits_err_improve": -0.008701604805445129,
    "time": 17757.896484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (atan (+ N 1.0)) 0.0) (- (/ (* (atan (+ N 1.0)) (atan N)) (- (atan (+ N 1.0)))) (/ 1.0 (/ -1.0 (atan (+ N 1.0))))) (- (atan (+ N 1.0)) (atan N)))",
    "output_parens": 21,
    "avg_bits_err_input": 15.702685266654953,
    "avg_bits_err_output": 15.706862805300185,
    "avg_bits_err_improve": -0.004177538645231849,
    "time": 12643.26220703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.68373776830271,
    "avg_bits_err_output": 1.1927035824343493,
    "avg_bits_err_improve": 28.49103418586836,
    "time": 27175.214111328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (* (- 1.0 m) (/ (- m (* m m)) v)) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07484680468885217,
    "avg_bits_err_output": 0.07791921918104967,
    "avg_bits_err_improve": -0.0030724144921975005,
    "time": 12660.052490234375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b (* a -2.0)) (/ (/ 2.0 a) b))",
    "output_parens": 5,
    "avg_bits_err_input": 16.554429015546823,
    "avg_bits_err_output": 0.2612246250072112,
    "avg_bits_err_improve": 16.29320439053961,
    "time": 11834.08544921875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* (/ PI 180.0) angle))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.127718495623387,
    "avg_bits_err_output": 20.101644816409127,
    "avg_bits_err_improve": 0.02607367921426018,
    "time": 33402.733154296875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(fma (cos (* PI (/ angle 180.0))) (* (sin (* angle (/ PI -180.0))) (* (- (pow a 2.0) (pow b 2.0)) 2.0)) (fma (* -2.0 (pow a 2.0)) (* (cos (* PI (/ angle 180.0))) (sin (* PI (/ angle 180.0)))) (* (* (cos (* PI (/ angle 180.0))) (sin (* PI (/ angle 180.0)))) (* 2.0 (pow a 2.0)))))",
    "output_parens": 32,
    "avg_bits_err_input": 31.189253402311895,
    "avg_bits_err_output": 31.223595588358418,
    "avg_bits_err_improve": -0.03434218604652273,
    "time": 36045.41259765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (/ PI 180.0))) a) 2.0) (pow (* b (cos (if (!= (* PI (/ angle -180.0)) 0.0) (/ 1.0 (/ (/ 1.0 (/ angle 180.0)) PI)) (* PI (/ angle 180.0))))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.250990098620672,
    "avg_bits_err_output": 20.218539603852047,
    "avg_bits_err_improve": 0.03245049476862505,
    "time": 39654.357666015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.174386842188131,
    "avg_bits_err_output": 0.174386842188131,
    "avg_bits_err_improve": 0,
    "time": 13276.150634765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32787923409624165,
    "avg_bits_err_output": 0.32370753386473006,
    "avg_bits_err_improve": 0.004171700231511588,
    "time": 20041.104248046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (sin v) (+ (* (cos v) e) 1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13361560156295077,
    "avg_bits_err_output": 0.13354248125036058,
    "avg_bits_err_improve": 7.312031259018581e-05,
    "time": 15215.720947265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.553132762127607,
    "avg_bits_err_output": 16.55313447732514,
    "avg_bits_err_improve": -1.715197534224444e-06,
    "time": 33539.77001953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.54578696672873,
    "avg_bits_err_output": 0.16861373789172868,
    "avg_bits_err_improve": 52.377173228837,
    "time": 24639.911865234375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c 4.0) (- (- b) (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.703022829959906,
    "avg_bits_err_output": 0.3390130023478506,
    "avg_bits_err_improve": 28.364009827612055,
    "time": 26041.561767578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.95278290847692,
    "avg_bits_err_output": 0.23436842188130985,
    "avg_bits_err_improve": 43.71841448659561,
    "time": 28433.254638671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -5.8e-273) (/ (if (!= (- b (- (if (!= (- (sqrt (fma c (* -4.0 a) (* b b))) b) 0.0) (* c (* a (/ 4.0 (- b (sqrt (fma c (* -4.0 a) (* b b))))))) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) (- b))) 0.0) (* (- b (- (if (!= (- (sqrt (fma c (* -4.0 a) (* b b))) b) 0.0) (* c (* a (/ 4.0 (- b (sqrt (fma c (* -4.0 a) (* b b))))))) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) b)) (/ (+ b (- (if (!= (- (sqrt (fma c (* -4.0 a) (* b b))) b) 0.0) (* c (* a (/ 4.0 (- b (sqrt (fma c (* -4.0 a) (* b b))))))) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) b)) (- b (- (if (!= (- (sqrt (fma c (* -4.0 a) (* b b))) b) 0.0) (* c (* a (/ 4.0 (- b (sqrt (fma c (* -4.0 a) (* b b))))))) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) (- b))))) (- (if (!= (- (sqrt (fma c (* -4.0 a) (* b b))) b) 0.0) (* c (* a (/ 4.0 (- b (sqrt (fma c (* -4.0 a) (* b b))))))) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) (+ b b))) (* a 2.0)) (if (<= b 1.75e+152) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)) (+ (/ (if (!= (- b) 0.0) (* c (/ (* -4.0 a) b)) (- b)) (* a 8.0)) (if (!= (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0)) 0.0) (+ (/ (pow (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0)) 2.0) (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 16.0))) (/ 1.0 (/ 1.0 (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0))))) (/ (- (* (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) 0.25) (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) -8.0)) a)))))",
    "output_parens": 217,
    "avg_bits_err_input": 34.16796812371057,
    "avg_bits_err_output": 12.846848102961243,
    "avg_bits_err_improve": 21.32112002074933,
    "time": 41866.1064453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (* (cos (- lambda1 lambda2)) (cos phi2)) 0.0) (/ (* (* (cos (- lambda1 lambda2)) (cos phi2)) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1))) (* (cos (- lambda1 lambda2)) (cos phi2))) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.8658996775858595,
    "avg_bits_err_output": 0.8707864246849314,
    "avg_bits_err_improve": -0.004886747099071886,
    "time": 31568.066162109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (- -1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (- 1.0 (pow (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 2.0)) (- -1.0 (/ 2.0 (- (exp (log (+ 2.0 (exp (* -2.0 x))))) 1.0)))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 27,
    "avg_bits_err_input": 29.094274758241443,
    "avg_bits_err_output": 29.09471460642519,
    "avg_bits_err_improve": -0.00043984818374553925,
    "time": 22882.255126953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(- (* (expm1 (+ x x)) (/ 1.0 (+ (/ (exp x) (exp (- x))) 1.0))) 0.0)",
    "output_parens": 10,
    "avg_bits_err_input": 58.341430065011906,
    "avg_bits_err_output": 0.4661274437510818,
    "avg_bits_err_improve": 57.87530262126082,
    "time": 17684.12744140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (expm1 (* x 2.0)) (exp (- x))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.420190970130484,
    "avg_bits_err_output": 0.05669812031259014,
    "avg_bits_err_improve": 58.363492849817895,
    "time": 8575.18701171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (- (exp x) (/ -1.0 (exp x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007823120312590144,
    "avg_bits_err_output": 0.007823120312590144,
    "avg_bits_err_improve": 0,
    "time": 6508.048583984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.969375,
    "avg_bits_err_output": 31.969375,
    "avg_bits_err_improve": 0,
    "time": 4300.76318359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (expm1 (log1p (/ (- -1.0 x) (+ x -1.0))))))",
    "output_parens": 7,
    "avg_bits_err_input": 58.75718426350197,
    "avg_bits_err_output": 58.770103263255024,
    "avg_bits_err_improve": -0.01291899975305455,
    "time": 17622.2998046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.010875,
    "avg_bits_err_output": 0.010875,
    "avg_bits_err_improve": 0,
    "time": 3666.050048828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12107312031259015,
    "avg_bits_err_output": 0.12107312031259015,
    "avg_bits_err_improve": 0,
    "time": 25082.14990234375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1320212406251803,
    "avg_bits_err_output": 0.1320212406251803,
    "avg_bits_err_improve": 0,
    "time": 26654.510986328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (cos (/ phi2 2.0)) (* (- lambda1 lambda2) (cos (/ phi1 2.0))) (* (- lambda1 lambda2) (* (sin (/ phi2 2.0)) (sin (/ phi1 -2.0))))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.16164565647196,
    "avg_bits_err_output": 0.12928187418999207,
    "avg_bits_err_improve": 39.03236378228197,
    "time": 30576.383544921875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (* (+ a b) (/ (- a b) a)) a)))",
    "output_parens": 7,
    "avg_bits_err_input": 15.001870432482269,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 14.989620432482269,
    "time": 8568.43798828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (+ (+ (+ (cos delta) -1.0) (- (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) 1.0)))",
    "output_parens": 24,
    "avg_bits_err_input": 0.15074603719722948,
    "avg_bits_err_output": 0.1743316210868682,
    "avg_bits_err_improve": -0.023585583889638717,
    "time": 41249.9111328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.54121187401281,
    "avg_bits_err_output": 0.17140357187842545,
    "avg_bits_err_improve": 52.36980830213438,
    "time": 29083.734619140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.833534575413424,
    "avg_bits_err_output": 0.3326800765730469,
    "avg_bits_err_improve": 28.500854498840376,
    "time": 24753.821533203125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 44.071963725662876,
    "avg_bits_err_output": 0.24668458750793235,
    "avg_bits_err_improve": 43.82527913815494,
    "time": 23822.15673828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (pow (fma b b (* a (* c -3.0))) 0.5))) (* a 3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.19149044542867,
    "avg_bits_err_output": 21.890437883742074,
    "avg_bits_err_improve": 12.301052561686596,
    "time": 25554.899169921875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (if (!= (* (sin (- lambda1 lambda2)) (cos phi2)) 0.0) (- (/ 1.0 (/ (/ 1.0 (sin (- lambda1 lambda2))) (cos phi2))) 0.0) (* (sin (- lambda1 lambda2)) (cos phi2))) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 28,
    "avg_bits_err_input": 13.244023484142858,
    "avg_bits_err_output": 13.26445541894863,
    "avg_bits_err_improve": -0.020431934805772656,
    "time": 36224.93896484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.478830136119743,
    "avg_bits_err_output": 0.5356180214910783,
    "avg_bits_err_improve": 28.943212114628665,
    "time": 29893.392578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.012375,
    "avg_bits_err_output": 0.012375,
    "avg_bits_err_improve": 0,
    "time": 1674.17822265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (- (/ -1.0 (- x 1.0)) (+ -1.0 (/ x (- x 1.0)))) (+ x 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 14.356729808407922,
    "avg_bits_err_output": 12.463236686603159,
    "avg_bits_err_improve": 1.893493121804763,
    "time": 22172.10009765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.4e-306) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* F -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (sqrt (* (* F (- (pow B 2.0) (* A (* C 4.0)))) -2.0)) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 45,
    "avg_bits_err_input": 52.68465213343055,
    "avg_bits_err_output": 47.51773264198977,
    "avg_bits_err_improve": 5.166919491440787,
    "time": 38056.223388671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) (- INFINITY)) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (* (- C A) (- C A)) (pow B 2.0)))))) PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 0.05) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))) 0.0) (/ (- (pow B 2.0)) (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))) (- C (+ A (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))))))) PI)) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (* (- C A) (- C A)) (pow B 2.0)))))) PI))))",
    "output_parens": 80,
    "avg_bits_err_input": 28.799872016422874,
    "avg_bits_err_output": 24.985715792091025,
    "avg_bits_err_improve": 3.8141562243318496,
    "time": 28738.954345703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.32e-268) (* (/ (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* 4.0 C)) (pow B 2.0))) (* (sqrt (- (* A (* 4.0 C)) (pow B 2.0))) (sqrt (- F)))) (/ (- (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (* (sqrt F) (sqrt (* 2.0 (+ A (if (!= (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) 0.0) (/ (- (- (* C C) (pow (- A C) 2.0)) (pow B 2.0)) (- C (* (sqrt (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) (sqrt (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))))))) (- (pow B 2.0) (* 4.0 (* A C)))))",
    "output_parens": 77,
    "avg_bits_err_input": 52.626284500470604,
    "avg_bits_err_output": 46.09203361339755,
    "avg_bits_err_improve": 6.534250887073057,
    "time": 59301.23828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.048649245902647,
    "avg_bits_err_output": 15.048649245902647,
    "avg_bits_err_improve": 0,
    "time": 19036.240966796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-292) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) (- g)) 0.0) (/ (* h h) (- (- g) (sqrt (fma g g (* h (- h)))))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 69,
    "avg_bits_err_input": 36.04933893785269,
    "avg_bits_err_output": 5.229229631390356,
    "avg_bits_err_improve": 30.82010930646233,
    "time": 35220.50927734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (- (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))) (* (sin (* PI 0.6666666666666666)) (sin (/ (acos (/ g (- h))) 3.0)))) (* (expm1 (log1p (sin (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) -3.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.9915689859449832,
    "avg_bits_err_output": 0.03244605312878609,
    "avg_bits_err_improve": 0.9591229328161971,
    "time": 22505.093505859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(+ (+ (/ (exp a) (+ (exp a) (exp b))) -1.0) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.6864481203125902,
    "avg_bits_err_output": 0.787795635477231,
    "avg_bits_err_improve": -0.1013475151646408,
    "time": 5280.90087890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-317) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e-277) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+279) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.087774609214982,
    "avg_bits_err_output": 2.3212239834702233,
    "avg_bits_err_improve": 8.76655062574476,
    "time": 9989.412109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5410586298238309,
    "avg_bits_err_output": 0.459,
    "avg_bits_err_improve": 0.08205862982383089,
    "time": 6970.363525390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.001) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (exp (* 1.0 (log (- (hypot 1.0 x) x))))) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 50000000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 47,
    "avg_bits_err_input": 53.053144343062264,
    "avg_bits_err_output": 0.10630969466939777,
    "avg_bits_err_improve": 52.946834648392866,
    "time": 13118.43212890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.661814674667153,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.661814674667153,
    "time": 2658.55029296875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.014125,
    "avg_bits_err_output": 0.014125,
    "avg_bits_err_improve": 0,
    "time": 5370.25048828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1395.62353515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= r -5e-11) (- (- (+ 3.0 (/ 2.0 (* r r))) (* r (* (* w (* w (* r 0.125))) (/ (- 3.0 (+ v v)) (- 1.0 v))))) 4.5) (if (<= r 2e-17) (- (- (+ 3.0 (- (/ (/ 2.0 r) r) 0.0)) (* (* (* r (* r w)) w) (/ (* 0.125 (- 3.0 (* 2.0 v))) (- 1.0 v)))) 4.5) (- (- (+ 3.0 (/ 2.0 (* r r))) (* (* w (* w r)) (* r (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) 4.5)))",
    "output_parens": 46,
    "avg_bits_err_input": 12.904227775203816,
    "avg_bits_err_output": 0.28953513030591216,
    "avg_bits_err_improve": 12.614692644897904,
    "time": 26714.939208984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (+ (* x1 (* (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0)) (* x1 -6.0))) (/ (+ (* (* (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (* x1 -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)) (* (fma (- (fma 3.0 (* x1 x1) (* 2.0 x2))) (* x1 2.0) (* 2.0 (* x1 (fma 3.0 (* x1 x1) (* 2.0 x2))))) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0))) (- -1.0 (* x1 x1))))))))))",
    "output_parens": 72,
    "avg_bits_err_input": 0.5144545917423572,
    "avg_bits_err_output": 0.2762829627868742,
    "avg_bits_err_improve": 0.238171628955483,
    "time": 78171.3095703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.37992929354394,
    "avg_bits_err_output": 1.3087197422870103,
    "avg_bits_err_improve": 17.071209551256928,
    "time": 13360.302001953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* (* x x) (* -0.12900613773279798 x)) (* (- x) 0.954929658551372))",
    "output_parens": 6,
    "avg_bits_err_input": 0.2313942038992627,
    "avg_bits_err_output": 0.19552144413776232,
    "avg_bits_err_improve": 0.035872759761500395,
    "time": 10200.671142578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003875,
    "avg_bits_err_output": 0.003875,
    "avg_bits_err_improve": 0,
    "time": 3708.15966796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* (- (/ 0.5 a) (/ 0.5 b)) (/ PI (+ a b))) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.448593729422706,
    "avg_bits_err_output": 0.30409060313743985,
    "avg_bits_err_improve": 14.144503126285267,
    "time": 18210.142578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (- (exp (- (fma eps x x))) (+ (- -1.0 (/ (exp (* x (+ eps -1.0))) eps)) (/ (exp (- (fma eps x x))) eps))) (- (expm1 (* x (+ eps -1.0))))) 2.0)",
    "output_parens": 20,
    "avg_bits_err_input": 29.068608974404512,
    "avg_bits_err_output": 24.44594150227332,
    "avg_bits_err_improve": 4.622667472131191,
    "time": 21925.614990234375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.00525,
    "avg_bits_err_output": 0.00525,
    "avg_bits_err_improve": 0,
    "time": 6874.556396484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- 4.0 (+ (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t)) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.008625,
    "avg_bits_err_output": 0.0699411656266226,
    "avg_bits_err_improve": -0.0613161656266226,
    "time": 14386.108642578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (- (+ (pow (* 2.0 (/ t (+ t 1.0))) 2.0) -1.0) -1.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.047125,
    "avg_bits_err_output": 0.046625,
    "avg_bits_err_improve": 0.0005000000000000004,
    "time": 12538.614013671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3498.515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8310.713623046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2255.817138671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.822439552994903,
    "avg_bits_err_output": 0.2555,
    "avg_bits_err_improve": 7.566939552994904,
    "time": 37581.1083984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.196932921991729,
    "avg_bits_err_output": 7.196932921991729,
    "avg_bits_err_improve": 0,
    "time": 20015.47802734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.775917841363928,
    "avg_bits_err_output": 0.03412332604790144,
    "avg_bits_err_improve": 15.741794515316027,
    "time": 10452.110595703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (pow (pow (exp 10.0) x) x) (+ (+ (cos x) -1.0) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 3.5279987713504624,
    "avg_bits_err_output": 1.2830682422639834,
    "avg_bits_err_improve": 2.2449305290864787,
    "time": 19658.3134765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 15.238760082455856,
    "avg_bits_err_output": 15.238760082455856,
    "avg_bits_err_improve": 0,
    "time": 13700.831298828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.974329284874436,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.974329284874436,
    "time": 6178.93408203125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.31492535642638,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.31417535642638,
    "time": 4747.736083984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (- 1.7e+308 (+ -1.7e+308 (* t +inf.0))) -2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.29521936093777046,
    "avg_bits_err_improve": 63.70478063906223,
    "time": 23485.05224609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ t 2.5e+31) t)",
    "output_parens": 2,
    "avg_bits_err_input": 61.843247791892665,
    "avg_bits_err_output": 0.39075,
    "avg_bits_err_improve": 61.45249779189267,
    "time": 15260.0341796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma b b (* c (* a -4.0)))) b) 0.0) (* (* a -4.0) (/ c (- (sqrt (fma b b (* c (* a -4.0)))) b))) (+ b (sqrt (fma b b (* c (* a -4.0)))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.35626756182946,
    "avg_bits_err_output": 22.286268510528476,
    "avg_bits_err_improve": 12.069999051300986,
    "time": 25923.552734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -5.8e-273) (/ (if (!= (- b (- (if (!= (- (sqrt (fma c (* -4.0 a) (* b b))) b) 0.0) (* c (* a (/ 4.0 (- b (sqrt (fma c (* -4.0 a) (* b b))))))) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) (- b))) 0.0) (* (- b (- (if (!= (- (sqrt (fma c (* -4.0 a) (* b b))) b) 0.0) (* c (* a (/ 4.0 (- b (sqrt (fma c (* -4.0 a) (* b b))))))) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) b)) (/ (+ b (- (if (!= (- (sqrt (fma c (* -4.0 a) (* b b))) b) 0.0) (* c (* a (/ 4.0 (- b (sqrt (fma c (* -4.0 a) (* b b))))))) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) b)) (- b (- (if (!= (- (sqrt (fma c (* -4.0 a) (* b b))) b) 0.0) (* c (* a (/ 4.0 (- b (sqrt (fma c (* -4.0 a) (* b b))))))) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) (- b))))) (- (if (!= (- (sqrt (fma c (* -4.0 a) (* b b))) b) 0.0) (* c (* a (/ 4.0 (- b (sqrt (fma c (* -4.0 a) (* b b))))))) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) (+ b b))) (* a 2.0)) (if (<= b 1.75e+152) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)) (+ (/ (if (!= (- b) 0.0) (* c (/ (* -4.0 a) b)) (- b)) (* a 8.0)) (if (!= (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0)) 0.0) (+ (/ (pow (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0)) 2.0) (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 16.0))) (/ 1.0 (/ 1.0 (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) (* a 8.0))))) (/ (- (* (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) 0.25) (/ (if (!= (- b) 0.0) (* c (* -4.0 (/ a b))) (- b)) -8.0)) a)))))",
    "output_parens": 217,
    "avg_bits_err_input": 34.16796812371057,
    "avg_bits_err_output": 12.846848102961243,
    "avg_bits_err_improve": 21.32112002074933,
    "time": 47440.5693359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2828.470703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.96699280021474,
    "avg_bits_err_output": 0.0105,
    "avg_bits_err_improve": 39.95649280021474,
    "time": 6943.3408203125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(* (- x y) (/ (+ x y) (fma y y (* x x))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.940154839816145,
    "avg_bits_err_output": 20.179825594639,
    "avg_bits_err_improve": -0.23967075482285338,
    "time": 3836.87060546875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6135202606315286,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6135202606315286,
    "time": 6708.599365234375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.032625,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.031875,
    "time": 6530.2626953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021542481250360578,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.011167481250360578,
    "time": 4762.7724609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.01225,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.011375,
    "time": 3677.818359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00025,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0,
    "time": 1781.269775390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ c (+ a b))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4040592109406551,
    "avg_bits_err_output": 0.238375,
    "avg_bits_err_improve": 0.1656842109406551,
    "time": 11273.624267578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (pow (cos x) 2.0) 0.0) (/ (* (+ (pow (cos x) 2.0) (cos x)) (- (cos x) (pow (cos x) 2.0))) (pow (cos x) 2.0)) (- 1.0 (pow (cos x) 2.0))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 28,
    "avg_bits_err_input": 30.534509587325942,
    "avg_bits_err_output": 30.53442948562967,
    "avg_bits_err_improve": 8.010169627326036e-05,
    "time": 16693.4130859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (if (!= (sqrt (- (* x x) eps)) 0.0) (/ (+ (- (* x x) eps) (* x (sqrt (- (* x x) eps)))) (sqrt (- (* x x) eps))) (+ x (sqrt (- (* x x) eps))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 31,
    "avg_bits_err_input": 24.624325936858042,
    "avg_bits_err_output": 0.061221804688852154,
    "avg_bits_err_improve": 24.56310413216919,
    "time": 15704.885986328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (- (* x x) (pow (sin x) 2.0)) (fma (sin x) (- (sin x)) (pow (sin x) 2.0))) 0.0) (/ (- (pow (- (* x x) (pow (sin x) 2.0)) 2.0) (pow (fma (sin x) (- (sin x)) (pow (sin x) 2.0)) 2.0)) (- (- (* x x) (pow (sin x) 2.0)) (- (fma (sin x) (sin x) (pow (sin x) 2.0)) (- 1.0 (cos (* x 2.0)))))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 56,
    "avg_bits_err_input": 29.735580462747357,
    "avg_bits_err_output": 29.55741143922508,
    "avg_bits_err_improve": 0.17816902352227615,
    "time": 33312.630126953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0055,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.004625,
    "time": 2558.59521484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 1e-239) (/ (* (expm1 (* n (log1p (/ i n)))) 100.0) (/ i n)) (- (* 100.0 (/ (pow (+ (/ i n) 1.0) n) (/ i n))) (/ 100.0 (/ i n))))",
    "output_parens": 24,
    "avg_bits_err_input": 47.906857548174784,
    "avg_bits_err_output": 14.239850551199611,
    "avg_bits_err_improve": 33.667006996975175,
    "time": 22515.1025390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 0.0) (+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 2e-19) (/ (+ (* (+ d d) (+ b b)) (* (+ a a) (+ c c))) (* (* (fma d d (* c c)) 2.0) 2.0)) (+ (* b (/ d (fma c c (* d d)))) (* a (if (!= (/ c (fma d d (* c c))) 0.0) (/ 1.0 (/ 1.0 (/ c (fma d d (* c c))))) (/ c (fma d d (* c c))))))))",
    "output_parens": 58,
    "avg_bits_err_input": 25.968229817912984,
    "avg_bits_err_output": 22.496882883877028,
    "avg_bits_err_improve": 3.4713469340359566,
    "time": 11779.703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) -4e-125) (fma b (/ c (fma c c (* d d))) (if (!= (* d (/ (- a) (fma d d (* c c)))) 0.0) (/ 1.0 (/ 1.0 (* d (* (/ -1.0 (fma d d (* c c))) a)))) (* d (/ (- a) (fma d d (* c c)))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 5e+274) (+ (/ (fma (- c) b (* b c)) (- (fma c c (* d d)))) (/ (- (* b c) (* a d)) (fma c c (* d d)))) (fma b (/ c (fma c c (* d d))) (if (!= (* d (/ (- a) (fma d d (* c c)))) 0.0) (/ 1.0 (/ 1.0 (if (!= (/ (* d (- a)) (fma d d (* c c))) 0.0) (/ 1.0 (/ (/ -1.0 d) (/ a (fma d d (* c c))))) (/ (* d (- a)) (fma d d (* c c)))))) (* d (/ (- a) (fma d d (* c c))))))))",
    "output_parens": 91,
    "avg_bits_err_input": 26.133310396043644,
    "avg_bits_err_output": 23.702951763422064,
    "avg_bits_err_improve": 2.43035863262158,
    "time": 17532.044189453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(/ (- 1.0 (- ux (* ux maxCos))) 1.0)",
    "output_parens": 4,
    "avg_bits_err_input": 0.037625,
    "avg_bits_err_output": 0.02276184218813101,
    "avg_bits_err_improve": 0.014863157811868987,
    "time": 5812.46826171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- ux (- (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) (- ux (* ux ux))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.493586621741947,
    "avg_bits_err_output": 0.5500151011183626,
    "avg_bits_err_improve": 12.943571520623586,
    "time": 30459.793701171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (exp (* 1.0 (log (- (- 1.0 (log (+ 1.0 (expm1 (pow (- 1.0 ux) 2.0))))) (* (* ux maxCos) (+ (fma ux maxCos (- 1.0 ux)) (- 1.0 ux)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.529781691518084,
    "avg_bits_err_output": 12.343048449054743,
    "avg_bits_err_improve": 1.1867332424633403,
    "time": 28787.974853515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (if (!= (* uy (* 2.0 PI)) 0.0) (/ 1.0 (/ (/ 0.5 PI) uy)) (* uy (* 2.0 PI)))) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output_parens": 41,
    "avg_bits_err_input": 0.33362818424911234,
    "avg_bits_err_output": 0.34746118910846213,
    "avg_bits_err_improve": -0.013833004859349796,
    "time": 41010.762451171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax)))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.20030153685924734,
    "avg_bits_err_output": 0.20026129584738644,
    "avg_bits_err_improve": 4.024101186089757e-05,
    "time": 36970.159423828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (log1p (expm1 (sin (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5431772925161444,
    "avg_bits_err_output": 0.5490075817939677,
    "avg_bits_err_improve": -0.005830289277823253,
    "time": 24924.234375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (/ (* u1 (/ u1 (- 1.0 u1))) u1) (/ u1 (- 1.0 u1)))) (cos (* 6.28318530718 u2)))",
    "output_parens": 14,
    "avg_bits_err_input": 0.3217833431545981,
    "avg_bits_err_output": 0.3486987876790413,
    "avg_bits_err_improve": -0.026915444524443166,
    "time": 23803.03125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log1p (if (!= (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 2.0) 0.0) (/ (+ (/ 1.0 (* (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s)))))) (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s)))))))) -4.0) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 2.0)) (- (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 2.0))))",
    "output_parens": 90,
    "avg_bits_err_input": 0.33924215969447646,
    "avg_bits_err_output": 0.34363584371213,
    "avg_bits_err_improve": -0.004393684017653554,
    "time": 41226.3076171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06396203401129882,
    "avg_bits_err_output": 0.04765389245739274,
    "avg_bits_err_improve": 0.016308141553906086,
    "time": 13468.965576171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.13358078798172698,
    "avg_bits_err_output": 0.1019292628011985,
    "avg_bits_err_improve": 0.03165152518052848,
    "time": 21584.69140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641672695097591,
    "avg_bits_err_output": 0.6669021115332033,
    "avg_bits_err_improve": -0.002734842023444206,
    "time": 24887.16552734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.1575425624589511,
    "avg_bits_err_output": 0.15136695170411923,
    "avg_bits_err_improve": 0.006175610754831862,
    "time": 21887.251953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (+ (/ (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) -2.0) (- (* eta eta) (/ (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) 2.0))))))",
    "output_parens": 18,
    "avg_bits_err_input": 2.537795758433255,
    "avg_bits_err_output": 2.5496067099981685,
    "avg_bits_err_improve": -0.01181095156491363,
    "time": 28277.6904296875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (/ (/ (* (/ 1.0 v) cosTheta_i) (sinh (/ 1.0 v))) (* v (+ (exp (* sinTheta_i (/ sinTheta_O v))) (exp (* sinTheta_i (/ sinTheta_O v)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.45374477729140716,
    "avg_bits_err_output": 0.3757255353677652,
    "avg_bits_err_improve": 0.07801924192364196,
    "time": 28727.72021484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (+ (/ (- (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) 1.0) v) 0.6931)) (/ 0.5 v))",
    "output_parens": 9,
    "avg_bits_err_input": 0.1066016481684797,
    "avg_bits_err_output": 0.10842299507802326,
    "avg_bits_err_improve": -0.001821346909543567,
    "time": 9321.751708984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow (pow alpha PI) 2.0))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.47146334320773836,
    "avg_bits_err_output": 0.4398759766888982,
    "avg_bits_err_improve": 0.03158736651884014,
    "time": 26591.705322265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* 3.0 (* s (log (/ 1.0 (/ (fma u 1.7777777777777777 -1.7777777777777777) -1.3333333333333333)))))",
    "output_parens": 6,
    "avg_bits_err_input": 1.3238551415534026,
    "avg_bits_err_output": 1.2945726694319026,
    "avg_bits_err_improve": 0.029282472121499925,
    "time": 24920.777587890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ (/ 2.0 (/ 2.0 (- 1.0 (* 4.0 u)))) (log (+ 1.0 (expm1 (pow (+ 1.0 (* u -4.0)) 2.0)))))) s) 2.0) (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 12.310275082294115,
    "avg_bits_err_output": 11.466634078016023,
    "avg_bits_err_improve": 0.8436410042780924,
    "time": 24715.176025390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (/ (* (* r PI) s) 0.16666666666666666)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.15304794401725277,
    "avg_bits_err_output": 0.14728206421656279,
    "avg_bits_err_improve": 0.005765879800689988,
    "time": 27273.860595703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma n1_i (/ (sin (* u normAngle)) (sin normAngle)) (* (sin (- normAngle (* u normAngle))) (/ n0_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8490767472671129,
    "avg_bits_err_output": 0.7110075014067964,
    "avg_bits_err_improve": 0.13806924586031655,
    "time": 29837.78369140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (- (+ c (/ (* (sqrt (- 1.0 (+ cosTheta cosTheta))) (exp (* cosTheta (- cosTheta)))) (* (sqrt PI) cosTheta))) -1.0))",
    "output_parens": 13,
    "avg_bits_err_input": 0.7068688293326224,
    "avg_bits_err_output": 0.4756886556474246,
    "avg_bits_err_improve": 0.23118017368519783,
    "time": 23800.773681640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (log1p (expm1 (sin (* 2.0 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.520307270022995,
    "avg_bits_err_output": 0.5296627898668328,
    "avg_bits_err_improve": 12.990644480156162,
    "time": 18611.85595703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (if (!= (log1p (- u1)) 0.0) (/ 1.0 (/ 1.0 (log1p (- u1)))) (log1p (- u1))))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 16,
    "avg_bits_err_input": 13.570601282770717,
    "avg_bits_err_output": 0.3366785136323248,
    "avg_bits_err_improve": 13.233922769138392,
    "time": 18116.237548828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* (- alpha) alpha) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 13.978770255565019,
    "avg_bits_err_output": 0.32047180468885217,
    "avg_bits_err_improve": 13.658298450876167,
    "time": 17516.9521484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ cos2phi (* alphax alphax)) (/ (/ sin2phi alphay) alphay)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.741572865133525,
    "avg_bits_err_output": 0.5028791717694173,
    "avg_bits_err_improve": 12.238693693364109,
    "time": 17812.360107421875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) 50.0) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (- (* PI l) (- (pow (/ 1.0 F) 3.0) (- (pow (/ 1.0 F) 3.0) (* F (* (pow (/ 1.0 F) 3.0) (tan (* PI l))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 16.591322162193293,
    "avg_bits_err_output": 12.121836918695461,
    "avg_bits_err_improve": 4.469485243497832,
    "time": 22908.074951171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2183977750432873,
    "avg_bits_err_output": 0.15408405316774643,
    "avg_bits_err_improve": 0.06431372187554088,
    "time": 17935.79638671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.678654866980793,
    "avg_bits_err_output": 10.901710655019425,
    "avg_bits_err_improve": 2.776944211961368,
    "time": 24787.417236328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (expm1 (log1p (/ (+ (exp (* PI (/ f -4.0))) (exp (* PI (/ f 4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (* (/ f -4.0) 2.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))))) (/ PI -4.0))",
    "output_parens": 34,
    "avg_bits_err_input": 61.54165585945417,
    "avg_bits_err_output": 1.7712482462689239,
    "avg_bits_err_improve": 59.77040761318524,
    "time": 58715.712158203125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.32659585248511,
    "avg_bits_err_output": 34.05247603458801,
    "avg_bits_err_improve": 9.274119817897102,
    "time": 29681.370361328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.231344212828495,
    "avg_bits_err_output": 0.2201560156295071,
    "avg_bits_err_improve": 4.0111881971989884,
    "time": 33590.72509765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (log (+ 1.0 (expm1 (/ 1.0 (sqrt (+ (pow (* (* l (/ 2.0 Om)) (sin ky)) 2.0) (+ 1.0 (pow (* (* l (/ 2.0 Om)) (sin kx)) 2.0)))))))) 0.5)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.9556506569647484,
    "avg_bits_err_output": 0.00725,
    "avg_bits_err_improve": 0.9484006569647484,
    "time": 18415.259765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (- -1.0 (+ (- (pow (/ Om Omc) 2.0)) -1.0))) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 13,
    "avg_bits_err_input": 9.879134065163266,
    "avg_bits_err_output": 9.879481038585118,
    "avg_bits_err_improve": -0.00034697342185197044,
    "time": 18512.671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(* (sqrt (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*))))))) (* (sqrt (* 2.0 (fabs n))) (sqrt (fabs U))))",
    "output_parens": 18,
    "avg_bits_err_input": 34.715856491886406,
    "avg_bits_err_output": 17.009488421273307,
    "avg_bits_err_improve": 17.7063680706131,
    "time": 47779.792236328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -2.3e-75) (/ 2.0 (* (* (tan k) (/ (sin k) l)) (* (/ k t) (* (/ k t) (/ (pow t 3.0) l))))) (if (<= t 2.5e+61) (/ 2.0 (* (* (tan k) (/ (sin k) l)) (* (/ k t) (/ (* k (pow t 3.0)) (* t l))))) (/ 2.0 (/ (* k (/ (* (* (pow t 3.0) (/ (sin k) l)) (* k (/ (tan k) l))) t)) t))))",
    "output_parens": 40,
    "avg_bits_err_input": 47.454367195334584,
    "avg_bits_err_output": 31.45920828474804,
    "avg_bits_err_improve": 15.995158910586543,
    "time": 47929.234375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(+ (/ (/ 2.0 (/ (sin k) l)) (* (pow t 3.0) (* (/ (+ 2.0 (pow (/ k t) 2.0)) l) (+ (tan k) (tan k))))) (/ (/ 2.0 (/ (sin k) l)) (* (pow t 3.0) (* (/ (+ 2.0 (pow (/ k t) 2.0)) l) (+ (tan k) (tan k))))))",
    "output_parens": 29,
    "avg_bits_err_input": 32.29597966000656,
    "avg_bits_err_output": 26.770965207346123,
    "avg_bits_err_improve": 5.525014452660436,
    "time": 24933.609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (* (cos th) (+ (+ (* a1 (/ a1 4.0)) (* a1 (/ a1 4.0))) (/ (+ (* a1 a1) (* a2 (+ a2 a2))) 2.0))) (sqrt 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.5231174843993409,
    "avg_bits_err_output": 0.5110770703327842,
    "avg_bits_err_improve": 0.01204041406655676,
    "time": 23324.91650390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (pow (* PI (* 2.0 n)) (+ 0.5 (* k -0.5))) (sqrt k))",
    "output_parens": 7,
    "avg_bits_err_input": 0.4621902415054958,
    "avg_bits_err_output": 0.4111960908520914,
    "avg_bits_err_improve": 0.0509941506534044,
    "time": 19374.90869140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (if (!= (* (exp l) J) 0.0) (* J (/ (expm1 (+ l l)) (exp l))) (* (- (exp l) (exp (- l))) J)) (cos (/ K 2.0))) U)",
    "output_parens": 18,
    "avg_bits_err_input": 17.13823190441733,
    "avg_bits_err_output": 0.11813480546221343,
    "avg_bits_err_improve": 17.02009709895512,
    "time": 25420.964599609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= K -1.55e+68) (* (cos (- (/ (if (!= (* K n) 0.0) (* K (* K (* (+ n m) (if (!= (/ n (* K n)) 0.0) (/ (/ (/ n (* K n)) K) (/ n (* K n))) (/ n (* K n)))))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (if (<= K 4.8e+88) (* (- (* (- (* (cos -1.0) (cos (- (* K (/ (+ m n) 2.0)) M))) (* (sin (- (* K (/ (+ m n) 2.0)) M)) (sin 1.0))) (cos -1.0)) (* (sin (+ (- (* K (/ (+ m n) 2.0)) M) 1.0)) (sin -1.0))) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K n) 0.0) (* K (* K (* (+ n m) (if (!= (/ n (* K n)) 0.0) (/ (/ (/ n (* K n)) K) (/ n (* K n))) (/ n (* K n)))))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))))",
    "output_parens": 114,
    "avg_bits_err_input": 15.457810561855487,
    "avg_bits_err_output": 3.844301337287812,
    "avg_bits_err_improve": 11.613509224567675,
    "time": 24605.6376953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (sqrt (+ 1.0 (pow (/ (/ U (* 2.0 J)) (cos (/ K 2.0))) 2.0))) (* (cos (/ K 2.0)) -2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 18.109875,
    "avg_bits_err_output": 18.117002443751083,
    "avg_bits_err_improve": -0.007127443751084428,
    "time": 40851.20556640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ (* M D) (* 2.0 d)) 5e-69) (* w0 (sqrt (- 1.0 (* (* D (/ (/ M 2.0) d)) (/ (/ (* h (* D (/ M d))) l) 2.0))))) (* w0 (sqrt (- 1.0 (* (* D M) (/ (* D (* M (/ (/ h l) d))) (* d 4.0)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 14.03672484659555,
    "avg_bits_err_output": 9.371421499522292,
    "avg_bits_err_improve": 4.665303347073259,
    "time": 26286.524169921875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e+127) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) -2e-179) (* c0 (sqrt (if (!= (/ A (* V l)) 0.0) (* A (/ (/ 1.0 V) l)) (/ A (* V l))))) (if (<= (* V l) 0.0) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) 5e+287) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (/ (* A (/ 2.0 V)) (+ l l))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 20.075743097737565,
    "avg_bits_err_output": 12.18914240390983,
    "avg_bits_err_improve": 7.886600693827734,
    "time": 22196.28076171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -1.15e+188) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (* c0 (/ d (* w (* (* D D) h))))) (sqrt (- (pow (* d (* c0 (/ d (* w (* (* D D) h))))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* c0 (/ d (* w (* (* D D) h))))) (sqrt (- (pow (* d (* c0 (/ d (* w (* (* D D) h))))) 2.0) (* M M)))))) (fma d (* c0 (/ d (* w (* (* D D) h)))) (sqrt (- (pow (* d (* c0 (/ d (* w (* (* D D) h))))) 2.0) (* M M)))))) (if (<= w 2.3e-8) (/ (/ (* c0 (if (!= (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))) 0.0) (* M (/ M (- (/ (* c0 (pow (/ d D) 2.0)) (* w h)) (sqrt (- (pow (/ (* c0 (pow (/ d D) 2.0)) (* w h)) 2.0) (* M M)))))) (+ (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) w) 2.0) (if (<= w 3e+95) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (* c0 (/ d (* (* D D) (* h w))))) (sqrt (fma M (- M) (pow (* d (* c0 (/ d (* (* D D) (* h w))))) 2.0)))) 0.0) (* M (/ M (- (* d (* c0 (/ d (* (* D D) (* h w))))) (sqrt (fma M (- M) (pow (* d (* c0 (/ d (* (* D D) (* h w))))) 2.0)))))) (fma d (* c0 (/ d (* (* D D) (* h w)))) (sqrt (fma M (- M) (pow (* d (* c0 (/ d (* (* D D) (* h w))))) 2.0)))))) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (* c0 (/ d (* w (* (* D D) h))))) (sqrt (- (pow (* d (* c0 (/ d (* w (* (* D D) h))))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* c0 (/ d (* w (* (* D D) h))))) (sqrt (- (pow (* d (* c0 (/ d (* w (* (* D D) h))))) 2.0) (* M M)))))) (fma d (* c0 (/ d (* w (* (* D D) h)))) (sqrt (- (pow (* d (* c0 (/ d (* w (* (* D D) h))))) 2.0) (* M M)))))))))",
    "output_parens": 229,
    "avg_bits_err_input": 59.4890401168143,
    "avg_bits_err_output": 30.341470260800058,
    "avg_bits_err_improve": 29.147569856014243,
    "time": 68997.07543945312,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 2e+276) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* h (/ (pow (* M (/ D (* d 2.0))) 2.0) (+ l l))))) (fma (sqrt (/ d (* h l))) (* (- 1.0 (* h (* (* D (/ M (+ d d))) (/ (* D (/ M (+ d d))) (+ l l))))) (sqrt d)) 0.0))",
    "output_parens": 47,
    "avg_bits_err_input": 26.57517247183802,
    "avg_bits_err_output": 22.886995932932024,
    "avg_bits_err_improve": 3.6881765389059957,
    "time": 43449.31982421875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (/ (if (!= (+ 1.0 (hypot 1.0 x)) 0.0) (* x (/ x (- -1.0 (hypot 1.0 x)))) (- 1.0 (hypot 1.0 x))) (* (hypot 1.0 x) 2.0)) (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 31,
    "avg_bits_err_input": 15.268472142618139,
    "avg_bits_err_output": 0.029867546509868302,
    "avg_bits_err_improve": 15.23860459610827,
    "time": 17261.948974609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 (- 1.0 (* v v))) PI) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9855212406251803,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 0.9758962406251803,
    "time": 5827.209228515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (- 1.0 (* 5.0 (* v v))) (* PI (- (sqrt (- 2.0 (* (* v v) 6.0))) (* v (* v (sqrt (- 2.0 (* (* v v) 6.0)))))))) t)",
    "output_parens": 17,
    "avg_bits_err_input": 0.42904849037918835,
    "avg_bits_err_output": 0.10906616562662264,
    "avg_bits_err_improve": 0.3199823247525657,
    "time": 20510.333251953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (fma v v -1.0) (/ (sqrt (- 2.0 (* v (* v 6.0)))) -4.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.010948120312590145,
    "avg_bits_err_output": 0.007823120312590144,
    "avg_bits_err_improve": 0.003125000000000001,
    "time": 5049.555419921875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5439001819329498,
    "avg_bits_err_output": 0.5439001819329498,
    "avg_bits_err_improve": 0,
    "time": 11774.919921875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.9259301046592883,
    "avg_bits_err_output": 1.9084819843466982,
    "avg_bits_err_improve": 0.01744812031259002,
    "time": 16270.615234375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (- Vef (- Ec (+ mu EDonor))) KbT)) -1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.018231961784336958,
    "avg_bits_err_output": 0.018231961784336958,
    "avg_bits_err_improve": 0,
    "time": 8778.076171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow b 4.0) (* (* a a) (+ (* b (+ b b)) (* a a)))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.19278029524739168,
    "avg_bits_err_output": 0.10148537024594949,
    "avg_bits_err_improve": 0.09129492500144219,
    "time": 7983.863525390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (fma 4.0 (fma (* b b) (- 1.0 (* a 3.0)) (* a (* a (+ a 1.0)))) (fma (* b (* b a)) (+ a a) (+ (pow a 4.0) (pow b 4.0)))) -1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 0.1859979328161958,
    "avg_bits_err_output": 0.015469360937770436,
    "avg_bits_err_improve": 0.17052857187842538,
    "time": 21127.7724609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (* (* b b) (fma b b (* a a))) (fma a (* b (* a b)) (pow a 4.0))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.19748326282425066,
    "avg_bits_err_output": 0.11094045980622996,
    "avg_bits_err_improve": 0.0865428030180207,
    "time": 20699.969970703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (if (!= (- 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x))))) 0.0) (/ (if (!= (- 1.0 (/ (* x x) (fma x x (* p (* p 4.0))))) 0.0) (/ 1.0 (/ 1.0 (+ -1.0 (/ (* x x) (fma x x (* p (* p 4.0))))))) (+ -1.0 (/ (* x x) (fma x x (* p (* p 4.0)))))) (+ -1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x)))))) (+ 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x))))))))",
    "output_parens": 45,
    "avg_bits_err_input": 13.033998074617855,
    "avg_bits_err_output": 13.174660884924709,
    "avg_bits_err_improve": -0.14066281030685346,
    "time": 20172.96533203125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.25816847325312,
    "avg_bits_err_output": 0.04775,
    "avg_bits_err_improve": 41.21041847325312,
    "time": 4839.214111328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))",
    "output_parens": 8,
    "avg_bits_err_input": 31.461052173174245,
    "avg_bits_err_output": 31.429315610889542,
    "avg_bits_err_improve": 0.031736562284702785,
    "time": 20679.39990234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (+ (/ 0.0 a) (/ b_2 (- a))) (if (<= b_2 -1e-156) (+ (/ (sqrt (- (* b_2 b_2) (* a c))) a) (/ b_2 (- a))) (/ (if (!= b_2 0.0) (* a (/ c (- (- b_2) (+ (sqrt (- (* b_2 b_2) (* c a))) (/ 0.0 b_2))))) (- (sqrt (fma b_2 b_2 (* a (- c)))) b_2)) a)))",
    "output_parens": 34,
    "avg_bits_err_input": 34.31137639132593,
    "avg_bits_err_output": 20.915404351334235,
    "avg_bits_err_improve": 13.395972039991694,
    "time": 17124.645751953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 33.67612592308911,
    "avg_bits_err_output": 21.689112532731137,
    "avg_bits_err_improve": 11.987013390357973,
    "time": 18245.907470703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.736452024498952,
    "avg_bits_err_output": 30.95250076986972,
    "avg_bits_err_improve": 0.7839512546292333,
    "time": 16159.16943359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (- (expm1 (/ (log x) n)) (exp (/ (log1p x) n))) 0.0) (/ (* (- (expm1 (/ (log x) n)) (expm1 (/ (log1p x) n))) (- (exp (/ (log1p x) n)) (expm1 (/ (log x) n)))) (- (expm1 (/ (log x) n)) (exp (/ (log1p x) n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 38,
    "avg_bits_err_input": 33.29715031191236,
    "avg_bits_err_output": 11.262515293149235,
    "avg_bits_err_improve": 22.034635018763126,
    "time": 29974.679443359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (log1p N) (log N))",
    "output_parens": 3,
    "avg_bits_err_input": 28.969261763196297,
    "avg_bits_err_output": 28.969739470154316,
    "avg_bits_err_improve": -0.0004777069580192972,
    "time": 11789.05908203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ (/ (/ (- x (* x (/ x (+ 1.0 x)))) x) x) (/ -1.0 x)) x)",
    "output_parens": 9,
    "avg_bits_err_input": 14.50278024762384,
    "avg_bits_err_output": 14.262174474481883,
    "avg_bits_err_improve": 0.2406057731419562,
    "time": 20016.479736328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))",
    "output_parens": 8,
    "avg_bits_err_input": 39.86815598606264,
    "avg_bits_err_output": 6.187146787708759,
    "avg_bits_err_improve": 33.68100919835388,
    "time": 23229.147216796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(exp (* 1.0 (log1p (- (cbrt (+ x 1.0)) (- (cbrt x) -1.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 29.348605674942352,
    "avg_bits_err_output": 29.050065450326013,
    "avg_bits_err_improve": 0.2985402246163389,
    "time": 14145.005126953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log (- 1.0 (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 30.28445121235955,
    "avg_bits_err_output": 30.28802647362611,
    "avg_bits_err_improve": -0.0035752612665618244,
    "time": 21751.175537109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.95559404567842,
    "avg_bits_err_output": 21.554183097076105,
    "avg_bits_err_improve": 12.401410948602312,
    "time": 25651.48046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) 0.0) (* a (/ (* c 4.0) (- (sqrt (fma -4.0 (* a c) (* b b))) b))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.66758794091285,
    "avg_bits_err_output": 21.6613447732474,
    "avg_bits_err_improve": 12.006243167665453,
    "time": 23188.984130859375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(log1p (expm1 (/ (log1p (- x)) (log1p x))))",
    "output_parens": 6,
    "avg_bits_err_input": 61.270619768826684,
    "avg_bits_err_output": 0.03277857187842551,
    "avg_bits_err_improve": 61.23784119694826,
    "time": 16485.1357421875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log (+ n 1.0)) (log n)) n)) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 62.99302958475544,
    "avg_bits_err_output": 44.230468405191445,
    "avg_bits_err_improve": 18.762561179563995,
    "time": 15242.865234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (/ (- (- (/ 1.0 (pow (+ 1.0 eps) 2.0)) (/ 1.0 (+ 1.0 eps))) (/ eps (pow (+ 1.0 eps) 2.0))) (/ 1.0 (+ 1.0 eps))))",
    "output_parens": 14,
    "avg_bits_err_input": 58.74642241238647,
    "avg_bits_err_output": 50.68913609618653,
    "avg_bits_err_improve": 8.057286316199942,
    "time": 20834.26171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(log (+ 1.0 (expm1 (+ (- (/ 0.5 x) (/ 0.5 (tan x))) (/ (- 1.0 (/ x (tan x))) (+ x x))))))",
    "output_parens": 13,
    "avg_bits_err_input": 59.8838557877573,
    "avg_bits_err_output": 59.87395782802524,
    "avg_bits_err_improve": 0.00989795973205787,
    "time": 32678.4462890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* eps (/ (expm1 (* eps (+ a b))) (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.345378136483426,
    "avg_bits_err_output": 29.466582477487403,
    "avg_bits_err_improve": 30.878795658996022,
    "time": 28459.8388671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.57759652460927,
    "avg_bits_err_output": 0.4115424812503606,
    "avg_bits_err_improve": 41.16605404335891,
    "time": 6501.42138671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.64956406296297,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.648939062962974,
    "time": 3623.763427734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.190555501613225,
    "avg_bits_err_output": 0.021933307961146224,
    "avg_bits_err_improve": 29.16862219365208,
    "time": 12771.183837890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (exp (- x)) 0.0) (/ (fma (exp (- x)) (exp (- x)) (+ 1.0 (/ -2.0 (exp x)))) (exp (- x))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 20,
    "avg_bits_err_input": 29.97122092094942,
    "avg_bits_err_output": 29.409048326832377,
    "avg_bits_err_improve": 0.5621725941170439,
    "time": 22646.874267578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ (/ 2.0 x) (/ (+ (+ x x) 2.0) x)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 9.863463027586418,
    "avg_bits_err_output": 9.906668502256878,
    "avg_bits_err_improve": -0.043205474670459765,
    "time": 24651.742919921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (log1p (expm1 (tan x))))",
    "output_parens": 6,
    "avg_bits_err_input": 36.57062617300174,
    "avg_bits_err_output": 36.614509543498784,
    "avg_bits_err_improve": -0.04388337049704205,
    "time": 19078.430419921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.19445551519674,
    "avg_bits_err_output": 0.16110864687698312,
    "avg_bits_err_improve": 29.033346868319757,
    "time": 13261.640869140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin eps) (cos x) (* (sin x) (cos eps))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.310897933782066,
    "avg_bits_err_output": 22.13601345757384,
    "avg_bits_err_improve": 15.174884476208227,
    "time": 20453.173095703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 20.190462941858282,
    "avg_bits_err_output": 20.190462941858282,
    "avg_bits_err_improve": 0,
    "time": 17478.75244140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (+ (fma (- (/ (atan N) (+ (atan (+ 1.0 N)) (atan N)))) (atan N) (* (atan N) (/ (atan N) (+ (atan (+ 1.0 N)) (atan N))))) (* (- (atan (+ 1.0 N)) (atan N)) (/ (+ (atan (+ 1.0 N)) (atan N)) (+ (atan (+ 1.0 N)) (atan N))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 42,
    "avg_bits_err_input": 15.352790914590928,
    "avg_bits_err_output": 15.350805096058357,
    "avg_bits_err_improve": 0.00198581853257096,
    "time": 12895.5478515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.13578993921866,
    "avg_bits_err_output": 1.2873016390653997,
    "avg_bits_err_improve": 27.84848830015326,
    "time": 27906.4794921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07544116562662259,
    "avg_bits_err_output": 0.08025488750216347,
    "avg_bits_err_improve": -0.004813721875540883,
    "time": 13329.142333984375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (/ a (/ -1.0 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.425196651887,
    "avg_bits_err_output": 0.26841541406655617,
    "avg_bits_err_improve": 16.156781237820443,
    "time": 11641.29541015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (if (!= PI 0.0) (if (!= (* (* PI PI) (/ angle (* PI 180.0))) 0.0) (/ 1.0 (/ 1.0 (* (* PI PI) (/ angle (* PI 180.0))))) (* (* PI PI) (/ angle (* PI 180.0)))) (* PI (/ angle 180.0))))) 2.0))",
    "output_parens": 29,
    "avg_bits_err_input": 20.76230206679157,
    "avg_bits_err_output": 20.78742393032444,
    "avg_bits_err_improve": -0.025121863532870492,
    "time": 39551.353759765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) (- INFINITY)) (* (if (!= (* (exp (* 1.0 (log (sin (* angle (/ PI -180.0)))))) (pow b 2.0)) 0.0) (- (- (/ (pow (* (sin (* angle (/ PI -180.0))) a) 2.0) (sin (* angle (/ PI -180.0)))) (/ 0.0 (pow b 2.0))) (/ 1.0 (/ (/ 1.0 (sin (* angle (/ PI -180.0)))) (pow b 2.0)))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0))))) (if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) 5e+29) (* (- (pow b 2.0) (pow a 2.0)) (* (sin (* angle (/ PI -180.0))) (* (cos (* angle (/ PI -180.0))) -2.0))) (* (if (!= (* (cos (+ (* angle (/ PI 180.0)) (/ PI 2.0))) (pow b 2.0)) 0.0) (- (- (/ (pow (* (sin (* angle (/ PI -180.0))) a) 2.0) (sin (* angle (/ PI -180.0)))) (/ 0.0 (pow b 2.0))) (/ 1.0 (/ (/ 1.0 (sin (* angle (/ PI -180.0)))) (pow b 2.0)))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0)))))))",
    "output_parens": 124,
    "avg_bits_err_input": 31.402692556196307,
    "avg_bits_err_output": 28.47280116425032,
    "avg_bits_err_improve": 2.9298913919459864,
    "time": 39159.9677734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (* angle PI) 0.005555555555555556))) 2.0) (pow (* b (cos (* (* angle PI) 0.005555555555555556))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 21.01613996667177,
    "avg_bits_err_output": 21.0338109364059,
    "avg_bits_err_improve": -0.017670969734130182,
    "time": 34818.031982421875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (* (/ (- 1.0 m) v) m) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1709080828133113,
    "avg_bits_err_output": 0.2177220082014342,
    "avg_bits_err_improve": -0.0468139253881229,
    "time": 11001.9287109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3192409679578293,
    "avg_bits_err_output": 0.3159762357599503,
    "avg_bits_err_improve": 0.0032647321978789834,
    "time": 18237.47802734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (/ (sin v) (- -1.0 (* e (cos v)))) (- e))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13709436093777044,
    "avg_bits_err_output": 0.13538684218813102,
    "avg_bits_err_improve": 0.001707518749639425,
    "time": 19557.81787109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (log1p (expm1 (* (sin phi1) (sin phi2)))) (* (cos phi2) (* (cos (- lambda1 lambda2)) (cos phi1))))) R)",
    "output_parens": 14,
    "avg_bits_err_input": 17.26532266119347,
    "avg_bits_err_output": 17.268764736466167,
    "avg_bits_err_improve": -0.0034420752726980197,
    "time": 34259.56396484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (/ (+ (* -4.0 (* a c)) (fma b b (fma c (* -4.0 a) (* b b)))) 2.0))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 27,
    "avg_bits_err_input": 52.29929976882252,
    "avg_bits_err_output": 0.1739672937539663,
    "avg_bits_err_improve": 52.125332475068554,
    "time": 28043.4375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.574083879377984,
    "avg_bits_err_output": 0.32567312188707953,
    "avg_bits_err_improve": 28.248410757490905,
    "time": 25680.301513671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 43.86897274401046,
    "avg_bits_err_output": 0.2397483093834732,
    "avg_bits_err_improve": 43.62922443462699,
    "time": 24763.693115234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.9597819943698,
    "avg_bits_err_output": 21.554183097076105,
    "avg_bits_err_improve": 12.405598897293693,
    "time": 22417.725341796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (/ (cos (- phi2 (- lambda1 lambda2))) 2.0) 0.0) (/ (* (/ (cos (- phi2 (- lambda1 lambda2))) 2.0) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1))) (/ (cos (- phi2 (- lambda1 lambda2))) 2.0)) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.9338465601211272,
    "avg_bits_err_output": 0.9385656017781343,
    "avg_bits_err_improve": -0.004719041657007095,
    "time": 27775.6298828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (/ (log (+ 1.0 (expm1 (+ -1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))))) (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 29,
    "avg_bits_err_input": 28.86677195124757,
    "avg_bits_err_output": 28.836185018707106,
    "avg_bits_err_improve": 0.03058693254046574,
    "time": 22204.299560546875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (/ (expm1 (* x -2.0)) (/ -1.0 (exp x))) (+ (exp x) (exp (- x))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.21967768377833,
    "avg_bits_err_output": 1.3901889253881232,
    "avg_bits_err_improve": 56.829488758390205,
    "time": 18865.74462890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x 2.0)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 57.86675641053981,
    "avg_bits_err_output": 0.0545,
    "avg_bits_err_improve": 57.81225641053981,
    "time": 8327.73876953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.010865601562950722,
    "avg_bits_err_output": 0.010865601562950722,
    "avg_bits_err_improve": 0,
    "time": 1712.59033203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log1p (if (!= (- (+ x -1.0) (sqrt (fma x x -1.0))) 0.0) (/ (- (+ x x) 2.0) (+ (sqrt (fma x x -1.0)) (- 1.0 x))) (+ x (+ -1.0 (sqrt (fma x x -1.0))))))",
    "output_parens": 18,
    "avg_bits_err_input": 32.50683755496477,
    "avg_bits_err_output": 31.911320096803564,
    "avg_bits_err_improve": 0.5955174581612042,
    "time": 6257.38525390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(/ (- (exp (log1p (log (/ (- -1.0 x) (+ -1.0 x))))) 1.0) 2.0)",
    "output_parens": 8,
    "avg_bits_err_input": 58.73486940753129,
    "avg_bits_err_output": 58.753162033946296,
    "avg_bits_err_improve": -0.018292626415004065,
    "time": 22977.874755859375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.098125,
    "avg_bits_err_output": 0.09819812031259015,
    "avg_bits_err_improve": -7.312031259014418e-05,
    "time": 2993.5419921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (* (log (+ 1.0 (expm1 (cos (atan (/ (/ eh (tan t)) ew)))))) (sin t))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.130375,
    "avg_bits_err_output": 0.1324174812503606,
    "avg_bits_err_improve": -0.002042481250360606,
    "time": 24658.947998046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (/ (* (- (cos t)) (* ew (cos (atan (* eh (/ (tan t) (- ew))))))) -1.0) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.1261462406251803,
    "avg_bits_err_output": 0.1270212406251803,
    "avg_bits_err_improve": -0.0008750000000000147,
    "time": 15953.853759765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (fma (sin (/ phi1 2.0)) (+ (sin (/ phi2 -2.0)) (+ (sin (/ phi2 -2.0)) (sin (/ phi2 2.0)))) (* (cos (/ phi1 -2.0)) (cos (/ phi2 -2.0)))) (- lambda1 lambda2)) (- phi1 phi2)))",
    "output_parens": 21,
    "avg_bits_err_input": 38.78113974327733,
    "avg_bits_err_output": 0.1244786373643868,
    "avg_bits_err_improve": 38.656661105912946,
    "time": 27549.234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.835913914949252,
    "avg_bits_err_output": 0.010323120312590145,
    "avg_bits_err_improve": 14.825590794636662,
    "time": 7094.32958984375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (if (!= (* (sin phi1) (sin (asin (+ (* (* (cos phi1) (sin delta)) (cos theta)) (* (sin phi1) (cos delta)))))) 0.0) (/ 1.0 (/ 1.0 (* (sin phi1) (sin (asin (fma (* (cos phi1) (sin delta)) (cos theta) (* (cos delta) (sin phi1)))))))) (* (sin phi1) (sin (asin (fma (* (cos phi1) (sin delta)) (cos theta) (* (cos delta) (sin phi1))))))))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.1495530779968154,
    "avg_bits_err_output": 0.1575045731864752,
    "avg_bits_err_improve": -0.007951495189659818,
    "time": 37893.609619140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.33902114744207,
    "avg_bits_err_output": 0.17209229375396626,
    "avg_bits_err_improve": 52.1669288536881,
    "time": 32104.95654296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -3.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma b b (* (* a c) -3.0))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.737962075875984,
    "avg_bits_err_output": 0.33325564063671886,
    "avg_bits_err_improve": 28.404706435239266,
    "time": 24367.509765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* c (* a -3.0))))) 0.0) (* (* a -3.0) (/ c (- (- (- b) (sqrt (fma b b (* c (* a -3.0)))))))) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.860597649161285,
    "avg_bits_err_output": 0.23501466250649017,
    "avg_bits_err_improve": 43.62558298665479,
    "time": 31754.269775390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (pow (fma b b (* a (* c -3.0))) 0.5))) (* a 3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.005469977839034,
    "avg_bits_err_output": 21.585306717106487,
    "avg_bits_err_improve": 12.420163260732547,
    "time": 25917.705810546875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (if (!= (cos (- lambda2 lambda1)) 0.0) (/ 1.0 (/ 1.0 (cos (- lambda2 lambda1)))) (cos (- lambda2 lambda1)))))))",
    "output_parens": 23,
    "avg_bits_err_input": 13.731879525442293,
    "avg_bits_err_output": 13.737504195456872,
    "avg_bits_err_improve": -0.005624670014578115,
    "time": 36324.979248046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.29014617868307,
    "avg_bits_err_output": 0.5162752149996361,
    "avg_bits_err_improve": 28.773870963683436,
    "time": 20692.31787109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ x (+ x (+ x 2.0))) (- (/ 1.0 (+ x -1.0)) (/ x (- (- -2.0 x) x))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.010823120312590145,
    "avg_bits_err_output": 0.028520879839797203,
    "avg_bits_err_improve": -0.017697759527207056,
    "time": 4193.623291015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(* -2.0 (- (/ (/ -1.0 (+ x (+ x 2.0))) (- 1.0 x)) (/ (+ (/ x (- x -1.0)) -1.0) (- (+ x x) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 14.879906971499576,
    "avg_bits_err_output": 12.917084967464763,
    "avg_bits_err_improve": 1.9628220040348126,
    "time": 17688.697509765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -5e-310) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))) (sqrt (* F -2.0))) (/ (* (sqrt F) (* (sqrt (- (* (* A C) 8.0) (* 2.0 (pow B 2.0)))) (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))))) (- (* A (* 4.0 C)) (pow B 2.0))))",
    "output_parens": 46,
    "avg_bits_err_input": 52.55267109565867,
    "avg_bits_err_output": 47.239448886116094,
    "avg_bits_err_improve": 5.313222209542573,
    "time": 51448.700439453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -7e+14) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (- (- C A) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) PI)) (* 180.0 (/ (atan (+ (/ (- (- C A) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) B) (fma (/ 1.0 B) A (/ A (- B))))) PI)))",
    "output_parens": 49,
    "avg_bits_err_input": 29.518849631088848,
    "avg_bits_err_output": 27.304376050268473,
    "avg_bits_err_improve": 2.214473580820375,
    "time": 27463.647705078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F 5e-302) (* (sqrt (* (- (pow B 2.0) (* C (* A 4.0))) F)) (/ (sqrt (* 2.0 (+ C (+ (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) A)))) (- (* C (* A 4.0)) (pow B 2.0)))) (/ (- (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (* (sqrt F) (sqrt (* 2.0 (+ A (if (!= (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) 0.0) (/ (- (- (* C C) (pow (- A C) 2.0)) (pow B 2.0)) (- C (* (sqrt (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) (sqrt (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))))))) (- (pow B 2.0) (* 4.0 (* A C)))))",
    "output_parens": 75,
    "avg_bits_err_input": 52.65280475486105,
    "avg_bits_err_output": 47.27072682114033,
    "avg_bits_err_improve": 5.382077933720723,
    "time": 46746.555419921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.675261129035539,
    "avg_bits_err_output": 15.675261129035539,
    "avg_bits_err_improve": 0,
    "time": 19832.218994140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1.1e+151) (+ (cbrt (* (/ 0.5 a) (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (cbrt (* (/ 0.5 a) (- (- g) (* (sqrt (- h g)) (sqrt (- (+ g h)))))))) (if (<= g -2e-243) (+ (* (cbrt (/ 0.5 a)) (cbrt (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- g) 0.0) (* h (/ h (- g))) (- g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))))))",
    "output_parens": 67,
    "avg_bits_err_input": 36.258130008360105,
    "avg_bits_err_output": 11.00992181721412,
    "avg_bits_err_improve": 25.248208191145984,
    "time": 33101.126220703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos (* PI 0.6666666666666666)) (cos (- (exp (log1p (/ (acos (/ g (- h))) 3.0))) 1.0))) (* (sin (expm1 (log1p (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.9892859031316716,
    "avg_bits_err_output": 0.023011842188131015,
    "avg_bits_err_improve": 0.9662740609435406,
    "time": 17984.28369140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(* (exp a) (/ 1.0 (+ (exp a) (exp b))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.7728231203125902,
    "avg_bits_err_output": 0.7779906015629509,
    "avg_bits_err_improve": -0.005167481250360706,
    "time": 3763.923828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ (/ a1 b2) b1) a2) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-293) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ (/ a1 b2) b1) a2) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+307) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.033263149210494,
    "avg_bits_err_output": 2.598910505421145,
    "avg_bits_err_improve": 8.43435264378935,
    "time": 12291.446044921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5711422606473945,
    "avg_bits_err_output": 0.488,
    "avg_bits_err_improve": 0.0831422606473945,
    "time": 11780.5859375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.0) (log (if (!= (- x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 200000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 43,
    "avg_bits_err_input": 53.001803818880376,
    "avg_bits_err_output": 0.31755236255555647,
    "avg_bits_err_improve": 52.684251456324816,
    "time": 17849.529052734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.71631120409847,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.71631120409847,
    "time": 3569.705810546875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (* (- 1.0 x) (/ 1.0 (+ 1.0 x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.01425,
    "avg_bits_err_output": 0.01425,
    "avg_bits_err_improve": 0,
    "time": 6526.955810546875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1253.68017578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (- (/ (/ 2.0 r) r) 0.0)) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 14,
    "avg_bits_err_input": 13.234242980792,
    "avg_bits_err_output": 0.6810134123345504,
    "avg_bits_err_improve": 12.55322956845745,
    "time": 24086.087646484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* 3.0 (* x1 x1)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* (* x1 x1) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)))))) (+ x1 x1)))",
    "output_parens": 47,
    "avg_bits_err_input": 0.5027885008178629,
    "avg_bits_err_output": 0.2850948660026329,
    "avg_bits_err_improve": 0.21769363481522996,
    "time": 69757.70678710938,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.37980176535948,
    "avg_bits_err_output": 1.429727649296328,
    "avg_bits_err_improve": 16.950074116063153,
    "time": 10313.74755859375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2082830828133113,
    "avg_bits_err_output": 0.196511842188131,
    "avg_bits_err_improve": 0.011771240625180285,
    "time": 8591.9990234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2711.09375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (- (/ (/ (/ PI 2.0) a) (+ a b)) (/ (/ PI 2.0) (* b (+ a b)))) (- b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.499340347252387,
    "avg_bits_err_output": 0.24532349687986757,
    "avg_bits_err_improve": 14.254016850372519,
    "time": 17161.21875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (- -1.0 (exp (* x (+ eps -1.0)))) 0.0) (- (* (+ (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))) (+ -1.0 (/ (exp (* x (+ eps -1.0))) eps))) (/ (- -1.0 (exp (* x (+ eps -1.0)))) (- -1.0 (exp (* x (+ eps -1.0)))))) (/ 1.0 (/ 1.0 (- -1.0 (exp (* x (+ eps -1.0))))))) (+ (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))) (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* eps x)))))) 2.0)",
    "output_parens": 47,
    "avg_bits_err_input": 29.538187497987234,
    "avg_bits_err_output": 1.3333901105083008,
    "avg_bits_err_improve": 28.204797387478934,
    "time": 22035.54248046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (expm1 (log1p (/ 1.0 (+ 2.0 (pow (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.042,
    "avg_bits_err_output": 0.044,
    "avg_bits_err_improve": -0.001999999999999995,
    "time": 7598.002685546875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.05,
    "avg_bits_err_output": 0.05,
    "avg_bits_err_improve": 0,
    "time": 16107.100341796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))) (+ 2.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.025875,
    "avg_bits_err_output": 0.041875,
    "avg_bits_err_improve": -0.016000000000000004,
    "time": 13747.705810546875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3541.32763671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8808.753662109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2252.66552734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.825802818610342,
    "avg_bits_err_output": 0.242625,
    "avg_bits_err_improve": 7.583177818610341,
    "time": 26726.90625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.313456544664289,
    "avg_bits_err_output": 7.313456544664289,
    "avg_bits_err_improve": 0,
    "time": 21306.906982421875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.09118304571128,
    "avg_bits_err_output": 0.0201046746706214,
    "avg_bits_err_improve": 16.07107837104066,
    "time": 11425.597412109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (pow (pow (exp 10.0) x) x) (fma (+ 0.5 (* (cos x) 0.5)) (+ 0.5 (* (cos x) 0.5)) (- (pow (+ (* (cos x) 0.5) -0.5) 2.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 3.556954082220967,
    "avg_bits_err_output": 1.271049625702528,
    "avg_bits_err_improve": 2.285904456518439,
    "time": 20287.339599609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -5e-8) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) (/ x (fma x x 1.0))) (if (<= x 500000000.0) (if (!= (/ x (fma x x 1.0)) 0.0) (* x (/ x (* x (fma x x 1.0)))) (/ x (fma x x 1.0))) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) (/ x (fma x x 1.0)))))",
    "output_parens": 64,
    "avg_bits_err_input": 14.7099627821281,
    "avg_bits_err_output": 0.008667481250360577,
    "avg_bits_err_improve": 14.701295300877739,
    "time": 9797.97509765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.3977754163026,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.3977754163026,
    "time": 4441.656494140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.535438043916855,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 39.534563043916854,
    "time": 5045.9091796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.29775,
    "avg_bits_err_improve": 63.70225,
    "time": 13855.389892578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (* t (* t 2e-16)) 2e-16)",
    "output_parens": 3,
    "avg_bits_err_input": 61.84325919191947,
    "avg_bits_err_output": 0.39245789531691705,
    "avg_bits_err_improve": 61.450801296602556,
    "time": 13746.217041015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) 0.0) (* a (/ (* c 4.0) (- (sqrt (fma -4.0 (* a c) (* b b))) b))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.66758794091285,
    "avg_bits_err_output": 21.6613447732474,
    "avg_bits_err_improve": 12.006243167665453,
    "time": 26946.17333984375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.9597819943698,
    "avg_bits_err_output": 21.554183097076105,
    "avg_bits_err_improve": 12.405598897293693,
    "time": 25676.15478515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2259.51611328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.2457102326979,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 39.2354602326979,
    "time": 4158.3896484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.59203578829052,
    "avg_bits_err_output": 20.59203578829052,
    "avg_bits_err_improve": 0,
    "time": 12421.42431640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.645317901549117,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.645317901549117,
    "time": 7646.76904296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03775,
    "avg_bits_err_output": 0.001375,
    "avg_bits_err_improve": 0.036375,
    "time": 8335.4951171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(fma (+ a b) b (* a (+ a b)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.019969360937770436,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 0.010844360937770437,
    "time": 5304.642578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.014875,
    "avg_bits_err_improve": 0,
    "time": 3491.34326171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000125,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 0,
    "time": 1652.38623046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3994178578176384,
    "avg_bits_err_output": 0.242875,
    "avg_bits_err_improve": 0.15654285781763838,
    "time": 6054.31103515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (- 0.5 (/ (cos (* x 2.0)) 2.0)) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 13,
    "avg_bits_err_input": 30.245784507366725,
    "avg_bits_err_output": 30.19237102858072,
    "avg_bits_err_improve": 0.05341347878600544,
    "time": 13201.447998046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (if (!= (sqrt (- (* x x) eps)) 0.0) (/ (+ (- eps) (+ (* x (sqrt (- (* x x) eps))) (* x x))) (sqrt (- (* x x) eps))) (+ x (sqrt (- (* x x) eps))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 32,
    "avg_bits_err_input": 24.74729623413098,
    "avg_bits_err_output": 0.0653516921910156,
    "avg_bits_err_improve": 24.681944541939966,
    "time": 13184.996337890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (tan (- x))) 0.0) (/ (if (!= (+ (* (/ (sin x) (tan x)) (/ x (- (tan x)))) (- (pow (/ x (tan x)) 2.0))) 0.0) (/ (- (* (- (pow (/ x (tan x)) 2.0)) (- (pow (/ x (tan x)) 2.0))) (* (/ (sin x) (tan x)) (* (/ x (- (tan x))) (* (/ (sin x) (tan x)) (/ x (- (tan x))))))) (+ (* (log (+ 1.0 (expm1 (/ (sin x) (tan x))))) (/ x (- (tan x)))) (- (pow (/ x (tan x)) 2.0)))) (* (- (sin x) x) (/ (/ x (tan x)) (tan x)))) (/ x (tan (- x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 75,
    "avg_bits_err_input": 29.94598572055244,
    "avg_bits_err_output": 29.960612412828027,
    "avg_bits_err_improve": -0.014626692275587772,
    "time": 35693.8984375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007073120312590144,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.006698120312590144,
    "time": 2805.94970703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 5e-303) (/ (* (expm1 (* n (log1p (/ i n)))) 100.0) (/ i n)) (* (/ (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ 2.0 n)) (/ -200.0 i)))",
    "output_parens": 23,
    "avg_bits_err_input": 47.892560485256006,
    "avg_bits_err_output": 14.132863859503985,
    "avg_bits_err_improve": 33.75969662575202,
    "time": 25609.855224609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (- INFINITY)) (+ (* d (/ b (fma d d (* c c)))) (* c (/ a (fma d d (* c c))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 1e+279) (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.12211874181536,
    "avg_bits_err_output": 22.67811009563805,
    "avg_bits_err_improve": 3.444008646177309,
    "time": 17063.388671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= d -8500000.0) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (+ (* d d) (* c c))))) (if (<= d 9.5e-47) (fma b (/ c (fma c c (* d d))) (/ (* a (- d)) (fma c c (* d d)))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (+ (* d d) (* c c)))))))",
    "output_parens": 33,
    "avg_bits_err_input": 26.308678419576303,
    "avg_bits_err_output": 22.7760210679187,
    "avg_bits_err_improve": 3.5326573516576047,
    "time": 18502.92724609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- 1.0 ux) (* ux maxCos))",
    "output_parens": 3,
    "avg_bits_err_input": 0.034,
    "avg_bits_err_output": 0.034,
    "avg_bits_err_improve": 0,
    "time": 6601.8828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(if (<= ux 2.999999892949745e-8) (* (sin (* (* uy 2.0) PI)) (sqrt (+ ux (+ -1.0 (- (+ 1.0 (* ux (* maxCos (- ux (fma ux maxCos 1.0))))) (* ux (* (+ maxCos -1.0) (- 1.0 ux)))))))) (* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (- 1.0 (pow (- 1.0 ux) 2.0)) 0.0) (/ (- (+ (* (- ux (* ux ux)) (- 1.0 (pow (- 1.0 ux) 2.0))) (* ux (- 1.0 (pow (- 1.0 ux) 2.0)))) (* (- 1.0 (pow (- 1.0 ux) 2.0)) (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))) (- 1.0 (pow (- 1.0 ux) 2.0))) (- 1.0 (+ (pow (- 1.0 ux) 2.0) (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))))))",
    "output_parens": 65,
    "avg_bits_err_input": 13.438470364147909,
    "avg_bits_err_output": 5.130760618531199,
    "avg_bits_err_improve": 8.307709745616709,
    "time": 40371.062255859375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- 1.0 (log (+ 1.0 (expm1 (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))) (- (* (fma ux maxCos (- 1.0 ux)) (* ux maxCos))))))",
    "output_parens": 19,
    "avg_bits_err_input": 13.469913441361573,
    "avg_bits_err_output": 12.308213328106289,
    "avg_bits_err_improve": 1.161700113255284,
    "time": 28722.149169921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) xi) (fma (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (- maxCos (* ux maxCos)) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.33065003407957066,
    "avg_bits_err_output": 0.31889821301815413,
    "avg_bits_err_improve": 0.011751821061416534,
    "time": 45415.6806640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (log (+ 1.0 (expm1 (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax))))))) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.20943728552988009,
    "avg_bits_err_output": 0.2102563767133046,
    "avg_bits_err_improve": -0.0008190911834245196,
    "time": 38021.646240234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (expm1 (log1p (/ u1 (- 1.0 u1))))) (sin (* 6.28318530718 u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5440503140067406,
    "avg_bits_err_output": 0.549475466530145,
    "avg_bits_err_improve": -0.005425152523404364,
    "time": 20383.994384765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.33463633674053544,
    "avg_bits_err_output": 0.33463633674053544,
    "avg_bits_err_improve": 0,
    "time": 24165.597900390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (log (/ 1.0 (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.3268509457247941,
    "avg_bits_err_output": 0.3305251083011277,
    "avg_bits_err_improve": -0.003674162576333573,
    "time": 38122.901611328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.05719053371969949,
    "avg_bits_err_output": 0.05719053371969949,
    "avg_bits_err_improve": 0,
    "time": 6410.2919921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (pow (+ (exp (/ (fabs x) (- s))) 1.0) -2.0) (/ (exp (/ (fabs x) (- s))) s))",
    "output_parens": 12,
    "avg_bits_err_input": 0.1363717012863607,
    "avg_bits_err_output": 0.13325137450925864,
    "avg_bits_err_improve": 0.003120326777102056,
    "time": 18715.6416015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (- (log (+ 1.0 (expm1 (+ (/ (sin (* x PI)) (* x PI)) -1.0)))) -1.0))",
    "output_parens": 16,
    "avg_bits_err_input": 0.6721000649712545,
    "avg_bits_err_output": 0.6959933580312516,
    "avg_bits_err_improve": -0.0238932930599971,
    "time": 22626.93701171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (log1p (expm1 (exp (/ -2.0 v)))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.1595977041511719,
    "avg_bits_err_output": 0.1648577528731995,
    "avg_bits_err_improve": -0.0052600487220276215,
    "time": 20805.12158203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.602624512973444,
    "avg_bits_err_output": 2.597886751420056,
    "avg_bits_err_improve": 0.004737761553388342,
    "time": 27115.8701171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (* cosTheta_i (/ (/ 0.5 v) (exp (* sinTheta_i (/ sinTheta_O v))))) (/ (/ 1.0 v) (sinh (/ 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4680016482563398,
    "avg_bits_err_output": 0.3584307437965453,
    "avg_bits_err_improve": 0.10957090445979445,
    "time": 32133.851806640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (if (!= (log (/ 0.5 v)) 0.0) (* (log (/ 0.5 v)) (/ (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (+ 0.6931 (log (/ 0.5 v)))) (log (/ 0.5 v)))) (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (+ 0.6931 (log (/ 0.5 v))))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.13372623535774267,
    "avg_bits_err_output": 0.1401604691272804,
    "avg_bits_err_improve": -0.006434233769537723,
    "time": 19005.497802734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (/ (/ (- 1.0 (* alpha alpha)) (log (* alpha alpha))) PI)) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.47169524392017503,
    "avg_bits_err_output": 0.4723638753661346,
    "avg_bits_err_improve": -0.0006686314459595777,
    "time": 25418.462646484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(fma s (log (+ 1.0 (expm1 (* (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) 3.0)))) 0.0)",
    "output_parens": 8,
    "avg_bits_err_input": 1.313558536097618,
    "avg_bits_err_output": 1.2418475940186826,
    "avg_bits_err_improve": 0.07171094207893547,
    "time": 28516.871337890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (log1p (if (!= (- -1.0 (/ -1.0 (fma 4.0 u -1.0))) 0.0) (/ (- (/ 1.0 (log (+ 1.0 (expm1 (pow (fma 4.0 u -1.0) 2.0))))) 1.0) (+ (/ -1.0 (fma 4.0 u -1.0)) 1.0)) (+ -1.0 (/ -1.0 (fma 4.0 u -1.0))))))",
    "output_parens": 21,
    "avg_bits_err_input": 12.496819115533375,
    "avg_bits_err_output": 11.652230843454406,
    "avg_bits_err_improve": 0.844588272078969,
    "time": 25179.627197265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (* 2.0 PI)))) (* 0.75 (/ (* (exp (/ r (* s -6.0))) (exp (+ (/ (+ r (+ r r)) (* s -24.0)) (/ r (* s -24.0))))) (* s (* PI 6.0))))) r)",
    "output_parens": 25,
    "avg_bits_err_input": 0.1393646669422509,
    "avg_bits_err_output": 0.14577684846426475,
    "avg_bits_err_improve": -0.006412181522013866,
    "time": 27390.218994140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8787843934670551,
    "avg_bits_err_output": 0.7231361085628332,
    "avg_bits_err_improve": 0.1556482849042219,
    "time": 27702.61572265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ 1.0 (+ c (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (* (sqrt PI) cosTheta) (exp (* cosTheta cosTheta)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7050612200225589,
    "avg_bits_err_output": 0.49202460271503434,
    "avg_bits_err_improve": 0.21303661730752455,
    "time": 26987.828857421875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(if (!= (sqrt (- (log1p (- u1)))) 0.0) (/ (* (log1p (- u1)) (sin (* PI (* u2 -2.0)))) (sqrt (- (log1p (- u1))))) (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2)))))",
    "output_parens": 25,
    "avg_bits_err_input": 13.64286270808231,
    "avg_bits_err_output": 0.5731941273191637,
    "avg_bits_err_improve": 13.069668580763146,
    "time": 22833.415283203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.68930644715885,
    "avg_bits_err_output": 0.3139152074442824,
    "avg_bits_err_improve": 13.375391239714569,
    "time": 21345.972412109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.121078724752802,
    "avg_bits_err_output": 0.3065637218755409,
    "avg_bits_err_improve": 13.814515002877261,
    "time": 16646.305419921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.559770403455477,
    "avg_bits_err_output": 0.5193448756978591,
    "avg_bits_err_improve": 12.040425527757618,
    "time": 14327.189453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.484532653509525,
    "avg_bits_err_output": 12.374160131594374,
    "avg_bits_err_improve": 4.110372521915151,
    "time": 21491.623779296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(fma (/ (+ (/ x (tan B)) (* x (/ 3.0 (tan B)))) 4.0) -1.0 (/ 1.0 (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.2216887218755409,
    "avg_bits_err_output": 0.25558496250072116,
    "avg_bits_err_improve": -0.03389624062518026,
    "time": 17002.760009765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.64980104240478,
    "avg_bits_err_output": 10.510295020058447,
    "avg_bits_err_improve": 3.1395060223463336,
    "time": 23220.02587890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (expm1 (log1p (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))))))) (/ PI -4.0))",
    "output_parens": 20,
    "avg_bits_err_input": 61.462011496647925,
    "avg_bits_err_output": 61.46698207676093,
    "avg_bits_err_improve": -0.004970580113003109,
    "time": 42024.822998046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (+ x 1.0) (+ -1.0 x)) (* 2.0 (* t t))) (* (* l l) (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.925394382291636,
    "avg_bits_err_output": 34.93641960592971,
    "avg_bits_err_improve": 7.988974776361928,
    "time": 25605.275146484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (log1p (expm1 (/ (sin ky) (hypot (sin ky) (sin kx))))) (sin th))",
    "output_parens": 9,
    "avg_bits_err_input": 3.6964799854752193,
    "avg_bits_err_output": 0.2507415582100876,
    "avg_bits_err_improve": 3.4457384272651317,
    "time": 31148.41796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.0654600485173984,
    "avg_bits_err_output": 0.014375,
    "avg_bits_err_improve": 1.0510850485173984,
    "time": 11222.156982421875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (/ (* Om (/ Om Omc)) Omc)) (+ 1.0 (* 2.0 (* (/ t l) (/ t l)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.159801384007425,
    "avg_bits_err_output": 10.159926384007425,
    "avg_bits_err_improve": -0.00012500000000059686,
    "time": 18218.537109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -3.1e+190) (* (sqrt (* (* 2.0 n) (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- U))) (if (<= U -4.7e+20) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (sqrt (fabs (* n U)))) (if (<= U -8.8e-260) (* (sqrt (* (* 2.0 n) (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- U))) (if (<= U 1.45e-299) (sqrt (* (* 2.0 n) (fma U (- t (* (- U U*) (* n (pow (/ l Om) 2.0)))) (* (* (/ l Om) -2.0) (* l U))))) (if (<= U 1e-116) (* (sqrt (* 2.0 (* n (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt U)) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (sqrt (fabs (* n U)))))))))",
    "output_parens": 100,
    "avg_bits_err_input": 34.57310368756563,
    "avg_bits_err_output": 24.334871893236645,
    "avg_bits_err_improve": 10.238231794328982,
    "time": 44467.845458984375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (tan k) (/ (sin k) l)) (* (/ k t) (/ (* (/ k t) (pow t 3.0)) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 47.32513768766738,
    "avg_bits_err_output": 30.433327657890477,
    "avg_bits_err_improve": 16.891810029776902,
    "time": 44756.646484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)) INFINITY) (/ 2.0 (* (/ (* (pow t 3.0) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (tan k) l))) l) (sin k))) 0.0)",
    "output_parens": 26,
    "avg_bits_err_input": 32.56549354709639,
    "avg_bits_err_output": 22.44141732416012,
    "avg_bits_err_improve": 10.124076222936267,
    "time": 25865.0234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* a2 (* a2 (cos th))) (* a1 (* a1 (cos th)))) (sqrt 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4966031984601277,
    "avg_bits_err_output": 0.4371453031432103,
    "avg_bits_err_improve": 0.059457895316917364,
    "time": 26123.447021484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (* (pow 2.0 (fma k -0.5 0.5)) (pow n (fma k -0.5 0.5))) (/ (pow PI (fma k -0.5 0.5)) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5202207130428028,
    "avg_bits_err_output": 0.5000014688007902,
    "avg_bits_err_improve": 0.0202192442420126,
    "time": 20926.690673828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (* (- (expm1 (* l -2.0))) (exp l)) J) (cos (/ K 2.0))) U)",
    "output_parens": 10,
    "avg_bits_err_input": 17.5399525058927,
    "avg_bits_err_output": 0.0955543234384916,
    "avg_bits_err_improve": 17.444398182454208,
    "time": 25590.265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l))))",
    "output_parens": 15,
    "avg_bits_err_input": 14.777861285819132,
    "avg_bits_err_output": 14.777861285819132,
    "avg_bits_err_improve": 0,
    "time": 27147.429443359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.513615601562954,
    "avg_bits_err_output": 18.513615601562954,
    "avg_bits_err_improve": 0,
    "time": 41437.849609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) (- INFINITY)) (* w0 (sqrt (- 1.0 (* (* D (/ (/ M 2.0) d)) (/ (/ (* h (* D (/ M d))) l) 2.0))))) (if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) 5e-29) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (* (/ (/ (* D (* D (* M h))) (* d l)) (* d 4.0)) M))))))",
    "output_parens": 49,
    "avg_bits_err_input": 13.833042091093368,
    "avg_bits_err_output": 9.025980269442467,
    "avg_bits_err_improve": 4.807061821650901,
    "time": 24326.38525390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e+215) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) -4e-201) (if (!= (* (sqrt (/ A (* l V))) c0) 0.0) (/ 1.0 (/ 1.0 (* (sqrt (/ A (* l V))) c0))) (* (sqrt (/ A (* l V))) c0)) (if (<= (* V l) 5e-313) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (* c0 (* (sqrt (/ (/ 2.0 V) (+ l l))) (sqrt A))))))",
    "output_parens": 48,
    "avg_bits_err_input": 19.087414540911038,
    "avg_bits_err_output": 9.270169178690704,
    "avg_bits_err_improve": 9.817245362220334,
    "time": 22540.55908203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= M 8.5e-250) (/ (/ (* c0 (if (!= (- (* c0 (* d (/ (/ (/ d D) w) (* h D)))) (sqrt (- (pow (* c0 (* d (/ (/ (/ d D) w) (* h D)))) 2.0) (* M M)))) 0.0) (/ (fma M M 0.0) (- (* c0 (* d (/ (/ (/ d D) w) (* h D)))) (sqrt (- (pow (* c0 (* d (/ (/ (/ d D) w) (* h D)))) 2.0) (* M M))))) (fma c0 (* d (/ (/ (/ d D) w) (* h D))) (sqrt (- (pow (* c0 (* d (/ (/ (/ d D) w) (* h D)))) 2.0) (* M M)))))) w) 2.0) (if (<= M 2.25e-110) (/ (* (/ c0 w) (if (!= (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))))) (fma d (/ (* d c0) (* (* D h) (* D w))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))))) 2.0) (/ (/ (* c0 (if (!= (- (* c0 (* d (/ (/ (/ d D) w) (* h D)))) (sqrt (- (pow (* c0 (* d (/ (/ (/ d D) w) (* h D)))) 2.0) (* M M)))) 0.0) (* (/ M (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M))))) M) (fma c0 (* d (/ (/ (/ d D) w) (* h D))) (sqrt (- (pow (* c0 (* d (/ (/ (/ d D) w) (* h D)))) 2.0) (* M M)))))) w) 2.0)))",
    "output_parens": 173,
    "avg_bits_err_input": 59.588639698190775,
    "avg_bits_err_output": 30.186937184286315,
    "avg_bits_err_improve": 29.40170251390446,
    "time": 58822.49169921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= h 1.65e-302) (* (* (if (!= (sqrt (/ d h)) 0.0) (/ d (* h (sqrt (/ d h)))) (sqrt (/ d h))) (sqrt (/ d l))) (- 1.0 (* h (* (pow (/ (* M D) (+ d d)) 2.0) (/ 0.5 l))))) (if (<= h 4e-10) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- 1.0 (* (* 0.5 (pow (* D (/ M (* d 2.0))) 2.0)) (/ h l)))) (- (sqrt (* (/ d h) (/ d l))) (* h (* (/ 0.5 l) (* (* (sqrt (/ d l)) (sqrt (/ d h))) (pow (/ (* D M) (+ d d)) 2.0)))))))",
    "output_parens": 58,
    "avg_bits_err_input": 25.877465678062265,
    "avg_bits_err_output": 25.98995930363811,
    "avg_bits_err_improve": -0.11249362557584419,
    "time": 47044.169677734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (- (+ (/ -0.5 (hypot 1.0 x)) 1.5) 1.0) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 22,
    "avg_bits_err_input": 15.425813022918906,
    "avg_bits_err_output": 14.960567204059895,
    "avg_bits_err_improve": 0.4652458188590103,
    "time": 15245.394287109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9855943609377705,
    "avg_bits_err_output": 0.01202124062518029,
    "avg_bits_err_improve": 0.9735731203125902,
    "time": 2282.093994140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (fma v (* v 5.0) -1.0) (* (fma v v -1.0) PI)) (sqrt (- 2.0 (* v (* v 6.0))))) t)",
    "output_parens": 11,
    "avg_bits_err_input": 0.43574238835900414,
    "avg_bits_err_output": 0.11485192616148424,
    "avg_bits_err_improve": 0.32089046219751993,
    "time": 33662.279541015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.010344360937770435,
    "avg_bits_err_output": 0.010344360937770435,
    "avg_bits_err_improve": 0,
    "time": 14621.595947265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5108302076528658,
    "avg_bits_err_output": 0.5108302076528658,
    "avg_bits_err_improve": 0,
    "time": 9835.885986328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* (/ -1.0 (- -1.0 (* k (+ k 10.0)))) (* (pow k m) a))",
    "output_parens": 7,
    "avg_bits_err_input": 2.2294409504701145,
    "avg_bits_err_output": 2.209889070782705,
    "avg_bits_err_improve": 0.019551879687409457,
    "time": 20127.25146484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (- EDonor (- Ec (+ Vef mu))) KbT)) -1.0)) (/ NaChar (+ 1.0 (exp (- (- (/ (+ EAccept (- (+ Vef Ev) mu)) KbT) -1.0) 1.0)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.025436822098208918,
    "avg_bits_err_output": 0.025113701785618774,
    "avg_bits_err_improve": 0.0003231203125901444,
    "time": 8880.76611328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow b 4.0) (* (* a a) (- (* b (+ b b)) (- (* a a))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18291973225554356,
    "avg_bits_err_output": 0.09353044631633088,
    "avg_bits_err_improve": 0.08938928593921268,
    "time": 6951.666259765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (fma (* b b) (fma a a (* b b)) (* a (+ (* a (* b b)) (* a (* a a))))) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 29,
    "avg_bits_err_input": 0.1823065744436745,
    "avg_bits_err_output": 0.15714604787928158,
    "avg_bits_err_improve": 0.025160526564392938,
    "time": 23746.42431640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (fma (* b b) (fma a a (fma b b (* a a))) (pow a 4.0)) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 0.19048803207133594,
    "avg_bits_err_output": 0.10965778401808284,
    "avg_bits_err_improve": 0.0808302480532531,
    "time": 17003.3955078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (if (!= (/ x (sqrt (fma x x (* 4.0 (* p p))))) 0.0) (+ (/ x x) (/ (* (* x x) (/ 1.0 (fma 4.0 (* p p) (* x x)))) (/ x (sqrt (fma 4.0 (* p p) (* x x)))))) (+ 1.0 (/ x (sqrt (fma x x (* 4.0 (* p p)))))))))",
    "output_parens": 29,
    "avg_bits_err_input": 13.609559969502971,
    "avg_bits_err_output": 13.89500515538959,
    "avg_bits_err_improve": -0.28544518588661916,
    "time": 21819.636962890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.77464088323663,
    "avg_bits_err_output": 0.055875,
    "avg_bits_err_improve": 40.71876588323663,
    "time": 9752.5849609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (/ (pow (tan x) 2.0) (+ x (tan x)))) (- x (tan x))))",
    "output_parens": 19,
    "avg_bits_err_input": 31.428593048015863,
    "avg_bits_err_output": 30.892869305282225,
    "avg_bits_err_improve": 0.5357237427336372,
    "time": 28132.853271484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (- b_2) a) (if (<= b_2 -6e-273) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (/ (if (!= b_2 0.0) (/ (* a (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* a (- c))))))) 1.0) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a)))",
    "output_parens": 29,
    "avg_bits_err_input": 34.058381366922966,
    "avg_bits_err_output": 20.41505229128337,
    "avg_bits_err_improve": 13.643329075639596,
    "time": 19527.062255859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.03008086100492,
    "avg_bits_err_output": 20.135610132267505,
    "avg_bits_err_improve": 13.894470728737414,
    "time": 18567.796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (/ (* (/ (/ (- (* x (cos x)) x) x) x) -2.0) (/ 1.0 x)) x) (+ x x))",
    "output_parens": 11,
    "avg_bits_err_input": 30.90666563524404,
    "avg_bits_err_output": 30.20984310258362,
    "avg_bits_err_improve": 0.6968225326604198,
    "time": 19754.1748046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (* (/ (+ (log x) (log x)) n) 0.5)))",
    "output_parens": 10,
    "avg_bits_err_input": 32.706754976689055,
    "avg_bits_err_output": 11.007187645731902,
    "avg_bits_err_improve": 21.69956733095715,
    "time": 32260.0810546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (- (+ 1.0 (exp (- (log1p N) (log N)))) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 29.18356159511976,
    "avg_bits_err_output": 29.186463478330655,
    "avg_bits_err_improve": -0.002901883210896017,
    "time": 13633.3525390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (if (!= (/ x (+ x 1.0)) 0.0) (/ (- (* x (/ x (+ x 1.0))) x) (/ (fma x x x) (+ x 1.0))) (+ (/ x (+ x 1.0)) -1.0)) x)",
    "output_parens": 16,
    "avg_bits_err_input": 14.669926653435628,
    "avg_bits_err_output": 14.439838721225396,
    "avg_bits_err_improve": 0.23008793221023183,
    "time": 22786.607421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -8.5e-62) (+ (fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps)))) (fma (- (sin eps)) (sin x) (* (sin x) (sin eps)))) (if (<= x 1.96e-116) (if (!= (+ (cos x) (cos (+ x eps))) 0.0) (/ (- (pow (sin x) 2.0) (* (sin (+ x eps)) (sin (+ x eps)))) (+ (cos x) (cos (+ x eps)))) (- (cos (+ x eps)) (cos x))) (+ (fma (+ (cos eps) -1.0) (cos x) (log1p (expm1 (* (sin eps) (- (sin x)))))) (fma (- (sin eps)) (sin x) (* (sin x) (sin eps))))))",
    "output_parens": 61,
    "avg_bits_err_input": 39.62885796385204,
    "avg_bits_err_output": 2.1822169273156877,
    "avg_bits_err_improve": 37.446641036536356,
    "time": 25094.307861328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (!= (+ 1.0 (cbrt x)) 0.0) (/ (+ (+ 1.0 (cbrt x)) (+ (* (cbrt (+ 1.0 x)) (+ 1.0 (cbrt x))) (- (pow (+ 1.0 (cbrt x)) 2.0)))) (+ 1.0 (cbrt x))) (- (cbrt (+ x 1.0)) (cbrt x)))",
    "output_parens": 24,
    "avg_bits_err_input": 29.672128719980382,
    "avg_bits_err_output": 29.293737458300733,
    "avg_bits_err_improve": 0.3783912616796492,
    "time": 16950.613525390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log (- 1.0 (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 30.002686708335755,
    "avg_bits_err_output": 30.008909293058977,
    "avg_bits_err_improve": -0.006222584723222013,
    "time": 22086.0224609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.234673131877436,
    "avg_bits_err_output": 21.806933332687294,
    "avg_bits_err_improve": 12.427739799190142,
    "time": 24240.143798828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.710277482896295,
    "avg_bits_err_output": 22.31825565174848,
    "avg_bits_err_improve": 11.392021831147815,
    "time": 22931.809326171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(- (- (- (+ 1.0 (/ (log1p (- x)) (log1p x))) -1.0) 1.0) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 61.368384163634296,
    "avg_bits_err_output": 0.027318609377704348,
    "avg_bits_err_improve": 61.341065554256595,
    "time": 17997.390869140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (log1p n) 0.0) (+ (/ 1.0 (- (exp (log1p (/ 1.0 (log1p n)))) 1.0)) (* (/ (log1p n) (log1p n)) (* n (- (log1p n) (log n))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 63.004861545587985,
    "avg_bits_err_output": 44.22260959754707,
    "avg_bits_err_improve": 18.782251948040916,
    "time": 14915.232421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (+ (- (+ (/ 1.0 (+ eps 1.0)) -1.0) (/ (+ eps eps) (- eps (- -2.0 eps)))) (/ (fma (- (+ 1.0 (/ (+ eps eps) (+ eps (+ eps 2.0))))) (/ 1.0 (+ 1.0 eps)) (/ (+ 1.0 (/ (+ eps eps) (+ eps (+ eps 2.0)))) (+ 1.0 eps))) (/ 1.0 (+ 1.0 eps)))))",
    "output_parens": 29,
    "avg_bits_err_input": 58.55311717107745,
    "avg_bits_err_output": 50.506565211444304,
    "avg_bits_err_improve": 8.046551959633149,
    "time": 18089.075927734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(log (+ 1.0 (expm1 (/ (- 1.0 (/ x (tan x))) x))))",
    "output_parens": 7,
    "avg_bits_err_input": 59.86659524500726,
    "avg_bits_err_output": 59.85129189073399,
    "avg_bits_err_improve": 0.015303354273271452,
    "time": 30401.16552734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* eps (/ (expm1 (* eps (+ a b))) (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.52131561508944,
    "avg_bits_err_output": 29.262381312722642,
    "avg_bits_err_improve": 31.2589343023668,
    "time": 27904.9560546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.146003904474156,
    "avg_bits_err_output": 0.3975943609377705,
    "avg_bits_err_improve": 40.74840954353638,
    "time": 9070.15185546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.65758867147359,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 58.65721367147359,
    "time": 4604.4248046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.113551741286233,
    "avg_bits_err_output": 0.01916850310022949,
    "avg_bits_err_improve": 29.094383238186005,
    "time": 6374.248291015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (exp x) (+ 1.0 (* (exp x) -2.0))) (exp x))",
    "output_parens": 8,
    "avg_bits_err_input": 29.460704682000475,
    "avg_bits_err_output": 28.648749353909928,
    "avg_bits_err_improve": 0.8119553280905478,
    "time": 21466.811279296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ 1.0 (+ 1.0 x))) (/ 2.0 x))",
    "output_parens": 7,
    "avg_bits_err_input": 9.633505261051234,
    "avg_bits_err_output": 9.64963316936641,
    "avg_bits_err_improve": -0.016127908315176853,
    "time": 22763.13623046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (log1p (expm1 (tan x))))",
    "output_parens": 6,
    "avg_bits_err_input": 36.7534910911402,
    "avg_bits_err_output": 36.794288045542444,
    "avg_bits_err_improve": -0.0407969544022464,
    "time": 19742.625244140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.591864212488453,
    "avg_bits_err_output": 0.16016052656439303,
    "avg_bits_err_improve": 29.43170368592406,
    "time": 14338.023193359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin eps) (cos x) (* (sin x) (cos eps))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.01132265054853,
    "avg_bits_err_output": 21.658742658909006,
    "avg_bits_err_improve": 15.352579991639523,
    "time": 17681.2373046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (+ 0.5 (/ (+ (/ -1.0 (sqrt x)) (/ 2.0 (sqrt (- x -1.0)))) (/ -2.0 (sqrt x)))) (sqrt x))",
    "output_parens": 12,
    "avg_bits_err_input": 20.256004051314022,
    "avg_bits_err_output": 20.257915808792642,
    "avg_bits_err_improve": -0.0019117574786200464,
    "time": 16115.80908203125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(exp (* 1.0 (log1p (- (atan (+ N 1.0)) (log (+ 1.0 (- (exp (+ 1.0 (atan N))) 1.0)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.178066987185467,
    "avg_bits_err_output": 14.179278590728194,
    "avg_bits_err_improve": -0.001211603542726536,
    "time": 10887.1015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.38078377963852,
    "avg_bits_err_output": 1.2293022381684982,
    "avg_bits_err_improve": 28.151481541470023,
    "time": 25613.45654296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (fma (/ m v) (* (- 1.0 m) (- 1.0 m)) (* (/ m v) (fma (- m) (- 1.0 m) (- m (* m m))))) (- 1.0 m))",
    "output_parens": 14,
    "avg_bits_err_input": 0.07448514209423482,
    "avg_bits_err_output": 0.0784119507987948,
    "avg_bits_err_improve": -0.003926808704559984,
    "time": 18400.18896484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (+ (/ (+ a (+ a a)) (/ -4.0 b)) (/ a (/ -4.0 b))))",
    "output_parens": 9,
    "avg_bits_err_input": 16.067174388564737,
    "avg_bits_err_output": 0.3308625081955697,
    "avg_bits_err_improve": 15.736311880369168,
    "time": 11659.971923828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (if (!= (* PI (/ angle 360.0)) 0.0) (/ 1.0 (/ (/ 1.0 (/ angle 180.0)) PI)) (* PI (/ angle 180.0))))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.417983566486676,
    "avg_bits_err_output": 20.471959594034583,
    "avg_bits_err_improve": -0.053976027547907535,
    "time": 33471.343505859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* PI (/ angle 180.0))) (cos (/ (* PI angle) -180.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 31.15099973059393,
    "avg_bits_err_output": 31.207697063986416,
    "avg_bits_err_improve": -0.05669733339248495,
    "time": 36249.174072265625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (if (!= PI 0.0) (/ (* PI (* PI (/ angle 180.0))) PI) (* angle (/ PI 180.0))))) 2.0))",
    "output_parens": 17,
    "avg_bits_err_input": 20.207910606075902,
    "avg_bits_err_output": 20.219042869214974,
    "avg_bits_err_improve": -0.011132263139071341,
    "time": 40034.782958984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17090158869586775,
    "avg_bits_err_output": 0.17131034640495865,
    "avg_bits_err_improve": -0.0004087577090909067,
    "time": 17599.88330078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3234814492662428,
    "avg_bits_err_output": 0.31439494479001145,
    "avg_bits_err_improve": 0.009086504476231327,
    "time": 23053.24609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (/ (- e) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13239624062518027,
    "avg_bits_err_output": 0.13429248125036058,
    "avg_bits_err_improve": -0.0018962406251803177,
    "time": 16842.977294921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.053078116884766,
    "avg_bits_err_output": 17.05229251466514,
    "avg_bits_err_improve": 0.0007856022196257584,
    "time": 37173.420654296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.41960666705849,
    "avg_bits_err_output": 0.17598629414064698,
    "avg_bits_err_improve": 52.24362037291784,
    "time": 30307.0078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 28.521127677284223,
    "avg_bits_err_output": 0.3350387234500304,
    "avg_bits_err_improve": 28.186088953834194,
    "time": 25023.86865234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.933839051325805,
    "avg_bits_err_output": 0.23605033778384787,
    "avg_bits_err_improve": 43.697788713541954,
    "time": 30985.449951171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.23904482868608,
    "avg_bits_err_output": 21.806933332687294,
    "avg_bits_err_improve": 12.43211149599879,
    "time": 23511.42041015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (fma (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))) (pow (cos phi1) 2.0)) (cos phi1)) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.9072351064400549,
    "avg_bits_err_output": 0.9258872459224613,
    "avg_bits_err_improve": -0.018652139482406405,
    "time": 27285.025146484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(- (log (+ 1.0 (expm1 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))))) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 29.07634473132597,
    "avg_bits_err_output": 29.08333279235264,
    "avg_bits_err_improve": -0.0069880610266679355,
    "time": 20823.81591796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ (exp (+ x x)) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 58.071940921935386,
    "avg_bits_err_output": 0.7396156015629508,
    "avg_bits_err_improve": 57.33232532037243,
    "time": 15529.6953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x 2.0)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 57.99240368509231,
    "avg_bits_err_output": 0.05994812031259014,
    "avg_bits_err_improve": 57.93245556477972,
    "time": 5993.59375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.00789624062518029,
    "avg_bits_err_output": 0.00789624062518029,
    "avg_bits_err_improve": 0,
    "time": 3308.530029296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (- (* x x) 1.0))) 1e+154) (log (+ x (pow (pow (fma x x -1.0) 0.25) 2.0))) (log x))",
    "output_parens": 12,
    "avg_bits_err_input": 32.369375,
    "avg_bits_err_output": 21.76896210654128,
    "avg_bits_err_improve": 10.600412893458717,
    "time": 6904.869873046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (expm1 (log1p (/ (- -1.0 x) (+ x -1.0))))))",
    "output_parens": 7,
    "avg_bits_err_input": 58.54309489220731,
    "avg_bits_err_output": 58.56014317435734,
    "avg_bits_err_improve": -0.017048282150035732,
    "time": 19461.222412109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.026573120312590147,
    "avg_bits_err_output": 0.026573120312590147,
    "avg_bits_err_improve": 0,
    "time": 3163.771240234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12382312031259014,
    "avg_bits_err_output": 0.12382312031259014,
    "avg_bits_err_improve": 0,
    "time": 26481.209716796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1261462406251803,
    "avg_bits_err_output": 0.1261462406251803,
    "avg_bits_err_improve": 0,
    "time": 26590.622802734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (if (!= (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0))) 0.0) (/ (- (* (cos (/ phi1 2.0)) (* (cos (/ phi2 2.0)) (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0))))) (* (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0))) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0))))) (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0)))) (cos (/ (+ phi1 phi2) 2.0)))) (- phi1 phi2)))",
    "output_parens": 44,
    "avg_bits_err_input": 39.08669208283665,
    "avg_bits_err_output": 0.1419128730182673,
    "avg_bits_err_improve": 38.94477920981838,
    "time": 30115.009521484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.449749711339619,
    "avg_bits_err_output": 0.013247159990437492,
    "avg_bits_err_improve": 14.436502551349182,
    "time": 7752.10888671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (if (!= (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 0.0) (/ 1.0 (/ (/ 1.0 (sin phi1)) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 0.1635200668372493,
    "avg_bits_err_output": 0.16794169782050164,
    "avg_bits_err_improve": -0.00442163098325235,
    "time": 40152.69873046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* c (* a -3.0))))) 0.0) (* (/ c (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a -3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 52.4813404162015,
    "avg_bits_err_output": 0.17499793281619583,
    "avg_bits_err_improve": 52.3063424833853,
    "time": 28753.19677734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* a -3.0)))) (- b)) 0.0) (* (* a -3.0) (/ c (+ b (sqrt (fma a (* -3.0 c) (* b b)))))) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 28.675928576812307,
    "avg_bits_err_output": 0.3446614832115305,
    "avg_bits_err_improve": 28.331267093600776,
    "time": 30004.154296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* -3.0 a)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 44.010822380376474,
    "avg_bits_err_output": 0.2434251890708831,
    "avg_bits_err_improve": 43.76739719130559,
    "time": 24189.954833984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -3.0) (* b b)))) 0.0) (* (* a -3.0) (/ c (+ b (sqrt (fma c (* a -3.0) (* b b)))))) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 22,
    "avg_bits_err_input": 34.27727371167057,
    "avg_bits_err_output": 21.812745878871496,
    "avg_bits_err_improve": 12.464527832799071,
    "time": 25061.365966796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (cos (- lambda2 lambda1))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.235009709166363,
    "avg_bits_err_output": 13.23486895270317,
    "avg_bits_err_improve": 0.00014075646319255952,
    "time": 36242.4951171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (+ 1.0 x)) (- (+ x -1.0) (* x (/ x (+ 1.0 x))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.474627970452524,
    "avg_bits_err_output": 0.531199891393961,
    "avg_bits_err_improve": 28.943428079058563,
    "time": 18589.493408203125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.010375,
    "avg_bits_err_output": 0.03602066434202206,
    "avg_bits_err_improve": -0.025645664342022055,
    "time": 3172.34326171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (/ -1.0 (+ x 1.0)) (+ -1.0 (/ x (+ x 1.0)))) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 14.716908677052219,
    "avg_bits_err_output": 12.78161789923718,
    "avg_bits_err_improve": 1.9352907778150392,
    "time": 14933.805419921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2.9e-307) (* (* (sqrt (- F)) (sqrt (* -2.0 (- (* A (* C 4.0)) (pow B 2.0))))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt F) (sqrt (* (- (pow B 2.0) (* A (* C 4.0))) -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.34570415851834,
    "avg_bits_err_output": 46.599645611027434,
    "avg_bits_err_improve": 5.746058547490904,
    "time": 46977.559326171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 1.05e+14) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (* (- C A) (- C A)) (pow B 2.0)))))) PI)) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))) 0.0) (/ (- (pow B 2.0)) (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))) (- C (+ A (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))))))) PI)))",
    "output_parens": 46,
    "avg_bits_err_input": 29.768099971483018,
    "avg_bits_err_output": 26.833512703336446,
    "avg_bits_err_improve": 2.934587268146572,
    "time": 26875.507568359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -4e-310) (* (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (/ (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- F))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (/ (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt F)) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.39194310070474,
    "avg_bits_err_output": 46.67755732213645,
    "avg_bits_err_improve": 5.7143857785682854,
    "time": 49020.01708984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 16.164742181436335,
    "avg_bits_err_output": 16.164742181436335,
    "avg_bits_err_improve": 0,
    "time": 21173.6005859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-287) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) g) 0.0) (* h (/ h (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (- (- g) (sqrt (- (* g g) (* h h)))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) (- g)) 0.0) (* h (/ h (- (- g) (sqrt (- (* g g) (* h h)))))) (- (sqrt (- (* g g) (* h h))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 71,
    "avg_bits_err_input": 35.7464310882645,
    "avg_bits_err_output": 3.122341040678179,
    "avg_bits_err_improve": 32.62409004758632,
    "time": 42676.7021484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos (* PI 0.3333333333333333)) (cos (fma PI 0.3333333333333333 (/ (acos (/ (- g) h)) 3.0)))) (* (sin (* PI 0.3333333333333333)) (sin (fma PI 0.3333333333333333 (/ (acos (/ (- g) h)) 3.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.9913639109464255,
    "avg_bits_err_output": 0.02670996250072116,
    "avg_bits_err_improve": 0.9646539484457044,
    "time": 15070.21435546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (+ -1.0 (+ (exp a) 1.0)) (+ (exp a) (exp b)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.667125,
    "avg_bits_err_output": 0.7774866904772038,
    "avg_bits_err_improve": -0.11036169047720379,
    "time": 6680.167724609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-295) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+257) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.423395897667953,
    "avg_bits_err_output": 2.5105537224188748,
    "avg_bits_err_improve": 8.912842175249079,
    "time": 9739.92041015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5129727632595006,
    "avg_bits_err_output": 0.4325,
    "avg_bits_err_improve": 0.08047276325950059,
    "time": 11260.849365234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.002) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 40.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 52.89206785441452,
    "avg_bits_err_output": 0.15024837076872255,
    "avg_bits_err_improve": 52.7418194836458,
    "time": 13861.975830078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.651442741400846,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.651442741400846,
    "time": 2688.21484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- (- (/ 1.0 (+ 1.0 x)) (/ x (+ x (+ x 2.0)))) (/ x (+ x (+ x 2.0)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.015448120312590146,
    "avg_bits_err_improve": -0.002823120312590145,
    "time": 4182.570068359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1254.513427734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= r -5e+147) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* r (* w (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (if (<= r 4.6e+47) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* w (* r (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* r (* w (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.357390301486214,
    "avg_bits_err_output": 0.2573304515658352,
    "avg_bits_err_improve": 12.10005984992038,
    "time": 23324.522216796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma x1 (* (/ (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (fma x1 x1 1.0)) (* x1 -4.0)) (fma x1 (* x1 -6.0) (* (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* x1 2.0)))))))))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.5166551153454957,
    "avg_bits_err_output": 0.2916164928858537,
    "avg_bits_err_improve": 0.225038622459642,
    "time": 82600.73022460938,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- v) (+ t1 u)) (/ t1 (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.23924039327486,
    "avg_bits_err_output": 1.2200588557399485,
    "avg_bits_err_improve": 17.01918153753491,
    "time": 10550.72314453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.21791748125036056,
    "avg_bits_err_output": 0.18373120312590144,
    "avg_bits_err_improve": 0.034186278124459124,
    "time": 8201.322265625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0026652410118609203,
    "avg_bits_err_output": 0.0026652410118609203,
    "avg_bits_err_improve": 0,
    "time": 3500.029052734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* PI (/ (- (/ 1.0 (* a (+ a b))) (/ 1.0 (* b (+ a b)))) (* (- b a) 2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 14.487350327184277,
    "avg_bits_err_output": 0.29786695126832446,
    "avg_bits_err_improve": 14.189483375915954,
    "time": 18081.842529296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (exp (- (* x eps) x)) 1.0 (+ (/ (exp (- (* x eps) x)) eps) (- (exp (- (fma x eps x))) (/ (exp (- (fma x eps x))) eps)))) 2.0)",
    "output_parens": 18,
    "avg_bits_err_input": 29.288659464539627,
    "avg_bits_err_output": 24.61256691023023,
    "avg_bits_err_improve": 4.676092554309399,
    "time": 22159.025390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (+ (- 2.0 (/ 2.0 (* t (+ 2.0 (/ 2.0 t))))) (- (/ 2.0 (* t (+ 2.0 (/ 2.0 t))))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.020375,
    "avg_bits_err_output": 0.01975,
    "avg_bits_err_improve": 0.0006250000000000006,
    "time": 7816.112548828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (/ (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t)) (/ (/ 4.0 t) (+ (/ 2.0 t) 2.0))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.025625,
    "avg_bits_err_output": 0.08163684218813101,
    "avg_bits_err_improve": -0.05601184218813102,
    "time": 14497.654052734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ (* t (* (/ t (+ t 1.0)) 4.0)) (+ t 1.0))) (+ 2.0 (/ (* t (* (/ t (+ t 1.0)) 4.0)) (+ t 1.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.035375,
    "avg_bits_err_output": 0.058625,
    "avg_bits_err_improve": -0.02325,
    "time": 9569.88623046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3429.840576171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8351.923828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2736.09814453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.80911877941945,
    "avg_bits_err_output": 0.248875,
    "avg_bits_err_improve": 7.56024377941945,
    "time": 41623.128662109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.568363101246445,
    "avg_bits_err_output": 7.568363101246445,
    "avg_bits_err_improve": 0,
    "time": 17486.809326171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.151271773531636,
    "avg_bits_err_output": 0.03620818140696555,
    "avg_bits_err_improve": 16.11506359212467,
    "time": 14571.716064453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (if (!= (exp (* x 10.0)) 0.0) (/ 1.0 (/ 1.0 (pow (exp x) 10.0))) (pow (exp x) 10.0)) x))",
    "output_parens": 13,
    "avg_bits_err_input": 3.5337284328666234,
    "avg_bits_err_output": 2.069452236297582,
    "avg_bits_err_improve": 1.4642761965690414,
    "time": 17070.1787109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (fma x x 1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 14.775483775594797,
    "avg_bits_err_output": 14.775160655282209,
    "avg_bits_err_improve": 0.00032312031258818763,
    "time": 4055.547119140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.41319217748289,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.41319217748289,
    "time": 5108.397216796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.72486944223623,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 38.723869442236236,
    "time": 5051.81884765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.301,
    "avg_bits_err_improve": 63.699,
    "time": 22392.110595703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ (* t 1.6e-47) 4e-16) t)",
    "output_parens": 3,
    "avg_bits_err_input": 61.843250776468324,
    "avg_bits_err_output": 0.3529693609377704,
    "avg_bits_err_improve": 61.49028141553055,
    "time": 17626.55859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.710277482896295,
    "avg_bits_err_output": 22.31825565174848,
    "avg_bits_err_improve": 11.392021831147815,
    "time": 24854.49365234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.23904482868608,
    "avg_bits_err_output": 21.806933332687294,
    "avg_bits_err_improve": 12.43211149599879,
    "time": 26637.69873046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2032.460205078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.02464764542883,
    "avg_bits_err_output": 0.01975,
    "avg_bits_err_improve": 40.00489764542883,
    "time": 13928.97607421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.27894301975897,
    "avg_bits_err_output": 20.27894301975897,
    "avg_bits_err_improve": 0,
    "time": 5254.167724609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.5764649048846247,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.5764649048846247,
    "time": 7475.780517578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0385,
    "avg_bits_err_output": 0.001375,
    "avg_bits_err_improve": 0.037125,
    "time": 8610.188232421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.016948120312590145,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": 0.005823120312590146,
    "time": 3665.72412109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.014374999999999999,
    "time": 3319.458251953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 1944.568359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ d (+ c a)) (+ e b))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4032691734413764,
    "avg_bits_err_output": 0.245125,
    "avg_bits_err_improve": 0.1581441734413764,
    "time": 7573.90380859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (- 0.5 (- (* (cos (+ x x)) 0.5))) 0.0) (/ (- 0.25 (* (- (* (cos (+ x x)) 0.5)) (- (* (cos (+ x x)) 0.5)))) (- 0.5 (- (* (cos (+ x x)) 0.5)))) (- 0.5 (* (cos (+ x x)) 0.5))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 36,
    "avg_bits_err_input": 29.500441905640464,
    "avg_bits_err_output": 29.460135493168682,
    "avg_bits_err_improve": 0.04030641247178224,
    "time": 13915.25390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (fma x x (- eps))))) (- x (sqrt (fma x x (- eps)))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.28423411580665,
    "avg_bits_err_output": 0.29657312031259014,
    "avg_bits_err_improve": 23.98766099549406,
    "time": 12449.301025390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(exp (* 1.0 (log (/ (if (!= (- x (sin x)) 0.0) (/ 1.0 (/ 1.0 (- x (sin x)))) (- x (sin x))) (tan x)))))",
    "output_parens": 15,
    "avg_bits_err_input": 30.51516062313163,
    "avg_bits_err_output": 30.515095038728152,
    "avg_bits_err_improve": 6.558440347959049e-05,
    "time": 33888.791259765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006573120312590144,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.005823120312590144,
    "time": 3215.11669921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -100.0 (/ i n))))",
    "output_parens": 22,
    "avg_bits_err_input": 47.94557993578987,
    "avg_bits_err_output": 13.498827147421382,
    "avg_bits_err_improve": 34.44675278836849,
    "time": 25992.0830078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(fma b (/ d (fma c c (* d d))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 8,
    "avg_bits_err_input": 26.41803412600564,
    "avg_bits_err_output": 23.299181358120684,
    "avg_bits_err_improve": 3.118852767884956,
    "time": 14658.337158203125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= c -2e+35) (- (* b (if (!= (/ c (fma c c (* d d))) 0.0) (/ 1.0 (/ 1.0 (/ c (fma c c (* d d))))) (/ c (fma c c (* d d))))) (/ (* a d) (fma c c (* d d)))) (if (<= c 1e-299) (- (/ (* b c) (fma c c (* d d))) (* a (/ d (fma c c (* d d))))) (fma b (/ c (fma c c (* d d))) (* (/ (- d) (fma c c (* d d))) a))))",
    "output_parens": 41,
    "avg_bits_err_input": 26.36938487891704,
    "avg_bits_err_output": 23.375077049297644,
    "avg_bits_err_improve": 2.9943078296193946,
    "time": 17346.302490234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (- ux (* ux maxCos)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.033375,
    "avg_bits_err_output": 0.01753053411825244,
    "avg_bits_err_improve": 0.015844465881747562,
    "time": 7426.926513671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (* (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) (+ ux -1.0))) 0.0) (/ (/ (* (* (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) (+ ux -1.0))) (- (- (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos 1.0)) 1.0) (* ux (fma ux maxCos (- 1.0 ux))))) (+ (- ux (* ux maxCos)) -1.0)) (fma ux maxCos (- 1.0 ux))) (- (fma (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) (+ ux -1.0)) -1.0)))))",
    "output_parens": 43,
    "avg_bits_err_input": 13.604116756017186,
    "avg_bits_err_output": 11.34960565983883,
    "avg_bits_err_improve": 2.2545110961783568,
    "time": 35707.330078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (- (- ux (* ux ux)) (- (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) ux)) 0.0) (* (/ (- (* maxCos (* ux (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))) (+ ux (- ux (* ux ux)))) (- (* maxCos (* ux (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))) (+ ux (- ux (* ux ux))))) (- (+ ux (- ux (* maxCos (* ux (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))) (* ux ux))) (- (- ux (* ux ux)) (- (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) ux)))))",
    "output_parens": 59,
    "avg_bits_err_input": 13.633105205358305,
    "avg_bits_err_output": 0.3264951476413427,
    "avg_bits_err_improve": 13.306610057716963,
    "time": 32836.967041015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (sin (* (* uy 2.0) PI))) yi)) (* (* ux (* (- 1.0 ux) maxCos)) zi))",
    "output_parens": 33,
    "avg_bits_err_input": 0.3533256941859234,
    "avg_bits_err_output": 0.34699669838471414,
    "avg_bits_err_improve": 0.0063289958012092695,
    "time": 45918.802001953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.21003759491720253,
    "avg_bits_err_output": 0.21016259491720254,
    "avg_bits_err_improve": -0.000125000000000014,
    "time": 37939.254150390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (pow (/ (/ (* u1 u1) (- 1.0 u1)) (- 1.0 u1)) 0.25) (sin (* 6.28318530718 u2)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5273052096597759,
    "avg_bits_err_output": 0.5330697662708063,
    "avg_bits_err_improve": -0.005764556611030369,
    "time": 19593.272705078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (if (!= (* u2 -6.28318530718) 0.0) (- (+ 1.0 (* 6.28318530718 u2)) 1.0) (* 6.28318530718 u2))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.3268196327186358,
    "avg_bits_err_output": 0.3480386216482113,
    "avg_bits_err_improve": -0.021218988929575522,
    "time": 27300.99853515625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.33150640204892723,
    "avg_bits_err_output": 0.33263613830957,
    "avg_bits_err_improve": -0.0011297362606427774,
    "time": 42869.21923828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05803104458225688,
    "avg_bits_err_output": 0.040230239571414854,
    "avg_bits_err_improve": 0.017800805010842025,
    "time": 14042.471923828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.13354197425442763,
    "avg_bits_err_output": 0.10204590033081357,
    "avg_bits_err_improve": 0.03149607392361406,
    "time": 19957.755859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6751124505807413,
    "avg_bits_err_output": 0.6751944269136092,
    "avg_bits_err_improve": -8.197633286788353e-05,
    "time": 24870.67138671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.15663811306823494,
    "avg_bits_err_output": 0.15281908933121355,
    "avg_bits_err_improve": 0.003819023737021393,
    "time": 20806.40576171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.561479138020748,
    "avg_bits_err_output": 2.5558232954459363,
    "avg_bits_err_improve": 0.005655842574811665,
    "time": 29682.442626953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* cosTheta_i (* (/ cosTheta_O (exp (* 1.0 (log (* v (sinh (/ 1.0 v))))))) (/ 0.5 v))) (exp (* sinTheta_i (/ sinTheta_O v))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.46465221439493026,
    "avg_bits_err_output": 0.4141333989074078,
    "avg_bits_err_improve": 0.05051881548752246,
    "time": 29909.7392578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (* (exp (/ (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) v)) (exp 0.6931)) 0.5) v)",
    "output_parens": 10,
    "avg_bits_err_input": 0.10215365043857581,
    "avg_bits_err_output": 0.08648002963360558,
    "avg_bits_err_improve": 0.01567362080497023,
    "time": 23205.613525390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (/ (* alpha alpha) (* PI (* 2.0 (log alpha)))) (/ 0.5 (* PI (log alpha)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4702707101683745,
    "avg_bits_err_output": 0.5321457128299153,
    "avg_bits_err_improve": -0.06187500266154078,
    "time": 25142.990966796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (/ (- (+ 1.0 (* (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) 9.0)) 1.0) 3.0) s)",
    "output_parens": 8,
    "avg_bits_err_input": 1.3115123199176546,
    "avg_bits_err_output": 1.249766393536058,
    "avg_bits_err_improve": 0.061745926381596705,
    "time": 26395.95068359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ (/ 2.0 (/ 2.0 (- 1.0 (* 4.0 u)))) (- (- (* u -4.0) (* u (- 4.0 (* u 16.0)))) -1.0))) s) 2.0) (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 12.513838276691208,
    "avg_bits_err_output": 11.706515129372738,
    "avg_bits_err_improve": 0.8073231473184705,
    "time": 22592.35302734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (* 2.0 PI)))) (* 0.75 (/ (* (exp (/ r (* -3.0 s))) 0.16666666666666666) (* s PI)))) r)",
    "output_parens": 16,
    "avg_bits_err_input": 0.13220703589264557,
    "avg_bits_err_output": 0.14213770354282862,
    "avg_bits_err_improve": -0.00993066765018305,
    "time": 28831.640625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8584023282747201,
    "avg_bits_err_output": 0.7312921724531211,
    "avg_bits_err_improve": 0.127110155821599,
    "time": 29536.5478515625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (/ (if (!= (* (sqrt PI) cosTheta) 0.0) (* PI (/ (* cosTheta (/ (+ cosTheta cosTheta) cosTheta)) (sqrt PI))) (* (sqrt PI) (+ cosTheta cosTheta))) 2.0)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 24,
    "avg_bits_err_input": 0.6866850533746715,
    "avg_bits_err_output": 0.39949151880878986,
    "avg_bits_err_improve": 0.2871935345658816,
    "time": 23090.101318359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.621533033039467,
    "avg_bits_err_output": 0.5351147526715693,
    "avg_bits_err_improve": 13.086418280367898,
    "time": 19979.170654296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (if (!= (* PI (* u2 -2.0)) 0.0) (- (+ 1.0 (* (* u2 PI) 2.0)) 1.0) (* 2.0 (* PI u2)))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.670547721294065,
    "avg_bits_err_output": 0.33348009881175916,
    "avg_bits_err_improve": 13.337067622482307,
    "time": 18555.3984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.035741003659682,
    "avg_bits_err_output": 0.3168562031259014,
    "avg_bits_err_improve": 13.71888480053378,
    "time": 14934.950439453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (- (/ (/ sin2phi alphay) alphay)) (/ cos2phi (* alphax alphax))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.619550375658925,
    "avg_bits_err_output": 0.5265541588394983,
    "avg_bits_err_improve": 12.092996216819426,
    "time": 14203.213134765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (+ (/ (tan (* PI l)) F) (* (tan (* PI l)) (/ 3.0 F))) (+ (+ F F) (+ F F))))",
    "output_parens": 14,
    "avg_bits_err_input": 16.926184191673947,
    "avg_bits_err_output": 12.702176100098434,
    "avg_bits_err_improve": 4.224008091575513,
    "time": 21649.26220703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(/ (- 1.0 (/ x (/ (tan B) (sin B)))) (sin B))",
    "output_parens": 7,
    "avg_bits_err_input": 0.21206372187554084,
    "avg_bits_err_output": 0.19565133163992576,
    "avg_bits_err_improve": 0.016412390235615082,
    "time": 17273.3701171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.320328265980981,
    "avg_bits_err_output": 10.155644659421528,
    "avg_bits_err_improve": 3.1646836065594535,
    "time": 22409.958740234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(if (<= (* (/ PI 4.0) f) 100.0) (/ (log1p (- (/ (exp (/ (* PI f) -4.0)) (if (!= (exp (/ (* PI f) -4.0)) 0.0) (/ (- (expm1 (* (* PI f) -0.5))) (exp (/ (* PI f) -4.0))) (- (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0))))) (- 1.0 (/ (exp (* PI (/ f 4.0))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (* (/ f -4.0) 2.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))))) (/ PI -4.0)) 0.0)",
    "output_parens": 58,
    "avg_bits_err_input": 61.322369661325304,
    "avg_bits_err_output": 0.7386862251383121,
    "avg_bits_err_improve": 60.583683436186995,
    "time": 47504.027099609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.89399472837731,
    "avg_bits_err_output": 33.948738683819926,
    "avg_bits_err_improve": 8.945256044557382,
    "time": 28475.302734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin th) (/ (sin ky) (hypot (sin ky) (sin kx))))",
    "output_parens": 7,
    "avg_bits_err_input": 3.9176017611745624,
    "avg_bits_err_output": 0.22536353437914652,
    "avg_bits_err_improve": 3.692238226795416,
    "time": 33497.525634765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0) (pow (* (* 2.0 (/ l Om)) (sin kx)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.8943742678845564,
    "avg_bits_err_output": 0.006,
    "avg_bits_err_improve": 0.8883742678845564,
    "time": 18845.09130859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (- -1.0 (+ (- (pow (/ Om Omc) 2.0)) -1.0))) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 13,
    "avg_bits_err_input": 10.862531952428254,
    "avg_bits_err_output": 10.863580387019924,
    "avg_bits_err_improve": -0.0010484345916701443,
    "time": 17122.113525390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -1e-39) (* (sqrt (* n -2.0)) (sqrt (* U (- (fma 2.0 (* l (/ l Om)) (* n (* (pow (/ l Om) 2.0) (- U U*)))) t)))) (if (<= n -1e-68) (* (sqrt (* (* 2.0 n) (- t (fma 2.0 (* l (/ l Om)) (* n (* (pow (/ l Om) 2.0) (- U U*))))))) (sqrt U)) (if (<= n -2.6e-178) (* (sqrt (* n -2.0)) (sqrt (* U (- (fma 2.0 (* l (/ l Om)) (* n (* (pow (/ l Om) 2.0) (- U U*)))) t)))) (if (<= n -1.25e-207) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (if (<= n -5e-310) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= n 2.5e-197) (* (sqrt (* 2.0 (* U (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt n)) (if (<= n 6.2e+31) (sqrt (fma U (* (* 2.0 n) (- t (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (* l (/ l Om)))))) 0.0)) (* (sqrt (* U (- t (fma 2.0 (* l (/ l Om)) (* n (* (pow (/ l Om) 2.0) (- U U*))))))) (sqrt (* 2.0 n))))))))))",
    "output_parens": 126,
    "avg_bits_err_input": 34.56024740422174,
    "avg_bits_err_output": 25.71247432140599,
    "avg_bits_err_improve": 8.847773082815753,
    "time": 44845.130126953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1.05e+62) (/ 2.0 (/ (* k (* (* (tan k) (/ (sin k) l)) (/ (* k (/ (pow t 3.0) l)) t))) t)) (if (<= t 1.16e-18) (/ 2.0 (* (/ (* (tan k) (/ (sin k) l)) t) (* k (/ (* k (pow t 3.0)) (* l t))))) (/ 2.0 (/ (* k (* (* (tan k) (/ (sin k) l)) (/ (* k (/ (pow t 3.0) l)) t))) t))))",
    "output_parens": 40,
    "avg_bits_err_input": 47.23044222472221,
    "avg_bits_err_output": 30.722374839426912,
    "avg_bits_err_improve": 16.5080673852953,
    "time": 47675.02294921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1.35e-108) (/ 2.0 (/ (* (tan k) (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ (pow t 3.0) l)))) l)) (if (<= t 3e-99) 0.0 (/ (/ 2.0 (/ (/ (* (pow t 3.0) (tan k)) l) l)) (* (sin k) (+ 2.0 (pow (/ k t) 2.0))))))",
    "output_parens": 28,
    "avg_bits_err_input": 32.163229373401556,
    "avg_bits_err_output": 23.314748251269698,
    "avg_bits_err_improve": 8.848481122131858,
    "time": 31221.197021484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (+ (+ (* a1 a1) (* a2 (/ a2 2.0))) (* a2 (/ a2 2.0))) (sqrt 2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.5397894765845872,
    "avg_bits_err_output": 0.487734776578817,
    "avg_bits_err_improve": 0.05205470000577023,
    "time": 25869.14453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow n 0.5) (* (pow n (* k -0.5)) (pow (* 2.0 PI) (fma k -0.5 0.5)))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4818863233716547,
    "avg_bits_err_output": 0.5250288838062441,
    "avg_bits_err_improve": -0.043142560434589416,
    "time": 20311.232421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (if (!= (* (+ (exp l) (exp (- l))) J) 0.0) (- 0.0 (- (* J (/ (exp (* l -2.0)) (+ (exp l) (exp (- l))))) (/ (* (exp (+ l l)) (* J (/ J J))) (+ (exp l) (exp (- l)))))) (* (- (exp l) (exp (- l))) J)) (cos (/ K 2.0))) U)",
    "output_parens": 36,
    "avg_bits_err_input": 17.829651954521946,
    "avg_bits_err_output": 17.82649668087307,
    "avg_bits_err_improve": 0.0031552736488755784,
    "time": 28038.560791015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (if (!= (* K n) 0.0) (* K (* (+ n m) (* n (/ K (* K n))))) (* K (+ m n))) 2.0) M)) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n))))))",
    "output_parens": 28,
    "avg_bits_err_input": 15.418386189492933,
    "avg_bits_err_output": 7.0581237807334425,
    "avg_bits_err_improve": 8.36026240875949,
    "time": 18422.4560546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (cos (/ K 2.0)) (* (* -2.0 J) (sqrt (+ 1.0 (pow (/ (/ (/ U (cos (/ K 2.0))) 2.0) J) 2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.46453308281331,
    "avg_bits_err_output": 17.48142932343849,
    "avg_bits_err_improve": -0.01689624062517936,
    "time": 33538.231201171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= l -1e+51) (* w0 (sqrt (- 1.0 (/ (* (* (* (* h M) (/ D d)) (/ D l)) (/ M 4.0)) d)))) (if (<= l 5e+123) (* w0 (sqrt (- 1.0 (/ (* (pow (/ (/ (* D M) d) 2.0) 2.0) h) l)))) (* w0 (sqrt (- 1.0 (/ (* (* D (/ (* M D) d)) (* M (/ h (* d l)))) 4.0))))))",
    "output_parens": 35,
    "avg_bits_err_input": 13.68570072456706,
    "avg_bits_err_output": 10.429102507687412,
    "avg_bits_err_improve": 3.256598216879647,
    "time": 24333.95751953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= V -1e-308) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= V 1.15e-240) (* c0 (* (if (!= (sqrt (/ A l)) 0.0) (/ (/ A l) (sqrt (/ A l))) (sqrt (/ A l))) (sqrt (/ 1.0 V)))) (if (<= V 0.01) (* c0 (sqrt (if (!= (/ A (* l V)) 0.0) (/ 1.0 (/ 1.0 (/ A (* l V)))) (/ A (* l V))))) (* c0 (* (if (!= (sqrt (/ A l)) 0.0) (/ (/ A l) (sqrt (/ A l))) (sqrt (/ A l))) (sqrt (/ 1.0 V)))))))",
    "output_parens": 54,
    "avg_bits_err_input": 19.321031222129317,
    "avg_bits_err_output": 11.803064859524772,
    "avg_bits_err_improve": 7.517966362604545,
    "time": 21300.585205078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* D D) 4e-319) (/ (/ (* c0 (if (!= (- (* d (* d (/ (/ (/ c0 D) h) (* D w)))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) h) (* D w)))) 2.0) (* M M)))) 0.0) (/ (- (* M M) 0.0) (- (* d (* d (/ (/ (/ c0 D) h) (* D w)))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) h) (* D w)))) 2.0) (* M M))))) (fma d (* d (/ (/ (/ c0 D) h) (* D w))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) h) (* D w)))) 2.0) (* M M)))))) w) 2.0) (if (<= (* D D) 4e-177) (/ (/ (* c0 (if (!= (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))) 0.0) (* M (/ M (- (/ (* c0 (pow (/ d D) 2.0)) (* w h)) (sqrt (- (pow (/ (* c0 (pow (/ d D) 2.0)) (* w h)) 2.0) (* M M)))))) (+ (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) w) 2.0) (if (<= (* D D) 1e-7) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* c0 (/ (/ d D) w)) (* D h))) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* c0 (/ (/ d D) w)) (* D h))) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M))))) (fma d (/ (* c0 (/ (/ d D) w)) (* D h)) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M)))))) (if (<= (* D D) 1e+298) (/ (/ (* c0 (if (!= (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M))))) (+ (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) w) 2.0) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* c0 (/ (/ d D) w)) (* D h))) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* c0 (/ (/ d D) w)) (* D h))) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M))))) (fma d (/ (* c0 (/ (/ d D) w)) (* D h)) (sqrt (- (pow (* d (/ (* c0 (/ (/ d D) w)) (* D h))) 2.0) (* M M))))))))))",
    "output_parens": 288,
    "avg_bits_err_input": 59.72345062510315,
    "avg_bits_err_output": 30.80977004195671,
    "avg_bits_err_improve": 28.913680583146437,
    "time": 73720.97045898438,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) -5e+287) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* D (/ M (+ d d))) (/ (* (* (/ M (+ d d)) h) D) (+ l l))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) -1e-160) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (* (/ (* 0.5 h) l) (* (/ (* D M) (+ d d)) (/ (* D M) (+ d d)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 0.0) (/ (* (* (* (sqrt d) (sqrt (/ 1.0 l))) (sqrt (/ d h))) (- 1.0 (* (pow (* M (/ D (* d 2.0))) 2.0) (* (/ h l) 0.5)))) 1.0) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 5e+273) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (/ (/ (* (* (/ (* D M) (+ d d)) (* M (/ D d))) h) 4.0) l))) (/ (* (sqrt (* d (/ d (* h l)))) (- 1.0 (/ (/ (* M (* M (* (/ D d) (* D h)))) (* l 8.0)) d))) 1.0)))))",
    "output_parens": 146,
    "avg_bits_err_input": 26.54313077399435,
    "avg_bits_err_output": 21.981237364606784,
    "avg_bits_err_improve": 4.561893409387565,
    "time": 64062.201904296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (if (!= (+ 0.25 (/ 0.25 (fma x x 1.0))) 0.0) (/ (- 0.0625 (/ 0.0625 (pow (fma x x 1.0) 2.0))) (+ 0.25 (/ 0.25 (fma x x 1.0)))) (+ 0.25 (/ -0.25 (fma x x 1.0)))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 46,
    "avg_bits_err_input": 16.014168059511185,
    "avg_bits_err_output": 15.525918580470673,
    "avg_bits_err_improve": 0.48824947904051186,
    "time": 28720.170654296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9868656015629508,
    "avg_bits_err_output": 0.011698120312590146,
    "avg_bits_err_improve": 0.9751674812503607,
    "time": 4199.80224609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ (/ (- (* 5.0 (* v v)) 1.0) PI) (fma v v -1.0)) (sqrt (- 2.0 (* v (* v 6.0))))) t) 0.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.42591781149169733,
    "avg_bits_err_output": 0.11766406314526624,
    "avg_bits_err_improve": 0.3082537483464311,
    "time": 22845.107177734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(- (* v (* v (/ (sqrt (- 2.0 (* 6.0 (* v v)))) -4.0))) (/ (sqrt (- 2.0 (* 6.0 (* v v)))) -4.0))",
    "output_parens": 13,
    "avg_bits_err_input": 0.012707722262221501,
    "avg_bits_err_output": 0.008573120312590145,
    "avg_bits_err_improve": 0.004134601949631356,
    "time": 3476.101318359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5507649356150287,
    "avg_bits_err_output": 0.5507649356150287,
    "avg_bits_err_improve": 0,
    "time": 12602.913818359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output_parens": 7,
    "avg_bits_err_input": 2.14736174471255,
    "avg_bits_err_output": 2.14736174471255,
    "avg_bits_err_improve": 0,
    "time": 8946.145751953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- mu (- (- Ec EDonor) Vef)) KbT)))) (/ NaChar (+ 1.0 (expm1 (log1p (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.022732716761480035,
    "avg_bits_err_output": 0.023732716761480036,
    "avg_bits_err_improve": -0.0010000000000000009,
    "time": 10640.591064453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (- (* (* a (+ a a)) (* b b)) (* (- b) (* b (* b b))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.18781373264222415,
    "avg_bits_err_output": 0.07064340061561776,
    "avg_bits_err_improve": 0.11717033202660639,
    "time": 8724.279296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (fma 4.0 (fma (* b b) (- 1.0 (* a 3.0)) (* a (* a (+ a 1.0)))) (fma (* b (* a a)) (+ b b) (+ (pow a 4.0) (pow b 4.0)))) -1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 0.18910664275575975,
    "avg_bits_err_output": 0.018167167893409258,
    "avg_bits_err_improve": 0.1709394748623505,
    "time": 15998.046142578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (fma b (* b (* a a)) (pow b 4.0)) (* (* a a) (fma b b (* a a)))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.18459005351546667,
    "avg_bits_err_output": 0.10242952695107368,
    "avg_bits_err_improve": 0.08216052656439299,
    "time": 21742.0458984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (+ (/ x (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0)) (/ (+ x (+ x x)) (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.296697980081309,
    "avg_bits_err_output": 13.421938238116335,
    "avg_bits_err_improve": -0.12524025803502603,
    "time": 16197.103759765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.59271767812149,
    "avg_bits_err_output": 0.049125,
    "avg_bits_err_improve": 40.54359267812149,
    "time": 7195.894775390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (!= (+ 1.0 (- (+ (/ x (- (tan x) x)) 1.0) (/ (sin x) (- (tan x) x)))) 0.0) (/ (- 1.0 (* (log1p (expm1 (+ (/ (- (sin x) x) (- (tan x) x)) -1.0))) (- (- (+ (/ x (- (tan x) x)) 1.0) (/ (sin x) (- (tan x) x)))))) (+ 1.0 (- (+ (/ x (- (tan x) x)) 1.0) (/ (sin x) (- (tan x) x))))) (/ (- x (sin x)) (- x (tan x))))",
    "output_parens": 48,
    "avg_bits_err_input": 31.110674265336044,
    "avg_bits_err_output": 31.114111504459533,
    "avg_bits_err_improve": -0.003437239123488922,
    "time": 31096.7021484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (exp (log (- b_2))) a) (if (<= b_2 -2.6e-273) (/ (- (sqrt (- (* b_2 b_2) (* c a))) b_2) a) (/ (if (!= (- 0.0 (- b_2)) 0.0) (* a (/ c (- (- b_2) (sqrt (fma a (- c) (* b_2 b_2)))))) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a)))",
    "output_parens": 32,
    "avg_bits_err_input": 33.820198183972245,
    "avg_bits_err_output": 20.322626859730683,
    "avg_bits_err_improve": 13.497571324241562,
    "time": 16878.373779296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.05588322986994,
    "avg_bits_err_output": 20.197790455703867,
    "avg_bits_err_improve": 13.858092774166074,
    "time": 17858.77099609375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.329167050767772,
    "avg_bits_err_output": 30.57454678980546,
    "avg_bits_err_improve": 0.7546202609623123,
    "time": 18407.8095703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.00250505090117,
    "avg_bits_err_output": 10.59433729791944,
    "avg_bits_err_improve": 21.408167752981733,
    "time": 31047.719482421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (if (!= (+ (log1p N) 2.0) 0.0) (/ (+ (pow (log1p N) 2.0) (* (log1p N) 2.0)) (+ (log1p N) 2.0)) (log1p N)) (log N))",
    "output_parens": 15,
    "avg_bits_err_input": 29.40489672648931,
    "avg_bits_err_output": 29.501847246406722,
    "avg_bits_err_improve": -0.09695051991741366,
    "time": 13059.329833984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(if (!= (/ 1.0 (+ 1.0 x)) 0.0) (/ (- (/ -1.0 x) (+ -1.0 (/ x x))) (+ 1.0 x)) (+ (/ 1.0 (+ 1.0 x)) (/ -1.0 x)))",
    "output_parens": 14,
    "avg_bits_err_input": 14.392850973268146,
    "avg_bits_err_output": 0.068125,
    "avg_bits_err_improve": 14.324725973268146,
    "time": 18589.236328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -4.4e-114) (fma (sin x) (- (sin eps)) (* (+ (cos eps) -1.0) (cos x))) (if (<= x 3.5e-99) (if (!= (+ (cos x) (cos (+ x eps))) 0.0) (/ (- (pow (sin x) 2.0) (* (sin (+ x eps)) (sin (+ x eps)))) (+ (cos x) (cos (+ x eps)))) (- (cos (+ x eps)) (cos x))) (fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))))",
    "output_parens": 43,
    "avg_bits_err_input": 39.940981555116096,
    "avg_bits_err_output": 1.9670366233245986,
    "avg_bits_err_improve": 37.9739449317915,
    "time": 22243.18505859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.536233998661956,
    "avg_bits_err_output": 29.238242633599217,
    "avg_bits_err_improve": 0.2979913650627388,
    "time": 16501.5048828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 29.938340772734886,
    "avg_bits_err_output": 29.938340772734886,
    "avg_bits_err_improve": 0,
    "time": 20507.66650390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* c (/ (* a -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 34.148113047899024,
    "avg_bits_err_output": 22.332291231630933,
    "avg_bits_err_improve": 11.815821816268091,
    "time": 23779.113525390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.4079375625893,
    "avg_bits_err_output": 22.503548871310887,
    "avg_bits_err_improve": 11.90438869127841,
    "time": 25340.219482421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.41774068935821,
    "avg_bits_err_output": 0.022283082813311303,
    "avg_bits_err_improve": 61.3954576065449,
    "time": 15167.687744140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(+ (log1p n) (+ (* n (log1p n)) (- -1.0 (* n (log n)))))",
    "output_parens": 8,
    "avg_bits_err_input": 63.00128345677194,
    "avg_bits_err_output": 0.6159013302608417,
    "avg_bits_err_improve": 62.3853821265111,
    "time": 15760.89404296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(if (!= (log (/ (- 1.0 eps) (+ 1.0 eps))) 0.0) (/ 1.0 (/ 1.0 (log (/ (- 1.0 eps) (+ 1.0 eps))))) (log (/ (- 1.0 eps) (+ 1.0 eps))))",
    "output_parens": 16,
    "avg_bits_err_input": 58.5901143684253,
    "avg_bits_err_output": 58.59043830235902,
    "avg_bits_err_improve": -0.00032393393372132095,
    "time": 18309.73779296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (- (+ 1.0 (/ (/ x -2.0) (tan x))) (/ x (* (tan x) 2.0))) x)",
    "output_parens": 9,
    "avg_bits_err_input": 59.937304562023,
    "avg_bits_err_output": 59.94434380492841,
    "avg_bits_err_improve": -0.007039242905406695,
    "time": 31143.470947265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.549631115990856,
    "avg_bits_err_output": 29.62271943318116,
    "avg_bits_err_improve": 30.926911682809695,
    "time": 28885.142333984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.02666931851472,
    "avg_bits_err_output": 0.4600943609377705,
    "avg_bits_err_improve": 40.56657495757695,
    "time": 6790.805419921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.78338549412474,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 58.78263549412474,
    "time": 2682.51416015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.372772749799932,
    "avg_bits_err_output": 0.017067347324700076,
    "avg_bits_err_improve": 29.35570540247523,
    "time": 5409.044677734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (- (exp x) 2.0) (exp (- x))) 0.0) (/ (+ (fma (+ (- (exp x) 2.0) (exp (- x))) (- (exp x) (+ 2.0 (exp (- x)))) (fma (/ -1.0 (exp x)) (exp (- x)) (exp (* x -2.0)))) (fma (/ -1.0 (exp x)) (exp (- x)) (exp (* x -2.0)))) (- (- (exp x) 2.0) (exp (- x)))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 44,
    "avg_bits_err_input": 30.072393212563146,
    "avg_bits_err_output": 29.77924529855497,
    "avg_bits_err_improve": 0.29314791400817697,
    "time": 22086.574462890625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.623785173793717,
    "avg_bits_err_output": 9.623785173793717,
    "avg_bits_err_improve": 0,
    "time": 29623.01708984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (tan x) 0.0) (- (* (tan (+ x eps)) (/ (tan x) (tan x))) (/ 1.0 (/ 1.0 (tan x)))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 17,
    "avg_bits_err_input": 36.96683802788382,
    "avg_bits_err_output": 36.97802548052356,
    "avg_bits_err_improve": -0.011187452639745743,
    "time": 21399.090576171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (if (!= (sqrt (+ x 1.0)) 0.0) (/ (+ x 1.0) (sqrt (+ x 1.0))) (sqrt (+ x 1.0))) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 23,
    "avg_bits_err_input": 29.598634197073682,
    "avg_bits_err_output": 0.19223853437914656,
    "avg_bits_err_improve": 29.406395662694536,
    "time": 12607.69287109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(/ (- (* (sin x) (- (cos eps) 1.0)) (- (* (sin eps) (cos x)))) 1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 37.26211806434747,
    "avg_bits_err_output": 0.3937485823437825,
    "avg_bits_err_improve": 36.868369482003686,
    "time": 21381.30419921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 20.01758811801997,
    "avg_bits_err_output": 20.01758811801997,
    "avg_bits_err_improve": 0,
    "time": 16402.28515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (/ (- (* (atan (+ 1.0 N)) (atan (+ 1.0 N))) (pow (atan N) 2.0)) (+ (atan (+ 1.0 N)) (atan N))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 23,
    "avg_bits_err_input": 15.61891513363768,
    "avg_bits_err_output": 15.624919045041798,
    "avg_bits_err_improve": -0.006003911404118156,
    "time": 12665.744140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.872719925704544,
    "avg_bits_err_output": 1.2385504134265952,
    "avg_bits_err_improve": 28.63416951227795,
    "time": 26301.891357421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (- m (* m m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.08473027599603312,
    "avg_bits_err_output": 0.08292072124054027,
    "avg_bits_err_improve": 0.0018095547554928537,
    "time": 15197.77392578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (/ a (/ -1.0 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 15.945028183788345,
    "avg_bits_err_output": 0.26728797031547474,
    "avg_bits_err_improve": 15.67774021347287,
    "time": 10335.14794921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (- (* (cos (fma PI (/ angle 180.0) 1.0)) (cos 1.0)) (* (sin (fma PI (/ angle 180.0) 1.0)) (sin -1.0)))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.515547362137298,
    "avg_bits_err_output": 20.50878085243269,
    "avg_bits_err_improve": 0.006766509704608126,
    "time": 35484.41162109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (- (exp (log1p (cos (* PI (/ angle 180.0))))) 1.0))",
    "output_parens": 15,
    "avg_bits_err_input": 32.063659563320776,
    "avg_bits_err_output": 32.06498001037548,
    "avg_bits_err_improve": -0.0013204470547023561,
    "time": 33715.645263671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (/ PI 180.0))) a) 2.0) (pow (* b (cos (/ (if (!= (* angle PI) 0.0) (/ 1.0 (- (* (- (/ 2.0 angle)) (/ (/ -1.0 (* angle PI)) (/ 2.0 angle))) 0.0)) (* angle PI)) 180.0))) 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 20.54605131535058,
    "avg_bits_err_output": 20.53524965132335,
    "avg_bits_err_improve": 0.010801664027230373,
    "time": 41200.141845703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1838492043822976,
    "avg_bits_err_output": 0.17888367481976303,
    "avg_bits_err_improve": 0.004965529562534571,
    "time": 16712.959716796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- (fma (tan x) (tan x) -1.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3173243178783786,
    "avg_bits_err_output": 0.30371630887824425,
    "avg_bits_err_improve": 0.013608009000134369,
    "time": 20384.5390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13806372187554086,
    "avg_bits_err_output": 0.13806372187554086,
    "avg_bits_err_improve": 0,
    "time": 16498.1943359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 12,
    "avg_bits_err_input": 16.69982691895783,
    "avg_bits_err_output": 16.69982691895783,
    "avg_bits_err_improve": 0,
    "time": 36124.536376953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.48820756036882,
    "avg_bits_err_output": 0.17306165469173673,
    "avg_bits_err_improve": 52.315145905677085,
    "time": 26384.742919921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 28.15600209448868,
    "avg_bits_err_output": 0.3418005656381614,
    "avg_bits_err_improve": 27.814201528850518,
    "time": 27215.528076171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.623192487426074,
    "avg_bits_err_output": 0.2288896625064902,
    "avg_bits_err_improve": 43.394302824919585,
    "time": 25864.803955078125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (- (* (/ 0.0 a) 0.5) (/ b (+ a a))) (if (<= b -2.1e-272) (/ (+ (- b) (pow (fma b b (* (* a c) -4.0)) 0.5)) (* a 2.0)) (/ (if (!= (- b) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))))",
    "output_parens": 36,
    "avg_bits_err_input": 34.15091079335884,
    "avg_bits_err_output": 20.343336737027318,
    "avg_bits_err_improve": 13.807574056331521,
    "time": 23746.216796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (* (cos phi2) (cos (- lambda1 lambda2))) 0.0) (/ (+ (* (cos phi2) (* (cos (- lambda1 lambda2)) (* (cos phi2) (cos (- lambda1 lambda2))))) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))) (* (cos phi2) (cos (- lambda1 lambda2)))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.8504595051628373,
    "avg_bits_err_output": 0.868291173232842,
    "avg_bits_err_improve": -0.01783166807000469,
    "time": 27569.09716796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output_parens": 5,
    "avg_bits_err_input": 29.14982067071498,
    "avg_bits_err_output": 29.14982067071498,
    "avg_bits_err_improve": 0,
    "time": 3393.920654296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(* (/ (exp x) (+ (exp x) (exp (- x)))) (- (expm1 (* x -2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.448047843824696,
    "avg_bits_err_output": 1.3415236843762623,
    "avg_bits_err_improve": 57.10652415944843,
    "time": 19568.56005859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (expm1 (* x 2.0)) (exp (- x))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.18063737195172,
    "avg_bits_err_output": 0.05119812031259015,
    "avg_bits_err_improve": 58.12943925163913,
    "time": 11776.12744140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.009521240625180288,
    "avg_bits_err_output": 0.009521240625180288,
    "avg_bits_err_improve": 0,
    "time": 2619.4169921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.13066524101186,
    "avg_bits_err_output": 32.13066524101186,
    "avg_bits_err_improve": 0,
    "time": 4705.356689453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (if (!= (- -2.0 (log (/ (- -1.0 x) (- x 1.0)))) 0.0) (+ (+ (/ (pow (+ (log (/ (- -1.0 x) (- x 1.0))) 1.0) 2.0) (+ (fma (log (/ (- -1.0 x) (- x 1.0))) 2.0 4.0) (fma (log (/ (- -1.0 x) (- x 1.0))) 2.0 4.0))) 0.0) (- (/ (pow (+ (log (/ (- -1.0 x) (- x 1.0))) 1.0) 2.0) (+ (fma (log (/ (- -1.0 x) (- x 1.0))) 2.0 4.0) (fma (log (/ (- -1.0 x) (- x 1.0))) 2.0 4.0))) (/ (- 2.0 (pow (+ (log (/ (- -1.0 x) (- x 1.0))) 1.0) 2.0)) (fma (log (/ (- -1.0 x) (- x 1.0))) 2.0 4.0)))) (log (/ (- -1.0 x) (- x 1.0)))))",
    "output_parens": 64,
    "avg_bits_err_input": 58.57730135833719,
    "avg_bits_err_output": 58.57782980623469,
    "avg_bits_err_improve": -0.000528447897501394,
    "time": 31246.74267578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.026698120312590144,
    "avg_bits_err_output": 0.027323120312590144,
    "avg_bits_err_improve": -0.0006250000000000006,
    "time": 2865.8349609375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* (cos t) (* eh (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.11932312031259014,
    "avg_bits_err_output": 0.11894812031259014,
    "avg_bits_err_improve": 0.00037500000000000033,
    "time": 24468.937744140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (expm1 (log1p (cos (atan (* eh (/ (tan (- t)) ew))))))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.1252712406251803,
    "avg_bits_err_output": 0.12709436093777043,
    "avg_bits_err_improve": -0.0018231203125901319,
    "time": 29399.95947265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0))) (* (sin (/ phi1 2.0)) (* (- lambda1 lambda2) (sin (/ phi2 -2.0))))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 38.89351583101381,
    "avg_bits_err_output": 0.13273117258908573,
    "avg_bits_err_improve": 38.760784658424726,
    "time": 31966.792724609375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.201469142944786,
    "avg_bits_err_output": 14.201469142944786,
    "avg_bits_err_improve": 0,
    "time": 3517.410400390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (+ (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) (if (!= (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (sin phi1) (- (sin phi1)))) 0.0) (/ (- (pow (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 2.0) (* (- (sin phi1)) (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (sin phi1)))))) (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (sin phi1) (- (sin phi1))))) (* (sin phi1) (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) 0.0))))))",
    "output_parens": 109,
    "avg_bits_err_input": 0.15155727584531054,
    "avg_bits_err_output": 0.14919475751125397,
    "avg_bits_err_improve": 0.002362518334056568,
    "time": 41194.373046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* c (* a -3.0))))) 0.0) (* (/ c (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a -3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 52.52465316488392,
    "avg_bits_err_output": 0.18092725625468742,
    "avg_bits_err_improve": 52.34372590862923,
    "time": 33669.4931640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* a -3.0)))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a -3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 28.28270455726747,
    "avg_bits_err_output": 0.3312556406367187,
    "avg_bits_err_improve": 27.95144891663075,
    "time": 34312.267578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.671751270778614,
    "avg_bits_err_output": 0.2380665421939,
    "avg_bits_err_improve": 43.433684728584716,
    "time": 28537.828857421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (* a -3.0) (/ c (- b (- (pow (fma b b (* a (* c -3.0))) 0.5))))) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 34.18203478559806,
    "avg_bits_err_output": 21.748749662187286,
    "avg_bits_err_improve": 12.433285123410776,
    "time": 24297.745361328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (expm1 (log1p (* (cos (- lambda2 lambda1)) (sin phi1)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.058333628631958,
    "avg_bits_err_output": 13.064501152231244,
    "avg_bits_err_improve": -0.006167523599286184,
    "time": 36182.50927734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 28.988357069377088,
    "avg_bits_err_output": 0.5059540409264017,
    "avg_bits_err_improve": 28.482403028450687,
    "time": 22304.612060546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (log1p (expm1 (/ 1.0 (+ x -1.0)))) (/ x (+ x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.021519226984736083,
    "avg_bits_err_improve": -0.009769226984736083,
    "time": 6412.815185546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (/ -1.0 (- x -1.0)) (+ -1.0 (/ x (- x -1.0)))) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 14.406561586031108,
    "avg_bits_err_output": 12.506273165018976,
    "avg_bits_err_improve": 1.9002884210121316,
    "time": 17452.738525390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (* (sqrt (- F)) (* (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (/ (sqrt (fma (pow B 2.0) 2.0 (- (* (* A C) 8.0)))) (- (* A (* C 4.0)) (pow B 2.0))))) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) INFINITY) (/ (* (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (sqrt (* (* F (- (pow B 2.0) (* A (* C 4.0)))) -2.0))) (- (* A (* 4.0 C)) (pow B 2.0))) 0.0))",
    "output_parens": 90,
    "avg_bits_err_input": 52.35448496416277,
    "avg_bits_err_output": 46.203481645377614,
    "avg_bits_err_improve": 6.151003318785158,
    "time": 44195.8896484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 2e+18) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI)) (* (atan (* (if (!= A 0.0) (if (!= (- (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) 0.0) (/ (- (pow B 2.0)) (- (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- A C))) (/ -1.0 B))) (/ 180.0 PI)))",
    "output_parens": 54,
    "avg_bits_err_input": 29.9966691977714,
    "avg_bits_err_output": 27.072718845814958,
    "avg_bits_err_improve": 2.9239503519564423,
    "time": 23953.53173828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.6e-246) (/ (* (sqrt (- (* C (* A 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 (* (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ C A)) F))))) (- (* C (* A 4.0)) (pow B 2.0))) (/ (- (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (* (sqrt F) (sqrt (* 2.0 (if (!= (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) 0.0) (/ (+ (pow B 2.0) (+ (pow (- A C) 2.0) (* (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C)))) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))))))) (- (pow B 2.0) (* 4.0 (* A C)))))",
    "output_parens": 72,
    "avg_bits_err_input": 52.60273035188702,
    "avg_bits_err_output": 47.764893405477316,
    "avg_bits_err_improve": 4.837836946409702,
    "time": 52394.232177734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.795443944367163,
    "avg_bits_err_output": 15.795443944367163,
    "avg_bits_err_improve": 0,
    "time": 20898.173828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -5e-295) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) g) 0.0) (* (/ h (- (sqrt (fma g g (* h (- h)))) g)) h) (- (- g) (sqrt (fma g g (* h (- h))))))))) (if (<= g 2e+153) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- g) 0.0) (/ (+ (* g g) (* (sqrt (- (* g g) (* h h))) (- g))) (- g)) (- (sqrt (- (* g g) (* h h))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- g h)) (sqrt (+ g h))))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))))))",
    "output_parens": 87,
    "avg_bits_err_input": 36.48752067575829,
    "avg_bits_err_output": 7.163794707316897,
    "avg_bits_err_improve": 29.323725968441394,
    "time": 35959.709228515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (if (!= (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) -3.0))) 0.0) (* (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) -3.0))) (/ (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))) (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) -3.0))))) (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.9910877828190814,
    "avg_bits_err_output": 0.03975037656727765,
    "avg_bits_err_improve": 0.9513374062518037,
    "time": 7550.0009765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7174693609377705,
    "avg_bits_err_output": 0.7174693609377705,
    "avg_bits_err_improve": 0,
    "time": 2277.59619140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+299) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-272) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+282) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.130581512558171,
    "avg_bits_err_output": 2.705902979339105,
    "avg_bits_err_improve": 8.424678533219065,
    "time": 8076.687744140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.504616368894811,
    "avg_bits_err_output": 0.43307312031259015,
    "avg_bits_err_improve": 0.07154324858222083,
    "time": 10419.8837890625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.0) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 500000.0) (log1p (+ x (if (!= -1.0 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 42,
    "avg_bits_err_input": 53.246138133384655,
    "avg_bits_err_output": 0.23015981701341,
    "avg_bits_err_improve": 53.015978316371246,
    "time": 11493.063720703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.657056111221792,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.657056111221792,
    "time": 2119.083740234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 2.0 (* x 2.0)) (/ (+ x (+ (+ (+ x x) (+ x 4.0)) (+ x (+ (+ x x) (+ x 4.0))))) 4.0)))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.0155,
    "avg_bits_err_improve": -0.002874999999999999,
    "time": 6948.23779296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1216.975341796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= r -0.05) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* r (* w (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (if (<= r 5e+126) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* w (* r (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* r (* w (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.816982311973051,
    "avg_bits_err_output": 0.29876917344137616,
    "avg_bits_err_improve": 12.518213138531674,
    "time": 22893.368896484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma x1 (* 4.0 (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (/ x1 (fma x1 x1 1.0)))) (fma x1 (* x1 -6.0) (* (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (* 2.0 (/ x1 (fma x1 x1 1.0)))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0))))))))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.516347479053766,
    "avg_bits_err_output": 0.29417483852646803,
    "avg_bits_err_improve": 0.22217264052729796,
    "time": 63754.05615234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (- (- u) t1)) v) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.34940208147552,
    "avg_bits_err_output": 1.2848367838350179,
    "avg_bits_err_improve": 17.064565297640502,
    "time": 8889.005615234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma x 0.954929658551372 (* x (* (* x x) -0.12900613773279798)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.25451515121455115,
    "avg_bits_err_output": 0.1877421359810577,
    "avg_bits_err_improve": 0.06677301523349344,
    "time": 11229.544677734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002875,
    "avg_bits_err_output": 0.002875,
    "avg_bits_err_improve": 0,
    "time": 4005.918701171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (- (* (/ 1.0 a) (/ PI (- b a))) (/ (/ PI (- b a)) b)) 2.0) (+ b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.666970671311079,
    "avg_bits_err_output": 0.2669889109464239,
    "avg_bits_err_improve": 14.399981760364655,
    "time": 17992.489990234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(- (- (/ (+ 0.5 (/ 0.5 eps)) (exp (- x (* eps x)))) (/ (+ 0.5 (/ 0.5 eps)) (exp (fma eps x x)))) (/ -1.0 (exp (fma eps x x))))",
    "output_parens": 16,
    "avg_bits_err_input": 30.225742800812153,
    "avg_bits_err_output": 0.8761347420512988,
    "avg_bits_err_improve": 29.349608058760854,
    "time": 23529.77001953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.01925,
    "avg_bits_err_output": 0.01925,
    "avg_bits_err_improve": 0,
    "time": 4846.509521484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.025375,
    "avg_bits_err_output": 0.025375,
    "avg_bits_err_improve": 0,
    "time": 7616.591796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* (/ t (+ t 1.0)) 4.0))) (+ 2.0 (- (+ (pow (* 2.0 (/ t (+ t 1.0))) 2.0) -1.0) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.057125,
    "avg_bits_err_output": 0.00775,
    "avg_bits_err_improve": 0.049375,
    "time": 13008.061767578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3520.0458984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8724.716552734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2643.619384765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.816005798380656,
    "avg_bits_err_output": 0.251875,
    "avg_bits_err_improve": 7.564130798380656,
    "time": 38640.95068359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.538505130238594,
    "avg_bits_err_output": 7.538505130238594,
    "avg_bits_err_improve": 0,
    "time": 18108.447265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (+ (* eps (+ x eps)) (* x eps)) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 15.801908414872768,
    "avg_bits_err_output": 0.03452729203328972,
    "avg_bits_err_improve": 15.76738112283948,
    "time": 12519.251953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (pow (pow (exp 10.0) x) x) (- (+ 1.0 (cos x)) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 3.5229290729726883,
    "avg_bits_err_output": 1.2890562589622765,
    "avg_bits_err_improve": 2.233872814010412,
    "time": 16955.8974609375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 14.824278310572428,
    "avg_bits_err_output": 14.824278310572428,
    "avg_bits_err_improve": 0,
    "time": 15519.58203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 46.07436253481996,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 46.07436253481996,
    "time": 5292.539794921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.92231583010681,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 38.92169083010681,
    "time": 3711.826171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2985,
    "avg_bits_err_improve": 63.7015,
    "time": 23282.189453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ (* t 1.6e-47) 4e-16) t)",
    "output_parens": 3,
    "avg_bits_err_input": 61.84325161638259,
    "avg_bits_err_output": 0.33869812031259017,
    "avg_bits_err_improve": 61.504553496069995,
    "time": 19473.88916015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.4079375625893,
    "avg_bits_err_output": 22.503548871310887,
    "avg_bits_err_improve": 11.90438869127841,
    "time": 27986.601318359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (- (* (/ 0.0 a) 0.5) (/ b (+ a a))) (if (<= b -2.1e-272) (/ (+ (- b) (pow (fma b b (* (* a c) -4.0)) 0.5)) (* a 2.0)) (/ (if (!= (- b) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))))",
    "output_parens": 36,
    "avg_bits_err_input": 34.15091079335884,
    "avg_bits_err_output": 20.343336737027318,
    "avg_bits_err_improve": 13.807574056331521,
    "time": 27016.6552734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2541.612548828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.913044624331306,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 39.902919624331304,
    "time": 5959.2138671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 19.96967203494729,
    "avg_bits_err_output": 19.96967203494729,
    "avg_bits_err_improve": 0,
    "time": 4313.49560546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6203335493770865,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6203335493770865,
    "time": 5897.795166015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.036125,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.03525,
    "time": 6810.373291015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02189624062518029,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": 0.01077124062518029,
    "time": 4655.779052734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014375,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.014,
    "time": 3956.220458984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00025,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0,
    "time": 2137.013671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ b (+ d a)) (+ c e))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40043665469173684,
    "avg_bits_err_output": 0.246,
    "avg_bits_err_improve": 0.15443665469173684,
    "time": 8486.970947265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (+ (/ (+ (cos (* x -2.0)) -0.5) (- -2.0 (* 2.0 (cos x)))) (/ -0.5 (- -2.0 (* 2.0 (cos x))))) (- 1.0 (cos x)))",
    "output_parens": 18,
    "avg_bits_err_input": 30.191106099795643,
    "avg_bits_err_output": 30.151548558991784,
    "avg_bits_err_improve": 0.03955754080385887,
    "time": 17099.9716796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (if (!= (sqrt (- (* x x) eps)) 0.0) (/ (- (* x (+ x (sqrt (- (* x x) eps)))) eps) (sqrt (- (* x x) eps))) (+ x (sqrt (- (* x x) eps))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 30,
    "avg_bits_err_input": 24.514198845606824,
    "avg_bits_err_output": 0.06557800781475359,
    "avg_bits_err_improve": 24.44862083779207,
    "time": 15295.96435546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (- (* x x) (pow (sin x) 2.0)) (fma (sin (- x)) (sin x) (pow (sin x) 2.0))) 0.0) (/ (- (pow (if (!= (fma x x (pow (sin x) 2.0)) 0.0) (/ (- (pow (* x x) 2.0) (pow (sin x) 4.0)) (fma x x (pow (sin x) 2.0))) (- (* x x) (pow (sin x) 2.0))) 2.0) (* (fma (sin (- x)) (sin x) (pow (sin x) 2.0)) (fma (sin (- x)) (sin x) (pow (sin x) 2.0)))) (- (* (- x (sin x)) (+ x (sin x))) (fma (sin (- x)) (sin x) (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 74,
    "avg_bits_err_input": 30.620194048603626,
    "avg_bits_err_output": 30.51689894520501,
    "avg_bits_err_improve": 0.10329510339861514,
    "time": 41025.58935546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.008985521314888553,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.007860521314888553,
    "time": 3007.9658203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 4e-189) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (+ (* (pow (+ (/ i n) 1.0) n) (/ 100.0 (/ i n))) (/ (/ -400.0 i) (/ 4.0 n))))",
    "output_parens": 25,
    "avg_bits_err_input": 47.51389797100418,
    "avg_bits_err_output": 13.848036483095347,
    "avg_bits_err_improve": 33.66586148790883,
    "time": 26625.999267578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (+ (* (/ (/ (+ c (+ c c)) (fma d d (* c c))) 4.0) a) (* (/ (/ c 4.0) (fma d d (* c c))) a)))",
    "output_parens": 18,
    "avg_bits_err_input": 26.23347368555568,
    "avg_bits_err_output": 23.24973088690871,
    "avg_bits_err_improve": 2.9837427986469685,
    "time": 18005.781494140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 1e+261) (/ (+ (fma d (+ a a) (- (* b c) (* (+ a a) (+ d d)))) (* a d)) (+ (* c c) (* d d))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 50,
    "avg_bits_err_input": 25.817283732166857,
    "avg_bits_err_output": 22.62073577152342,
    "avg_bits_err_improve": 3.1965479606434357,
    "time": 18859.091796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (+ (* ux (- maxCos)) ux))",
    "output_parens": 4,
    "avg_bits_err_input": 0.035,
    "avg_bits_err_output": 0.021386842188131014,
    "avg_bits_err_improve": 0.01361315781186899,
    "time": 6291.73681640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ ux (+ -1.0 (- (+ 1.0 (* ux (* maxCos (- ux (fma ux maxCos 1.0))))) (* ux (* (+ maxCos -1.0) (- 1.0 ux))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.477731247355846,
    "avg_bits_err_output": 11.84463105402295,
    "avg_bits_err_improve": 1.633100193332897,
    "time": 31959.21435546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (if (!= (* -2.0 (* uy PI)) 0.0) (/ 1.0 (/ (/ 0.5 uy) PI)) (* 2.0 (* uy PI)))) (sqrt (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 13.512545684136345,
    "avg_bits_err_output": 12.360356043340278,
    "avg_bits_err_improve": 1.1521896407960668,
    "time": 33910.90380859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) xi) (fma (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) (* (if (!= (- (sin (* PI (* uy 2.0))) (* (sin 0.0) (cos (* PI (* uy 2.0))))) 0.0) (/ (pow (sin (* PI (* uy 2.0))) 2.0) (- (sin (* PI (* uy 2.0))) (* (sin 0.0) (cos (* PI (* uy 2.0)))))) (sin (* PI (* uy 2.0)))) yi) (* ux (* (- maxCos (* ux maxCos)) zi))))",
    "output_parens": 57,
    "avg_bits_err_input": 0.335919802336988,
    "avg_bits_err_output": 0.3408360483879301,
    "avg_bits_err_improve": -0.004916246050942097,
    "time": 48813.871826171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.2037270697866437,
    "avg_bits_err_output": 0.20385206978664372,
    "avg_bits_err_improve": -0.000125000000000014,
    "time": 39892.12646484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (sqrt (/ u1 (- 1.0 u1))) 0.0) (/ (pow (/ u1 (- 1.0 u1)) 1.5) (sqrt (/ u1 (- 1.0 u1)))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.5349836831455806,
    "avg_bits_err_output": 0.5799995706221767,
    "avg_bits_err_improve": -0.04501588747659602,
    "time": 24118.65234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3227656436061535,
    "avg_bits_err_output": 0.3227656436061535,
    "avg_bits_err_improve": 0,
    "time": 26120.034423828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (* (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (- 1.0 (/ 1.0 (+ 1.0 (exp (/ PI s))))) (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ PI (- s)))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 71,
    "avg_bits_err_input": 0.35156261527631183,
    "avg_bits_err_output": 0.332583403690848,
    "avg_bits_err_improve": 0.01897921158546384,
    "time": 55467.64892578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06832913801329205,
    "avg_bits_err_output": 0.04972732115257504,
    "avg_bits_err_improve": 0.018601816860717005,
    "time": 10447.556396484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.16523170877488302,
    "avg_bits_err_output": 0.12009514109265775,
    "avg_bits_err_improve": 0.04513656768222528,
    "time": 21220.137451171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.682310690196305,
    "avg_bits_err_output": 0.6773463464738506,
    "avg_bits_err_improve": 0.004964343722454356,
    "time": 22572.22412109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.15861638220756208,
    "avg_bits_err_output": 0.15347524502718632,
    "avg_bits_err_improve": 0.00514113718037576,
    "time": 23231.3994140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma (/ sinTheta_O (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) (/ sinTheta_O -2.0) (fma eta eta (* sinTheta_O (/ sinTheta_O (* (sqrt (- 1.0 (* sinTheta_O sinTheta_O))) -2.0))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 2.5935418963603016,
    "avg_bits_err_output": 2.5966008849985704,
    "avg_bits_err_improve": -0.0030589886382688114,
    "time": 47719.72265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (/ (/ (* (/ cosTheta_i v) (/ 0.5 v)) (exp (* sinTheta_i (/ sinTheta_O v)))) (sinh (/ 1.0 v))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4720714258862903,
    "avg_bits_err_output": 0.4018423884640961,
    "avg_bits_err_improve": 0.07022903742219422,
    "time": 25677.690185546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (if (!= 0.6931 0.0) (+ 0.6931 (* (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (log (/ 0.5 v))) 1.0)) (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (+ 0.6931 (log (/ 0.5 v))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.10872540520199615,
    "avg_bits_err_output": 0.10833381685225331,
    "avg_bits_err_improve": 0.00039158834974284407,
    "time": 12548.2529296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (fma alpha alpha -1.0) (log (* alpha alpha))) (- -1.0 (- (* (* alpha alpha) (* cosTheta cosTheta)) (* cosTheta cosTheta)))) (- PI))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4721451103973117,
    "avg_bits_err_output": 0.5004982006565247,
    "avg_bits_err_improve": -0.02835309025921301,
    "time": 24269.4140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* 3.0 (* (+ (+ (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) -1.0) 1.0) s))",
    "output_parens": 7,
    "avg_bits_err_input": 1.316074137437004,
    "avg_bits_err_output": 1.259978848071952,
    "avg_bits_err_improve": 0.056095289365051926,
    "time": 23668.537841796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0) (/ (* (log (* (/ 1.0 (- (- (* u -4.0) (* u (- 4.0 (* u 16.0)))) -1.0)) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (- 1.0 (* 4.0 u))))))))) s) 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 12.215416280237807,
    "avg_bits_err_output": 11.337842856372864,
    "avg_bits_err_improve": 0.8775734238649431,
    "time": 25805.659912109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (/ (* (exp (/ r (* s -3.0))) 0.75) PI) (* (* s 6.0) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.14434114182003469,
    "avg_bits_err_output": 0.14877931142342188,
    "avg_bits_err_improve": -0.004438169603387193,
    "time": 17281.124755859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle (- 1.0 u))) (sin normAngle)) n0_i (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8396854338492937,
    "avg_bits_err_output": 0.6959662888108262,
    "avg_bits_err_improve": 0.1437191450384675,
    "time": 28581.654296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (pow (- (- 1.0 cosTheta) cosTheta) 0.5) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6941100610671365,
    "avg_bits_err_output": 0.474276075207445,
    "avg_bits_err_improve": 0.21983398585969144,
    "time": 21969.612548828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(if (!= (sqrt (- (log1p (- u1)))) 0.0) (* (/ (sin (* PI (* u2 -2.0))) (sqrt (- (log1p (- u1))))) (log1p (- u1))) (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2)))))",
    "output_parens": 25,
    "avg_bits_err_input": 13.628203123889442,
    "avg_bits_err_output": 0.5764238077336818,
    "avg_bits_err_improve": 13.05177931615576,
    "time": 19911.93994140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (+ (+ (cos (* PI (* u2 -2.0))) -1.0) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 13.681134453204013,
    "avg_bits_err_output": 0.3135999299776077,
    "avg_bits_err_improve": 13.367534523226405,
    "time": 18722.63134765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.204926261487806,
    "avg_bits_err_output": 0.3106062031259014,
    "avg_bits_err_improve": 13.894320058361904,
    "time": 14143.420166015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ cos2phi (* alphax (- alphax))) (/ (/ sin2phi alphay) alphay)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.649040992138502,
    "avg_bits_err_output": 0.5468740376055622,
    "avg_bits_err_improve": 12.10216695453294,
    "time": 15701.846435546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -5e+16) (- (* PI l) 0.0) (if (<= (* PI l) 2000000000000.0) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (- (* PI l) 0.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 17.075932214308526,
    "avg_bits_err_output": 0.4138798687432657,
    "avg_bits_err_improve": 16.66205234556526,
    "time": 21333.127685546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21093872187554086,
    "avg_bits_err_output": 0.1530212406251803,
    "avg_bits_err_improve": 0.05791748125036056,
    "time": 18263.980224609375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 14.431978838362001,
    "avg_bits_err_output": 10.914386890074327,
    "avg_bits_err_improve": 3.5175919482876736,
    "time": 24313.694580078125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* PI (* (/ f -4.0) 2.0)))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0))",
    "output_parens": 32,
    "avg_bits_err_input": 61.47967505940285,
    "avg_bits_err_output": 1.8508315790292962,
    "avg_bits_err_improve": 59.628843480373554,
    "time": 59602.98046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (+ x 1.0) (+ -1.0 x)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.7656167302722,
    "avg_bits_err_output": 33.53844217476126,
    "avg_bits_err_improve": 9.227174555510942,
    "time": 27188.34033203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.0281374659385,
    "avg_bits_err_output": 0.22020789531691698,
    "avg_bits_err_improve": 3.8079295706215834,
    "time": 35204.576904296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (- (- (sqrt (- (* 4.0 (+ (pow (* (/ l Om) (sin ky)) 2.0) (pow (* (/ l Om) (sin kx)) 2.0))) -1.0)) -1.0) 1.0)) 0.5)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.9678373356809318,
    "avg_bits_err_output": 0.008,
    "avg_bits_err_improve": 0.9598373356809318,
    "time": 16594.755859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (- (- (pow (/ t l) 2.0) -1.0) 1.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.220808766035601,
    "avg_bits_err_output": 10.233219418688812,
    "avg_bits_err_improve": -0.012410652653210619,
    "time": 22257.603759765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -4e-310) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= n 7.5e-225) (* (sqrt (* U (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om))))))) (sqrt (* 2.0 n))) (if (<= n 1.15e+84) (sqrt (* (* (* n U) -2.0) (- (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (* l (/ l Om)))) t))) (* (sqrt (* U (- t (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* 2.0 (* l (/ l Om))))))) (sqrt (* 2.0 n))))))",
    "output_parens": 63,
    "avg_bits_err_input": 34.04677738193184,
    "avg_bits_err_output": 25.49165728779482,
    "avg_bits_err_improve": 8.55512009413702,
    "time": 40676.020751953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ k t) (/ (/ (* k (* (tan k) (* (pow t 3.0) (/ (sin k) l)))) t) l)))",
    "output_parens": 12,
    "avg_bits_err_input": 47.5559019041451,
    "avg_bits_err_output": 32.34116041009695,
    "avg_bits_err_improve": 15.214741494048155,
    "time": 46946.97509765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)) INFINITY) (/ 2.0 (* (/ (sin k) l) (* (+ 2.0 (pow (/ k t) 2.0)) (* (/ (tan k) l) (pow t 3.0))))) 0.0)",
    "output_parens": 26,
    "avg_bits_err_input": 31.979910067780295,
    "avg_bits_err_output": 21.40362022476004,
    "avg_bits_err_improve": 10.576289843020255,
    "time": 33906.884765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(+ (/ (* a1 (/ (* (cos th) a1) (sqrt 2.0))) 1.0) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.5648131609608497,
    "avg_bits_err_output": 0.4898082734586855,
    "avg_bits_err_improve": 0.07500488750216416,
    "time": 23641.7421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5456900857066218,
    "avg_bits_err_output": 0.5456900857066218,
    "avg_bits_err_improve": 0,
    "time": 20056.01708984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (if (!= (exp (* l -2.0)) 0.0) (/ (if (!= 1.0 0.0) (- (expm1 (* l -4.0))) (- (expm1 (* l -4.0)))) (exp (* l -2.0))) (- (+ (exp (+ l l)) 0.0) (exp (* l -2.0)))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 41,
    "avg_bits_err_input": 17.53336760725125,
    "avg_bits_err_output": 0.16765828632589336,
    "avg_bits_err_improve": 17.365709320925358,
    "time": 26830.8935546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (+ (* K n) (* K m)) 2.0) M)) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n))))))",
    "output_parens": 20,
    "avg_bits_err_input": 15.488595464350512,
    "avg_bits_err_output": 15.48859542763732,
    "avg_bits_err_improve": 3.671319248610416e-08,
    "time": 11614.173095703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.323688721875545,
    "avg_bits_err_output": 18.323688721875545,
    "avg_bits_err_improve": 0,
    "time": 33421.010009765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) (- INFINITY)) (* w0 (sqrt (- 1.0 (* M (* (/ D (+ d d)) (* (/ D (+ d d)) (* (/ h l) M))))))) (if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) 5e-6) (* w0 (sqrt (- 1.0 (* (/ h l) (* (/ (* M D) (+ d d)) (/ (* M D) (+ d d))))))) (* w0 (sqrt (- 1.0 (* D (* (/ M (+ d d)) (/ (* h (* D (/ M (+ d d)))) l))))))))",
    "output_parens": 53,
    "avg_bits_err_input": 13.83694474873081,
    "avg_bits_err_output": 7.934762191553984,
    "avg_bits_err_improve": 5.902182557176825,
    "time": 21625.40380859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= V -1e-308) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (* c0 (* (sqrt (/ A l)) (sqrt (/ 1.0 V)))))",
    "output_parens": 16,
    "avg_bits_err_input": 19.374822214766585,
    "avg_bits_err_output": 11.424956017568636,
    "avg_bits_err_improve": 7.949866197197949,
    "time": 21481.783935546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= M -1.5e-110) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* d (/ c0 D)) (* D (* w h)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (* d (/ c0 D)) (* D (* w h)))) (sqrt (* (+ M (* d (* d (/ c0 (* D (* w (* D h))))))) (- (* d (* d (/ c0 (* D (* w (* D h)))))) M)))))) (fma d (/ (* d (/ c0 D)) (* D (* w h))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M)))))) (if (<= M -3.5e-266) (/ (/ (* c0 (if (!= (- (* d (/ (* (/ c0 D) (/ d h)) (* w D))) (sqrt (- (pow (* d (/ (* (/ c0 D) (/ d h)) (* w D))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* (/ c0 D) (/ d h)) (* w D))) (sqrt (- (pow (* d (+ (* (/ c0 D) (/ (/ d h) (* w (+ D D)))) (* (/ c0 D) (/ (/ d h) (* w (+ D D)))))) 2.0) (* M M))))) (fma d (/ (* (/ c0 D) (/ d h)) (* w D)) (sqrt (- (pow (* d (/ (* (/ c0 D) (/ d h)) (* w D))) 2.0) (* M M)))))) w) 2.0) (if (<= M 5.9e-272) (* (/ c0 (* 2.0 w)) (if (!= (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))) 0.0) (/ (- (* M M)) (- (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M))) (* c0 (/ (pow (/ d D) 2.0) (* w h))))) (+ (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) (if (<= M 4.9e-163) (/ (/ (* c0 (if (!= (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))))) (fma d (/ (* d c0) (* (* D h) (* D w))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))))) w) 2.0) (if (<= M 9.6e+141) (/ (/ (* c0 (if (!= (- (* d (/ (* (/ c0 D) (/ d h)) (* w D))) (sqrt (- (pow (* d (/ (* (/ c0 D) (/ d h)) (* w D))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* (/ c0 D) (/ d h)) (* w D))) (sqrt (- (pow (* d (/ (* (/ c0 D) (/ d h)) (* w D))) 2.0) (* M M))))) (fma d (/ (* (/ c0 D) (/ d h)) (* w D)) (sqrt (- (pow (* d (/ (* (/ c0 D) (/ d h)) (* w D))) 2.0) (* M M)))))) w) 2.0) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* d (/ c0 D)) (* D (* w h)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (* d (/ c0 D)) (* D (* w h)))) (sqrt (* (+ M (* d (* d (/ c0 (* D (* w (* D h))))))) (- (* d (* d (/ c0 (* D (* w (* D h)))))) M)))))) (fma d (/ (* d (/ c0 D)) (* D (* w h))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M)))))))))))",
    "output_parens": 368,
    "avg_bits_err_input": 59.372895800855844,
    "avg_bits_err_output": 30.51378684469158,
    "avg_bits_err_improve": 28.859108956164263,
    "time": 74387.52685546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (- (sqrt (* (/ d l) (/ d h))) (/ (* 0.5 (* (pow (/ (/ (* M D) d) 2.0) 2.0) (* h (sqrt (* d (/ (/ d l) h)))))) l)) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 5e+259) (* (* (if (!= (sqrt (/ d h)) 0.0) (/ (/ d h) (sqrt (/ d h))) (sqrt (/ d h))) (sqrt (/ d l))) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (sqrt (* d (/ d (* h l)))) (- (* (* (pow (/ M (+ d d)) 2.0) (/ (pow D 2.0) l)) (* h -0.5)) -1.0))))",
    "output_parens": 86,
    "avg_bits_err_input": 26.50709304258459,
    "avg_bits_err_output": 23.826228894928672,
    "avg_bits_err_improve": 2.6808641476559174,
    "time": 55776.990234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (log1p (expm1 (/ 0.25 (fma x x 1.0))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 15.410765365702012,
    "avg_bits_err_output": 14.89934729498252,
    "avg_bits_err_improve": 0.5114180707194915,
    "time": 21509.4443359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9845050362151283,
    "avg_bits_err_output": 0.012058450693760374,
    "avg_bits_err_improve": 0.972446585521368,
    "time": 5064.548583984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (- 1.0 (* 5.0 (* v v))) (* PI (* (- 1.0 (* v v)) (sqrt (- 2.0 (* (* v v) 6.0)))))) t)",
    "output_parens": 13,
    "avg_bits_err_input": 0.4633783556607222,
    "avg_bits_err_output": 0.11055228671257403,
    "avg_bits_err_improve": 0.35282606894814816,
    "time": 23689.580810546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (sqrt (- 2.0 (* v (* v 6.0)))) (- 1.0 (* v v))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.011417481250360578,
    "avg_bits_err_output": 0.007307428952329662,
    "avg_bits_err_improve": 0.004110052298030916,
    "time": 8846.037841796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5266227886698662,
    "avg_bits_err_output": 0.5266227886698662,
    "avg_bits_err_improve": 0,
    "time": 9229.92431640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.8686203510089219,
    "avg_bits_err_output": 1.8513703510089219,
    "avg_bits_err_improve": 0.017249999999999988,
    "time": 15943.806640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- Vef (- (- Ec EDonor) mu)) KbT)))) (/ NaChar (- (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.01684419868296054,
    "avg_bits_err_output": 0.01684419868296054,
    "avg_bits_err_improve": 0,
    "time": 7752.245361328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow a 4.0) (+ (* (* b b) (* a (+ a a))) (* b (* b (fma b b 4.0))))) 1.0)",
    "output_parens": 11,
    "avg_bits_err_input": 0.18172445195251588,
    "avg_bits_err_output": 0.06722896288740178,
    "avg_bits_err_improve": 0.1144954890651141,
    "time": 10758.549072265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (+ (* a (* a a)) (* a a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 0.1894806141215219,
    "avg_bits_err_output": 0.19000398893587206,
    "avg_bits_err_improve": -0.0005233748143501638,
    "time": 28227.5068359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (fma 4.0 (fma (* a a) (- 1.0 a) (* b (* b (+ a 3.0)))) (+ (+ (pow b 4.0) (pow (* b a) 2.0)) (* a (* a (fma a a (* b b)))))) -1.0)",
    "output_parens": 17,
    "avg_bits_err_input": 0.19098629414064683,
    "avg_bits_err_output": 0.07390584257481164,
    "avg_bits_err_improve": 0.11708045156583519,
    "time": 26217.1455078125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (if (!= (/ x (sqrt (fma 4.0 (* p p) (* x x)))) 0.0) (/ (+ (/ x (sqrt (fma 4.0 (* p p) (* x x)))) (/ (* x x) (fma 4.0 (* p p) (* x x)))) (/ x (sqrt (fma 4.0 (* p p) (* x x))))) (+ 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x))))))))",
    "output_parens": 32,
    "avg_bits_err_input": 13.1530980595127,
    "avg_bits_err_output": 13.155355748749036,
    "avg_bits_err_improve": -0.002257689236335736,
    "time": 18027.05078125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.69647215902946,
    "avg_bits_err_output": 0.031625,
    "avg_bits_err_improve": 40.66484715902946,
    "time": 5061.859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (!= (/ x (- (tan x) x)) 0.0) (/ (if (!= (- (* x (/ (sin x) (pow (- (tan x) x) 2.0))) (- (pow (/ x (- (tan x) x)) 2.0))) 0.0) (/ (- (pow (* x (/ (sin x) (pow (- (tan x) x) 2.0))) 2.0) (pow (/ x (- (tan x) x)) 4.0)) (- (expm1 (log1p (/ (* x (sin x)) (pow (- (tan x) x) 2.0)))) (- (pow (/ x (- (tan x) x)) 2.0)))) (/ (/ (* x (- (sin x) x)) (- (tan x) x)) (- (tan x) x))) (/ x (- (tan x) x))) (/ (- x (sin x)) (- x (tan x))))",
    "output_parens": 64,
    "avg_bits_err_input": 31.956759432176327,
    "avg_bits_err_output": 32.05446621004675,
    "avg_bits_err_improve": -0.09770677787042104,
    "time": 25336.90234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))) 0.0) (* (/ c (- (- b_2) (sqrt (fma a (- c) (* b_2 b_2))))) a) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.406898499133696,
    "avg_bits_err_output": 21.777287530142722,
    "avg_bits_err_improve": 12.629610968990974,
    "time": 17476.908935546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.130214017463175,
    "avg_bits_err_output": 22.031668813683876,
    "avg_bits_err_improve": 12.098545203779299,
    "time": 18159.65283203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.26032868957306,
    "avg_bits_err_output": 30.539434941879733,
    "avg_bits_err_improve": 0.7208937476933279,
    "time": 15707.649169921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (pow x (/ 1.0 n)) (exp (/ (log1p x) n))) 0.0) (/ (- (pow (exp (/ (log1p x) n)) 2.0) (pow x (/ 2.0 n))) (+ (pow x (/ 1.0 n)) (exp (/ (log1p x) n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 28,
    "avg_bits_err_input": 32.901508937959015,
    "avg_bits_err_output": 32.67032964886144,
    "avg_bits_err_improve": 0.23117928909757524,
    "time": 31169.09765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (- (+ (exp (- (log1p N) (log N))) 2.0) 2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 29.93056365801526,
    "avg_bits_err_output": 29.940313833606805,
    "avg_bits_err_improve": -0.00975017559154523,
    "time": 13191.36865234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (/ 1.0 x) (if (!= (/ x (+ x 1.0)) 0.0) (/ (- (* (/ x (+ x 1.0)) x) x) (/ (fma x x x) (+ x 1.0))) (+ (/ x (+ x 1.0)) -1.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 14.68472582155708,
    "avg_bits_err_output": 14.414929867961558,
    "avg_bits_err_improve": 0.2697959535955228,
    "time": 17482.266357421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))",
    "output_parens": 8,
    "avg_bits_err_input": 39.05257047549476,
    "avg_bits_err_output": 6.448650746977371,
    "avg_bits_err_improve": 32.60391972851739,
    "time": 23960.939697265625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.197480960898407,
    "avg_bits_err_output": 29.89421724859086,
    "avg_bits_err_improve": 0.30326371230754745,
    "time": 16464.204345703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log1p (- (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 30.07695533708086,
    "avg_bits_err_output": 30.07756415678765,
    "avg_bits_err_improve": -0.0006088197067875001,
    "time": 21897.1796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.3501025909059,
    "avg_bits_err_output": 21.960502374391897,
    "avg_bits_err_improve": 12.389600216514001,
    "time": 30154.345703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* 4.0 a)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.77893227627691,
    "avg_bits_err_output": 21.78266025233017,
    "avg_bits_err_improve": 11.99627202394674,
    "time": 24229.298828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.27502969496562,
    "avg_bits_err_output": 0.02135620312590145,
    "avg_bits_err_improve": 61.25367349183971,
    "time": 19047.724609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(exp (* 1.0 (- (exp (log1p (log (+ (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n))))))) 1.0)))",
    "output_parens": 14,
    "avg_bits_err_input": 63.00398418059162,
    "avg_bits_err_output": 2.4954737689600925,
    "avg_bits_err_improve": 60.50851041163153,
    "time": 17695.64453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (if (!= (/ eps (- -1.0 eps)) 0.0) (- (/ 1.0 (/ 1.0 (/ eps (- -1.0 eps)))) (/ (if (!= (- (/ eps (- -1.0 eps)) eps) 0.0) (/ (- (pow (/ eps (- -1.0 eps)) 2.0) (* eps eps)) (- (/ eps (- -1.0 eps)) eps)) (+ eps (/ eps (- -1.0 eps)))) eps)) (- (/ 1.0 (+ 1.0 eps)) (- 1.0 (/ eps (- -1.0 eps))))))",
    "output_parens": 34,
    "avg_bits_err_input": 58.60424749611224,
    "avg_bits_err_output": 50.557811840676294,
    "avg_bits_err_improve": 8.046435655435943,
    "time": 18352.4755859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (- 1.0 (/ 1.0 (/ (tan x) x))) x)",
    "output_parens": 5,
    "avg_bits_err_input": 59.92112891366323,
    "avg_bits_err_output": 59.914398191829235,
    "avg_bits_err_improve": 0.006730721833996256,
    "time": 29035.827880859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.140743792295865,
    "avg_bits_err_output": 28.721120210688692,
    "avg_bits_err_improve": 31.419623581607173,
    "time": 27755.060302734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.01706065155699,
    "avg_bits_err_output": 0.3081462406251803,
    "avg_bits_err_improve": 40.70891441093181,
    "time": 4170.706298828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.7997733144941,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.7991483144941,
    "time": 2898.58447265625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.25061422360539,
    "avg_bits_err_output": 0.021366638851527356,
    "avg_bits_err_improve": 29.22924758475386,
    "time": 5070.58154296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (exp x) 2.0) 0.0) (if (!= (/ (- 1.0 (/ 2.0 (exp x))) (- (exp x) 2.0)) 0.0) (/ (fma (/ (- 1.0 (/ 2.0 (exp x))) (- (exp x) 2.0)) (/ (- 1.0 (/ 2.0 (exp x))) (- (exp x) 2.0)) (/ (/ (- 1.0 (/ 2.0 (exp x))) (/ 1.0 (- (exp x) 2.0))) (- (exp x) 2.0))) (/ (- 1.0 (/ 2.0 (exp x))) (- (exp x) 2.0))) (/ (+ (pow (- 2.0 (exp x)) 2.0) (- 1.0 (/ 2.0 (exp x)))) (- (exp x) 2.0))) (- (exp (- x)) (- 2.0 (exp x))))",
    "output_parens": 57,
    "avg_bits_err_input": 29.786134354770688,
    "avg_bits_err_output": 29.18702235931595,
    "avg_bits_err_improve": 0.5991119954547379,
    "time": 22460.3681640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (if (!= (/ -1.0 (* (+ x -1.0) (- 1.0 x))) 0.0) (/ (fma (/ -1.0 (* (+ x -1.0) (- 1.0 x))) (/ -1.0 (* (+ x -1.0) (- 1.0 x))) (* (/ (+ (- (/ -0.5 (+ 1.0 x)) (/ -1.0 x)) (- (/ -0.5 (+ 1.0 x)) (/ -1.0 x))) (- 1.0 x)) (/ -1.0 (* (+ x -1.0) (- 1.0 x))))) (/ -1.0 (* (+ x -1.0) (- 1.0 x)))) (/ (+ (- (/ -0.5 (+ 1.0 x)) (/ -1.0 x)) (+ (- (/ -0.5 (+ 1.0 x)) (/ -1.0 x)) (/ -1.0 (+ x -1.0)))) (- 1.0 x))) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 64,
    "avg_bits_err_input": 9.997585651399895,
    "avg_bits_err_output": 9.996917235201101,
    "avg_bits_err_improve": 0.0006684161987937642,
    "time": 26267.315673828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (+ (tan (+ x eps)) 1.0) 0.0) (/ (+ (fma (- -1.0 (tan (+ x eps))) (tan x) (* (+ (tan (+ x eps)) 1.0) (tan x))) (* (+ (tan (+ x eps)) 1.0) (- (tan (+ x eps)) (tan x)))) (+ (tan (+ x eps)) 1.0)) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 32,
    "avg_bits_err_input": 36.81786670156528,
    "avg_bits_err_output": 36.86946226868223,
    "avg_bits_err_improve": -0.051595567116947905,
    "time": 21741.0576171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.252629808651058,
    "avg_bits_err_output": 0.1657548875021634,
    "avg_bits_err_improve": 30.086874921148894,
    "time": 12031.6318359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin eps) (cos x) (* (sin x) (cos eps))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 36.32264449718903,
    "avg_bits_err_output": 21.695786038658753,
    "avg_bits_err_improve": 14.626858458530279,
    "time": 22226.405517578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (!= (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (- x -1.0)))) 0.0) (/ (if (!= (/ -1.0 (+ 1.0 x)) 0.0) (/ (fma (/ 1.0 x) (/ -1.0 (+ 1.0 x)) (pow (/ -1.0 (+ 1.0 x)) 2.0)) (/ -1.0 (+ 1.0 x))) (+ (/ -1.0 (+ 1.0 x)) (/ 1.0 x))) (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (- x -1.0))))) (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (- x -1.0)))))",
    "output_parens": 39,
    "avg_bits_err_input": 19.81417387830634,
    "avg_bits_err_output": 19.82700375035926,
    "avg_bits_err_improve": -0.012829872052918745,
    "time": 17680.524169921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (if (!= (* (atan (+ 1.0 N)) (/ (atan (+ 1.0 N)) (+ (atan N) (atan (+ 1.0 N))))) 0.0) (/ (- (* (* (atan (+ 1.0 N)) (/ (atan (+ 1.0 N)) (+ (atan N) (atan (+ 1.0 N))))) (* (atan (+ 1.0 N)) (/ (atan (+ 1.0 N)) (+ (atan N) (atan (+ 1.0 N)))))) (* (* (atan N) (/ (atan N) (+ (atan N) (atan (+ 1.0 N))))) (* (atan (+ 1.0 N)) (/ (atan (+ 1.0 N)) (+ (atan N) (atan (+ 1.0 N))))))) (* (atan (+ 1.0 N)) (/ (atan (+ 1.0 N)) (+ (atan N) (atan (+ 1.0 N)))))) (/ (- (* (atan (+ 1.0 N)) (atan (+ 1.0 N))) (* (atan N) (atan N))) (+ (atan N) (atan (+ 1.0 N))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 88,
    "avg_bits_err_input": 15.39863673234765,
    "avg_bits_err_output": 15.41524783871605,
    "avg_bits_err_improve": -0.016611106368399575,
    "time": 15467.724365234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.97896328006593,
    "avg_bits_err_output": 1.323217114623692,
    "avg_bits_err_improve": 28.65574616544224,
    "time": 24050.67236328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (* (- m (* m m)) (- 1.0 m)) v) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07897149133190084,
    "avg_bits_err_output": 0.07709802575000786,
    "avg_bits_err_improve": 0.001873465581892983,
    "time": 11386.664794921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b a) (/ (/ -1.0 a) b))",
    "output_parens": 4,
    "avg_bits_err_input": 15.903204116975754,
    "avg_bits_err_output": 0.27453018612510155,
    "avg_bits_err_improve": 15.628673930850653,
    "time": 11773.026123046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (if (!= PI 0.0) (/ (* (/ angle 180.0) (* PI PI)) PI) (* PI (/ angle 180.0))))) 2.0))",
    "output_parens": 17,
    "avg_bits_err_input": 20.387206927066792,
    "avg_bits_err_output": 20.39251646351804,
    "avg_bits_err_improve": -0.005309536451246544,
    "time": 42740.884521484375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* angle (/ PI 180.0))) (- (* (cos (* PI (/ angle -360.0))) (cos (* PI (/ angle -360.0)))) (* (- (sin (* angle (/ PI 360.0)))) (cos (+ (* PI (/ angle 360.0)) (/ PI 2.0)))))))",
    "output_parens": 27,
    "avg_bits_err_input": 30.9352262690336,
    "avg_bits_err_output": 31.11714509188282,
    "avg_bits_err_improve": -0.18191882284921945,
    "time": 36906.484130859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (- (- (* angle (/ PI 180.0)) -1.0) 1.0))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.48632514778673,
    "avg_bits_err_output": 20.507097740944975,
    "avg_bits_err_improve": -0.0207725931582452,
    "time": 39711.657958984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.18276502308887604,
    "avg_bits_err_output": 0.18223379506936926,
    "avg_bits_err_improve": 0.0005312280195067798,
    "time": 19511.592529296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (+ -1.0 (fma (tan x) (tan x) (fma (tan x) (tan x) -1.0))) (* (fma (tan x) (tan x) 1.0) -2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 0.3224571174867323,
    "avg_bits_err_output": 0.309906725064659,
    "avg_bits_err_improve": 0.012550392422073287,
    "time": 20589.55810546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (sin v) (+ (* (cos v) e) 1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13652124062518028,
    "avg_bits_err_output": 0.1335212406251803,
    "avg_bits_err_improve": 0.002999999999999975,
    "time": 15480.949951171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos (- lambda1 lambda2)) (* (cos phi1) (cos phi2)) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.75292398859684,
    "avg_bits_err_output": 16.75184946268735,
    "avg_bits_err_improve": 0.0010745259094910864,
    "time": 36931.37744140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c 4.0) (- (- b) (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 52.74444090573376,
    "avg_bits_err_output": 0.16987293281619592,
    "avg_bits_err_improve": 52.57456797291756,
    "time": 30015.66259765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.281940080108033,
    "avg_bits_err_output": 0.3334725578234075,
    "avg_bits_err_improve": 27.948467522284623,
    "time": 28857.4521484375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 44.09986219561546,
    "avg_bits_err_output": 0.24138986601907214,
    "avg_bits_err_improve": 43.85847232959639,
    "time": 29714.2373046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.37159669082678,
    "avg_bits_err_output": 21.960502374391897,
    "avg_bits_err_improve": 12.41109431643488,
    "time": 22580.68994140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)) 0.0) (/ (pow (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)) 2.0) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1))) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 30,
    "avg_bits_err_input": 0.9558991854781022,
    "avg_bits_err_output": 0.9577173648606498,
    "avg_bits_err_improve": -0.001818179382547691,
    "time": 29239.539306640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (<= (* -2.0 x) 0.001) (- (/ (expm1 (* -2.0 x)) (exp (log1p (exp (* -2.0 x)))))) (if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (/ (+ -1.0 (/ 4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0))) (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0)))",
    "output_parens": 35,
    "avg_bits_err_input": 30.090555670984433,
    "avg_bits_err_output": 0.023405222140072554,
    "avg_bits_err_improve": 30.06715044884436,
    "time": 16334.26318359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= x -5.0) (/ (- (exp (+ x x)) (exp (fma x -1.0 x))) (+ (pow (exp x) 2.0) (exp (fma x -1.0 x)))) (/ (if (!= (pow (exp x) -2.0) 0.0) (/ (- (expm1 (* x -4.0))) (pow (exp x) -2.0)) (- (exp (+ x x)) (pow (exp x) -2.0))) (pow (+ (exp x) (exp (- x))) 2.0)))",
    "output_parens": 34,
    "avg_bits_err_input": 58.27648372474449,
    "avg_bits_err_output": 0.6678116546917372,
    "avg_bits_err_improve": 57.60867207005275,
    "time": 19758.552734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.126209404233144,
    "avg_bits_err_output": 0.049875,
    "avg_bits_err_improve": 58.076334404233144,
    "time": 8769.452392578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.015559970711631062,
    "avg_bits_err_output": 0.015559970711631062,
    "avg_bits_err_improve": 0,
    "time": 2224.167724609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.17,
    "avg_bits_err_output": 32.17,
    "avg_bits_err_improve": 0,
    "time": 5489.19873046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (if (!= (/ x (- 1.0 x)) 0.0) (/ (* (/ (- -1.0 x) (+ x -1.0)) (/ x (- 1.0 x))) (/ x (- 1.0 x))) (/ (- -1.0 x) (+ x -1.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 58.59154683982613,
    "avg_bits_err_output": 58.5949883178833,
    "avg_bits_err_improve": -0.0034414780571694337,
    "time": 23904.626708984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.027521240625180292,
    "avg_bits_err_output": 0.027521240625180292,
    "avg_bits_err_improve": 0,
    "time": 2894.457275390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (- (exp (log1p (cos (atan (/ eh (* ew (tan t))))))) 1.0)) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.12882312031259016,
    "avg_bits_err_output": 0.13076184218813103,
    "avg_bits_err_improve": -0.0019387218755408664,
    "time": 23384.00439453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (expm1 (log1p (cos (atan (* eh (/ (tan (- t)) ew))))))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.1260212406251803,
    "avg_bits_err_output": 0.12811560156295076,
    "avg_bits_err_improve": -0.002094360937770462,
    "time": 24531.89599609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0))) (* (- lambda1 lambda2) (* (sin (/ phi1 2.0)) (sin (/ phi2 -2.0))))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 38.80015680612026,
    "avg_bits_err_output": 0.1250544732452173,
    "avg_bits_err_improve": 38.67510233287505,
    "time": 29328.046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.633290516393384,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 14.625415516393383,
    "time": 6975.2783203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (+ (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (sin phi1)))))))",
    "output_parens": 47,
    "avg_bits_err_input": 0.1623259767667463,
    "avg_bits_err_output": 0.16736049471439182,
    "avg_bits_err_improve": -0.005034517947645534,
    "time": 49842.197509765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.72143720535621,
    "avg_bits_err_output": 0.172696053128786,
    "avg_bits_err_improve": 52.54874115222742,
    "time": 22433.458251953125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.434287850800708,
    "avg_bits_err_output": 0.3391661672011122,
    "avg_bits_err_improve": 28.095121683599594,
    "time": 33109.455810546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 44.163788074526806,
    "avg_bits_err_output": 0.23965394844570276,
    "avg_bits_err_improve": 43.92413412608111,
    "time": 37969.13525390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 34.420186962105916,
    "avg_bits_err_output": 21.973361557980645,
    "avg_bits_err_improve": 12.44682540412527,
    "time": 24290.1337890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (expm1 (log1p (* (cos (- lambda1 lambda2)) (sin phi1)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.414988571793534,
    "avg_bits_err_output": 13.421327227224468,
    "avg_bits_err_improve": -0.006338655430933926,
    "time": 35414.595703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (if (!= (+ (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0))) 0.0) (/ (- (/ (* x (/ x (+ x 1.0))) (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0))) (+ (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0)))) (- (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0)))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 33,
    "avg_bits_err_input": 29.565583672812078,
    "avg_bits_err_output": 25.107526543404575,
    "avg_bits_err_improve": 4.4580571294075035,
    "time": 19391.035400390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ (/ (/ 2.0 (+ x -1.0)) (+ x -1.0)) (/ 2.0 (+ x -1.0))) (/ x (+ x 1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012125,
    "avg_bits_err_output": 0.012948120312590145,
    "avg_bits_err_improve": -0.0008231203125901448,
    "time": 7118.406005859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (if (!= (/ 1.0 (+ -1.0 x)) 0.0) (/ (* (/ 1.0 (+ -1.0 x)) (+ (/ 1.0 (+ -1.0 x)) (+ -1.0 (/ x (+ -1.0 x))))) (/ -1.0 (+ -1.0 x))) (- 1.0 (/ (- -1.0 x) (- 1.0 x)))) (+ 1.0 x))",
    "output_parens": 22,
    "avg_bits_err_input": 14.508512973173719,
    "avg_bits_err_output": 12.585129756468536,
    "avg_bits_err_improve": 1.923383216705183,
    "time": 21993.23974609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -5e-310) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* F -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt F) (sqrt (* (- (pow B 2.0) (* A (* C 4.0))) -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 46,
    "avg_bits_err_input": 52.25923150834944,
    "avg_bits_err_output": 46.970166888182504,
    "avg_bits_err_improve": 5.289064620166933,
    "time": 41932.3154296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) -0.5) (/ (* (atan (/ (- (- C (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) A) B)) 180.0) PI) (if (<= (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) 1.0) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (* (pow (- A C) 2.0) 0.0) (pow B 2.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (- C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) PI)) (/ (* (atan (/ (if (!= C 0.0) (- (/ (* C (- C (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) C) (* A (/ C C))) (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) B)) 180.0) PI)))",
    "output_parens": 93,
    "avg_bits_err_input": 28.93617685401632,
    "avg_bits_err_output": 25.364867240540867,
    "avg_bits_err_improve": 3.571309613475453,
    "time": 24446.303466796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -7e-289) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 F)))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* 2.0 F))) (/ (sqrt (+ C (+ (if (!= (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) 0.0) (/ 2.0 (/ 2.0 (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) A))) (- (* C (* 4.0 A)) (pow B 2.0)))))",
    "output_parens": 61,
    "avg_bits_err_input": 52.02030090309533,
    "avg_bits_err_output": 46.41878719801237,
    "avg_bits_err_improve": 5.601513705082965,
    "time": 59102.0078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.826817317709503,
    "avg_bits_err_output": 15.826817317709503,
    "avg_bits_err_improve": 0,
    "time": 18890.91064453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-262) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) (- g)) 0.0) (* h (/ h (- (- g) (sqrt (fma g g (* h (- h))))))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 69,
    "avg_bits_err_input": 36.579882857277,
    "avg_bits_err_output": 5.466808948919107,
    "avg_bits_err_improve": 31.11307390835789,
    "time": 36555.80615234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) 3.0))) (* (sin (expm1 (log1p (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.9890996250072126,
    "avg_bits_err_output": 0.02102124062518029,
    "avg_bits_err_improve": 0.9680783843820323,
    "time": 23578.5166015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log (+ 1.0 (expm1 (/ (exp a) (+ (exp a) (exp b))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5879777323043995,
    "avg_bits_err_output": 0.683161113109899,
    "avg_bits_err_improve": -0.09518338080549948,
    "time": 4943.4736328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (* a1 a2) (- INFINITY)) (* a2 (/ (/ a1 b2) b1)) (if (<= (* a1 a2) -2e-234) (/ (/ (* a1 a2) b2) b1) (if (<= (* a1 a2) 0.0) (* a2 (/ (/ a1 b2) b1)) (if (<= (* a1 a2) 2e-130) (/ (* a1 (/ a2 b1)) b2) (if (<= (* a1 a2) 5e-96) (* a2 (/ (/ a1 b2) b1)) (if (<= (* a1 a2) 2e+202) (/ (/ (* a1 a2) b2) b1) (* a2 (/ (/ a1 b2) b1))))))))",
    "output_parens": 40,
    "avg_bits_err_input": 10.981464548096051,
    "avg_bits_err_output": 5.524768965686416,
    "avg_bits_err_improve": 5.456695582409635,
    "time": 13010.38330078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4043473413791487,
    "avg_bits_err_output": 0.365875,
    "avg_bits_err_improve": 0.03847234137914868,
    "time": 9140.22119140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 1e-5) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 50.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.552911619301796,
    "avg_bits_err_output": 0.2063357181898717,
    "avg_bits_err_improve": 53.346575901111926,
    "time": 14266.776123046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.661859374034152,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.661859374034152,
    "time": 2627.98779296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (if (!= (/ x (+ 1.0 x)) 0.0) (/ (/ (* (/ (- (* x x) x) (+ x 1.0)) -2.0) (- x (- -2.0 x))) (/ x (+ 1.0 x))) (/ (- 1.0 x) (+ 1.0 x))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.01375,
    "avg_bits_err_output": 0.01775,
    "avg_bits_err_improve": -0.003999999999999998,
    "time": 9500.66552734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1591.9033203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (- (+ 3.0 (/ 2.0 (* r r))) (* (* (* r w) (* r w)) (/ (* 0.125 (- 3.0 (* 2.0 v))) (- 1.0 v)))) 4.5)",
    "output_parens": 14,
    "avg_bits_err_input": 12.788903629004727,
    "avg_bits_err_output": 0.3657531968856375,
    "avg_bits_err_improve": 12.423150432119089,
    "time": 22010.49169921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (* x1 -6.0)) (+ (* (* x1 x1) (* (/ (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) (* (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (/ (* x1 2.0) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0))))))) (+ x1 x1)))",
    "output_parens": 51,
    "avg_bits_err_input": 0.505693749776676,
    "avg_bits_err_output": 0.24888451237056503,
    "avg_bits_err_improve": 0.256809237406111,
    "time": 77060.20947265625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) 0.0) (* (/ (- v) (+ t1 u)) (/ t1 (+ t1 u))) (if (<= (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) 2e+249) (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) (* (/ (- v) (+ t1 u)) (/ t1 (+ t1 u)))))",
    "output_parens": 34,
    "avg_bits_err_input": 18.173742226920712,
    "avg_bits_err_output": 1.1495708359096988,
    "avg_bits_err_improve": 17.024171391011013,
    "time": 7068.4384765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.262886842188131,
    "avg_bits_err_output": 0.262886842188131,
    "avg_bits_err_improve": 0,
    "time": 7881.62255859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0025,
    "avg_bits_err_output": 0.0025,
    "avg_bits_err_improve": 0,
    "time": 2394.029296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ (- (/ PI a) (/ PI b)) 2.0) (- b a)) (+ b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.359633506226235,
    "avg_bits_err_output": 0.2722771664573776,
    "avg_bits_err_improve": 14.087356339768856,
    "time": 18152.456298828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (/ (/ 1.0 eps) (exp (* x (+ 1.0 eps))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.37776484209796,
    "avg_bits_err_output": 24.79228674511157,
    "avg_bits_err_improve": 4.585478096986389,
    "time": 15818.578369140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.020875,
    "avg_bits_err_output": 0.020875,
    "avg_bits_err_improve": 0,
    "time": 4370.327880859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.022125,
    "avg_bits_err_output": 0.022125,
    "avg_bits_err_improve": 0,
    "time": 10339.53759765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (+ 2.0 (/ (* t (/ (* t 4.0) (+ t 1.0))) (+ t 1.0))) 1.0) (+ 2.0 (/ (* t (/ (* t 4.0) (+ t 1.0))) (+ t 1.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.02375,
    "avg_bits_err_output": 0.035375,
    "avg_bits_err_improve": -0.011624999999999996,
    "time": 12253.76611328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3208.864990234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8748.7607421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 3257.209228515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.825823433141715,
    "avg_bits_err_output": 0.244,
    "avg_bits_err_improve": 7.581823433141715,
    "time": 34972.082763671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.3515319460888335,
    "avg_bits_err_output": 7.3515319460888335,
    "avg_bits_err_improve": 0,
    "time": 18144.65185546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.847349048417943,
    "avg_bits_err_output": 0.026304987040730185,
    "avg_bits_err_improve": 15.821044061377213,
    "time": 12128.79052734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (pow (pow (exp 10.0) x) x) (if (!= (- -2.0 (cos x)) 0.0) (/ (+ -1.0 (+ (cos x) (+ 1.0 (+ (cos x) (pow (cos x) 2.0))))) (+ (cos x) 2.0)) (cos x)))",
    "output_parens": 20,
    "avg_bits_err_input": 3.5123727756933536,
    "avg_bits_err_output": 1.2909595960382376,
    "avg_bits_err_improve": 2.2214131796551158,
    "time": 20046.39306640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 15.166612181515402,
    "avg_bits_err_output": 15.166612181515402,
    "avg_bits_err_improve": 0,
    "time": 13670.401611328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.42165213534209,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.42165213534209,
    "time": 4630.28955078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.114711767779134,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 39.114336767779136,
    "time": 4029.555419921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.302375,
    "avg_bits_err_improve": 63.697625,
    "time": 20979.26220703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ (* t 1.6e-47) 4e-16) t)",
    "output_parens": 3,
    "avg_bits_err_input": 61.843254462246236,
    "avg_bits_err_output": 0.3531462406251803,
    "avg_bits_err_improve": 61.49010822162106,
    "time": 16609.556396484375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* 4.0 a)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.77893227627691,
    "avg_bits_err_output": 21.78266025233017,
    "avg_bits_err_improve": 11.99627202394674,
    "time": 27380.84326171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.37159669082678,
    "avg_bits_err_output": 21.960502374391897,
    "avg_bits_err_improve": 12.41109431643488,
    "time": 26716.12646484375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2495.446044921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.22072273549194,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 40.21109773549194,
    "time": 4705.21337890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- (* x x) (* y y)) (fma x x (* y y)))",
    "output_parens": 6,
    "avg_bits_err_input": 20.40656451780972,
    "avg_bits_err_output": 20.409472600623033,
    "avg_bits_err_improve": -0.0029080828133132286,
    "time": 6033.4970703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.671258470053417,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.671258470053417,
    "time": 6878.647216796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04025,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.03925,
    "time": 7151.303955078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ a b)) (* a (+ a b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021219360937770434,
    "avg_bits_err_output": 0.0145,
    "avg_bits_err_improve": 0.006719360937770433,
    "time": 4811.71337890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x (* x x) (* x x))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.01475,
    "avg_bits_err_improve": -0.0002499999999999985,
    "time": 3867.852294921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0,
    "time": 1885.609130859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39365357187842565,
    "avg_bits_err_output": 0.245875,
    "avg_bits_err_improve": 0.14777857187842564,
    "time": 6174.377685546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (pow (cos x) 2.0) 0.0) (/ (exp (* 1.0 (log (- (pow (cos x) 2.0) (pow (cos x) 4.0))))) (pow (cos x) 2.0)) (- 1.0 (pow (cos x) 2.0))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 27,
    "avg_bits_err_input": 30.024454308598948,
    "avg_bits_err_output": 30.025366138273174,
    "avg_bits_err_improve": -0.0009118296742265386,
    "time": 14537.58251953125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (if (!= (sqrt (- (* x x) eps)) 0.0) (/ (- (* x (+ x (sqrt (- (* x x) eps)))) eps) (sqrt (- (* x x) eps))) (+ x (sqrt (- (* x x) eps))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 30,
    "avg_bits_err_input": 24.370254713542884,
    "avg_bits_err_output": 0.06881860937770429,
    "avg_bits_err_improve": 24.30143610416518,
    "time": 13340.2216796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(+ (+ 1.0 (/ (- x (sin x)) (tan x))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.915080730161787,
    "avg_bits_err_output": 29.929772717473128,
    "avg_bits_err_improve": -0.014691987311341137,
    "time": 35043.703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007875,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.007375,
    "time": 2599.512939453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 5e-271) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (!= (/ 100.0 (/ i n)) 0.0) (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ 20000.0 (* (/ i n) (* (/ i n) (/ -200.0 (/ i n)))))) (/ (fma (pow (+ (/ i n) 1.0) n) 100.0 -100.0) (/ i n))))",
    "output_parens": 37,
    "avg_bits_err_input": 48.219958908061635,
    "avg_bits_err_output": 14.106738164657683,
    "avg_bits_err_improve": 34.11322074340395,
    "time": 28528.838134765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.993224218479938,
    "avg_bits_err_output": 22.631078622349435,
    "avg_bits_err_improve": 3.362145596130503,
    "time": 14912.75634765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (if (!= (/ (* c b) (- (fma d d (* c c)))) 0.0) (/ 1.0 (/ (/ 1.0 b) (/ c (fma d d (* c c))))) (* c (/ b (fma d d (* c c))))) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 22,
    "avg_bits_err_input": 25.82646100911031,
    "avg_bits_err_output": 22.983417115947535,
    "avg_bits_err_improve": 2.8430438931627755,
    "time": 20491.587890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- 1.0 ux) (* ux maxCos))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037375,
    "avg_bits_err_output": 0.037375,
    "avg_bits_err_improve": 0,
    "time": 5507.785400390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.446977237234336,
    "avg_bits_err_output": 11.97675943899962,
    "avg_bits_err_improve": 1.4702177982347155,
    "time": 27779.749755859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) (+ ux -1.0)))))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.488496597821669,
    "avg_bits_err_output": 12.308265280860878,
    "avg_bits_err_improve": 1.180231316960791,
    "time": 23366.708251953125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) xi) (fma (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (- maxCos (* ux maxCos)) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.33099399119083023,
    "avg_bits_err_output": 0.31937430307390785,
    "avg_bits_err_improve": 0.011619688116922378,
    "time": 54089.123291015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax)))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.20555927976382687,
    "avg_bits_err_output": 0.20555927976382687,
    "avg_bits_err_improve": 0,
    "time": 28174.692138671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5456668669841892,
    "avg_bits_err_output": 0.5456668669841892,
    "avg_bits_err_improve": 0,
    "time": 19809.886962890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (+ (+ (cos (log (+ 1.0 (expm1 (* 6.28318530718 u2))))) -1.0) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.3175356435446397,
    "avg_bits_err_output": 0.323997782446344,
    "avg_bits_err_improve": -0.006462138901704273,
    "time": 23994.53125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (/ (/ (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0) (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s)))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 88,
    "avg_bits_err_input": 0.3393021149501038,
    "avg_bits_err_output": 0.3398731298194365,
    "avg_bits_err_improve": -0.0005710148693326977,
    "time": 73295.162109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(expm1 (log1p (/ 1.0 (+ (exp (/ x (- s))) 1.0))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.06095025814003622,
    "avg_bits_err_output": 0.06608014564219965,
    "avg_bits_err_improve": -0.0051298875021634285,
    "time": 13360.201416015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (+ (exp (/ (fabs x) (- s))) 1.0)) (fma s (exp (/ (fabs x) (- s))) s))",
    "output_parens": 16,
    "avg_bits_err_input": 0.13555194388532374,
    "avg_bits_err_output": 0.11540209042482251,
    "avg_bits_err_improve": 0.02014985346050123,
    "time": 20169.51611328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6725417830419382,
    "avg_bits_err_output": 0.6725417830419382,
    "avg_bits_err_improve": 0,
    "time": 22926.8505859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (if (!= (* (exp (/ -2.0 v)) (+ u -1.0)) 0.0) (/ 1.0 (/ (exp (- (/ -2.0 v))) (- 1.0 u))) (* (- 1.0 u) (exp (/ -2.0 v))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1565655748760634,
    "avg_bits_err_output": 0.18336736952167215,
    "avg_bits_err_improve": -0.02680179464560875,
    "time": 19492.928466796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (+ (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) (+ (fma (/ (- sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) sinTheta_O (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) (fma (/ (- sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) sinTheta_O (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))))",
    "output_parens": 34,
    "avg_bits_err_input": 2.5370615514369237,
    "avg_bits_err_output": 2.5354193634964544,
    "avg_bits_err_improve": 0.0016421879404693307,
    "time": 32937.570556640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ 1.0 v) (* (/ (/ 0.5 v) (sinh (/ 1.0 v))) (/ cosTheta_i (exp (* sinTheta_i (/ sinTheta_O v)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4635854936640751,
    "avg_bits_err_output": 0.3640541445536784,
    "avg_bits_err_improve": 0.09953134911039668,
    "time": 28716.37451171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.12413746575755602,
    "avg_bits_err_output": 0.0908829164659922,
    "avg_bits_err_improve": 0.03325454929156382,
    "time": 22320.58935546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (/ (/ (- 1.0 (* alpha alpha)) (log (* alpha alpha))) PI)) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.45308520440294736,
    "avg_bits_err_output": 0.4699264112222977,
    "avg_bits_err_improve": -0.016841206819350363,
    "time": 23792.175048828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(if (!= (* s (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0))) 0.0) (/ 1.0 (- (/ (/ 0.1111111111111111 (* (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) s)) 0.3333333333333333) 0.0)) (* s (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 1.3284716984949052,
    "avg_bits_err_output": 1.2797622629660992,
    "avg_bits_err_improve": 0.04870943552880602,
    "time": 30248.8232421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (if (!= (+ (log (/ 1.0 (+ 1.0 (* u -4.0)))) 2.0) 0.0) (/ (+ -1.0 (exp (* (log1p (log (/ 1.0 (+ 1.0 (* u -4.0))))) 2.0))) (+ (* (+ 1.0 (log (/ 1.0 (fma u -4.0 1.0)))) (+ 1.0 (/ -1.0 (+ 1.0 (log (/ 1.0 (fma u -4.0 1.0))))))) 2.0)) (log (/ 1.0 (+ 1.0 (* u -4.0))))))",
    "output_parens": 33,
    "avg_bits_err_input": 12.48234462060713,
    "avg_bits_err_output": 12.522933127663302,
    "avg_bits_err_improve": -0.040588507056172674,
    "time": 24709.052978515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (/ (* (exp (/ (* r -0.3333333333333333) s)) (/ 0.125 r)) PI) s))",
    "output_parens": 16,
    "avg_bits_err_input": 0.14111506861303263,
    "avg_bits_err_output": 0.1590554299620071,
    "avg_bits_err_improve": -0.017940361348974476,
    "time": 27286.508056640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (* (sin (- normAngle (* u normAngle))) (/ 1.0 (sin normAngle))) n0_i) (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 13,
    "avg_bits_err_input": 0.9105841127247802,
    "avg_bits_err_output": 0.867566071354437,
    "avg_bits_err_improve": 0.04301804137034326,
    "time": 27895.993896484375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (pow (- (- 1.0 cosTheta) cosTheta) 0.5) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6943907046587724,
    "avg_bits_err_output": 0.4689383628127147,
    "avg_bits_err_improve": 0.22545234184605767,
    "time": 23499.05029296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (pow (log1p (- u1)) 2.0) 0.25) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.523444399449476,
    "avg_bits_err_output": 0.5415152720929878,
    "avg_bits_err_improve": 12.981929127356487,
    "time": 20678.57861328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(fma (sqrt (- (log1p (- u1)))) (* 2.0 (cos (* 2.0 (* PI u2)))) (* (sqrt (- (log1p (- u1)))) (- (cos (* 2.0 (* PI u2))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.569321538697196,
    "avg_bits_err_output": 0.35262879686747023,
    "avg_bits_err_improve": 13.216692741829725,
    "time": 20350.452392578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* (- alpha) alpha) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.36378234277145,
    "avg_bits_err_output": 0.3202430453140324,
    "avg_bits_err_improve": 14.043539297457418,
    "time": 12419.50537109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ (/ cos2phi alphax) (- alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.555894410737363,
    "avg_bits_err_output": 0.517972693097874,
    "avg_bits_err_improve": 12.037921717639488,
    "time": 14485.825927734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -5e+157) (- (* PI l) (/ (tan (* PI l)) (* F F))) (if (<= (* PI l) -5e+14) (- (* PI l) (/ (* (/ 1.0 F) (tan (if (!= (+ 1.0 (+ (* PI l) 1.0)) 0.0) (/ (- (* (+ (* PI l) 1.0) (+ (* PI l) 1.0)) 1.0) (+ 1.0 (+ (log1p (expm1 (* PI l))) 1.0))) (* PI l)))) F)) (if (<= (* PI l) 5e-7) (- (* PI l) (* (/ (tan (* PI l)) F) (/ 1.0 F))) (if (<= (* PI l) 2e+142) (- (* PI l) (/ (* (/ 1.0 F) (tan (if (!= (+ 1.0 (+ (* PI l) 1.0)) 0.0) (/ (- (* (+ (* PI l) 1.0) (+ (* PI l) 1.0)) 1.0) (+ 1.0 (+ (log1p (expm1 (* PI l))) 1.0))) (* PI l)))) F)) (if (!= (/ (tan (* PI l)) (* F F)) 0.0) (- (* (tan (* PI l)) (* PI (/ l (tan (* PI l))))) (/ 2.0 (/ 2.0 (/ (tan (* PI l)) (* F F))))) (- (* PI l) (/ (tan (* PI l)) (* F F))))))))",
    "output_parens": 99,
    "avg_bits_err_input": 15.773801323529252,
    "avg_bits_err_output": 5.72933479424744,
    "avg_bits_err_improve": 10.044466529281813,
    "time": 25215.663330078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21324615082787057,
    "avg_bits_err_output": 0.15438054926491981,
    "avg_bits_err_improve": 0.05886560156295076,
    "time": 15743.625244140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.305414975164256,
    "avg_bits_err_output": 10.04198722875009,
    "avg_bits_err_improve": 3.263427746414166,
    "time": 23146.338623046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (expm1 (log1p (/ (+ (exp (* PI (/ f -4.0))) (exp (* PI (/ f 4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (* (/ f -4.0) 2.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))))) (/ PI -4.0))",
    "output_parens": 34,
    "avg_bits_err_input": 61.495448534344035,
    "avg_bits_err_output": 1.8730521617390652,
    "avg_bits_err_improve": 59.62239637260497,
    "time": 59746.619140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= x -2e+16) (/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (+ x 1.0) (+ -1.0 x)) (* 2.0 (* t t))) (* l (* l (- -1.0 (/ (- -1.0 x) (+ x -1.0)))))))) (/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (+ x 1.0) (+ -1.0 x)) (* 2.0 (* t t))) (* (* l l) (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0))))))))",
    "output_parens": 38,
    "avg_bits_err_input": 43.08167959874521,
    "avg_bits_err_output": 34.49163911800176,
    "avg_bits_err_improve": 8.590040480743454,
    "time": 25353.019287109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin ky) (/ (sin th) (hypot (sin ky) (sin kx))))",
    "output_parens": 7,
    "avg_bits_err_input": 3.7811349724727923,
    "avg_bits_err_output": 0.2628353390679985,
    "avg_bits_err_improve": 3.518299633404794,
    "time": 32499.851318359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0) (pow (* (* 2.0 (/ l Om)) (sin kx)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.9849839384753238,
    "avg_bits_err_output": 0.00625,
    "avg_bits_err_improve": 0.9787339384753239,
    "time": 17722.443115234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (/ (* Om (/ Om Omc)) Omc)) (+ 1.0 (* 2.0 (* (/ t l) (/ t l)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.04127081872016,
    "avg_bits_err_output": 10.041395818720158,
    "avg_bits_err_improve": -0.0001249999999988205,
    "time": 20290.41064453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -2e+46) (* (sqrt (* (* 2.0 n) (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- U))) (if (<= U -4e-221) (sqrt (* (* 2.0 n) (* U (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (if (<= U -7.2e-278) (* (sqrt (* n (- (* l (* (/ l Om) 2.0)) (- t (* (pow (/ l Om) 2.0) (* n (- U U*))))))) (sqrt (* U -2.0))) (* (sqrt (* 2.0 (* n (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt U)))))",
    "output_parens": 63,
    "avg_bits_err_input": 34.158295003873945,
    "avg_bits_err_output": 25.998179625734455,
    "avg_bits_err_improve": 8.16011537813949,
    "time": 44929.367431640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -2.9e-89) (/ 2.0 (* (/ k l) (* (/ k t) (* (/ (tan k) l) (/ (* (sin k) (pow t 3.0)) t))))) (if (<= t 9.5e-5) (/ 2.0 (/ (* (* (/ k t) (* (* (sin k) (tan k)) (pow t 3.0))) (/ (/ k t) (fabs l))) (fabs l))) (/ 2.0 (* (/ k l) (* (/ k t) (* (/ (tan k) l) (/ (* (sin k) (pow t 3.0)) t)))))))",
    "output_parens": 42,
    "avg_bits_err_input": 47.94815009988665,
    "avg_bits_err_output": 30.106329276965262,
    "avg_bits_err_improve": 17.841820822921385,
    "time": 47817.36669921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (pow t 3.0) (/ (sin k) l)) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (tan k) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 33.04164693993361,
    "avg_bits_err_output": 27.415355911278173,
    "avg_bits_err_improve": 5.626291028655434,
    "time": 21392.93212890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (fma a1 a1 (* a2 a2)) (sqrt 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5554900406482592,
    "avg_bits_err_output": 0.5059283859565222,
    "avg_bits_err_improve": 0.04956165469173701,
    "time": 21272.849853515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* 2.0 n) (* k -0.5)) (* (pow PI (* k -0.5)) (sqrt (* 2.0 (* PI n))))) (sqrt k))",
    "output_parens": 12,
    "avg_bits_err_input": 0.5035408448820499,
    "avg_bits_err_output": 0.4459627828190811,
    "avg_bits_err_improve": 0.05757806206296878,
    "time": 22318.883544921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (if (!= (* J (+ (exp l) (exp (- l)))) 0.0) (+ (* (* J (/ J J)) (/ (pow (exp l) 2.0) (+ (exp l) (exp (- l))))) (* J (* (exp (* l -2.0)) (/ J (* (- J) (+ (exp l) (exp (- l)))))))) (* (- (exp l) (exp (- l))) J)) (cos (/ K 2.0))) U)",
    "output_parens": 38,
    "avg_bits_err_input": 17.975882678524336,
    "avg_bits_err_output": 18.018913165387488,
    "avg_bits_err_improve": -0.04303048686315236,
    "time": 29063.781005859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= M -5e-97) (* (/ (- (+ (cos (- (* K (/ (+ m n) 2.0)) M)) (if (!= (* (sin 2.0) (sin (- (* K (/ (+ m n) 2.0)) M))) 0.0) (/ (- (* (cos 2.0) (* (cos (- (* K (/ (+ m n) 2.0)) M)) (* (sin 2.0) (sin (- (* K (/ (+ m n) 2.0)) M))))) (* (sin 2.0) (* (sin (- (* K (/ (+ m n) 2.0)) M)) (* (sin 2.0) (sin (- (* K (/ (+ m n) 2.0)) M)))))) (* (sin 2.0) (sin (- (* K (/ (+ m n) 2.0)) M)))) (cos (+ 2.0 (- (* K (/ (+ m n) 2.0)) M))))) (+ (cos (+ 2.0 (- (* K (/ (+ m n) 2.0)) M))) (sin (- (* K (/ (+ m n) 2.0)) (+ M (/ PI 2.0)))))) 2.0) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (if (<= M 3.7e-109) (* (cos (if (!= M 0.0) (/ (if (!= (* M M) 0.0) (/ (- (* (/ (+ m n) 2.0) (* K (* M (* M M)))) (pow (- (* M M)) 2.0)) (* M M)) (* M (fma (/ (+ m n) 2.0) K (- M)))) M) (- (* K (/ (+ m n) 2.0)) M))) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (/ (+ (cos (- (* K (/ (+ m n) 2.0)) M)) (sin (- M (/ (- (* K (+ m n)) PI) 2.0)))) 2.0) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))))",
    "output_parens": 154,
    "avg_bits_err_input": 15.11939821613272,
    "avg_bits_err_output": 13.73385364991853,
    "avg_bits_err_improve": 1.3855445662141896,
    "time": 22734.39208984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (sqrt (+ 1.0 (pow (/ (/ U (* 2.0 J)) (cos (/ K 2.0))) 2.0))) (* (cos (/ K 2.0)) -2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 18.053417481250364,
    "avg_bits_err_output": 18.062377443751085,
    "avg_bits_err_improve": -0.00895996250072173,
    "time": 29298.929443359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 5e+149) (* w0 (sqrt (- 1.0 (/ (* (pow (/ (/ (* M D) d) 2.0) 2.0) h) l)))) (if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 2e+266) (* w0 (sqrt (- 1.0 (* (pow (if (!= (/ (* M D) (* d 4.0)) 0.0) (/ (+ (* (/ (* M D) (* d 4.0)) (/ (* M D) (* d 4.0))) (* (/ (* M D) (* d 4.0)) (/ (* M D) (* d 4.0)))) (* (/ M 4.0) (/ D d))) (* D (/ (/ M 2.0) d))) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (* (/ M d) (* D (* (/ D l) (* (/ M (* d 4.0)) h)))))))))",
    "output_parens": 65,
    "avg_bits_err_input": 14.461150724602188,
    "avg_bits_err_output": 8.61700451226537,
    "avg_bits_err_improve": 5.844146212336819,
    "time": 28353.47021484375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -2e+145) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) -5e-141) (* c0 (sqrt (if (!= (/ A (* V l)) 0.0) (* (- A) (/ (+ (/ -1.0 l) 0.0) V)) (/ A (* V l))))) (if (<= (* V l) 0.0) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) 1e+298) (* c0 (sqrt (* (* A (/ l l)) (/ 1.0 (* l V))))) (fma (* c0 (sqrt (/ A l))) (sqrt (/ 1.0 V)) 0.0)))))",
    "output_parens": 54,
    "avg_bits_err_input": 18.365234728141775,
    "avg_bits_err_output": 12.268002423704,
    "avg_bits_err_improve": 6.0972323044377745,
    "time": 23514.1337890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= c0 -7.4e-95) (/ (/ (* c0 (if (!= (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) (+ (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) w) 2.0) (if (<= c0 5e-307) (* (/ c0 (* 2.0 w)) (if (!= (- (/ (* d (* d c0)) (* (* w D) (* h D))) (sqrt (- (pow (/ (* d (* d c0)) (* (* w D) (* h D))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (/ (* d (* d c0)) (* (* w D) (* h D))) (sqrt (- (pow (/ (* d (* d c0)) (* (* w D) (* h D))) 2.0) (* M M))))) (fma d (/ (* d c0) (* (* w D) (* h D))) (sqrt (- (pow (/ (* d (* d c0)) (* (* w D) (* h D))) 2.0) (* M M)))))) (/ (/ (* c0 (if (!= (- (* d (* d (/ (/ (/ c0 D) h) (* D w)))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) h) (* D w)))) 2.0) (* M M)))) 0.0) (/ (- (* M M) 0.0) (- (* d (* d (/ (/ (/ c0 D) h) (* D w)))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) h) (* D w)))) 2.0) (* M M))))) (fma d (* d (/ (/ (/ c0 D) h) (* D w))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) h) (* D w)))) 2.0) (* M M)))))) w) 2.0)))",
    "output_parens": 171,
    "avg_bits_err_input": 59.66478830287663,
    "avg_bits_err_output": 31.04769165151846,
    "avg_bits_err_improve": 28.61709665135817,
    "time": 62333.71630859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d -3.2e-119) (* (* (sqrt (/ d l)) (sqrt (/ d h))) (- 1.0 (/ (* h (pow (* D (/ M (+ d d))) 2.0)) (+ l l)))) (if (<= d -7e-259) (* (fma 0.5 (* h (/ (pow (* M (/ D (* d 2.0))) 2.0) l)) -1.0) (- (* (sqrt (/ (/ d h) (- l))) (sqrt (- d))))) (if (<= d 3.2e-169) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- 1.0 (* h (/ (pow (* M (/ D (+ d d))) 2.0) (+ l l))))) (if (<= d 1.7e+142) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* h (/ (pow (/ (/ (* M D) 2.0) d) 2.0) (+ l l))))) (* (* (sqrt (/ (+ (/ d l) 0.0) h)) (sqrt d)) (- 1.0 (* h (/ (pow (* M (/ D (+ d d))) 2.0) (+ l l)))))))))",
    "output_parens": 81,
    "avg_bits_err_input": 26.39968467194701,
    "avg_bits_err_output": 24.95778449950558,
    "avg_bits_err_improve": 1.4419001724414322,
    "time": 47844.71240234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (/ 0.25 (fma x x 1.0))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 33,
    "avg_bits_err_input": 15.823127177455826,
    "avg_bits_err_output": 15.318318450028857,
    "avg_bits_err_improve": 0.504808727426969,
    "time": 17536.6328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ 4.0 (* PI (* (* (fma v v -1.0) -3.0) (sqrt (- 2.0 (* v (* v 6.0)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9849481203125902,
    "avg_bits_err_output": 0.013615601562950722,
    "avg_bits_err_improve": 0.9713325187496394,
    "time": 6233.520263671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (+ 1.0 (* (* v v) -5.0)) (* PI (sqrt (fma -6.0 (* v v) 2.0)))) (- t (* v (* v t))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45465630542840224,
    "avg_bits_err_output": 0.10719628709925465,
    "avg_bits_err_improve": 0.3474600183291476,
    "time": 22169.066162109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (- (* v (* v (sqrt (- 2.0 (* v (* v 6.0)))))) (sqrt (- 2.0 (* v (* v 6.0))))) -4.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.011594360937770434,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 0.003969360937770434,
    "time": 11706.783447265625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.540316684964843,
    "avg_bits_err_output": 0.540316684964843,
    "avg_bits_err_improve": 0,
    "time": 12780.6669921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.1102546721326263,
    "avg_bits_err_output": 2.0755353111948556,
    "avg_bits_err_improve": 0.03471936093777073,
    "time": 12068.3740234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ (exp (/ (+ mu (- Vef (- Ec EDonor))) KbT)) 1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.01231245750865524,
    "avg_bits_err_output": 0.01231245750865524,
    "avg_bits_err_improve": 0,
    "time": 12681.311767578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (* (* b b) (+ (fma a a (* b b)) (* a a)))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.17756308742908467,
    "avg_bits_err_output": 0.0891429589150604,
    "avg_bits_err_improve": 0.08842012851402427,
    "time": 12075.05224609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (* (* b b) (fma a a (* b b))) (fma a (* a (* b b)) (pow a 4.0))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 20,
    "avg_bits_err_input": 0.18674727088642265,
    "avg_bits_err_output": 0.09809715192164598,
    "avg_bits_err_improve": 0.08865011896477668,
    "time": 20908.340576171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (* (* b b) (+ (fma a a (* b b)) (* a a)))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 18,
    "avg_bits_err_input": 0.19231989481123013,
    "avg_bits_err_output": 0.10505824536899792,
    "avg_bits_err_improve": 0.0872616494422322,
    "time": 27362.022216796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (log (+ 1.0 (expm1 (+ 1.0 (/ x (sqrt (fma x x (* 4.0 (* p p)))))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.608469703750725,
    "avg_bits_err_output": 12.618879046359776,
    "avg_bits_err_improve": -0.010409342609051464,
    "time": 17693.89794921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (/ (/ (expm1 (+ x x)) (expm1 x)) (expm1 x)) (/ 1.0 (expm1 x))))",
    "output_parens": 10,
    "avg_bits_err_input": 41.431867444974664,
    "avg_bits_err_output": 0.059,
    "avg_bits_err_improve": 41.372867444974666,
    "time": 7447.326171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))",
    "output_parens": 8,
    "avg_bits_err_input": 32.18348031684792,
    "avg_bits_err_output": 32.16341684879651,
    "avg_bits_err_improve": 0.02006346805141135,
    "time": 17394.5732421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= a 4.5e-267) (/ (if (!= (+ b_2 (sqrt (+ (* c (- a)) (* b_2 b_2)))) 0.0) (* a (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* a (- c))))))) (- (sqrt (fma b_2 b_2 (* a (- c)))) b_2)) a) (if (<= a 3.5e-149) (if (!= (/ (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2) a) 0.0) (- (/ (* a (/ c a)) (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2)) 0.0) (/ (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2) a)) (/ (if (!= (+ b_2 (sqrt (+ (* c (- a)) (* b_2 b_2)))) 0.0) (* a (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* a (- c))))))) (- (sqrt (fma b_2 b_2 (* a (- c)))) b_2)) a)))",
    "output_parens": 73,
    "avg_bits_err_input": 33.63248713143524,
    "avg_bits_err_output": 21.895750779838522,
    "avg_bits_err_improve": 11.736736351596718,
    "time": 15227.70751953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 33.83693593573938,
    "avg_bits_err_output": 19.537950268119275,
    "avg_bits_err_improve": 14.298985667620109,
    "time": 17452.196044921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) (* (* x (/ 1.0 x)) x))",
    "output_parens": 7,
    "avg_bits_err_input": 30.972926340166577,
    "avg_bits_err_output": 30.210783556565687,
    "avg_bits_err_improve": 0.7621427836008898,
    "time": 19005.626953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (pow x (/ 1.0 n)) 0.0) (+ (/ -1.0 (/ 2.0 (pow x (/ 1.0 n)))) (/ (+ (exp (/ (+ (log1p x) (log x)) n)) (/ (pow x (/ 2.0 n)) -2.0)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 27,
    "avg_bits_err_input": 32.80354560491808,
    "avg_bits_err_output": 32.54952372236848,
    "avg_bits_err_improve": 0.25402188254960123,
    "time": 32070.34521484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (if (!= (+ -1.0 (+ (log1p N) -1.0)) 0.0) (/ (+ (* (+ (log1p N) -1.0) (+ (log1p N) -1.0)) -1.0) (+ -1.0 (+ (log1p N) -1.0))) (log1p N)) (log N))",
    "output_parens": 18,
    "avg_bits_err_input": 29.60636451278117,
    "avg_bits_err_output": 29.62303485319741,
    "avg_bits_err_improve": -0.016670340416240492,
    "time": 13940.052490234375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(if (!= (/ 1.0 (+ x 1.0)) 0.0) (/ (if (!= (pow (/ 1.0 (+ 1.0 x)) 2.0) 0.0) (/ (fma (pow (/ 1.0 (+ 1.0 x)) 2.0) (/ -1.0 (fma x x x)) (pow (/ 1.0 (+ 1.0 x)) 4.0)) (pow (/ 1.0 (+ 1.0 x)) 2.0)) (/ (+ (/ 1.0 (+ 1.0 x)) (/ -1.0 x)) (+ 1.0 x))) (/ 1.0 (+ x 1.0))) (+ (/ -1.0 x) (/ 1.0 (+ x 1.0))))",
    "output_parens": 35,
    "avg_bits_err_input": 14.483121854825036,
    "avg_bits_err_output": 14.419171146246999,
    "avg_bits_err_improve": 0.06395070857803731,
    "time": 17744.8193359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -1.6e-106) (fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps)))) (if (<= x 2e-80) (if (!= (+ (cos x) (cos (+ eps x))) 0.0) (/ (- (pow (sin x) 2.0) (* (sin (+ eps x)) (sin (+ eps x)))) (+ (cos x) (cos (+ eps x)))) (- (cos (+ eps x)) (cos x))) (- (- (* (cos eps) (cos x)) (cos x)) (* (sin x) (sin eps)))))",
    "output_parens": 44,
    "avg_bits_err_input": 39.31030765211852,
    "avg_bits_err_output": 1.9886987474654638,
    "avg_bits_err_improve": 37.321608904653054,
    "time": 23595.748291015625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(exp (* 1.0 (log1p (- (cbrt (+ x 1.0)) (- (cbrt x) -1.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 29.89126835068925,
    "avg_bits_err_output": 29.583609504481004,
    "avg_bits_err_improve": 0.3076588462082448,
    "time": 15325.451171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.11700333397715,
    "avg_bits_err_output": 30.11700333397715,
    "avg_bits_err_improve": 0,
    "time": 22868.98876953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* (* 4.0 (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) a) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.32765323271245,
    "avg_bits_err_output": 22.092133569611132,
    "avg_bits_err_improve": 12.235519663101318,
    "time": 24136.82470703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)))) (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.79028626161961,
    "avg_bits_err_output": 21.685322914031556,
    "avg_bits_err_improve": 12.104963347588058,
    "time": 27008.14892578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(if (!= (/ (log1p (- x)) (log1p x)) 0.0) (/ 1.0 (/ 1.0 (/ (log1p (- x)) (log1p x)))) (/ (log1p (- x)) (log1p x)))",
    "output_parens": 16,
    "avg_bits_err_input": 61.43207225054348,
    "avg_bits_err_output": 0.026224248439933918,
    "avg_bits_err_improve": 61.405848002103546,
    "time": 16282.171630859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00466487177278,
    "avg_bits_err_output": 44.22976739736848,
    "avg_bits_err_improve": 18.774897474404305,
    "time": 15316.938232421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ eps (- -1.0 eps)) (if (!= (+ 1.0 (/ -1.0 (- -1.0 eps))) 0.0) (if (!= (/ (/ 1.0 (pow (- -1.0 eps) 2.0)) (- 1.0 (/ 1.0 (- -1.0 eps)))) 0.0) (/ (- (* (/ (/ 1.0 (pow (- -1.0 eps) 2.0)) (- 1.0 (/ 1.0 (- -1.0 eps)))) (/ 1.0 (- 1.0 (/ 1.0 (- -1.0 eps))))) (* (/ (/ 1.0 (pow (- -1.0 eps) 2.0)) (- 1.0 (/ 1.0 (- -1.0 eps)))) (/ (/ 1.0 (pow (- -1.0 eps) 2.0)) (- 1.0 (/ 1.0 (- -1.0 eps)))))) (/ (/ 1.0 (pow (- -1.0 eps) 2.0)) (- 1.0 (/ 1.0 (- -1.0 eps))))) (/ (+ (/ 2.0 (pow (- -1.0 eps) 2.0)) -2.0) (+ (/ 2.0 (- -1.0 eps)) -2.0))) (+ 1.0 (/ 1.0 (- -1.0 eps))))))",
    "output_parens": 65,
    "avg_bits_err_input": 58.596153017157654,
    "avg_bits_err_output": 50.536536282422595,
    "avg_bits_err_improve": 8.059616734735059,
    "time": 22758.539306640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ (- (/ 0.5 x) (/ 0.5 (tan x))) (+ (/ (+ (/ x (tan x)) -1.0) (* x -4.0)) (/ (+ (/ x (tan x)) -1.0) (* x -4.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 59.85900928057009,
    "avg_bits_err_output": 59.848735964139856,
    "avg_bits_err_improve": 0.010273316430236434,
    "time": 32133.232421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.058192328871215,
    "avg_bits_err_output": 28.63822003420981,
    "avg_bits_err_improve": 31.419972294661406,
    "time": 28664.12939453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.789398730570014,
    "avg_bits_err_output": 0.3798443609377704,
    "avg_bits_err_improve": 41.40955436963225,
    "time": 8956.08642578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.5733929586296,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.5727679586296,
    "time": 3621.893310546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.440749570452372,
    "avg_bits_err_output": 0.01680195072789178,
    "avg_bits_err_improve": 29.42394761972448,
    "time": 4807.030517578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (- (exp x) 2.0) (exp (- x))) 0.0) (/ (if (!= (- (* (exp x) (- (exp x) 2.0)) (exp (* x -2.0))) 0.0) (/ (fma (- (* (exp x) (- (exp x) 2.0)) (exp (* x -2.0))) (- (* (exp x) (- (exp x) 2.0)) (exp (* x -2.0))) (* (- (* (exp x) (- (exp x) 2.0)) (exp (* x -2.0))) (+ 4.0 (* (exp x) -2.0)))) (- (* (exp x) (- (exp x) 2.0)) (exp (* x -2.0)))) (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0)))) (- (- (exp x) 2.0) (exp (- x)))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 67,
    "avg_bits_err_input": 29.261318308666194,
    "avg_bits_err_output": 28.816632309396553,
    "avg_bits_err_improve": 0.44468599926964103,
    "time": 25978.139892578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 2.0 (/ (* (- -1.0 x) (/ -4.0 x)) (/ 2.0 x))) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 9.8563395808831,
    "avg_bits_err_output": 9.885264332405258,
    "avg_bits_err_improve": -0.028924751522158232,
    "time": 21737.552734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (if (!= (+ (tan x) 1.0) 0.0) (/ (+ (tan x) (* (tan x) (+ 1.0 (* (tan x) 2.0)))) (fma (tan x) 2.0 2.0)) (tan x)))",
    "output_parens": 18,
    "avg_bits_err_input": 37.53202988348641,
    "avg_bits_err_output": 37.54365295697846,
    "avg_bits_err_improve": -0.011623073492053493,
    "time": 20715.966552734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.986196283008077,
    "avg_bits_err_output": 0.16758740625180288,
    "avg_bits_err_improve": 29.818608876756276,
    "time": 13994.87841796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 36.6590889673482,
    "avg_bits_err_output": 21.85719756561927,
    "avg_bits_err_improve": 14.801891401728927,
    "time": 18543.09033203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.679766766756835,
    "avg_bits_err_output": 19.679766766756835,
    "avg_bits_err_improve": 0,
    "time": 16083.622802734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(exp (* 1.0 (log1p (- (atan (+ N 1.0)) (log (+ 1.0 (expm1 (+ 1.0 (atan N)))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 14.616473437918307,
    "avg_bits_err_output": 14.616949623718751,
    "avg_bits_err_improve": -0.00047618580044428427,
    "time": 9256.190673828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.030601608617232,
    "avg_bits_err_output": 1.4594250270877889,
    "avg_bits_err_improve": 28.571176581529443,
    "time": 29003.300537109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(+ -1.0 (+ (/ (- m (* m m)) v) (* m (- 1.0 (/ (- m (* m m)) v)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.07089868437626201,
    "avg_bits_err_output": 0.07346061074072986,
    "avg_bits_err_improve": -0.002561926364467851,
    "time": 14863.606689453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (/ b (/ -1.0 a)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.222949566939832,
    "avg_bits_err_output": 0.27108985000288455,
    "avg_bits_err_improve": 15.951859716936948,
    "time": 10448.931640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (if (!= (* PI (/ angle 180.0)) 0.0) (/ 1.0 (/ -1.0 (* PI (/ angle -180.0)))) (* PI (/ angle 180.0))))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.63888738572131,
    "avg_bits_err_output": 20.69027493638088,
    "avg_bits_err_improve": -0.05138755065956957,
    "time": 34021.6650390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (- (pow b 2.0) (pow a 2.0)) (+ (sin (* PI (/ (+ angle angle) 180.0))) (sin 0.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 31.005119747765104,
    "avg_bits_err_output": 30.964853556929704,
    "avg_bits_err_improve": 0.04026619083539984,
    "time": 34618.397216796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (/ PI 180.0))) a) 2.0) (pow (* b (log1p (expm1 (cos (* angle (/ PI 180.0)))))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.73157717929106,
    "avg_bits_err_output": 20.6918551562508,
    "avg_bits_err_improve": 0.0397220230402624,
    "time": 41754.68017578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (/ m v) (- m (* m m))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1753656015629507,
    "avg_bits_err_output": 0.1767926847629426,
    "avg_bits_err_improve": -0.0014270831999919076,
    "time": 16751.11767578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- (fma (tan x) (tan x) -1.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.337931329582567,
    "avg_bits_err_output": 0.321403294084734,
    "avg_bits_err_improve": 0.016528035497832994,
    "time": 21156.933349609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (/ (sin v) (+ (* e (cos v)) 1.0)) e)",
    "output_parens": 6,
    "avg_bits_err_input": 0.13375,
    "avg_bits_err_output": 0.13636560156295074,
    "avg_bits_err_improve": -0.0026156015629507368,
    "time": 16727.965576171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (log1p (if (!= (exp (cos (- lambda1 lambda2))) 0.0) (/ (* (exp (cos (- lambda1 lambda2))) (expm1 (cos (- lambda1 lambda2)))) (exp (cos (- lambda1 lambda2)))) (expm1 (cos (- lambda1 lambda2)))))))) R)",
    "output_parens": 30,
    "avg_bits_err_input": 17.303448346569223,
    "avg_bits_err_output": 17.580967240380858,
    "avg_bits_err_improve": -0.2775188938116351,
    "time": 36906.712890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (/ (+ (* -4.0 (* a c)) (fma b b (fma c (* -4.0 a) (* b b)))) 2.0))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 27,
    "avg_bits_err_input": 52.41704766489184,
    "avg_bits_err_output": 0.17161109062806484,
    "avg_bits_err_improve": 52.24543657426378,
    "time": 27625.03076171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.070033190974513,
    "avg_bits_err_output": 0.3457864832115306,
    "avg_bits_err_improve": 27.724246707762983,
    "time": 26186.412353515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c 4.0) (- (- b) (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 44.1178578555359,
    "avg_bits_err_output": 0.23493214375685068,
    "avg_bits_err_improve": 43.88292571177905,
    "time": 35354.314208984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (+ (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 2.0)) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 2.0))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 34,
    "avg_bits_err_input": 34.33352993524726,
    "avg_bits_err_output": 22.10055259868146,
    "avg_bits_err_improve": 12.232977336565803,
    "time": 24408.1162109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8863062573141274,
    "avg_bits_err_output": 0.8863062573141274,
    "avg_bits_err_improve": 0,
    "time": 27516.48291015625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (/ (if (!= (/ 4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)) 0.0) (/ (+ (/ (fma (/ -4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)) (/ 16.0 (pow (+ 1.0 (exp (* -2.0 x))) 4.0)) (/ (/ 64.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)) (pow (+ 1.0 (exp (* -2.0 x))) 4.0))) (/ 16.0 (pow (+ 1.0 (exp (* -2.0 x))) 4.0))) (+ (/ 16.0 (pow (+ 1.0 (exp (* -2.0 x))) 4.0)) (/ -4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)))) (/ 4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0))) (- -1.0 (/ -4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)))) (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 76,
    "avg_bits_err_input": 29.548493054417236,
    "avg_bits_err_output": 29.54282210500281,
    "avg_bits_err_improve": 0.005670949414426474,
    "time": 25983.637451171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(- (/ (exp x) (+ (exp x) (exp (- x)))) (/ 1.0 (+ 1.0 (pow (exp x) 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 58.16080974381946,
    "avg_bits_err_output": 57.70732913784853,
    "avg_bits_err_improve": 0.4534806059709311,
    "time": 21746.064453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 57.911683130642594,
    "avg_bits_err_output": 0.05082312031259015,
    "avg_bits_err_improve": 57.86086001033,
    "time": 7311.750244140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.00827124062518029,
    "avg_bits_err_output": 0.00827124062518029,
    "avg_bits_err_improve": 0,
    "time": 1952.5087890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.5055,
    "avg_bits_err_output": 31.5055,
    "avg_bits_err_improve": 0,
    "time": 5040.796142578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(/ (log (if (!= (/ x (+ x -1.0)) 0.0) (- (/ x (- x (* x x))) (/ 2.0 (/ 2.0 (/ x (+ x -1.0))))) (/ (- -1.0 x) (+ x -1.0)))) 2.0)",
    "output_parens": 17,
    "avg_bits_err_input": 58.581499101870136,
    "avg_bits_err_output": 58.57964944358766,
    "avg_bits_err_improve": 0.0018496582824738539,
    "time": 20000.7802734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (exp (log1p (sqrt (- 1.0 (* x x))))) x))",
    "output_parens": 7,
    "avg_bits_err_input": 0.0595,
    "avg_bits_err_output": 0.05925,
    "avg_bits_err_improve": 0.0002500000000000002,
    "time": 3439.19189453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* (cos t) (* eh (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13082312031259016,
    "avg_bits_err_output": 0.1303962406251803,
    "avg_bits_err_improve": 0.00042687968740987015,
    "time": 26418.088623046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13344812031259015,
    "avg_bits_err_output": 0.13344812031259015,
    "avg_bits_err_improve": 0,
    "time": 26898.2080078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* (cos (/ phi2 2.0)) (* (- lambda1 lambda2) (cos (/ phi1 2.0)))) (* (- lambda1 lambda2) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0))))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 39.331420605937446,
    "avg_bits_err_output": 0.13314943819226904,
    "avg_bits_err_improve": 39.198271167745176,
    "time": 29591.53466796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 13.897197625531357,
    "avg_bits_err_output": 0.01268648163704121,
    "avg_bits_err_improve": 13.884511143894315,
    "time": 8960.182373046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.15194354739338634,
    "avg_bits_err_output": 0.14974256349171874,
    "avg_bits_err_improve": 0.0022009839016675914,
    "time": 42611.2412109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.43019930029488,
    "avg_bits_err_output": 0.173832895316917,
    "avg_bits_err_improve": 52.25636640497796,
    "time": 23106.7275390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.225461096610402,
    "avg_bits_err_output": 0.3483124078262924,
    "avg_bits_err_improve": 27.87714868878411,
    "time": 26788.35791015625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 44.135650546231574,
    "avg_bits_err_output": 0.23566334688275212,
    "avg_bits_err_improve": 43.89998719934882,
    "time": 25331.1259765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -3.0) (* b b)))) 0.0) (* (/ c (+ b (sqrt (fma a (* -3.0 c) (* b b))))) (* a -3.0)) (- (sqrt (fma a (* c -3.0) (* b b))) b)) (* a 3.0))",
    "output_parens": 22,
    "avg_bits_err_input": 34.36338207535971,
    "avg_bits_err_output": 22.124227312780874,
    "avg_bits_err_improve": 12.239154762578835,
    "time": 25395.422119140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (cos (- lambda2 lambda1))))))",
    "output_parens": 15,
    "avg_bits_err_input": 12.574238166279743,
    "avg_bits_err_output": 12.575812128646943,
    "avg_bits_err_improve": -0.001573962367199755,
    "time": 36048.871826171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 28.480170105057223,
    "avg_bits_err_output": 0.527291527974224,
    "avg_bits_err_improve": 27.952878577083,
    "time": 22954.81787109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ x (+ x (+ x 2.0))) (- (/ 1.0 (+ x -1.0)) (/ x (- (- -2.0 x) x))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.0584472178141021,
    "avg_bits_err_improve": -0.0444472178141021,
    "time": 4514.29052734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ (/ 2.0 (- 2.0 (+ x x))) (/ (+ 1.0 x) (+ x -1.0))) 0.0) (/ (if (!= (/ (/ (/ 2.0 (+ x -1.0)) (/ (+ 1.0 x) (- 1.0 x))) (- (- 2.0 x) x)) 0.0) (/ (fma (/ 2.0 (* (* (+ 1.0 x) (/ (- (- 2.0 x) x) (+ x -1.0))) (* (+ 1.0 x) (/ (+ x -1.0) (- 1.0 x))))) (/ 4.0 (* (- (- 2.0 x) x) (- (- 2.0 x) x))) (* (/ (/ (/ 2.0 (+ x -1.0)) (/ (+ 1.0 x) (- 1.0 x))) (- (- 2.0 x) x)) (/ (/ (/ (/ 2.0 (+ x -1.0)) (/ (+ 1.0 x) (- 1.0 x))) (* (+ 1.0 x) (/ (+ x -1.0) (- 1.0 x)))) -2.0))) (/ (/ (/ 2.0 (+ x -1.0)) (/ (+ 1.0 x) (- 1.0 x))) (- (- 2.0 x) x))) (/ (/ (- 4.0 (/ 4.0 (/ (+ 1.0 x) (+ x -1.0)))) (- (- 2.0 x) x)) (* (+ 1.0 x) (/ (- (- 2.0 x) x) (+ x -1.0))))) (/ (/ 2.0 (- 2.0 (+ x x))) (/ (+ 1.0 x) (+ x -1.0)))) (/ (- 2.0 (/ 2.0 (/ (+ 1.0 x) (+ x -1.0)))) (- 2.0 (+ x x))))",
    "output_parens": 104,
    "avg_bits_err_input": 14.24985535555293,
    "avg_bits_err_output": 14.204147170771803,
    "avg_bits_err_improve": 0.045708184781126704,
    "time": 18930.132568359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) -2e+153) (* (/ (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (- (* A (* C 4.0)) (pow B 2.0))) (* (sqrt (- F)) (sqrt (* 2.0 (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C)))))) (/ (sqrt (* (* F (* -2.0 (- (* A (* 4.0 C)) (pow B 2.0)))) (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C)) 0.0) (/ (- (- (pow (+ A C) 2.0) (pow (- A C) 2.0)) (pow B 2.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* 4.0 C)) (pow B 2.0))))",
    "output_parens": 90,
    "avg_bits_err_input": 52.29320011853661,
    "avg_bits_err_output": 47.6940380999136,
    "avg_bits_err_improve": 4.599162018623012,
    "time": 40067.310791015625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -2e-20) (* (atan (* (- (sqrt (+ (* (- C A) (- C A)) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 0.0) (* (atan (/ (- (if (!= (- A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) 0.0) (/ (pow B 2.0) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) B)) (/ 180.0 PI)) (/ (if (!= (* (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) 180.0) 0.0) (/ (pow (* (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) 180.0) 2.0) (* (atan (/ (- C (if (!= A 0.0) (/ (* A (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) A) (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) B)) 180.0)) (* (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) 180.0)) PI)))",
    "output_parens": 120,
    "avg_bits_err_input": 29.835945267164455,
    "avg_bits_err_output": 26.586427054983236,
    "avg_bits_err_improve": 3.2495182121812185,
    "time": 31115.68359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (* (* (sqrt (fma A (* C -4.0) (pow B 2.0))) (sqrt (* 2.0 F))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* 4.0 C)) (pow B 2.0)))) (/ (sqrt (* (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (* 2.0 (* (- (pow B 2.0) (* A (* C 4.0))) F)))) (- (* A (* C 4.0)) (pow B 2.0))))",
    "output_parens": 64,
    "avg_bits_err_input": 52.51048112459206,
    "avg_bits_err_output": 47.52740408842882,
    "avg_bits_err_improve": 4.983077036163245,
    "time": 43907.558349609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.627804421622432,
    "avg_bits_err_output": 15.627804421622432,
    "avg_bits_err_improve": 0,
    "time": 18220.3466796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1.35e+154) (+ (cbrt (* (/ 0.5 a) (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (cbrt (* (/ 0.5 a) (- (- g) (* (sqrt (- h g)) (sqrt (- (+ g h)))))))) (if (<= g -1e-295) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (sqrt (- (* g g) (* h h))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- g (- (sqrt (- (* g g) (* h h))))) 0.0) (* h (/ h (- (- g) (sqrt (- (* g g) (* h h)))))) (- (sqrt (- (* g g) (* h h))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))))))",
    "output_parens": 91,
    "avg_bits_err_input": 36.08011519144055,
    "avg_bits_err_output": 12.427177064065216,
    "avg_bits_err_improve": 23.652938127375332,
    "time": 33981.34228515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (if (!= (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) 3.0))) 0.0) (* (/ (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))) (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) 3.0)))) (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) 3.0)))) (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.9912152265701634,
    "avg_bits_err_output": 0.038354135942097356,
    "avg_bits_err_improve": 0.952861090628066,
    "time": 11780.169921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(+ (/ (exp a) (* (+ (exp a) (exp b)) 4.0)) (/ (/ (* (exp a) 6.0) (+ (exp a) (exp b))) 8.0))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6922712406251803,
    "avg_bits_err_output": 0.6938962406251803,
    "avg_bits_err_improve": -0.0016249999999999876,
    "time": 6035.0029296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (* a1 (/ a2 b1)) b2) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-283) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 4e+292) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.372823166249141,
    "avg_bits_err_output": 2.695288113610451,
    "avg_bits_err_improve": 8.67753505263869,
    "time": 8818.548828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4780040635518175,
    "avg_bits_err_output": 0.442625,
    "avg_bits_err_improve": 0.035379063551817524,
    "time": 12662.87890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 2e-5) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 2.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 52.93568994831417,
    "avg_bits_err_output": 0.1811101621022414,
    "avg_bits_err_improve": 52.75457978621193,
    "time": 12460.649658203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.77550359204577,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.77550359204577,
    "time": 2841.230224609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.013875,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 0,
    "time": 3069.30126953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1274.2744140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (- (+ 3.0 (/ 2.0 (* r r))) (* (* (* r w) (* r w)) (/ (* 0.125 (- 3.0 (* 2.0 v))) (- 1.0 v)))) 4.5)",
    "output_parens": 14,
    "avg_bits_err_input": 12.285871629202978,
    "avg_bits_err_output": 0.3880710334375834,
    "avg_bits_err_improve": 11.897800595765395,
    "time": 23662.28076171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (* x1 -6.0)) (+ (* (* x1 x1) (* (/ (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) (* (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (/ (* x1 2.0) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0))))))) (+ x1 x1)))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5128226024455851,
    "avg_bits_err_output": 0.2510476815709618,
    "avg_bits_err_improve": 0.2617749208746233,
    "time": 75466.5732421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.10776151392575,
    "avg_bits_err_output": 1.3643686092939336,
    "avg_bits_err_improve": 16.74339290463182,
    "time": 6076.31982421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2234789628874018,
    "avg_bits_err_output": 0.2234789628874018,
    "avg_bits_err_improve": 0,
    "time": 8309.7421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0026981203125901448,
    "avg_bits_err_output": 0.0026981203125901448,
    "avg_bits_err_improve": 0,
    "time": 3522.409423828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (+ (/ PI (* (- b a) a)) (/ PI (* b (- (- b a))))) (+ b a)) 2.0)",
    "output_parens": 11,
    "avg_bits_err_input": 14.28120578385956,
    "avg_bits_err_output": 0.2439272562546874,
    "avg_bits_err_improve": 14.037278527604872,
    "time": 16660.72314453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (+ (exp (- (* eps x) x)) (+ (* (/ 1.0 eps) (exp (- (* eps x) x))) (/ (/ -1.0 eps) (exp (fma eps x x))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 21,
    "avg_bits_err_input": 29.59160663785604,
    "avg_bits_err_output": 1.2957984981869617,
    "avg_bits_err_improve": 28.295808139669077,
    "time": 23476.85888671875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.013625,
    "avg_bits_err_improve": 0,
    "time": 3956.8779296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.016375,
    "avg_bits_err_output": 0.016375,
    "avg_bits_err_improve": 0,
    "time": 10757.871337890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (+ 2.0 (pow (* 2.0 (/ t (+ t 1.0))) 2.0)) 1.0) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.048375,
    "avg_bits_err_output": 0.04262382516673861,
    "avg_bits_err_improve": 0.005751174833261388,
    "time": 13222.039794921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3723.6591796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8868.8173828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2985.3662109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8035933305167395,
    "avg_bits_err_output": 0.245375,
    "avg_bits_err_improve": 7.558218330516739,
    "time": 34848.167236328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(expm1 (log1p (- (pow (+ x eps) 5.0) (pow x 5.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 7.0989590952705415,
    "avg_bits_err_output": 7.117674744333836,
    "avg_bits_err_improve": -0.018715649063294926,
    "time": 17027.06787109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.626894356708267,
    "avg_bits_err_output": 0.04325107887833093,
    "avg_bits_err_improve": 15.583643277829935,
    "time": 13791.260986328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (pow (pow (exp 10.0) x) x) (log1p (expm1 (cos x))))",
    "output_parens": 7,
    "avg_bits_err_input": 3.555339469037401,
    "avg_bits_err_output": 1.2953048370483606,
    "avg_bits_err_improve": 2.2600346319890403,
    "time": 18910.767333984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 14.8233887960941,
    "avg_bits_err_output": 14.8233887960941,
    "avg_bits_err_improve": 0,
    "time": 13744.50927734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.17150046941011,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.17150046941011,
    "time": 5172.897705078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.086585328122624,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.08633532812262,
    "time": 4118.22509765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.287625,
    "avg_bits_err_improve": 63.712375,
    "time": 16325.064453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (* t (* t 2e-16)) 2e-16)",
    "output_parens": 3,
    "avg_bits_err_input": 61.84325163339247,
    "avg_bits_err_output": 0.3983872187554087,
    "avg_bits_err_improve": 61.44486441463706,
    "time": 15876.43798828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)))) (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.79028626161961,
    "avg_bits_err_output": 21.685322914031556,
    "avg_bits_err_improve": 12.104963347588058,
    "time": 28599.325927734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (+ (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 2.0)) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 2.0))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 34,
    "avg_bits_err_input": 34.33352993524726,
    "avg_bits_err_output": 22.10055259868146,
    "avg_bits_err_improve": 12.232977336565803,
    "time": 26525.71044921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2763.140869140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.379538544695365,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 39.369913544695365,
    "time": 3578.2607421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(* (- x y) (/ (+ x y) (fma y y (* x x))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.832435837777357,
    "avg_bits_err_output": 20.063194656088438,
    "avg_bits_err_improve": -0.23075881831108092,
    "time": 3597.87158203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.7066968622617615,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.7066968622617615,
    "time": 6759.9951171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ (+ b c) d))",
    "output_parens": 3,
    "avg_bits_err_input": 0.040125,
    "avg_bits_err_output": 0.040125,
    "avg_bits_err_improve": 0,
    "time": 9693.3466796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (+ (* b b) (* b a)) (* a (+ a b)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.020844360937770434,
    "avg_bits_err_output": 0.017125,
    "avg_bits_err_improve": 0.003719360937770432,
    "time": 6739.474853515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.016625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.016,
    "time": 4214.63427734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.000375,
    "time": 2583.321044921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ (+ e c) (+ a b)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4018659781302286,
    "avg_bits_err_output": 0.27482312031259015,
    "avg_bits_err_improve": 0.12704285781763847,
    "time": 5559.05810546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(exp (* 1.0 (log (- 1.0 (cos x)))))",
    "output_parens": 5,
    "avg_bits_err_input": 30.15436374729859,
    "avg_bits_err_output": 30.154363900539053,
    "avg_bits_err_improve": -1.5324046387377166e-07,
    "time": 7099.838134765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.62497337338717,
    "avg_bits_err_output": 0.29382312031259017,
    "avg_bits_err_improve": 24.33115025307458,
    "time": 3314.03515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (- x (* 0.0 (- (cos x)))) 0.0) (/ (if (!= (- (* x (- x (sin x))) (fma (sin (- x)) x (* x (sin x)))) 0.0) (/ (- (pow (* x (- x (sin x))) 2.0) (* (fma (sin (- x)) x (* x (sin x))) (fma (sin (- x)) x (* x (sin x))))) (- (* x (- x (sin x))) (fma (sin (- x)) x (* x (sin x))))) (* x (- x (sin x)))) (- x (* 0.0 (- (cos x))))) (- x (sin x))) (tan x))",
    "output_parens": 55,
    "avg_bits_err_input": 29.982081294775853,
    "avg_bits_err_output": 29.878319197404068,
    "avg_bits_err_improve": 0.10376209737178499,
    "time": 29210.48095703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00725,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.006625000000000001,
    "time": 2124.3642578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= i 1.65e+99) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -100.0 (/ i n))))",
    "output_parens": 16,
    "avg_bits_err_input": 47.579275910185075,
    "avg_bits_err_output": 14.610994557696756,
    "avg_bits_err_improve": 32.96828135248832,
    "time": 25053.13134765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.56655196064843,
    "avg_bits_err_output": 23.449937245126012,
    "avg_bits_err_improve": 3.1166147155224166,
    "time": 13174.56884765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d))))) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))))",
    "output_parens": 26,
    "avg_bits_err_input": 25.48909648430748,
    "avg_bits_err_output": 24.072471484307492,
    "avg_bits_err_improve": 1.4166249999999891,
    "time": 12984.84423828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (+ (* ux (- maxCos)) ux))",
    "output_parens": 4,
    "avg_bits_err_input": 0.037875,
    "avg_bits_err_output": 0.020860521314888556,
    "avg_bits_err_improve": 0.017014478685111443,
    "time": 7939.3994140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (+ (pow (- 1.0 ux) 2.0) (- 1.0 (* (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (* maxCos ux)))) 0.0) (/ (- (* (- 1.0 (* (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (* maxCos ux))) (- 1.0 (* (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (* maxCos ux)))) (log (+ 1.0 (expm1 (* (pow (- 1.0 ux) 2.0) (- 1.0 (+ (- ux (* ux ux)) ux))))))) (+ (pow (- 1.0 ux) 2.0) (- 1.0 (* (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (* maxCos ux))))) (- 1.0 (fma ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) (pow (- 1.0 ux) 2.0))))))",
    "output_parens": 63,
    "avg_bits_err_input": 13.770385221272825,
    "avg_bits_err_output": 11.84496042638306,
    "avg_bits_err_improve": 1.9254247948897643,
    "time": 35846.077880859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (- (fma uy (* 2.0 PI) -1.0) -1.0)) (sqrt (+ (- (- 1.0 (* (* ux maxCos) (fma ux maxCos (- 1.0 ux)))) (log (+ 1.0 (expm1 (pow (- 1.0 ux) 2.0))))) (- (* ux (* (- 1.0 ux) maxCos))))))",
    "output_parens": 22,
    "avg_bits_err_input": 13.808443394040077,
    "avg_bits_err_output": 12.58564372822851,
    "avg_bits_err_improve": 1.2227996658115678,
    "time": 31470.84521484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (if (!= (* maxCos ux) 0.0) (* maxCos (/ (* ux (* ux (- maxCos (* ux maxCos)))) (* ux maxCos))) (* maxCos (- ux (* ux ux)))) zi))",
    "output_parens": 44,
    "avg_bits_err_input": 0.33048018785438493,
    "avg_bits_err_output": 0.3624379714425692,
    "avg_bits_err_improve": -0.03195778358818424,
    "time": 42117.765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (if (!= (+ (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) 1.0) 0.0) (/ (- (* (+ (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) 1.0) (+ (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) 1.0)) (+ (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) 1.0)) (+ (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) 1.0)) (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax))))) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 84,
    "avg_bits_err_input": 0.19787968083262134,
    "avg_bits_err_output": 0.20034223445244587,
    "avg_bits_err_improve": -0.0024625536198245312,
    "time": 51453.391845703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (/ (/ 1.0 u1) (* (/ 1.0 u1) (/ (- 1.0 u1) u1))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.5395669897023756,
    "avg_bits_err_output": 0.5558756722725363,
    "avg_bits_err_improve": -0.016308682570160715,
    "time": 21504.81982421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (log (+ 1.0 (expm1 (* 6.28318530718 u2))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.3182523052562121,
    "avg_bits_err_output": 0.3221298361744132,
    "avg_bits_err_improve": -0.0038775309182010886,
    "time": 19901.948486328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (- (+ (/ PI s) 1.0) 1.0)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 22,
    "avg_bits_err_input": 0.3291006081264169,
    "avg_bits_err_output": 0.33051478035035736,
    "avg_bits_err_improve": -0.0014141722239404686,
    "time": 29137.349853515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.06253090445323171,
    "avg_bits_err_output": 0.06253090445323171,
    "avg_bits_err_improve": 0,
    "time": 8069.517578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (+ (/ (fabs x) (- s)) (* (log1p (exp (/ (fabs x) (- s)))) -2.0))) s)",
    "output_parens": 12,
    "avg_bits_err_input": 0.1602904943487237,
    "avg_bits_err_output": 0.14476645493855073,
    "avg_bits_err_improve": 0.015524039410172968,
    "time": 21333.61767578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6678888130575138,
    "avg_bits_err_output": 0.6697037708744058,
    "avg_bits_err_improve": -0.0018149578168920044,
    "time": 21430.118896484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.151137259172071,
    "avg_bits_err_output": 0.1448124751468385,
    "avg_bits_err_improve": 0.006324784025232483,
    "time": 22464.999267578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (+ (fma (/ (- sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) sinTheta_O (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 2.5843473848796834,
    "avg_bits_err_output": 2.581149061054511,
    "avg_bits_err_improve": 0.0031983238251722668,
    "time": 30875.18798828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (/ (* cosTheta_i (/ (* (/ 2.0 v) (/ 0.25 v)) (sinh (/ 1.0 v)))) (exp (* sinTheta_i (/ sinTheta_O v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45646508831999544,
    "avg_bits_err_output": 0.3576604240761917,
    "avg_bits_err_improve": 0.09880466424380374,
    "time": 31184.855712890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (* (exp (/ (- (- (* cosTheta_i cosTheta_O) 1.0) (* sinTheta_i sinTheta_O)) v)) (exp 0.6931)) (/ 0.5 v))",
    "output_parens": 10,
    "avg_bits_err_input": 0.1017916211995896,
    "avg_bits_err_output": 0.09881438715535655,
    "avg_bits_err_improve": 0.002977234044233043,
    "time": 12875.518798828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- 1.0 (* alpha alpha)) (* PI (* (log (* alpha alpha)) (- -1.0 (- (* (- 1.0 (* alpha alpha)) (* cosTheta cosTheta)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.47458210654791216,
    "avg_bits_err_output": 0.47655839433477126,
    "avg_bits_err_improve": -0.001976287786859099,
    "time": 24528.715087890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(fma (log1p (if (!= (- -1.0 (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) 0.0) (/ (- 1.0 (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 6.0)) (- -1.0 (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0))) (+ (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0) -1.0))) s 0.0)",
    "output_parens": 21,
    "avg_bits_err_input": 1.3262383922843086,
    "avg_bits_err_output": 1.2146005512562263,
    "avg_bits_err_improve": 0.11163784102808227,
    "time": 31978.37353515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (log1p (/ (+ (/ 1.0 (log (+ 1.0 (expm1 (pow (fma 4.0 u -1.0) 2.0))))) (+ -1.0 (pow (+ -1.0 (/ -1.0 (fma 4.0 u -1.0))) 2.0))) (/ -2.0 (fma 4.0 u -1.0)))))",
    "output_parens": 17,
    "avg_bits_err_input": 12.264057598280885,
    "avg_bits_err_output": 11.47095039570615,
    "avg_bits_err_improve": 0.7931072025747348,
    "time": 23984.811279296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(fma (* (exp (/ r (* s -6.0))) 0.75) (/ (exp (/ r (* s -6.0))) (* r (* PI (* s 6.0)))) (* (/ 0.125 (* s PI)) (/ (exp (/ r (- s))) r)))",
    "output_parens": 19,
    "avg_bits_err_input": 0.1294345796303651,
    "avg_bits_err_output": 0.12697125892230432,
    "avg_bits_err_improve": 0.0024633207080607677,
    "time": 27167.98779296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (* normAngle (- 1.0 u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.946681081244515,
    "avg_bits_err_output": 0.753048616357168,
    "avg_bits_err_improve": 0.19363246488734698,
    "time": 28880.93310546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (/ (pow (- (- 1.0 cosTheta) cosTheta) 0.5) (* (sqrt PI) (* cosTheta (exp (* cosTheta cosTheta))))) (+ c 1.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7156405514643401,
    "avg_bits_err_output": 0.49802233873748486,
    "avg_bits_err_improve": 0.21761821272685528,
    "time": 27244.27685546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (if (!= (log1p (- u1)) 0.0) (/ 1.0 (/ 1.0 (log1p (- u1)))) (log1p (- u1))))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 16,
    "avg_bits_err_input": 13.541846383590148,
    "avg_bits_err_output": 0.5383373723864513,
    "avg_bits_err_improve": 13.003509011203697,
    "time": 20525.019287109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (pow (- (log1p (- u1))) 0.5) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.591794425307109,
    "avg_bits_err_output": 0.295643160843486,
    "avg_bits_err_improve": 13.296151264463623,
    "time": 19413.33154296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.192672930035418,
    "avg_bits_err_output": 0.31274060156295075,
    "avg_bits_err_improve": 13.879932328472467,
    "time": 17228.25146484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.561665502677593,
    "avg_bits_err_output": 0.5445566370751921,
    "avg_bits_err_improve": 12.0171088656024,
    "time": 17288.848876953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.87330777360657,
    "avg_bits_err_output": 12.626290315381038,
    "avg_bits_err_improve": 4.247017458225532,
    "time": 20711.883056640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.22167019050571782,
    "avg_bits_err_output": 0.15668797821724945,
    "avg_bits_err_improve": 0.06498221228846837,
    "time": 16649.068359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 14.174091690595713,
    "avg_bits_err_output": 10.994192542154078,
    "avg_bits_err_improve": 3.179899148441635,
    "time": 22408.2265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* (* PI f) -0.5))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0))",
    "output_parens": 31,
    "avg_bits_err_input": 61.491432612763994,
    "avg_bits_err_output": 2.062143142598778,
    "avg_bits_err_improve": 59.429289470165216,
    "time": 44648.794677734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -146.0) (* t (/ (sqrt 2.0) (sqrt (fma l (- l) (* (+ (* l (/ l (+ (+ x x) -2.0))) (* 2.0 (/ (* t t) (+ (+ x x) -2.0)))) (+ (+ x 1.0) (+ x 1.0))))))) (if (<= t 1.26e-8) (* t (/ (sqrt 2.0) (sqrt (fma l (- l) (/ (* (fma 2.0 (* t t) (* l l)) (+ x 1.0)) (+ x -1.0)))))) (* t (/ (sqrt 2.0) (sqrt (fma l (- l) (* (+ (* l (/ l (+ (+ x x) -2.0))) (* 2.0 (/ (* t t) (+ (+ x x) -2.0)))) (+ (+ x 1.0) (+ x 1.0)))))))))",
    "output_parens": 57,
    "avg_bits_err_input": 42.840952807663975,
    "avg_bits_err_output": 39.635184411461736,
    "avg_bits_err_improve": 3.205768396202238,
    "time": 28135.7294921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.980989365904106,
    "avg_bits_err_output": 0.21452161719245771,
    "avg_bits_err_improve": 3.7664677487116482,
    "time": 28992.25830078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0) (pow (* (* 2.0 (/ l Om)) (sin kx)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.094125,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 1.087375,
    "time": 21230.0400390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (/ (* Om (/ Om Omc)) Omc)) (+ 1.0 (* 2.0 (if (!= (* (/ t l) (/ t l)) 0.0) (/ 1.0 (/ 1.0 (* (/ t l) (/ t l)))) (* (/ t l) (/ t l))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 10.622328598079049,
    "avg_bits_err_output": 10.622005477766459,
    "avg_bits_err_improve": 0.000323120312589964,
    "time": 20441.576904296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -3.4e-287) (* (sqrt (* (* 2.0 n) (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- U))) (* (sqrt (* 2.0 (* n (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt U)))",
    "output_parens": 31,
    "avg_bits_err_input": 34.67842107000908,
    "avg_bits_err_output": 25.935268359694184,
    "avg_bits_err_improve": 8.743152710314895,
    "time": 40164.79931640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1.7e-43) (/ 2.0 (/ (* (/ (* (/ k t) (/ (pow t 3.0) l)) t) (* k (* (sin k) (tan k)))) l)) (if (<= t 1.85e-58) (/ (/ 2.0 (pow (/ k t) 2.0)) (* (/ (* (pow t 3.0) (/ (sin k) l)) l) (tan k))) (/ 2.0 (/ (* k (* (* (/ (pow t 3.0) l) (* (tan k) (sin k))) (/ (/ k l) t))) t))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.336429510506825,
    "avg_bits_err_output": 32.59518552083991,
    "avg_bits_err_improve": 14.741243989666913,
    "time": 49375.16748046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (pow t 3.0) (/ (sin k) l)) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (tan k) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.277784931514574,
    "avg_bits_err_output": 26.20769950407776,
    "avg_bits_err_improve": 6.0700854274368155,
    "time": 22775.6494140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* (* a1 a1) (* (* (cos th) 2.0) 2.0)) (* a2 (* (* (cos th) 2.0) (+ a2 a2)))) (* (* (sqrt 2.0) 2.0) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.5807400406482597,
    "avg_bits_err_output": 0.5882939875194734,
    "avg_bits_err_improve": -0.00755394687121369,
    "time": 26267.05810546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (* k -0.5)) (/ (sqrt (* 2.0 (* PI n))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5224056608305663,
    "avg_bits_err_output": 0.43369357911975065,
    "avg_bits_err_improve": 0.08871208171081563,
    "time": 21279.628173828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (if (!= (exp (* l -2.0)) 0.0) (/ (- (expm1 (* l -4.0))) (/ (exp (- l)) (exp l))) (- (pow (exp l) 2.0) (pow (exp l) -2.0))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 37,
    "avg_bits_err_input": 17.31369576187562,
    "avg_bits_err_output": 0.16446795551672264,
    "avg_bits_err_improve": 17.149227806358898,
    "time": 26676.302001953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (if (!= (* K (/ (+ m n) 2.0)) 0.0) (/ 1.0 (/ 1.0 (* K (/ (+ m n) 2.0)))) (* K (/ (+ m n) 2.0))) M)) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n))))))",
    "output_parens": 29,
    "avg_bits_err_input": 15.274467448716402,
    "avg_bits_err_output": 15.247803485865886,
    "avg_bits_err_improve": 0.026663962850516754,
    "time": 18445.892578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (cos (/ K 2.0)) (* (* -2.0 J) (sqrt (+ 1.0 (pow (/ (/ U (cos (/ K -2.0))) (+ J J)) 2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.00421936093777,
    "avg_bits_err_output": 18.036615601562954,
    "avg_bits_err_improve": -0.032396240625182315,
    "time": 31842.400390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) -2e-61) (* w0 (sqrt (- 1.0 (* (/ (pow (* D (/ (/ M 2.0) d)) 2.0) l) h)))) (if (<= (/ h l) 0.0) (* w0 (sqrt (- 1.0 (* (/ (/ M 4.0) d) (* (/ D l) (* D (* (/ M d) h))))))) (* w0 (sqrt (- 1.0 (* (/ (* h (* M (/ D d))) (* l 4.0)) (* M (/ D d))))))))",
    "output_parens": 37,
    "avg_bits_err_input": 14.127842899506629,
    "avg_bits_err_output": 9.011584871537996,
    "avg_bits_err_improve": 5.116258027968632,
    "time": 26784.51220703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+123) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) -5e-118) (* c0 (sqrt (* (/ (/ 2.0 V) (+ l l)) A))) (if (<= (* V l) 1e-318) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) 1e+300) (* c0 (* (sqrt (/ (/ 2.0 V) (+ l l))) (sqrt A))) (* c0 (sqrt (/ (/ A l) V)))))))",
    "output_parens": 45,
    "avg_bits_err_input": 19.331082942441245,
    "avg_bits_err_output": 8.284642715965816,
    "avg_bits_err_improve": 11.04644022647543,
    "time": 21880.41943359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -2.7e+135) (/ (/ (* c0 (if (!= (- (* d (* (/ c0 (* h D)) (/ d (* D w)))) (sqrt (- (pow (* d (* (/ c0 (* h D)) (/ d (* D w)))) 2.0) (* M M)))) 0.0) (/ (- (* M M) 0.0) (- (* d (* (/ c0 (* h D)) (/ d (* D w)))) (sqrt (- (pow (* d (* (/ c0 (* h D)) (/ d (* D w)))) 2.0) (* M M))))) (fma d (* (/ c0 (* h D)) (/ d (* D w))) (sqrt (- (pow (* d (* (/ c0 (* h D)) (/ d (* D w)))) 2.0) (* M M)))))) w) 2.0) (if (<= w 2e+134) (/ (/ (* c0 (if (!= (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))) 0.0) (* M (/ M (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))))) (fma d (/ (* c0 (/ d (* D (* w h)))) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))))) w) 2.0) (/ (/ (* c0 (if (!= (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))) 0.0) (* M (/ M (fma (/ d (* w (* h D))) (* d (/ c0 D)) (- (sqrt (- (pow (* (/ d (* w (* h D))) (* d (/ c0 D))) 2.0) (* M M))))))) (fma d (/ (* c0 (/ d (* D (* w h)))) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))))) w) 2.0)))",
    "output_parens": 176,
    "avg_bits_err_input": 59.43901740849568,
    "avg_bits_err_output": 29.66656996706896,
    "avg_bits_err_improve": 29.77244744142672,
    "time": 68063.42724609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (* (fma 0.5 (* h (* (/ D (+ d d)) (* (/ D (+ d d)) (/ (pow M 2.0) l)))) -1.0) (- (sqrt (* d (/ (/ d h) l))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 5e+289) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- (/ (* (pow (* M (/ (/ D d) 2.0)) 2.0) (* h -0.5)) l) -1.0))))",
    "output_parens": 77,
    "avg_bits_err_input": 26.404284773602452,
    "avg_bits_err_output": 22.420936971987352,
    "avg_bits_err_improve": 3.9833478016151,
    "time": 43206.1083984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (+ (/ -0.25 (hypot 1.0 x)) (+ 0.25 (+ 0.25 (/ -0.25 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 25,
    "avg_bits_err_input": 15.707598007090736,
    "avg_bits_err_output": 15.217025626217543,
    "avg_bits_err_improve": 0.49057238087319277,
    "time": 16393.600341796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9818340531677464,
    "avg_bits_err_output": 0.01064624062518029,
    "avg_bits_err_improve": 0.9711878125425661,
    "time": 4691.88232421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(+ (/ (- (* 5.0 (* v v))) (* (sqrt (- 2.0 (* v (* v 6.0)))) (* PI (- t (* v (* t v)))))) (- (/ (/ (/ -1.0 PI) (- t (* v (* v t)))) (sqrt (- 2.0 (* v (* v 6.0)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.44198733279738894,
    "avg_bits_err_output": 0.2724814066384835,
    "avg_bits_err_improve": 0.16950592615890542,
    "time": 24642.021240234375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(fma (* v v) (/ (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v))))) 4.0) (* (/ (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v))))) -4.0) (+ -1.0 (* v (+ v v)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.01320366957750995,
    "avg_bits_err_output": 0.01214624062518029,
    "avg_bits_err_improve": 0.0010574289523296605,
    "time": 14237.4775390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5152070115660735,
    "avg_bits_err_output": 0.5152070115660735,
    "avg_bits_err_improve": 0,
    "time": 10840.850830078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* (pow k m) (/ a (- (* k (+ k 10.0)) -1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 1.9546565265742808,
    "avg_bits_err_output": 1.9519065265742808,
    "avg_bits_err_improve": 0.00275000000000003,
    "time": 22177.4853515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ mu (+ Vef EDonor)) Ec) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.021912583770241124,
    "avg_bits_err_output": 0.021912583770241124,
    "avg_bits_err_improve": 0,
    "time": 10358.857177734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow a 4.0) (+ (pow b 4.0) (* (* b b) (+ 4.0 (* a (+ a a)))))) 1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 0.18203655590132128,
    "avg_bits_err_output": 0.00889482621102681,
    "avg_bits_err_improve": 0.17314172969029448,
    "time": 7099.969482421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (fma (* b b) (fma a a (* b b)) (* a (+ (* a (* b b)) (* a (* a a))))) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 29,
    "avg_bits_err_input": 0.18997040104138205,
    "avg_bits_err_output": 0.15850143636209238,
    "avg_bits_err_improve": 0.03146896467928967,
    "time": 17585.442626953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (/ 1.0 (* (/ -1.0 (pow (fma b b (* a a)) 2.0)) (- 0.0 (* (if (!= (- (pow b 4.0) (pow a 4.0)) 0.0) (* (* (fma b b (* a a)) (- (* b b) (* a a))) (/ (* (fma b b (* a a)) (fma b b (* a a))) (- (pow b 4.0) (pow a 4.0)))) (pow (fma b b (* a a)) 2.0)) (/ 1.0 (pow (fma b b (* a a)) 2.0)))))) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 54,
    "avg_bits_err_input": 0.18842033202660644,
    "avg_bits_err_output": 0.15727179941373987,
    "avg_bits_err_improve": 0.03114853261286657,
    "time": 16149.09130859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.208008860755024,
    "avg_bits_err_output": 13.208008860755024,
    "avg_bits_err_improve": 0,
    "time": 19393.001708984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.59321119733226,
    "avg_bits_err_output": 0.056875,
    "avg_bits_err_improve": 40.53633619733226,
    "time": 7213.6962890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (/ (pow (tan x) 2.0) (+ x (tan x)))) (- x (tan x))))",
    "output_parens": 19,
    "avg_bits_err_input": 31.68612750779363,
    "avg_bits_err_output": 31.156336304554863,
    "avg_bits_err_improve": 0.5297912032387657,
    "time": 21338.841796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (- b_2) a) (if (<= b_2 -1.45e-299) (/ (/ (+ b_2 (+ b_2 (* (sqrt (fma b_2 b_2 (* c (- a)))) -2.0))) -2.0) a) (if (<= b_2 1.35e+154) (/ (if (!= (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2) 0.0) (* a (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))))) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a) (/ (if (!= (- b_2) 0.0) (fma a (/ c (* b_2 -2.0)) (* c (/ (/ a b_2) -2.0))) (- b_2)) a))))",
    "output_parens": 50,
    "avg_bits_err_input": 33.730158327203675,
    "avg_bits_err_output": 18.407190238917057,
    "avg_bits_err_improve": 15.322968088286618,
    "time": 18589.11865234375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 33.53854291580848,
    "avg_bits_err_output": 21.617122941080723,
    "avg_bits_err_improve": 11.921419974727755,
    "time": 18905.9677734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.106342939284794,
    "avg_bits_err_output": 30.2972682547755,
    "avg_bits_err_improve": 0.8090746845092944,
    "time": 21170.939697265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.4629577493785,
    "avg_bits_err_output": 10.570626083460104,
    "avg_bits_err_improve": 21.892331665918398,
    "time": 28992.89013671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (+ (log1p N) 1.0) 0.0) (/ (- (pow (+ (log1p N) 1.0) 2.0) (* (+ (log1p N) 1.0) (+ (log N) 1.0))) (+ (log1p N) 1.0)) (- (log1p N) (log N)))",
    "output_parens": 19,
    "avg_bits_err_input": 29.500741789756933,
    "avg_bits_err_output": 29.51989722311261,
    "avg_bits_err_improve": -0.019155433355678042,
    "time": 14050.306396484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ -1.0 x) (/ x (/ x (+ x 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.328016796907551,
    "avg_bits_err_output": 0.0758962406251803,
    "avg_bits_err_improve": 14.252120556282371,
    "time": 14790.47998046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(+ (fma (cos x) (cos eps) (- (cos x))) (- (* (sin x) (sin eps))))",
    "output_parens": 10,
    "avg_bits_err_input": 39.60068821796507,
    "avg_bits_err_output": 6.134760694085835,
    "avg_bits_err_improve": 33.46592752387924,
    "time": 26034.9375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.750049245808967,
    "avg_bits_err_output": 29.460877007382127,
    "avg_bits_err_improve": 0.2891722384268398,
    "time": 13325.766357421875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log (- 1.0 (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 29.96797140621094,
    "avg_bits_err_output": 29.974280384488036,
    "avg_bits_err_improve": -0.00630897827709731,
    "time": 24587.818603515625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) (- INFINITY)) (if (!= (/ (- 0.0 b) (* a 2.0)) 0.0) (- (/ (* (* c -4.0) (/ a (* a -2.0))) (- (- (sqrt (fma b b (* a (* c -4.0))))) b)) 0.0) (/ (- (sqrt (fma b b (* a (* c -4.0)))) b) (* a 2.0))) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) -5e-167) (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) 2e-227) (if (!= (/ (- 0.0 b) (* a 2.0)) 0.0) (- (/ (* (* c -4.0) (/ a (* a -2.0))) (- (- (sqrt (fma b b (* a (* c -4.0))))) b)) 0.0) (/ (- (sqrt (fma b b (* a (* c -4.0)))) b) (* a 2.0))) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) 2e+307) (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) (if (!= (/ (- 0.0 b) (* a 2.0)) 0.0) (- (/ (* (* c -4.0) (/ a (* a -2.0))) (- (- (sqrt (fma b b (* a (* c -4.0))))) b)) 0.0) (/ (- (sqrt (fma b b (* a (* c -4.0)))) b) (* a 2.0)))))))",
    "output_parens": 135,
    "avg_bits_err_input": 33.70671116528833,
    "avg_bits_err_output": 19.638675379191522,
    "avg_bits_err_improve": 14.06803578609681,
    "time": 26502.368408203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* a (/ (* c 4.0) (- (sqrt (fma -4.0 (* a c) (* b b))) b))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.13804826137772,
    "avg_bits_err_output": 21.299852918100903,
    "avg_bits_err_improve": 11.838195343276816,
    "time": 24976.618408203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ 2.0 (/ 2.0 (/ (log1p (- x)) (log1p x))))",
    "output_parens": 6,
    "avg_bits_err_input": 61.182643001630375,
    "avg_bits_err_output": 0.02927857187842551,
    "avg_bits_err_improve": 61.153364429751946,
    "time": 15917.411376953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log1p n) (log n)) n)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 63.01021685974004,
    "avg_bits_err_output": 44.18695966562837,
    "avg_bits_err_improve": 18.82325719411167,
    "time": 17592.677490234375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (exp (log1p (log (- (/ (+ 1.0 eps) (* (+ 1.0 eps) (+ 1.0 eps))) (/ (+ eps 0.0) (+ 1.0 eps)))))) 1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 58.60315345304578,
    "avg_bits_err_output": 58.62689658524319,
    "avg_bits_err_improve": -0.023743132197409977,
    "time": 18401.751953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (log (+ 1.0 (expm1 (- 1.0 (/ x (tan x)))))) x)",
    "output_parens": 7,
    "avg_bits_err_input": 59.887347463261065,
    "avg_bits_err_output": 59.88277856996283,
    "avg_bits_err_improve": 0.0045688932982344,
    "time": 31220.34033203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.538691125731525,
    "avg_bits_err_output": 28.937452537852884,
    "avg_bits_err_improve": 31.60123858787864,
    "time": 27870.414794921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 40.86726586985108,
    "avg_bits_err_output": 0.5421156015629508,
    "avg_bits_err_improve": 40.325150268288134,
    "time": 7555.46142578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.64070708086842,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.639832080868416,
    "time": 2812.019775390625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.486760751671497,
    "avg_bits_err_output": 0.022180644893423293,
    "avg_bits_err_improve": 29.464580106778072,
    "time": 5148.12548828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (exp (- x)) 0.0) (/ (fma (exp (- x)) (exp (- x)) (+ 1.0 (/ -2.0 (exp x)))) (exp (- x))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 20,
    "avg_bits_err_input": 29.683117156777303,
    "avg_bits_err_output": 29.108950804812594,
    "avg_bits_err_improve": 0.5741663519647098,
    "time": 23897.1376953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (if (!= (/ -1.0 (* (+ x -1.0) (- 1.0 x))) 0.0) (/ (fma (pow (/ 1.0 (- 1.0 x)) 2.0) (/ (+ (/ -0.5 (+ 1.0 x)) (/ 1.0 x)) (- 1.0 x)) (fma (pow (/ 1.0 (- 1.0 x)) 2.0) (/ (+ (/ -0.5 (+ 1.0 x)) (/ 1.0 x)) (- 1.0 x)) (pow (/ 1.0 (- 1.0 x)) 4.0))) (/ -1.0 (* (+ x -1.0) (- 1.0 x)))) (/ (+ (- (/ -0.5 (+ 1.0 x)) (/ -1.0 x)) (+ (- (/ -0.5 (+ 1.0 x)) (/ -1.0 x)) (/ -1.0 (+ x -1.0)))) (- 1.0 x))) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 62,
    "avg_bits_err_input": 9.791196462515073,
    "avg_bits_err_output": 9.792873503367321,
    "avg_bits_err_improve": -0.0016770408522486235,
    "time": 28906.17919921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (tan (+ x eps)) 0.0) (* (tan (+ x eps)) (- (/ (tan (+ x eps)) (log1p (expm1 (tan (+ x eps))))) (/ (tan x) (tan (+ x eps))))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 23,
    "avg_bits_err_input": 37.32211213782556,
    "avg_bits_err_output": 37.633456932917646,
    "avg_bits_err_improve": -0.3113447950920829,
    "time": 20940.351318359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.89520388300476,
    "avg_bits_err_output": 0.1653892859392127,
    "avg_bits_err_improve": 29.72981459706555,
    "time": 13461.04443359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin eps) (cos x) (* (sin x) (cos eps))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.076021656316286,
    "avg_bits_err_output": 21.740813978394698,
    "avg_bits_err_improve": 15.335207677921588,
    "time": 21048.981689453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (if (!= (+ (/ 1.0 (+ x 1.0)) (/ 1.0 (sqrt (fma x x x)))) 0.0) (/ (fma (/ 1.0 (+ x 1.0)) (/ 1.0 (+ x 1.0)) (- (pow (/ -1.0 (sqrt (fma x x x))) 2.0))) (+ (/ 1.0 (+ x 1.0)) (/ 1.0 (expm1 (log1p (sqrt (fma x x x))))))) (+ (/ 1.0 (+ x 1.0)) (/ -1.0 (sqrt (fma x x x))))) (/ -1.0 (sqrt (+ 1.0 x))))",
    "output_parens": 37,
    "avg_bits_err_input": 19.768123257986957,
    "avg_bits_err_output": 19.757126788752124,
    "avg_bits_err_improve": 0.010996469234832773,
    "time": 17936.125732421875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (- (atan (+ N 1.0)) (+ 1.0 (atan N))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 14.990133460485552,
    "avg_bits_err_output": 14.996060527837022,
    "avg_bits_err_improve": -0.005927067351469972,
    "time": 8325.6064453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.77134824367137,
    "avg_bits_err_output": 1.4313300565131444,
    "avg_bits_err_improve": 28.340018187158226,
    "time": 23565.837158203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07404492500144229,
    "avg_bits_err_output": 0.07404492500144229,
    "avg_bits_err_improve": 0,
    "time": 11766.1513671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* (* b (+ a a)) -2.0) (/ (/ 4.0 a) b))",
    "output_parens": 6,
    "avg_bits_err_input": 16.724698021241284,
    "avg_bits_err_output": 0.2897509284218507,
    "avg_bits_err_improve": 16.434947092819435,
    "time": 11680.19775390625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= PI 0.0) (* (* PI PI) (/ angle (* PI 180.0))) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 17,
    "avg_bits_err_input": 20.318325708829597,
    "avg_bits_err_output": 20.303286557410377,
    "avg_bits_err_improve": 0.015039151419220076,
    "time": 36169.00634765625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (<= a -1e+128) (* (if (!= (* (cos (+ (* angle (/ PI 180.0)) (/ PI 2.0))) (pow b 2.0)) 0.0) (- (- (/ (pow (* (sin (* angle (/ PI -180.0))) a) 2.0) (sin (* angle (/ PI -180.0)))) (/ 0.0 (pow b 2.0))) (/ 1.0 (/ (/ 1.0 (sin (* angle (/ PI -180.0)))) (pow b 2.0)))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0))))) (if (<= a 8.8e+91) (* (* (- (pow b 2.0) (pow a 2.0)) (* -2.0 (cos (* angle (/ PI -180.0))))) (sin (* angle (/ PI -180.0)))) (* (if (!= (* (sin (* angle (/ PI -180.0))) (pow b 2.0)) 0.0) (- (- (/ (pow (* (sin (* angle (/ PI -180.0))) a) 2.0) (sin (* angle (/ PI -180.0)))) 0.0) (/ 1.0 (/ (/ 1.0 (sin (* angle (/ PI -180.0)))) (pow b 2.0)))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0)))))))",
    "output_parens": 94,
    "avg_bits_err_input": 31.073264448467892,
    "avg_bits_err_output": 28.57474343255343,
    "avg_bits_err_improve": 2.498521015914463,
    "time": 37985.491455078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (if (!= (* (sin (fma angle (/ PI 180.0) 1.0)) (sin -1.0)) 0.0) (/ (- (* (cos (fma angle (/ PI 180.0) 1.0)) (* (cos 1.0) (* (log (+ 1.0 (expm1 (sin (fma angle (/ PI 180.0) 1.0))))) (sin -1.0)))) (* (sin (fma angle (/ PI 180.0) 1.0)) (* (sin -1.0) (* (sin (fma angle (/ PI 180.0) 1.0)) (sin -1.0))))) (* (- (exp (log1p (sin (fma angle (/ PI 180.0) 1.0)))) 1.0) (sin -1.0))) (cos (* angle (/ PI 180.0))))) 2.0))",
    "output_parens": 53,
    "avg_bits_err_input": 20.21627943539432,
    "avg_bits_err_output": 20.203912555253325,
    "avg_bits_err_improve": 0.012366880140994851,
    "time": 53311.489990234375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17499060156295074,
    "avg_bits_err_output": 0.17353308281331128,
    "avg_bits_err_improve": 0.0014575187496394526,
    "time": 17522.1904296875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32144531176572927,
    "avg_bits_err_output": 0.3123491174138237,
    "avg_bits_err_improve": 0.009096194351905562,
    "time": 20268.43798828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (+ (/ (+ 1.0 (* (* e (cos v)) 2.0)) 2.0) -0.5)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.13386560156295074,
    "avg_bits_err_output": 0.13850244375108173,
    "avg_bits_err_improve": -0.004636842188130985,
    "time": 16961.19580078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.50614705770733,
    "avg_bits_err_output": 16.5045181690646,
    "avg_bits_err_improve": 0.001628888642731141,
    "time": 35071.695068359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* a (* -4.0 c))))) 0.0) (* (* a -4.0) (/ c (+ b (sqrt (fma -4.0 (* c a) (* b b)))))) (- (sqrt (fma -4.0 (* c a) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 52.60920530351322,
    "avg_bits_err_output": 0.1652573312532451,
    "avg_bits_err_improve": 52.44394797225998,
    "time": 27770.80859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 28.32917868863751,
    "avg_bits_err_output": 0.3457887234500303,
    "avg_bits_err_improve": 27.983389965187477,
    "time": 25010.307373046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.78874762707837,
    "avg_bits_err_output": 0.24211146719534216,
    "avg_bits_err_improve": 43.54663615988303,
    "time": 24051.1650390625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (if (!= (/ b (* a -2.0)) 0.0) (+ (/ 1.0 (/ 1.0 (/ b (* a -2.0)))) (/ (* (/ b (* a -2.0)) (/ 0.0 (* a 2.0))) (/ b (* a -2.0)))) (/ (- (sqrt (fma b b (* (* a c) -4.0))) b) (* a 2.0))) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 50,
    "avg_bits_err_input": 33.70310996181358,
    "avg_bits_err_output": 20.36221805217462,
    "avg_bits_err_improve": 13.340891909638962,
    "time": 24296.075927734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (* (cos phi2) (cos (- lambda1 lambda2))) 0.0) (/ (* (cos phi2) (+ (* (cos (- lambda1 lambda2)) (cos phi1)) (* (cos phi2) (pow (cos (- lambda1 lambda2)) 2.0)))) (* (cos phi2) (cos (- lambda1 lambda2)))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 34,
    "avg_bits_err_input": 0.8872506754157247,
    "avg_bits_err_output": 0.9119814412245643,
    "avg_bits_err_improve": -0.024730765808839594,
    "time": 28628.329345703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (/ -2.0 (- -1.0 (exp (* -2.0 x)))) 0.0) (+ (/ 4.0 (* (pow (- -1.0 (exp (* -2.0 x))) 2.0) (/ -4.0 (- -1.0 (exp (* -2.0 x)))))) (+ (- -0.5 (/ 1.0 (- -1.0 (exp (* -2.0 x))))) -0.5)) (+ (/ -2.0 (- -1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 28,
    "avg_bits_err_input": 29.361745493776258,
    "avg_bits_err_output": 29.35507042026361,
    "avg_bits_err_improve": 0.006675073512649732,
    "time": 24148.589599609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ (exp (+ x x)) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 58.118687058443555,
    "avg_bits_err_output": 0.6618043234384918,
    "avg_bits_err_improve": 57.45688273500507,
    "time": 19938.742919921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (expm1 (* x 2.0)) (exp (- x))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.0167606326519,
    "avg_bits_err_output": 0.05125,
    "avg_bits_err_improve": 57.9655106326519,
    "time": 8322.7666015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007469360937770434,
    "avg_bits_err_output": 0.007469360937770434,
    "avg_bits_err_improve": 0,
    "time": 2154.299072265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.55375,
    "avg_bits_err_output": 31.55375,
    "avg_bits_err_improve": 0,
    "time": 4976.30517578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (+ (+ (/ x (- 1.0 x)) (/ x (- 1.0 x))) (/ (- 1.0 x) (- 1.0 x)))))",
    "output_parens": 11,
    "avg_bits_err_input": 58.59061824405141,
    "avg_bits_err_output": 58.54610938104708,
    "avg_bits_err_improve": 0.044508863004331545,
    "time": 23414.00341796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (* (+ 1.0 (sqrt (- 1.0 (* x x)))) (/ 1.0 x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.020625,
    "avg_bits_err_output": 0.020698120312590145,
    "avg_bits_err_improve": -7.312031259014418e-05,
    "time": 3875.665283203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* (cos t) (* eh (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13032312031259013,
    "avg_bits_err_output": 0.12946936093777042,
    "avg_bits_err_improve": 0.0008537593748197125,
    "time": 25329.534423828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (if (!= (cos (atan (* eh (/ (- (tan t)) ew)))) 0.0) (/ 1.0 (/ 1.0 (cos (atan (* eh (/ (- (tan t)) ew)))))) (cos (atan (* eh (/ (- (tan t)) ew)))))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.12325,
    "avg_bits_err_output": 0.12486560156295075,
    "avg_bits_err_improve": -0.0016156015629507497,
    "time": 29174.1455078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (sin (/ phi2 2.0)) (sin (/ phi1 -2.0))) (* (- lambda1 lambda2) (* (cos (/ phi2 2.0)) (cos (/ phi1 2.0))))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.03542395506298,
    "avg_bits_err_output": 0.12696623289966283,
    "avg_bits_err_improve": 38.90845772216332,
    "time": 28686.7900390625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.14076196427245,
    "avg_bits_err_output": 0.009948120312590146,
    "avg_bits_err_improve": 14.13081384395986,
    "time": 7215.258544921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (if (!= (fma (sin phi1) (sin (asin (fma (cos phi1) (* (sin delta) (cos theta)) (* (cos delta) (sin phi1))))) (cos delta)) 0.0) (- (/ (pow (cos delta) 2.0) (fma (sin phi1) (sin (asin (fma (cos phi1) (* (sin delta) (cos theta)) (* (cos delta) (sin phi1))))) (cos delta))) (/ (pow (* (sin phi1) (sin (asin (fma (cos phi1) (* (sin delta) (cos theta)) (* (cos delta) (sin phi1)))))) 2.0) (fma (sin phi1) (sin (asin (fma (cos phi1) (* (sin delta) (cos theta)) (* (cos delta) (sin phi1))))) (cos delta)))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos phi1) (* (sin delta) (cos theta)) (* (cos delta) (sin phi1))))))))))",
    "output_parens": 80,
    "avg_bits_err_input": 0.15376049262704158,
    "avg_bits_err_output": 0.1607231667404595,
    "avg_bits_err_improve": -0.006962674113417916,
    "time": 40580.851806640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* -3.0 a)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.643515077095074,
    "avg_bits_err_output": 0.17165601562950716,
    "avg_bits_err_improve": 52.471859061465565,
    "time": 23225.888427734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.449788997139287,
    "avg_bits_err_output": 0.3361849640752105,
    "avg_bits_err_improve": 28.113604033064075,
    "time": 31383.651611328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* -3.0 a)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.86024444686531,
    "avg_bits_err_output": 0.2434185866104623,
    "avg_bits_err_improve": 43.61682586025485,
    "time": 28155.36669921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 33.75598930418483,
    "avg_bits_err_output": 21.455553803757656,
    "avg_bits_err_improve": 12.300435500427174,
    "time": 22422.29052734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (log1p (expm1 (sin phi1))) (cos (- lambda2 lambda1))))))",
    "output_parens": 17,
    "avg_bits_err_input": 12.83495008420797,
    "avg_bits_err_output": 12.850386568006675,
    "avg_bits_err_improve": -0.015436483798705325,
    "time": 37152.666259765625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.214774936467396,
    "avg_bits_err_output": 0.4979524216653173,
    "avg_bits_err_improve": 28.71682251480208,
    "time": 19494.898681640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01325,
    "avg_bits_err_output": 0.01325,
    "avg_bits_err_improve": 0,
    "time": 4183.39208984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (if (!= (pow (/ -1.0 (+ x 1.0)) 2.0) 0.0) (if (!= (/ (/ (pow (/ -1.0 (+ x 1.0)) 2.0) (fma x x -1.0)) (- (pow (/ -1.0 (+ x 1.0)) 2.0))) 0.0) (/ (- (* (/ (/ (pow (/ -1.0 (+ x 1.0)) 2.0) (fma x x -1.0)) (- (pow (/ -1.0 (+ x 1.0)) 2.0))) (/ (/ (pow (/ -1.0 (+ x 1.0)) 2.0) (fma x x -1.0)) (- (pow (/ -1.0 (+ x 1.0)) 2.0)))) (* (/ (/ (pow (/ -1.0 (+ x 1.0)) 2.0) (fma x x -1.0)) (- (pow (/ -1.0 (+ x 1.0)) 2.0))) (/ (pow (/ -1.0 (+ x 1.0)) 4.0) (- (pow (/ -1.0 (+ x 1.0)) 2.0))))) (/ (+ (/ (/ (pow (/ -1.0 (+ x 1.0)) 2.0) (pow (/ -1.0 (+ x 1.0)) 2.0)) (* (fma x x -1.0) (fma x x -1.0))) (/ (/ (pow (/ -1.0 (+ x 1.0)) 2.0) (pow (/ -1.0 (+ x 1.0)) 2.0)) (* (fma x x -1.0) (fma x x -1.0)))) (* -2.0 (/ (pow (/ -1.0 (+ x 1.0)) 2.0) (* (pow (/ -1.0 (+ x 1.0)) 2.0) (fma x x -1.0)))))) (/ (- (pow (/ -1.0 (+ x 1.0)) 4.0) (/ (pow (/ -1.0 (+ x 1.0)) 2.0) (fma x x -1.0))) (pow (/ -1.0 (+ x 1.0)) 2.0))) (- (/ -1.0 (fma x x -1.0)) (/ -1.0 (pow (+ x 1.0) 2.0)))) (/ 1.0 (+ 1.0 x)))",
    "output_parens": 115,
    "avg_bits_err_input": 14.2279152119211,
    "avg_bits_err_output": 14.22506708057981,
    "avg_bits_err_improve": 0.0028481313412900278,
    "time": 21863.372802734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2.7e-294) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* F -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0))) (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (* 2.0 F)))))",
    "output_parens": 46,
    "avg_bits_err_input": 52.022102674683836,
    "avg_bits_err_output": 46.911651050123076,
    "avg_bits_err_improve": 5.11045162456076,
    "time": 37880.240966796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 5.5e+155) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI)) 0.0)",
    "output_parens": 14,
    "avg_bits_err_input": 29.622284869091633,
    "avg_bits_err_output": 27.477120355032895,
    "avg_bits_err_improve": 2.145164514058738,
    "time": 28296.31689453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -5e-310) (/ (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 (* (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) F))))) (- (* A (* C 4.0)) (pow B 2.0))) (* (sqrt (* 2.0 F)) (/ (* (sqrt (- (pow B 2.0) (* A (* 4.0 C)))) (sqrt (if (!= (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) 0.0) (+ (/ (pow B 2.0) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) (+ (/ (pow (- A C) 2.0) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) (* (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (/ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* A (* 4.0 C)) (pow B 2.0)))))",
    "output_parens": 83,
    "avg_bits_err_input": 52.20052644554488,
    "avg_bits_err_output": 46.581509790898025,
    "avg_bits_err_improve": 5.619016654646856,
    "time": 50456.076904296875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 16.173155062949267,
    "avg_bits_err_output": 16.173155062949267,
    "avg_bits_err_improve": 0,
    "time": 16853.037841796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -2e-279) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= g 0.0) (/ (* g (if (!= (- (sqrt (fma h (- h) (* g g))) g) 0.0) (* h (/ h (- g (sqrt (fma h (- h) (* g g)))))) (+ g (sqrt (fma h (- h) (* g g)))))) (- g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) (- g)) 0.0) (* h (/ h (- (- g) (pow (fma g g (* h (- h))) 0.5)))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 79,
    "avg_bits_err_input": 36.10844214362376,
    "avg_bits_err_output": 1.7537338304331023,
    "avg_bits_err_improve": 34.354708313190656,
    "time": 41176.163330078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) 3.0))) (* (sin (expm1 (log1p (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.990130264069442,
    "avg_bits_err_output": 0.018344360937770435,
    "avg_bits_err_improve": 0.9717859031316716,
    "time": 23500.543212890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.6863101077719279,
    "avg_bits_err_output": 0.6863101077719279,
    "avg_bits_err_improve": 0,
    "time": 8954.5322265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-250) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ (* a1 (/ a2 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+263) (/ (* a1 a2) (* b1 b2)) (/ (* a1 (/ a2 b2)) b1)))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.756077792918333,
    "avg_bits_err_output": 3.9555373012716415,
    "avg_bits_err_improve": 7.800540491646691,
    "time": 11600.021728515625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4106678932626421,
    "avg_bits_err_output": 0.35653740100229847,
    "avg_bits_err_improve": 0.05413049226034361,
    "time": 8119.667236328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(log1p (if (!= (- (+ x -1.0) (hypot 1.0 x)) 0.0) (/ (+ x x) (if (!= x 0.0) (+ (* x (/ x x)) (+ (/ 1.0 (/ -1.0 x)) (* (/ x x) (- (hypot 1.0 x) (+ x -1.0))))) (+ (hypot 1.0 x) (- 1.0 x)))) (+ (hypot 1.0 x) (+ x -1.0))))",
    "output_parens": 27,
    "avg_bits_err_input": 53.188717752877125,
    "avg_bits_err_output": 14.751942555116797,
    "avg_bits_err_improve": 38.436775197760326,
    "time": 14026.095703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.688435062155849,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.688435062155849,
    "time": 2604.135009765625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- (/ x (- -1.0 x)) (/ 1.0 (- -1.0 x))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.01525,
    "avg_bits_err_output": 0.015665241011860922,
    "avg_bits_err_improve": -0.0004152410118609222,
    "time": 3473.88671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1244.976806640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (- (+ 3.0 (/ 2.0 (* r r))) (* (* (* r w) (* r w)) (/ (- 0.375 (* v 0.25)) (- 1.0 v)))) 4.5)",
    "output_parens": 13,
    "avg_bits_err_input": 13.409354168210111,
    "avg_bits_err_output": 0.35499851289605566,
    "avg_bits_err_improve": 13.054355655314055,
    "time": 23424.75341796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (+ (* x1 (* (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0)) (* x1 -6.0))) (/ (fma (- 3.0 (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (* (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (* x1 -2.0)) (fma (- (fma 3.0 (* x1 x1) (* 2.0 x2))) (* x1 (- -6.0 (/ (* (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) -2.0) (fma x1 x1 1.0)))) (* (fma 3.0 (* x1 x1) (* 2.0 x2)) (* x1 (- -6.0 (/ (* (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) -2.0) (fma x1 x1 1.0))))))) (- -1.0 (* x1 x1))))))))))",
    "output_parens": 79,
    "avg_bits_err_input": 0.5119075524366935,
    "avg_bits_err_output": 0.2939049024189176,
    "avg_bits_err_improve": 0.2180026500177759,
    "time": 71783.02172851562,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= u -2e-19) (/ (* (/ v (+ t1 u)) (* t1 -4.0)) (+ u (+ u (+ (+ t1 (+ t1 u)) (+ t1 (+ t1 u)))))) (if (<= u 4.5e-61) (* v (/ (/ (- t1) (+ t1 u)) (+ t1 u))) (/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))))",
    "output_parens": 28,
    "avg_bits_err_input": 18.199758453382344,
    "avg_bits_err_output": 0.34008543252641793,
    "avg_bits_err_improve": 17.859673020855926,
    "time": 7389.639892578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (/ (* x x) 7.751569170074954)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.24974869440854447,
    "avg_bits_err_output": 0.20294396125465514,
    "avg_bits_err_improve": 0.04680473315388933,
    "time": 8535.2470703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002625,
    "avg_bits_err_output": 0.002625,
    "avg_bits_err_improve": 0,
    "time": 3396.388916015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* (- (/ 0.5 a) (/ 0.5 b)) (/ PI (+ a b))) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.513709106071017,
    "avg_bits_err_output": 0.2818169187611776,
    "avg_bits_err_improve": 14.231892187309839,
    "time": 17502.974853515625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (- (/ -1.0 (- (exp (- x (* eps x))))) (/ (- (/ -1.0 (exp (- x (* eps x)))) (/ -1.0 (exp (fma eps x x)))) eps)) (/ 1.0 (- (exp (fma eps x x))))) 2.0)",
    "output_parens": 21,
    "avg_bits_err_input": 29.52543822715212,
    "avg_bits_err_output": 0.9039163401622227,
    "avg_bits_err_improve": 28.621521886989896,
    "time": 23911.107177734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 0,
    "time": 4658.908447265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.017875,
    "avg_bits_err_output": 0.017875,
    "avg_bits_err_improve": 0,
    "time": 11760.4365234375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ (* (/ (* 4.0 t) (+ t 1.0)) t) (+ 1.0 t))) (+ 2.0 (/ (* (/ (* 4.0 t) (+ t 1.0)) t) (+ 1.0 t))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.047625,
    "avg_bits_err_output": 0.08725,
    "avg_bits_err_improve": -0.039624999999999994,
    "time": 8982.803955078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3133.03662109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8291.115478515625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2930.6396484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.856874630548388,
    "avg_bits_err_output": 0.2415,
    "avg_bits_err_improve": 7.615374630548388,
    "time": 40549.03369140625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.5660326112087155,
    "avg_bits_err_output": 7.5660326112087155,
    "avg_bits_err_improve": 0,
    "time": 18339.389892578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.333745352421747,
    "avg_bits_err_output": 0.04557496486999745,
    "avg_bits_err_improve": 15.28817038755175,
    "time": 14668.99658203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (pow (pow (exp 10.0) x) x) (log (exp (cos x))))",
    "output_parens": 7,
    "avg_bits_err_input": 3.5732909029815776,
    "avg_bits_err_output": 1.2732760218189596,
    "avg_bits_err_improve": 2.300014881162618,
    "time": 16767.498779296875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -2e+73) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (* (/ (+ x x) (+ x (/ 1.0 x))) (/ 1.0 (+ x x))) (/ x (fma x x 1.0))) (if (<= x 2e-26) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (* (/ (+ x x) (+ x (/ 1.0 x))) (/ 1.0 (+ x x))) (/ x (fma x x 1.0)))))",
    "output_parens": 45,
    "avg_bits_err_input": 14.903628770797948,
    "avg_bits_err_output": 0.06425,
    "avg_bits_err_improve": 14.839378770797948,
    "time": 11438.823974609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.26257073515229,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.26257073515229,
    "time": 6356.164306640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.62585231336359,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 38.625352313363585,
    "time": 4125.562255859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.295125,
    "avg_bits_err_improve": 63.704875,
    "time": 18321.09033203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ (* t 1.6e-47) 4e-16) t)",
    "output_parens": 3,
    "avg_bits_err_input": 61.843251581151,
    "avg_bits_err_output": 0.3581462406251803,
    "avg_bits_err_improve": 61.48510534052582,
    "time": 15623.731201171875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* a (/ (* c 4.0) (- (sqrt (fma -4.0 (* a c) (* b b))) b))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.13804826137772,
    "avg_bits_err_output": 21.299852918100903,
    "avg_bits_err_improve": 11.838195343276816,
    "time": 27467.5830078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (if (!= (/ b (* a -2.0)) 0.0) (+ (/ 1.0 (/ 1.0 (/ b (* a -2.0)))) (/ (* (/ b (* a -2.0)) (/ 0.0 (* a 2.0))) (/ b (* a -2.0)))) (/ (- (sqrt (fma b b (* (* a c) -4.0))) b) (* a 2.0))) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 50,
    "avg_bits_err_input": 33.70310996181358,
    "avg_bits_err_output": 20.36221805217462,
    "avg_bits_err_improve": 13.340891909638962,
    "time": 26704.976318359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2139.568603515625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.778903636442365,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 39.76665363644236,
    "time": 4034.07666015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(- (/ (* x (+ x y)) (fma y y (* x x))) (* (/ (+ y x) (fma y y (* x x))) y))",
    "output_parens": 11,
    "avg_bits_err_input": 20.43269442652045,
    "avg_bits_err_output": 20.386496452484796,
    "avg_bits_err_improve": 0.04619797403565329,
    "time": 11048.15966796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6682673616342902,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6682673616342902,
    "time": 6954.521240234375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(+ (* a (+ b c)) (* a d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.038,
    "avg_bits_err_output": 0.040125,
    "avg_bits_err_improve": -0.002125000000000002,
    "time": 5143.153564453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (+ (- (* b (+ b a))) (+ (- (* b b) (* a (+ b a))) (+ (* a (+ b (+ b a))) (* a (+ b (+ b a)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.02454248125036058,
    "avg_bits_err_output": 0.02820300781475362,
    "avg_bits_err_improve": -0.00366052656439304,
    "time": 5135.1318359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0.013375,
    "time": 2588.010498046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 2335.41748046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ a (+ c b))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40139417344137657,
    "avg_bits_err_output": 0.237875,
    "avg_bits_err_improve": 0.16351917344137656,
    "time": 7659.83837890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (* (cos (* x -2.0)) 0.5) 0.0) (/ (+ (* (* (cos (* x -2.0)) 0.5) (* (cos (* x -2.0)) 0.5)) (* (* (cos (* x -2.0)) 0.5) -0.5)) (* (cos (* x -2.0)) 0.5)) (+ (pow (cos x) 2.0) -1.0)) (- -1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 33,
    "avg_bits_err_input": 30.175013497041636,
    "avg_bits_err_output": 30.11882626905762,
    "avg_bits_err_improve": 0.05618722798401521,
    "time": 11772.184814453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (if (!= (sqrt (- (* x x) eps)) 0.0) (/ (fma x (+ x (sqrt (- (* x x) eps))) (- eps)) (sqrt (- (* x x) eps))) (+ x (sqrt (- (* x x) eps))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 30,
    "avg_bits_err_input": 24.807716904491198,
    "avg_bits_err_output": 0.060901128127343725,
    "avg_bits_err_improve": 24.746815776363853,
    "time": 13566.894775390625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (pow (sin x) 2.0) 0.0) (/ (if (!= (pow (sin x) 4.0) 0.0) (/ (fma (* x x) (pow (sin x) 6.0) (- (pow (sin x) 8.0))) (pow (sin x) 4.0)) (- (* x (* x (pow (sin x) 2.0))) (pow (sin x) 4.0))) (pow (sin x) 2.0)) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 43,
    "avg_bits_err_input": 30.112599360710764,
    "avg_bits_err_output": 29.992579465715036,
    "avg_bits_err_improve": 0.1200198949957283,
    "time": 35909.984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005875,
    "avg_bits_err_output": 0.005875,
    "avg_bits_err_improve": 0,
    "time": 2312.860107421875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (* 100.0 (/ (pow (+ (/ i n) 1.0) n) (/ i n))) (/ 100.0 (/ i n))))",
    "output_parens": 24,
    "avg_bits_err_input": 47.77211882117193,
    "avg_bits_err_output": 13.948016892505029,
    "avg_bits_err_improve": 33.8241019286669,
    "time": 25528.656005859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.981051375107914,
    "avg_bits_err_output": 22.7390854082901,
    "avg_bits_err_improve": 3.241965966817812,
    "time": 16170.581787109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 1e+308) (fma b (/ c (+ (* d d) (* c c))) (/ (* a (- d)) (+ (* d d) (* c c)))) (+ (* d (/ (- a) (fma d d (* c c)))) (* c (/ b (fma d d (* c c))))))",
    "output_parens": 30,
    "avg_bits_err_input": 26.025556527964095,
    "avg_bits_err_output": 23.71876689849359,
    "avg_bits_err_improve": 2.3067896294705044,
    "time": 20330.485107421875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (- ux (* ux maxCos)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.036,
    "avg_bits_err_output": 0.022500203512582077,
    "avg_bits_err_improve": 0.01349979648741792,
    "time": 9093.7470703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- (- (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) (- (+ ux ux) (* ux ux))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.628666110642111,
    "avg_bits_err_output": 0.5285418970921825,
    "avg_bits_err_improve": 13.100124213549929,
    "time": 26432.673583984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (if (!= (exp (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (* (expm1 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (exp (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (exp (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (expm1 (pow (fma ux maxCos (- 1.0 ux)) 2.0))))))))",
    "output_parens": 32,
    "avg_bits_err_input": 13.67249297037591,
    "avg_bits_err_output": 12.616183499128702,
    "avg_bits_err_improve": 1.0563094712472072,
    "time": 31447.736083984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (+ 1.0 (fma uy (* PI 2.0) -1.0))) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output_parens": 35,
    "avg_bits_err_input": 0.33726015310460555,
    "avg_bits_err_output": 0.34320560817831575,
    "avg_bits_err_improve": -0.005945455073710193,
    "time": 41722.626953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (if (!= (- (* (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) 2.0) (pow (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) 2.0)) 0.0) (/ (- (pow (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) 2.0) (pow (- (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) (pow (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) 2.0)) 2.0)) (- (* (log (+ 1.0 (expm1 (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax))))))) 2.0) (pow (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) 2.0))) (pow (cos (atan (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)))) 2.0)) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 105,
    "avg_bits_err_input": 0.20730650370629405,
    "avg_bits_err_output": 0.20797707311730299,
    "avg_bits_err_improve": -0.0006705694110089311,
    "time": 39798.460693359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (log1p (expm1 (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5367695534358211,
    "avg_bits_err_output": 0.5409488768743127,
    "avg_bits_err_improve": -0.004179323438491589,
    "time": 21288.07080078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (/ u1 (* (- 1.0 u1) 4.0)) (/ (+ u1 (+ u1 u1)) (- 4.0 (* u1 4.0))))) (cos (* 6.28318530718 u2)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.3323867862721689,
    "avg_bits_err_output": 0.3482194600911634,
    "avg_bits_err_improve": -0.015832673818994503,
    "time": 22588.498779296875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.3336518788743524,
    "avg_bits_err_output": 0.3335221328930775,
    "avg_bits_err_improve": 0.0001297459812748536,
    "time": 28032.31787109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06429548788115326,
    "avg_bits_err_output": 0.044359101830411404,
    "avg_bits_err_improve": 0.019936386050741856,
    "time": 15123.402099609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (+ (/ (fabs x) (- s)) (* (log1p (exp (/ (fabs x) (- s)))) -2.0))) s)",
    "output_parens": 12,
    "avg_bits_err_input": 0.14993301787864208,
    "avg_bits_err_output": 0.1363613549783529,
    "avg_bits_err_improve": 0.013571662900289189,
    "time": 20747.8125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6669101577778684,
    "avg_bits_err_output": 0.6669101577778684,
    "avg_bits_err_improve": 0,
    "time": 22724.281982421875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (- (+ v (* v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)))) v))",
    "output_parens": 9,
    "avg_bits_err_input": 0.15813005669845615,
    "avg_bits_err_output": 0.1700689679394885,
    "avg_bits_err_improve": -0.011938911241032357,
    "time": 22187.883544921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.4823853075992357,
    "avg_bits_err_output": 2.4797694026941106,
    "avg_bits_err_improve": 0.0026159049051250882,
    "time": 38530.430419921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ (* (/ 0.5 v) (/ 0.5 v)) (* (exp (* sinTheta_i (/ sinTheta_O v))) (sinh (/ 1.0 v)))) (+ cosTheta_i cosTheta_i)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.46618866059225506,
    "avg_bits_err_output": 0.37502384815858003,
    "avg_bits_err_improve": 0.09116481243367502,
    "time": 27103.782958984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (pow (exp (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) (+ v v))) 2.0) (expm1 (log1p (* (/ 0.5 v) (exp 0.6931)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.11093281078861096,
    "avg_bits_err_output": 0.15282138213925994,
    "avg_bits_err_improve": -0.04188857135064898,
    "time": 26893.2265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (+ (- 1.0 (* alpha alpha)) (- 1.0 (* alpha alpha))) (* -2.0 (log (pow (* alpha alpha) PI)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 14,
    "avg_bits_err_input": 0.466228432430596,
    "avg_bits_err_output": 0.41832906598496217,
    "avg_bits_err_improve": 0.047899366445633806,
    "time": 23371.7724609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(+ (/ (* (log (/ 1.0 (if (!= (+ (* u 1.3333333333333333) 1.3333333333333333) 0.0) (/ (fma u (* u 1.7777777777777777) -1.7777777777777777) (fma u -1.3333333333333333 -1.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)))) (* 3.0 s)) 2.0) (/ (* (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) (* 3.0 s)) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 1.3193486567454937,
    "avg_bits_err_output": 1.1221758158936952,
    "avg_bits_err_improve": 0.19717284085179854,
    "time": 29021.111572265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (- (log1p (* u -4.0))) s)",
    "output_parens": 4,
    "avg_bits_err_input": 12.206946242590604,
    "avg_bits_err_output": 0.20225,
    "avg_bits_err_improve": 12.004696242590605,
    "time": 21108.29248046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (* r -0.3333333333333333) s))) (* PI (/ (* s r) 0.16666666666666666))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12661813465590116,
    "avg_bits_err_output": 0.13916720256155896,
    "avg_bits_err_improve": -0.012549067905657796,
    "time": 31055.576416015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8848375306681342,
    "avg_bits_err_output": 0.6833279153654704,
    "avg_bits_err_improve": 0.20150961530266376,
    "time": 30203.954833984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* cosTheta (sqrt PI))) (exp (* (- cosTheta) cosTheta)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6889490988543148,
    "avg_bits_err_output": 0.47418458800040514,
    "avg_bits_err_improve": 0.21476451085390963,
    "time": 19592.086669921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(log1p (expm1 (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.639527819892129,
    "avg_bits_err_output": 0.5343038998540298,
    "avg_bits_err_improve": 13.1052239200381,
    "time": 21198.013916015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.688588634235135,
    "avg_bits_err_output": 0.31868256877212164,
    "avg_bits_err_improve": 13.369906065463013,
    "time": 19303.583984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.112642639836032,
    "avg_bits_err_output": 0.3099387218755409,
    "avg_bits_err_improve": 13.802703917960491,
    "time": 16368.16162109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ (/ cos2phi alphax) (- alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.548936959150813,
    "avg_bits_err_output": 0.5063287603721196,
    "avg_bits_err_improve": 12.042608198778694,
    "time": 18003.22900390625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (+ (* (/ (tan (* PI l)) (+ F F)) 0.5) (/ (* (* (tan (* PI l)) 6.0) 0.5) (+ (+ F F) (+ F F)))) F))",
    "output_parens": 17,
    "avg_bits_err_input": 16.827125798040637,
    "avg_bits_err_output": 12.661926255785216,
    "avg_bits_err_improve": 4.16519954225542,
    "time": 20850.458251953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21240808281331133,
    "avg_bits_err_output": 0.1566462406251803,
    "avg_bits_err_improve": 0.055761842188131044,
    "time": 16125.16845703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.72987245158614,
    "avg_bits_err_output": 10.531957499136015,
    "avg_bits_err_improve": 3.197914952450125,
    "time": 21464.051513671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log1p (+ (/ (+ (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0))) (if (!= (exp (* PI (/ f 4.0))) 0.0) (/ (expm1 (* PI (* (/ f 4.0) 2.0))) (exp (* PI (/ f 4.0)))) (- (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0))))) -1.0)) (/ PI -4.0))",
    "output_parens": 32,
    "avg_bits_err_input": 61.54822637419554,
    "avg_bits_err_output": 2.019071822497676,
    "avg_bits_err_improve": 59.529154551697864,
    "time": 43860.289794921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (+ x 1.0) (+ -1.0 x)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.43996276536648,
    "avg_bits_err_output": 34.04807956843715,
    "avg_bits_err_improve": 9.391883196929328,
    "time": 26173.83251953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.8436816310052255,
    "avg_bits_err_output": 0.21328101562950708,
    "avg_bits_err_improve": 3.6304006153757182,
    "time": 32432.304443359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (log (+ 1.0 (expm1 (/ 1.0 (sqrt (+ (pow (* (* l (/ 2.0 Om)) (sin ky)) 2.0) (+ 1.0 (pow (* (* l (/ 2.0 Om)) (sin kx)) 2.0)))))))) 0.5)))",
    "output_parens": 20,
    "avg_bits_err_input": 1.0800849081295463,
    "avg_bits_err_output": 0.00575,
    "avg_bits_err_improve": 1.0743349081295464,
    "time": 12752.977783203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (if (!= (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (fma 2.0 (pow (/ t l) 2.0) 1.0))) 0.0) (/ (/ (- 1.0 (pow (/ Om Omc) 2.0)) (fma 2.0 (pow (/ t l) 2.0) 1.0)) (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (fma 2.0 (* (/ t l) (/ t l)) 1.0)))) (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (fma 2.0 (pow (/ t l) 2.0) 1.0)))))",
    "output_parens": 36,
    "avg_bits_err_input": 10.384251990995761,
    "avg_bits_err_output": 10.411457458358989,
    "avg_bits_err_improve": -0.027205467363227598,
    "time": 19284.3828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(* (sqrt (* 2.0 (fabs (- t (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* l (* (/ l Om) 2.0))))))) (* (sqrt (fabs n)) (sqrt (fabs U))))",
    "output_parens": 19,
    "avg_bits_err_input": 34.65783381182702,
    "avg_bits_err_output": 16.462877982687743,
    "avg_bits_err_improve": 18.194955829139275,
    "time": 43254.394775390625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t 1e+24) (/ 2.0 (* (* (tan k) (/ (sin k) l)) (/ (* (/ (/ k l) t) (* k (pow t 3.0))) t))) (/ 2.0 (* (/ k t) (/ (* (/ k t) (* (pow t 3.0) (* (tan k) (/ (sin k) l)))) l))))",
    "output_parens": 26,
    "avg_bits_err_input": 47.600965719084996,
    "avg_bits_err_output": 30.380333076744325,
    "avg_bits_err_improve": 17.22063264234067,
    "time": 49653.354736328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* (- (tan k)) (* (- (* (+ 2.0 (pow (/ k t) 2.0)) (/ (pow t 3.0) l))) (sin k))) l))",
    "output_parens": 14,
    "avg_bits_err_input": 32.70258891534153,
    "avg_bits_err_output": 28.352338729936438,
    "avg_bits_err_improve": 4.350250185405091,
    "time": 25573.1142578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (if (!= (/ 1.0 (sqrt 2.0)) 0.0) (/ 8.0 (/ 16.0 (sqrt 2.0))) (/ 1.0 (sqrt 2.0))) (* (cos th) (fma a1 a1 (* a2 a2))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.5150255672126525,
    "avg_bits_err_output": 0.45635282189284965,
    "avg_bits_err_improve": 0.05867274531980282,
    "time": 23978.733642578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* PI (* n 2.0)) (* k -0.5)) (/ (sqrt (* PI (* n 2.0))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5365099251197049,
    "avg_bits_err_output": 0.4255190294052252,
    "avg_bits_err_improve": 0.11099089571447968,
    "time": 19406.2060546875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (/ (* (- (expm1 (* l -2.0))) J) (exp (- l))) (cos (/ K 2.0))) U)",
    "output_parens": 11,
    "avg_bits_err_input": 17.293928584652306,
    "avg_bits_err_output": 0.09820996250072114,
    "avg_bits_err_improve": 17.195718622151585,
    "time": 24998.880615234375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (if (!= (* (- n m) (- K)) 0.0) (* (* K (- n m)) (* K (/ (+ n m) (* K (- n m))))) (* K (+ n m))) 2.0) M)) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n))))))",
    "output_parens": 32,
    "avg_bits_err_input": 15.446249203110485,
    "avg_bits_err_output": 15.453154761794083,
    "avg_bits_err_improve": -0.006905558683598656,
    "time": 19259.8505859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.973542481250362,
    "avg_bits_err_output": 17.973542481250362,
    "avg_bits_err_improve": 0,
    "time": 34771.688720703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ (* M D) (* 2.0 d)) 1e-187) (* w0 (sqrt (- 1.0 (* (* D (/ (/ M 2.0) d)) (/ (/ (* h (* D (/ M d))) l) 2.0))))) (if (<= (/ (* M D) (* 2.0 d)) 1e+127) (* w0 (sqrt (- 1.0 (/ (* (pow (/ (/ (* M D) d) 2.0) 2.0) h) l)))) (* w0 (sqrt (- 1.0 (/ (/ (* M (* (* D M) (/ (/ (* h D) l) (+ d d)))) d) 2.0))))))",
    "output_parens": 43,
    "avg_bits_err_input": 14.15935888795238,
    "avg_bits_err_output": 8.972340905169933,
    "avg_bits_err_improve": 5.1870179827824465,
    "time": 28266.791748046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 0.0) (* c0 (* (sqrt (- (/ A l))) (sqrt (/ -1.0 V)))) (if (<= (/ A (* V l)) 2e+302) (* c0 (sqrt (* (/ (/ V (* V l)) (+ V V)) (+ A A)))) (/ (* (- (sqrt (/ A (- l)))) (* c0 (sqrt (/ -1.0 V)))) -1.0)))",
    "output_parens": 32,
    "avg_bits_err_input": 19.553756028197697,
    "avg_bits_err_output": 11.842825602430294,
    "avg_bits_err_improve": 7.710930425767403,
    "time": 23083.959716796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= d -3e+142) (* (/ c0 2.0) (/ (if (!= (- (* d (/ (/ (* d c0) w) (* D (* D h)))) (sqrt (- (pow (* d (/ (/ (* d c0) w) (* D (* D h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (/ (* d c0) w) (* D (* D h)))) (sqrt (* (+ M (* d (* (/ d w) (/ c0 (* h (* D D)))))) (- (* d (* (/ d w) (/ c0 (* h (* D D))))) M)))))) (fma d (/ (/ (* d c0) w) (* D (* D h))) (sqrt (- (pow (* d (/ (/ (* d c0) w) (* D (* D h)))) 2.0) (* M M))))) w)) (if (<= d -8e-274) (/ (/ (* c0 (if (!= (- (* d (* d (/ (/ (/ c0 h) (* D w)) D))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 h) (* D w)) D))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* d (/ (/ (/ c0 h) (* D w)) D))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 h) (* D w)) D))) 2.0) (* M M)))))) (fma d (* d (/ (/ (/ c0 h) (* D w)) D)) (sqrt (- (pow (* d (* d (/ (/ (/ c0 h) (* D w)) D))) 2.0) (* M M)))))) w) 2.0) (if (<= d 1.22e-108) (/ (/ (* c0 (+ (/ (* (/ c0 h) (pow (/ d D) 2.0)) w) (sqrt (fma M (- M) (pow (/ (* (/ c0 h) (pow (/ d D) 2.0)) w) 2.0))))) w) 2.0) (if (<= d 1.62e+91) (/ (/ (* c0 (if (!= (- (/ (* d (* d c0)) (* D (* D (* w h)))) (sqrt (- (pow (/ (* d (* d c0)) (* D (* D (* w h)))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (/ (* d (* d c0)) (* D (* D (* w h)))) (sqrt (- (pow (/ (* d (* d c0)) (* D (* D (* w h)))) 2.0) (* M M))))) (fma d (/ (* d c0) (* D (* D (* w h)))) (sqrt (- (pow (/ (* d (* d c0)) (* D (* D (* w h)))) 2.0) (* M M)))))) w) 2.0) (if (<= d 5e+241) (* (/ c0 2.0) (/ (if (!= (- (* d (/ (/ (* d c0) w) (* D (* D h)))) (sqrt (- (pow (* d (/ (/ (* d c0) w) (* D (* D h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (/ (* d c0) w) (* D (* D h)))) (sqrt (* (+ M (* d (* (/ d w) (/ c0 (* h (* D D)))))) (- (* d (* (/ d w) (/ c0 (* h (* D D))))) M)))))) (fma d (/ (/ (* d c0) w) (* D (* D h))) (sqrt (- (pow (* d (/ (/ (* d c0) w) (* D (* D h)))) 2.0) (* M M))))) w)) (/ (/ (* c0 (if (!= (- (* d (* d (/ (/ (/ c0 h) (* D w)) D))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 h) (* D w)) D))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* d (/ (/ (/ c0 h) (* D w)) D))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 h) (* D w)) D))) 2.0) (* M M)))))) (fma d (* d (/ (/ (/ c0 h) (* D w)) D)) (sqrt (- (pow (* d (* d (/ (/ (/ c0 h) (* D w)) D))) 2.0) (* M M)))))) w) 2.0))))))",
    "output_parens": 325,
    "avg_bits_err_input": 59.488770402858144,
    "avg_bits_err_output": 31.689889759783863,
    "avg_bits_err_improve": 27.79888064307428,
    "time": 101848.2109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (- (sqrt (/ (* d d) (* h l))) (* (/ (pow (/ (/ (* M D) d) 2.0) 2.0) l) (* (* h 0.5) (sqrt (/ (* d d) (* h l)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 1e+287) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (fma 0.5 (* h (* (* (/ D d) (/ M 2.0)) (/ (* (/ D d) (/ M 2.0)) l))) -1.0) (- (* (sqrt (/ d (* h l))) (sqrt d))))))",
    "output_parens": 81,
    "avg_bits_err_input": 26.928219754942614,
    "avg_bits_err_output": 21.60390877772158,
    "avg_bits_err_improve": 5.324310977221035,
    "time": 50872.17236328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (exp (* 1.0 (log (/ (if (!= (- (/ -0.5 (hypot 1.0 x)) 0.5) 0.0) (/ (+ 0.25 (/ -0.25 (fma x x 1.0))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 36,
    "avg_bits_err_input": 15.2251660647968,
    "avg_bits_err_output": 14.715232381934982,
    "avg_bits_err_improve": 0.5099336828618188,
    "time": 22501.53955078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ 1.3333333333333333 (* (* PI (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9836462406251804,
    "avg_bits_err_output": 0.013365601562950724,
    "avg_bits_err_improve": 0.9702806390622296,
    "time": 5371.74169921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (- (/ (/ (+ 1.0 (* (* v v) -5.0)) (* (fma v v -1.0) (* (sqrt (- (fma v (* v 6.0) -2.0))) PI))) t)) 0.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.44761267390050846,
    "avg_bits_err_output": 0.10862744375108174,
    "avg_bits_err_improve": 0.3389852301494267,
    "time": 24543.574462890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (- 1.0 (* 3.0 (* v v)))) (* (/ (sqrt 2.0) 4.0) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012719360937770433,
    "avg_bits_err_output": 0.01341748125036058,
    "avg_bits_err_improve": -0.0006981203125901465,
    "time": 5626.67626953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5217996194694392,
    "avg_bits_err_output": 0.5217996194694392,
    "avg_bits_err_improve": 0,
    "time": 10129.64208984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (/ (pow k m) (- (* k (+ k 10.0)) -1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 2.06863836397435,
    "avg_bits_err_output": 2.019546685187866,
    "avg_bits_err_improve": 0.04909167878648413,
    "time": 9383.07177734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (pow (exp (/ (- EDonor (- (- Ec Vef) mu)) (+ KbT KbT))) 2.0))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.017803982015155383,
    "avg_bits_err_output": 0.018133660755232293,
    "avg_bits_err_improve": -0.0003296787400769094,
    "time": 10246.29638671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (* (* b b) (+ (* b b) (* a (+ a a))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.1843212018417508,
    "avg_bits_err_output": 0.0933658050755328,
    "avg_bits_err_improve": 0.090955396766218,
    "time": 8665.497802734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (if (!= (* (fma a a (* b b)) (* a a)) 0.0) (+ (/ 1.0 (/ 1.0 (* a (* a (fma a a (* b b)))))) (* (* b b) (/ (/ 1.0 (/ 1.0 (* a (fma a a (* b b))))) a))) (pow (fma a a (* b b)) 2.0)) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 43,
    "avg_bits_err_input": 0.1849417761643687,
    "avg_bits_err_output": 0.17964251328273606,
    "avg_bits_err_improve": 0.005299262881632627,
    "time": 24269.18359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (+ (pow a 4.0) (fma 2.0 (pow (* a b) 2.0) (pow b 4.0))) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 0.18395327522396127,
    "avg_bits_err_output": 0.02358065748693716,
    "avg_bits_err_improve": 0.1603726177370241,
    "time": 24101.997802734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (log (exp (+ (/ x (sqrt (fma x x (* p (* 4.0 p))))) 1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.511156673774472,
    "avg_bits_err_output": 13.514025263642404,
    "avg_bits_err_improve": -0.0028685898679317035,
    "time": 20852.0888671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.110354816562136,
    "avg_bits_err_output": 0.063,
    "avg_bits_err_improve": 41.047354816562134,
    "time": 4978.87109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (/ (pow (tan x) 2.0) (+ x (tan x)))) (- x (tan x))))",
    "output_parens": 19,
    "avg_bits_err_input": 31.762109247225116,
    "avg_bits_err_output": 31.22462315643795,
    "avg_bits_err_improve": 0.5374860907871657,
    "time": 23821.779541015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (+ (/ 0.0 a) (/ b_2 (- a))) (if (<= b_2 1.35e+154) (if (!= (/ (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2) a) 0.0) (- (/ (/ (* c a) a) (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2)) 0.0) (/ (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2) a)) (/ (if (!= (- b_2) 0.0) (fma a (/ c (* b_2 -2.0)) (* c (/ (/ a b_2) -2.0))) (- b_2)) a)))",
    "output_parens": 44,
    "avg_bits_err_input": 34.13426978784239,
    "avg_bits_err_output": 19.077311967514607,
    "avg_bits_err_improve": 15.056957820327785,
    "time": 21508.113037109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.2973491957779,
    "avg_bits_err_output": 22.026713830116645,
    "avg_bits_err_improve": 12.270635365661253,
    "time": 19413.697265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.54762944792096,
    "avg_bits_err_output": 30.758613942105768,
    "avg_bits_err_improve": 0.7890155058151933,
    "time": 17265.174560546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.52726198764511,
    "avg_bits_err_output": 10.472362179258845,
    "avg_bits_err_improve": 22.054899808386267,
    "time": 27250.86376953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (- (- (exp (log (+ 2.0 (exp (- (log1p N) (log N)))))) 1.0) 2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.188278670226154,
    "avg_bits_err_output": 29.188404941350782,
    "avg_bits_err_improve": -0.0001262711246283743,
    "time": 15151.681640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ (- (/ (- x) (+ -1.0 (/ -1.0 x))) x) x) x)",
    "output_parens": 7,
    "avg_bits_err_input": 14.899962691339875,
    "avg_bits_err_output": 14.642381976118074,
    "avg_bits_err_improve": 0.2575807152218008,
    "time": 14695.149658203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(+ (fma (cos x) (cos eps) (- (cos x))) (- (* (sin x) (sin eps))))",
    "output_parens": 10,
    "avg_bits_err_input": 39.72788865800732,
    "avg_bits_err_output": 6.044200484942291,
    "avg_bits_err_improve": 33.683688173065036,
    "time": 23629.61328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.449209773693745,
    "avg_bits_err_output": 29.161348394598217,
    "avg_bits_err_improve": 0.2878613790955278,
    "time": 14157.002197265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (/ (- 1.0 (cos x)) (* (sin x) 2.0)) 0.0) (/ (+ (/ (* (- 1.0 (cos x)) (- (* (cos x) (/ 0.5 (sin x))) (/ 0.5 (sin x)))) (* (sin x) -2.0)) (* (/ (- 1.0 (cos x)) (* (sin x) 2.0)) (/ (- 1.0 (cos x)) (* (sin x) 2.0)))) (/ (- 1.0 (cos x)) (* (sin x) 2.0))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 42,
    "avg_bits_err_input": 29.38121018738277,
    "avg_bits_err_output": 29.438542948589152,
    "avg_bits_err_improve": -0.05733276120638209,
    "time": 28049.93701171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.09578963633692,
    "avg_bits_err_output": 22.187314640964846,
    "avg_bits_err_improve": 11.908474995372071,
    "time": 25374.78759765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (fma a (/ (* c 4.0) (- (sqrt (fma a (* c -4.0) (* b b))) b)) 0.0) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.85652725117812,
    "avg_bits_err_output": 21.930902570824657,
    "avg_bits_err_improve": 11.925624680353465,
    "time": 24327.2041015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.26492470872319,
    "avg_bits_err_output": 0.02262744375108174,
    "avg_bits_err_improve": 61.24229726497211,
    "time": 16339.486328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log (+ n 1.0)) (log n)) n)) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 63.00460421687091,
    "avg_bits_err_output": 44.199417924430115,
    "avg_bits_err_improve": 18.805186292440794,
    "time": 16763.8173828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ eps (- -1.0 eps)) (if (!= (+ 1.0 (/ 1.0 (+ eps 1.0))) 0.0) (/ (log (+ 1.0 (expm1 (+ -1.0 (/ 1.0 (pow (+ 1.0 eps) 2.0)))))) (+ -1.0 (/ -1.0 (+ eps 1.0)))) (+ 1.0 (/ -1.0 (+ eps 1.0))))))",
    "output_parens": 23,
    "avg_bits_err_input": 58.61421781599877,
    "avg_bits_err_output": 50.56412215244599,
    "avg_bits_err_improve": 8.050095663552781,
    "time": 17124.259033203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (log (+ 1.0 (expm1 (+ -1.0 (/ 1.0 (/ x (tan x))))))) (* x (/ 1.0 (/ x (tan x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 59.95428283110227,
    "avg_bits_err_output": 59.958964477347806,
    "avg_bits_err_improve": -0.004681646245536797,
    "time": 30550.892578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.32324488120562,
    "avg_bits_err_output": 29.0244882744018,
    "avg_bits_err_improve": 31.298756606803817,
    "time": 27956.620361328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.37114770170423,
    "avg_bits_err_output": 0.39732312031259015,
    "avg_bits_err_improve": 40.97382458139164,
    "time": 8702.036865234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.694040926597964,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.693415926597964,
    "time": 3355.61767578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.25158828609527,
    "avg_bits_err_output": 0.01600607606577124,
    "avg_bits_err_improve": 29.2355822100295,
    "time": 5289.545654296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (- (exp x) 2.0) (exp (- x))) 0.0) (/ (+ (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))) (+ (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0))) (fma (/ -1.0 (exp x)) (exp (- x)) (exp (* x -2.0))))) (- (- (exp x) 2.0) (exp (- x)))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 41,
    "avg_bits_err_input": 29.636062920659565,
    "avg_bits_err_output": 29.376161319071425,
    "avg_bits_err_improve": 0.25990160158814035,
    "time": 21547.072265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ -2.0 x) (if (!= (/ 1.0 (+ 1.0 x)) 0.0) (/ (+ 1.0 (/ 1.0 (/ (+ x -1.0) (+ 1.0 x)))) (+ 1.0 x)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 10.084907377362468,
    "avg_bits_err_output": 10.097874045672611,
    "avg_bits_err_improve": -0.012966668310143703,
    "time": 22758.057861328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (tan (+ x eps)) 0.0) (* (tan (+ x eps)) (if (!= (/ (+ (tan (+ x eps)) (tan x)) (tan (+ x eps))) 0.0) (/ (/ (- (tan (+ x eps)) (* (tan x) (/ (tan x) (tan (+ x eps))))) (tan (+ x eps))) (/ (+ (tan (+ x eps)) (tan x)) (tan (+ x eps)))) (/ (- (tan (+ x eps)) (tan x)) (tan (+ x eps))))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 47,
    "avg_bits_err_input": 37.269582755506676,
    "avg_bits_err_output": 37.275969131549914,
    "avg_bits_err_improve": -0.006386376043238329,
    "time": 24181.892333984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.50086927330795,
    "avg_bits_err_output": 0.15801672969029448,
    "avg_bits_err_improve": 29.342852543617653,
    "time": 12712.342529296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin eps) (cos x) (* (sin x) (cos eps))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.201022185864595,
    "avg_bits_err_output": 21.56041315542702,
    "avg_bits_err_improve": 15.640609030437574,
    "time": 19339.953369140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 20.403880175719536,
    "avg_bits_err_output": 20.403880175719536,
    "avg_bits_err_improve": 0,
    "time": 17291.045654296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(exp (* 1.0 (log1p (- (atan (+ N 1.0)) (if (!= (- 1.0 (atan N)) 0.0) (/ (fma (atan N) (atan N) -1.0) (+ (atan N) -1.0)) (+ 1.0 (atan N)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 14.088187256374939,
    "avg_bits_err_output": 14.094538667595632,
    "avg_bits_err_improve": -0.0063514112206934925,
    "time": 11110.481689453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.37658192425628,
    "avg_bits_err_output": 1.2947736393344336,
    "avg_bits_err_improve": 28.081808284921845,
    "time": 25784.989501953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (* (- m (* m m)) (- 1.0 m)) v) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.0742920849918798,
    "avg_bits_err_output": 0.07679580340980405,
    "avg_bits_err_improve": -0.0025037184179242528,
    "time": 14906.282470703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (/ b (/ -1.0 a)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.21046847030235,
    "avg_bits_err_output": 0.27086109062806485,
    "avg_bits_err_improve": 15.939607379674284,
    "time": 11457.2998046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= PI 0.0) (* (exp (* 1.0 (log (/ 0.005555555555555556 PI)))) (* angle (pow PI 2.0))) (* angle (/ PI 180.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 20,
    "avg_bits_err_input": 20.38239609746375,
    "avg_bits_err_output": 20.415392164707423,
    "avg_bits_err_improve": -0.032996067243672655,
    "time": 38919.274169921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (<= (/ angle 180.0) 2e+169) (+ (fma (* (pow a 2.0) -2.0) (* (log (+ 1.0 (expm1 (cos (* PI (/ angle 180.0)))))) (sin (* PI (/ angle 180.0)))) (* 2.0 (* (pow a 2.0) (* (cos (* PI (/ angle 180.0))) (sin (* PI (/ angle 180.0))))))) (* (cos (* PI (/ angle 180.0))) (* 2.0 (* (- (pow a 2.0) (pow b 2.0)) (sin (/ (* PI angle) -180.0)))))) (if (<= (/ angle 180.0) 5e+282) (* (* (* 2.0 (if (!= (pow b 2.0) 0.0) 0.0 (- (pow b 2.0) (pow a 2.0)))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) (* (* (cos (* PI (/ angle 180.0))) (- (pow a 2.0) (pow b 2.0))) (* (cos (+ (* PI (/ angle 180.0)) (/ PI 2.0))) 2.0))))",
    "output_parens": 71,
    "avg_bits_err_input": 31.088215511093885,
    "avg_bits_err_output": 31.302362941221883,
    "avg_bits_err_improve": -0.21414743012799775,
    "time": 43471.8046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (/ (+ (cos (- (if (!= (* PI (- -4.0 (/ angle 180.0))) 0.0) (* (* PI (- -4.0 (/ angle 180.0))) (* (/ angle 180.0) (/ PI (* PI (- -4.0 (/ angle 180.0)))))) (* PI (/ angle 180.0))) (* PI 2.0))) (cos (fma PI (/ angle 180.0) (* PI 2.0)))) 2.0)) 2.0))",
    "output_parens": 34,
    "avg_bits_err_input": 20.56853517139335,
    "avg_bits_err_output": 20.63151125479792,
    "avg_bits_err_improve": -0.06297608340457117,
    "time": 44878.716552734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17595056406367185,
    "avg_bits_err_output": 0.17411908981252194,
    "avg_bits_err_improve": 0.001831474251149906,
    "time": 17142.85498046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3189410841024603,
    "avg_bits_err_output": 0.3107861262378675,
    "avg_bits_err_improve": 0.008154957864592804,
    "time": 19766.822021484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.14049060156295073,
    "avg_bits_err_output": 0.14049060156295073,
    "avg_bits_err_improve": 0,
    "time": 17055.648681640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.351595573944635,
    "avg_bits_err_output": 16.348689768928722,
    "avg_bits_err_improve": 0.002905805015913643,
    "time": 31053.429931640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (* (/ c (+ b (+ b (+ (sqrt (fma c (* -4.0 a) (* b b))) (sqrt (fma c (* -4.0 a) (* b b))))))) -8.0)) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 28,
    "avg_bits_err_input": 52.37542226341931,
    "avg_bits_err_output": 0.16874569257769628,
    "avg_bits_err_improve": 52.206676570841616,
    "time": 25939.609130859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* c a) (* b b)))) 0.0) (* (* a -4.0) (/ c (+ b (sqrt (fma -4.0 (* c a) (* b b)))))) (- (sqrt (fma -4.0 (* c a) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.841902841350603,
    "avg_bits_err_output": 0.3459499117771798,
    "avg_bits_err_improve": 28.495952929573424,
    "time": 23973.421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 43.7664966882125,
    "avg_bits_err_output": 0.24688270782052257,
    "avg_bits_err_improve": 43.51961398039197,
    "time": 24093.27783203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (/ (- b 0.0) -2.0) a) (if (<= b -1.9e+20) (/ (/ (- b (sqrt (fma b b (* a (* c -4.0))))) -2.0) a) (/ (if (!= (- (- (sqrt (fma b b (* a (* c -4.0))))) b) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))))",
    "output_parens": 38,
    "avg_bits_err_input": 34.09730309892419,
    "avg_bits_err_output": 20.99991184575794,
    "avg_bits_err_improve": 13.097391253166254,
    "time": 27066.725830078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (if (!= (cos (- lambda1 lambda2)) 0.0) (/ (pow (cos (- lambda1 lambda2)) 2.0) (cos (- lambda1 lambda2))) (cos (- lambda1 lambda2)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.9115798475594101,
    "avg_bits_err_output": 0.9130960079365283,
    "avg_bits_err_improve": -0.0015161603771182142,
    "time": 29832.352294921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (/ (log (+ 1.0 (expm1 (+ -1.0 (/ 4.0 (fma (exp (* -2.0 x)) 2.0 (+ (exp (* x -4.0)) 1.0))))))) (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 29,
    "avg_bits_err_input": 28.889383349182452,
    "avg_bits_err_output": 28.859511894123155,
    "avg_bits_err_improve": 0.029871455059296892,
    "time": 26039.23779296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (* x -2.0)) (- -1.0 (exp (* x -2.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.0612262879322,
    "avg_bits_err_output": 0.6936580828133113,
    "avg_bits_err_improve": 57.367568205118886,
    "time": 15506.976806640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (- (exp (+ x (* x -2.0))))) 2.0)",
    "output_parens": 8,
    "avg_bits_err_input": 57.71578129667867,
    "avg_bits_err_output": 0.05396936093777043,
    "avg_bits_err_improve": 57.6618119357409,
    "time": 8093.301513671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(- (+ (/ 2.0 (+ (exp x) (exp (- x)))) 1.0) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.007719360937770434,
    "avg_bits_err_output": 0.09378928621442392,
    "avg_bits_err_improve": -0.08606992527665348,
    "time": 2965.533935546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (- (* x x) 1.0))) 5e+153) (log (+ x (sqrt (- (* x x) 1.0)))) (log x))",
    "output_parens": 12,
    "avg_bits_err_input": 31.89775,
    "avg_bits_err_output": 21.5033575867507,
    "avg_bits_err_improve": 10.3943924132493,
    "time": 4778.2412109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (if (!= (log (/ (- -1.0 x) (+ x -1.0))) 0.0) (/ 1.0 (/ 1.0 (- (+ 1.0 (log (/ (- -1.0 x) (- x 1.0)))) 1.0))) (log (/ (- -1.0 x) (+ x -1.0)))))",
    "output_parens": 19,
    "avg_bits_err_input": 58.60761187666961,
    "avg_bits_err_output": 58.605517322001106,
    "avg_bits_err_improve": 0.002094554668502724,
    "time": 21787.411865234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (- (+ (/ (sqrt (- 1.0 (* x x))) x) (/ 1.0 (+ x x))) (/ -1.0 (+ x x))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.05141524101186092,
    "avg_bits_err_output": 0.05154024101186092,
    "avg_bits_err_improve": -0.0001250000000000001,
    "time": 5016.570068359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* (* eh (cos t)) (sin (atan (/ eh (* ew (tan t))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12225,
    "avg_bits_err_output": 0.121625,
    "avg_bits_err_improve": 0.0006250000000000006,
    "time": 25431.239501953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (if (!= (cos (atan (* eh (/ (- (tan t)) ew)))) 0.0) (/ 1.0 (/ 1.0 (cos (atan (* eh (/ (- (tan t)) ew)))))) (cos (atan (* eh (/ (- (tan t)) ew)))))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.1295,
    "avg_bits_err_output": 0.1327099625007212,
    "avg_bits_err_improve": -0.0032099625007211974,
    "time": 29472.862548828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (cos (/ phi2 2.0)) (cos (/ phi1 2.0)) (* (sin (/ phi1 2.0)) (sin (/ phi2 -2.0))))) (- phi1 phi2)))",
    "output_parens": 15,
    "avg_bits_err_input": 40.385934374038776,
    "avg_bits_err_output": 0.12002312912807152,
    "avg_bits_err_improve": 40.265911244910704,
    "time": 31132.640869140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.264119382402065,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 14.254744382402064,
    "time": 6994.923095703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (if (!= (+ (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) 0.0) (/ (- (pow (cos delta) 2.0) (pow (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 2.0)) (+ (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 68,
    "avg_bits_err_input": 0.1612182612364986,
    "avg_bits_err_output": 0.16826165129180087,
    "avg_bits_err_improve": -0.007043390055302273,
    "time": 45067.24560546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.381283108553,
    "avg_bits_err_output": 0.17020545156583522,
    "avg_bits_err_improve": 52.211077656987165,
    "time": 25288.239501953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* a -3.0)))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma a (* -3.0 c) (* b b))))) (* a -3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 29.000176910769337,
    "avg_bits_err_output": 0.34037084594118905,
    "avg_bits_err_improve": 28.65980606482815,
    "time": 30140.935302734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.800473786413896,
    "avg_bits_err_output": 0.245328384382031,
    "avg_bits_err_improve": 43.55514540203186,
    "time": 26664.034423828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (pow (fma b b (* a (* c -3.0))) 0.5))) (* a 3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.136680201286005,
    "avg_bits_err_output": 22.22531338615589,
    "avg_bits_err_improve": 11.911366815130116,
    "time": 26484.104248046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (if (!= (* (+ (cos (- lambda1 lambda2)) 1.0) (* (sin phi1) (cos phi2))) 0.0) (/ (* (cos (- lambda1 lambda2)) (* (+ (cos (- lambda1 lambda2)) 1.0) (pow (* (sin phi1) (cos phi2)) 2.0))) (* (cos phi2) (* (+ (cos (- lambda1 lambda2)) 1.0) (sin phi1)))) (* (cos (- lambda1 lambda2)) (* (sin phi1) (cos phi2))))))",
    "output_parens": 43,
    "avg_bits_err_input": 13.090280293143818,
    "avg_bits_err_output": 13.128657122841862,
    "avg_bits_err_improve": -0.038376829698043124,
    "time": 40967.8486328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.57652331232844,
    "avg_bits_err_output": 0.5193195314702749,
    "avg_bits_err_improve": 29.057203780858167,
    "time": 24751.091064453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ x (+ (+ x x) (+ (+ x x) 4.0))) (+ (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (/ x (+ (+ x x) (+ (+ x x) 4.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.09420891524793744,
    "avg_bits_err_improve": -0.08270891524793744,
    "time": 10570.06640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (/ -1.0 (+ x -1.0)) (- 1.0 (/ x (+ x -1.0)))) (+ 1.0 x))",
    "output_parens": 8,
    "avg_bits_err_input": 14.87853005323882,
    "avg_bits_err_output": 12.917384746632278,
    "avg_bits_err_improve": 1.9611453066065412,
    "time": 18990.173828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -4.4e-305) (* (sqrt (- F)) (* (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C))) (/ (sqrt (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (- (* A (* C 4.0)) (pow B 2.0))))) (/ (* (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (sqrt (* (* F (- (pow B 2.0) (* A (* C 4.0)))) -2.0))) (- (* A (* 4.0 C)) (pow B 2.0))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.28084410863378,
    "avg_bits_err_output": 47.37942716919867,
    "avg_bits_err_improve": 4.901416939435109,
    "time": 48676.1357421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -140000000000.0) (* (atan (* (if (!= A 0.0) (/ (* A (if (!= (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- A C)) 0.0) (/ (- (pow B 2.0)) (- A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) A) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- A C))) (/ -1.0 B))) (/ 180.0 PI)) (* 180.0 (/ (atan (* (/ 1.0 B) (- C (+ (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) A)))) PI)))",
    "output_parens": 56,
    "avg_bits_err_input": 29.631214795776373,
    "avg_bits_err_output": 26.929484878295856,
    "avg_bits_err_improve": 2.7017299174805167,
    "time": 25420.787109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.55e-293) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- F))) (/ (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (sqrt F)) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.13494609591828,
    "avg_bits_err_output": 46.73970407053751,
    "avg_bits_err_improve": 5.395242025380767,
    "time": 45709.390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (/ (+ (+ (cbrt (/ g (+ a a))) (* (cbrt (/ g (+ a a))) (+ (cbrt (/ g (+ a a))) 1.0))) 0.0) (+ (cbrt (/ g (+ a a))) 2.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 27,
    "avg_bits_err_input": 15.375658357687337,
    "avg_bits_err_output": 15.399180351447079,
    "avg_bits_err_improve": -0.023521993759741733,
    "time": 16880.595458984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -8.2e+131) (+ (cbrt (* (/ 0.5 a) (+ (- g) (* (sqrt (- h g)) (sqrt (- (+ g h))))))) (cbrt (* (/ 0.5 a) (if (!= (- (sqrt (fma g g (- (* h h)))) g) 0.0) (/ (+ 0.0 (- (- (* h h)))) (- (sqrt (fma g g (- (* h h)))) g)) (- (- g) (sqrt (fma g g (- (* h h))))))))) (if (<= g -1e-251) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (sqrt (- (* g g) (* h h))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) (- g)) 0.0) (* h (/ h (- (- g) (pow (fma g g (* h (- h))) 0.5)))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))))))",
    "output_parens": 107,
    "avg_bits_err_input": 36.11006560959621,
    "avg_bits_err_output": 9.703817079017465,
    "avg_bits_err_improve": 26.406248530578747,
    "time": 36919.323974609375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (log (if (!= (exp (cos (- (/ (acos (/ g (- h))) 3.0) (* PI -0.6666666666666666)))) 0.0) (/ 1.0 (/ 1.0 (exp (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))) (exp (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.9898921062575732,
    "avg_bits_err_output": 0.043274264456121724,
    "avg_bits_err_improve": 0.9466178418014515,
    "time": 23536.662841796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.5634481203125902,
    "avg_bits_err_output": 0.5634481203125902,
    "avg_bits_err_improve": 0,
    "time": 11418.44677734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-291) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ (/ a1 b1) (+ b2 b2)) (+ a2 a2)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+276) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 38,
    "avg_bits_err_input": 11.160701667980266,
    "avg_bits_err_output": 2.832395895763912,
    "avg_bits_err_improve": 8.328305772216353,
    "time": 11740.22802734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.49714040828653017,
    "avg_bits_err_output": 0.44719812031259015,
    "avg_bits_err_improve": 0.049942287973940014,
    "time": 11111.74169921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.0) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 200000000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.115667577270706,
    "avg_bits_err_output": 0.2126992747693502,
    "avg_bits_err_improve": 52.90296830250136,
    "time": 12708.614501953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.680914404955915,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.680914404955915,
    "time": 2757.81201171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (if (!= (/ (- 1.0 x) (- -1.0 x)) 0.0) (/ 1.0 (/ 1.0 (/ (- 1.0 x) (+ 1.0 x)))) (/ (- 1.0 x) (+ 1.0 x))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.0145,
    "avg_bits_err_improve": -0.001125000000000001,
    "time": 9619.807373046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1311.95947265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (fma (- 0.375 (* v 0.25)) (/ (/ (* (* w (+ r r)) (* w (+ r r))) 4.0) (- 1.0 v)) 4.5))",
    "output_parens": 15,
    "avg_bits_err_input": 13.229562452244346,
    "avg_bits_err_output": 0.4742991602171144,
    "avg_bits_err_improve": 12.755263292027232,
    "time": 26062.1787109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* (* x1 x1) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)))))) (+ x1 x1)))",
    "output_parens": 47,
    "avg_bits_err_input": 0.5125338784601732,
    "avg_bits_err_output": 0.28647546261587736,
    "avg_bits_err_improve": 0.2260584158442958,
    "time": 77321.4560546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (- (- u) t1)) v) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 17.856409227374165,
    "avg_bits_err_output": 1.2323849734044607,
    "avg_bits_err_improve": 16.624024253969704,
    "time": 7525.772705078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.22539340061561777,
    "avg_bits_err_output": 0.18787673793068907,
    "avg_bits_err_improve": 0.0375166626849287,
    "time": 11725.828369140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2695.60498046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ (- (/ PI a) (/ PI b)) 2.0) (- b a)) (+ b a))",
    "output_parens": 8,
    "avg_bits_err_input": 13.761072592660604,
    "avg_bits_err_output": 0.24842725625468728,
    "avg_bits_err_improve": 13.512645336405916,
    "time": 19424.34228515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (exp (- (- x (* eps x)))) (+ (/ (/ 1.0 (exp (- x (* x eps)))) eps) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) 2.0)",
    "output_parens": 17,
    "avg_bits_err_input": 29.204602081864202,
    "avg_bits_err_output": 24.616080443215765,
    "avg_bits_err_improve": 4.588521638648437,
    "time": 19189.184814453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (- 4.0 (+ (/ (- 4.0 (/ (/ 4.0 t) (+ 1.0 (/ 1.0 t)))) (* t (+ 1.0 (/ 1.0 t)))) (/ (/ 4.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.019375,
    "avg_bits_err_output": 0.027625,
    "avg_bits_err_improve": -0.00825,
    "time": 12914.692626953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.023,
    "avg_bits_err_output": 0.023,
    "avg_bits_err_improve": 0,
    "time": 18033.07080078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (+ 2.0 (pow (* 2.0 (/ t (+ t 1.0))) 2.0)) 1.0) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.040125,
    "avg_bits_err_output": 0.035624060133390895,
    "avg_bits_err_improve": 0.004500939866609106,
    "time": 16920.576904296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3517.27099609375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8401.339599609375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2725.759521484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.859650380151461,
    "avg_bits_err_output": 0.24875,
    "avg_bits_err_improve": 7.6109003801514605,
    "time": 31196.25732421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(if (!= (pow (+ x eps) 5.0) 0.0) (* (pow (+ x eps) 5.0) (/ (- (pow (+ x eps) 5.0) (pow x 5.0)) (pow (+ x eps) 5.0))) (- (pow (+ x eps) 5.0) (pow x 5.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 7.644378882563689,
    "avg_bits_err_output": 7.644458265688102,
    "avg_bits_err_improve": -7.938312441257978e-05,
    "time": 16901.47119140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.52739149729937,
    "avg_bits_err_output": 0.03786024611284404,
    "avg_bits_err_improve": 16.489531251186527,
    "time": 13850.53759765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(fma (pow (exp (* x x)) 10.0) (/ (- (+ (cos x) -2.0) (- (cos x))) 2.0) (pow (exp (* x x)) 10.0))",
    "output_parens": 13,
    "avg_bits_err_input": 3.5098863314918933,
    "avg_bits_err_output": 3.075597895024531,
    "avg_bits_err_improve": 0.43428843646736226,
    "time": 19338.487548828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -50.0) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) (/ x (fma x x 1.0))) (if (<= x 5e-12) (/ (+ (/ x (fma x x 1.0)) (/ (+ x (+ x x)) (fma x x 1.0))) 4.0) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) (/ x (fma x x 1.0)))))",
    "output_parens": 62,
    "avg_bits_err_input": 14.731017406151821,
    "avg_bits_err_output": 0.008771240625180289,
    "avg_bits_err_improve": 14.722246165526641,
    "time": 10906.71728515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.124525152334634,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.124525152334634,
    "time": 6402.00048828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.42814559085069,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.42789559085069,
    "time": 5140.121337890625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (- 1.7e+308 (+ -1.7e+308 (* t +inf.0))) -2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.3040212406251803,
    "avg_bits_err_improve": 63.69597875937482,
    "time": 21045.5078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(if (!= (* t -2e-16) 0.0) (* (/ t 5e+15) (* t 2e-16)) (* t (* t 4e-32)))",
    "output_parens": 8,
    "avg_bits_err_input": 61.843251666115286,
    "avg_bits_err_output": 0.352375,
    "avg_bits_err_improve": 61.490876666115284,
    "time": 16150.616455078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (fma a (/ (* c 4.0) (- (sqrt (fma a (* c -4.0) (* b b))) b)) 0.0) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.85652725117812,
    "avg_bits_err_output": 21.930902570824657,
    "avg_bits_err_improve": 11.925624680353465,
    "time": 26352.8544921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (/ (- b 0.0) -2.0) a) (if (<= b -1.9e+20) (/ (/ (- b (sqrt (fma b b (* a (* c -4.0))))) -2.0) a) (/ (if (!= (- (- (sqrt (fma b b (* a (* c -4.0))))) b) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))))",
    "output_parens": 38,
    "avg_bits_err_input": 34.09730309892419,
    "avg_bits_err_output": 20.99991184575794,
    "avg_bits_err_improve": 13.097391253166254,
    "time": 29187.5322265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2495.58154296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.957346973747235,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 39.949221973747235,
    "time": 4710.035888671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.07051112173985,
    "avg_bits_err_output": 20.07051112173985,
    "avg_bits_err_improve": 0,
    "time": 9810.518310546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6618832283851797,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6618832283851797,
    "time": 7553.640380859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.035375,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.034874999999999996,
    "time": 7361.165771484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.023698120312590144,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.013323120312590144,
    "time": 4381.24755859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.01325,
    "time": 3197.40673828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0,
    "time": 1286.61376953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ d (+ c b)) (+ a e))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40413477500432715,
    "avg_bits_err_output": 0.25325,
    "avg_bits_err_improve": 0.15088477500432718,
    "time": 6565.289306640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (- 0.5 (* (cos (+ x x)) 0.5)) 0.0) (/ 1.0 (/ 1.0 (+ (* (cos (+ x x)) 0.5) -0.5))) (- (- (* (cos x) (* (cos x) 0.5)) 0.5) (* 0.5 (* (sin x) (sin x))))) (- -1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 31,
    "avg_bits_err_input": 29.33689209056337,
    "avg_bits_err_output": 25.30435119669809,
    "avg_bits_err_improve": 4.032540893865281,
    "time": 16611.9501953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.32207227533444,
    "avg_bits_err_output": 0.2955212406251803,
    "avg_bits_err_improve": 24.026551034709257,
    "time": 14629.60791015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (pow (sin x) 2.0) 0.0) (/ (if (!= (fma x (* x (pow (sin x) 2.0)) (pow (sin x) 4.0)) 0.0) (/ (- (* (pow (sin x) 4.0) (* x (* x (* x x)))) (pow (sin x) 8.0)) (fma x (* x (pow (sin x) 2.0)) (pow (sin x) 4.0))) (- (* (pow (sin x) 2.0) (* x x)) (pow (sin x) 4.0))) (pow (sin x) 2.0)) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 53,
    "avg_bits_err_input": 29.891511944556225,
    "avg_bits_err_output": 29.842660038827212,
    "avg_bits_err_improve": 0.04885190572901266,
    "time": 34198.848876953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.008719360937770431,
    "avg_bits_err_output": 0.008719360937770431,
    "avg_bits_err_improve": 0,
    "time": 2208.189453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(/ (if (!= (* (pow (+ (/ i n) 1.0) n) 100.0) 0.0) (/ (* (expm1 (* n (log1p (/ i n)))) (* (pow (+ (/ i n) 1.0) n) 10000.0)) (* (pow (+ (/ i n) 1.0) n) 100.0)) (fma (pow (+ (/ i n) 1.0) n) 100.0 -100.0)) (/ i n))",
    "output_parens": 26,
    "avg_bits_err_input": 47.55933602860441,
    "avg_bits_err_output": 13.888896147647076,
    "avg_bits_err_improve": 33.67043988095734,
    "time": 26047.70703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.282295503603127,
    "avg_bits_err_output": 23.163590248825805,
    "avg_bits_err_improve": 3.1187052547773213,
    "time": 13927.144775390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= c -1.5e-30) (fma b (/ c (+ (* d d) (* c c))) (* (/ a (fma d d (* c c))) (- d))) (if (<= c 1.75e+39) (- (/ (* b c) (fma c c (* d d))) (* a (/ d (fma c c (* d d))))) (fma b (/ c (+ (* d d) (* c c))) (* (/ a (fma d d (* c c))) (- d)))))",
    "output_parens": 33,
    "avg_bits_err_input": 25.908890223171973,
    "avg_bits_err_output": 22.4247338331835,
    "avg_bits_err_improve": 3.484156389988474,
    "time": 18569.175537109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (+ (* ux (- maxCos)) ux))",
    "output_parens": 4,
    "avg_bits_err_input": 0.03425,
    "avg_bits_err_output": 0.024210878354688034,
    "avg_bits_err_improve": 0.010039121645311969,
    "time": 7704.603759765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ (- 1.0 (log (+ 1.0 (- (exp (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) 1.0)))) (- (* (* ux maxCos) (fma ux maxCos (- 1.0 ux)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.532161296898241,
    "avg_bits_err_output": 12.334843738545448,
    "avg_bits_err_improve": 1.1973175583527933,
    "time": 28484.213134765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- (- 1.0 (* (* ux maxCos) (fma ux maxCos (- 1.0 ux)))) (log (+ 1.0 (expm1 (* (- 1.0 ux) (- 1.0 ux)))))) (- (* ux (* (- 1.0 ux) maxCos))))))",
    "output_parens": 22,
    "avg_bits_err_input": 13.571100165100978,
    "avg_bits_err_output": 12.368117035757937,
    "avg_bits_err_improve": 1.2029831293430409,
    "time": 28361.23681640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (- 1.0 ux) (* ux (* maxCos zi))))",
    "output_parens": 34,
    "avg_bits_err_input": 0.33834245490952625,
    "avg_bits_err_output": 0.3385557288030075,
    "avg_bits_err_improve": -0.00021327389348124726,
    "time": 41106.622802734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (+ (+ 1.0 (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax))))) -1.0) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.20443398826188036,
    "avg_bits_err_output": 0.20579815415628666,
    "avg_bits_err_improve": -0.0013641658944062995,
    "time": 55332.81103515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (log1p (expm1 (sqrt (/ u1 (- 1.0 u1))))) (sin (* 6.28318530718 u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5322783060501183,
    "avg_bits_err_output": 0.5388138326145117,
    "avg_bits_err_improve": -0.006535526564393379,
    "time": 20200.789306640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (/ u1 (* (* (- 1.0 u1) 2.0) 2.0)) (if (!= (/ (- u1) (* (- 1.0 u1) 4.0)) 0.0) (/ (* (/ (+ u1 (* u1 0.5)) (- 2.0 (+ u1 u1))) (/ (- u1) (* (- 1.0 u1) 4.0))) (/ (- u1) (* (- 1.0 u1) 4.0))) (/ (+ u1 (* u1 0.5)) (- 2.0 (+ u1 u1)))))) (cos (* 6.28318530718 u2)))",
    "output_parens": 35,
    "avg_bits_err_input": 0.32006129259685334,
    "avg_bits_err_output": 0.34300835825017517,
    "avg_bits_err_improve": -0.02294706565332183,
    "time": 21301.357421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.3359695363788537,
    "avg_bits_err_output": 0.3361409007471095,
    "avg_bits_err_improve": -0.0001713643682558219,
    "time": 35393.55126953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05602140916728211,
    "avg_bits_err_output": 0.041313299846034435,
    "avg_bits_err_improve": 0.014708109321247678,
    "time": 12372.39453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (- (fabs x)) s)) (+ (exp (/ (- (fabs x)) s)) 1.0)) (* s (exp (log1p (exp (/ (fabs x) (- s)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.13045220970122418,
    "avg_bits_err_output": 0.11525000517011554,
    "avg_bits_err_improve": 0.01520220453110864,
    "time": 20900.989990234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6725636303603195,
    "avg_bits_err_output": 0.6725636303603195,
    "avg_bits_err_improve": 0,
    "time": 21029.661865234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.15501197676078995,
    "avg_bits_err_output": 0.15042157656993405,
    "avg_bits_err_improve": 0.004590400190855909,
    "time": 23695.770751953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.6561803163408895,
    "avg_bits_err_output": 2.65427467727866,
    "avg_bits_err_improve": 0.0019056390622296249,
    "time": 29494.718017578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (* (sinh (/ 1.0 v)) (exp (* sinTheta_O (/ sinTheta_i v))))) (* (/ 0.5 v) (/ cosTheta_i v)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4647366230633134,
    "avg_bits_err_output": 0.3960317101106997,
    "avg_bits_err_improve": 0.06870491295261372,
    "time": 26691.500732421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v)) (exp (fma 0.6931 (* (log (/ 0.5 v)) 1.4427932477276006) 0.6931)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.13299457682521126,
    "avg_bits_err_output": 0.15354905575356428,
    "avg_bits_err_improve": -0.02055447892835302,
    "time": 25274.54345703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow (pow alpha PI) 2.0))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4683460707194643,
    "avg_bits_err_output": 0.4318655566572453,
    "avg_bits_err_improve": 0.03648051406221903,
    "time": 25527.537841796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3189906511052305,
    "avg_bits_err_output": 1.2315768881584737,
    "avg_bits_err_improve": 0.08741376294675685,
    "time": 28522.486572265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (exp (* 1.0 (log (log (/ 4.0 (* (+ (fma u -4.0 1.0) (* u (fma u 16.0 -4.0))) (/ 4.0 (- (fma 4.0 u -1.0))))))))) s) 2.0) (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 12.41898949309484,
    "avg_bits_err_output": 11.698646055309124,
    "avg_bits_err_improve": 0.720343437785715,
    "time": 23194.7490234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1354666053125164,
    "avg_bits_err_output": 0.1354666053125164,
    "avg_bits_err_improve": 0,
    "time": 28132.778076171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8720949351974231,
    "avg_bits_err_output": 0.6674094420951406,
    "avg_bits_err_improve": 0.20468549310228246,
    "time": 29249.343505859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) cosTheta) (sqrt PI)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7015683320417706,
    "avg_bits_err_output": 0.5489692679492485,
    "avg_bits_err_improve": 0.1525990640925221,
    "time": 23315.329833984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (log1p (expm1 (sin (* 2.0 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.702145640368503,
    "avg_bits_err_output": 0.5261627488726743,
    "avg_bits_err_improve": 13.175982891495828,
    "time": 19996.631103515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (sqrt (- (log1p (- u1)))) (- (sqrt (- (log1p (- u1)))) (* (sqrt (- (log1p (- u1)))) (cos (* u2 (* PI -2.0))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.752268772711531,
    "avg_bits_err_output": 0.30709316972878536,
    "avg_bits_err_improve": 13.445175602982745,
    "time": 18403.34130859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- alpha) (* (log1p (- u0)) alpha))",
    "output_parens": 5,
    "avg_bits_err_input": 14.252310686522181,
    "avg_bits_err_output": 0.3266392859392128,
    "avg_bits_err_improve": 13.925671400582969,
    "time": 14464.7431640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ (/ cos2phi alphax) (- alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.511917658031727,
    "avg_bits_err_output": 0.5356166098657802,
    "avg_bits_err_improve": 11.976301048165947,
    "time": 15066.06884765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.467013265433167,
    "avg_bits_err_output": 12.439077698581977,
    "avg_bits_err_improve": 4.027935566851189,
    "time": 21332.91650390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.213636842188131,
    "avg_bits_err_output": 0.15509436093777043,
    "avg_bits_err_improve": 0.05854248125036057,
    "time": 16737.181396484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (expm1 (log1p (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 14.485261577706648,
    "avg_bits_err_output": 11.108831976227503,
    "avg_bits_err_improve": 3.3764296014791455,
    "time": 23415.22265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (+ (if (!= (/ (pow (exp (* PI (/ f -4.0))) 2.0) (pow (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) 2.0)) 0.0) (/ (fma (/ (pow (exp (* PI (/ f -4.0))) 2.0) (pow (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) 2.0)) (- (pow (/ (exp (* PI (/ f -4.0))) (- (exp (* PI (/ f -4.0))) (exp (* PI (/ f 4.0))))) 2.0)) (pow (/ (pow (exp (* PI (/ f -4.0))) 2.0) (pow (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) 2.0)) 2.0)) (/ (pow (exp (* PI (/ f -4.0))) 2.0) (pow (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) 2.0))) (fma (pow (/ (exp (* PI (/ f -4.0))) (- (exp (* PI (/ f -4.0))) (exp (* PI (/ f 4.0))))) 2.0) -1.0 (/ (pow (exp (* PI (/ f -4.0))) 2.0) (pow (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) 2.0)))) (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0))",
    "output_parens": 115,
    "avg_bits_err_input": 61.58862009234665,
    "avg_bits_err_output": 61.59761693112858,
    "avg_bits_err_improve": -0.008996838781925476,
    "time": 49554.1201171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -7e-155) (/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (+ x 1.0) (+ -1.0 x)) (* 2.0 (* t t))) (* l (* l (- -1.0 (/ (- -1.0 x) (+ x -1.0)))))))) (if (<= t 1.35e-171) (* 0.0 t) (/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (+ x 1.0) (+ -1.0 x)) (* 2.0 (* t t))) (* l (* l (- -1.0 (/ (- -1.0 x) (+ x -1.0))))))))))",
    "output_parens": 39,
    "avg_bits_err_input": 42.7452470102987,
    "avg_bits_err_output": 35.63188620624075,
    "avg_bits_err_improve": 7.1133608040579475,
    "time": 26925.804931640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin ky) (/ (sin th) (hypot (sin kx) (sin ky))))",
    "output_parens": 7,
    "avg_bits_err_input": 3.9675895151539873,
    "avg_bits_err_output": 0.27571973750504786,
    "avg_bits_err_improve": 3.6918697776489395,
    "time": 33634.408935546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.967667200391513,
    "avg_bits_err_output": 0.004,
    "avg_bits_err_improve": 0.963667200391513,
    "time": 11096.194091796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (+ (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 2.0 (* (pow (/ t l) 2.0) 4.0))) (/ (- 1.0 (/ (* Om (/ Om Omc)) Omc)) (+ 2.0 (* (pow (/ t l) 2.0) 4.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 10.54989865402811,
    "avg_bits_err_output": 10.565023130594861,
    "avg_bits_err_improve": -0.015124476566750644,
    "time": 22658.74365234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -1.4e+15) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= n 2.4e+34) (sqrt (* 2.0 (- (* (* n (+ t (* (* n (- U* U)) (pow (/ l Om) 2.0)))) U) (* U (* (/ l Om) (* (* 2.0 l) n)))))) (* (sqrt (* 2.0 (* U (- t (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* 2.0 (* l (/ l Om)))))))) (sqrt n))))",
    "output_parens": 50,
    "avg_bits_err_input": 34.772395436123226,
    "avg_bits_err_output": 26.143568121523206,
    "avg_bits_err_improve": 8.62882731460002,
    "time": 35352.819580078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -2e-108) (/ 2.0 (/ (/ (* (* (sin k) (tan k)) (* (/ (/ k l) t) (* k (pow t 3.0)))) l) t)) (if (<= t 1.02e-108) (/ 2.0 (* (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) l) (* (sin k) (/ (tan k) l)))) (/ 2.0 (* (/ k t) (/ (* (/ k t) (* (tan k) (* (pow t 3.0) (/ (+ (sin k) (sin k)) l)))) (+ l l))))))",
    "output_parens": 44,
    "avg_bits_err_input": 47.968548489729244,
    "avg_bits_err_output": 29.44331137223455,
    "avg_bits_err_improve": 18.525237117494694,
    "time": 48135.74853515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1e+28) (/ 2.0 (/ (/ (* (* (+ 2.0 (pow (/ k t) 2.0)) (tan k)) (* (sin k) (pow t 3.0))) l) l)) (if (<= t 4.2e+82) (/ 2.0 (fma (/ (sin k) l) (* (tan k) (if (!= (* (/ (pow t 3.0) l) 2.0) 0.0) (+ (/ 2.0 (/ 1.0 (/ (pow t 3.0) l))) (* (pow (* (/ (pow t 3.0) l) (/ k t)) 2.0) (/ 1.0 (/ (pow t 3.0) l)))) (* (pow t 3.0) (/ (+ 2.0 (pow (/ k t) 2.0)) l)))) 0.0)) (/ 2.0 (* (sin k) (* (/ (/ (* (pow t 3.0) (tan k)) l) l) (+ 2.0 (pow (/ k t) 2.0)))))))",
    "output_parens": 59,
    "avg_bits_err_input": 33.357204472368096,
    "avg_bits_err_output": 28.5631640384738,
    "avg_bits_err_improve": 4.7940404338942955,
    "time": 26269.39599609375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (* (cos th) (if (!= (/ 1.0 (sqrt 2.0)) 0.0) (/ 2.0 (/ 4.0 (sqrt 2.0))) (/ 1.0 (sqrt 2.0)))) (+ (* a1 a1) (* a2 a2)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.5120276343964563,
    "avg_bits_err_output": 0.4565109047061613,
    "avg_bits_err_improve": 0.055516729690294975,
    "time": 22526.3701171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow k -0.5) (* (pow PI (+ 0.5 (* k -0.5))) (* (pow n (+ 0.5 (* k -0.5))) (pow 2.0 (+ 0.5 (* k -0.5))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.5343900507637622,
    "avg_bits_err_output": 0.5645879177813287,
    "avg_bits_err_improve": -0.030197867017566438,
    "time": 20720.52880859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* J (* (/ (if (!= (exp (* l -2.0)) 0.0) (/ (- (exp (fma l -3.0 l)) (exp (* l -4.0))) (exp (* l -2.0))) (- (exp (fma l -1.0 l)) (exp (* l -2.0)))) (exp (- l))) (cos (/ K -2.0)))) U)",
    "output_parens": 25,
    "avg_bits_err_input": 17.52382925669616,
    "avg_bits_err_output": 17.53521355104387,
    "avg_bits_err_improve": -0.011384294347710266,
    "time": 26874.570068359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= n -1e-50) (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n)))))) (if (<= n 5e-161) (* (cos (- (/ (if (!= (* K n) 0.0) (* K (* K (* (+ n m) (/ (/ n K) n)))) (* K (+ m n))) 2.0) M)) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n)))))) (if (<= n 1.45e+89) (* (log (exp (cos (- (* K (/ (+ m n) 2.0)) M)))) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K n) 0.0) (* (+ n m) (* n (/ (* K K) (* K n)))) (* K (+ m n))) 2.0) M)) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n)))))))))",
    "output_parens": 102,
    "avg_bits_err_input": 15.372463040371839,
    "avg_bits_err_output": 12.160959297377238,
    "avg_bits_err_improve": 3.2115037429946014,
    "time": 17800.6669921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.87244812031259,
    "avg_bits_err_output": 18.87244812031259,
    "avg_bits_err_improve": 0,
    "time": 32154.35205078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ (* M D) (* 2.0 d)) -2e+216) (* w0 (sqrt (- 1.0 (* D (* (/ M (+ d d)) (/ (* (* M (/ h (+ d d))) D) l)))))) (if (<= (/ (* M D) (* 2.0 d)) 5e-23) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))) (* w0 (sqrt (- 1.0 (* D (* (/ M (+ d d)) (* (/ M (+ d d)) (* D (/ h l))))))))))",
    "output_parens": 43,
    "avg_bits_err_input": 14.208183454186809,
    "avg_bits_err_output": 9.611260140883092,
    "avg_bits_err_improve": 4.5969233133037175,
    "time": 22951.25830078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -4e+281) (* c0 (* (sqrt (/ 1.0 l)) (sqrt (/ A V)))) (if (<= (* V l) -5e-299) (* c0 (* (sqrt (- (/ 1.0 (* l V)))) (sqrt (- A)))) (if (<= (* V l) 1e-308) (* c0 (* (sqrt (- (/ A l))) (sqrt (/ -1.0 V)))) (* c0 (* (sqrt (/ 1.0 (* l V))) (sqrt A))))))",
    "output_parens": 36,
    "avg_bits_err_input": 19.039959213284444,
    "avg_bits_err_output": 6.853948761315819,
    "avg_bits_err_improve": 12.186010451968624,
    "time": 20025.324951171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= c0 9e+59) (/ (/ (* c0 (if (!= (- (* (/ (/ d D) w) (* (/ d (* h D)) c0)) (sqrt (- (pow (* (/ (/ d D) w) (* (/ d (* h D)) c0)) 2.0) (* M M)))) 0.0) (/ (fma M M 0.0) (- (* (/ (/ d D) w) (* (/ d (* h D)) c0)) (sqrt (- (pow (* (/ (/ d D) w) (* (/ d (* h D)) c0)) 2.0) (* M M))))) (fma c0 (* d (/ (/ (/ d D) w) (* h D))) (sqrt (- (pow (* (/ (/ d D) w) (* (/ d (* h D)) c0)) 2.0) (* M M)))))) w) 2.0) (if (<= c0 3.4e+105) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ (pow (/ d D) 2.0) (* w h)) c0 M)) (sqrt (- (* (/ (pow (/ d D) 2.0) (* w h)) c0) M)) (* (/ (pow (/ d D) 2.0) (* w h)) c0))) (/ (/ (* c0 (if (!= (- (* (/ (/ d D) w) (* (/ d (* h D)) c0)) (sqrt (- (pow (* (/ (/ d D) w) (* (/ d (* h D)) c0)) 2.0) (* M M)))) 0.0) (* (/ M (- (* c0 (/ (/ (pow (/ d D) 2.0) h) w)) (sqrt (- (pow (* c0 (/ (/ (pow (/ d D) 2.0) h) w)) 2.0) (* M M))))) M) (fma c0 (* d (/ (/ (/ d D) w) (* h D))) (sqrt (- (pow (* (/ (/ d D) w) (* (/ d (* h D)) c0)) 2.0) (* M M)))))) w) 2.0)))",
    "output_parens": 138,
    "avg_bits_err_input": 59.97466461697975,
    "avg_bits_err_output": 30.381406611890494,
    "avg_bits_err_improve": 29.593258005089258,
    "time": 76352.51635742188,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d 6.5e+188) (fma (sqrt (/ d l)) (* (sqrt (/ d h)) (- 1.0 (* h (* (* M (/ D d)) (/ (* M (/ D d)) (* (+ l l) 4.0)))))) 0.0) (if (<= d 7e+208) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- (* h (* (/ -0.5 l) (pow (/ (* M D) (+ d d)) 2.0))) -1.0)) (if (<= d 1.55e+268) (/ (* (fma 0.5 (* h (/ (pow (* M (/ D (* d 2.0))) 2.0) l)) -1.0) (* (sqrt (/ (/ d h) l)) (+ (sqrt d) (sqrt d)))) -2.0) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- (/ (* (pow (* M (/ (/ D d) 2.0)) 2.0) (* h -0.5)) l) -1.0)))))",
    "output_parens": 66,
    "avg_bits_err_input": 27.179215347818232,
    "avg_bits_err_output": 24.601926982613662,
    "avg_bits_err_improve": 2.57728836520457,
    "time": 48341.950927734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (log1p (expm1 (/ 0.25 (fma x x 1.0))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 16.0976448010201,
    "avg_bits_err_output": 15.612699245235696,
    "avg_bits_err_improve": 0.4849455557844031,
    "time": 22936.77978515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ 1.3333333333333333 (* PI (* (- 1.0 (* v v)) (sqrt (- 2.0 (* 6.0 (* v v)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9851981203125901,
    "avg_bits_err_output": 0.010896240625180291,
    "avg_bits_err_improve": 0.9743018796874099,
    "time": 5889.223388671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (- (/ (/ (/ (- (/ (fma 5.0 (* v v) -1.0) (fma v v -1.0)) 0.0) PI) (sqrt (- 2.0 (* v (* v 6.0))))) t) 0.0) 0.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.4699651755792754,
    "avg_bits_err_output": 0.11134456445035253,
    "avg_bits_err_improve": 0.3586206111289229,
    "time": 24686.8994140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (- (sqrt (- 2.0 (* v (* v 6.0)))) (* (* v v) (sqrt (- 2.0 (* v (* v 6.0)))))) 4.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.011448120312590146,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 0.0035731203125901456,
    "time": 10706.839111328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5498065734829228,
    "avg_bits_err_output": 0.5498065734829228,
    "avg_bits_err_improve": 0,
    "time": 9315.575439453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output_parens": 7,
    "avg_bits_err_input": 1.8855198915566997,
    "avg_bits_err_output": 1.8855198915566997,
    "avg_bits_err_improve": 0,
    "time": 12476.1845703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (- (+ Vef (+ EDonor mu)) Ec) KbT)) -1.0)) (/ NaChar (- (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.023025757404635052,
    "avg_bits_err_output": 0.023025757404635052,
    "avg_bits_err_improve": 0,
    "time": 7611.16064453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow a 4.0) (* (* b b) (+ (+ (* b b) (* a (+ a a))) 4.0))) 1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 0.18252857187842536,
    "avg_bits_err_output": 0.09626428593921277,
    "avg_bits_err_improve": 0.08626428593921259,
    "time": 9070.5400390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (* (fma a a (* b b)) (* a a)) (+ (pow b 4.0) (* a (* a (* b b))))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 21,
    "avg_bits_err_input": 0.18674133035577506,
    "avg_bits_err_output": 0.09748644285361177,
    "avg_bits_err_improve": 0.08925488750216329,
    "time": 24279.4892578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (* (* b b) (fma b b (* a a))) (+ (pow a 4.0) (* (* b b) (* a a)))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 20,
    "avg_bits_err_input": 0.18881329892135118,
    "avg_bits_err_output": 0.10644316173318807,
    "avg_bits_err_improve": 0.0823701371881631,
    "time": 19283.408203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(pow (+ 0.5 (* (+ (* (/ x (sqrt (fma x x (* 4.0 (* p p))))) 0.25) (/ (+ x (+ x x)) (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0))) 0.5)) 0.5)",
    "output_parens": 19,
    "avg_bits_err_input": 13.46761535571047,
    "avg_bits_err_output": 13.596793002720329,
    "avg_bits_err_improve": -0.12917764700985934,
    "time": 17578.4375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.82770324993401,
    "avg_bits_err_output": 0.073375,
    "avg_bits_err_improve": 40.75432824993401,
    "time": 6438.212890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (expm1 (log1p (/ (pow (tan x) 2.0) (+ x (tan x)))))) (- x (tan x))))",
    "output_parens": 21,
    "avg_bits_err_input": 31.2218692274709,
    "avg_bits_err_output": 30.730113187317748,
    "avg_bits_err_improve": 0.49175604015315244,
    "time": 24639.61962890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (- b_2) a) (if (<= b_2 1.32e+154) (if (!= (/ (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2) a) 0.0) (- (/ c (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2)) 0.0) (/ (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2) a)) (if (!= (/ (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2) a) 0.0) (- (/ (/ (* c a) a) (- 0.0 b_2)) 0.0) (/ (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2) a))))",
    "output_parens": 49,
    "avg_bits_err_input": 33.3586201905314,
    "avg_bits_err_output": 17.958689567216478,
    "avg_bits_err_improve": 15.39993062331492,
    "time": 20002.2724609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.39088452413298,
    "avg_bits_err_output": 21.832710683381162,
    "avg_bits_err_improve": 12.558173840751817,
    "time": 16589.953857421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (- 1.0 (cos x)) x) (/ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 31.249751031140796,
    "avg_bits_err_output": 30.52600246301496,
    "avg_bits_err_improve": 0.7237485681258349,
    "time": 17527.021484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.315236178028606,
    "avg_bits_err_output": 10.479584119718469,
    "avg_bits_err_improve": 21.83565205831014,
    "time": 33228.243408203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (+ (log1p N) 1.0) 0.0) (/ (- (pow (+ (log1p N) 1.0) 2.0) (* (+ (log1p N) 1.0) (+ (log N) 1.0))) (+ (log1p N) 1.0)) (- (log1p N) (log N)))",
    "output_parens": 19,
    "avg_bits_err_input": 29.67818123973979,
    "avg_bits_err_output": 29.703494191037684,
    "avg_bits_err_improve": -0.025312951297895125,
    "time": 14552.784423828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (- (/ (+ (/ -1.0 x) (/ (/ x x) (+ 1.0 x))) 2.0) (/ (+ 1.0 (/ -1.0 (/ (+ 1.0 x) x))) (+ x x))) 0.0)",
    "output_parens": 14,
    "avg_bits_err_input": 14.62474502994269,
    "avg_bits_err_output": 14.614114397437778,
    "avg_bits_err_improve": 0.010630632504913251,
    "time": 22344.1240234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))",
    "output_parens": 8,
    "avg_bits_err_input": 39.42344523042765,
    "avg_bits_err_output": 6.346164375231422,
    "avg_bits_err_improve": 33.07728085519623,
    "time": 24949.446044921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.974136662457955,
    "avg_bits_err_output": 29.68144855773604,
    "avg_bits_err_improve": 0.29268810472191475,
    "time": 13660.70458984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (if (!= (+ 1.0 (cos x)) 0.0) (/ (- (* (sin x) (* 0.5 (sin x))) (- (* 0.5 (* (cos x) (cos x))) 0.5)) (+ 1.0 (cos x))) (- 1.0 (cos x))) (sin x))",
    "output_parens": 21,
    "avg_bits_err_input": 30.415523609635727,
    "avg_bits_err_output": 28.21298154185805,
    "avg_bits_err_improve": 2.202542067777678,
    "time": 22747.62744140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* (* 4.0 (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) a) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.67674917748502,
    "avg_bits_err_output": 21.70275635517597,
    "avg_bits_err_improve": 11.97399282230905,
    "time": 22530.044921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- b (sqrt (fma c (* a -4.0) (* b b))))) (/ a 0.25)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.2952012372741,
    "avg_bits_err_output": 21.959994910812192,
    "avg_bits_err_improve": 12.335206326461908,
    "time": 26514.20361328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(- (log1p (- x)) (- (log1p (- x)) (/ (log1p (- x)) (log1p x))))",
    "output_parens": 10,
    "avg_bits_err_input": 61.48234358383173,
    "avg_bits_err_output": 0.018462406251802895,
    "avg_bits_err_improve": 61.46388117757993,
    "time": 13806.12841796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log (+ n 1.0)) (log n)) n)) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 63.003586208812294,
    "avg_bits_err_output": 44.22176888048834,
    "avg_bits_err_improve": 18.781817328323953,
    "time": 17127.584716796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output_parens": 4,
    "avg_bits_err_input": 58.50507453227207,
    "avg_bits_err_output": 58.50507453227207,
    "avg_bits_err_improve": 0,
    "time": 20681.508056640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(log (+ 1.0 (expm1 (/ (if (!= (+ 1.0 (/ x (tan x))) 0.0) (/ (- 1.0 (pow (/ x (tan x)) 2.0)) (+ 1.0 (/ x (tan x)))) (- 1.0 (/ x (tan x)))) x))))",
    "output_parens": 20,
    "avg_bits_err_input": 59.88408315217295,
    "avg_bits_err_output": 59.86089268073568,
    "avg_bits_err_improve": 0.02319047143726749,
    "time": 32444.58837890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.029807782035185,
    "avg_bits_err_output": 29.029267339651845,
    "avg_bits_err_improve": 31.00054044238334,
    "time": 27240.682861328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.20346794511585,
    "avg_bits_err_output": 0.46777124062518033,
    "avg_bits_err_improve": 40.735696704490664,
    "time": 7611.93310546875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.72378344594542,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 58.723033445945426,
    "time": 4647.268798828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.601623270563962,
    "avg_bits_err_output": 0.02071736561972104,
    "avg_bits_err_improve": 29.58090590494424,
    "time": 5324.584716796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (exp x) (+ 1.0 (* (exp x) -2.0))) (exp x))",
    "output_parens": 8,
    "avg_bits_err_input": 29.934927720364247,
    "avg_bits_err_output": 29.052203325659132,
    "avg_bits_err_improve": 0.8827243947051144,
    "time": 23417.676513671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.74829177130195,
    "avg_bits_err_output": 9.74829177130195,
    "avg_bits_err_improve": 0,
    "time": 25877.874755859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (+ (tan x) 1.0) 0.0) (/ (- (+ (tan x) (pow (tan x) 2.0)) (* (tan (+ x eps)) (+ (tan x) 1.0))) (- -1.0 (tan x))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 21,
    "avg_bits_err_input": 36.43921113191494,
    "avg_bits_err_output": 36.44977634862481,
    "avg_bits_err_improve": -0.010565216709871095,
    "time": 19546.06982421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.0311619115621,
    "avg_bits_err_output": 0.1656298875021634,
    "avg_bits_err_improve": 29.865532024059938,
    "time": 13464.994873046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 36.6909443846718,
    "avg_bits_err_output": 21.655744026229662,
    "avg_bits_err_improve": 15.03520035844214,
    "time": 20263.69775390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (!= (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (- x -1.0)))) 0.0) (/ (if (!= (/ -1.0 (+ 1.0 x)) 0.0) (/ (if (!= (pow (/ -1.0 (+ 1.0 x)) 2.0) 0.0) (/ (fma (pow (/ -1.0 (+ 1.0 x)) 2.0) (/ (/ -1.0 x) (+ 1.0 x)) (pow (/ -1.0 (+ 1.0 x)) 4.0)) (pow (/ -1.0 (+ 1.0 x)) 2.0)) (/ (+ (/ 1.0 (+ 1.0 x)) (/ -1.0 x)) (+ 1.0 x))) (/ -1.0 (+ 1.0 x))) (+ (/ -1.0 (+ 1.0 x)) (/ 1.0 x))) (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (- x -1.0))))) (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (- x -1.0)))))",
    "output_parens": 57,
    "avg_bits_err_input": 19.65787767276261,
    "avg_bits_err_output": 19.6263710834944,
    "avg_bits_err_improve": 0.03150658926820782,
    "time": 17894.64453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (+ (atan (+ N 1.0)) (- -1.0 (atan N))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 14.706098295422246,
    "avg_bits_err_output": 14.70706319916667,
    "avg_bits_err_improve": -0.0009649037444248165,
    "time": 11578.384521484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.49036338333371,
    "avg_bits_err_output": 1.2922767898901002,
    "avg_bits_err_improve": 28.198086593443612,
    "time": 28426.507080078125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (* (- m (* m m)) (- 1.0 m)) v) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07734252772443494,
    "avg_bits_err_output": 0.07575472521415125,
    "avg_bits_err_improve": 0.0015878025102836896,
    "time": 10210.087646484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b a) (/ (/ -1.0 a) b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.02900281559095,
    "avg_bits_err_output": 0.25861842188130973,
    "avg_bits_err_improve": 15.770384393709639,
    "time": 11368.236572265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (- (* (cos (fma (/ angle 180.0) PI PI)) (cos (- PI))) (* (sin (fma (/ angle 180.0) PI PI)) (sin (- PI))))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 20.213355120457617,
    "avg_bits_err_output": 20.225339334575548,
    "avg_bits_err_improve": -0.011984214117930492,
    "time": 36352.9501953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (log1p (expm1 (sin (* angle (/ PI -180.0))))) (* (- (pow b 2.0) (pow a 2.0)) -2.0)) (cos (* PI (/ angle 180.0))))",
    "output_parens": 14,
    "avg_bits_err_input": 31.50825619267726,
    "avg_bits_err_output": 31.58395133139237,
    "avg_bits_err_improve": -0.07569513871511191,
    "time": 30978.68115234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (- (* (cos (* PI (* angle 0.002777777777777778))) (cos (* PI (* angle 0.002777777777777778)))) (* (sin (* PI (* angle 0.002777777777777778))) (sin (* PI (* angle 0.002777777777777778)))))) 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 20.177170824327334,
    "avg_bits_err_output": 20.170918236381528,
    "avg_bits_err_improve": 0.006252587945805743,
    "time": 41238.82958984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (if (!= (* m (/ (- m (* m m)) v)) 0.0) (/ 1.0 (/ 1.0 (* m (/ (- m (* m m)) v)))) (* m (/ (- m (* m m)) v))) m)",
    "output_parens": 17,
    "avg_bits_err_input": 0.17100804548200058,
    "avg_bits_err_output": 0.22472364816327148,
    "avg_bits_err_improve": -0.0537156026812709,
    "time": 19657.99267578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.33175743549675557,
    "avg_bits_err_output": 0.3334082874467403,
    "avg_bits_err_improve": -0.0016508519499847107,
    "time": 19734.322021484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (+ (+ -1.0 (* (cos v) e)) 1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.1347193609377704,
    "avg_bits_err_output": 0.13826184218813103,
    "avg_bits_err_improve": -0.003542481250360635,
    "time": 17231.197509765625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.104720361712022,
    "avg_bits_err_output": 17.098447668484702,
    "avg_bits_err_improve": 0.0062726932273200475,
    "time": 36700.9501953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.76154780897245,
    "avg_bits_err_output": 0.17395505530735447,
    "avg_bits_err_improve": 52.5875927536651,
    "time": 28318.241943359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.529744901384003,
    "avg_bits_err_output": 0.3274725578234076,
    "avg_bits_err_improve": 28.202272343560594,
    "time": 25041.74853515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 43.742041672974686,
    "avg_bits_err_output": 0.24838966250649014,
    "avg_bits_err_improve": 43.493652010468196,
    "time": 23601.265380859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (* -4.0 (/ c (+ b (sqrt (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.678949773148155,
    "avg_bits_err_output": 21.70275635517597,
    "avg_bits_err_improve": 11.976193417972183,
    "time": 23156.201171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (expm1 (log1p (sin (- lambda1 lambda2))))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.8554353573512197,
    "avg_bits_err_output": 0.8663791153331781,
    "avg_bits_err_improve": -0.010943757981958457,
    "time": 25767.213134765625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (+ (log (+ 1.0 (expm1 (/ -2.0 (+ (exp (* x -2.0)) 1.0))))) (+ 2.0 (/ -2.0 (exp (log1p (exp (* x -2.0))))))) -2.0)",
    "output_parens": 15,
    "avg_bits_err_input": 29.589158234542733,
    "avg_bits_err_output": 29.589987920162752,
    "avg_bits_err_improve": -0.0008296856200189495,
    "time": 20443.038818359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (* x -2.0)) (- -1.0 (exp (* x -2.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.12261903136475,
    "avg_bits_err_output": 0.589563721875541,
    "avg_bits_err_improve": 57.53305530948921,
    "time": 19447.034423828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (- (exp (+ x (* x -2.0))))) 2.0)",
    "output_parens": 8,
    "avg_bits_err_input": 58.055986656383155,
    "avg_bits_err_output": 0.07739624062518029,
    "avg_bits_err_improve": 57.97859041575798,
    "time": 9917.739501953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008448120312590145,
    "avg_bits_err_output": 0.008448120312590145,
    "avg_bits_err_improve": 0,
    "time": 1848.547119140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.881625,
    "avg_bits_err_output": 31.881625,
    "avg_bits_err_improve": 0,
    "time": 4114.682861328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (exp (log1p (log (- (/ x (- 1.0 x)) (/ -1.0 (- 1.0 x)))))) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 58.4959460051333,
    "avg_bits_err_output": 58.53042799195972,
    "avg_bits_err_improve": -0.03448198682642101,
    "time": 24005.779541015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.026875,
    "avg_bits_err_output": 0.027125,
    "avg_bits_err_improve": -0.0002500000000000002,
    "time": 5778.51708984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* (* eh (cos t)) (sin (atan (/ eh (* ew (tan t))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12744812031259015,
    "avg_bits_err_output": 0.126125,
    "avg_bits_err_improve": 0.0013231203125901592,
    "time": 25358.16015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.129,
    "avg_bits_err_output": 0.129,
    "avg_bits_err_improve": 0,
    "time": 29098.962890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (cos (/ phi2 2.0)) (* (- lambda1 lambda2) (cos (/ phi1 2.0))) (* (- lambda1 lambda2) (* (sin (/ phi2 2.0)) (sin (/ phi1 -2.0))))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.20791525352395,
    "avg_bits_err_output": 0.1296137880294508,
    "avg_bits_err_improve": 39.0783014654945,
    "time": 31067.005126953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (+ (/ (- (* (/ b a) b) a) (+ a a)) (* (/ (/ (+ b a) (+ a a)) a) (- b a)))))",
    "output_parens": 14,
    "avg_bits_err_input": 14.227114489635877,
    "avg_bits_err_output": 0.012625,
    "avg_bits_err_improve": 14.214489489635877,
    "time": 7584.4462890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (* (sin delta) (cos theta)) (cos phi1)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1485108369463292,
    "avg_bits_err_output": 0.1475664335479909,
    "avg_bits_err_improve": 0.0009444033983382893,
    "time": 41885.138671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.79820351486748,
    "avg_bits_err_output": 0.16976917344137615,
    "avg_bits_err_improve": 52.62843434142611,
    "time": 26185.844970703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.675115352585333,
    "avg_bits_err_output": 0.33842067813599774,
    "avg_bits_err_improve": 28.336694674449337,
    "time": 25248.53662109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.717116949100095,
    "avg_bits_err_output": 0.24111391094642382,
    "avg_bits_err_improve": 43.47600303815367,
    "time": 24354.83544921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* a (* c -3.0))))) 0.0) (/ (* (/ c (+ b (sqrt (fma a (* c -3.0) (* b b))))) (* a -3.0)) 1.0) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 33.73140712667356,
    "avg_bits_err_output": 21.75724450507503,
    "avg_bits_err_improve": 11.97416262159853,
    "time": 26101.596435546875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (if (!= (sin (+ phi1 phi2)) 0.0) (/ (* (sin (+ phi1 phi2)) (* (sin phi1) (+ (cos phi2) (cos phi2)))) (sin (+ phi1 phi2))) (* (sin phi1) (+ (cos phi2) (cos phi2)))) (/ (cos (- lambda2 lambda1)) 2.0))))",
    "output_parens": 33,
    "avg_bits_err_input": 12.970295589353583,
    "avg_bits_err_output": 13.0830510770486,
    "avg_bits_err_improve": -0.11275548769501675,
    "time": 37298.374267578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (- (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 28.870565557947803,
    "avg_bits_err_output": 24.537717727525347,
    "avg_bits_err_improve": 4.332847830422455,
    "time": 18054.964599609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (+ (+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x))) 2.0) -2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.01325,
    "avg_bits_err_output": 0.014188721875540869,
    "avg_bits_err_improve": -0.000938721875540869,
    "time": 4912.43603515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (- 1.0 (/ x (+ x -1.0))) (- (/ 1.0 (+ x -1.0)))) (+ 1.0 x))",
    "output_parens": 9,
    "avg_bits_err_input": 14.062164864266142,
    "avg_bits_err_output": 12.228568323759076,
    "avg_bits_err_improve": 1.8335965405070667,
    "time": 13955.68505859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.12e-302) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* F -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt F) (sqrt (* (- (pow B 2.0) (* A (* C 4.0))) -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 46,
    "avg_bits_err_input": 52.255105281448856,
    "avg_bits_err_output": 47.07330772350495,
    "avg_bits_err_improve": 5.181797557943902,
    "time": 41115.246826171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -5.6e+100) (* (atan (/ (if (!= (- C A) 0.0) (if (!= (- C (- A (sqrt (+ (pow (- C A) 2.0) (pow B 2.0))))) 0.0) (/ (- (pow B 2.0)) (- C (- A (sqrt (+ (pow (- C A) 2.0) (pow B 2.0)))))) (- C (+ A (sqrt (+ (pow (- C A) 2.0) (pow B 2.0)))))) (- (- C (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) A)) B)) (/ 180.0 PI)) (* (atan (* (- (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI)))",
    "output_parens": 54,
    "avg_bits_err_input": 29.818121364011493,
    "avg_bits_err_output": 27.500223018852804,
    "avg_bits_err_improve": 2.3178983451586888,
    "time": 30685.550048828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (* (/ (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (- (* A (* C 4.0)) (pow B 2.0))) (* (sqrt (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (sqrt (* 2.0 F)))) (/ (* (sqrt (* 2.0 (fabs (* F (- (pow B 2.0) (* C (* A 4.0))))))) (sqrt (fabs (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* A (* C 4.0)) (pow B 2.0))))",
    "output_parens": 68,
    "avg_bits_err_input": 52.1401115349008,
    "avg_bits_err_output": 46.9346573590376,
    "avg_bits_err_improve": 5.205454175863196,
    "time": 53072.751953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.846903408451233,
    "avg_bits_err_output": 15.846903408451233,
    "avg_bits_err_improve": 0,
    "time": 18362.968994140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1.35e+154) (+ (cbrt (* (/ 0.5 a) (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (cbrt (* (/ 0.5 a) (- (- g) (* (sqrt (- h g)) (sqrt (- (+ g h)))))))) (if (<= g -5e-272) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (sqrt (- (* g g) (* h h))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) (- g)) 0.0) (* h (/ h (- (- g) (pow (fma g g (* h (- h))) 0.5)))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))))))",
    "output_parens": 91,
    "avg_bits_err_input": 36.34708362534482,
    "avg_bits_err_output": 10.206262516219367,
    "avg_bits_err_improve": 26.140821109125454,
    "time": 36279.787109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (- (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))) (* (sin (* PI 0.6666666666666666)) (sin (/ (acos (/ g (- h))) 3.0)))) (* (expm1 (log1p (sin (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) -3.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.9905714296960648,
    "avg_bits_err_output": 0.03654285781763825,
    "avg_bits_err_improve": 0.9540285718784266,
    "time": 15161.310791015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log1p (expm1 (/ (exp a) (+ (exp a) (exp b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.804125,
    "avg_bits_err_output": 0.8073562031259016,
    "avg_bits_err_improve": -0.0032312031259016383,
    "time": 4971.531494140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+268) (/ (* a1 (/ a2 b1)) b2) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-308) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+265) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 10.711597641688524,
    "avg_bits_err_output": 2.937712097290087,
    "avg_bits_err_improve": 7.773885544398437,
    "time": 9540.367919921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(+ (* x y) (- (log1p (exp x)) (* x (+ y y))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.49916476114975633,
    "avg_bits_err_output": 0.515125,
    "avg_bits_err_improve": -0.015960238850243724,
    "time": 10903.343505859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.0) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 100000000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 52.9795181675399,
    "avg_bits_err_output": 0.19023995726859153,
    "avg_bits_err_improve": 52.78927821027131,
    "time": 8502.97705078125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.681446684364617,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.681446684364617,
    "time": 2682.23681640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 2.0 (* x 2.0)) (+ x (+ x 2.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.01825,
    "avg_bits_err_improve": -0.004874999999999999,
    "time": 4496.290771484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1270.283935546875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (- (/ 2.0 (* r r)) 1.5) (- (* (* (* r w) (* r w)) (/ (- 0.375 (* v 0.25)) (- 1.0 v)))))",
    "output_parens": 13,
    "avg_bits_err_input": 12.774235722855092,
    "avg_bits_err_output": 0.31862067288649315,
    "avg_bits_err_improve": 12.4556150499686,
    "time": 22042.029052734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (+ (* x1 (* (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0)) (* x1 -6.0))) (/ (* (* (- 3.0 (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (* x1 -2.0)) (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2)))) (- -1.0 (* x1 x1))))))))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.5159809249647487,
    "avg_bits_err_output": 0.27508940931963954,
    "avg_bits_err_improve": 0.24089151564510913,
    "time": 78193.658203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (- (- u) t1)) v) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.44557671619713,
    "avg_bits_err_output": 1.0171531638130082,
    "avg_bits_err_improve": 17.42842355238412,
    "time": 5764.225341796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2291156015629507,
    "avg_bits_err_output": 0.2291156015629507,
    "avg_bits_err_improve": 0,
    "time": 5504.583740234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0019481203125901445,
    "avg_bits_err_output": 0.0019481203125901445,
    "avg_bits_err_improve": 0,
    "time": 3237.586181640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* (/ (- (/ 1.0 b) (/ 1.0 a)) (+ a b)) (/ PI -2.0)) (- b a))",
    "output_parens": 9,
    "avg_bits_err_input": 14.481456735071005,
    "avg_bits_err_output": 0.29440188126189887,
    "avg_bits_err_improve": 14.187054853809105,
    "time": 17532.586669921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (exp (- (- x (* eps x)))) (+ (/ (exp (- (* x eps) x)) eps) (- (exp (- (fma x eps x))) (/ (exp (- (fma x eps x))) eps)))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.81263627458951,
    "avg_bits_err_output": 25.03612748408849,
    "avg_bits_err_improve": 4.776508790501023,
    "time": 24832.05224609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.00425,
    "avg_bits_err_output": 0.00425,
    "avg_bits_err_improve": 0,
    "time": 4754.92236328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.007375,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 0,
    "time": 16689.607666015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))) (+ 2.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0335,
    "avg_bits_err_output": 0.009,
    "avg_bits_err_improve": 0.0245,
    "time": 8828.4326171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3310.239013671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8579.0849609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2959.697509765625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.824276137616425,
    "avg_bits_err_output": 0.253125,
    "avg_bits_err_improve": 7.571151137616425,
    "time": 43808.2861328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(expm1 (log1p (- (pow (+ x eps) 5.0) (pow x 5.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 7.796183698191227,
    "avg_bits_err_output": 7.811471594147508,
    "avg_bits_err_improve": -0.015287895956281439,
    "time": 14887.258056640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.942217949882018,
    "avg_bits_err_output": 0.0512268344109679,
    "avg_bits_err_improve": 15.89099111547105,
    "time": 13772.70654296875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (fma (pow (exp (* x 10.0)) x) (cos x) (cos x)) (cos x))",
    "output_parens": 8,
    "avg_bits_err_input": 3.5227591036483363,
    "avg_bits_err_output": 3.151608268678246,
    "avg_bits_err_improve": 0.3711508349700905,
    "time": 18966.35693359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (fma x x 1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 14.88172632941671,
    "avg_bits_err_output": 14.88185132941671,
    "avg_bits_err_improve": -0.00012500000000059686,
    "time": 10608.091552734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.74881219898697,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.74881219898697,
    "time": 4604.927490234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.073055117603154,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.07280511760315,
    "time": 4395.0615234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.29375,
    "avg_bits_err_improve": 63.70625,
    "time": 18835.227783203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* 4e-32 (* t t))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325134047954,
    "avg_bits_err_output": 0.410012218755409,
    "avg_bits_err_improve": 61.43323912172413,
    "time": 14041.19677734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- b (sqrt (fma c (* a -4.0) (* b b))))) (/ a 0.25)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.2952012372741,
    "avg_bits_err_output": 21.959994910812192,
    "avg_bits_err_improve": 12.335206326461908,
    "time": 27008.3408203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (* -4.0 (/ c (+ b (sqrt (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.678949773148155,
    "avg_bits_err_output": 21.70275635517597,
    "avg_bits_err_improve": 11.976193417972183,
    "time": 24861.4052734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2296.30712890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.22878109257118,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 40.219406092571184,
    "time": 3764.93359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.4468839462664,
    "avg_bits_err_output": 20.4468839462664,
    "avg_bits_err_improve": 0,
    "time": 6256.365966796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6851025900384813,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6851025900384813,
    "time": 6631.16943359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.038125,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.03725,
    "time": 6861.753662109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(fma (+ a b) b (* a (+ a b)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.023719360937770433,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 0.012344360937770433,
    "time": 4280.180419921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.015625,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.014875,
    "time": 3042.706787109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.000875,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.000875,
    "time": 1566.232666015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ c (+ d (+ b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40499793281619606,
    "avg_bits_err_output": 0.2365,
    "avg_bits_err_improve": 0.16849793281619607,
    "time": 7678.131591796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (* (cos (* x 2.0)) 0.5) 0.0) (/ (- (* 0.5 (* (cos (* x 2.0)) 0.5)) (* (* (cos (* x 2.0)) 0.5) (* (cos (* x 2.0)) 0.5))) (* (cos (* x 2.0)) 0.5)) (- 1.0 (pow (cos x) 2.0))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 33,
    "avg_bits_err_input": 30.082026384833778,
    "avg_bits_err_output": 30.042057698769455,
    "avg_bits_err_improve": 0.03996868606432358,
    "time": 14413.700927734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.184016653323592,
    "avg_bits_err_output": 0.2976462406251803,
    "avg_bits_err_improve": 23.88637041269841,
    "time": 14255.398681640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (sin x) 0.0) (/ (if (!= (- (* x (sin x)) (- (pow (sin x) 2.0))) 0.0) (/ (- (pow (* x (sin x)) 2.0) (pow (sin x) 4.0)) (fma x (sin x) (pow (sin x) 2.0))) (- (* x (sin x)) (pow (sin x) 2.0))) (sin x)) (- x (sin x))) (tan x))",
    "output_parens": 33,
    "avg_bits_err_input": 30.419596007039722,
    "avg_bits_err_output": 30.379272601328463,
    "avg_bits_err_improve": 0.04032340571125914,
    "time": 34995.40771484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00575,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.005375,
    "time": 2741.8681640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n))))",
    "output_parens": 22,
    "avg_bits_err_input": 47.8415147810946,
    "avg_bits_err_output": 14.167216306298121,
    "avg_bits_err_improve": 33.67429847479648,
    "time": 26603.23095703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (+ (/ (/ c 4.0) (fma d d (* c c))) (* (/ (+ c (+ c c)) (fma d d (* c c))) 0.25))))",
    "output_parens": 17,
    "avg_bits_err_input": 25.609066136059518,
    "avg_bits_err_output": 22.946583120499216,
    "avg_bits_err_improve": 2.6624830155603014,
    "time": 15828.448486328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.982753069101992,
    "avg_bits_err_output": 23.06828250315598,
    "avg_bits_err_improve": 2.9144705659460115,
    "time": 15917.346435546875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.037625,
    "avg_bits_err_output": 0.021926748933204645,
    "avg_bits_err_improve": 0.015698251066795354,
    "time": 5206.675537109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (fma (- 1.0 ux) ux (- (- (* (* ux maxCos) (+ (fma ux maxCos (- 1.0 ux)) (- 1.0 ux))) ux)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.570782447418955,
    "avg_bits_err_output": 0.5390358472765265,
    "avg_bits_err_improve": 13.031746600142428,
    "time": 26481.54638671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (if (!= (+ (pow (- 1.0 ux) 2.0) (+ 1.0 (* maxCos (- (* ux ux) ux)))) 0.0) (/ (- (* (+ 1.0 (* maxCos (- (* ux ux) ux))) (+ 1.0 (* maxCos (- (* ux ux) ux)))) (log (+ 1.0 (expm1 (pow (- 1.0 ux) 4.0))))) (+ (pow (- 1.0 ux) 2.0) (+ 1.0 (* maxCos (- (* ux ux) ux))))) (- 1.0 (fma maxCos (- ux (* ux ux)) (pow (- 1.0 ux) 2.0)))) (- (* ux (* maxCos (fma ux maxCos (- 1.0 ux))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 13.613212439241869,
    "avg_bits_err_output": 12.089646065692174,
    "avg_bits_err_improve": 1.523566373549695,
    "time": 30854.5908203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) xi) (fma (sqrt (- 1.0 (* (* ux ux) (* (- maxCos (* ux maxCos)) (- maxCos (* ux maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (- maxCos (* ux maxCos)) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.33857795013352554,
    "avg_bits_err_output": 0.32854468400310355,
    "avg_bits_err_improve": 0.010033266130421992,
    "time": 43673.6240234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax)))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.2018069536215519,
    "avg_bits_err_output": 0.2018069536215519,
    "avg_bits_err_improve": 0,
    "time": 32507.040283203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(if (!= (sqrt (/ u1 (- 1.0 u1))) 0.0) (/ (* (/ u1 (- 1.0 u1)) (sin (* 6.28318530718 u2))) (sqrt (/ u1 (- 1.0 u1)))) (* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.5326200048436213,
    "avg_bits_err_output": 0.5804040965522232,
    "avg_bits_err_improve": -0.04778409170860198,
    "time": 20358.9013671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3063428212477156,
    "avg_bits_err_output": 0.3063428212477156,
    "avg_bits_err_improve": 0,
    "time": 20837.24560546875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.33003870797885915,
    "avg_bits_err_output": 0.3301637079788592,
    "avg_bits_err_improve": -0.00012500000000004174,
    "time": 44298.852783203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.059045489586960445,
    "avg_bits_err_output": 0.04249266654841896,
    "avg_bits_err_improve": 0.016552823038541484,
    "time": 10690.68896484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (* (exp (/ (fabs x) (* s -4.0))) (exp (/ (fabs x) (* s -4.0)))) (/ (pow (exp (/ (fabs x) (* s -4.0))) 2.0) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.15872914394076296,
    "avg_bits_err_output": 0.12311541764169752,
    "avg_bits_err_improve": 0.03561372629906544,
    "time": 24168.604736328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6646417569147469,
    "avg_bits_err_output": 0.671383895373748,
    "avg_bits_err_improve": -0.006742138459001068,
    "time": 24450.614013671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.17133664783748395,
    "avg_bits_err_output": 0.16523923275447755,
    "avg_bits_err_improve": 0.006097415083006402,
    "time": 21001.088623046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.499164735521869,
    "avg_bits_err_output": 2.4943656958440226,
    "avg_bits_err_improve": 0.004799039677846562,
    "time": 25793.635986328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (fma (/ cosTheta_O (sinh (/ 1.0 v))) (* (/ 0.5 v) (/ cosTheta_i v)) 0.0) (exp (* sinTheta_i (/ sinTheta_O v))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4724252346420962,
    "avg_bits_err_output": 0.4012115049323889,
    "avg_bits_err_improve": 0.0712137297097073,
    "time": 28086.942138671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.152237279469318,
    "avg_bits_err_output": 0.0928356502197444,
    "avg_bits_err_improve": 0.05940162924957361,
    "time": 11634.505615234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (- -1.0 (- (* alpha alpha))) (log (* alpha alpha))) (* PI (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.47341459829872734,
    "avg_bits_err_output": 0.47904896747121617,
    "avg_bits_err_improve": -0.005634369172488829,
    "time": 22959.513671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (if (!= (- -1.0 (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) 0.0) (/ (+ -1.0 (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 6.0)) (+ 1.0 (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0))) (+ (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0) -1.0))) s)",
    "output_parens": 21,
    "avg_bits_err_input": 1.3315633394986508,
    "avg_bits_err_output": 1.2150017463523135,
    "avg_bits_err_improve": 0.1165615931463373,
    "time": 27443.802490234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (log1p (if (!= (- 1.0 (/ 1.0 (fma 4.0 u -1.0))) 0.0) (/ (+ -1.0 (/ 1.0 (- (* (fma 4.0 u -1.0) (* 4.0 u)) (fma 4.0 u -1.0)))) (- 1.0 (/ 1.0 (fma 4.0 u -1.0)))) (+ -1.0 (/ -1.0 (fma 4.0 u -1.0))))))",
    "output_parens": 21,
    "avg_bits_err_input": 12.384435603547642,
    "avg_bits_err_output": 11.67083216697895,
    "avg_bits_err_improve": 0.7136034365686914,
    "time": 21993.9443359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (- (* (* PI s) (/ r -0.16666666666666666)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.14616035262140678,
    "avg_bits_err_output": 0.14948674998067565,
    "avg_bits_err_improve": -0.0033263973592688734,
    "time": 26710.45556640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9163473813057331,
    "avg_bits_err_output": 0.7107310999372732,
    "avg_bits_err_improve": 0.20561628136845989,
    "time": 27299.282958984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (if (!= (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)) 0.0) (/ (* (sqrt (- 1.0 (+ cosTheta cosTheta))) (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* cosTheta (sqrt PI)))) (* (* cosTheta (sqrt PI)) (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* cosTheta (sqrt PI))))) (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta))) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 40,
    "avg_bits_err_input": 0.7136843510275821,
    "avg_bits_err_output": 0.4747907906343807,
    "avg_bits_err_improve": 0.23889356039320142,
    "time": 25503.786865234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.477390005953321,
    "avg_bits_err_output": 0.524269562421351,
    "avg_bits_err_improve": 12.95312044353197,
    "time": 23702.89111328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.526408367458307,
    "avg_bits_err_output": 0.29078426761155934,
    "avg_bits_err_improve": 13.235624099846747,
    "time": 19031.02734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.343850610989191,
    "avg_bits_err_output": 0.3132712406251803,
    "avg_bits_err_improve": 14.030579370364011,
    "time": 17358.34375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ cos2phi (* alphax alphax)) (/ (/ sin2phi alphay) alphay)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.578819480856613,
    "avg_bits_err_output": 0.5306699224298548,
    "avg_bits_err_improve": 12.048149558426758,
    "time": 16199.57470703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -5e+19) (- (* PI l) 0.0) (if (<= (* PI l) 200.0) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (- (* PI l) 0.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 16.444907328151956,
    "avg_bits_err_output": 0.6133311448921919,
    "avg_bits_err_improve": 15.831576183259765,
    "time": 21453.522216796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21333116579459072,
    "avg_bits_err_output": 0.15601744391904987,
    "avg_bits_err_improve": 0.057313721875540846,
    "time": 17046.350341796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.883072798316967,
    "avg_bits_err_output": 10.618202428838172,
    "avg_bits_err_improve": 3.2648703694787944,
    "time": 22320.8603515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (fma (/ (exp (* PI (/ f 4.0))) (- (exp (* PI (/ f 4.0))) (exp (* f (/ PI -4.0))))) (/ (/ (exp (* PI (/ f 4.0))) 2.0) (- (exp (* PI (/ f 4.0))) (exp (* f (/ PI -4.0))))) (fma (/ (exp (* PI (/ f 4.0))) (- (exp (* PI (/ f 4.0))) (exp (* f (/ PI -4.0))))) (/ (/ (exp (* PI (/ f 4.0))) 2.0) (- (exp (* PI (/ f 4.0))) (exp (* f (/ PI -4.0))))) (/ (- (pow (exp (* f (/ PI -4.0))) 2.0)) (pow (- (exp (* PI (/ f 4.0))) (exp (* f (/ PI -4.0)))) 2.0))))) (/ PI -4.0))",
    "output_parens": 65,
    "avg_bits_err_input": 61.58871014308897,
    "avg_bits_err_output": 61.60182003196986,
    "avg_bits_err_improve": -0.013109888880890708,
    "time": 52639.188232421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.99137361713371,
    "avg_bits_err_output": 33.739391355283075,
    "avg_bits_err_improve": 9.251982261850635,
    "time": 24973.15576171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin th) (/ (sin ky) (hypot (sin ky) (sin kx))))",
    "output_parens": 7,
    "avg_bits_err_input": 4.085453883550879,
    "avg_bits_err_output": 0.21409229375396618,
    "avg_bits_err_improve": 3.871361589796913,
    "time": 29488.10107421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0) (pow (* (* 2.0 (/ l Om)) (sin kx)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.1194553301976353,
    "avg_bits_err_output": 0.00475,
    "avg_bits_err_improve": 1.1147053301976353,
    "time": 16366.0322265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (/ (* Om (/ Om Omc)) Omc)) (+ 1.0 (* 2.0 (* (/ t l) (/ t l)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.450937440019898,
    "avg_bits_err_output": 10.450937440019898,
    "avg_bits_err_improve": 0,
    "time": 18098.13330078125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -4600000000.0) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= n 2000000000000.0) (* (* (sqrt (* 2.0 (fabs U))) (sqrt (fabs (- t (fma l (/ (* l 2.0) Om) (* (pow (/ l Om) 2.0) (* n (- U U*)))))))) (sqrt (fabs n))) (* (sqrt (* 2.0 (* U (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt n))))",
    "output_parens": 51,
    "avg_bits_err_input": 34.54947140814998,
    "avg_bits_err_output": 18.554504137749287,
    "avg_bits_err_improve": 15.99496727040069,
    "time": 41404.80078125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -750000000000.0) (/ 2.0 (* (/ k t) (/ (* (/ k t) (* (pow t 3.0) (* (tan k) (/ (sin k) l)))) l))) (/ 2.0 (/ (/ (* k (* (pow t 3.0) (* (tan k) (* (/ (sin k) l) (+ k k))))) (* t l)) (+ t t))))",
    "output_parens": 28,
    "avg_bits_err_input": 47.70343549375484,
    "avg_bits_err_output": 31.98758943277702,
    "avg_bits_err_improve": 15.715846060977817,
    "time": 48861.45947265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (sin k) (* (/ (tan k) l) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (pow t 3.0) l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.342430985604025,
    "avg_bits_err_output": 27.65813674393043,
    "avg_bits_err_improve": 4.684294241673594,
    "time": 22815.13623046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(+ (/ (* (* (* (cos th) 2.0) (+ a1 a1)) a1) (* (* (sqrt 2.0) 2.0) 2.0)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.5184238750216361,
    "avg_bits_err_output": 0.5338315812676699,
    "avg_bits_err_improve": -0.015407706246033825,
    "time": 24017.157470703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (* (sqrt 2.0) (pow (* 2.0 (* PI n)) (* k -0.5))) (/ (sqrt (* PI n)) (sqrt k)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.5140279260500398,
    "avg_bits_err_output": 0.47975141659074905,
    "avg_bits_err_improve": 0.03427650945929073,
    "time": 20945.722412109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (if (!= (exp (* l -2.0)) 0.0) (/ (if (!= 1.0 0.0) (- (expm1 (* l -4.0))) (- (expm1 (* l -4.0)))) (exp (* l -2.0))) (- (pow (exp l) 2.0) (exp (* l -2.0)))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 40,
    "avg_bits_err_input": 17.213703918742553,
    "avg_bits_err_output": 0.15389888788884412,
    "avg_bits_err_improve": 17.05980503085371,
    "time": 27473.383056640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (if (!= (* K (+ m n)) 0.0) (/ 1.0 (/ 1.0 (* K (+ m n)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 24,
    "avg_bits_err_input": 15.008031903246641,
    "avg_bits_err_output": 15.005036996890055,
    "avg_bits_err_improve": 0.0029949063565855027,
    "time": 19655.103759765625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (hypot 1.0 (/ U (* (cos (/ K 2.0)) (* 2.0 J)))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.203969360937773,
    "avg_bits_err_output": 8.32609436093777,
    "avg_bits_err_improve": 9.877875000000003,
    "time": 44016.454345703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= D 5e-195) (* w0 (sqrt (- 1.0 (* (* h (* (/ M d) (/ D l))) (* (/ M d) (/ D 4.0)))))) (if (<= D 1.4e+156) (* w0 (sqrt (- 1.0 (* (* D (* D (/ (/ M 2.0) d))) (* h (/ (/ M (* d 2.0)) l)))))) (* w0 (sqrt (- 1.0 (* (* h (* (/ M d) (/ D l))) (* (/ M d) (/ D 4.0))))))))",
    "output_parens": 38,
    "avg_bits_err_input": 14.624542998972204,
    "avg_bits_err_output": 11.303589018432803,
    "avg_bits_err_improve": 3.320953980539402,
    "time": 21675.16650390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -4e+130) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) -1e-103) (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (+ (/ A (* (sqrt (/ A (* l V))) (* (* l (+ V V)) 2.0))) (+ (/ A (* (sqrt (/ A (* l V))) (* (* l (+ V V)) 2.0))) (/ (/ 1.0 (/ 1.0 (sqrt (/ A (* l V))))) 2.0))) (sqrt (/ A (* l V))))) (if (<= (* V l) 0.0) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) 2e+79) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (+ (/ (/ A l) (* V 4.0)) (/ (+ (/ A l) (/ A (+ l l))) (+ V V)))))))))",
    "output_parens": 77,
    "avg_bits_err_input": 19.18210017194593,
    "avg_bits_err_output": 12.787033482402185,
    "avg_bits_err_improve": 6.395066689543745,
    "time": 22974.392333984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= h 2.1e+175) (/ (/ (* c0 (if (!= (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M))))) (fma c0 (/ (pow (/ d D) 2.0) (* w h)) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* w h))) 2.0) (* M M)))))) w) 2.0) (* (/ c0 (* 2.0 w)) (if (!= (- (* c0 (* d (/ d (* D (* w (* D h)))))) (sqrt (- (pow (* c0 (* d (/ d (* D (* w (* D h)))))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* c0 (* d (/ d (* D (* w (* D h)))))) (sqrt (- (pow (* c0 (* d (/ d (* D (* w (* D h)))))) 2.0) (* M M)))))) (fma c0 (* d (/ d (* D (* w (* D h))))) (sqrt (- (pow (* c0 (* d (/ d (* D (* w (* D h)))))) 2.0) (* M M)))))))",
    "output_parens": 110,
    "avg_bits_err_input": 59.74169802210378,
    "avg_bits_err_output": 31.006076823510195,
    "avg_bits_err_improve": 28.735621198593588,
    "time": 66327.728515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 4e+256) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (fma 0.5 (* h (/ (pow (* M (/ D (* d 2.0))) 2.0) l)) -1.0) (- (* (sqrt (if (!= (/ d (* h l)) 0.0) (/ 1.0 (/ 1.0 (/ d (* h l)))) (/ d (* h l)))) (sqrt d)))))",
    "output_parens": 52,
    "avg_bits_err_input": 27.016522333590924,
    "avg_bits_err_output": 23.33089432670247,
    "avg_bits_err_improve": 3.6856280068884537,
    "time": 58901.070068359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (if (!= (/ 0.5 (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) 0.0) (/ (/ (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (* x (/ x (+ 1.0 (hypot 1.0 x)))) (+ (hypot 1.0 x) -1.0)) (hypot 1.0 x)) (/ 1.0 (/ 0.5 (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))) (/ (+ 0.5 (/ -0.5 (hypot 1.0 x))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 49,
    "avg_bits_err_input": 15.448066746173776,
    "avg_bits_err_output": 0.025434210940655073,
    "avg_bits_err_improve": 15.42263253523312,
    "time": 31627.21142578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9822924812503606,
    "avg_bits_err_output": 0.013782173480336583,
    "avg_bits_err_improve": 0.968510307770024,
    "time": 4092.7470703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (- (/ (/ 1.0 PI) (* (- 1.0 (* v v)) t)) (* (* 5.0 (/ v t)) (/ (/ v PI) (- 1.0 (* v v))))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.40754667459338745,
    "avg_bits_err_output": 0.2664203940182999,
    "avg_bits_err_improve": 0.14112628057508753,
    "time": 20254.930419921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (fma v v -1.0) (/ (sqrt (- 2.0 (* v (* v 6.0)))) -4.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.015026789890100095,
    "avg_bits_err_output": 0.011160675277357783,
    "avg_bits_err_improve": 0.003866114612742312,
    "time": 3199,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.586107011897837,
    "avg_bits_err_output": 0.586107011897837,
    "avg_bits_err_improve": 0,
    "time": 9144.267822265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.06915416049006,
    "avg_bits_err_output": 2.0355079198648798,
    "avg_bits_err_improve": 0.03364624062518029,
    "time": 16671.784912109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- Vef (- Ec (+ mu EDonor))) KbT)))) (/ NaChar (- (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02500558392515775,
    "avg_bits_err_output": 0.02500558392515775,
    "avg_bits_err_improve": 0,
    "time": 8658.9990234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (* (* b b) (+ (* b b) (* a (+ a a))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.1824013316399258,
    "avg_bits_err_output": 0.09269116562662262,
    "avg_bits_err_improve": 0.08971016601330319,
    "time": 8162.36474609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (+ (* (pow (* a b) 2.0) 2.0) (+ (pow a 4.0) (pow b 4.0))) (* 4.0 (fma (* a a) (+ a 1.0) (* (* b b) (- 1.0 (* a 3.0)))))) -1.0)",
    "output_parens": 17,
    "avg_bits_err_input": 0.1823637998834221,
    "avg_bits_err_output": 0.02214894988053758,
    "avg_bits_err_improve": 0.16021485000288452,
    "time": 21154.615966796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (fma (* b b) (fma a a (fma b b (* a a))) (pow a 4.0)) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 0.18817552734808446,
    "avg_bits_err_output": 0.11024883931610423,
    "avg_bits_err_improve": 0.07792668803198023,
    "time": 16196.470458984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (if (!= (/ x (sqrt (fma x x (* 4.0 (* p p))))) 0.0) (/ (+ x (/ (* x x) (sqrt (fma x x (* 4.0 (* p p)))))) x) (+ 1.0 (/ x (sqrt (fma x x (* 4.0 (* p p)))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 13.050855588987446,
    "avg_bits_err_output": 13.20318284915931,
    "avg_bits_err_improve": -0.15232726017186415,
    "time": 19482.303466796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (if (!= (+ 1.0 (+ (/ (expm1 (+ x x)) (expm1 x)) 1.0)) 0.0) (/ (- (* (+ (/ (expm1 (+ x x)) (expm1 x)) 1.0) (+ (/ (expm1 (+ x x)) (expm1 x)) 1.0)) 1.0) (+ 1.0 (+ (/ (expm1 (+ x x)) (expm1 x)) 1.0))) (/ (expm1 (+ x x)) (expm1 x))))",
    "output_parens": 32,
    "avg_bits_err_input": 40.95910217272023,
    "avg_bits_err_output": 0.068875,
    "avg_bits_err_improve": 40.89022717272023,
    "time": 7653.580322265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (/ (pow (tan x) 2.0) (+ x (tan x)))) (- x (tan x))))",
    "output_parens": 19,
    "avg_bits_err_input": 31.1622441417708,
    "avg_bits_err_output": 30.63564852337919,
    "avg_bits_err_improve": 0.5265956183916103,
    "time": 25987.24755859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))) 0.0) (* (/ c (- (- b_2) (sqrt (fma a (- c) (* b_2 b_2))))) a) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.58034283479927,
    "avg_bits_err_output": 21.65762736444241,
    "avg_bits_err_improve": 11.92271547035686,
    "time": 16396.677978515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- (sqrt (- (* b_2 b_2) (* a c)))) b_2)) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.07013790512233,
    "avg_bits_err_output": 21.88625037434741,
    "avg_bits_err_improve": 12.183887530774921,
    "time": 18784.0546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.809175377527488,
    "avg_bits_err_output": 31.054778701911584,
    "avg_bits_err_improve": 0.7543966756159044,
    "time": 16494.83154296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.28090906370833,
    "avg_bits_err_output": 10.825041998956458,
    "avg_bits_err_improve": 21.45586706475187,
    "time": 32096.400634765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (log1p N) (log N))",
    "output_parens": 3,
    "avg_bits_err_input": 29.299182087719696,
    "avg_bits_err_output": 29.298850929999393,
    "avg_bits_err_improve": 0.0003311577203035654,
    "time": 15088.915771484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (/ (+ -1.0 (/ (+ x x) (+ x 1.0))) (+ x x)) (/ -1.0 (+ x x)))",
    "output_parens": 9,
    "avg_bits_err_input": 14.731404307233335,
    "avg_bits_err_output": 14.743906766919899,
    "avg_bits_err_improve": -0.012502459686563938,
    "time": 18333.05322265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -1.7e-70) (+ (fma (cos x) (cos eps) (- (cos x))) (- (* (sin x) (sin eps)))) (if (<= x 1.32e-98) (if (!= (+ (cos (+ x eps)) (cos x)) 0.0) (/ (- (* (sin x) (sin x)) (* (sin (+ x eps)) (sin (+ x eps)))) (+ (cos (+ x eps)) (cos x))) (- (cos (+ x eps)) (cos x))) (+ (fma (cos x) (cos eps) (- (cos x))) (- (* (sin x) (sin eps))))))",
    "output_parens": 48,
    "avg_bits_err_input": 39.3162565886154,
    "avg_bits_err_output": 2.0037681339026157,
    "avg_bits_err_improve": 37.312488454712785,
    "time": 25221.77978515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(exp (* 1.0 (log1p (- (cbrt (+ x 1.0)) (- (cbrt x) -1.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 29.61538023469967,
    "avg_bits_err_output": 29.327000931567813,
    "avg_bits_err_improve": 0.2883793031318582,
    "time": 13779.2783203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.256443566921956,
    "avg_bits_err_output": 30.256443566921956,
    "avg_bits_err_improve": 0,
    "time": 22968.27734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.98275498666728,
    "avg_bits_err_output": 21.84795773318402,
    "avg_bits_err_improve": 12.13479725348326,
    "time": 22637.158203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.42168904118794,
    "avg_bits_err_output": 22.20114335391151,
    "avg_bits_err_improve": 12.220545687276427,
    "time": 27481.243896484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(log (exp (/ (log1p (- x)) (log1p x))))",
    "output_parens": 6,
    "avg_bits_err_input": 61.33684103380118,
    "avg_bits_err_output": 0.02441992500144232,
    "avg_bits_err_improve": 61.31242110879974,
    "time": 14088.098876953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(exp (* 1.0 (- (exp (log1p (log (+ (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n))))))) 1.0)))",
    "output_parens": 14,
    "avg_bits_err_input": 63.0083649550288,
    "avg_bits_err_output": 2.377016608176958,
    "avg_bits_err_improve": 60.631348346851844,
    "time": 16286.234619140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ (+ eps eps) (- (- -2.0 eps) eps)) (log (+ 1.0 (expm1 (+ 1.0 (/ -1.0 (+ eps 1.0))))))))",
    "output_parens": 12,
    "avg_bits_err_input": 58.53179012753429,
    "avg_bits_err_output": 50.48924441778579,
    "avg_bits_err_improve": 8.042545709748502,
    "time": 21365.26171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(- (/ (log (+ 1.0 (expm1 (- 1.0 (/ x (tan x)))))) (+ x x)) (/ (+ (/ -1.0 (/ x (tan x))) 1.0) (/ x (/ (/ x 2.0) (tan x)))))",
    "output_parens": 18,
    "avg_bits_err_input": 59.87089322200644,
    "avg_bits_err_output": 59.86004085356875,
    "avg_bits_err_improve": 0.010852368437689108,
    "time": 31585.82421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (if (!= (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a)))) 0.0) (/ 1.0 (/ 1.0 (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a)))))) (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a))))) (expm1 (* eps b)))",
    "output_parens": 28,
    "avg_bits_err_input": 60.37253754349297,
    "avg_bits_err_output": 29.596792352123757,
    "avg_bits_err_improve": 30.77574519136921,
    "time": 29888.96728515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.26232657018524,
    "avg_bits_err_output": 0.39649060156295074,
    "avg_bits_err_improve": 40.865835968622285,
    "time": 7942.16259765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.71435071468072,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.71347571468072,
    "time": 3059.052490234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.3258058584518,
    "avg_bits_err_output": 0.01681923215775668,
    "avg_bits_err_improve": 29.308986626294043,
    "time": 5044.017333984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (+ (- (exp x) (exp (- x))) -2.0) 0.0) (/ (+ (fma (/ -1.0 (exp x)) (exp (- x)) (exp (* x -2.0))) (if (!= (* (exp x) (+ (exp x) -2.0)) 0.0) (/ (+ (pow (* (exp x) (+ (exp x) -2.0)) 2.0) (* (* (exp x) (+ (exp x) -2.0)) (fma (exp x) -2.0 (fma (exp (* x -2.0)) -1.0 4.0)))) (* (exp x) (+ (exp x) -2.0))) (fma (exp x) (+ (exp x) -4.0) (fma (exp (* x -2.0)) -1.0 4.0)))) (+ (- (exp x) (exp (- x))) -2.0)) (+ (+ (exp x) -2.0) (exp (- x))))",
    "output_parens": 60,
    "avg_bits_err_input": 29.413189572216908,
    "avg_bits_err_output": 29.315549760278003,
    "avg_bits_err_improve": 0.09763981193890459,
    "time": 23946.56494140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ (- (/ x (+ x 1.0)) 2.0) x) (/ 1.0 (+ x -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.814365027234135,
    "avg_bits_err_output": 9.80623446501965,
    "avg_bits_err_improve": 0.008130562214486048,
    "time": 18688.003173828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (tan x))",
    "output_parens": 4,
    "avg_bits_err_input": 37.270815854716275,
    "avg_bits_err_output": 37.270815854716275,
    "avg_bits_err_improve": 0,
    "time": 20744.21484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (if (!= (sqrt (+ x 1.0)) 0.0) (/ (+ x 1.0) (sqrt (+ x 1.0))) (sqrt (+ x 1.0))) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 23,
    "avg_bits_err_input": 29.537471904759915,
    "avg_bits_err_output": 0.19101221875540855,
    "avg_bits_err_improve": 29.346459686004508,
    "time": 11913.961669921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 36.47468880428797,
    "avg_bits_err_output": 21.218877732388382,
    "avg_bits_err_improve": 15.25581107189959,
    "time": 20576.69970703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (!= (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x)))) 0.0) (if (!= (/ (/ 1.0 x) (+ (/ 2.0 (sqrt x)) (/ 2.0 (sqrt (- x -1.0))))) 0.0) (/ (+ 1.0 (+ 1.0 (/ (/ -4.0 (- x -1.0)) (/ 2.0 x)))) (* x (+ (/ 2.0 (sqrt x)) (/ 2.0 (sqrt (- x -1.0)))))) (/ (+ (/ -2.0 (- x -1.0)) (/ 2.0 x)) (+ (/ 2.0 (sqrt x)) (/ 2.0 (sqrt (- x -1.0)))))) (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (+ 1.0 x)))))",
    "output_parens": 49,
    "avg_bits_err_input": 19.69575315252571,
    "avg_bits_err_output": 19.725939090092997,
    "avg_bits_err_improve": -0.030185937567285492,
    "time": 19322.65576171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- 1.0 (- (atan N) (+ (atan (+ N 1.0)) -1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 15.167809408758213,
    "avg_bits_err_output": 15.167802837121476,
    "avg_bits_err_improve": 6.571636737007225e-06,
    "time": 14580.52734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.719850736957508,
    "avg_bits_err_output": 1.2385090535832974,
    "avg_bits_err_improve": 28.48134168337421,
    "time": 28239.282958984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (- (- 0.0 (* (/ m v) (* (- 1.0 m) (- 1.0 m)))) (- m 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.08232272405410936,
    "avg_bits_err_output": 0.0733627615533882,
    "avg_bits_err_improve": 0.00895996250072116,
    "time": 18780.939453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* a (- b)) (/ (/ 1.0 a) b))",
    "output_parens": 5,
    "avg_bits_err_input": 16.37196471908534,
    "avg_bits_err_output": 0.28287771237028264,
    "avg_bits_err_improve": 16.089087006715058,
    "time": 11933.16064453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (if (!= PI 0.0) (/ (* (/ angle 180.0) (* PI PI)) PI) (* PI (/ angle 180.0))))) 2.0))",
    "output_parens": 17,
    "avg_bits_err_input": 20.389233911526752,
    "avg_bits_err_output": 20.392699361561608,
    "avg_bits_err_improve": -0.003465450034855877,
    "time": 34984.069580078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) -5e+193) (* (if (!= (* (exp (* 1.0 (log (sin (* angle (/ PI -180.0)))))) (pow b 2.0)) 0.0) (- (* (pow (* a (sin (* angle (/ PI -180.0)))) 2.0) (+ 0.0 (/ 1.0 (sin (* angle (/ PI -180.0)))))) (/ 1.0 (/ 1.0 (* (sin (* angle (/ PI -180.0))) (pow b 2.0))))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0))))) (if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) 2e+267) (* (* 2.0 (- (pow a 2.0) (pow b 2.0))) (/ (- (* (sin (* PI (/ (+ angle angle) 180.0))) 0.5) (* (- (sin (/ (* angle PI) 180.0))) (sin (- (/ PI 2.0) (/ (* angle PI) 180.0))))) -2.0)) (* (if (!= (* (cos (- (/ PI 2.0) (* angle (/ PI -180.0)))) (pow b 2.0)) 0.0) (- (* (pow (* a (sin (* angle (/ PI -180.0)))) 2.0) (+ 0.0 (/ 1.0 (sin (* angle (/ PI -180.0)))))) (/ 1.0 (/ 1.0 (* (sin (* angle (/ PI -180.0))) (pow b 2.0))))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0)))))))",
    "output_parens": 131,
    "avg_bits_err_input": 31.27805907037909,
    "avg_bits_err_output": 27.776127498991418,
    "avg_bits_err_improve": 3.501931571387672,
    "time": 43836.72412109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (/ PI 180.0))) a) 2.0) (pow (* b (cos (if (!= PI 0.0) (* (/ angle (* PI 180.0)) (* PI PI)) (* (/ angle 180.0) PI)))) 2.0))",
    "output_parens": 17,
    "avg_bits_err_input": 20.15324652601649,
    "avg_bits_err_output": 20.123174243620202,
    "avg_bits_err_improve": 0.030072282396286454,
    "time": 40477.654296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (/ m v) (- m (* m m))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1864505640636719,
    "avg_bits_err_output": 0.1799209937893628,
    "avg_bits_err_improve": 0.006529570274309088,
    "time": 17827.092529296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.31238967449275823,
    "avg_bits_err_output": 0.31559005974901155,
    "avg_bits_err_improve": -0.003200385256253324,
    "time": 21513.819091796875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (sin v) (+ (* (cos v) e) 1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1309387218755409,
    "avg_bits_err_output": 0.12971936093777042,
    "avg_bits_err_improve": 0.001219360937770475,
    "time": 17553.281005859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.032407256751274,
    "avg_bits_err_output": 17.024819025085606,
    "avg_bits_err_improve": 0.0075882316656681326,
    "time": 34851.69775390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.75275759132865,
    "avg_bits_err_output": 0.16716297031547472,
    "avg_bits_err_improve": 52.58559462101318,
    "time": 28739.004150390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c 4.0) (- (- b) (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.499638671508404,
    "avg_bits_err_output": 0.3378902425863504,
    "avg_bits_err_improve": 28.161748428922053,
    "time": 31027.688232421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.40407546852819,
    "avg_bits_err_output": 0.2315996250072113,
    "avg_bits_err_improve": 43.17247584352098,
    "time": 27037.909423828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (!= (/ (- (- (sqrt (+ (* b b) (* a (* c -4.0))))) b) (* a 2.0)) 0.0) (- (/ (- (- (* c -2.0) 0.0)) (- (- (sqrt (fma b b (* a (* c -4.0))))) b)) 0.0) (/ (/ (- b (sqrt (fma b b (* a (* c -4.0))))) -2.0) a))",
    "output_parens": 29,
    "avg_bits_err_input": 34.004483310277834,
    "avg_bits_err_output": 19.873779913958234,
    "avg_bits_err_improve": 14.1307033963196,
    "time": 22895.513427734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8421704250420191,
    "avg_bits_err_output": 0.8392374263551654,
    "avg_bits_err_improve": 0.002932998686853705,
    "time": 28212.085693359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (/ (if (!= (/ 4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)) 0.0) (/ (log (+ 1.0 (expm1 (+ (pow (/ 4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)) 2.0) (/ -4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)))))) (/ 4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0))) (+ -1.0 (/ 4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)))) (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 52,
    "avg_bits_err_input": 29.67968941526113,
    "avg_bits_err_output": 29.73204960625182,
    "avg_bits_err_improve": -0.052360190990690114,
    "time": 16298.226318359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= (/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x)))) 2e-7) (if (!= (/ (pow (exp x) 2.0) (pow (+ (exp x) (exp (- x))) 2.0)) 0.0) (/ (expm1 (* x 4.0)) (/ (exp (* x 2.0)) (/ 1.0 (pow (+ (exp x) (exp (- x))) 2.0)))) (/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))) (- (/ (exp x) (+ (exp (- x)) (exp x))) (/ 1.0 (+ (exp (* x 2.0)) 1.0))))",
    "output_parens": 53,
    "avg_bits_err_input": 58.03530237781477,
    "avg_bits_err_output": 0.6824889053422446,
    "avg_bits_err_improve": 57.352813472472526,
    "time": 22065.171142578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x 2.0)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 58.10137886102345,
    "avg_bits_err_output": 0.027198120312590144,
    "avg_bits_err_improve": 58.07418074071086,
    "time": 9543.035400390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.0072712406251802895,
    "avg_bits_err_output": 0.0072712406251802895,
    "avg_bits_err_improve": 0,
    "time": 3871.53369140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.2495,
    "avg_bits_err_output": 32.2495,
    "avg_bits_err_improve": 0,
    "time": 4236.747314453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (+ (+ (/ x (- 1.0 x)) (/ x (- 1.0 x))) (/ (- 1.0 x) (- 1.0 x)))))",
    "output_parens": 11,
    "avg_bits_err_input": 58.52155357422325,
    "avg_bits_err_output": 58.475570456890736,
    "avg_bits_err_improve": 0.04598311733251137,
    "time": 19673.545654296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.02789624062518029,
    "avg_bits_err_output": 0.02789624062518029,
    "avg_bits_err_improve": 0,
    "time": 4944.43798828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (* (cos (atan (/ eh (* ew (tan t))))) (sin t))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12275,
    "avg_bits_err_output": 0.12344812031259014,
    "avg_bits_err_improve": -0.0006981203125901447,
    "time": 26083.829833984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13019812031259012,
    "avg_bits_err_output": 0.13019812031259012,
    "avg_bits_err_improve": 0,
    "time": 25856.642578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (if (!= (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0))) 0.0) (/ (- (* (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0))) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0)))) (* (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0))) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0))))) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0)))) (cos (/ (+ phi1 phi2) 2.0)))) (- phi1 phi2)))",
    "output_parens": 44,
    "avg_bits_err_input": 39.42654678543464,
    "avg_bits_err_output": 0.1517951373974483,
    "avg_bits_err_improve": 39.27475164803719,
    "time": 30882.757568359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.341059708464464,
    "avg_bits_err_output": 0.011686481637041212,
    "avg_bits_err_improve": 14.329373226827423,
    "time": 6610.20068359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (sin delta) (* (cos phi1) (cos theta))))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.13565926880974163,
    "avg_bits_err_output": 0.13627122707948489,
    "avg_bits_err_improve": -0.0006119582697432513,
    "time": 44370.751708984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.7435470852624,
    "avg_bits_err_output": 0.1711323312532451,
    "avg_bits_err_improve": 52.57241475400915,
    "time": 32579.207763671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* a -3.0)))) (- b)) 0.0) (* (* a -3.0) (/ c (- (sqrt (fma b b (* c (* a -3.0)))) (- b)))) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.642582371706403,
    "avg_bits_err_output": 0.3441000015744893,
    "avg_bits_err_improve": 28.298482370131914,
    "time": 30088.999755859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* c (* -3.0 a)) 0.0) (/ (fma (* c (* -3.0 a)) (* c (* -3.0 a)) (* b (* b (* c (* -3.0 a))))) (* c (* -3.0 a))) (fma c (* -3.0 a) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 40,
    "avg_bits_err_input": 43.44111972458669,
    "avg_bits_err_output": 0.25164210625757183,
    "avg_bits_err_improve": 43.18947761832912,
    "time": 24999.037353515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -5.8e+149) (/ (expm1 (log1p (- b))) (* 3.0 a)) (if (<= b 3.7e-295) (/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a)) (if (<= b 1.35e+154) (/ (if (!= (- b 0.0) 0.0) (* (* a c) (/ 3.0 (- (- b) (sqrt (fma b b (* (* a c) -3.0)))))) (- (sqrt (fma b b (* (* a c) -3.0))) b)) (* 3.0 a)) (/ (if (!= b 0.0) (* -3.0 (* (/ c b) a)) (- b)) (* a 3.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 34.06653552731876,
    "avg_bits_err_output": 20.67236489454506,
    "avg_bits_err_improve": 13.394170632773704,
    "time": 25776.018310546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (log1p (expm1 (cos (- lambda1 lambda2)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 12.991207689749464,
    "avg_bits_err_output": 12.998460135011982,
    "avg_bits_err_improve": -0.0072524452625177815,
    "time": 36524.88623046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.167248913616987,
    "avg_bits_err_output": 0.5423790721199043,
    "avg_bits_err_improve": 28.624869841497084,
    "time": 18913.0048828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.011625,
    "avg_bits_err_output": 0.045124287053355215,
    "avg_bits_err_improve": -0.03349928705335521,
    "time": 3418.258544921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(if (<= x -4e+115) (- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0))) (if (<= x 4.2e+152) (- (- (+ (/ 1.0 (+ x -1.0)) (/ x (- 1.0 (* x x)))) (/ 1.0 (- 1.0 (* x x))))) (- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 14.508728574786986,
    "avg_bits_err_output": 13.269597005988475,
    "avg_bits_err_improve": 1.239131568798511,
    "time": 19053.0361328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (* (* (sqrt (- F)) (sqrt (* -2.0 (- (* A (* C 4.0)) (pow B 2.0))))) (/ (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C))) (- (* A (* C 4.0)) (pow B 2.0)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 1e+222) (* (sqrt 2.0) (/ (sqrt (* (* F (- (pow B 2.0) (* A (* 4.0 C)))) (+ C (- A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* 4.0 C)) (pow B 2.0)))) 0.0))",
    "output_parens": 91,
    "avg_bits_err_input": 52.501496761601125,
    "avg_bits_err_output": 46.52693036015184,
    "avg_bits_err_improve": 5.974566401449287,
    "time": 40416.020263671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -4e+120) (* (atan (/ (- C (if (!= A 0.0) (/ (* A (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) A) (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) B)) (/ 180.0 PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 0.0) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (* (pow (- A C) 2.0) 0.0) (pow B 2.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (- C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) PI)) (* 180.0 (/ (atan (/ (- C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) B)) PI))))",
    "output_parens": 88,
    "avg_bits_err_input": 29.037128243422124,
    "avg_bits_err_output": 25.324473706263934,
    "avg_bits_err_improve": 3.7126545371581905,
    "time": 23669.200927734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2e-310) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 F)))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (/ (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt F)) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.11395969337423,
    "avg_bits_err_output": 46.67343199646111,
    "avg_bits_err_improve": 5.440527696913115,
    "time": 48728.53515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (cbrt (/ g (+ a a))) 0.0) (/ 1.0 (* (/ 1.0 (/ 1.0 (cbrt (/ g (+ a a))))) (/ (/ 1.0 (cbrt (/ g (+ a a)))) (cbrt (/ g (+ a a)))))) (cbrt (/ g (+ a a))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.500727153718927,
    "avg_bits_err_output": 15.54842001766792,
    "avg_bits_err_improve": -0.04769286394899375,
    "time": 20162.712158203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1.35e+154) (+ (cbrt (* (/ 0.5 a) (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (cbrt (* (/ 0.5 a) (- (- g) (* (sqrt (- h g)) (sqrt (- (+ g h)))))))) (if (<= g -2e-271) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (sqrt (- (* g g) (* h h))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- g (- (sqrt (- (* g g) (* h h))))) 0.0) (* h (/ h (- (- g) (sqrt (- (* g g) (* h h)))))) (- (sqrt (- (* g g) (* h h))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))))))",
    "output_parens": 91,
    "avg_bits_err_input": 36.32984600865366,
    "avg_bits_err_output": 12.4805675011841,
    "avg_bits_err_improve": 23.849278507469563,
    "time": 33829.80712890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos 1.0) (cos (+ (expm1 (log1p (* PI 0.6666666666666666))) (+ 1.0 (/ (acos (/ (- g) h)) 3.0))))) (* (sin -1.0) (sin (+ (* PI 0.6666666666666666) (+ 1.0 (/ (acos (/ (- g) h)) 3.0)))))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.990142106257573,
    "avg_bits_err_output": 0.034689098442818526,
    "avg_bits_err_improve": 0.9554530078147545,
    "time": 21281.572509765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.6680212406251803,
    "avg_bits_err_output": 0.6680212406251803,
    "avg_bits_err_improve": 0,
    "time": 4364.105224609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-285) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+269) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.383478930627295,
    "avg_bits_err_output": 2.3906902611733476,
    "avg_bits_err_improve": 8.992788669453947,
    "time": 10383.13720703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5811207016134862,
    "avg_bits_err_output": 0.527125,
    "avg_bits_err_improve": 0.05399570161348621,
    "time": 10576.403564453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.001) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 10000000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.312481655785085,
    "avg_bits_err_output": 0.07582270704985847,
    "avg_bits_err_improve": 53.236658948735226,
    "time": 11539.714599609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.658665575112182,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.658665575112182,
    "time": 1856.050537109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- (- (/ 1.0 (+ 1.0 x)) (/ x (+ x (+ x 2.0)))) (/ x (+ x (+ x 2.0)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.012875,
    "avg_bits_err_output": 0.015875,
    "avg_bits_err_improve": -0.003000000000000001,
    "time": 8904.919189453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1268.50439453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (/ (/ (* (* w r) (* w r)) 1.0) (- 1.0 v))) 4.5))",
    "output_parens": 14,
    "avg_bits_err_input": 12.663979549339475,
    "avg_bits_err_output": 0.39807916797447374,
    "avg_bits_err_improve": 12.265900381365,
    "time": 25045.675537109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (+ (* (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0) (* x1 x1)) (* -6.0 (* x1 x1))))))))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5179001533525124,
    "avg_bits_err_output": 0.2862862642551276,
    "avg_bits_err_improve": 0.23161388909738478,
    "time": 69114.72631835938,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- v) (+ t1 u)) (/ t1 (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 17.868495681068495,
    "avg_bits_err_output": 1.376179898679323,
    "avg_bits_err_improve": 16.492315782389174,
    "time": 7333.521240234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma x (* (* x x) -0.12900613773279798) (* x 0.954929658551372))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2253233238251722,
    "avg_bits_err_output": 0.1931580828133113,
    "avg_bits_err_improve": 0.03216524101186091,
    "time": 14512.71826171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.004,
    "avg_bits_err_output": 0.004,
    "avg_bits_err_improve": 0,
    "time": 4015.27880859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ (- (/ PI a) (/ PI b)) (- b a)) 2.0) (+ b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.7775402722595,
    "avg_bits_err_output": 0.27177161719245785,
    "avg_bits_err_improve": 14.505768655067042,
    "time": 19322.4365234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (exp (- (fma eps x x))) (- (+ (- -1.0 (/ (exp (- (* x eps) x)) eps)) (+ (/ (exp (- (fma eps x x))) eps) (- 1.0 (exp (- (* x eps) x))))))) 2.0)",
    "output_parens": 21,
    "avg_bits_err_input": 30.29231448085851,
    "avg_bits_err_output": 25.45705959127661,
    "avg_bits_err_improve": 4.8352548895819005,
    "time": 21550.318359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (- 4.0 (+ (/ (+ 4.0 (/ -4.0 (+ t (/ t t)))) (+ t (/ t t))) (/ (/ 4.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.032608646876983186,
    "avg_bits_err_improve": -0.019983646876983185,
    "time": 18865.504638671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- 4.0 (+ (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t)) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))))) (+ 2.0 (- 4.0 (+ (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t)) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))))))",
    "output_parens": 31,
    "avg_bits_err_input": 0.019,
    "avg_bits_err_output": 0.036,
    "avg_bits_err_improve": -0.016999999999999998,
    "time": 16243.84765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (- (+ (pow (* 2.0 (/ t (+ t 1.0))) 2.0) -1.0) -1.0)) (+ 2.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017,
    "avg_bits_err_output": 0.03824906013339089,
    "avg_bits_err_improve": -0.02124906013339089,
    "time": 13284.60595703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3327.783203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8778.332275390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 3178.863037109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.824674060686979,
    "avg_bits_err_output": 0.250875,
    "avg_bits_err_improve": 7.573799060686979,
    "time": 31858.924072265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.094733465421128,
    "avg_bits_err_output": 7.094733465421128,
    "avg_bits_err_improve": 0,
    "time": 14946.062744140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.474514949881973,
    "avg_bits_err_output": 0.05520006265628399,
    "avg_bits_err_improve": 15.419314887225688,
    "time": 11444.884765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (- (* (exp (* x (* x 10.0))) (+ -1.0 (cos x)))) 0.0) (/ (/ (* (pow (exp (* x x)) 20.0) (* (cos x) (+ -1.0 (cos x)))) (pow (exp (* x x)) 10.0)) (+ -1.0 (cos x))) (* (pow (exp (* x x)) 10.0) (cos x)))",
    "output_parens": 29,
    "avg_bits_err_input": 3.555566318981618,
    "avg_bits_err_output": 3.0625836126503128,
    "avg_bits_err_improve": 0.49298270633130503,
    "time": 20529.510009765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 15.186054409420443,
    "avg_bits_err_output": 15.186054409420443,
    "avg_bits_err_improve": 0,
    "time": 12897.8330078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.03636601724201,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.03636601724201,
    "time": 6014.16259765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.05344387228909,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 39.05306887228909,
    "time": 4257.99853515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (- 1.7e+308 (+ -1.7e+308 (* t +inf.0))) -2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2984174812503606,
    "avg_bits_err_improve": 63.70158251874964,
    "time": 17480.732666015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ t 2.5e+31) t)",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325111880238,
    "avg_bits_err_output": 0.399875,
    "avg_bits_err_improve": 61.44337611880238,
    "time": 20261.650634765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.42168904118794,
    "avg_bits_err_output": 22.20114335391151,
    "avg_bits_err_improve": 12.220545687276427,
    "time": 31143.0205078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (!= (/ (- (- (sqrt (+ (* b b) (* a (* c -4.0))))) b) (* a 2.0)) 0.0) (- (/ (- (- (* c -2.0) 0.0)) (- (- (sqrt (fma b b (* a (* c -4.0))))) b)) 0.0) (/ (/ (- b (sqrt (fma b b (* a (* c -4.0))))) -2.0) a))",
    "output_parens": 29,
    "avg_bits_err_input": 34.004483310277834,
    "avg_bits_err_output": 19.873779913958234,
    "avg_bits_err_improve": 14.1307033963196,
    "time": 27477.97216796875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2258.56298828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.857741367063106,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 39.84599136706311,
    "time": 5103.944580078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (+ (* y (- x y)) (* x (- x y))) (+ (* y y) (* x x)))",
    "output_parens": 9,
    "avg_bits_err_input": 20.0666625807642,
    "avg_bits_err_output": 20.077562852109637,
    "avg_bits_err_improve": -0.010900271345438028,
    "time": 8658.29443359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6503057926418863,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6503057926418863,
    "time": 5970.61669921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.040125,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.039125,
    "time": 6057.147216796875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021073120312590145,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0.010823120312590145,
    "time": 4762.216064453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0.012375,
    "time": 2753.39990234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0,
    "time": 2068.90673828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3976960531287862,
    "avg_bits_err_output": 0.2415,
    "avg_bits_err_improve": 0.1561960531287862,
    "time": 5395.69189453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (- 0.5 (/ (cos (* x 2.0)) 2.0)) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 13,
    "avg_bits_err_input": 30.717366939253317,
    "avg_bits_err_output": 30.654763138346446,
    "avg_bits_err_improve": 0.06260380090687079,
    "time": 12944.338134765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.38325999275463,
    "avg_bits_err_output": 0.28821936093777045,
    "avg_bits_err_improve": 24.09504063181686,
    "time": 13312.633544921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (pow (sin x) 2.0) 0.0) (/ (if (!= (- (* x (* x (pow (sin x) 2.0))) (- (pow (sin x) 4.0))) 0.0) (/ (fma (pow (sin x) 4.0) (pow (* x x) 2.0) (- (pow (sin x) 8.0))) (- (* x (* x (pow (sin x) 2.0))) (- (pow (sin x) 4.0)))) (fma x (* x (pow (sin x) 2.0)) (- (pow (sin x) 4.0)))) (pow (sin x) 2.0)) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 56,
    "avg_bits_err_input": 29.847906859935847,
    "avg_bits_err_output": 29.716430010401222,
    "avg_bits_err_improve": 0.13147684953462502,
    "time": 36691.20263671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00699715999043749,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.00612215999043749,
    "time": 2985.41357421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 1e-301) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -100.0 (/ i n))))",
    "output_parens": 22,
    "avg_bits_err_input": 47.7425151892976,
    "avg_bits_err_output": 13.888341308795676,
    "avg_bits_err_improve": 33.854173880501925,
    "time": 26158.665771484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.84041357473784,
    "avg_bits_err_output": 22.64027641030364,
    "avg_bits_err_improve": 3.200137164434203,
    "time": 13823.163818359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 0.0) (- (* c (+ (/ b (* (fma c c (* d d)) 4.0)) (/ (+ b (/ b 2.0)) (* (fma c c (* d d)) 2.0)))) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 1e+307) (/ (fma a (- d) (* b c)) (+ (* c c) (* d d))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 51,
    "avg_bits_err_input": 25.61856440548663,
    "avg_bits_err_output": 22.934643927107007,
    "avg_bits_err_improve": 2.6839204783796227,
    "time": 16600.5625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (- ux (* ux maxCos)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037,
    "avg_bits_err_output": 0.020833600670583246,
    "avg_bits_err_improve": 0.016166399329416752,
    "time": 9890.761474609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (expm1 (log1p (if (!= (* (* uy PI) -2.0) 0.0) (/ 2.0 (/ (/ 1.0 uy) PI)) (* uy (* 2.0 PI)))))) (sqrt (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.68308928991072,
    "avg_bits_err_output": 12.447741887270695,
    "avg_bits_err_improve": 1.2353474026400253,
    "time": 32609.929931640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (exp (* 1.0 (log (- (if (!= (+ 1.0 (pow (- 1.0 ux) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (pow (- 1.0 ux) 4.0))))) (+ 1.0 (pow (- 1.0 ux) 2.0))) (- 1.0 (pow (- 1.0 ux) 2.0))) (* (* ux maxCos) (+ (fma ux maxCos (- 1.0 ux)) (- 1.0 ux)))))))))",
    "output_parens": 33,
    "avg_bits_err_input": 13.72367366635082,
    "avg_bits_err_output": 12.120517551326051,
    "avg_bits_err_improve": 1.6031561150247686,
    "time": 31598.9619140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) xi) (fma (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (* (- 1.0 ux) maxCos) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.33072118587336513,
    "avg_bits_err_output": 0.32154002168103135,
    "avg_bits_err_improve": 0.00918116419233378,
    "time": 44747.188720703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (+ (+ 2.0 (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax))))) -2.0) (log (+ 1.0 (expm1 (- (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax)))) 0.0))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 54,
    "avg_bits_err_input": 0.20541054573943912,
    "avg_bits_err_output": 0.2057215405047568,
    "avg_bits_err_improve": -0.0003109947653176792,
    "time": 52411.98681640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (pow (pow (/ u1 (- 1.0 u1)) 2.0) 0.25) (sin (* 6.28318530718 u2)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5447692852279641,
    "avg_bits_err_output": 0.5475721730561979,
    "avg_bits_err_improve": -0.002802887828233791,
    "time": 21327.448486328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (log (exp (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3203414002753925,
    "avg_bits_err_output": 0.32165512215093334,
    "avg_bits_err_improve": -0.001313721875540852,
    "time": 21710.5625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (/ (+ (- 1.0 (/ 1.0 (+ 1.0 (exp (/ PI s))))) (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ PI (- s))))))) (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 70,
    "avg_bits_err_input": 0.3458643325518788,
    "avg_bits_err_output": 0.31671474256230303,
    "avg_bits_err_improve": 0.029149589989575786,
    "time": 37886.03076171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06266176980599433,
    "avg_bits_err_output": 0.046157923000204826,
    "avg_bits_err_improve": 0.016503846805789507,
    "time": 11457.2119140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1694443566847406,
    "avg_bits_err_output": 0.11628814436934125,
    "avg_bits_err_improve": 0.05315621231539934,
    "time": 20806.080322265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6614285520357847,
    "avg_bits_err_output": 0.6614285520357847,
    "avg_bits_err_improve": 0,
    "time": 22612.04052734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (- (exp (/ -2.0 v)) (* u (exp (/ -2.0 v)))) u)) 1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.15195905975788243,
    "avg_bits_err_output": 0.15149072464597116,
    "avg_bits_err_improve": 0.0004683351119112722,
    "time": 20281.76416015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.527076019302284,
    "avg_bits_err_output": 2.527076019302284,
    "avg_bits_err_improve": 0,
    "time": 29983.879638671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_i (/ sinTheta_O v)))) (/ cosTheta_i (if (!= (* v (* (sinh (/ 1.0 v)) (* v 2.0))) 0.0) (/ 1.0 (* (/ (/ 1.0 v) (sinh (/ 1.0 v))) (/ 0.5 v))) (* v (* (sinh (/ 1.0 v)) (* v 2.0))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.4683893808914111,
    "avg_bits_err_output": 0.37802189859595775,
    "avg_bits_err_improve": 0.09036748229545333,
    "time": 31653.860595703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ (+ (- (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (/ 1.0 v)) 0.6931) (log (/ 0.5 v))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.11109494293788265,
    "avg_bits_err_output": 0.11109494293788265,
    "avg_bits_err_improve": 0,
    "time": 10398.72021484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow alpha (* PI 2.0)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4714024399079597,
    "avg_bits_err_output": 0.42023835021471,
    "avg_bits_err_improve": 0.051164089693249704,
    "time": 26021.009033203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (log (- (+ 1.0 (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 1.3257919615366902,
    "avg_bits_err_output": 1.2327098108722452,
    "avg_bits_err_improve": 0.09308215066444503,
    "time": 27860.559814453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (/ s 2.0) (log1p (expm1 (* (log1p (* u -4.0)) -2.0))))",
    "output_parens": 7,
    "avg_bits_err_input": 12.431461885444705,
    "avg_bits_err_output": 0.21236560156295073,
    "avg_bits_err_improve": 12.219096283881754,
    "time": 19410.2724609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (fma s (if (!= (* PI (* r 6.0)) 0.0) (/ 1.0 (/ (/ 0.16666666666666666 r) PI)) (* PI (* r 6.0))) 0.0)))",
    "output_parens": 24,
    "avg_bits_err_input": 0.14141178160890722,
    "avg_bits_err_output": 0.14061421035947283,
    "avg_bits_err_improve": 0.0007975712494343867,
    "time": 33112.650146484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.884920688474437,
    "avg_bits_err_output": 0.7075223498405646,
    "avg_bits_err_improve": 0.17739833863387233,
    "time": 28800.3125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (exp (* cosTheta cosTheta)) (* cosTheta (sqrt PI)))) (+ c 1.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7058440506065694,
    "avg_bits_err_output": 0.4811812061761474,
    "avg_bits_err_improve": 0.224662844430422,
    "time": 24598.444580078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(log1p (expm1 (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.577721959130951,
    "avg_bits_err_output": 0.5354449798335844,
    "avg_bits_err_improve": 13.042276979297366,
    "time": 21070.897216796875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (- (expm1 (log1p (- (log1p (- u1)))))))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.624678750244207,
    "avg_bits_err_output": 0.30567976280898934,
    "avg_bits_err_improve": 13.318998987435219,
    "time": 17235.067626953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- alpha) (* (log1p (- u0)) alpha))",
    "output_parens": 5,
    "avg_bits_err_input": 13.950693271702217,
    "avg_bits_err_output": 0.3167430453140324,
    "avg_bits_err_improve": 13.633950226388185,
    "time": 14431.087646484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ cos2phi (* alphax alphax)) (+ (/ (/ sin2phi alphay) (+ alphay alphay)) (/ (/ sin2phi alphay) (+ alphay alphay)))))",
    "output_parens": 14,
    "avg_bits_err_input": 12.67562021340418,
    "avg_bits_err_output": 0.5386574388613848,
    "avg_bits_err_improve": 12.136962774542795,
    "time": 17522.84619140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) 5000000000.0) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (- (* PI l) (/ (/ (* (tan (* PI l)) (/ 2.0 F)) (* F F)) (log1p (expm1 (/ (/ (+ F F) F) F))))))",
    "output_parens": 23,
    "avg_bits_err_input": 16.631047126414845,
    "avg_bits_err_output": 11.923250298735615,
    "avg_bits_err_improve": 4.70779682767923,
    "time": 22759.95751953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21008496250072115,
    "avg_bits_err_output": 0.1472712406251803,
    "avg_bits_err_improve": 0.06281372187554085,
    "time": 17188.66650390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.269348627273855,
    "avg_bits_err_output": 10.150257486263355,
    "avg_bits_err_improve": 3.1190911410105002,
    "time": 23450.0556640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(if (<= (* (/ PI 4.0) f) 1.0) (/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* PI (* (/ f -4.0) 2.0)))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0)) (/ (if (!= (+ 2.0 (log (/ (+ (exp (* PI (/ f -4.0))) (exp (* PI (/ f 4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (* (/ f -4.0) 2.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))))))) 0.0) 0.0 (log (/ (+ (exp (* PI (/ f -4.0))) (exp (* PI (/ f 4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (* (/ f -4.0) 2.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))))))) (/ PI -4.0)))",
    "output_parens": 101,
    "avg_bits_err_input": 61.37488063878209,
    "avg_bits_err_output": 0.7192194454907809,
    "avg_bits_err_improve": 60.65566119329131,
    "time": 71742.31640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -5.2e+91) (* t (/ (sqrt 2.0) (sqrt (+ (* (/ (- x -1.0) (+ x -1.0)) (* t (* t 2.0))) (* l (* l (+ -1.0 (/ (+ x 1.0) (+ x -1.0))))))))) (* t (/ (sqrt 2.0) (sqrt (+ (* (/ (- x -1.0) (+ x -1.0)) (* t (* t 2.0))) (* (* l l) (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 38,
    "avg_bits_err_input": 43.048819249214226,
    "avg_bits_err_output": 35.13880176961005,
    "avg_bits_err_improve": 7.9100174796041784,
    "time": 30284.288818359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.9409121748217673,
    "avg_bits_err_output": 0.21953101562950705,
    "avg_bits_err_improve": 3.7213811591922603,
    "time": 35171.053955078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (exp (* (log1p (+ (* 4.0 (pow (* (/ l Om) (sin ky)) 2.0)) (* 4.0 (pow (* (/ l Om) (sin kx)) 2.0)))) -0.5)) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.1116693791695658,
    "avg_bits_err_output": 0.00575,
    "avg_bits_err_improve": 1.1059193791695658,
    "time": 14345.43359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (- (- (pow (/ t l) 2.0) -1.0) 1.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.46811091450147,
    "avg_bits_err_output": 10.47596015991176,
    "avg_bits_err_improve": -0.007849245410291417,
    "time": 24200.304931640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -3.8e-153) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= n -6.8e-210) (sqrt (+ (* (* (* n U) 2.0) (- t (* n (* (pow (/ l Om) 2.0) (- U U*))))) (- (* (* n (* l 2.0)) (* U (/ (* l 2.0) Om)))))) (if (<= n -1.7e-245) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= n -5e-310) (sqrt (* 2.0 (* U (* n (- t (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (* l (/ l Om))))))))) (* (sqrt (* 2.0 (* U (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt n))))))",
    "output_parens": 83,
    "avg_bits_err_input": 34.93906984707936,
    "avg_bits_err_output": 26.31815922048199,
    "avg_bits_err_improve": 8.620910626597368,
    "time": 41351.45751953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ k t) (/ (* (* (/ k t) (* (pow t 3.0) (/ (sin k) l))) (tan k)) l)))",
    "output_parens": 12,
    "avg_bits_err_input": 47.464270556938324,
    "avg_bits_err_output": 31.29586695027357,
    "avg_bits_err_improve": 16.168403606664754,
    "time": 44605.321044921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (* (+ 2.0 (pow (/ k t) 2.0)) (tan k)) l) (* (sin k) (/ (pow t 3.0) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.09885611619477,
    "avg_bits_err_output": 27.3174694795864,
    "avg_bits_err_improve": 4.781386636608367,
    "time": 21657.28857421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (/ (* a2 a2) (sqrt 2.0)) (* a1 (/ a1 (sqrt 2.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5102094015860297,
    "avg_bits_err_output": 0.45373722032989894,
    "avg_bits_err_improve": 0.05647218125613074,
    "time": 23305.473876953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* PI (* n 2.0)) (* k -0.5)) (sqrt (* PI (* n 2.0)))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5278220424144104,
    "avg_bits_err_output": 0.4473214601539507,
    "avg_bits_err_improve": 0.08050058226045975,
    "time": 22008.659423828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (- (exp (+ l l)) (exp (* l -2.0))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 25,
    "avg_bits_err_input": 17.524502448964775,
    "avg_bits_err_output": 17.509819458050963,
    "avg_bits_err_improve": 0.014682990913811977,
    "time": 26049.68603515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (if (!= (* K (/ (+ m n) 2.0)) 0.0) (/ 4.0 (/ (/ 4.0 K) (+ m n))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 25,
    "avg_bits_err_input": 15.238814040605956,
    "avg_bits_err_output": 15.245911501239501,
    "avg_bits_err_improve": -0.007097460633545438,
    "time": 20888.55517578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (sqrt (+ 1.0 (pow (/ (/ U (* 2.0 J)) (cos (/ K 2.0))) 2.0))) (* (cos (/ K 2.0)) -2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 18.24563684218813,
    "avg_bits_err_output": 18.24426184218813,
    "avg_bits_err_improve": 0.00137499999999946,
    "time": 34966.531982421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))) 2e+247) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (* (/ M (* 2.0 d)) (* D (/ (* D (* (/ M (+ d d)) h)) l)))))))",
    "output_parens": 30,
    "avg_bits_err_input": 13.99973424969177,
    "avg_bits_err_output": 8.737277156218703,
    "avg_bits_err_improve": 5.262457093473067,
    "time": 24482.729736328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* c0 (sqrt (/ A (* V l)))) (- INFINITY)) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* c0 (sqrt (/ A (* V l)))) -2e-265) (* c0 (sqrt (/ A (* V l)))) (if (<= (* c0 (sqrt (/ A (* V l)))) 0.0) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* c0 (sqrt (/ A (* V l)))) 2e+295) (* c0 (sqrt (/ A (* V l)))) (* c0 (* (sqrt (/ A l)) (sqrt (/ 1.0 V))))))))",
    "output_parens": 55,
    "avg_bits_err_input": 19.127674924208797,
    "avg_bits_err_output": 13.282662384371724,
    "avg_bits_err_improve": 5.845012539837073,
    "time": 23644.15625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* D D) 2e-81) (* c0 (/ (if (!= (- (* d (* d (/ (/ c0 (* w (* D h))) D))) (sqrt (- (pow (* d (* d (/ (/ c0 (* w (* D h))) D))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* d (/ (/ c0 (* w (* D h))) D))) (sqrt (- (pow (* d (* d (/ (/ c0 (* w (* D h))) D))) 2.0) (* M M)))))) (+ (* d (* (/ (/ c0 w) (* D h)) (/ d D))) (+ (- d d) (sqrt (- (pow (* d (* (/ (/ c0 w) (* D h)) (/ d D))) 2.0) (* M M)))))) (+ w w))) (if (<= (* D D) 1.5e+272) (* (/ c0 (* 2.0 w)) (if (!= (- (* (/ d D) (/ (/ (* d c0) (* D w)) h)) (sqrt (- (pow (* (/ d D) (/ (/ (* d c0) (* D w)) h)) 2.0) (* M M)))) 0.0) (/ (- (* M M) 0.0) (- (* (/ d D) (/ (/ (* d c0) (* D w)) h)) (sqrt (- (pow (* (/ d D) (/ (/ (* d c0) (* D w)) h)) 2.0) (* M M))))) (fma d (* d (/ c0 (* h (* D (* D w))))) (sqrt (- (pow (* (/ d D) (/ (/ (* d c0) (* D w)) h)) 2.0) (* M M)))))) (* c0 (/ (if (!= (- (* d (* d (/ (/ c0 (* w (* D h))) D))) (sqrt (- (pow (* d (* d (/ (/ c0 (* w (* D h))) D))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* d (/ (/ c0 (* w (* D h))) D))) (sqrt (- (pow (* (/ d D) (* (/ c0 w) (/ d (* D h)))) 2.0) (* M M)))))) (+ (* d (* (/ (/ c0 w) (* D h)) (/ d D))) (+ (- d d) (sqrt (- (pow (* d (* (/ (/ c0 w) (* D h)) (/ d D))) 2.0) (* M M)))))) (+ w w)))))",
    "output_parens": 184,
    "avg_bits_err_input": 59.578335426410895,
    "avg_bits_err_output": 31.426457813475757,
    "avg_bits_err_improve": 28.151877612935138,
    "time": 59420.111328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (- (sqrt (* (/ d h) (/ d l))) (* (/ M d) (* (/ D 2.0) (* (* 0.5 (/ h l)) (* (* (/ M d) (/ D 2.0)) (sqrt (* d (/ d (* h l))))))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 1e+292) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) INFINITY) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- (* (pow (* M (/ (/ D 2.0) d)) 2.0) (* (/ h l) -0.5)) -1.0)) (- (sqrt (* (/ d h) (/ d l))) (* M (* (/ D (+ d d)) (/ (* (sqrt (* d (/ d (* l h)))) (* (/ M (+ d d)) (* h D))) (+ l l))))))))",
    "output_parens": 117,
    "avg_bits_err_input": 26.63086244926833,
    "avg_bits_err_output": 21.170052923259664,
    "avg_bits_err_improve": 5.460809526008667,
    "time": 44162.938232421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (/ -0.25 (hypot 1.0 x)) 0.0) (/ (+ (/ 0.0625 (fma x x 1.0)) (* (/ -0.25 (hypot 1.0 x)) (+ 0.5 (/ -0.25 (hypot 1.0 x))))) (/ -0.25 (hypot 1.0 x))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 37,
    "avg_bits_err_input": 15.009825039194446,
    "avg_bits_err_output": 14.48756497794536,
    "avg_bits_err_improve": 0.5222600612490869,
    "time": 26898.151123046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ 1.3333333333333333 (* (* PI (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9824693609377705,
    "avg_bits_err_output": 0.01227124062518029,
    "avg_bits_err_improve": 0.9701981203125902,
    "time": 7992.1806640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* 5.0 (* v v))) (- 1.0 (* v v))) (* PI (sqrt (+ 2.0 (* (* v v) -6.0))))) t)",
    "output_parens": 13,
    "avg_bits_err_input": 0.450863597056105,
    "avg_bits_err_output": 0.10877862542178535,
    "avg_bits_err_improve": 0.34208497163431967,
    "time": 12498.284912109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (- (* v (* v (sqrt (- 2.0 (* v (* v 6.0)))))) (sqrt (- 2.0 (* v (* v 6.0))))) -4.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.013219360937770434,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 0.005719360937770434,
    "time": 13256.134033203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5547808128388627,
    "avg_bits_err_output": 0.5547808128388627,
    "avg_bits_err_improve": 0,
    "time": 10323.360107421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.044204896471663,
    "avg_bits_err_output": 2.0353086558464826,
    "avg_bits_err_improve": 0.00889624062518024,
    "time": 21870.809326171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ mu (+ Vef EDonor)) Ec) KbT)))) (/ NaChar (exp (log1p (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.01445373388755319,
    "avg_bits_err_output": 0.014618974899414109,
    "avg_bits_err_improve": -0.0001652410118609185,
    "time": 8213.429443359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (pow a 4.0) (- 1.0 (* b (+ (* (+ a a) (* a b)) (* b (fma b b 4.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.1838846127163147,
    "avg_bits_err_output": 0.07190752426681833,
    "avg_bits_err_improve": 0.11197708844949637,
    "time": 7722.056884765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (+ (pow a 4.0) (* (* b b) (+ (fma a a (* b b)) (* a a)))) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 27,
    "avg_bits_err_input": 0.18600154215544593,
    "avg_bits_err_output": 0.10338561882483494,
    "avg_bits_err_improve": 0.08261592333061099,
    "time": 20081.115478515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (pow (* b b) 2.0) (fma (* a b) (* a (+ b b)) (pow a 4.0))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 18,
    "avg_bits_err_input": 0.1849129259339448,
    "avg_bits_err_output": 0.10610899875393409,
    "avg_bits_err_improve": 0.0788039271800107,
    "time": 21127.92138671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ (* x (/ 2.0 (sqrt (+ (* x x) (* 4.0 (* p p)))))) 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 13.183217069403334,
    "avg_bits_err_output": 13.388595065414787,
    "avg_bits_err_improve": -0.20537799601145323,
    "time": 15469.437744140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (if (!= (/ (expm1 (+ x x)) (expm1 x)) 0.0) (/ 1.0 (/ (expm1 x) (expm1 (+ x x)))) (/ (expm1 (+ x x)) (expm1 x))))",
    "output_parens": 16,
    "avg_bits_err_input": 40.80101797391755,
    "avg_bits_err_output": 0.066375,
    "avg_bits_err_improve": 40.73464297391755,
    "time": 7474.3388671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (/ (pow (tan x) 2.0) (+ x (tan x)))) (- x (tan x))))",
    "output_parens": 19,
    "avg_bits_err_input": 31.001298892878165,
    "avg_bits_err_output": 30.47772855587403,
    "avg_bits_err_improve": 0.5235703370041342,
    "time": 26413.982421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -5.6e+153) (+ (/ 0.0 a) (/ b_2 (- a))) (if (<= b_2 -1.15e-260) (/ (+ (- b_2) (sqrt (if (!= (- (* c a) (* b_2 b_2)) 0.0) (/ 1.0 (/ 1.0 (fma b_2 b_2 (* c (- a))))) (fma b_2 b_2 (* c (- a)))))) a) (if (<= b_2 6.5e+152) (/ (if (!= (- 0.0 b_2) 0.0) (* a (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))))) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a) (/ (if (!= (- b_2) 0.0) (fma a (/ c (* b_2 -2.0)) (* c (/ (/ a b_2) -2.0))) (- b_2)) a))))",
    "output_parens": 55,
    "avg_bits_err_input": 33.59610348022696,
    "avg_bits_err_output": 18.845211365110615,
    "avg_bits_err_improve": 14.750892115116343,
    "time": 21431.00390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.083170787186184,
    "avg_bits_err_output": 19.778931087023985,
    "avg_bits_err_improve": 14.3042397001622,
    "time": 20001.337158203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.4356699051609,
    "avg_bits_err_output": 30.693899901281718,
    "avg_bits_err_improve": 0.7417700038791821,
    "time": 18131.51318359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.65638854650896,
    "avg_bits_err_output": 10.755792452999374,
    "avg_bits_err_improve": 21.900596093509584,
    "time": 31153.12353515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (log1p (expm1 (+ (log1p N) (- -1.0 (log N))))) -1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 29.519028777784158,
    "avg_bits_err_output": 29.521967777234277,
    "avg_bits_err_improve": -0.0029389994501194394,
    "time": 13810.550048828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (/ (+ -1.0 (/ (+ x x) (+ 1.0 x))) (+ x x)) (/ -0.5 x))",
    "output_parens": 8,
    "avg_bits_err_input": 14.775579121337277,
    "avg_bits_err_output": 14.835897983065426,
    "avg_bits_err_improve": -0.06031886172814893,
    "time": 18389.627685546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (sin x) (- (sin eps)) (* (+ (cos eps) -1.0) (cos x)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.53444158006489,
    "avg_bits_err_output": 6.04000218936365,
    "avg_bits_err_improve": 33.494439390701245,
    "time": 25554.978759765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ 1.0 x)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.87015529724748,
    "avg_bits_err_output": 29.57361629658565,
    "avg_bits_err_improve": 0.29653900066182715,
    "time": 14926.58642578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.325512253725027,
    "avg_bits_err_output": 30.325512253725027,
    "avg_bits_err_improve": 0,
    "time": 22803.361328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -5.5e-266) (/ (- (if (!= (- (sqrt (fma b b (* a (* c -4.0)))) b) 0.0) (* (* c -4.0) (/ a (- (sqrt (fma b b (* a (* c -4.0)))) b))) (+ b (sqrt (fma b b (* a (* c -4.0)))))) (+ b b)) (* a 2.0)) (/ (if (!= (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0)))",
    "output_parens": 49,
    "avg_bits_err_input": 33.76671665607642,
    "avg_bits_err_output": 15.391653318512514,
    "avg_bits_err_improve": 18.375063337563905,
    "time": 28576.42041015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.90217231269888,
    "avg_bits_err_output": 21.842000302395256,
    "avg_bits_err_improve": 12.060172010303624,
    "time": 23195.276611328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(log (exp (/ (log1p (- x)) (log1p x))))",
    "output_parens": 6,
    "avg_bits_err_input": 61.44332515996419,
    "avg_bits_err_output": 0.021127443751081738,
    "avg_bits_err_improve": 61.422197716213105,
    "time": 14346.744140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.009547988953926,
    "avg_bits_err_output": 44.24174513374905,
    "avg_bits_err_improve": 18.767802855204877,
    "time": 14294.980712890625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (+ (/ (- eps -1.0) (- eps -1.0)) (- (/ (+ eps eps) (- eps -1.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 58.534877072668486,
    "avg_bits_err_output": 58.50491709642635,
    "avg_bits_err_improve": 0.02995997624213942,
    "time": 18280.18310546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (- 1.0 (/ x (tan x))) x)",
    "output_parens": 4,
    "avg_bits_err_input": 59.796361490079846,
    "avg_bits_err_output": 59.78314018101004,
    "avg_bits_err_improve": 0.013221309069805898,
    "time": 33338.764892578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ (expm1 (* eps (+ a b))) (expm1 (* eps a))) (/ eps (expm1 (* eps b))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.24005956845239,
    "avg_bits_err_output": 29.06515329866107,
    "avg_bits_err_improve": 31.174906269791318,
    "time": 29630.986572265625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.20429917238173,
    "avg_bits_err_output": 0.5166462406251803,
    "avg_bits_err_improve": 40.68765293175655,
    "time": 5894.31103515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.54128667628145,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.54066167628145,
    "time": 2929.484130859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(if (!= (exp (* a x)) 0.0) (/ (* (expm1 (* a x)) (exp (* a x))) (exp (* a x))) (expm1 (* a x)))",
    "output_parens": 14,
    "avg_bits_err_input": 29.21804364908251,
    "avg_bits_err_output": 0.039905858167231224,
    "avg_bits_err_improve": 29.17813779091528,
    "time": 9712.67724609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (- (exp x) 2.0) (exp (- x))) 0.0) (/ (if (!= (- (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0))) (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0)))) 0.0) (/ (- (pow (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0))) 2.0) (* (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))) (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))))) (- (if (!= (- (pow (- (exp x) 2.0) 2.0) (+ (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))) (exp (* x -2.0)))) 0.0) (/ (- (pow (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0))) 2.0) (* (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))) (+ (- (pow (exp (- x)) 2.0)) (exp (* x -2.0))))) (- (pow (- (exp x) 2.0) 2.0) (+ (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))) (exp (* x -2.0))))) (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0)))) (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))))) (- (pow (- (exp x) 2.0) 2.0) (exp (* x -2.0)))) (- (- (exp x) 2.0) (exp (- x)))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 139,
    "avg_bits_err_input": 29.494713068448025,
    "avg_bits_err_output": 29.40006733895505,
    "avg_bits_err_improve": 0.09464572949297434,
    "time": 36378.036865234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (if (!= (/ 1.0 (pow (+ x -1.0) 2.0)) 0.0) (/ (fma (/ 1.0 (pow (+ x -1.0) 2.0)) (/ 1.0 (pow (+ x -1.0) 2.0)) (* (/ 1.0 (pow (+ x -1.0) 2.0)) (/ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (+ x -1.0)))) (/ 1.0 (pow (+ x -1.0) 2.0))) (/ (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) (+ x -1.0))) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 49,
    "avg_bits_err_input": 10.551911233420748,
    "avg_bits_err_output": 10.541848163970185,
    "avg_bits_err_improve": 0.010063069450563233,
    "time": 31041.3896484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (tan (+ x eps)) 0.0) (* (tan (+ x eps)) (- (/ (tan (+ x eps)) (tan (+ x eps))) (/ (tan x) (if (!= (tan (+ x eps)) 0.0) (log1p (expm1 (/ 2.0 (/ 2.0 (tan (+ x eps)))))) (tan (+ x eps)))))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 31,
    "avg_bits_err_input": 36.82284035546564,
    "avg_bits_err_output": 36.86673982669474,
    "avg_bits_err_improve": -0.043899471229103426,
    "time": 21480.420166015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.07898519023648,
    "avg_bits_err_output": 0.16171240625180291,
    "avg_bits_err_improve": 29.91727278398468,
    "time": 13851.288330078125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin eps) (cos x) (* (sin x) (cos eps))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 36.994920403285256,
    "avg_bits_err_output": 22.041017835185503,
    "avg_bits_err_improve": 14.953902568099753,
    "time": 18167.956298828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (+ (/ 1.0 (sqrt (+ 1.0 x))) (/ -1.0 (sqrt x))) (* (sqrt (+ 1.0 x)) (/ -1.0 (sqrt (+ 1.0 x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 19.89772360002084,
    "avg_bits_err_output": 19.89761895103454,
    "avg_bits_err_improve": 0.00010464898629791719,
    "time": 16292.052978515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(exp (* 1.0 (log1p (- (atan (+ N 1.0)) (log (+ 1.0 (expm1 (+ 1.0 (atan N)))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 15.240620254415086,
    "avg_bits_err_output": 15.247432842050166,
    "avg_bits_err_improve": -0.006812587635080192,
    "time": 12140.3232421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.45688257295531,
    "avg_bits_err_output": 1.3066603380651296,
    "avg_bits_err_improve": 28.15022223489018,
    "time": 30159.858642578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07492952695107366,
    "avg_bits_err_output": 0.08042952695107367,
    "avg_bits_err_improve": -0.005500000000000005,
    "time": 10897.642333984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* a (- b)) (/ (/ 1.0 b) a))",
    "output_parens": 5,
    "avg_bits_err_input": 16.207636134846265,
    "avg_bits_err_output": 0.25362782031835907,
    "avg_bits_err_improve": 15.954008314527906,
    "time": 11476.6748046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (if (!= PI 0.0) (/ (* (/ angle 180.0) (* PI PI)) PI) (* PI (/ angle 180.0))))) 2.0))",
    "output_parens": 17,
    "avg_bits_err_input": 20.41193543653165,
    "avg_bits_err_output": 20.424072590717284,
    "avg_bits_err_improve": -0.012137154185634103,
    "time": 35049.1044921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (if (!= (* (sin (* angle (/ PI -180.0))) (pow b 2.0)) 0.0) (- (* (pow (* a (sin (* angle (/ PI -180.0)))) 2.0) (+ 0.0 (/ 1.0 (sin (* angle (/ PI -180.0)))))) (/ 1.0 (/ 1.0 (* (sin (* angle (/ PI -180.0))) (pow b 2.0))))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0)))))",
    "output_parens": 38,
    "avg_bits_err_input": 30.96692917185439,
    "avg_bits_err_output": 29.36983173841926,
    "avg_bits_err_improve": 1.5970974334351276,
    "time": 37473.11474609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (log1p (expm1 (sin (* angle (/ PI 180.0))))) a) 2.0) (pow (* b (cos (* angle (/ PI 180.0)))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.225061056929945,
    "avg_bits_err_output": 20.190137874636946,
    "avg_bits_err_improve": 0.0349231822929994,
    "time": 36248.8154296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17904492500144228,
    "avg_bits_err_output": 0.17904492500144228,
    "avg_bits_err_improve": 0,
    "time": 16420.544189453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.324533471101042,
    "avg_bits_err_output": 0.3225270587873961,
    "avg_bits_err_improve": 0.0020064123136459,
    "time": 19408.46044921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (/ (* (+ e e) 4.0) (+ (* (* e (cos v)) 8.0) 8.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.13295996250072117,
    "avg_bits_err_output": 0.13321936093777043,
    "avg_bits_err_improve": -0.0002593984370492519,
    "time": 16207.343017578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi2) (* (cos (- lambda1 lambda2)) (cos phi1))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.953097082217212,
    "avg_bits_err_output": 16.948844070425853,
    "avg_bits_err_improve": 0.004253011791359285,
    "time": 35053.244140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 52.821499066727064,
    "avg_bits_err_output": 0.17047445195251587,
    "avg_bits_err_improve": 52.65102461477455,
    "time": 32083.688232421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 28.60818091170491,
    "avg_bits_err_output": 0.3492793250129812,
    "avg_bits_err_improve": 28.258901586691927,
    "time": 26113.228515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (/ (+ (* -4.0 (* a c)) (fma b b (fma c (* -4.0 a) (* b b)))) 2.0))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 28,
    "avg_bits_err_input": 43.89645211831586,
    "avg_bits_err_output": 0.2306396625064901,
    "avg_bits_err_improve": 43.665812455809366,
    "time": 28034.802001953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1e-289) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (* (/ c (- b (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (- b) (sqrt (+ (* b b) (* a (* c -4.0))))) 0.0) (* (/ c (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 51,
    "avg_bits_err_input": 33.76344596353321,
    "avg_bits_err_output": 14.977037885922853,
    "avg_bits_err_improve": 18.786408077610353,
    "time": 24343.248046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (+ (pow (cos phi1) 2.0) (* (cos (- lambda1 lambda2)) (* (cos phi2) (cos phi1)))) (cos phi1)) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.8691847769019289,
    "avg_bits_err_output": 0.887563026218529,
    "avg_bits_err_improve": -0.018378249316600148,
    "time": 27896.383544921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(log (* (exp (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) (exp -1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 29.46947039949891,
    "avg_bits_err_output": 29.476689830590452,
    "avg_bits_err_improve": -0.007219431091542106,
    "time": 17387.6943359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (!= (/ (pow (exp x) 2.0) (pow (+ (exp x) (exp (- x))) 2.0)) 0.0) (/ (/ (expm1 (* x 4.0)) (pow (+ (exp x) (exp (- x))) 4.0)) (/ (exp (+ x x)) (pow (+ (exp x) (exp (- x))) 2.0))) (/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x)))))",
    "output_parens": 36,
    "avg_bits_err_input": 58.01768685983989,
    "avg_bits_err_output": 1.20725773827841,
    "avg_bits_err_improve": 56.810429121561484,
    "time": 24086.92724609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (- (exp (+ x (* x -2.0))))) 2.0)",
    "output_parens": 8,
    "avg_bits_err_input": 58.026838844259885,
    "avg_bits_err_output": 0.06659436093777044,
    "avg_bits_err_improve": 57.960244483322114,
    "time": 10177.2763671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008813721875540867,
    "avg_bits_err_output": 0.008813721875540867,
    "avg_bits_err_improve": 0,
    "time": 3955.009033203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.345,
    "avg_bits_err_output": 32.345,
    "avg_bits_err_improve": 0,
    "time": 4222.982666015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (if (!= (/ x (- 1.0 x)) 0.0) (/ (if (!= (* (/ x (- 1.0 x)) (/ x (+ x -1.0))) 0.0) (* (/ x (- 1.0 x)) (* (/ (+ x x) (+ x -1.0)) (- (/ (* (/ x (- 1.0 x)) (- -1.0 x)) (* x (/ (+ x x) (- 1.0 x)))) (/ 0.0 (+ x -1.0))))) (/ (fma x x x) (pow (- 1.0 x) 2.0))) (/ x (- 1.0 x))) (/ (- -1.0 x) (+ x -1.0)))))",
    "output_parens": 42,
    "avg_bits_err_input": 58.52256983069233,
    "avg_bits_err_output": 58.537838036580666,
    "avg_bits_err_improve": -0.015268205888332886,
    "time": 26573.6103515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (- (+ (sqrt (- 1.0 (* x x))) 2.0) 1.0) x))",
    "output_parens": 7,
    "avg_bits_err_input": 0.019625,
    "avg_bits_err_output": 0.01975,
    "avg_bits_err_improve": -0.0001250000000000001,
    "time": 5346.224365234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (* (cos (atan (/ eh (* ew (tan t))))) (sin t))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.131125,
    "avg_bits_err_output": 0.131,
    "avg_bits_err_improve": 0.00012499999999998623,
    "time": 27225.82421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (log (+ 1.0 (expm1 (cos (atan (* eh (/ (- (tan t)) ew)))))))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.13334436093777044,
    "avg_bits_err_output": 0.13488684218813102,
    "avg_bits_err_improve": -0.0015424812503605778,
    "time": 28692.236572265625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (cos (/ phi2 2.0)) (cos (/ phi1 2.0)) (* (sin (/ phi2 2.0)) (sin (/ phi1 -2.0))))) (- phi1 phi2)))",
    "output_parens": 15,
    "avg_bits_err_input": 39.19432324589845,
    "avg_bits_err_output": 0.1247919078384007,
    "avg_bits_err_improve": 39.06953133806005,
    "time": 29258.0380859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (/ (+ 0.0 (* (/ (fabs (+ b a)) a) (fabs (- b a)))) a))",
    "output_parens": 9,
    "avg_bits_err_input": 14.326517097683741,
    "avg_bits_err_output": 0.023,
    "avg_bits_err_improve": 14.303517097683741,
    "time": 6805.76025390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin delta) (* (cos phi1) (sin theta))) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin delta) (* (cos phi1) (cos theta))) (* (cos delta) (sin phi1)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.1540273748569362,
    "avg_bits_err_output": 0.15577540910636656,
    "avg_bits_err_improve": -0.001748034249430347,
    "time": 40575.053955078125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.85289051060008,
    "avg_bits_err_output": 0.17431165469173673,
    "avg_bits_err_improve": 52.67857885590835,
    "time": 28089.160400390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* -3.0 a)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.721469969936166,
    "avg_bits_err_output": 0.33654608516116186,
    "avg_bits_err_improve": 28.384923884775006,
    "time": 24781.605712890625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.99996235999059,
    "avg_bits_err_output": 0.2434721812561295,
    "avg_bits_err_improve": 43.75649017873446,
    "time": 27455.894287109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 33.8056581876436,
    "avg_bits_err_output": 22.011600274690494,
    "avg_bits_err_improve": 11.794057912953107,
    "time": 21549.649169921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (expm1 (log1p (sin (- lambda1 lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.121493596458414,
    "avg_bits_err_output": 13.131029090779046,
    "avg_bits_err_improve": -0.009535494320632054,
    "time": 36762.84033203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.050979948618203,
    "avg_bits_err_output": 0.5464870515425276,
    "avg_bits_err_improve": 28.504492897075675,
    "time": 22661.4580078125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (+ (/ x (+ x 1.0)) -1.0) (/ 1.0 (+ x -1.0))) -1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.012667481250360579,
    "avg_bits_err_improve": -0.0011674812503605792,
    "time": 10501.161376953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (- (* (/ 1.0 (+ x -1.0)) (- 1.0 (/ x (+ x -1.0)))) (/ (/ 1.0 (+ x -1.0)) (+ x -1.0))) (/ 1.0 (+ x -1.0))) (- 1.0 (/ (- -1.0 x) (- 1.0 x)))) (+ 1.0 x))",
    "output_parens": 24,
    "avg_bits_err_input": 14.261181778937402,
    "avg_bits_err_output": 12.408923434961027,
    "avg_bits_err_improve": 1.8522583439763753,
    "time": 17113.281982421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.6e-299) (* (sqrt (- F)) (* (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C))) (/ (sqrt (fma (pow B 2.0) 2.0 (- (* (* A C) 8.0)))) (- (* A (* C 4.0)) (pow B 2.0))))) (/ (* (sqrt F) (sqrt (* (* 2.0 (- (pow B 2.0) (* A (* C 4.0)))) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* 4.0 C)) (pow B 2.0))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.75869241148732,
    "avg_bits_err_output": 47.41512693371552,
    "avg_bits_err_improve": 5.343565477771797,
    "time": 42718.465576171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -10000000.0) (/ (* (atan (/ (if (!= A 0.0) (- (/ (* A (- C (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) A) (* A (/ A A))) (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) B)) 180.0) PI) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 5e+22) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (* (pow (- A C) 2.0) 0.0) (pow B 2.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (- C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) PI)) (* (atan (/ (if (!= (- C A) 0.0) (- (/ (* (- C A) (- C (sqrt (+ (pow (- C A) 2.0) (pow B 2.0))))) (- C A)) (* A (/ (- C A) (- C A)))) (- (- C (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) A)) B)) (/ 180.0 PI))))",
    "output_parens": 109,
    "avg_bits_err_input": 29.234304135622732,
    "avg_bits_err_output": 25.40414824360628,
    "avg_bits_err_improve": 3.830155892016453,
    "time": 27228.72509765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F 2.5e-306) (* (sqrt (* (+ (pow B 2.0) (* (* A C) -4.0)) (* F 2.0))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* 4.0 C)) (pow B 2.0)))) (* (sqrt (* 2.0 F)) (/ (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 45,
    "avg_bits_err_input": 52.28914102363238,
    "avg_bits_err_output": 47.2728388999602,
    "avg_bits_err_improve": 5.016302123672183,
    "time": 45280.28515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.839933858978108,
    "avg_bits_err_output": 15.839933858978108,
    "avg_bits_err_improve": 0,
    "time": 14354.26025390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-296) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (* (+ g h) (- g h))) g) 0.0) (* h (/ h (- (sqrt (* (+ g h) (- g h))) g))) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (pow (if (!= g 0.0) (/ (* g (- (sqrt (- (* g g) (* h h))) g)) g) (- (sqrt (- (* g g) (* h h))) g)) 0.3333333333333333) (cbrt (- (- g) (sqrt (- (* g g) (* h h))))))))",
    "output_parens": 61,
    "avg_bits_err_input": 36.19173754887036,
    "avg_bits_err_output": 17.396012910555083,
    "avg_bits_err_improve": 18.795724638315274,
    "time": 26332.700439453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9905926703212454,
    "avg_bits_err_output": 0.9764011281273443,
    "avg_bits_err_improve": 0.014191542193901174,
    "time": 5802.729248046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7236981203125902,
    "avg_bits_err_output": 0.7236981203125902,
    "avg_bits_err_improve": 0,
    "time": 3408.659912109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+299) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-323) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+278) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.187339252153905,
    "avg_bits_err_output": 2.477687973674622,
    "avg_bits_err_improve": 8.709651278479283,
    "time": 8759.09375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output_parens": 5,
    "avg_bits_err_input": 0.38977469366336176,
    "avg_bits_err_output": 0.38977469366336176,
    "avg_bits_err_improve": 0,
    "time": 11409.719482421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 1e-6) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 20000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.11471906277841,
    "avg_bits_err_output": 0.2330931614180845,
    "avg_bits_err_improve": 52.88162590136033,
    "time": 13430.600341796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.696461706896871,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.696461706896871,
    "time": 2369.200439453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (* (/ 1.0 (+ 1.0 x)) (/ (- 1.0 (* x x)) (+ 1.0 x))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.01275,
    "avg_bits_err_improve": -0.00012499999999999838,
    "time": 6084.729248046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1309.079345703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= w -2.55e-48) (+ (- (+ 3.0 (/ 2.0 (* r r))) 4.5) (- (* (- 0.375 (* v 0.25)) (/ (* (* r (* r w)) w) (- 1.0 v))))) (if (<= w 5.4e+79) (- (+ 3.0 (- (/ (/ 2.0 r) r) 0.0)) (+ (* (- 0.375 (* v 0.25)) (* (/ r (- 1.0 v)) (* w (* w r)))) 4.5)) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* w (* r (* w (/ r (- 1.0 v)))))) 4.5))))",
    "output_parens": 45,
    "avg_bits_err_input": 12.764505436557108,
    "avg_bits_err_output": 0.5745201576637756,
    "avg_bits_err_improve": 12.189985278893333,
    "time": 23500.665771484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (* x1 -6.0)) (+ (/ (* (* -4.0 (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1)) (* x1 x1)) (- -1.0 (* x1 x1))) (* (* x1 (* 2.0 (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1))) (/ (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (fma x1 x1 1.0)))))))) (+ x1 x1)))",
    "output_parens": 52,
    "avg_bits_err_input": 0.5078143109829513,
    "avg_bits_err_output": 0.25913827581044485,
    "avg_bits_err_improve": 0.24867603517250642,
    "time": 66758.81201171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (- (- u) t1)) v) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.078678852635576,
    "avg_bits_err_output": 1.2665935635899448,
    "avg_bits_err_improve": 16.812085289045633,
    "time": 9137.88134765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.25050960194963134,
    "avg_bits_err_output": 0.25050960194963134,
    "avg_bits_err_improve": 0,
    "time": 9635.99169921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00404024101186092,
    "avg_bits_err_output": 0.00404024101186092,
    "avg_bits_err_improve": 0,
    "time": 2839.3046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* (- (/ 0.5 (* a (+ a b))) (/ (/ 0.5 b) (+ a b))) (/ PI (- b a)))",
    "output_parens": 10,
    "avg_bits_err_input": 14.816422851129083,
    "avg_bits_err_output": 0.28892067813599753,
    "avg_bits_err_improve": 14.527502172993085,
    "time": 19081.72216796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (/ (/ 1.0 eps) (exp (* x (+ 1.0 eps))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.61187939349448,
    "avg_bits_err_output": 24.995803748682945,
    "avg_bits_err_improve": 4.616075644811534,
    "time": 18267.43359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ t (/ t t)))) (- (- 2.0 (/ 2.0 (* t (+ 2.0 (/ 2.0 t))))) (/ 2.0 (* t (+ 2.0 (/ 2.0 t)))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.018625,
    "avg_bits_err_output": 0.004625,
    "avg_bits_err_improve": 0.013999999999999999,
    "time": 11194.403076171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- 4.0 (+ (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t)) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))))) (+ 2.0 (- 4.0 (+ (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t)) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))))))",
    "output_parens": 31,
    "avg_bits_err_input": 0.023375,
    "avg_bits_err_output": 0.05925,
    "avg_bits_err_improve": -0.035875,
    "time": 23494.7392578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* (/ t (+ t 1.0)) 4.0))) (+ 2.0 (- (+ (pow (* 2.0 (/ t (+ t 1.0))) 2.0) -1.0) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.049625,
    "avg_bits_err_output": 0.008875,
    "avg_bits_err_improve": 0.04075,
    "time": 15894.083740234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 4045.61083984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8080.96484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2873.863037109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8048787719210315,
    "avg_bits_err_output": 0.24625,
    "avg_bits_err_improve": 7.558628771921032,
    "time": 33922.0322265625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.176543722603144,
    "avg_bits_err_output": 7.176543722603144,
    "avg_bits_err_improve": 0,
    "time": 17973.849853515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.948025801308923,
    "avg_bits_err_output": 0.044256909169011,
    "avg_bits_err_improve": 15.903768892139912,
    "time": 11973.015869140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(+ (pow (exp (* x x)) 10.0) (if (!= (- (- (pow (exp (* x x)) 10.0)) (* (exp (* x (* x 10.0))) (cos x))) 0.0) (/ (- (pow (exp (* x x)) 20.0) (pow (* (pow (exp (* x x)) 10.0) (cos x)) 2.0)) (- (- (pow (exp (* x x)) 10.0)) (* (pow (exp (* x x)) 10.0) (cos x)))) (* (pow (exp (* x x)) 10.0) (+ (cos x) -1.0))))",
    "output_parens": 43,
    "avg_bits_err_input": 3.543833777534675,
    "avg_bits_err_output": 3.0703729100866743,
    "avg_bits_err_improve": 0.47346086744800076,
    "time": 24135.911865234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 14.918746765158422,
    "avg_bits_err_output": 14.918746765158422,
    "avg_bits_err_improve": 0,
    "time": 14752.784912109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.13048641923284,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.13048641923284,
    "time": 5998.451904296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.37399185609116,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.37374185609116,
    "time": 4192.3056640625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.307125,
    "avg_bits_err_improve": 63.692875,
    "time": 17084.8583984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ t 2.5e+31) t)",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325371826954,
    "avg_bits_err_output": 0.389875,
    "avg_bits_err_improve": 61.45337871826953,
    "time": 14821.6474609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.90217231269888,
    "avg_bits_err_output": 21.842000302395256,
    "avg_bits_err_improve": 12.060172010303624,
    "time": 23785.83154296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1e-289) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (* (/ c (- b (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (- b) (sqrt (+ (* b b) (* a (* c -4.0))))) 0.0) (* (/ c (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 51,
    "avg_bits_err_input": 33.76344596353321,
    "avg_bits_err_output": 14.977037885922853,
    "avg_bits_err_improve": 18.786408077610353,
    "time": 26466.81689453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2361.834716796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.674689452994,
    "avg_bits_err_output": 0.00925,
    "avg_bits_err_improve": 39.665439452994,
    "time": 5623.270751953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.329775514485313,
    "avg_bits_err_output": 20.329775514485313,
    "avg_bits_err_improve": 0,
    "time": 5578.052734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.665714915995972,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.665714915995972,
    "time": 6222,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(+ (* a (+ b d)) (* a c))",
    "output_parens": 4,
    "avg_bits_err_input": 0.037625,
    "avg_bits_err_output": 0.03825,
    "avg_bits_err_improve": -0.0006250000000000006,
    "time": 4615.87841796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019344360937770436,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 0.008344360937770436,
    "time": 2435.76611328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.016625,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.015875,
    "time": 4059.275390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0,
    "time": 1906.529052734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d b) (+ a c)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40403101562950744,
    "avg_bits_err_output": 0.237375,
    "avg_bits_err_improve": 0.16665601562950744,
    "time": 9078.02392578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (if (!= (/ 1.0 (- -2.0 (* 2.0 (cos x)))) 0.0) (/ (- (pow (/ (+ (/ (cos (* x -2.0)) 2.0) -1.0) (- -2.0 (* 2.0 (cos x)))) 2.0) (pow (/ (cos (* x -2.0)) (- -4.0 (* (cos x) 4.0))) 2.0)) (- 0.0 (/ 1.0 (- -2.0 (* 2.0 (cos x)))))) (+ (/ (+ (/ (cos (* x -2.0)) 2.0) -1.0) (- -2.0 (* 2.0 (cos x)))) (/ (cos (* x -2.0)) (- -4.0 (* (cos x) 4.0))))) (- 1.0 (cos x)))",
    "output_parens": 50,
    "avg_bits_err_input": 30.19763256285712,
    "avg_bits_err_output": 30.164484435630275,
    "avg_bits_err_improve": 0.03314812722684479,
    "time": 15172.82373046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (fma x (+ x x) (- eps)) (* x x))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 18,
    "avg_bits_err_input": 24.89990283792306,
    "avg_bits_err_output": 0.28544812031259015,
    "avg_bits_err_improve": 24.61445471761047,
    "time": 14393.63037109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(+ (/ (+ x (- x (sin x))) (+ (tan x) (tan x))) (/ (- (sin x)) (+ (tan x) (tan x))))",
    "output_parens": 14,
    "avg_bits_err_input": 29.992117789079575,
    "avg_bits_err_output": 29.993239872795947,
    "avg_bits_err_improve": -0.001122083716371236,
    "time": 31985.6279296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007337554964767636,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.006212554964767636,
    "time": 2561.666748046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -100.0 (/ i n))))",
    "output_parens": 22,
    "avg_bits_err_input": 47.798963025806536,
    "avg_bits_err_output": 13.920914707986169,
    "avg_bits_err_improve": 33.878048317820365,
    "time": 25925.28857421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) -1e-101) (+ (* b (/ d (fma c c (* d d)))) (fma (/ (/ (+ c (/ c 2.0)) (fma c c (* d d))) 2.0) a (* (/ (/ c 4.0) (fma c c (* d d))) a))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 1e+153) (/ (+ (* a c) (* b d)) (fma d d (* c c))) (+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))))",
    "output_parens": 50,
    "avg_bits_err_input": 26.035564446303326,
    "avg_bits_err_output": 22.764776169124964,
    "avg_bits_err_improve": 3.2707882771783616,
    "time": 15743.285888671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) -4e+298) (- (* b (/ c (fma c c (* d d)))) (* d (if (!= (/ a (fma c c (* d d))) 0.0) (/ 1.0 (/ 1.0 (/ a (fma c c (* d d))))) (/ a (fma c c (* d d)))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 4e+292) (- (/ (* b c) (fma c c (* d d))) (* a (/ d (+ (* d d) (* c c))))) (- (* b (/ c (fma c c (* d d)))) (* d (/ a (fma c c (* d d)))))))",
    "output_parens": 56,
    "avg_bits_err_input": 25.95546451676505,
    "avg_bits_err_output": 22.993224723068266,
    "avg_bits_err_improve": 2.962239793696785,
    "time": 18864.3125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (- ux (* ux maxCos)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03225,
    "avg_bits_err_output": 0.023324960075102284,
    "avg_bits_err_improve": 0.008925039924897717,
    "time": 8654.780517578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (exp (log (- 1.0 (log (exp (pow (fma ux maxCos (- 1.0 ux)) 2.0))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 13.686136210332535,
    "avg_bits_err_output": 12.484559318599592,
    "avg_bits_err_improve": 1.2015768917329428,
    "time": 34290.97119140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy PI) -2.0)) (sqrt (if (!= (* (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) (+ ux -1.0))) 0.0) (/ (/ (* (* (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) (+ ux -1.0))) (- (fma (- (fma ux maxCos 1.0) ux) (fma ux maxCos 1.0) -1.0) (* ux (- (fma ux maxCos 1.0) ux)))) (+ (- ux (* ux maxCos)) -1.0)) (fma ux maxCos (- 1.0 ux))) (- 1.0 (* (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) (+ ux -1.0)))))))",
    "output_parens": 42,
    "avg_bits_err_input": 13.72487156003154,
    "avg_bits_err_output": 11.450666412130484,
    "avg_bits_err_improve": 2.274205147901055,
    "time": 35260.215087890625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (* ux (* (- 1.0 ux) maxCos)) zi (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* ux (* ux (* (- 1.0 ux) maxCos))))))) xi (* (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* ux (* ux (* (- 1.0 ux) maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.34560481299364165,
    "avg_bits_err_output": 0.331723970540818,
    "avg_bits_err_improve": 0.013880842452823672,
    "time": 41760.908203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (log (+ 1.0 (expm1 (cos (atan (* (/ alphay alphax) (/ (tan (* PI (+ (* 2.0 u1) 0.5))) 1.0))))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 53,
    "avg_bits_err_input": 0.2039093460579787,
    "avg_bits_err_output": 0.20408585305124105,
    "avg_bits_err_improve": -0.0001765069932623542,
    "time": 42117.146484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (/ 1.0 (/ 1.0 (/ u1 (- 1.0 u1)))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 14,
    "avg_bits_err_input": 0.5239761466028169,
    "avg_bits_err_output": 0.5398045587056167,
    "avg_bits_err_improve": -0.015828412102799838,
    "time": 24263.078369140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(- (sqrt (/ u1 (- 1.0 u1))) (- (sqrt (/ u1 (- 1.0 u1))) (* (cos (* 6.28318530718 u2)) (sqrt (/ u1 (- 1.0 u1))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.33648332060704467,
    "avg_bits_err_output": 0.34785649255220064,
    "avg_bits_err_improve": -0.011373171945155969,
    "time": 20633.732666015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(+ (* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))) (fma (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)) (* s (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))))",
    "output_parens": 60,
    "avg_bits_err_input": 0.33416850618637534,
    "avg_bits_err_output": 0.334907895074177,
    "avg_bits_err_improve": -0.000739388887801673,
    "time": 33290.529052734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (- (* (exp (/ x (* s -4.0))) (exp (+ (/ x (* s -4.0)) (/ (+ x x) (* s -4.0))))) -1.0))",
    "output_parens": 13,
    "avg_bits_err_input": 0.05882812611399042,
    "avg_bits_err_output": 0.07229984017093574,
    "avg_bits_err_improve": -0.01347171405694532,
    "time": 16385.2900390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (/ (- (fabs x)) s)) (* (exp (log1p (exp (/ (fabs x) (- s))))) (* s (+ (exp (/ (- (fabs x)) s)) 1.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.13424615967520595,
    "avg_bits_err_output": 0.12449127217304246,
    "avg_bits_err_improve": 0.009754887502163495,
    "time": 20618.950439453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6724961202122393,
    "avg_bits_err_output": 0.6782623000482958,
    "avg_bits_err_improve": -0.00576617983605654,
    "time": 22712.319580078125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.15205500933767416,
    "avg_bits_err_output": 0.1454621762088687,
    "avg_bits_err_improve": 0.006592833128805459,
    "time": 18338.9453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.579439253100349,
    "avg_bits_err_output": 2.579439253100349,
    "avg_bits_err_improve": 0,
    "time": 32152.565673828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (* (/ 0.5 v) (/ 0.5 v)) (/ (/ (+ cosTheta_i cosTheta_i) (sinh (/ 1.0 v))) (exp (* sinTheta_i (/ sinTheta_O v))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4524569086763729,
    "avg_bits_err_output": 0.3441798619459227,
    "avg_bits_err_improve": 0.10827704673045019,
    "time": 26293.64111328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.133655879990983,
    "avg_bits_err_output": 0.07169722569320798,
    "avg_bits_err_improve": 0.061958654297775015,
    "time": 24579.422607421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow alpha (* PI 2.0)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4727386216274613,
    "avg_bits_err_output": 0.426199185189664,
    "avg_bits_err_improve": 0.04653943643779729,
    "time": 25654.6630859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* 3.0 (* (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) s))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3366678960400442,
    "avg_bits_err_output": 1.2507090529585654,
    "avg_bits_err_improve": 0.08595884308147883,
    "time": 26390.56982421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (- (log1p (* u -4.0))) s)",
    "output_parens": 4,
    "avg_bits_err_input": 12.261449949987062,
    "avg_bits_err_output": 0.20425,
    "avg_bits_err_improve": 12.057199949987062,
    "time": 21474.528076171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (* (* (* 6.0 PI) s) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13820640067753484,
    "avg_bits_err_output": 0.1375623275707575,
    "avg_bits_err_improve": 0.000644073106777332,
    "time": 26229.86669921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8725186000838073,
    "avg_bits_err_output": 0.6774893892739728,
    "avg_bits_err_improve": 0.19502921080983449,
    "time": 28924.911865234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (- c (- -1.0 (/ (* (sqrt (- 1.0 (+ cosTheta cosTheta))) (exp (* cosTheta (- cosTheta)))) (* cosTheta (sqrt PI))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6713088026669302,
    "avg_bits_err_output": 0.4627589831655639,
    "avg_bits_err_improve": 0.20854981950136625,
    "time": 26045.47265625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(expm1 (log1p (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.367400261435419,
    "avg_bits_err_output": 0.5423113477797581,
    "avg_bits_err_improve": 12.82508891365566,
    "time": 21264.914794921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (sqrt (- (log1p (- u1)))) (- (sqrt (- (log1p (- u1)))) (* (sqrt (- (log1p (- u1)))) (cos (* u2 (* PI -2.0))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.414906258828818,
    "avg_bits_err_output": 0.3263078226313102,
    "avg_bits_err_improve": 13.088598436197508,
    "time": 21319.775146484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- alpha) (* (log1p (- u0)) alpha))",
    "output_parens": 5,
    "avg_bits_err_input": 14.056376922310076,
    "avg_bits_err_output": 0.3311605265643931,
    "avg_bits_err_improve": 13.725216395745683,
    "time": 14804.668701171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ cos2phi (* alphax alphax)) (/ (/ sin2phi alphay) alphay)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.66285528476113,
    "avg_bits_err_output": 0.5034389576872975,
    "avg_bits_err_improve": 12.159416327073833,
    "time": 13438.894287109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (* (/ 1.0 F) (tan (* PI l))) F))",
    "output_parens": 7,
    "avg_bits_err_input": 16.691843987733897,
    "avg_bits_err_output": 12.557978440598374,
    "avg_bits_err_improve": 4.133865547135523,
    "time": 20908.848388671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21904248125036055,
    "avg_bits_err_output": 0.15432312031259016,
    "avg_bits_err_improve": 0.06471936093777039,
    "time": 16035.851806640625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.969781206720246,
    "avg_bits_err_output": 10.784918310963297,
    "avg_bits_err_improve": 3.1848628957569485,
    "time": 20922.41552734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (+ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f 4.0))) 0.0) (/ (expm1 (* PI (* (/ f 4.0) 2.0))) (exp (* PI (/ f 4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) 1.0) 1.0) (/ PI -4.0))",
    "output_parens": 33,
    "avg_bits_err_input": 61.33326911280274,
    "avg_bits_err_output": 1.8520036654193799,
    "avg_bits_err_improve": 59.48126544738336,
    "time": 41949.026123046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.37771968794223,
    "avg_bits_err_output": 33.50065111458902,
    "avg_bits_err_improve": 8.877068573353213,
    "time": 31285.73388671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.860575818610361,
    "avg_bits_err_output": 3.860575818610361,
    "avg_bits_err_improve": 0,
    "time": 33223.717041015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.0458010014493448,
    "avg_bits_err_output": 0.006375,
    "avg_bits_err_improve": 1.0394260014493448,
    "time": 13807.038330078125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (/ (* Om (/ Om Omc)) Omc)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.044448814120882,
    "avg_bits_err_output": 10.044448814120882,
    "avg_bits_err_improve": 0,
    "time": 14564.55322265625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (* (sqrt (fabs n)) (sqrt (fabs U))))",
    "output_parens": 18,
    "avg_bits_err_input": 35.1978862865177,
    "avg_bits_err_output": 16.913791841065812,
    "avg_bits_err_improve": 18.28409444545189,
    "time": 38886.14794921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1.32e+95) (/ 2.0 (/ (/ (* (+ k k) (* k (* (/ (sin k) l) (* (tan k) (/ (pow t 3.0) l))))) (+ t t)) t)) (/ 2.0 (* (* (* (pow t 3.0) (* (tan k) (sin k))) (/ k (* t l))) (/ k (* t l)))))",
    "output_parens": 28,
    "avg_bits_err_input": 47.38494465601513,
    "avg_bits_err_output": 30.79441601639428,
    "avg_bits_err_improve": 16.59052863962085,
    "time": 47850.06103515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1.5e-101) (/ (/ 2.0 (/ (* (pow t 3.0) (/ (sin k) l)) l)) (* (tan k) (+ 2.0 (pow (/ k t) 2.0)))) (if (<= t 5.5e-60) 0.0 (/ 2.0 (/ (* (* (tan k) (+ 2.0 (pow (/ k t) 2.0))) (/ (* (sin k) (pow t 3.0)) l)) l))))",
    "output_parens": 28,
    "avg_bits_err_input": 32.22962081645923,
    "avg_bits_err_output": 22.559272596113438,
    "avg_bits_err_improve": 9.670348220345794,
    "time": 26422.890380859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (* a2 (/ a2 (sqrt 2.0))) (* a1 (/ a1 (sqrt 2.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5215889125209148,
    "avg_bits_err_output": 0.4700084609550793,
    "avg_bits_err_improve": 0.05158045156583546,
    "time": 21551.9287109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* 2.0 (* PI n)) (* k -0.5)) (sqrt (* 2.0 (* PI n)))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.49177474195505366,
    "avg_bits_err_output": 0.424512218755409,
    "avg_bits_err_improve": 0.06726252319964465,
    "time": 21564.55517578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (* (exp l) (if (!= (+ (exp (fma l -1.0 l)) (exp (* l -2.0))) 0.0) (/ (if (!= (+ (pow (exp (fma l -1.0 l)) 2.0) (exp (* l -4.0))) 0.0) (/ (if (!= (+ (pow (exp (fma l -1.0 l)) 4.0) (exp (* l -8.0))) 0.0) (/ (- (pow (exp (fma l -1.0 l)) 8.0) (exp (* l -16.0))) (+ (pow (exp (fma l -1.0 l)) 4.0) (exp (* l -8.0)))) (- (pow (exp (fma l -1.0 l)) 4.0) (exp (* l -8.0)))) (+ (pow (exp (fma l -1.0 l)) 2.0) (exp (* l -4.0)))) (- (pow (exp (fma l -1.0 l)) 2.0) (exp (* l -4.0)))) (+ (exp (fma l -1.0 l)) (exp (* l -2.0)))) (- (exp (fma l -1.0 l)) (exp (* l -2.0)))))) (cos (/ K 2.0))) U)",
    "output_parens": 73,
    "avg_bits_err_input": 17.508431442493627,
    "avg_bits_err_output": 17.520059502010742,
    "avg_bits_err_improve": -0.011628059517114764,
    "time": 32310.005859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) 0.9) (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) (pow (- (/ (+ m n) 2.0) M) 2.0)) l))) (* (cos (- (/ (if (!= (* K n) 0.0) (fma K (* n (* (/ K (* K n)) (+ n m))) (fma -1.0 (/ K (* K n)) (/ K (* K n)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))))",
    "output_parens": 63,
    "avg_bits_err_input": 15.561705301890038,
    "avg_bits_err_output": 6.881656861297718,
    "avg_bits_err_improve": 8.68004844059232,
    "time": 16641.99658203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.464323120312592,
    "avg_bits_err_output": 17.464323120312592,
    "avg_bits_err_improve": 0,
    "time": 40703.386962890625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (* (/ (/ M 2.0) d) (* D (/ (* h (* (/ M (+ d d)) D)) l))))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.651517897889446,
    "avg_bits_err_output": 9.592342086580832,
    "avg_bits_err_improve": 5.059175811308615,
    "time": 25567.782958984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+159) (* c0 (* (sqrt (/ A V)) (sqrt (/ 1.0 l)))) (if (<= (* V l) -5e-43) (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (/ 1.0 (/ 1.0 (sqrt (/ A (* l V))))) (sqrt (/ A (* l V))))) (if (<= (* V l) 0.0) (* c0 (* (sqrt (/ A V)) (sqrt (/ 1.0 l)))) (if (<= (* V l) 2e+291) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (+ (/ (/ A (+ V V)) (+ l l)) (/ (/ (+ A (+ A A)) V) (+ l (+ l (+ l l)))))))))))",
    "output_parens": 56,
    "avg_bits_err_input": 19.103543663613543,
    "avg_bits_err_output": 11.93547956873259,
    "avg_bits_err_improve": 7.168064094880952,
    "time": 23593.494140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) -2e+46) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma d (/ (/ (* d c0) (* D w)) (* D h)) M)) (sqrt (fma d (/ (/ (* d c0) (* D w)) (* D h)) (- M))) (* d (/ (/ (* d c0) (* D w)) (* D h))))) (/ (/ (* c0 (if (!= (- (/ (* d (* c0 (/ d h))) (* D (* D w))) (sqrt (- (pow (/ (* d (* c0 (/ d h))) (* D (* D w))) 2.0) (* M M)))) 0.0) (if (!= 0.0 0.0) (/ (* (* M (/ M (- (* d (* c0 (/ (/ (/ d D) (* D w)) h))) (sqrt (- (pow (* d (* c0 (/ (/ (/ d D) (* D w)) h))) 2.0) (* M M)))))) 0.0) 0.0) (* M (/ M (- (* d (* c0 (/ (/ (/ d D) (* D w)) h))) (sqrt (- (pow (* d (* c0 (/ (/ (/ d D) (* D w)) h))) 2.0) (* M M))))))) (+ (* d (* c0 (/ (/ (/ d D) (* D w)) h))) (sqrt (- (pow (* d (* c0 (/ (/ (/ d D) (* D w)) h))) 2.0) (* M M)))))) w) 2.0))",
    "output_parens": 134,
    "avg_bits_err_input": 59.690435362156144,
    "avg_bits_err_output": 30.519875793785168,
    "avg_bits_err_improve": 29.170559568370976,
    "time": 50744.0224609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (/ (* (sqrt (* d (/ (/ d h) l))) (- 1.0 (* (* (/ D d) (* D (* M (/ (/ h d) 8.0)))) (/ M l)))) 1.0) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 4e+301) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) INFINITY) (/ (* (* (sqrt (/ d (* h l))) (sqrt d)) (- 1.0 (* (* h (/ 0.5 l)) (* (* M (* D (/ D d))) (/ M (* d 4.0)))))) 1.0) (/ (* (sqrt (* d (/ (/ d h) l))) (- 1.0 (/ (/ (* M (* M (* (/ D d) (* D h)))) (* l 8.0)) d))) 1.0))))",
    "output_parens": 110,
    "avg_bits_err_input": 26.882942619124844,
    "avg_bits_err_output": 21.834388644785594,
    "avg_bits_err_improve": 5.048553974339249,
    "time": 52467.82666015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (/ 0.25 (fma x x 1.0))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 33,
    "avg_bits_err_input": 15.55160651413115,
    "avg_bits_err_output": 15.048756332985766,
    "avg_bits_err_improve": 0.5028501811453836,
    "time": 20725.77587890625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ 1.3333333333333333 (* (* PI (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9842924812503606,
    "avg_bits_err_output": 0.013021240625180291,
    "avg_bits_err_improve": 0.9712712406251803,
    "time": 4471.716552734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (fma v (* v 5.0) -1.0) PI) (- (sqrt (fma v (* v -6.0) 2.0)))) (- t (* v (* v t))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.42143915857060477,
    "avg_bits_err_output": 0.11559500917777916,
    "avg_bits_err_improve": 0.3058441493928256,
    "time": 25537.597412109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(- (* v (* v (/ (sqrt (- 2.0 (* 6.0 (* v v)))) -4.0))) (/ (sqrt (- 2.0 (* 6.0 (* v v)))) -4.0))",
    "output_parens": 13,
    "avg_bits_err_input": 0.01252124062518029,
    "avg_bits_err_output": 0.008948120312590145,
    "avg_bits_err_improve": 0.0035731203125901456,
    "time": 10859.618896484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5478636605581666,
    "avg_bits_err_output": 0.5478636605581666,
    "avg_bits_err_improve": 0,
    "time": 10276.695068359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (fma k k (- (* k 10.0) -1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 1.9274456531526651,
    "avg_bits_err_output": 1.885695653152665,
    "avg_bits_err_improve": 0.041750000000000176,
    "time": 18395.470703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- EDonor (- Ec (+ Vef mu))) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02812955818689803,
    "avg_bits_err_output": 0.02812955818689803,
    "avg_bits_err_improve": 0,
    "time": 9456.568115234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(fma b (* b (+ (fma a (+ a a) (* b b)) 4.0)) (+ -1.0 (pow a 4.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.18284945195251592,
    "avg_bits_err_output": 0.06824080507553278,
    "avg_bits_err_improve": 0.11460864687698315,
    "time": 8789.82177734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (/ 1.0 (/ 1.0 (+ (pow b 4.0) (fma 2.0 (pow (* b a) 2.0) (pow a 4.0))))) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 27,
    "avg_bits_err_input": 0.19612962650265922,
    "avg_bits_err_output": 0.07548718260596549,
    "avg_bits_err_improve": 0.12064244389669374,
    "time": 23915.2841796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (/ 1.0 (/ 1.0 (fma (* a a) (fma b b (* a a)) (fma a (* b (* b a)) (pow b 4.0))))) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 28,
    "avg_bits_err_input": 0.1943640478111961,
    "avg_bits_err_output": 0.1408807775014907,
    "avg_bits_err_improve": 0.0534832703097054,
    "time": 28152.42578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.472645032385683,
    "avg_bits_err_output": 13.472645032385683,
    "avg_bits_err_improve": 0,
    "time": 19781.128173828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.566345583290996,
    "avg_bits_err_output": 0.015125,
    "avg_bits_err_improve": 40.551220583291,
    "time": 7061.76806640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (+ (+ (tan x) 2.0) -2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 31.668470336410316,
    "avg_bits_err_output": 30.908984274290734,
    "avg_bits_err_improve": 0.7594860621195814,
    "time": 25779.178955078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.4e+154) (+ (/ 0.0 a) (/ b_2 (- a))) (if (<= b_2 -4.1e-172) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (if (<= b_2 2.95e+144) (/ (if (!= (- 0.0 b_2) 0.0) (* a (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))))) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a) (/ (if (!= (- b_2) 0.0) (fma a (/ c (* b_2 -2.0)) (* c (/ (/ a b_2) -2.0))) (- b_2)) a))))",
    "output_parens": 44,
    "avg_bits_err_input": 33.71794520895431,
    "avg_bits_err_output": 18.80590434156579,
    "avg_bits_err_improve": 14.912040867388523,
    "time": 20467.061767578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 33.97385611769561,
    "avg_bits_err_output": 19.79561757218422,
    "avg_bits_err_improve": 14.178238545511391,
    "time": 19830.893310546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (if (!= (/ (cos x) x) 0.0) (- (/ (/ (cos x) x) (* x (/ (cos x) x))) (/ 1.0 (/ 1.0 (/ (cos x) x)))) (/ (- 1.0 (cos x)) x)) x)",
    "output_parens": 19,
    "avg_bits_err_input": 31.376303852537593,
    "avg_bits_err_output": 30.69041800934211,
    "avg_bits_err_improve": 0.6858858431954822,
    "time": 19739.2861328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (if (!= (- 1.0 (pow x (/ 1.0 n))) 0.0) (/ 1.0 (/ 1.0 (expm1 (/ (log x) n)))) (expm1 (/ (log x) n))))",
    "output_parens": 17,
    "avg_bits_err_input": 32.469962662104635,
    "avg_bits_err_output": 10.807030738110756,
    "avg_bits_err_improve": 21.66293192399388,
    "time": 33220.87890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (+ (log1p N) 1.0) 0.0) (/ (- (pow (+ (log1p N) 1.0) 2.0) (* (+ (log1p N) 1.0) (+ (log N) 1.0))) (+ (log1p N) 1.0)) (- (log1p N) (log N)))",
    "output_parens": 19,
    "avg_bits_err_input": 29.552227315224616,
    "avg_bits_err_output": 29.573607243496728,
    "avg_bits_err_improve": -0.021379928272111215,
    "time": 14399.36083984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (/ (/ (- (/ x (/ (+ 1.0 x) x)) x) x) x) 0.0)",
    "output_parens": 7,
    "avg_bits_err_input": 14.553174895831383,
    "avg_bits_err_output": 14.295669130783187,
    "avg_bits_err_improve": 0.25750576504819556,
    "time": 15433.29443359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (expm1 (log1p (sin eps))))))",
    "output_parens": 10,
    "avg_bits_err_input": 39.93567122901428,
    "avg_bits_err_output": 6.2586777193043375,
    "avg_bits_err_improve": 33.676993509709945,
    "time": 25298.722412109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(- (cbrt (+ x 1.0)) (if (!= (cbrt x) 0.0) (/ 1.0 (/ 1.0 (cbrt x))) (cbrt x)))",
    "output_parens": 10,
    "avg_bits_err_input": 29.896581344258788,
    "avg_bits_err_output": 29.9285078661777,
    "avg_bits_err_improve": -0.03192652191891199,
    "time": 13606.667724609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log (- 1.0 (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 30.55151258194374,
    "avg_bits_err_output": 30.55569184860867,
    "avg_bits_err_improve": -0.004179266664930736,
    "time": 21469.50341796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -2.6e-198) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* (* a c) 4.0) (- b (sqrt (fma a (* c -4.0) (* b b))))) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 50,
    "avg_bits_err_input": 33.851531813868164,
    "avg_bits_err_output": 15.668616974622022,
    "avg_bits_err_improve": 18.18291483924614,
    "time": 24593.68359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.081361275863955,
    "avg_bits_err_output": 21.802345271993758,
    "avg_bits_err_improve": 12.279016003870197,
    "time": 24355.919189453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.06916301485907,
    "avg_bits_err_output": 0.024950564063671885,
    "avg_bits_err_improve": 61.0442124507954,
    "time": 15552.080322265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(exp (* 1.0 (expm1 (log1p (log (+ (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n)))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 63.0130033641234,
    "avg_bits_err_output": 2.5929052172957703,
    "avg_bits_err_improve": 60.42009814682763,
    "time": 19551.6435546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ eps (- -1.0 eps)) (if (!= (+ 1.0 (/ -1.0 (- -1.0 eps))) 0.0) (/ (if (!= (/ 1.0 (pow (- -1.0 eps) 2.0)) 0.0) (/ (- (pow (/ 1.0 (pow (- -1.0 eps) 2.0)) 2.0) (/ 1.0 (pow (- -1.0 eps) 2.0))) (/ 1.0 (pow (- -1.0 eps) 2.0))) (+ -1.0 (/ 1.0 (pow (- -1.0 eps) 2.0)))) (+ -1.0 (/ 1.0 (- -1.0 eps)))) (+ 1.0 (/ 1.0 (- -1.0 eps))))))",
    "output_parens": 37,
    "avg_bits_err_input": 58.599320036676964,
    "avg_bits_err_output": 50.525461869845756,
    "avg_bits_err_improve": 8.073858166831208,
    "time": 20948.03076171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (+ -1.0 (/ 1.0 (/ x (tan x)))) (* x (/ 1.0 (/ x (tan x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 59.906298302052484,
    "avg_bits_err_output": 59.90591447215136,
    "avg_bits_err_improve": 0.00038382990112495463,
    "time": 30825.260009765625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.420969460268275,
    "avg_bits_err_output": 29.392036142920446,
    "avg_bits_err_improve": 31.02893331734783,
    "time": 27848.72998046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 40.9553766315833,
    "avg_bits_err_output": 0.4383231203125902,
    "avg_bits_err_improve": 40.51705351127071,
    "time": 4344.842529296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.792896419761746,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.792396419761744,
    "time": 2716.631591796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.531069950251908,
    "avg_bits_err_output": 0.016973793617776685,
    "avg_bits_err_improve": 29.51409615663413,
    "time": 4353.116455078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (expm1 (- x)) 0.0) (/ (+ (pow (expm1 (- x)) 2.0) (* (expm1 (- x)) (expm1 x))) (expm1 (- x))) (+ (expm1 x) (expm1 (- x))))",
    "output_parens": 19,
    "avg_bits_err_input": 29.62849430006962,
    "avg_bits_err_output": 28.76792327388893,
    "avg_bits_err_improve": 0.8605710261806898,
    "time": 16462.624267578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (* (/ (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 2.0 x)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 10.130581383432595,
    "avg_bits_err_output": 10.127734560835286,
    "avg_bits_err_improve": 0.0028468225973092842,
    "time": 21062.051025390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (if (!= (tan x) 0.0) (/ 1.0 (/ 1.0 (tan x))) (tan x)))",
    "output_parens": 10,
    "avg_bits_err_input": 37.61544432487748,
    "avg_bits_err_output": 37.65548445509672,
    "avg_bits_err_improve": -0.040040130219239245,
    "time": 19694.4931640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.010578261194585,
    "avg_bits_err_output": 0.16937048906511415,
    "avg_bits_err_improve": 29.841207772129472,
    "time": 12891.74072265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.46693857426891,
    "avg_bits_err_output": 22.2968999183128,
    "avg_bits_err_improve": 15.170038655956109,
    "time": 21113.572265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (<= x 5e+91) (- (pow x -0.5) (/ 1.0 (sqrt (+ x 1.0)))) (/ (/ 0.0 (/ -1.0 (/ (- x) (sqrt x)))) x))",
    "output_parens": 13,
    "avg_bits_err_input": 19.90763185922271,
    "avg_bits_err_output": 19.751643216806837,
    "avg_bits_err_improve": 0.15598864241587407,
    "time": 17514.25439453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (+ (fma (- (/ (atan N) (+ (atan (+ 1.0 N)) (atan N)))) (atan N) (* (atan N) (/ (atan N) (+ (atan (+ 1.0 N)) (atan N))))) (* (- (atan (+ 1.0 N)) (atan N)) (/ (+ (atan (+ 1.0 N)) (atan N)) (+ (atan (+ 1.0 N)) (atan N))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 42,
    "avg_bits_err_input": 15.003709080553007,
    "avg_bits_err_output": 15.005035507945557,
    "avg_bits_err_improve": -0.0013264273925504,
    "time": 14247.859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.503171876792933,
    "avg_bits_err_output": 1.2498186336119579,
    "avg_bits_err_improve": 28.253353243180975,
    "time": 27521.2919921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (- m (* m m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0776488878888441,
    "avg_bits_err_output": 0.07525264726366379,
    "avg_bits_err_improve": 0.0023962406251803042,
    "time": 12850.720458984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b a) (/ (/ -1.0 a) b))",
    "output_parens": 4,
    "avg_bits_err_input": 15.817693724844002,
    "avg_bits_err_output": 0.2622127828190803,
    "avg_bits_err_improve": 15.555480942024921,
    "time": 11848.549560546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (/ angle 180.0)) 0.0) (/ 1.0 (/ -1.0 (* PI (/ angle -180.0)))) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.608705022628236,
    "avg_bits_err_output": 20.611988411445918,
    "avg_bits_err_improve": -0.003283388817681754,
    "time": 35095.124755859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) -2e-51) (* (if (!= (* (sin (* angle (/ PI -180.0))) (pow b 2.0)) 0.0) (- (* (pow (* a (sin (* angle (/ PI -180.0)))) 2.0) (+ 0.0 (/ 1.0 (sin (* angle (/ PI -180.0)))))) (/ 1.0 (/ 1.0 (* (sin (* angle (/ PI -180.0))) (pow b 2.0))))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0))))) (if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) 2e-137) (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* PI (/ angle 180.0))) (cos (/ (* PI angle) -180.0)))) (* (if (!= (* (sin (* angle (/ PI -180.0))) (pow b 2.0)) 0.0) (- (* (pow (* a (sin (* angle (/ PI -180.0)))) 2.0) (+ 0.0 (/ 1.0 (sin (* angle (/ PI -180.0)))))) (/ 1.0 (/ 1.0 (* (sin (* angle (/ PI -180.0))) (pow b 2.0))))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0)))))))",
    "output_parens": 116,
    "avg_bits_err_input": 31.438873971055294,
    "avg_bits_err_output": 29.60086789873641,
    "avg_bits_err_improve": 1.8380060723188834,
    "time": 37034.686767578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (log1p (expm1 (sin (if (!= (* (/ angle 180.0) PI) 0.0) (/ 1.0 (/ 1.0 (* (/ angle 180.0) PI))) (* (/ angle 180.0) PI)))))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 20.29283692702173,
    "avg_bits_err_output": 20.335456029344368,
    "avg_bits_err_improve": -0.04261910232263588,
    "time": 41880.72900390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17735620312590142,
    "avg_bits_err_output": 0.17320996250072113,
    "avg_bits_err_improve": 0.004146240625180292,
    "time": 18280.2275390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.31963946681700633,
    "avg_bits_err_output": 0.31826852172968445,
    "avg_bits_err_improve": 0.0013709450873218842,
    "time": 19261.3662109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13694812031259015,
    "avg_bits_err_output": 0.13694812031259015,
    "avg_bits_err_improve": 0,
    "time": 14692.749755859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 12,
    "avg_bits_err_input": 17.270826726077534,
    "avg_bits_err_output": 17.270826726077534,
    "avg_bits_err_improve": 0,
    "time": 35617.0693359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.308047170860114,
    "avg_bits_err_output": 0.1714250160161878,
    "avg_bits_err_improve": 52.13662215484393,
    "time": 28914.3330078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 28.219183359608415,
    "avg_bits_err_output": 0.3413565600019762,
    "avg_bits_err_improve": 27.87782679960644,
    "time": 25570.078369140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.44645167037662,
    "avg_bits_err_output": 0.23717518907088306,
    "avg_bits_err_improve": 43.209276481305736,
    "time": 23465.71435546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -2.6e-198) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* (* a c) 4.0) (- b (sqrt (fma a (* c -4.0) (* b b))))) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 50,
    "avg_bits_err_input": 33.861446536139766,
    "avg_bits_err_output": 15.668616974622022,
    "avg_bits_err_improve": 18.192829561517744,
    "time": 22387.458984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8077925542400564,
    "avg_bits_err_output": 0.807415012635698,
    "avg_bits_err_improve": 0.0003775416043583224,
    "time": 28403.62109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (/ (log (+ 1.0 (expm1 (+ -1.0 (/ 4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)))))) (if (!= (- 1.0 (/ -2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ 1.0 (/ 1.0 (- 1.0 (/ -2.0 (+ 1.0 (exp (* -2.0 x))))))) (- 1.0 (/ -2.0 (+ 1.0 (exp (* -2.0 x))))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 41,
    "avg_bits_err_input": 29.0979440931814,
    "avg_bits_err_output": 29.092855079036433,
    "avg_bits_err_improve": 0.005089014144967763,
    "time": 22351.662841796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(- (/ (exp x) (+ (exp (- x)) (exp x))) (/ 1.0 (+ (exp (* x 2.0)) 1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 58.04622256576127,
    "avg_bits_err_output": 57.455237677324554,
    "avg_bits_err_improve": 0.590984888436715,
    "time": 20159.084228515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x 2.0)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 58.06032060631522,
    "avg_bits_err_output": 0.04569812031259015,
    "avg_bits_err_improve": 58.01462248600263,
    "time": 5878.02685546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008875,
    "avg_bits_err_output": 0.008875,
    "avg_bits_err_improve": 0,
    "time": 1839.444091796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.873125,
    "avg_bits_err_output": 31.873125,
    "avg_bits_err_improve": 0,
    "time": 4028.26416015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(/ (log (- (/ x (- 1.0 x)) (/ -1.0 (- 1.0 x)))) 2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 58.59448913333511,
    "avg_bits_err_output": 58.59522004268008,
    "avg_bits_err_improve": -0.0007309093449734405,
    "time": 17326.500732421875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.003448120312590144,
    "avg_bits_err_output": 0.0036652410118609203,
    "avg_bits_err_improve": -0.00021712069927077617,
    "time": 2583.024169921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma ew (* (sin t) (cos (atan (/ eh (* ew (tan t)))))) (* (* eh (cos t)) (sin (atan (/ eh (* ew (tan t))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12686560156295074,
    "avg_bits_err_output": 0.12459436093777043,
    "avg_bits_err_improve": 0.002271240625180304,
    "time": 29230.21826171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.11644812031259014,
    "avg_bits_err_output": 0.11644812031259014,
    "avg_bits_err_improve": 0,
    "time": 27148.330322265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (sin (/ phi2 2.0)) (sin (/ phi1 -2.0))) (* (cos (/ phi1 2.0)) (* (cos (/ phi2 2.0)) (- lambda1 lambda2)))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.12043562712222,
    "avg_bits_err_output": 0.13121802444311487,
    "avg_bits_err_improve": 38.989217602679105,
    "time": 29065.94873046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.33800257757965,
    "avg_bits_err_output": 14.33800257757965,
    "avg_bits_err_improve": 0,
    "time": 4021.65380859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (+ (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (sin phi1)))))))",
    "output_parens": 47,
    "avg_bits_err_input": 0.1580655913209612,
    "avg_bits_err_output": 0.17078886986670763,
    "avg_bits_err_improve": -0.012723278545746425,
    "time": 45915.733642578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.311331709905836,
    "avg_bits_err_output": 0.17704041406655635,
    "avg_bits_err_improve": 52.13429129583928,
    "time": 29229.58984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.321092932950116,
    "avg_bits_err_output": 0.33558140821297294,
    "avg_bits_err_improve": 27.98551152473714,
    "time": 26628.250732421875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.46908362541463,
    "avg_bits_err_output": 0.23583082813311274,
    "avg_bits_err_improve": 43.23325279728152,
    "time": 26395.96240234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- b (- (sqrt (fma b b (* (* a c) -3.0))))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma b b (* (* a c) -3.0))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 33.8970234565059,
    "avg_bits_err_output": 21.622399916263994,
    "avg_bits_err_improve": 12.274623540241905,
    "time": 26346.799560546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.522863158103593,
    "avg_bits_err_output": 13.522863158103593,
    "avg_bits_err_improve": 0,
    "time": 35296.763916015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (- (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 29.065162798802888,
    "avg_bits_err_output": 24.7013651150137,
    "avg_bits_err_improve": 4.363797683789187,
    "time": 29774.026123046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.07612386241940919,
    "avg_bits_err_improve": -0.06274886241940919,
    "time": 3259.1015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (- 1.0 (/ x (+ x -1.0))) (- (/ 1.0 (+ x -1.0)))) (+ 1.0 x))",
    "output_parens": 9,
    "avg_bits_err_input": 14.859461299622096,
    "avg_bits_err_output": 12.90793443761742,
    "avg_bits_err_improve": 1.951526862004675,
    "time": 20821.325927734375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1e-309) (* (/ (* (sqrt (- (pow B 2.0) (* C (* A 4.0)))) (sqrt (- (+ C (- A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* C (* A 4.0)) (pow B 2.0))) (sqrt (* F -2.0))) (/ (* (sqrt (- (* C (* A 4.0)) (pow B 2.0))) (sqrt (* (* F -2.0) (+ C (- A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* C (* A 4.0)) (pow B 2.0))))",
    "output_parens": 46,
    "avg_bits_err_input": 51.983211803226446,
    "avg_bits_err_output": 46.70486298184355,
    "avg_bits_err_improve": 5.278348821382899,
    "time": 42514.787109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -1.0) (* (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) (/ 180.0 PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 0.0) (* (atan (* (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0) (* (pow (- A C) 2.0) 0.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (/ -1.0 B))) (/ 180.0 PI)) (* (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) (/ 180.0 PI))))",
    "output_parens": 78,
    "avg_bits_err_input": 30.035061182282806,
    "avg_bits_err_output": 26.169179237593244,
    "avg_bits_err_improve": 3.865881944689562,
    "time": 24226.449951171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -5e-310) (/ (* (sqrt (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (* (sqrt (- (* (* C A) 8.0) (* 2.0 (pow B 2.0)))) (sqrt (- F)))) (- (* A (* C 4.0)) (pow B 2.0))) (* (/ (sqrt (fma (* A C) -4.0 (pow B 2.0))) (- (* A (* C 4.0)) (pow B 2.0))) (* (sqrt F) (sqrt (* 2.0 (+ A (if (!= (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) 0.0) (/ (- (- (* C C) (pow (- A C) 2.0)) (pow B 2.0)) (- C (if (!= (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) 0.0) (/ 2.0 (/ 2.0 (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))))))",
    "output_parens": 81,
    "avg_bits_err_input": 51.99893718574888,
    "avg_bits_err_output": 45.68093654256301,
    "avg_bits_err_improve": 6.318000643185869,
    "time": 50270.206787109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.240815313840924,
    "avg_bits_err_output": 15.240815313840924,
    "avg_bits_err_improve": 0,
    "time": 20091.486572265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1.5e+139) (+ (cbrt (* (/ 0.5 a) (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (cbrt (* (/ 0.5 a) (if (!= (- (sqrt (fma g g (- (* h h)))) g) 0.0) (/ (+ 0.0 (- (- (* h h)))) (- (sqrt (fma g g (- (* h h)))) g)) (- (- g) (sqrt (fma g g (- (* h h))))))))) (if (<= g -3.8e-147) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (sqrt (- (* g g) (* h h))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (if (<= g -5e-296) (+ (cbrt (* (/ 0.5 a) (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (cbrt (* (/ 0.5 a) (if (!= (- (sqrt (fma g g (- (* h h)))) g) 0.0) (/ (+ 0.0 (- (- (* h h)))) (- (sqrt (fma g g (- (* h h)))) g)) (- (- g) (sqrt (fma g g (- (* h h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- g (- (sqrt (- (* g g) (* h h))))) 0.0) (* h (/ h (- (- g) (sqrt (- (* g g) (* h h)))))) (- (sqrt (- (* g g) (* h h))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))))",
    "output_parens": 145,
    "avg_bits_err_input": 36.37509049241928,
    "avg_bits_err_output": 10.445798293618175,
    "avg_bits_err_improve": 25.929292198801107,
    "time": 39454.39306640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (+ (* (expm1 (log1p (sin (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) 3.0))) (+ (* (sin (* PI 0.6666666666666666)) (- (sin (/ (acos (/ g (- h))) 3.0)))) (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.9902601515716059,
    "avg_bits_err_output": 0.0350947375050481,
    "avg_bits_err_improve": 0.9551654140665577,
    "time": 18709.8818359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7168231203125902,
    "avg_bits_err_output": 0.7168231203125902,
    "avg_bits_err_improve": 0,
    "time": 3055.742431640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-292) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+284) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 10.990635441032403,
    "avg_bits_err_output": 2.416242722455524,
    "avg_bits_err_improve": 8.57439271857688,
    "time": 8257.561767578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5058062020706864,
    "avg_bits_err_output": 0.44275,
    "avg_bits_err_improve": 0.0630562020706864,
    "time": 12133.542724609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.004) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 20000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.09023147039252,
    "avg_bits_err_output": 0.17702994051016566,
    "avg_bits_err_improve": 52.91320152988235,
    "time": 9764.539306640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.677473653900648,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.677473653900648,
    "time": 2840.073974609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (if (!= (sqrt (/ (- 4.0 (* x 4.0)) (+ (+ x x) (+ x (+ x 4.0))))) 0.0) (/ (/ (- 4.0 (* x 4.0)) (+ (+ x x) (+ x (+ x 4.0)))) (sqrt (/ (- 4.0 (* x 4.0)) (+ (+ x x) (+ x (+ x 4.0)))))) (sqrt (/ (- 4.0 (* x 4.0)) (+ (+ x x) (+ x (+ x 4.0))))))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.0165,
    "avg_bits_err_improve": -0.004750000000000001,
    "time": 10676.125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1274.987060546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= r -1.6e+94) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* r (* w (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (if (<= r 2e-62) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* w (* r (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* r (* w (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.89513380956406,
    "avg_bits_err_output": 0.46057821132733584,
    "avg_bits_err_improve": 12.434555598236724,
    "time": 24029.058349609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0) (* x1 x1)) (/ (* (* (- 3.0 (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (* x1 -2.0)) (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2)))) (- -1.0 (* x1 x1))))))))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.5029244838468105,
    "avg_bits_err_output": 0.2836270360654115,
    "avg_bits_err_improve": 0.21929744778139904,
    "time": 61437.52490234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.21487455932854,
    "avg_bits_err_output": 1.4936878984196205,
    "avg_bits_err_improve": 16.72118666090892,
    "time": 8271.14501953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* x 0.954929658551372) (* x (* 0.12900613773279798 (* x x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.24785620312590143,
    "avg_bits_err_output": 0.19169116562662256,
    "avg_bits_err_improve": 0.05616503749927887,
    "time": 9895.726806640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0025,
    "avg_bits_err_output": 0.0025,
    "avg_bits_err_improve": 0,
    "time": 3877.559814453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* PI (/ (- (/ 1.0 (* a (+ a b))) (/ 1.0 (* b (+ a b)))) (* (- b a) 2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 14.088246987263581,
    "avg_bits_err_output": 0.30137612970183286,
    "avg_bits_err_improve": 13.786870857561748,
    "time": 18842.21044921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (/ (+ 1.0 (/ 1.0 eps)) (exp (* (- 1.0 eps) x))) (/ (/ 1.0 eps) (exp (* x (+ 1.0 eps))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.22088656098563,
    "avg_bits_err_output": 24.563826144048246,
    "avg_bits_err_improve": 4.657060416937384,
    "time": 18462.198486328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (if (!= (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))) 0.0) (/ (- (/ 4.0 (+ t (/ t t))) (/ (/ 8.0 (+ t (/ t t))) (* t (+ 2.0 (/ 2.0 t))))) (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (+ 2.0 (/ -2.0 (* t (+ 1.0 (/ 1.0 t)))))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.020625,
    "avg_bits_err_output": 0.0215,
    "avg_bits_err_improve": -0.0008749999999999973,
    "time": 7031.75927734375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- 4.0 (+ (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t)) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.024875,
    "avg_bits_err_output": 0.07203552656439302,
    "avg_bits_err_improve": -0.04716052656439302,
    "time": 15157.899658203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* (/ t (+ t 1.0)) 4.0))) (+ 2.0 (* (/ t (+ t 1.0)) (* (/ t (+ t 1.0)) 4.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.056875,
    "avg_bits_err_output": 0.008875,
    "avg_bits_err_improve": 0.048,
    "time": 16266.048095703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3654.09912109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8925.94384765625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2517.395751953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.82853340489227,
    "avg_bits_err_output": 0.259375,
    "avg_bits_err_improve": 7.56915840489227,
    "time": 35490.816650390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.541647976561522,
    "avg_bits_err_output": 7.541647976561522,
    "avg_bits_err_improve": 0,
    "time": 17506.6044921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.250982329742293,
    "avg_bits_err_output": 0.04422372918155777,
    "avg_bits_err_improve": 16.206758600560736,
    "time": 10671.97021484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(+ (pow (pow (exp 10.0) x) x) (* (pow (pow (exp 10.0) x) x) (+ (cos x) -1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 3.5421382670536876,
    "avg_bits_err_output": 1.3412721517816668,
    "avg_bits_err_improve": 2.200866115272021,
    "time": 20489.328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (fma x x 1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 15.06790785240537,
    "avg_bits_err_output": 15.06765785240537,
    "avg_bits_err_improve": 0.00024999999999941735,
    "time": 13992.79833984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.4131633067091,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.4131633067091,
    "time": 5339.70263671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.657742036475284,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 38.65761703647529,
    "time": 4180.066162109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.293125,
    "avg_bits_err_improve": 63.706875,
    "time": 13662.933349609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ (* t 1.6e-47) 4e-16) t)",
    "output_parens": 3,
    "avg_bits_err_input": 61.84325490773342,
    "avg_bits_err_output": 0.35032312031259016,
    "avg_bits_err_improve": 61.49293178742083,
    "time": 13576.519775390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.081361275863955,
    "avg_bits_err_output": 21.802345271993758,
    "avg_bits_err_improve": 12.279016003870197,
    "time": 26908.0654296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -2.6e-198) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* (* a c) 4.0) (- b (sqrt (fma a (* c -4.0) (* b b))))) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)))",
    "output_parens": 50,
    "avg_bits_err_input": 33.861446536139766,
    "avg_bits_err_output": 15.668616974622022,
    "avg_bits_err_improve": 18.192829561517744,
    "time": 25444.890869140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2483.475830078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.144719079365316,
    "avg_bits_err_output": 0.00875,
    "avg_bits_err_improve": 40.13596907936532,
    "time": 6469.149169921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- (* y x) (- (* x (+ y x)) (* y y))) (- (fma y y (* x x))))",
    "output_parens": 10,
    "avg_bits_err_input": 20.2896927656655,
    "avg_bits_err_output": 20.29523545042845,
    "avg_bits_err_improve": -0.0055426847629505005,
    "time": 6230.718994140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6723747271657574,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6723747271657574,
    "time": 7224.177490234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.039625,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0.039375,
    "time": 5856.9853515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.022615601562950727,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.012240601562950726,
    "time": 4733.925048828125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.015625,
    "avg_bits_err_output": 0.01375,
    "avg_bits_err_improve": 0.001875,
    "time": 2590.094970703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 1807.927978515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ c (+ a b)) (+ e d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.38537537656727777,
    "avg_bits_err_output": 0.263625,
    "avg_bits_err_improve": 0.12175037656727777,
    "time": 6857.2333984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (* (cos (+ x x)) 0.5) 0.0) (/ (- (* 0.5 (* (cos (+ x x)) 0.5)) (* (* (cos (+ x x)) 0.5) (* (cos (+ x x)) 0.5))) (* (cos (+ x x)) 0.5)) (- 0.5 (* (cos (+ x x)) 0.5))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 34,
    "avg_bits_err_input": 30.096737201696023,
    "avg_bits_err_output": 30.049321327444943,
    "avg_bits_err_improve": 0.047415874251079515,
    "time": 12640.799560546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.78045917770206,
    "avg_bits_err_output": 0.2890943609377704,
    "avg_bits_err_improve": 24.49136481676429,
    "time": 13186.6220703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (tan (- x))) 0.0) (/ (fma (/ x (tan x)) (/ x (tan (- x))) (- (* (/ x (tan (- x))) (/ (sin x) (tan x))))) (log (+ 1.0 (expm1 (/ x (- (tan x))))))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 30,
    "avg_bits_err_input": 30.113208890120433,
    "avg_bits_err_output": 30.12547249261424,
    "avg_bits_err_improve": -0.012263602493806758,
    "time": 33919.347412109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006698120312590144,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.006198120312590144,
    "time": 4960.547607421875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n))))",
    "output_parens": 22,
    "avg_bits_err_input": 47.41160314990244,
    "avg_bits_err_output": 13.656201745395654,
    "avg_bits_err_improve": 33.755401404506785,
    "time": 24825.564697265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.908789764300582,
    "avg_bits_err_output": 23.77153573701925,
    "avg_bits_err_improve": 3.137254027281333,
    "time": 13087.390380859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 5e+269) (/ (fma c b (* a (- d))) (+ (* c c) (* d d))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.270625993114052,
    "avg_bits_err_output": 23.196952947705157,
    "avg_bits_err_improve": 3.0736730454088956,
    "time": 16086.8076171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(/ (- 1.0 (- ux (* ux maxCos))) 1.0)",
    "output_parens": 4,
    "avg_bits_err_input": 0.035625,
    "avg_bits_err_output": 0.02137394680449909,
    "avg_bits_err_improve": 0.014251053195500907,
    "time": 5553.993896484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- (+ 1.0 (- ux (fma ux maxCos 1.0))) (+ (* (+ maxCos -1.0) (* ux (* ux maxCos))) (* (+ maxCos -1.0) (* ux (- 1.0 ux)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.462975043700663,
    "avg_bits_err_output": 11.220429754413322,
    "avg_bits_err_improve": 2.2425452892873405,
    "time": 31969.391357421875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (* (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) (+ ux -1.0))) 0.0) (/ (/ (* (* (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) (+ ux -1.0))) (+ (* (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) ux)) (+ (fma ux maxCos (- 1.0 ux)) -1.0))) (+ (- ux (* ux maxCos)) -1.0)) (fma ux maxCos (- 1.0 ux))) (- 1.0 (* (fma ux maxCos (- 1.0 ux)) (- (* ux maxCos) (+ ux -1.0)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 13.507328469036898,
    "avg_bits_err_output": 11.184765810102048,
    "avg_bits_err_improve": 2.3225626589348494,
    "time": 32466.20703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (if (!= (* uy (* 2.0 PI)) 0.0) (/ 1.0 (/ 0.5 (* PI uy))) (* uy (* 2.0 PI)))) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output_parens": 41,
    "avg_bits_err_input": 0.328177297868859,
    "avg_bits_err_output": 0.3319652384062018,
    "avg_bits_err_improve": -0.003787940537342771,
    "time": 42573.536865234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (cos (atan (* (/ alphay alphax) (/ (tan (* PI (+ (* 2.0 u1) 0.5))) 1.0)))) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.21051020992672873,
    "avg_bits_err_output": 0.21073612929198593,
    "avg_bits_err_improve": -0.00022591936525720446,
    "time": 39930.576904296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(log1p (expm1 (* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5418959333010298,
    "avg_bits_err_output": 0.5428850979091258,
    "avg_bits_err_improve": -0.0009891646080959493,
    "time": 19131.45751953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(- (sqrt (/ u1 (- 1.0 u1))) (- (sqrt (/ u1 (- 1.0 u1))) (* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.31916516594789673,
    "avg_bits_err_output": 0.32851060427288886,
    "avg_bits_err_improve": -0.009345438324992128,
    "time": 20785.735595703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (fma u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.3321276630050384,
    "avg_bits_err_output": 0.3319295426924482,
    "avg_bits_err_improve": 0.0001981203125901998,
    "time": 52896.97412109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.058452828504809935,
    "avg_bits_err_output": 0.058452828504809935,
    "avg_bits_err_improve": 0,
    "time": 14049.1220703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (* (/ (fabs x) s) -0.5)) (/ (/ (exp (* (/ (fabs x) s) -0.5)) s) (pow (+ (exp (/ (fabs x) (- s))) 1.0) 2.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.15271362191927917,
    "avg_bits_err_output": 0.10993979817058831,
    "avg_bits_err_improve": 0.04277382374869086,
    "time": 21861.78369140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* PI (* tau x))) (* PI (* tau x))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6767807164693598,
    "avg_bits_err_output": 0.6802871005567529,
    "avg_bits_err_improve": -0.003506384087393122,
    "time": 23522.84228515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.167893458786857,
    "avg_bits_err_output": 0.167893458786857,
    "avg_bits_err_improve": 0,
    "time": 20344.799072265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.6794854329685642,
    "avg_bits_err_output": 2.6753367485923016,
    "avg_bits_err_improve": 0.00414868437626259,
    "time": 30884.434814453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ (/ cosTheta_i (sinh (/ 1.0 v))) (exp (* sinTheta_i (/ sinTheta_O v)))) (* (/ 0.5 v) (/ 1.0 v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4523562980781001,
    "avg_bits_err_output": 0.3488104934160548,
    "avg_bits_err_improve": 0.10354580466204533,
    "time": 26542.9189453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (if (!= 0.6931 0.0) (+ 0.6931 (/ (* 0.6931 (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (log (/ 0.5 v)))) 0.6931)) (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (+ 0.6931 (log (/ 0.5 v))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.09521814623317311,
    "avg_bits_err_output": 0.09967892366341574,
    "avg_bits_err_improve": -0.004460777430242632,
    "time": 26373.895263671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (/ (/ (- 1.0 (* alpha alpha)) (log (* alpha alpha))) PI)) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4769048987141803,
    "avg_bits_err_output": 0.4749255296569761,
    "avg_bits_err_improve": 0.0019793690572041944,
    "time": 23896.329833984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(+ (fma (- (- s)) (fma 3.0 (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) -3.0) (* (- s) (fma 3.0 (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) -3.0))) (* (* 3.0 s) (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)))))",
    "output_parens": 19,
    "avg_bits_err_input": 1.3117305707750366,
    "avg_bits_err_output": 1.2957188326505709,
    "avg_bits_err_improve": 0.01601173812446577,
    "time": 25805.26318359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (log1p (if (!= (- 1.0 (/ -1.0 (fma 4.0 u -1.0))) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ 1.0 (/ -1.0 (fma 4.0 u -1.0))) 0.0) (/ (if (!= (+ 1.0 (/ 1.0 (pow (fma 4.0 u -1.0) 2.0))) 0.0) (/ (- 1.0 (/ 1.0 (pow (fma 4.0 u -1.0) 4.0))) (+ -1.0 (/ -1.0 (pow (fma 4.0 u -1.0) 2.0)))) (expm1 (* (log (fma 4.0 u -1.0)) -2.0))) (+ 1.0 (/ -1.0 (fma 4.0 u -1.0)))) (+ -1.0 (/ -1.0 (fma 4.0 u -1.0)))))) (+ (/ -1.0 (fma 4.0 u -1.0)) -1.0))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.23917750314314,
    "avg_bits_err_output": 11.521995227740998,
    "avg_bits_err_improve": 0.7171822754021413,
    "time": 26582.31640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (* 2.0 PI)))) (* 0.75 (/ (* (exp (/ (/ r -6.0) s)) (exp (if (!= (/ r (* s -12.0)) 0.0) (/ (/ (* r r) (* -6.0 s)) r) (/ r (* -6.0 s))))) (* s (* PI 6.0))))) r)",
    "output_parens": 28,
    "avg_bits_err_input": 0.12330796069031025,
    "avg_bits_err_output": 0.12163810861528883,
    "avg_bits_err_improve": 0.001669852075021419,
    "time": 29908.33447265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9352968279169397,
    "avg_bits_err_output": 0.7495218394544342,
    "avg_bits_err_improve": 0.1857749884625055,
    "time": 26496.957275390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (pow (- (- 1.0 cosTheta) cosTheta) 0.5) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6754996208738828,
    "avg_bits_err_output": 0.47456252292949336,
    "avg_bits_err_improve": 0.20093709794438946,
    "time": 24323.410888671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (- (log1p (- u1))) 0.5) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.541353183554238,
    "avg_bits_err_output": 0.5276212806749014,
    "avg_bits_err_improve": 13.013731902879336,
    "time": 21492.95703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (sqrt (- (log1p (- u1)))) (- (sqrt (- (log1p (- u1)))) (* (sqrt (- (log1p (- u1)))) (cos (* u2 (* PI -2.0))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.585095345600042,
    "avg_bits_err_output": 0.3053670352532034,
    "avg_bits_err_improve": 13.279728310346838,
    "time": 20583.139404296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.020426091044692,
    "avg_bits_err_output": 0.3148656015629508,
    "avg_bits_err_improve": 13.70556048948174,
    "time": 16046.70361328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* -2.0 (/ (log1p (- u0)) (* (- (- (/ cos2phi (* alphax alphax))) (/ (/ sin2phi alphay) alphay)) -2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 12.522760797044796,
    "avg_bits_err_output": 0.5701791902234876,
    "avg_bits_err_improve": 11.952581606821308,
    "time": 15802.024658203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 17.292468979213908,
    "avg_bits_err_output": 12.822115418840736,
    "avg_bits_err_improve": 4.470353560373171,
    "time": 21039.308837890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.216625203512582,
    "avg_bits_err_output": 0.15286560156295073,
    "avg_bits_err_improve": 0.06375960194963126,
    "time": 16593.342041015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.636061481042615,
    "avg_bits_err_output": 10.349249890681094,
    "avg_bits_err_improve": 3.2868115903615216,
    "time": 23183.94921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* PI (* (/ f -4.0) 2.0)))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0))",
    "output_parens": 32,
    "avg_bits_err_input": 61.47469298687306,
    "avg_bits_err_output": 2.0521394017999848,
    "avg_bits_err_improve": 59.422553585073075,
    "time": 44136.044677734375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -2.6e-6) (* (/ (sqrt 2.0) (sqrt (fma l l (fma l (- (- l) l) (* (+ x 1.0) (/ (fma l l (* t (* t 2.0))) (+ x -1.0))))))) t) (if (<= t 5.6e+15) (/ (* (sqrt 2.0) t) (sqrt (fma l (- l) (fma l (fma l -1.0 l) (/ (* (+ x 1.0) (fma 2.0 (* t t) (* l l))) (+ x -1.0)))))) (if (!= (sqrt 2.0) 0.0) (/ (- (* (sqrt 2.0) (* (sqrt 2.0) (+ 1.0 (/ t (sqrt (fma (/ (+ x 1.0) (+ x -1.0)) (fma 2.0 (* t t) (* l l)) (* l (- l)))))))) 2.0) (sqrt 2.0)) (/ (* (sqrt 2.0) t) (sqrt (fma (/ (+ x 1.0) (+ x -1.0)) (fma 2.0 (* t t) (* l l)) (* l (- l))))))))",
    "output_parens": 69,
    "avg_bits_err_input": 43.17700125312591,
    "avg_bits_err_output": 39.40287157169425,
    "avg_bits_err_improve": 3.77412968143166,
    "time": 29433.22802734375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin ky) (/ (sin th) (hypot (sin ky) (sin kx))))",
    "output_parens": 7,
    "avg_bits_err_input": 4.067728561313607,
    "avg_bits_err_output": 0.2696372187554085,
    "avg_bits_err_improve": 3.7980913425581986,
    "time": 29868.851806640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.96675,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 0.96,
    "time": 19673.45166015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 9.789597222722069,
    "avg_bits_err_output": 9.789597222722069,
    "avg_bits_err_improve": 0,
    "time": 11993.001953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -1.45e-182) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (sqrt (fabs (* n U)))) (if (<= n -2e-311) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= n 2.1e-75) (* (sqrt (* (- (fma 2.0 (* l (/ l Om)) (* (pow (/ l Om) 2.0) (* (- U U*) n))) t) (* U -2.0))) (sqrt n)) (if (<= n 2.7e+101) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (sqrt (fabs (* n U)))) (* (sqrt (* 2.0 (* U (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt n))))))",
    "output_parens": 83,
    "avg_bits_err_input": 34.475201905767605,
    "avg_bits_err_output": 22.321243020995418,
    "avg_bits_err_improve": 12.153958884772187,
    "time": 42480.868408203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -2e+108) (/ 2.0 (* (* (tan k) (/ (sin k) l)) (* (/ k t) (* (/ k t) (/ (pow t 3.0) l))))) (if (<= t 5e-51) (/ 2.0 (* (* (/ (tan k) (* t l)) (/ (* (/ (sin k) l) (* k (pow t 3.0))) t)) k)) (/ 2.0 (* (/ k t) (/ (* (/ k t) (* (tan k) (* (sin k) (/ (pow t 3.0) l)))) l)))))",
    "output_parens": 40,
    "avg_bits_err_input": 47.61331606667237,
    "avg_bits_err_output": 31.72335261252925,
    "avg_bits_err_improve": 15.889963454143118,
    "time": 46551.2626953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (pow t 3.0) (/ (sin k) l)) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (tan k) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.67543674537656,
    "avg_bits_err_output": 27.089800333150745,
    "avg_bits_err_improve": 5.5856364122258135,
    "time": 20074.583984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* (cos th) (* a2 a2)) (* (cos th) (* a1 a1))) (sqrt 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.49869022814465336,
    "avg_bits_err_output": 0.45649417501586675,
    "avg_bits_err_improve": 0.042196053128786604,
    "time": 22997.805419921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (/ 1.0 (sqrt k)) (* (pow (* 2.0 n) (+ 0.5 (* k -0.5))) (exp (* (fma k -0.5 0.5) (log PI)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.49524191574408905,
    "avg_bits_err_output": 0.5686751584025083,
    "avg_bits_err_improve": -0.07343324265841922,
    "time": 21316.8779296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (- (exp (+ l l)) (exp (* l -2.0))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 25,
    "avg_bits_err_input": 17.094342382592135,
    "avg_bits_err_output": 17.0729769739681,
    "avg_bits_err_improve": 0.021365408624035354,
    "time": 26996.289306640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (- (* (cos (+ (- (* K (/ (+ m n) 2.0)) M) 1.0)) (cos -1.0)) (* (sin (+ (- (* K (/ (+ m n) 2.0)) M) 1.0)) (sin -1.0))) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n))))))",
    "output_parens": 31,
    "avg_bits_err_input": 14.829365840309114,
    "avg_bits_err_output": 14.794066920188481,
    "avg_bits_err_improve": 0.03529892012063307,
    "time": 22205.31591796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.953490601562955,
    "avg_bits_err_output": 17.953490601562955,
    "avg_bits_err_improve": 0,
    "time": 39580.82861328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= M -1.05e+20) (* w0 (sqrt (- 1.0 (* M (* (/ D (* 2.0 d)) (/ (* M (* (/ D (+ d d)) h)) l)))))) (* w0 (sqrt (- 1.0 (/ (/ (* (* (/ (* D M) (* 2.0 d)) h) (* M (/ D 2.0))) l) d)))))",
    "output_parens": 26,
    "avg_bits_err_input": 14.144391989015354,
    "avg_bits_err_output": 8.708634876312681,
    "avg_bits_err_improve": 5.435757112702673,
    "time": 27675.2021484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+214) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) -2e-161) (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (/ 1.0 (/ 1.0 (sqrt (/ A (* l V))))) (sqrt (/ A (* l V))))) (if (<= (* V l) 5e-313) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (* c0 (* (sqrt (/ (/ 2.0 V) (+ l l))) (sqrt A))))))",
    "output_parens": 46,
    "avg_bits_err_input": 19.57038228438656,
    "avg_bits_err_output": 9.498144870841848,
    "avg_bits_err_improve": 10.072237413544713,
    "time": 23815.452880859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= c0 -2e-79) (/ (/ (* c0 (if (!= (- (* d (* d (/ (/ (/ c0 D) w) (* D h)))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) w) (* D h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (/ (* d (/ (* c0 (/ d D)) w)) (* D h)) (sqrt (- (pow (/ (* d (/ (* c0 (/ d D)) w)) (* D h)) 2.0) (* M M)))))) (+ (* d (/ (/ (* c0 d) (* D w)) (* D h))) (sqrt (- (pow (* d (/ (/ (* c0 d) (* D w)) (* D h))) 2.0) (* M M)))))) w) 2.0) (if (<= c0 1.1e+144) (* (/ (/ c0 w) 2.0) (if (!= (- (* c0 (/ (* d (/ (/ (/ d D) w) h)) D)) (sqrt (- (pow (* c0 (/ (* d (/ (/ (/ d D) w) h)) D)) 2.0) (* M M)))) 0.0) (* M (/ M (- (* c0 (/ (* d (/ (/ (/ d D) w) h)) D)) (sqrt (- (pow (* c0 (/ (* d (/ (/ (/ d D) w) h)) D)) 2.0) (* M M)))))) (fma d (* d (/ c0 (* D (* D (* w h))))) (sqrt (- (pow (* c0 (/ (* d (/ (/ (/ d D) w) h)) D)) 2.0) (* M M)))))) (/ (/ (* c0 (if (!= (- (* d (* d (/ (/ (/ c0 D) w) (* D h)))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) w) (* D h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (/ (* (* d (/ c0 (* D w))) d) (* D h)) (sqrt (- (pow (/ (* (* d (/ c0 (* D w))) d) (* D h)) 2.0) (* M M)))))) (fma d (* d (/ (/ (/ c0 D) w) (* D h))) (sqrt (- (pow (* d (* d (/ (/ (/ c0 D) w) (* D h)))) 2.0) (* M M)))))) w) 2.0)))",
    "output_parens": 176,
    "avg_bits_err_input": 59.65366311255262,
    "avg_bits_err_output": 30.474248393508045,
    "avg_bits_err_improve": 29.179414719044576,
    "time": 60035.399658203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= l 4.8e-240) (* (* (if (!= (sqrt (/ d h)) 0.0) (/ (/ d h) (sqrt (/ d h))) (sqrt (/ d h))) (pow (/ d l) 0.5)) (- 1.0 (* (* M (/ D (+ d d))) (/ (* (/ (* M D) (+ d d)) (* 0.5 h)) l)))) (if (<= l 1.7e-80) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- 1.0 (/ (+ (* (* D (* (/ M (+ d d)) (/ (* D M) (* (+ d d) 2.0)))) h) (* (* D (* (/ M (+ d d)) (/ (* D M) (* (+ d d) 2.0)))) h)) (+ l l)))) (if (<= l 1.26e+160) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* M (/ D (+ d d))) (/ (* (/ (* M D) (+ d d)) (* 0.5 h)) l)))) (if (<= l 5.2e+211) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- 1.0 (/ 0.0 (+ l l)))) (* (* (if (!= (sqrt (/ d h)) 0.0) (/ (/ d h) (sqrt (/ d h))) (sqrt (/ d h))) (pow (/ d l) 0.5)) (- 1.0 (* (* M (/ D (+ d d))) (* (* M (/ D (+ d d))) (* 0.5 (/ h l))))))))))",
    "output_parens": 112,
    "avg_bits_err_input": 26.1102377170222,
    "avg_bits_err_output": 24.411286596917527,
    "avg_bits_err_improve": 1.6989511201046739,
    "time": 62544.5244140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (log1p (expm1 (/ 0.25 (fma x x 1.0))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 15.198639124086169,
    "avg_bits_err_output": 14.69563384611209,
    "avg_bits_err_improve": 0.5030052779740792,
    "time": 24936.822509765625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 4.0 (fma v v -1.0)) (- (* 3.0 PI))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.9842712406251803,
    "avg_bits_err_output": 0.014834962500721157,
    "avg_bits_err_improve": 0.9694362781244592,
    "time": 6274.598388671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (- (* (* v v) 10.0) 2.0) (- (* (sqrt (- 2.0 (* (* v v) 6.0))) (* (- 1.0 (* v v)) PI)))) (+ t t))",
    "output_parens": 15,
    "avg_bits_err_input": 0.4232660806086218,
    "avg_bits_err_output": 0.12414861995949544,
    "avg_bits_err_improve": 0.29911746064912637,
    "time": 27746.89501953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (expm1 (log1p (sqrt (+ 1.0 (* (* v v) -3.0))))) (* (/ (sqrt 2.0) 4.0) (- 1.0 (* v v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.011240601562950724,
    "avg_bits_err_output": 0.016419925001442317,
    "avg_bits_err_improve": -0.005179323438491593,
    "time": 8304.526611328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5689749779216494,
    "avg_bits_err_output": 0.5689749779216494,
    "avg_bits_err_improve": 0,
    "time": 10301.302001953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (/ (- (pow k m)) (- -1.0 (* k (+ k 10.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 2.057504563148923,
    "avg_bits_err_output": 2.049762911718058,
    "avg_bits_err_improve": 0.007741651430865026,
    "time": 9069.722900390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (expm1 (log1p (exp (/ (- EDonor (- Ec (+ Vef mu))) KbT)))))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.024045067776892925,
    "avg_bits_err_output": 0.024276459853653613,
    "avg_bits_err_improve": -0.0002313920767606885,
    "time": 11630.10302734375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow b 4.0) (* (* a a) (+ (* b b) (+ (* b b) (* a a))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18088233125324507,
    "avg_bits_err_output": 0.09627368437626205,
    "avg_bits_err_improve": 0.08460864687698302,
    "time": 8683.62353515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (fma (* b b) (fma a a (* b b)) (* a (fma (* a a) a (* a (* b b))))) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 28,
    "avg_bits_err_input": 0.1909003037584943,
    "avg_bits_err_output": 0.15906686347013177,
    "avg_bits_err_improve": 0.03183344028836252,
    "time": 20758.7666015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (fma (* a a) (fma b b (* a a)) (* b (+ (* b (* b b)) (* b (* a a))))) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 28,
    "avg_bits_err_input": 0.18768732722117645,
    "avg_bits_err_output": 0.15627680065678348,
    "avg_bits_err_improve": 0.03141052656439297,
    "time": 16178.871826171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.275076765494285,
    "avg_bits_err_output": 13.275076765494285,
    "avg_bits_err_improve": 0,
    "time": 17298.283935546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.51736058791459,
    "avg_bits_err_output": 0.03325,
    "avg_bits_err_improve": 40.484110587914586,
    "time": 5289.0107421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (tan x)))",
    "output_parens": 5,
    "avg_bits_err_input": 30.93712721710075,
    "avg_bits_err_output": 30.93712721710075,
    "avg_bits_err_improve": 0,
    "time": 16024.931396484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.32e+154) (/ (- b_2) a) (if (<= b_2 4.5e+148) (/ (if (!= (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) 0.0) (* a (/ (- c) (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))))) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a) (/ (if (!= (- b_2) 0.0) (fma a (/ c (* b_2 -2.0)) (* c (/ (/ a b_2) -2.0))) (- b_2)) a)))",
    "output_parens": 38,
    "avg_bits_err_input": 34.61760259231339,
    "avg_bits_err_output": 19.728977361360098,
    "avg_bits_err_improve": 14.888625230953291,
    "time": 19898.412109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 35.00094369766507,
    "avg_bits_err_output": 20.56919597993417,
    "avg_bits_err_improve": 14.4317477177309,
    "time": 17144.5380859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.632038646688006,
    "avg_bits_err_output": 30.86518080829755,
    "avg_bits_err_improve": 0.7668578383904574,
    "time": 18581.678955078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 33.07206991980063,
    "avg_bits_err_output": 11.205238327047542,
    "avg_bits_err_improve": 21.86683159275309,
    "time": 28505.471923828125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (- (+ (expm1 (- (log1p N) (log N))) -1.0) -1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 29.804529152916196,
    "avg_bits_err_output": 29.813746443810672,
    "avg_bits_err_improve": -0.009217290894476093,
    "time": 13728.2890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (- (/ (+ (/ -1.0 x) (/ (/ x x) (+ 1.0 x))) 2.0) (/ (if (!= (/ -1.0 (/ (+ x 1.0) x)) 0.0) (/ (- (pow (/ -1.0 (/ (+ x 1.0) x)) 2.0) (/ 1.0 (/ (+ x 1.0) x))) (/ -1.0 (/ (+ x 1.0) x))) (+ 1.0 (/ -1.0 (/ (+ x 1.0) x)))) (+ x x))) 0.0)",
    "output_parens": 31,
    "avg_bits_err_input": 14.2273226190291,
    "avg_bits_err_output": 14.218889143867536,
    "avg_bits_err_improve": 0.008433475161563564,
    "time": 18736.879638671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))",
    "output_parens": 8,
    "avg_bits_err_input": 39.638216277975815,
    "avg_bits_err_output": 6.280186504141579,
    "avg_bits_err_improve": 33.35802977383423,
    "time": 24473.621826171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(exp (* 1.0 (log1p (- (cbrt (+ x 1.0)) (- (cbrt x) -1.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 30.188358436767803,
    "avg_bits_err_output": 29.905511150232197,
    "avg_bits_err_improve": 0.2828472865356062,
    "time": 14453.48876953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (log1p (- (+ (expm1 (- 1.0 (cos x))) -1.0) -1.0)) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 30.579054011345196,
    "avg_bits_err_output": 30.60978049829135,
    "avg_bits_err_improve": -0.030726486946154097,
    "time": 23927.22119140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) (- INFINITY)) (/ (if (!= b 0.0) (* (* a (/ c (+ b b))) -8.0) (- b)) (* a 2.0)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) -1e-264) (+ (/ (sqrt (+ (* b b) (* a (* c -4.0)))) (* a 2.0)) (/ b (* a -2.0))) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) 5e-211) (/ (if (!= (+ b 0.0) 0.0) (* a (* c (/ 4.0 (- (- (sqrt (fma a (* c -4.0) (* b b)))) b)))) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) 1e+240) (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) (/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* a (* c (/ 4.0 (- 0.0 b)))) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))))))",
    "output_parens": 110,
    "avg_bits_err_input": 34.93445466301425,
    "avg_bits_err_output": 22.823267497489535,
    "avg_bits_err_improve": 12.111187165524715,
    "time": 28639.483154296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (* a -4.0) (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b))) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.44126964576185,
    "avg_bits_err_output": 22.57237898694939,
    "avg_bits_err_improve": 11.868890658812461,
    "time": 25611.548583984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.38891185717953,
    "avg_bits_err_output": 0.02260620312590145,
    "avg_bits_err_improve": 61.366305654053626,
    "time": 19178.483154296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(expm1 (exp (* 1.0 (- (exp (log1p (log (log (fma n (- (log1p n) (log n)) (log1p n)))))) 1.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 62.99888327154557,
    "avg_bits_err_output": 44.21216755161363,
    "avg_bits_err_improve": 18.78671571993194,
    "time": 17131.96826171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ eps (- -1.0 eps)) (log (+ 1.0 (expm1 (+ 1.0 (/ -1.0 (+ eps 1.0))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.35341066314982,
    "avg_bits_err_output": 50.35463636122037,
    "avg_bits_err_improve": 7.998774301929451,
    "time": 16237.960693359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ (+ (/ 0.5 x) (/ -0.5 (tan x))) (log (+ 1.0 (expm1 (/ (/ (+ -1.0 (/ (tan x) x)) 2.0) (tan x))))))",
    "output_parens": 14,
    "avg_bits_err_input": 59.79855468872009,
    "avg_bits_err_output": 59.789759548500456,
    "avg_bits_err_improve": 0.008795140219632458,
    "time": 29383.400634765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* eps (/ (expm1 (* eps (+ a b))) (expm1 (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.394072675873275,
    "avg_bits_err_output": 29.27607945053609,
    "avg_bits_err_improve": 31.117993225337184,
    "time": 28037.56005859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 40.941937859467174,
    "avg_bits_err_output": 0.4216156015629508,
    "avg_bits_err_improve": 40.520322257904226,
    "time": 5165.872314453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.52065401188685,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 58.51965401188685,
    "time": 3683.210205078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 28.826777816347242,
    "avg_bits_err_output": 0.017604374069748012,
    "avg_bits_err_improve": 28.809173442277494,
    "time": 4179.94921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (exp x) 2.0) 0.0) (if (!= (/ (- (exp x) 2.0) (* (exp x) (- (exp x) 2.0))) 0.0) (/ (fma (/ (- (exp x) 2.0) (* (exp x) (- (exp x) 2.0))) (/ (- (exp x) 2.0) (* (exp x) (- (exp x) 2.0))) (* (/ (- (exp x) 2.0) (* (exp x) (- (exp x) 2.0))) (/ 1.0 (/ 1.0 (- (exp x) 2.0))))) (/ (- (exp x) 2.0) (* (exp x) (- (exp x) 2.0)))) (/ (+ (pow (- 2.0 (exp x)) 2.0) (/ (- (exp x) 2.0) (exp x))) (- (exp x) 2.0))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 64,
    "avg_bits_err_input": 29.476469818524706,
    "avg_bits_err_output": 28.95002305586634,
    "avg_bits_err_improve": 0.5264467626583667,
    "time": 24275.520751953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ -1.0 (+ x -1.0)) 0.0) (/ (if (!= (/ (/ -1.0 (+ x -1.0)) (+ 1.0 x)) 0.0) (/ (/ (- (/ (/ 1.0 (fma x x -1.0)) (+ -1.0 x)) (* (/ -1.0 (+ -1.0 x)) (/ (+ (/ -2.0 x) (/ 1.0 (+ -1.0 x))) (+ -1.0 x)))) (+ x 1.0)) (/ (/ -1.0 (+ x -1.0)) (+ 1.0 x))) (/ (+ (/ -1.0 (+ x -1.0)) (- (/ 2.0 x) (/ 1.0 (+ 1.0 x)))) (+ x -1.0))) (/ -1.0 (+ x -1.0))) (- (/ 1.0 (+ 1.0 x)) (+ (/ -1.0 (+ x -1.0)) (/ 2.0 x))))",
    "output_parens": 50,
    "avg_bits_err_input": 9.453149699537779,
    "avg_bits_err_output": 9.462268481953986,
    "avg_bits_err_improve": -0.009118782416207338,
    "time": 25318.251708984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (tan x))",
    "output_parens": 4,
    "avg_bits_err_input": 36.94908442066489,
    "avg_bits_err_output": 36.94908442066489,
    "avg_bits_err_improve": 0,
    "time": 20322.400390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.873995510961144,
    "avg_bits_err_output": 0.16583740625180282,
    "avg_bits_err_improve": 29.70815810470934,
    "time": 12794.991455078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 36.83406834362443,
    "avg_bits_err_output": 21.78565574936775,
    "avg_bits_err_improve": 15.048412594256682,
    "time": 17622.84228515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (!= (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x)))) 0.0) (/ (+ (/ 1.0 x) (/ -1.0 (+ 1.0 x))) (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ 1.0 x))))) (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (+ 1.0 x)))))",
    "output_parens": 25,
    "avg_bits_err_input": 19.60310164925825,
    "avg_bits_err_output": 19.660300187336126,
    "avg_bits_err_improve": -0.057198538077877004,
    "time": 15480.965576171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 15.286482994686681,
    "avg_bits_err_output": 15.286482994686681,
    "avg_bits_err_improve": 0,
    "time": 3699.57958984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.306553821776255,
    "avg_bits_err_output": 1.2552371300526501,
    "avg_bits_err_improve": 28.051316691723606,
    "time": 24984.3359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (- m (* m m)) v) (+ (- 1.0 m) (* (/ m v) (- m (* m m)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.07549304531403245,
    "avg_bits_err_output": 0.07174304531403246,
    "avg_bits_err_improve": 0.0037499999999999895,
    "time": 11556.283203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b (- a)) (* a b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.49007435411809,
    "avg_bits_err_output": 0.3038941734413762,
    "avg_bits_err_improve": 16.186180180676715,
    "time": 8429.34912109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (* angle -0.005555555555555556)) 0.0) (/ 1.0 (/ 180.0 (* PI angle))) (* PI (* angle 0.005555555555555556))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.819323155759186,
    "avg_bits_err_output": 20.820399960443417,
    "avg_bits_err_improve": -0.001076804684231547,
    "time": 34243.890380859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (<= (- (pow b 2.0) (pow a 2.0)) (- INFINITY)) (* (if (!= (pow b 2.0) 0.0) (/ (* (* 2.0 (sin (* PI (/ angle 180.0)))) (- (pow b 4.0) (pow (* b a) 2.0))) (pow b 2.0)) (* (- (pow b 2.0) (pow a 2.0)) (* 2.0 (sin (* PI (/ angle 180.0)))))) (cos (* PI (/ angle 180.0)))) (if (<= (- (pow b 2.0) (pow a 2.0)) 2e+307) (* (* (cos (* PI (/ angle -180.0))) (* 2.0 (- (pow b 2.0) (pow a 2.0)))) (sin (/ (* PI angle) 180.0))) (* (if (!= (pow a 2.0) 0.0) (/ (- (* (- (* 2.0 (sin (* PI (/ angle 180.0))))) (- (pow a 4.0) (pow (* b a) 2.0))) 0.0) (pow a 2.0)) (* 2.0 (* (- (pow b 2.0) (pow a 2.0)) (sin (* PI (/ angle 180.0)))))) (cos (* PI (/ angle 180.0))))))",
    "output_parens": 77,
    "avg_bits_err_input": 31.789190770607956,
    "avg_bits_err_output": 29.775648659240886,
    "avg_bits_err_improve": 2.0135421113670695,
    "time": 32732.84423828125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (if (!= (* angle (* PI 0.005555555555555556)) 0.0) (/ -1.0 (/ -180.0 (* angle PI))) (* angle (* PI 0.005555555555555556))))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.727941041465197,
    "avg_bits_err_output": 20.750463282668573,
    "avg_bits_err_improve": -0.02252224120337587,
    "time": 36873.834228515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1719505640636719,
    "avg_bits_err_output": 0.1719505640636719,
    "avg_bits_err_improve": 0,
    "time": 19957.87060546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (+ (/ 8.0 (/ 8.0 (pow (tan x) 2.0))) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.3035934497084736,
    "avg_bits_err_output": 0.32143212621580963,
    "avg_bits_err_improve": -0.01783867650733606,
    "time": 20255.99365234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1374174812503606,
    "avg_bits_err_output": 0.1374174812503606,
    "avg_bits_err_improve": 0,
    "time": 16513.438232421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos (- lambda2 lambda1))) (cos phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 15.907197124315086,
    "avg_bits_err_output": 15.905628881385553,
    "avg_bits_err_improve": 0.0015682429295331701,
    "time": 36198.282470703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.231235217471315,
    "avg_bits_err_output": 0.17311597813022825,
    "avg_bits_err_improve": 52.05811923934109,
    "time": 29253.604248046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.56767270190151,
    "avg_bits_err_output": 0.33420376094930904,
    "avg_bits_err_improve": 28.233468940952203,
    "time": 28142.462890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (fma b b (* (* c a) 4.0)) 0.0) (/ (- (pow b 4.0) (* (pow (* c a) 2.0) 16.0)) (fma b b (* (* c a) 4.0))) (fma b b (* a (* c -4.0)))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 37,
    "avg_bits_err_input": 43.57419296955966,
    "avg_bits_err_output": 0.24895827188419428,
    "avg_bits_err_improve": 43.32523469767547,
    "time": 26242.358154296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c 1.7e-271) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (pow (fma b b (* a (* c -4.0))) 0.5))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)) (if (<= c 200.0) (if (!= (/ (- (- (sqrt (fma b b (* a (* c -4.0))))) b) (* a 2.0)) 0.0) (- (/ (- (* a (/ (* c -4.0) (* a 2.0)))) (- (- (sqrt (fma b b (* a (* c -4.0))))) b)) 0.0) (/ (/ (- b (sqrt (fma b b (* a (* c -4.0))))) -2.0) a)) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (pow (fma b b (* a (* c -4.0))) 0.5))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))))",
    "output_parens": 82,
    "avg_bits_err_input": 34.93790387716921,
    "avg_bits_err_output": 23.45100418162638,
    "avg_bits_err_improve": 11.486899695542832,
    "time": 25411.673828125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (log1p (expm1 (+ (* (cos (- lambda2 lambda1)) (cos phi2)) (cos phi1))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.8057784476292126,
    "avg_bits_err_output": 0.8086403604568793,
    "avg_bits_err_improve": -0.0028619128276666794,
    "time": 27322.635009765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (/ (+ -1.0 (/ 4.0 (+ (exp (* x -4.0)) (+ 1.0 (* (exp (* -2.0 x)) 2.0))))) (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 27,
    "avg_bits_err_input": 29.634759879073194,
    "avg_bits_err_output": 29.600290173226863,
    "avg_bits_err_improve": 0.034469705846330356,
    "time": 22827.357666015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= x -1.0) (+ (/ -2.0 (- -1.0 (exp (* x -2.0)))) -1.0) (* (expm1 (* x -2.0)) (/ 1.0 (- -1.0 (exp (* x -2.0))))))",
    "output_parens": 14,
    "avg_bits_err_input": 58.27129468449465,
    "avg_bits_err_output": 0.024084962500721157,
    "avg_bits_err_improve": 58.247209721993926,
    "time": 19653.12646484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x 2.0)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 57.984881001746615,
    "avg_bits_err_output": 0.05244812031259015,
    "avg_bits_err_improve": 57.932432881434025,
    "time": 11274.021728515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(expm1 (log1p (/ 2.0 (+ (exp x) (exp (- x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.008042481250360577,
    "avg_bits_err_output": 0.00955432343849159,
    "avg_bits_err_improve": -0.0015118421881310136,
    "time": 3536.3583984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.009,
    "avg_bits_err_output": 32.009,
    "avg_bits_err_improve": 0,
    "time": 5447.5712890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(/ (log1p (- (if (!= (+ 1.0 (/ -1.0 (+ -1.0 x))) 0.0) (/ (+ -1.0 (pow (/ -1.0 (+ -1.0 x)) 2.0)) (+ 1.0 (/ -1.0 (+ -1.0 x)))) (+ -1.0 (/ -1.0 (+ -1.0 x)))) (* (/ x (+ x (+ x -2.0))) 2.0))) 2.0)",
    "output_parens": 23,
    "avg_bits_err_input": 58.344897269166175,
    "avg_bits_err_output": 50.34898818038793,
    "avg_bits_err_improve": 7.995909088778248,
    "time": 24197.068359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.050896240625180285,
    "avg_bits_err_output": 0.05119812031259014,
    "avg_bits_err_improve": -0.00030187968740985616,
    "time": 6149.4755859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (* (cos (atan (/ eh (* ew (tan t))))) (sin t))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12784436093777043,
    "avg_bits_err_output": 0.12784436093777043,
    "avg_bits_err_improve": 0,
    "time": 30884.419189453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12421936093777045,
    "avg_bits_err_output": 0.12421936093777045,
    "avg_bits_err_improve": 0,
    "time": 24751.59228515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0))) (* (- lambda1 lambda2) (* (sin (/ phi1 2.0)) (sin (/ phi2 -2.0))))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.155730002212515,
    "avg_bits_err_output": 0.12479651979680932,
    "avg_bits_err_improve": 39.030933482415705,
    "time": 32834.393798828125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.54596624557503,
    "avg_bits_err_output": 0.010698120312590145,
    "avg_bits_err_improve": 14.53526812526244,
    "time": 7940.630615234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (+ (if (!= (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (cos delta)) 0.0) (/ (- (pow (cos delta) 2.0) (pow (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 2.0)) (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (cos delta))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (if (!= (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 0.0) (/ (+ (pow (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 2.0) (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (* (sin phi1) (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (sin phi1)))))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) (* (sin phi1) (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) 0.0))))))",
    "output_parens": 147,
    "avg_bits_err_input": 0.15138822062361698,
    "avg_bits_err_output": 0.16659697327821038,
    "avg_bits_err_improve": -0.0152087526545934,
    "time": 46808.6259765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.30746546370878,
    "avg_bits_err_output": 0.17900733125324517,
    "avg_bits_err_improve": 52.128458132455535,
    "time": 30523.58642578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.70276479473836,
    "avg_bits_err_output": 0.3420011297018331,
    "avg_bits_err_improve": 28.360763665036526,
    "time": 26765.6240234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.607102224862125,
    "avg_bits_err_output": 0.23530958750793235,
    "avg_bits_err_improve": 43.37179263735419,
    "time": 26339.31494140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (pow (fma b b (* a (* c -3.0))) 0.5))) (* a 3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.976433453952566,
    "avg_bits_err_output": 23.18106587046622,
    "avg_bits_err_improve": 11.795367583486346,
    "time": 25365.84033203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (if (!= (* (cos (- lambda1 lambda2)) (* (sin phi1) (cos phi2))) 0.0) (/ 1.0 (/ 1.0 (* (cos (- lambda1 lambda2)) (* (sin phi1) (cos phi2))))) (* (cos (- lambda1 lambda2)) (* (sin phi1) (cos phi2))))))",
    "output_parens": 31,
    "avg_bits_err_input": 13.031895371367533,
    "avg_bits_err_output": 13.041970962086975,
    "avg_bits_err_improve": -0.010075590719441863,
    "time": 36225.365234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.449825090040896,
    "avg_bits_err_output": 0.4731625169266375,
    "avg_bits_err_improve": 28.976662573114258,
    "time": 16344.965576171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01025,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0,
    "time": 4383.732666015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (/ -1.0 (+ x 1.0)) (+ -1.0 (/ x (+ x 1.0)))) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 14.314104877727425,
    "avg_bits_err_output": 12.42864519753351,
    "avg_bits_err_improve": 1.8854596801939145,
    "time": 16193.81787109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -3.4e+48) (* (* (sqrt (- F)) (sqrt (* -2.0 (- (* A (* C 4.0)) (pow B 2.0))))) (/ (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) (- A))) (- (* A (* C 4.0)) (pow B 2.0)))) (if (<= F -7.2e-139) (/ (sqrt (* (* F (* -2.0 (- (* A (* 4.0 C)) (pow B 2.0)))) (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C)) 0.0) (/ (- (- (pow (+ A C) 2.0) (pow (- A C) 2.0)) (pow B 2.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* 4.0 C)) (pow B 2.0))) (if (<= F -1.9e-307) (* (* (sqrt (- F)) (sqrt (* -2.0 (- (* A (* C 4.0)) (pow B 2.0))))) (/ (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) (- A))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt F) (sqrt (* (- (pow B 2.0) (* A (* C 4.0))) -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))))))",
    "output_parens": 120,
    "avg_bits_err_input": 52.13415897560496,
    "avg_bits_err_output": 47.29191773636114,
    "avg_bits_err_improve": 4.842241239243819,
    "time": 46369.7529296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -50.0) (* (atan (/ (- C (if (!= A 0.0) (/ (* A (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) A) (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) B)) (/ 180.0 PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 1e+21) (* (atan (* (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0) (* (pow (- A C) 2.0) 0.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (/ -1.0 B))) (/ 180.0 PI)) (* 180.0 (/ (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) PI))))",
    "output_parens": 88,
    "avg_bits_err_input": 29.800572726157856,
    "avg_bits_err_output": 25.970627899531472,
    "avg_bits_err_improve": 3.8299448266263845,
    "time": 29937.325927734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.32e-281) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 F)))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* 2.0 F))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.04447761826772,
    "avg_bits_err_output": 46.33447127786981,
    "avg_bits_err_improve": 5.710006340397911,
    "time": 48011.68701171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.521582783470016,
    "avg_bits_err_output": 15.521582783470016,
    "avg_bits_err_improve": 0,
    "time": 18362.792724609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -5e-298) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (* h (/ h (- (sqrt (fma g g (* h (- h)))) g))) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- g (- (sqrt (- (* g g) (* h h))))) 0.0) (* h (/ h (- (- g) (sqrt (- (* g g) (* h h)))))) (- (sqrt (- (* g g) (* h h))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 69,
    "avg_bits_err_input": 35.659372981148096,
    "avg_bits_err_output": 5.456500887827992,
    "avg_bits_err_improve": 30.202872093320103,
    "time": 35154.703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (* 2.0 (fma (+ (* 2.0 PI) (acos (/ (- g) h))) -0.16666666666666666 PI))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.989068985944983,
    "avg_bits_err_output": 0.02933496250072116,
    "avg_bits_err_improve": 0.9597340234442618,
    "time": 14517.79833984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log (if (!= (+ (expm1 (/ (exp a) (+ (exp a) (exp b)))) 2.0) 0.0) (* (+ (expm1 (/ (exp a) (+ (exp a) (exp b)))) 2.0) (/ (exp (/ (exp a) (+ (exp a) (exp b)))) (+ (expm1 (/ (exp a) (+ (exp a) (exp b)))) 2.0))) (exp (/ (exp a) (+ (exp a) (exp b))))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.6440212406251803,
    "avg_bits_err_output": 0.7758883816192943,
    "avg_bits_err_improve": -0.131867140994114,
    "time": 12589.604248046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+297) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-319) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e-294) (* (/ (/ a1 b2) b1) a2) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+296) (/ (* a1 a2) (* b1 b2)) (* (/ (/ a1 b2) b1) a2)))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.476061622241211,
    "avg_bits_err_output": 3.0318526935096477,
    "avg_bits_err_improve": 8.444208928731562,
    "time": 10859.7734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5304528334220815,
    "avg_bits_err_output": 0.4775,
    "avg_bits_err_improve": 0.05295283342208151,
    "time": 7226.537841796875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.1) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (exp (* 1.0 (log (- (hypot 1.0 x) x))))) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 10000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 47,
    "avg_bits_err_input": 53.16835519210999,
    "avg_bits_err_output": 0.13750862662220842,
    "avg_bits_err_improve": 53.030846565487785,
    "time": 11876.89697265625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.657870842628769,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.657870842628769,
    "time": 1936.58203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- (/ x (- -1.0 x)) (/ 1.0 (- -1.0 x))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.015375,
    "avg_bits_err_output": 0.014375,
    "avg_bits_err_improve": 0.0009999999999999992,
    "time": 5422.02587890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1306.71728515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (- (+ 3.0 (/ 2.0 (* r r))) 4.5) (- (* (/ (fma v 0.25 -0.375) (+ v -1.0)) (pow (* w r) 2.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 13.311068669748659,
    "avg_bits_err_output": 0.3334864671953427,
    "avg_bits_err_improve": 12.977582202553316,
    "time": 30622.84130859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma x1 (* 4.0 (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (/ x1 (fma x1 x1 1.0)))) (fma x1 (* x1 -6.0) (/ (+ (* (* x1 (- x1 (fma x1 (* x1 3.0) (* 2.0 x2)))) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 2.0 -6.0)) (* (fma (- (fma x1 (* x1 3.0) (* 2.0 x2))) x1 (* x1 (fma x1 (* x1 3.0) (* 2.0 x2)))) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 2.0 -6.0))) (- -1.0 (* x1 x1)))))))) (+ x1 x1)))",
    "output_parens": 67,
    "avg_bits_err_input": 0.5085803715304767,
    "avg_bits_err_output": 0.2691027115960892,
    "avg_bits_err_improve": 0.23947765993438758,
    "time": 75092.89892578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) 0.0) (* (/ (- t1) (+ t1 u)) (/ v (+ t1 u))) (if (<= (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) 5e+304) (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) (* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))))",
    "output_parens": 34,
    "avg_bits_err_input": 18.47505220014807,
    "avg_bits_err_output": 1.151101121521497,
    "avg_bits_err_improve": 17.323951078626575,
    "time": 10124.192138671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2332692038992627,
    "avg_bits_err_output": 0.18062744375108172,
    "avg_bits_err_improve": 0.05264176014818098,
    "time": 6386.477294921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002948120312590144,
    "avg_bits_err_output": 0.002948120312590144,
    "avg_bits_err_improve": 0,
    "time": 2043.593017578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ (- (/ PI a) (/ PI b)) (- b a)) 2.0) (+ b a))",
    "output_parens": 8,
    "avg_bits_err_input": 15.187446997227202,
    "avg_bits_err_output": 0.2707740609435395,
    "avg_bits_err_improve": 14.916672936283662,
    "time": 18504.7763671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (exp (- (- x (* eps x)))) (+ (/ (exp (- (- x (* eps x)))) eps) (- (exp (- (fma eps x x))) (/ (exp (- (fma eps x x))) eps)))) 2.0)",
    "output_parens": 20,
    "avg_bits_err_input": 29.39176485935185,
    "avg_bits_err_output": 24.69907289848775,
    "avg_bits_err_improve": 4.692691960864099,
    "time": 23996.754638671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (log1p (expm1 (/ 1.0 (+ 2.0 (* (- (/ 2.0 (+ t (/ t t))) 2.0) (- (/ 2.0 (+ t (/ t t))) 2.0)))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.02175,
    "avg_bits_err_output": 0.005625,
    "avg_bits_err_improve": 0.016125,
    "time": 5457.98095703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- (- 4.0 (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t))) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0)))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.026875,
    "avg_bits_err_output": 0.0927336468769832,
    "avg_bits_err_improve": -0.0658586468769832,
    "time": 20925.54296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ t (+ t 1.0)) (* (/ t (+ t 1.0)) 4.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.017625,
    "avg_bits_err_output": 0.017625,
    "avg_bits_err_improve": 0,
    "time": 13742.7978515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3880.79052734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8283.392333984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2774.23388671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.794267633753049,
    "avg_bits_err_output": 0.253875,
    "avg_bits_err_improve": 7.540392633753049,
    "time": 34119.894287109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 6.871553505483716,
    "avg_bits_err_output": 6.871553505483716,
    "avg_bits_err_improve": 0,
    "time": 16285.212646484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (+ (* eps (+ x eps)) (* x eps)) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 15.11161327536692,
    "avg_bits_err_output": 0.05661536591260669,
    "avg_bits_err_improve": 15.054997909454315,
    "time": 13000.9677734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (exp (* x (* x 10.0))) (cos x)) 0.0) (* (cos x) (* (pow (exp (* x x)) 20.0) (/ (cos x) (* (cos x) (pow (exp (* x x)) 10.0))))) (* (pow (exp (* x x)) 10.0) (cos x)))",
    "output_parens": 25,
    "avg_bits_err_input": 3.5214174414767743,
    "avg_bits_err_output": 3.0403992381036016,
    "avg_bits_err_improve": 0.4810182033731727,
    "time": 20657.476318359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 15.937445964149477,
    "avg_bits_err_output": 15.937445964149477,
    "avg_bits_err_improve": 0,
    "time": 14499.573486328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.9555078319992,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.9555078319992,
    "time": 6183.44140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.389331828656594,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.38883182865659,
    "time": 4563.1259765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (- 1.7e+308 (+ -1.7e+308 (* t +inf.0))) -2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.3063868421881309,
    "avg_bits_err_improve": 63.69361315781187,
    "time": 21964.000732421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (* t (* t 2e-16)) 2e-16)",
    "output_parens": 3,
    "avg_bits_err_input": 61.843251523038745,
    "avg_bits_err_output": 0.41814417344137655,
    "avg_bits_err_improve": 61.42510734959737,
    "time": 15994.09716796875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (* a -4.0) (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b))) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.44126964576185,
    "avg_bits_err_output": 22.57237898694939,
    "avg_bits_err_improve": 11.868890658812461,
    "time": 27840.245361328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c 1.7e-271) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (pow (fma b b (* a (* c -4.0))) 0.5))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)) (if (<= c 200.0) (if (!= (/ (- (- (sqrt (fma b b (* a (* c -4.0))))) b) (* a 2.0)) 0.0) (- (/ (- (* a (/ (* c -4.0) (* a 2.0)))) (- (- (sqrt (fma b b (* a (* c -4.0))))) b)) 0.0) (/ (/ (- b (sqrt (fma b b (* a (* c -4.0))))) -2.0) a)) (/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (pow (fma b b (* a (* c -4.0))) 0.5))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))))",
    "output_parens": 82,
    "avg_bits_err_input": 34.93790387716921,
    "avg_bits_err_output": 23.45100418162638,
    "avg_bits_err_improve": 11.486899695542832,
    "time": 28325.73583984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2441.15966796875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.5427603283314,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 39.532385328331394,
    "time": 6834.230712890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 19.992478467082034,
    "avg_bits_err_output": 19.992478467082034,
    "avg_bits_err_improve": 0,
    "time": 5554.1162109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6715485494078313,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6715485494078313,
    "time": 6794.271728515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.039375,
    "time": 7758.6953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.020844360937770437,
    "avg_bits_err_output": 0.01075,
    "avg_bits_err_improve": 0.010094360937770438,
    "time": 6082.4453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0135,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.0125,
    "time": 4467.7919921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0,
    "time": 1709.712646484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ c (+ a b))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40375977500432714,
    "avg_bits_err_output": 0.23725,
    "avg_bits_err_improve": 0.16650977500432715,
    "time": 8765.6083984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (- (/ (cos (* x -2.0)) 2.0) -0.5) 0.0) (/ (if (!= (+ 0.25 (/ (pow (cos (* x -2.0)) 2.0) 4.0)) 0.0) (/ (- 0.0625 (pow (/ (cos (* x -2.0)) 2.0) 4.0)) (+ 0.25 (/ (pow (cos (* x -2.0)) 2.0) 4.0))) (- 0.25 (/ (pow (cos (* x -2.0)) 2.0) 4.0))) (- -0.5 (/ (cos (* x -2.0)) 2.0))) (+ (pow (cos x) 2.0) -1.0)) (- -1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 46,
    "avg_bits_err_input": 30.43870851392195,
    "avg_bits_err_output": 30.38895895623762,
    "avg_bits_err_improve": 0.049749557684329204,
    "time": 14410.42236328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (if (!= (sqrt (- (* x x) eps)) 0.0) (/ (- (* x (+ x (sqrt (- (* x x) eps)))) eps) (sqrt (- (* x x) eps))) (+ x (sqrt (- (* x x) eps))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 30,
    "avg_bits_err_input": 24.75693699231205,
    "avg_bits_err_output": 0.06942236875252404,
    "avg_bits_err_improve": 24.687514623559526,
    "time": 15218.274658203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (- (* x x) (pow (sin x) 2.0)) (fma (sin (- x)) (sin x) (pow (sin x) 2.0))) 0.0) (/ (- (pow (- (* x x) (pow (sin x) 2.0)) 2.0) (* (fma (sin (- x)) (sin x) (pow (sin x) 2.0)) (fma (sin (- x)) (sin x) (pow (sin x) 2.0)))) (- (fma x x (- (pow (sin x) 2.0))) (fma (sin (- x)) (sin x) (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 59,
    "avg_bits_err_input": 28.788777767944996,
    "avg_bits_err_output": 28.68117566915985,
    "avg_bits_err_improve": 0.10760209878514715,
    "time": 38802.714111328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007363361324451065,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 0.006113361324451064,
    "time": 2799.329345703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= i 4.1e+76) (if (!= (* (/ (expm1 (* n (log1p (/ i n)))) (/ i n)) 50.0) 0.0) (* (* (/ (expm1 (* n (log1p (/ i n)))) (/ i n)) 50.0) (* 50.0 (/ (/ (expm1 (* n (log1p (/ i n)))) (/ i n)) (* (/ (expm1 (* n (log1p (/ i n)))) (/ i n)) 25.0)))) (* (expm1 (* n (log1p (/ i n)))) (/ 100.0 (/ i n)))) (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -100.0 (/ i n))))",
    "output_parens": 48,
    "avg_bits_err_input": 47.50174955065749,
    "avg_bits_err_output": 14.238592959666036,
    "avg_bits_err_improve": 33.26315659099146,
    "time": 26351.547607421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.069959384915816,
    "avg_bits_err_output": 23.243677596247096,
    "avg_bits_err_improve": 2.8262817886687195,
    "time": 15206.435791015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.65854345701529,
    "avg_bits_err_output": 23.414331613916954,
    "avg_bits_err_improve": 3.2442118430983378,
    "time": 17768.677734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.03875,
    "avg_bits_err_output": 0.023939600283902615,
    "avg_bits_err_improve": 0.014810399716097385,
    "time": 14261.69482421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* 2.0 (* PI uy))) (sqrt (- (fma ux (fma ux maxCos (- 1.0 ux)) (- ux (* ux maxCos))) (* (fma ux maxCos (- 1.0 ux)) (* ux maxCos)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.497687227091795,
    "avg_bits_err_output": 0.5280091854491015,
    "avg_bits_err_improve": 12.969678041642693,
    "time": 30015.15771484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.540722880457121,
    "avg_bits_err_output": 12.033152212744351,
    "avg_bits_err_improve": 1.5075706677127698,
    "time": 28298.92724609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (- (* ux maxCos) (* ux (* ux maxCos))) zi))",
    "output_parens": 35,
    "avg_bits_err_input": 0.3376173847165654,
    "avg_bits_err_output": 0.3386273960577008,
    "avg_bits_err_improve": -0.0010100113411354306,
    "time": 48455.54638671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.20115376181596006,
    "avg_bits_err_output": 0.20115376181596006,
    "avg_bits_err_improve": 0,
    "time": 34391.485107421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (* (/ u1 (- 1.0 u1)) (/ u1 (* (- 1.0 u1) (/ u1 (- 1.0 u1))))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.5381628816039323,
    "avg_bits_err_output": 0.5387361854655256,
    "avg_bits_err_improve": -0.0005733038615932662,
    "time": 21270.869140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (/ (+ (cos (+ (* u2 -6.28318530718) (* PI 2.0))) (cos (* u2 6.28318530718))) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 0.3323814637931077,
    "avg_bits_err_output": 0.36097037396543374,
    "avg_bits_err_improve": -0.028588910172326065,
    "time": 22798.06787109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.3375540656001496,
    "avg_bits_err_output": 0.3377309452875594,
    "avg_bits_err_improve": -0.0001768796874098144,
    "time": 38979.334716796875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ (expm1 (/ x (- s))) 2.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.07039997381152756,
    "avg_bits_err_output": 0.0716271852207903,
    "avg_bits_err_improve": -0.0012272114092627406,
    "time": 13872.568359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (- (* (log1p (exp (/ (fabs x) (- s)))) -2.0) (/ (fabs x) s))) s)",
    "output_parens": 11,
    "avg_bits_err_input": 0.16534426588581133,
    "avg_bits_err_output": 0.14812342676861637,
    "avg_bits_err_improve": 0.017220839117194964,
    "time": 15097.66162109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641135874740226,
    "avg_bits_err_output": 0.6727942602193283,
    "avg_bits_err_improve": -0.008680672745305706,
    "time": 22213.507080078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.15567642670288123,
    "avg_bits_err_output": 0.15168587417774718,
    "avg_bits_err_improve": 0.003990552525134056,
    "time": 19024.91015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (+ (fma (/ (- sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) sinTheta_O (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 2.5574870978969493,
    "avg_bits_err_output": 2.5542983760214084,
    "avg_bits_err_improve": 0.0031887218755408675,
    "time": 29978.31201171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (* (/ 0.5 v) (/ cosTheta_i (exp (* sinTheta_i (/ sinTheta_O v))))) (/ (/ 1.0 v) (sinh (/ 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.44788030619839286,
    "avg_bits_err_output": 0.34951142589058853,
    "avg_bits_err_improve": 0.09836888030780433,
    "time": 27497.263427734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (+ (/ (- (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) 1.0) v) 0.6931)) (/ 0.5 v))",
    "output_parens": 9,
    "avg_bits_err_input": 0.11342486894409184,
    "avg_bits_err_output": 0.11254720936879971,
    "avg_bits_err_improve": 0.0008776595752921362,
    "time": 28199.490234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow alpha (* PI 2.0)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4767753941579562,
    "avg_bits_err_output": 0.4271656498791892,
    "avg_bits_err_improve": 0.04960974427876702,
    "time": 29326.849609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(/ (* (* (log (fma u -1.3333333333333333 1.3333333333333333)) (- s)) 6.0) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 1.3345746971356445,
    "avg_bits_err_output": 1.0243414466212102,
    "avg_bits_err_improve": 0.3102332505144343,
    "time": 24684.65576171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (- (log1p (* u -4.0))) s)",
    "output_parens": 4,
    "avg_bits_err_input": 12.339410347436003,
    "avg_bits_err_output": 0.19894812031259013,
    "avg_bits_err_improve": 12.140462227123413,
    "time": 20837.741455078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (* 2.0 PI)))) (* 0.75 (/ (exp (/ (/ r -3.0) s)) (* s (* PI 6.0))))) r)",
    "output_parens": 16,
    "avg_bits_err_input": 0.1434555200460597,
    "avg_bits_err_output": 0.14598449184579948,
    "avg_bits_err_improve": -0.002528971799739793,
    "time": 23846.029541015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9247303301421024,
    "avg_bits_err_output": 0.7336448312354265,
    "avg_bits_err_improve": 0.19108549890667592,
    "time": 27566.749267578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (if (!= (sqrt (- 1.0 (+ cosTheta cosTheta))) 0.0) (/ (- 1.0 (+ cosTheta cosTheta)) (sqrt (- 1.0 (+ cosTheta cosTheta)))) (sqrt (- 1.0 (+ cosTheta cosTheta)))) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.6900439519084594,
    "avg_bits_err_output": 0.4823954508256858,
    "avg_bits_err_improve": 0.20764850108277355,
    "time": 21773.7998046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.513070364833133,
    "avg_bits_err_output": 0.5209430381998601,
    "avg_bits_err_improve": 12.992127326633273,
    "time": 20087.376708984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (sqrt (- (log1p (- u1)))) (expm1 (log1p (- (* (sqrt (- (log1p (- u1)))) (if (!= (cos (* PI (* u2 -2.0))) 0.0) (/ (* (+ (cos (* PI (* u2 -2.0))) -1.0) (cos (* PI (* u2 -2.0)))) (cos (* PI (* u2 -2.0)))) (+ (cos (* PI (* u2 -2.0))) -1.0)))))))",
    "output_parens": 34,
    "avg_bits_err_input": 13.566173037343615,
    "avg_bits_err_output": 0.32140788837127066,
    "avg_bits_err_improve": 13.244765148972345,
    "time": 20021.9453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 13.967857744198856,
    "avg_bits_err_output": 0.31148120312590144,
    "avg_bits_err_improve": 13.656376541072955,
    "time": 14295.971923828125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.735171715335717,
    "avg_bits_err_output": 0.5277029701653595,
    "avg_bits_err_improve": 12.207468745170358,
    "time": 17308.5234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= F -1.2e-115) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (if (<= F 4.3e-228) (- (* PI l) (/ (/ (/ (tan (* PI l)) F) (log (pow (exp (/ 0.5 F)) F))) (+ F F))) (if (<= F 7.5e-186) (- (* PI l) (* (/ (tan (* PI l)) F) (/ 1.0 F))) (if (<= F 7.3e-155) (- (* PI l) (/ (/ (/ (tan (* PI l)) F) (log (pow (exp (/ 0.5 F)) F))) (+ F F))) (- (* PI l) (/ (fma (tan (* PI l)) (/ 2.0 F) (/ (tan (* PI l)) (- F))) F))))))",
    "output_parens": 56,
    "avg_bits_err_input": 16.49249338287027,
    "avg_bits_err_output": 9.144980268576251,
    "avg_bits_err_improve": 7.347513114294017,
    "time": 27853.233642578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(+ (- (- (+ 1.0 (/ x (tan B))) 1.0)) (/ 1.0 (sin B)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.2236497379540208,
    "avg_bits_err_output": 0.1557204145155293,
    "avg_bits_err_improve": 0.0679293234384915,
    "time": 16921.925048828125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.457914018303216,
    "avg_bits_err_output": 10.439313136889016,
    "avg_bits_err_improve": 3.0186008814141996,
    "time": 24781.874267578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (+ (if (!= (- (* (exp -1.0) (- (exp (fma PI (/ f -4.0) 1.0)))) (exp (* PI (/ f -4.0)))) 0.0) (/ (fma (- (exp (fma PI (/ f -4.0) 1.0))) (* (- (exp (fma PI (/ f -4.0) 1.0))) (* (exp -1.0) (exp -1.0))) (- (exp (* (* PI (/ f -4.0)) 2.0)))) (- (* (exp -1.0) (- (exp (fma PI (/ f -4.0) 1.0)))) (exp (* PI (/ f -4.0))))) (fma (- (exp -1.0)) (exp (fma PI (/ f -4.0) 1.0)) (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0))",
    "output_parens": 69,
    "avg_bits_err_input": 61.43982144920934,
    "avg_bits_err_output": 51.758512670624036,
    "avg_bits_err_improve": 9.681308778585304,
    "time": 43545.601806640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.329198102684785,
    "avg_bits_err_output": 33.97133585222982,
    "avg_bits_err_improve": 9.357862250454964,
    "time": 28984.928466796875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin ky) (/ (sin th) (hypot (sin ky) (sin kx))))",
    "output_parens": 7,
    "avg_bits_err_input": 3.853514213811086,
    "avg_bits_err_output": 0.2722691734413761,
    "avg_bits_err_improve": 3.58124504036971,
    "time": 29949.9033203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0) (pow (* (* 2.0 (/ l Om)) (sin kx)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.0863747861547797,
    "avg_bits_err_output": 0.00625,
    "avg_bits_err_improve": 1.0801247861547796,
    "time": 17624.41064453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (expm1 (log1p (/ (+ (pow (/ Om Omc) 2.0) -1.0) (+ -1.0 (* (pow (/ t l) 2.0) -2.0)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 9.724483127932366,
    "avg_bits_err_output": 9.729895233517723,
    "avg_bits_err_improve": -0.0054121055853570965,
    "time": 19612.42431640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -3.2e-306) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= n 2.45e-222) (* (sqrt (* U (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om))))))) (sqrt (* 2.0 n))) (if (<= n 3.8e+24) (sqrt (* 2.0 (* U (* n (- t (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (* l (/ l Om))))))))) (* (sqrt (* U (- t (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* 2.0 (* l (/ l Om))))))) (sqrt (* 2.0 n))))))",
    "output_parens": 63,
    "avg_bits_err_input": 34.46157878550961,
    "avg_bits_err_output": 24.915810152963633,
    "avg_bits_err_improve": 9.545768632545975,
    "time": 38073.992431640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -6.5e+33) (/ 2.0 (* (/ k t) (/ (/ (* k (* (tan k) (* (pow t 3.0) (/ (sin k) l)))) t) l))) (if (<= t -1.5e-108) (/ 2.0 (* (* (* (pow t 3.0) (/ (sin k) (* t l))) (/ k t)) (* (tan k) (/ k l)))) (if (<= t 1.35e-106) 0.0 (/ 2.0 (* (/ k t) (/ (/ (* k (* (tan k) (* (pow t 3.0) (/ (sin k) l)))) t) l))))))",
    "output_parens": 42,
    "avg_bits_err_input": 47.83210195031423,
    "avg_bits_err_output": 24.836550452060063,
    "avg_bits_err_improve": 22.99555149825417,
    "time": 47243.579345703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)) INFINITY) (/ 2.0 (/ (* (tan k) (/ (* (* 2.0 (pow t 3.0)) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (sin k) l))) 2.0)) l)) 0.0)",
    "output_parens": 28,
    "avg_bits_err_input": 32.43845866339954,
    "avg_bits_err_output": 22.71531155508707,
    "avg_bits_err_improve": 9.723147108312467,
    "time": 24231.321533203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (fma a1 a1 (* a2 a2)) (sqrt 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5028838375223573,
    "avg_bits_err_output": 0.45349661876694797,
    "avg_bits_err_improve": 0.04938721875540936,
    "time": 25314.444091796875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (* k -0.5)) (/ (sqrt (* 2.0 (* PI n))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.472565155812468,
    "avg_bits_err_output": 0.348649722706296,
    "avg_bits_err_improve": 0.12391543310617198,
    "time": 21356.6123046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (exp l) (- (exp (fma l -1.0 l)) (exp (* l -2.0)))) (* (cos (/ K 2.0)) J)) U)",
    "output_parens": 12,
    "avg_bits_err_input": 17.272637600033196,
    "avg_bits_err_output": 17.26500164037639,
    "avg_bits_err_improve": 0.0076359596568060795,
    "time": 26642.84619140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l))))",
    "output_parens": 15,
    "avg_bits_err_input": 15.458969763343148,
    "avg_bits_err_output": 15.458969763343148,
    "avg_bits_err_improve": 0,
    "time": 17129.81982421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (cos (/ K 2.0)) (* (* -2.0 J) (sqrt (+ 1.0 (pow (/ (/ U (cos (/ K -2.0))) (+ J J)) 2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.28489624062518,
    "avg_bits_err_output": 18.287313721875545,
    "avg_bits_err_improve": -0.0024174812503652277,
    "time": 41030.21142578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) -2e+232) (* w0 (sqrt (- 1.0 (* (/ (/ (* D M) (* 2.0 d)) l) (* h (/ (* D M) (* 2.0 d))))))) (* w0 (sqrt (- 1.0 (* (/ (* h (* M (/ D d))) (* l 4.0)) (* M (/ D d)))))))",
    "output_parens": 26,
    "avg_bits_err_input": 14.059530863966984,
    "avg_bits_err_output": 8.16056820953349,
    "avg_bits_err_improve": 5.898962654433493,
    "time": 23692.998291015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e+277) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) -5e-202) (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (+ (/ A (* (sqrt (/ A (* l V))) (* (* l (+ V V)) 2.0))) (+ (/ A (* (sqrt (/ A (* l V))) (* (* l (+ V V)) 2.0))) (/ (/ 1.0 (/ 1.0 (sqrt (/ A (* l V))))) 2.0))) (sqrt (/ A (* l V))))) (if (<= (* V l) 5e-286) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (+ (/ A (* (sqrt (/ A (* l V))) (* (* l (+ V V)) 2.0))) (+ (/ A (* (sqrt (/ A (* l V))) (* (* l (+ V V)) 2.0))) (/ (/ 1.0 (/ 1.0 (sqrt (/ A (* l V))))) 2.0))) (sqrt (/ A (* l V))))))))",
    "output_parens": 91,
    "avg_bits_err_input": 18.9747755837963,
    "avg_bits_err_output": 13.657480941384268,
    "avg_bits_err_improve": 5.317294642412033,
    "time": 20877.13427734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 2e+17) (* (/ c0 (* 2.0 w)) (if (!= (- (* (* d c0) (/ d (* D (* h (* w D))))) (sqrt (- (pow (* (* d c0) (/ d (* D (* h (* w D))))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* (* d c0) (/ d (* D (* h (* w D))))) (sqrt (- (pow (* (* d c0) (/ d (* D (* h (* w D))))) 2.0) (* M M)))))) (+ (/ (/ (* d (* c0 (/ d D))) D) (* h w)) (sqrt (- (pow (/ (/ (* d (* c0 (/ d D))) D) (* h w)) 2.0) (* M M)))))) (/ (/ (* c0 (if (!= (- (* c0 (* (/ d (* h D)) (/ d (* D w)))) (sqrt (- (pow (* c0 (* (/ d (* h D)) (/ d (* D w)))) 2.0) (* M M)))) 0.0) (/ (* M (- M)) (- (sqrt (- (pow (* c0 (* (/ d (* h D)) (/ d (* D w)))) 2.0) (* M M))) (* c0 (* (/ d (* h D)) (/ d (* D w)))))) (fma c0 (* (/ d (* h D)) (/ d (* D w))) (sqrt (- (pow (* c0 (* (/ d (* h D)) (/ d (* D w)))) 2.0) (* M M)))))) w) 2.0))",
    "output_parens": 144,
    "avg_bits_err_input": 59.67273215480821,
    "avg_bits_err_output": 28.61701991727976,
    "avg_bits_err_improve": 31.05571223752845,
    "time": 60667.341552734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (- (* (sqrt (* d (/ (/ d h) l))) (- -1.0 (* (/ (pow (/ D 2.0) 2.0) l) (* h (* -0.5 (pow (/ M d) 2.0))))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) -1e-98) (* (* (sqrt (/ d l)) (sqrt (/ d h))) (- 1.0 (* (* 0.5 (pow (* D (/ M (* d 2.0))) 2.0)) (/ h l)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 0.0) (/ (* (sqrt (* d (/ (/ d h) l))) (- 1.0 (* (pow (* M (/ D (* d 2.0))) 2.0) (* (/ h l) 0.5)))) 1.0) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 2e+293) (* (* (if (!= (sqrt (/ d h)) 0.0) (/ (/ d h) (sqrt (/ d h))) (sqrt (/ d h))) (sqrt (/ d l))) (- 1.0 (* h (/ (pow (* M (/ D (* d 2.0))) 2.0) (+ l l))))) (* (fma 0.5 (* h (* (* (/ D d) (/ M 2.0)) (* (/ M 2.0) (/ (/ D d) l)))) -1.0) (- (* (sqrt (/ d (* h l))) (sqrt d))))))))",
    "output_parens": 147,
    "avg_bits_err_input": 26.44617227584965,
    "avg_bits_err_output": 22.457922587950815,
    "avg_bits_err_improve": 3.9882496878988363,
    "time": 50354.537353515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (exp (* 1.0 (log (/ (+ 0.5 (/ -0.5 (hypot 1.0 x))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 24,
    "avg_bits_err_input": 14.971667081376712,
    "avg_bits_err_output": 14.474393424364836,
    "avg_bits_err_improve": 0.49727365701187587,
    "time": 22757.98974609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9823868421881311,
    "avg_bits_err_output": 0.012948120312590145,
    "avg_bits_err_improve": 0.9694387218755409,
    "time": 7608.1630859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ (- (/ (fma 5.0 (* v v) -1.0) (fma v v -1.0)) 0.0) PI) (sqrt (- 2.0 (* v (* v 6.0))))) t) 0.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.4803071376397249,
    "avg_bits_err_output": 0.11140604608739371,
    "avg_bits_err_improve": 0.3689010915523312,
    "time": 22568.89990234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (sqrt (- 2.0 (* (* v v) 6.0))) (- 1.0 (* v v))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.014917481250360578,
    "avg_bits_err_output": 0.010698120312590145,
    "avg_bits_err_improve": 0.004219360937770433,
    "time": 13799.19140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (- -1.0 (+ (* (* v v) -5.0) -1.0))) (- (* v v) 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.534914697257525,
    "avg_bits_err_output": 0.5535178879287848,
    "avg_bits_err_improve": -0.018603190671259706,
    "time": 9316.457275390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (fma k (+ k 10.0) 1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.9187119986384435,
    "avg_bits_err_output": 1.869065758013263,
    "avg_bits_err_improve": 0.04964624062518053,
    "time": 17802.435791015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (expm1 (log1p (exp (/ (- (+ Vef (+ EDonor mu)) Ec) KbT)))))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.01902135833709117,
    "avg_bits_err_output": 0.01971947864968131,
    "avg_bits_err_improve": -0.0006981203125901413,
    "time": 11447.500732421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (fma b (* b (+ (* b b) (* a (+ a a)))) (+ (pow a 4.0) (* b (* b 4.0)))) 1.0)",
    "output_parens": 11,
    "avg_bits_err_input": 0.18189417344137612,
    "avg_bits_err_output": 0.06084436093777043,
    "avg_bits_err_improve": 0.12104981250360569,
    "time": 11029.174560546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (* (* b (fma b b (* a a))) b) (* a (* a (fma a a (* b b))))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 20,
    "avg_bits_err_input": 0.1894956925776963,
    "avg_bits_err_output": 0.13333496250072116,
    "avg_bits_err_improve": 0.05616073007697514,
    "time": 22946.25634765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (fma (* a a) (fma b b (* a a)) (* b (+ (* b (* b b)) (* b (* a a))))) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 28,
    "avg_bits_err_input": 0.18585903185262348,
    "avg_bits_err_output": 0.15434474591341082,
    "avg_bits_err_improve": 0.031514285939212655,
    "time": 17622.963134765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(exp (log (sqrt (fma (+ (/ x (* (* (sqrt (fma 4.0 (* p p) (* x x))) 2.0) 2.0)) (/ (- (/ x 2.0) (/ x -4.0)) (sqrt (fma 4.0 (* p p) (* x x))))) 0.5 0.5))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.501493261825829,
    "avg_bits_err_output": 13.5784213676133,
    "avg_bits_err_improve": -0.07692810578747178,
    "time": 17370.934814453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.83161298072334,
    "avg_bits_err_output": 0.0475,
    "avg_bits_err_improve": 40.78411298072334,
    "time": 6918.23388671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (if (!= (/ (pow (sin x) 2.0) (+ x (sin x))) 0.0) (- (/ (* (/ x (+ x (sin x))) (* x (/ (pow (sin x) 2.0) (+ x (sin x))))) (/ (pow (sin x) 2.0) (+ x (sin x)))) (/ 1.0 (/ 1.0 (/ (pow (sin x) 2.0) (+ x (sin x)))))) (/ (- (* x x) (pow (sin x) 2.0)) (+ x (sin x)))) (- x (sin x))) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (/ (pow (tan x) 2.0) (+ x (tan x)))) (- x (tan x))))",
    "output_parens": 61,
    "avg_bits_err_input": 30.978015531159368,
    "avg_bits_err_output": 30.484997217770644,
    "avg_bits_err_improve": 0.49301831338872404,
    "time": 22281.20751953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) 0.0) (* a (/ (- c) (+ b_2 (pow (fma b_2 b_2 (* c (- a))) 0.5)))) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.729145063819495,
    "avg_bits_err_output": 22.59325506575772,
    "avg_bits_err_improve": 12.135889998061774,
    "time": 17360.549072265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.436573743810996,
    "avg_bits_err_output": 22.681008843511943,
    "avg_bits_err_improve": 11.755564900299053,
    "time": 18276.064697265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.216202271379384,
    "avg_bits_err_output": 30.453889728565898,
    "avg_bits_err_improve": 0.7623125428134863,
    "time": 17149.224853515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (<= x 1.0) (- (expm1 (/ (log x) n))) (- (exp (/ (log1p x) n)) (- (exp (log1p (pow x (/ 1.0 n)))) 1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 33.38967272288387,
    "avg_bits_err_output": 12.519378585329422,
    "avg_bits_err_improve": 20.870294137554453,
    "time": 31374.958740234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (+ (log1p N) -1.0) 0.0) (/ (- (* (+ (log1p N) -1.0) (+ (log1p N) -1.0)) (* (+ (log N) -1.0) (+ (log1p N) -1.0))) (+ (log1p N) -1.0)) (- (log1p N) (log N)))",
    "output_parens": 21,
    "avg_bits_err_input": 29.44133110348553,
    "avg_bits_err_output": 29.454898969708214,
    "avg_bits_err_improve": -0.013567866222683023,
    "time": 9563.678466796875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (/ 1.0 x) (if (!= (/ x (+ x 1.0)) 0.0) (/ (- (* (/ x (+ x 1.0)) x) x) (/ (fma x x x) (+ x 1.0))) (+ (/ x (+ x 1.0)) -1.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 14.751710394678788,
    "avg_bits_err_output": 14.401811272634406,
    "avg_bits_err_improve": 0.34989912204438234,
    "time": 16470.741455078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -1.02e-14) (fma (sin x) (- (sin eps)) (* (+ (cos eps) -1.0) (cos x))) (if (<= x 2.2e-20) (if (!= (+ (cos (+ x eps)) (cos x)) 0.0) (/ (* (+ (sin (+ x eps)) (sin x)) (+ (- (sin x) (* (sin x) (cos eps))) (- (* (cos x) (sin eps))))) (+ (cos (+ x eps)) (cos x))) (- (cos (+ x eps)) (cos x))) (fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))))",
    "output_parens": 50,
    "avg_bits_err_input": 39.33306555243677,
    "avg_bits_err_output": 0.6686451369619768,
    "avg_bits_err_improve": 38.664420415474794,
    "time": 26704.447021484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.742797241848077,
    "avg_bits_err_output": 29.445801822127077,
    "avg_bits_err_improve": 0.2969954197210001,
    "time": 14711.02490234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (/ (- 1.0 (cos x)) (* (sin x) 2.0)) 0.0) (/ (+ (if (!= (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ (* (cos x) 0.5) (sin x))) 0.0) (/ (- (* (/ (/ (- 1.0 (cos x)) (sin x)) (* (sin x) 4.0)) (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ (* (cos x) 0.5) (sin x)))) (* (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ (* (cos x) 0.5) (sin x))) (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ (* (cos x) 0.5) (sin x))))) (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ (* (cos x) 0.5) (sin x)))) (pow (* (- 1.0 (cos x)) (/ 0.5 (sin x))) 2.0)) (* (/ (- 1.0 (cos x)) (* (sin x) 2.0)) (/ (- 1.0 (cos x)) (* (sin x) 2.0)))) (/ (- 1.0 (cos x)) (* (sin x) 2.0))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 98,
    "avg_bits_err_input": 30.43307979460694,
    "avg_bits_err_output": 30.531766413259625,
    "avg_bits_err_improve": -0.09868661865268535,
    "time": 31428.80078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 34.490826374729586,
    "avg_bits_err_output": 22.195500663357517,
    "avg_bits_err_improve": 12.295325711372069,
    "time": 23960.7294921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (* c (/ 4.0 (- (sqrt (fma a (* c -4.0) (* b b))) b))) a) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.731654172625774,
    "avg_bits_err_output": 22.726554220241503,
    "avg_bits_err_improve": 12.00509995238427,
    "time": 24886.058837890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(if (!= (log1p (- x)) 0.0) (/ (/ 1.0 (log1p x)) (/ 1.0 (log1p (- x)))) (/ (log1p (- x)) (log1p x)))",
    "output_parens": 14,
    "avg_bits_err_input": 61.25592938520995,
    "avg_bits_err_output": 0.05229041406655649,
    "avg_bits_err_improve": 61.2036389711434,
    "time": 18522.5107421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (- (* n (log1p n)) (+ 1.0 (* n (log n)))) (- (log1p n)))",
    "output_parens": 9,
    "avg_bits_err_input": 63.0043646566278,
    "avg_bits_err_output": 0.5837067265978517,
    "avg_bits_err_improve": 62.42065793002995,
    "time": 13812.455078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.71929061624231,
    "avg_bits_err_output": 58.67689434246819,
    "avg_bits_err_improve": 0.04239627377412347,
    "time": 19185.6005859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ (- (exp (log1p (/ (- 1.0 (/ x (tan x))) (+ x x)))) 1.0) (+ (/ 0.5 x) (/ -1.0 (/ (+ x x) (/ x (tan x))))))",
    "output_parens": 16,
    "avg_bits_err_input": 59.86949778009672,
    "avg_bits_err_output": 59.85477309584385,
    "avg_bits_err_improve": 0.01472468425286877,
    "time": 30791.90478515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ a b)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.4660750040529,
    "avg_bits_err_output": 29.186570562760693,
    "avg_bits_err_improve": 31.279504441292204,
    "time": 30027.015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.16859861326628,
    "avg_bits_err_output": 0.4348656015629507,
    "avg_bits_err_improve": 40.733733011703336,
    "time": 10335.830810546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.76375708417609,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 58.763382084176094,
    "time": 4341.58251953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.016698955664374,
    "avg_bits_err_output": 0.021512548747768777,
    "avg_bits_err_improve": 28.995186406916606,
    "time": 9351.00146484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (exp x) 2.0) 0.0) (/ (fma (- 2.0 (exp x)) (/ -1.0 (exp x)) (pow (- (exp x) 2.0) 2.0)) (- (exp x) 2.0)) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 20,
    "avg_bits_err_input": 29.54982648154794,
    "avg_bits_err_output": 29.056491904097683,
    "avg_bits_err_improve": 0.49333457745025555,
    "time": 23601.28369140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ 2.0 (/ 4.0 (/ -4.0 x))) (+ (/ 1.0 (+ x 1.0)) (/ 1.0 (+ -1.0 x))))",
    "output_parens": 9,
    "avg_bits_err_input": 10.06042986287164,
    "avg_bits_err_output": 10.079920550386083,
    "avg_bits_err_improve": -0.01949068751444294,
    "time": 21384.143310546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (log1p (if (!= (exp (tan (+ x eps))) 0.0) (/ (* (expm1 (tan (+ x eps))) (- (expm1 (tan (+ x eps))) -1.0)) (exp (tan (+ x eps)))) (expm1 (tan (+ x eps))))) (tan x))",
    "output_parens": 23,
    "avg_bits_err_input": 36.80678994756066,
    "avg_bits_err_output": 37.40867111402706,
    "avg_bits_err_improve": -0.6018811664663986,
    "time": 20949.528076171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.92762824474874,
    "avg_bits_err_output": 0.16098364687698313,
    "avg_bits_err_improve": 29.766644597871757,
    "time": 13626.188232421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 36.96172508371131,
    "avg_bits_err_output": 21.860136654374,
    "avg_bits_err_improve": 15.101588429337308,
    "time": 17045.443359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (/ (+ (- (/ x x) (/ x (sqrt (fma x x x)))) (fma (/ (/ x (- x)) (sqrt (fma x x x))) x (/ x (sqrt (fma x x x))))) (/ (/ x x) (sqrt (+ 1.0 x)))) (expm1 (log1p (sqrt (fma x x x)))))",
    "output_parens": 25,
    "avg_bits_err_input": 19.97093036205265,
    "avg_bits_err_output": 19.899779234459086,
    "avg_bits_err_improve": 0.07115112759356279,
    "time": 14478.871337890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 15.0705599578238,
    "avg_bits_err_output": 15.0705599578238,
    "avg_bits_err_improve": 0,
    "time": 3652.929443359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.806541770153874,
    "avg_bits_err_output": 1.21246057057931,
    "avg_bits_err_improve": 28.594081199574564,
    "time": 24368.379638671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0707195644503525,
    "avg_bits_err_output": 0.0707195644503525,
    "avg_bits_err_improve": 0,
    "time": 9183.17626953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b (- a)) (* a b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.10308491871449,
    "avg_bits_err_output": 0.30514661719245784,
    "avg_bits_err_improve": 15.797938301522032,
    "time": 12720.645263671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* (/ PI 180.0) angle))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.247295279560415,
    "avg_bits_err_output": 20.221640172278363,
    "avg_bits_err_improve": 0.025655107282052114,
    "time": 34801.352294921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) -1e+39) (* (if (!= (* (cos (fma PI (/ angle 180.0) (/ PI 2.0))) (pow b 2.0)) 0.0) (- (- (/ (pow (* (sin (* angle (/ PI -180.0))) a) 2.0) (sin (* angle (/ PI -180.0)))) (/ 0.0 (pow b 2.0))) (/ 1.0 (/ (/ 1.0 (sin (* angle (/ PI -180.0)))) (pow b 2.0)))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0))))) (if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) 1e+135) (* 2.0 (* (* (- (pow b 2.0) (pow a 2.0)) (sin (* PI (/ angle 180.0)))) (cos (* angle (/ PI -180.0))))) (* (if (!= (* (cos (fma PI (/ angle 180.0) (/ PI 2.0))) (pow b 2.0)) 0.0) (- (- (/ (pow (* (sin (* angle (/ PI -180.0))) a) 2.0) (sin (* angle (/ PI -180.0)))) (/ 0.0 (pow b 2.0))) (/ 1.0 (/ (/ 1.0 (sin (* angle (/ PI -180.0)))) (pow b 2.0)))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0)))))))",
    "output_parens": 120,
    "avg_bits_err_input": 31.860737409601708,
    "avg_bits_err_output": 28.80411897736824,
    "avg_bits_err_improve": 3.056618432233467,
    "time": 37677.08837890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (- (* (cos (fma angle (/ PI 180.0) 1.0)) (cos 1.0)) (* (log1p (expm1 (sin (fma PI (/ angle -180.0) -1.0)))) (sin 1.0)))) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 20.41262782178542,
    "avg_bits_err_output": 20.475858510989468,
    "avg_bits_err_improve": -0.06323068920404751,
    "time": 45073.657470703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17216748125036058,
    "avg_bits_err_output": 0.17216748125036058,
    "avg_bits_err_improve": 0,
    "time": 17645.78369140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(expm1 (log1p (/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.31242730941468716,
    "avg_bits_err_output": 0.344829666778301,
    "avg_bits_err_improve": -0.032402357363613854,
    "time": 20788.484130859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13759436093777044,
    "avg_bits_err_output": 0.13759436093777044,
    "avg_bits_err_improve": 0,
    "time": 16324.367919921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi2) (* (cos (- lambda1 lambda2)) (cos phi1)) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.86179442777483,
    "avg_bits_err_output": 16.853804983264435,
    "avg_bits_err_improve": 0.007989444510393184,
    "time": 34946.62548828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 52.54893871942147,
    "avg_bits_err_output": 0.17142481250360564,
    "avg_bits_err_improve": 52.37751390691787,
    "time": 28301.614990234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (* (/ c (+ b (+ b (+ (sqrt (fma a (* c -4.0) (* b b))) (sqrt (fma a (* c -4.0) (* b b))))))) -8.0)) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 28,
    "avg_bits_err_input": 28.93968600050526,
    "avg_bits_err_output": 0.3568312047003909,
    "avg_bits_err_improve": 28.58285479580487,
    "time": 28297.383056640625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.79672286925443,
    "avg_bits_err_output": 0.2455383468827521,
    "avg_bits_err_improve": 43.55118452237168,
    "time": 25635.5263671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (exp (* 1.0 (log (- 0.0 b)))) (* a 2.0)) (/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0)))",
    "output_parens": 30,
    "avg_bits_err_input": 34.50892151664608,
    "avg_bits_err_output": 21.07802412356945,
    "avg_bits_err_improve": 13.430897393076634,
    "time": 23813.31640625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (expm1 (log1p (cos (- lambda1 lambda2)))) (cos phi1))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.8488395665463114,
    "avg_bits_err_output": 0.8548631632359707,
    "avg_bits_err_improve": -0.0060235966896592386,
    "time": 28692.902099609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(log (- (+ (expm1 (+ -1.0 (/ 2.0 (+ 2.0 (expm1 (* -2.0 x)))))) 2.0) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 29.374745308290716,
    "avg_bits_err_output": 29.38734852521859,
    "avg_bits_err_improve": -0.012603216927875138,
    "time": 18910.543212890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (if (!= (exp x) 0.0) (/ (/ (- (expm1 (* x -2.0))) (exp x)) (exp (* x -2.0))) (- (exp x) (exp (- x)))) (+ (exp x) (exp (- x))))",
    "output_parens": 20,
    "avg_bits_err_input": 58.278366926252225,
    "avg_bits_err_output": 1.1853186093777048,
    "avg_bits_err_improve": 57.09304831687452,
    "time": 21732.871826171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x 2.0)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 58.27560170097852,
    "avg_bits_err_output": 0.0655,
    "avg_bits_err_improve": 58.21010170097852,
    "time": 7247.017822265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007823120312590146,
    "avg_bits_err_output": 0.007823120312590146,
    "avg_bits_err_improve": 0,
    "time": 4655.65380859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.705625,
    "avg_bits_err_output": 31.705625,
    "avg_bits_err_improve": 0,
    "time": 5181.656982421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (+ (/ (- 1.0 x) (- 1.0 x)) (/ (+ x x) (- 1.0 x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 58.70600775417713,
    "avg_bits_err_output": 58.67065626599564,
    "avg_bits_err_improve": 0.035351488181490254,
    "time": 19281.666748046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log1p (+ (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x) -1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.04294812031259015,
    "avg_bits_err_output": 0.04327124062518029,
    "avg_bits_err_improve": -0.0003231203125901444,
    "time": 2674.670654296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12507312031259016,
    "avg_bits_err_output": 0.12507312031259016,
    "avg_bits_err_improve": 0,
    "time": 28163.364501953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.129125,
    "avg_bits_err_output": 0.129125,
    "avg_bits_err_improve": 0,
    "time": 27449.40576171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (- (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0))) (if (!= (* (cos (/ phi2 2.0)) (cos (/ phi1 2.0))) 0.0) (* (* (cos (/ phi2 2.0)) (* (cos (/ phi1 2.0)) (sin (/ phi1 2.0)))) (/ (sin (/ phi2 2.0)) (* (cos (/ phi2 2.0)) (cos (/ phi1 2.0))))) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0)))))) (- phi1 phi2)))",
    "output_parens": 40,
    "avg_bits_err_input": 38.75888818465462,
    "avg_bits_err_output": 0.12934086449536195,
    "avg_bits_err_improve": 38.62954732015926,
    "time": 28949.1015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.35516522605636,
    "avg_bits_err_output": 0.01164624062518029,
    "avg_bits_err_improve": 14.34351898543118,
    "time": 7852.673828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (if (!= (fma (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (cos phi1) (* (sin delta) (cos theta)))))) (cos delta)) 0.0) (/ (fma (sin (asin (fma (sin phi1) (cos delta) (* (cos phi1) (* (sin delta) (cos theta)))))) (* (sin (asin (fma (sin phi1) (cos delta) (* (cos phi1) (* (sin delta) (cos theta)))))) (* (sin phi1) (sin phi1))) (- (pow (cos delta) 2.0))) (fma (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (cos phi1) (* (sin delta) (cos theta)))))) (cos delta))) (fma (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (cos phi1) (* (sin delta) (cos theta)))))) (- (cos delta)))))))",
    "output_parens": 79,
    "avg_bits_err_input": 0.16115112925084202,
    "avg_bits_err_output": 0.1600095868968602,
    "avg_bits_err_improve": 0.0011415423539818115,
    "time": 44176.39453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.56052898958039,
    "avg_bits_err_output": 0.18089417344137612,
    "avg_bits_err_improve": 52.37963481613902,
    "time": 27432.402099609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 29.074130093987623,
    "avg_bits_err_output": 0.3447180468885217,
    "avg_bits_err_improve": 28.729412047099103,
    "time": 28148.509765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* -3.0 a)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.86880553911625,
    "avg_bits_err_output": 0.24284962500721127,
    "avg_bits_err_improve": 43.62595591410904,
    "time": 23188.06494140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* a -3.0)))) (- b)) 0.0) (* (* a (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b)))))) 3.0) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.5228111051199,
    "avg_bits_err_output": 22.28324826467587,
    "avg_bits_err_improve": 12.23956284044403,
    "time": 23318.246826171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (expm1 (log1p (* (cos (- lambda1 lambda2)) (* (sin phi1) (cos phi2)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.159819173272345,
    "avg_bits_err_output": 13.162831015460474,
    "avg_bits_err_improve": -0.0030118421881297763,
    "time": 36736.458740234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.148772293790792,
    "avg_bits_err_output": 0.5115680320225462,
    "avg_bits_err_improve": 28.637204261768247,
    "time": 22292.2236328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ (/ 1.0 (+ x -1.0)) (+ (/ x (+ 1.0 x)) (+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x))))) 2.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.013948120312590144,
    "avg_bits_err_improve": -0.0026981203125901448,
    "time": 6904.828857421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (- (- 1.0 (/ (+ x -1.0) (+ x -1.0))) (/ 2.0 (+ x -1.0))) (+ 1.0 x))",
    "output_parens": 9,
    "avg_bits_err_input": 14.52866119350035,
    "avg_bits_err_output": 0.078625,
    "avg_bits_err_improve": 14.450036193500349,
    "time": 18232.75244140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.15e-304) (* (sqrt (- F)) (* (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C))) (/ (sqrt (fma (* A C) -8.0 (* 2.0 (pow B 2.0)))) (- (* C (* A 4.0)) (pow B 2.0))))) (/ (* (sqrt (- (* (pow B 2.0) -2.0) (* -8.0 (* A C)))) (* (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (sqrt F))) (- (* A (* 4.0 C)) (pow B 2.0))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.332486803990264,
    "avg_bits_err_output": 46.64445162500007,
    "avg_bits_err_improve": 5.688035178990191,
    "time": 47182.37451171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 1.85e-159) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (* (- C A) (- C A)) (pow B 2.0)))))) PI)) (* 180.0 (/ (atan (/ (* 1.0 (if (!= (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))) 0.0) (/ (pow B 2.0) (- (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))))) (- C (+ A (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))))) B)) PI)))",
    "output_parens": 46,
    "avg_bits_err_input": 29.94791697115608,
    "avg_bits_err_output": 27.334830714279537,
    "avg_bits_err_improve": 2.6130862568765423,
    "time": 29718.67724609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F 2.1e-306) (/ (sqrt (* 2.0 (* F (* (- (pow B 2.0) (* A (* 4.0 C))) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))))) (- (* A (* 4.0 C)) (pow B 2.0))) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* 2.0 F))) (/ (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 44,
    "avg_bits_err_input": 52.377085075342315,
    "avg_bits_err_output": 47.68257984215814,
    "avg_bits_err_improve": 4.694505233184174,
    "time": 48242.72509765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.04371613288221,
    "avg_bits_err_output": 15.04371613288221,
    "avg_bits_err_improve": 0,
    "time": 12988.4599609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -4e-282) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (- (* g g) (* h h))) (- g)) 0.0) (* h (/ h (- (- g) (sqrt (fma g g (* h (- h))))))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 69,
    "avg_bits_err_input": 36.91913143472072,
    "avg_bits_err_output": 5.519398459682952,
    "avg_bits_err_improve": 31.399732975037765,
    "time": 39892.22216796875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9918708656323929,
    "avg_bits_err_output": 0.9794105265643932,
    "avg_bits_err_improve": 0.012460339067999704,
    "time": 14812.88818359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.6469693609377705,
    "avg_bits_err_output": 0.6469693609377705,
    "avg_bits_err_improve": 0,
    "time": 2721.431884765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-318) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+301) (/ (* a1 a2) (* b1 b2)) (/ (* a2 (/ a1 b1)) b2)))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.986655253484908,
    "avg_bits_err_output": 2.7491779700521297,
    "avg_bits_err_improve": 9.237477283432778,
    "time": 8089.80615234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (expm1 (log1p (log1p (exp x)))) (* x y))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5623637626021017,
    "avg_bits_err_output": 0.5271368421881311,
    "avg_bits_err_improve": 0.035226920413970686,
    "time": 10918.175048828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.2) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 2000000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 52.79582136742435,
    "avg_bits_err_output": 0.13898182583360547,
    "avg_bits_err_improve": 52.65683954159075,
    "time": 11252.11376953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.71919993055985,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.71919993055985,
    "time": 2065.197998046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 0,
    "time": 3729.25634765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1328.791748046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (if (!= 4.5 0.0) (/ (+ 20.25 (* (/ (pow (* r w) 2.0) (- 1.0 v)) (* (- 0.375 (* v 0.25)) 4.5))) 4.5) (fma (- 0.375 (* v 0.25)) (/ (pow (* r w) 2.0) (- 1.0 v)) 4.5)))",
    "output_parens": 23,
    "avg_bits_err_input": 13.24002046550635,
    "avg_bits_err_output": 0.3714334769712668,
    "avg_bits_err_improve": 12.868586988535082,
    "time": 22663.71484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (+ (* (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0) (* x1 x1)) (* -6.0 (* x1 x1))))))))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5127421811457701,
    "avg_bits_err_output": 0.2828339990769221,
    "avg_bits_err_improve": 0.229908182068848,
    "time": 72854.60278320312,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 19.29623075170551,
    "avg_bits_err_output": 1.3886787140474544,
    "avg_bits_err_improve": 17.907552037658057,
    "time": 5889.53369140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2240614816370412,
    "avg_bits_err_output": 0.17868892538812292,
    "avg_bits_err_improve": 0.04537255624891828,
    "time": 8799.4873046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003919694000577261,
    "avg_bits_err_output": 0.003919694000577261,
    "avg_bits_err_improve": 0,
    "time": 3195.13134765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* (/ PI (- b a)) (/ (- (/ 0.5 b) (/ 0.5 a)) (- (+ b a))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.938247422578925,
    "avg_bits_err_output": 0.2896874078262918,
    "avg_bits_err_improve": 13.648560014752633,
    "time": 18764.66259765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (- (+ (/ (- (exp (- (* eps x) x)) (exp (- (fma eps x x)))) eps) 1.0) (/ 1.0 (- (exp (fma eps x x))))) (- 1.0 (exp (- (* (- 1.0 eps) x))))) 2.0)",
    "output_parens": 21,
    "avg_bits_err_input": 29.087406643723906,
    "avg_bits_err_output": 0.934977834809709,
    "avg_bits_err_improve": 28.1524288089142,
    "time": 22071.009521484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.017125,
    "avg_bits_err_output": 0.017125,
    "avg_bits_err_improve": 0,
    "time": 4062.719970703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- (- 4.0 (/ (/ 8.0 t) (+ 2.0 (/ 2.0 t)))) (/ (- 4.0 (/ (/ 8.0 t) (+ 2.0 (/ 2.0 t)))) (+ t (/ t t))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.024125,
    "avg_bits_err_output": 0.04224060156295072,
    "avg_bits_err_improve": -0.018115601562950723,
    "time": 14490.52490234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (- (+ (pow (* 2.0 (/ t (+ t 1.0))) 2.0) -1.0) -1.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.023125,
    "avg_bits_err_output": 0.0225,
    "avg_bits_err_improve": 0.0006250000000000006,
    "time": 16459.054443359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3164.50439453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 9177.602783203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2924.37255859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.818228497284723,
    "avg_bits_err_output": 0.240375,
    "avg_bits_err_improve": 7.577853497284723,
    "time": 34118.9658203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.771673768895418,
    "avg_bits_err_output": 7.771673768895418,
    "avg_bits_err_improve": 0,
    "time": 16214.40185546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.29147747013905,
    "avg_bits_err_output": 0.0396503454963127,
    "avg_bits_err_improve": 16.251827124642737,
    "time": 12173.9599609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (cos x) 0.0) (* (if (!= (+ 1.0 (+ (pow (cos x) 2.0) 1.0)) 0.0) (/ (- (* (+ (pow (cos x) 2.0) 1.0) (+ (pow (cos x) 2.0) 1.0)) 1.0) (+ 1.0 (+ (pow (cos x) 2.0) 1.0))) (pow (cos x) 2.0)) (/ (pow (exp (* x x)) 10.0) (cos x))) (* (cos x) (pow (exp (* x x)) 10.0)))",
    "output_parens": 35,
    "avg_bits_err_input": 3.5597346939920094,
    "avg_bits_err_output": 3.070747892336758,
    "avg_bits_err_improve": 0.4889868016552512,
    "time": 17400.47900390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -20000000.0) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 2e-5) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 14.862961151971179,
    "avg_bits_err_output": 0.01,
    "avg_bits_err_improve": 14.85296115197118,
    "time": 6487.52490234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.58276838073367,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.58276838073367,
    "time": 5165.188720703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.14358561573015,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.14308561573015,
    "time": 4407.06787109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.306625,
    "avg_bits_err_improve": 63.693375,
    "time": 19895.296142578125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (* t 4e-32) t)",
    "output_parens": 2,
    "avg_bits_err_input": 61.843253347501275,
    "avg_bits_err_output": 0.401125,
    "avg_bits_err_improve": 61.442128347501274,
    "time": 17044.76220703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (* c (/ 4.0 (- (sqrt (fma a (* c -4.0) (* b b))) b))) a) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.731654172625774,
    "avg_bits_err_output": 22.726554220241503,
    "avg_bits_err_improve": 12.00509995238427,
    "time": 26241.3232421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (exp (* 1.0 (log (- 0.0 b)))) (* a 2.0)) (/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0)))",
    "output_parens": 30,
    "avg_bits_err_input": 34.50892151664608,
    "avg_bits_err_output": 21.07802412356945,
    "avg_bits_err_improve": 13.430897393076634,
    "time": 26450.452392578125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2110.819091796875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.411440673098795,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 39.401565673098794,
    "time": 5141.877197265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(* (/ (- x y) (fma x x (* y y))) (+ x y))",
    "output_parens": 6,
    "avg_bits_err_input": 19.68575504741409,
    "avg_bits_err_output": 19.970558808132104,
    "avg_bits_err_improve": -0.28480376071801317,
    "time": 5036.781982421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6721265540007746,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6721265540007746,
    "time": 6066.944580078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03875,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.037625,
    "time": 5518.545166015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01856372187554087,
    "avg_bits_err_output": 0.008375,
    "avg_bits_err_improve": 0.01018872187554087,
    "time": 6197.387939453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.012875,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.012499999999999999,
    "time": 3600.00244140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 2158.475830078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ a (+ c b))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4000428578176385,
    "avg_bits_err_output": 0.230125,
    "avg_bits_err_improve": 0.1699178578176385,
    "time": 7824.520263671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (+ (/ (+ 1.0 (cos (* x -2.0))) 2.0) -1.0) (if (!= (- 1.0 (cos x)) 0.0) (/ (+ -1.0 (pow (cos x) 2.0)) (- 1.0 (cos x))) (- -1.0 (cos x)))) (- 1.0 (cos x)))",
    "output_parens": 24,
    "avg_bits_err_input": 30.01115789529748,
    "avg_bits_err_output": 29.994097843844454,
    "avg_bits_err_improve": 0.017060051453025693,
    "time": 9879.699951171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.556461837877784,
    "avg_bits_err_output": 0.2931981203125902,
    "avg_bits_err_improve": 24.263263717565195,
    "time": 14080.3076171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (pow (sin x) 2.0) 0.0) (/ (if (!= (fma (pow (sin x) 2.0) (* x x) (pow (sin x) 4.0)) 0.0) (/ (fma (* x x) (pow (* x (pow (sin x) 2.0)) 2.0) (- (pow (sin x) 8.0))) (fma (pow (sin x) 2.0) (* x x) (pow (sin x) 4.0))) (- (* (pow (sin x) 2.0) (* x x)) (pow (sin x) 4.0))) (pow (sin x) 2.0)) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 53,
    "avg_bits_err_input": 29.68532795172709,
    "avg_bits_err_output": 29.575392077828642,
    "avg_bits_err_improve": 0.10993587389844706,
    "time": 36035.3095703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005625,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.004875,
    "time": 2950.017333984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 5e-252) (/ (* (expm1 (* n (log1p (/ i n)))) 100.0) (/ i n)) (/ (/ (- 10000.0 (* (pow (+ (/ i n) 1.0) n) 10000.0)) -100.0) (/ i n)))",
    "output_parens": 23,
    "avg_bits_err_input": 47.3425093859414,
    "avg_bits_err_output": 13.050069897691765,
    "avg_bits_err_improve": 34.292439488249634,
    "time": 27072.955078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(fma a (/ c (fma c c (* d d))) (* b (+ (/ d (* (* (fma d d (* c c)) 2.0) 2.0)) (/ (+ d (+ d d)) (* (* (fma d d (* c c)) 2.0) 2.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 25.980188192230877,
    "avg_bits_err_output": 22.98895220999991,
    "avg_bits_err_improve": 2.991235982230968,
    "time": 13745.11962890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 4e+307) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.083827027080257,
    "avg_bits_err_output": 22.709886105829494,
    "avg_bits_err_improve": 3.373940921250764,
    "time": 20032.8818359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (+ (* ux (- maxCos)) ux))",
    "output_parens": 4,
    "avg_bits_err_input": 0.035625,
    "avg_bits_err_output": 0.02065776945635998,
    "avg_bits_err_improve": 0.014967230543640016,
    "time": 6158.13525390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ (- 1.0 (log (+ 1.0 (expm1 (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))) (- (* (* ux maxCos) (fma ux maxCos (- 1.0 ux)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 13.44394324418557,
    "avg_bits_err_output": 12.262768808004004,
    "avg_bits_err_improve": 1.181174436181566,
    "time": 29277.567626953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- (* ux (fma ux maxCos (- 1.0 ux))) (+ (fma ux maxCos (- 1.0 ux)) -1.0)) (- (* (* ux maxCos) (fma ux maxCos (- 1.0 ux)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.495645621433516,
    "avg_bits_err_output": 11.148013310338461,
    "avg_bits_err_improve": 2.3476323110950545,
    "time": 28550.745361328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (sin (* (* uy 2.0) PI))) yi)) (* (* ux (* (- 1.0 ux) maxCos)) zi))",
    "output_parens": 33,
    "avg_bits_err_input": 0.32794533011683163,
    "avg_bits_err_output": 0.3236992226651708,
    "avg_bits_err_improve": 0.004246107451660819,
    "time": 38356.81982421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.19663710765478196,
    "avg_bits_err_output": 0.1968352279673721,
    "avg_bits_err_improve": -0.0001981203125901443,
    "time": 37617.671630859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (/ (+ (/ (* u1 u1) (* (- 1.0 u1) (* (- 1.0 u1) 4.0))) (* (/ (/ u1 (- 1.0 u1)) 2.0) (/ (/ u1 (- 1.0 u1)) 2.0))) (/ (/ u1 (- 1.0 u1)) 2.0)) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 29,
    "avg_bits_err_input": 0.5584054131264333,
    "avg_bits_err_output": 0.5682955758052319,
    "avg_bits_err_improve": -0.009890162678798609,
    "time": 23407.947021484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(- (sqrt (/ u1 (- 1.0 u1))) (* (sqrt (/ u1 (- 1.0 u1))) (- 1.0 (cos (* u2 -6.28318530718)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.3288798706505123,
    "avg_bits_err_output": 0.3433964855655813,
    "avg_bits_err_improve": -0.014516614915069004,
    "time": 23852.02294921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (/ (+ (- 1.0 (/ 1.0 (+ 1.0 (exp (/ PI s))))) (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ PI (- s))))))) (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 70,
    "avg_bits_err_input": 0.34622139490544057,
    "avg_bits_err_output": 0.3156888209452481,
    "avg_bits_err_improve": 0.03053257396019249,
    "time": 53792.24755859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.0604678217642843,
    "avg_bits_err_output": 0.0604678217642843,
    "avg_bits_err_improve": 0,
    "time": 12172.091064453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (- (fabs x)) s)) (+ (exp (/ (- (fabs x)) s)) 1.0)) (+ (* s (exp (/ (fabs x) (- s)))) s))",
    "output_parens": 17,
    "avg_bits_err_input": 0.14691469672015062,
    "avg_bits_err_output": 0.13421576235723232,
    "avg_bits_err_improve": 0.012698934362918302,
    "time": 19407.5693359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6377393741706877,
    "avg_bits_err_output": 0.6403502679299644,
    "avg_bits_err_improve": -0.0026108937592767,
    "time": 23003.300537109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.16001236850351017,
    "avg_bits_err_output": 0.15965373301264021,
    "avg_bits_err_improve": 0.00035863549086995183,
    "time": 25197.539794921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.5661096639661056,
    "avg_bits_err_output": 2.5661096639661056,
    "avg_bits_err_improve": 0,
    "time": 30949.049072265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O v) (* (/ 0.5 (* v (exp (* sinTheta_O (/ sinTheta_i v))))) (/ cosTheta_i (sinh (/ 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.45987599673795104,
    "avg_bits_err_output": 0.3897238185037171,
    "avg_bits_err_improve": 0.07015217823423392,
    "time": 28444.64208984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (/ (exp (+ (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v) 0.6931)) v) 0.5)",
    "output_parens": 8,
    "avg_bits_err_input": 0.11523247469693938,
    "avg_bits_err_output": 0.07511662564390106,
    "avg_bits_err_improve": 0.04011584905303832,
    "time": 13825.959228515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (+ (* alpha alpha) -1.0) (log (pow (* alpha alpha) PI))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4714917115735817,
    "avg_bits_err_output": 0.4208510263294766,
    "avg_bits_err_improve": 0.050640685244105144,
    "time": 24349.700439453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(fma s (log (pow (/ 1.0 (/ (- (/ u u) u) 0.75)) 3.0)) 0.0)",
    "output_parens": 7,
    "avg_bits_err_input": 1.3181925752395882,
    "avg_bits_err_output": 1.2300150003618817,
    "avg_bits_err_improve": 0.0881775748777065,
    "time": 26361.764892578125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (- (log1p (* u -4.0))) s)",
    "output_parens": 4,
    "avg_bits_err_input": 12.398654350062245,
    "avg_bits_err_output": 0.206,
    "avg_bits_err_improve": 12.192654350062245,
    "time": 22196.9228515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (expm1 (log1p (* 2.0 PI)))))) (* 0.75 (/ (exp (/ (/ r -3.0) s)) (* s (* PI 6.0))))) r)",
    "output_parens": 18,
    "avg_bits_err_input": 0.14816826612545544,
    "avg_bits_err_output": 0.15037293896852133,
    "avg_bits_err_improve": -0.0022046728430658857,
    "time": 25474.963134765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8504139139318614,
    "avg_bits_err_output": 0.6707863880381181,
    "avg_bits_err_improve": 0.1796275258937433,
    "time": 28909.221435546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (- (+ c (* (sqrt (- 1.0 (+ cosTheta cosTheta))) (/ (exp (* cosTheta (- cosTheta))) (if (!= (* cosTheta (sqrt PI)) 0.0) (* (* (sqrt PI) (* 2.0 cosTheta)) (* cosTheta (/ (sqrt PI) (* (sqrt PI) (* 2.0 cosTheta))))) (* cosTheta (sqrt PI)))))) -1.0))",
    "output_parens": 27,
    "avg_bits_err_input": 0.6964411828804143,
    "avg_bits_err_output": 0.4711231383962627,
    "avg_bits_err_improve": 0.22531804448415166,
    "time": 22616.870849609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sin (* 2.0 (* PI u2))) (pow (pow (log1p (- u1)) 2.0) 0.25))",
    "output_parens": 8,
    "avg_bits_err_input": 13.626070382870543,
    "avg_bits_err_output": 0.5511130372409616,
    "avg_bits_err_improve": 13.074957345629581,
    "time": 21023.298095703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.667632846796424,
    "avg_bits_err_output": 0.3076603716674523,
    "avg_bits_err_improve": 13.359972475128972,
    "time": 20261.419189453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* (- alpha) alpha) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.226162936136163,
    "avg_bits_err_output": 0.3187430453140324,
    "avg_bits_err_improve": 13.90741989082213,
    "time": 12618.824462890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ cos2phi (* alphax alphax)) (/ (/ sin2phi alphay) alphay)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.584607537057988,
    "avg_bits_err_output": 0.5277701013891799,
    "avg_bits_err_improve": 12.056837435668808,
    "time": 14886.419189453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (- (/ (/ (* (tan (* PI l)) 3.0) (+ F F)) (+ F F)) (/ (- (/ (tan (* PI l)) (+ F F))) (+ F F))))",
    "output_parens": 17,
    "avg_bits_err_input": 16.646005884411142,
    "avg_bits_err_output": 12.571178752649558,
    "avg_bits_err_improve": 4.074827131761584,
    "time": 22771.8056640625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2149387218755409,
    "avg_bits_err_output": 0.15225,
    "avg_bits_err_improve": 0.06268872187554089,
    "time": 16209.79541015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.858444100164588,
    "avg_bits_err_output": 10.771293920432264,
    "avg_bits_err_improve": 3.0871501797323244,
    "time": 23584.974365234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (- (log (/ (+ (exp (* PI (/ f -4.0))) (exp (* PI (/ f 4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* PI (* (/ f -4.0) 2.0)))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) -1.0) 1.0) (/ PI -4.0))",
    "output_parens": 34,
    "avg_bits_err_input": 61.69862389366804,
    "avg_bits_err_output": 1.7478539029330238,
    "avg_bits_err_improve": 59.95076999073502,
    "time": 54067.032958984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= l -5.8e+130) (* t (/ (sqrt 2.0) (sqrt (+ (fma (- l) l (* l l)) (+ 0.0 (fma (- (fabs l)) (fabs l) (* l l))))))) (if (<= l 4e+118) (* t (/ (sqrt 2.0) (sqrt (+ (fma l l (* l (- l))) (- (* (fma 2.0 (* t t) (* l l)) (/ (+ x 1.0) (+ x -1.0))) (* l l)))))) (/ (* (sqrt 2.0) t) (sqrt (fma l (- l) (fma l (fma l -1.0 l) (/ (* (+ x 1.0) (fma 2.0 (* t t) (* l l))) (+ x -1.0))))))))",
    "output_parens": 50,
    "avg_bits_err_input": 43.0165951562062,
    "avg_bits_err_output": 39.91014483226958,
    "avg_bits_err_improve": 3.1064503239366204,
    "time": 33538.8916015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin ky) (/ (sin th) (hypot (sin ky) (sin kx))))",
    "output_parens": 7,
    "avg_bits_err_input": 3.802986425580912,
    "avg_bits_err_output": 0.2528847750043268,
    "avg_bits_err_improve": 3.550101650576585,
    "time": 32135.6953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (- (- (sqrt (- (* 4.0 (+ (pow (* (/ l Om) (sin ky)) 2.0) (pow (* (/ l Om) (sin kx)) 2.0))) -1.0)) -1.0) 1.0)) 0.5)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.9689041181878356,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 0.9597791181878356,
    "time": 17741.189697265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (/ (* Om (/ Om Omc)) Omc)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.004405037257653,
    "avg_bits_err_output": 10.004530037257654,
    "avg_bits_err_improve": -0.00012500000000059686,
    "time": 18037.558349609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 5e-313) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (* (sqrt (fabs n)) (sqrt (fabs U)))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 5e+282) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (* (sqrt (fabs n)) (sqrt (fabs U))))))",
    "output_parens": 80,
    "avg_bits_err_input": 34.3563435188631,
    "avg_bits_err_output": 15.69522651260882,
    "avg_bits_err_improve": 18.66111700625428,
    "time": 43938.381591796875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1.45e-96) (/ 2.0 (* (* (/ k t) (* (sin k) (/ (tan k) l))) (* (pow t 3.0) (/ (/ k l) t)))) (if (<= t 1.35e-108) 0.0 (/ 2.0 (* (* (/ k t) (* (sin k) (/ (tan k) l))) (* (pow t 3.0) (/ (/ k l) t))))))",
    "output_parens": 28,
    "avg_bits_err_input": 47.70244897910644,
    "avg_bits_err_output": 23.513102922341194,
    "avg_bits_err_improve": 24.18934605676525,
    "time": 45502.5576171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -2e-108) (/ 2.0 (* (/ (tan k) l) (* (pow t 3.0) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (sin k) l))))) (if (<= t 2.5e-80) 0.0 (/ 2.0 (* (/ (tan k) l) (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ (pow t 3.0) l)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 32.00405801311554,
    "avg_bits_err_output": 22.227879236868198,
    "avg_bits_err_improve": 9.776178776247342,
    "time": 31468.25634765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(+ (* a1 (/ (* a1 (cos th)) (sqrt 2.0))) (* a2 (* a2 (/ (cos th) (sqrt 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.530235153146095,
    "avg_bits_err_output": 0.4584095890824231,
    "avg_bits_err_improve": 0.07182556406367196,
    "time": 24555.865966796875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* PI (* n 2.0)) (* k -0.5)) (/ (sqrt (* PI (* n 2.0))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4558140234749733,
    "avg_bits_err_output": 0.33086379988342224,
    "avg_bits_err_improve": 0.12495022359155106,
    "time": 20000.247802734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (- (exp l) (exp (- l))) (* J (cos (/ K 2.0)))) U)",
    "output_parens": 9,
    "avg_bits_err_input": 17.295902563258757,
    "avg_bits_err_output": 17.295962540322744,
    "avg_bits_err_improve": -5.997706398730429e-05,
    "time": 25337.8544921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (if (!= (- M (* (+ m n) (/ K 2.0))) 0.0) 0.0 (- (* (+ m n) (/ K 2.0)) M))) (exp (- (fabs (- m n)) (+ (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M)) l))))",
    "output_parens": 24,
    "avg_bits_err_input": 15.259977517909437,
    "avg_bits_err_output": 1.4026788547114186,
    "avg_bits_err_improve": 13.85729866319802,
    "time": 16490.160400390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.33732312031259,
    "avg_bits_err_output": 18.33732312031259,
    "avg_bits_err_improve": 0,
    "time": 33544.728515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* M D) -2e+50) (* w0 (sqrt (- 1.0 (fma D (* D (* (/ M (+ d d)) (* M (/ h (* (+ d d) l))))) 0.0)))) (if (<= (* M D) 2e+165) (* w0 (sqrt (- 1.0 (/ (* (pow (/ (/ (* D M) d) 2.0) 2.0) h) l)))) (* w0 (sqrt (- 1.0 (fma (* (* D (/ M (+ d d))) (/ (* D h) (* (+ d d) l))) M 0.0))))))",
    "output_parens": 39,
    "avg_bits_err_input": 13.991339047435492,
    "avg_bits_err_output": 10.216646576738977,
    "avg_bits_err_improve": 3.7746924706965146,
    "time": 28339.143798828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= V -5e-309) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (* c0 (* (sqrt (/ A l)) (sqrt (/ 1.0 V)))))",
    "output_parens": 16,
    "avg_bits_err_input": 19.489491733666977,
    "avg_bits_err_output": 11.888229683109834,
    "avg_bits_err_improve": 7.601262050557143,
    "time": 19599.8701171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* M M) 1e-81) (* c0 (/ (if (!= (- (* d (* c0 (/ d (* D (* D (* w h)))))) (sqrt (- (pow (* d (* c0 (/ d (* D (* D (* w h)))))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* c0 (/ d (* D (* D (* w h)))))) (sqrt (- (pow (* d (* c0 (/ d (* D (* D (* w h)))))) 2.0) (* M M)))))) (fma d (* c0 (/ d (* D (* D (* w h))))) (sqrt (- (pow (* d (* c0 (/ d (* D (* D (* w h)))))) 2.0) (* M M))))) (+ w w))) (if (<= (* M M) 4e-13) (* (/ c0 (* 2.0 w)) (if (!= (- (* (* d (/ d w)) (/ c0 (* D (* D h)))) (sqrt (- (pow (* (* d (/ d w)) (/ c0 (* D (* D h)))) 2.0) (* M M)))) 0.0) (/ (fma M M 0.0) (- (* (* d (/ d w)) (/ c0 (* D (* D h)))) (sqrt (- (pow (* (* d (/ d w)) (/ c0 (* D (* D h)))) 2.0) (* M M))))) (fma (/ c0 (* D D)) (* d (/ d (* w h))) (sqrt (- (pow (* (* d (/ d w)) (/ c0 (* D (* D h)))) 2.0) (* M M)))))) (* c0 (/ (if (!= (- (* d (* c0 (/ d (* D (* D (* w h)))))) (sqrt (- (pow (* d (* c0 (/ d (* D (* D (* w h)))))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (* c0 (/ d (* D (* D (* w h)))))) (* (sqrt (- M (* d (/ (* d c0) (* w (* h (* D D))))))) (sqrt (- (fma d (/ (* d c0) (* w (* h (* D D)))) M))))))) (fma d (* c0 (/ d (* D (* D (* w h))))) (sqrt (- (pow (* d (* c0 (/ d (* D (* D (* w h)))))) 2.0) (* M M))))) (+ w w)))))",
    "output_parens": 184,
    "avg_bits_err_input": 59.53181243466636,
    "avg_bits_err_output": 28.59596258913192,
    "avg_bits_err_improve": 30.935849845534438,
    "time": 60475.344482421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 2e+261) (* (sqrt (/ d l)) (* (fma 0.5 (* (/ h l) (pow (/ (* D M) (+ d d)) 2.0)) -1.0) (- (sqrt (/ d h))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) INFINITY) (* (* (sqrt (/ d (* h l))) (sqrt d)) (+ 1.0 (* h (/ (/ (pow (/ (* M D) d) 2.0) -8.0) l)))) (+ (* h (* (/ (pow (* D (/ M d)) 2.0) (* -8.0 l)) (sqrt (* d (/ d (* h l)))))) (sqrt (* d (/ d (* h l)))))))",
    "output_parens": 75,
    "avg_bits_err_input": 26.41690728909107,
    "avg_bits_err_output": 23.03609302509094,
    "avg_bits_err_improve": 3.380814264000133,
    "time": 46357.739501953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (/ 0.25 (fma x x 1.0))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 33,
    "avg_bits_err_input": 15.39205824064325,
    "avg_bits_err_output": 14.887161268921657,
    "avg_bits_err_improve": 0.5048969717215925,
    "time": 9833.21875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (fma (- v) (/ v 0.16666666666666666) 2.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9870637218755409,
    "avg_bits_err_output": 0.011365601562950722,
    "avg_bits_err_improve": 0.9756981203125902,
    "time": 4874.0966796875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (- 1.0 (* v (* v 5.0))) (* PI (sqrt (fma v (* v -6.0) 2.0)))) (- t (* v (* v t))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45553459325646145,
    "avg_bits_err_output": 0.11026337660623807,
    "avg_bits_err_improve": 0.34527121665022337,
    "time": 20610.12646484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt (* 2.0 (if (!= (* 3.0 (* v v)) 0.0) (- (/ (- 3.0 (* v (* v 9.0))) 3.0) 0.0) (- 1.0 (* 3.0 (* v v)))))) 4.0) (- 1.0 (* v v)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.011167481250360578,
    "avg_bits_err_output": 0.008448120312590145,
    "avg_bits_err_improve": 0.002719360937770433,
    "time": 17614.722900390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5285635298177244,
    "avg_bits_err_output": 0.5285635298177244,
    "avg_bits_err_improve": 0,
    "time": 9489.544189453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.0529347922808627,
    "avg_bits_err_output": 2.026913551655683,
    "avg_bits_err_improve": 0.026021240625179853,
    "time": 15807.868896484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- EDonor (- Ec (+ Vef mu))) KbT)))) (/ NaChar (+ 1.0 (* (exp (/ (+ EAccept (- (+ Vef Ev) mu)) (+ KbT KbT))) (exp (/ (+ EAccept (- (+ Vef Ev) mu)) (+ KbT KbT)))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.024823660533951273,
    "avg_bits_err_output": 0.025101459586618326,
    "avg_bits_err_improve": -0.00027779905266705346,
    "time": 10673.905517578125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (* (* b b) (+ (* b b) (* a (+ a a))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18200977500432683,
    "avg_bits_err_output": 0.0937949250014423,
    "avg_bits_err_improve": 0.08821485000288452,
    "time": 9754.25927734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (fma (* b b) (fma a a (* b b)) (* a (+ (* a (* b b)) (* a (* a a))))) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 29,
    "avg_bits_err_input": 0.18484082587449863,
    "avg_bits_err_output": 0.1623199815077991,
    "avg_bits_err_improve": 0.022520844366699516,
    "time": 18891.864990234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (+ (pow b 4.0) (* (pow (* b a) 2.0) 2.0))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 17,
    "avg_bits_err_input": 0.18622876449628095,
    "avg_bits_err_output": 0.021503512539002227,
    "avg_bits_err_improve": 0.16472525195727872,
    "time": 16037.359619140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(exp (log (sqrt (+ 0.5 (* (/ x (sqrt (fma x x (* 4.0 (* p p))))) 0.5)))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.036152592432723,
    "avg_bits_err_output": 13.035510181118193,
    "avg_bits_err_improve": 0.0006424113145300225,
    "time": 17850.01416015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.89204784365195,
    "avg_bits_err_output": 0.064875,
    "avg_bits_err_improve": 40.82717284365195,
    "time": 6466.94482421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (tan x)))",
    "output_parens": 5,
    "avg_bits_err_input": 31.55902957880205,
    "avg_bits_err_output": 31.55902957880205,
    "avg_bits_err_improve": 0,
    "time": 19437.577880859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) 0.0) (* a (/ c (- (- b_2) (pow (fma b_2 b_2 (* c (- a))) 0.5)))) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a)",
    "output_parens": 21,
    "avg_bits_err_input": 33.250716627551554,
    "avg_bits_err_output": 21.600163701690672,
    "avg_bits_err_improve": 11.650552925860882,
    "time": 15407.00732421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.11813922100866,
    "avg_bits_err_output": 21.70955176811687,
    "avg_bits_err_improve": 12.40858745289179,
    "time": 19011.46923828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.86615493825549,
    "avg_bits_err_output": 31.104519833951805,
    "avg_bits_err_improve": 0.7616351043036858,
    "time": 18300.5703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.852489982194086,
    "avg_bits_err_output": 32.51812812906013,
    "avg_bits_err_improve": 0.33436185313395583,
    "time": 32503.219970703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (- (- (exp (log (+ (exp (- (log1p N) (log N))) 2.0))) 1.0) 2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.80565365569737,
    "avg_bits_err_output": 29.83568213219907,
    "avg_bits_err_improve": -0.030028476501701817,
    "time": 15333.269287109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ (+ (/ x (- -1.0 x)) (if (!= (+ (/ x (- -1.0 x)) 2.0) 0.0) (/ 1.0 (/ 1.0 (+ (/ x (- -1.0 x)) 2.0))) (+ (/ x (- -1.0 x)) 2.0))) -2.0) x)",
    "output_parens": 18,
    "avg_bits_err_input": 14.266997377295024,
    "avg_bits_err_output": 14.267148076941835,
    "avg_bits_err_improve": -0.0001506996468112476,
    "time": 15921.295166015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))",
    "output_parens": 8,
    "avg_bits_err_input": 40.063134977209515,
    "avg_bits_err_output": 6.328703402832806,
    "avg_bits_err_improve": 33.73443157437671,
    "time": 23498.257568359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.287079827296214,
    "avg_bits_err_output": 29.98137038087552,
    "avg_bits_err_improve": 0.30570944642069264,
    "time": 13199.07666015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log1p (- (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 29.820413235775288,
    "avg_bits_err_output": 29.827045281214694,
    "avg_bits_err_improve": -0.006632045439406653,
    "time": 23716.501220703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* -4.0 a) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* -4.0 a) (* b b)))))) (- (sqrt (fma c (* -4.0 a) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.497212251970524,
    "avg_bits_err_output": 21.74436731548277,
    "avg_bits_err_improve": 11.752844936487755,
    "time": 28352.14208984375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.777319510496454,
    "avg_bits_err_output": 21.560501065688683,
    "avg_bits_err_improve": 12.216818444807771,
    "time": 23598.195068359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ 2.0 (/ 2.0 (/ (log1p (- x)) (log1p x))))",
    "output_parens": 6,
    "avg_bits_err_input": 61.249397783302264,
    "avg_bits_err_output": 0.02708985000288464,
    "avg_bits_err_improve": 61.222307933299376,
    "time": 16837.4794921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log1p n) (log n)) n)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 63.0038189906172,
    "avg_bits_err_output": 44.22593225076891,
    "avg_bits_err_improve": 18.777886739848284,
    "time": 17457.51513671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (+ (- (+ (/ 1.0 (+ 1.0 eps)) -1.0) (/ (+ eps eps) (+ eps (+ eps 2.0)))) (/ (fma (- (+ 1.0 (/ (+ eps eps) (+ eps (+ eps 2.0))))) (/ 1.0 (+ 1.0 eps)) (/ (+ 1.0 (/ (+ eps eps) (+ eps (+ eps 2.0)))) (+ 1.0 eps))) (/ 1.0 (+ 1.0 eps)))))",
    "output_parens": 29,
    "avg_bits_err_input": 58.505118567529436,
    "avg_bits_err_output": 50.44880517034882,
    "avg_bits_err_improve": 8.056313397180617,
    "time": 18867.279296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(log (+ 1.0 (expm1 (/ (/ (+ (/ 2.0 (/ 2.0 (tan x))) (/ -16.0 (/ 16.0 x))) x) (tan x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 59.799133600510245,
    "avg_bits_err_output": 59.827016584912776,
    "avg_bits_err_improve": -0.027882984402531008,
    "time": 30829.221435546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ a b)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.26191170306846,
    "avg_bits_err_output": 29.067845303928998,
    "avg_bits_err_improve": 31.194066399139466,
    "time": 28188.9326171875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.198204675298605,
    "avg_bits_err_output": 0.42041748125036066,
    "avg_bits_err_improve": 40.777787194048244,
    "time": 7122.5986328125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.61771282688367,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.61746282688367,
    "time": 2557.116455078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.76068083760891,
    "avg_bits_err_output": 0.014410952987381808,
    "avg_bits_err_improve": 29.746269884621526,
    "time": 4893.5703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (- (/ 1.0 (exp (- x))) (/ (fma (exp x) 2.0 -1.0) (* (exp x) 2.0))) (/ (+ (exp x) -0.5) (exp x)))",
    "output_parens": 14,
    "avg_bits_err_input": 30.009672811185897,
    "avg_bits_err_output": 30.000278003353426,
    "avg_bits_err_improve": 0.009394807832471486,
    "time": 19668.71728515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ (* x (/ 2.0 (+ x 1.0))) (+ x x)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 9.253645595574053,
    "avg_bits_err_output": 9.294807171297233,
    "avg_bits_err_improve": -0.04116157572318002,
    "time": 23200.54638671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (tan (+ x eps)) 0.0) (* (tan (+ x eps)) (- (/ (tan (+ x eps)) (tan (+ x eps))) (/ (tan x) (log1p (expm1 (tan (+ x eps))))))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 23,
    "avg_bits_err_input": 37.19322870327347,
    "avg_bits_err_output": 37.214188267827964,
    "avg_bits_err_improve": -0.020959564554495103,
    "time": 19539.677001953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.267771417149046,
    "avg_bits_err_output": 0.1703067671895733,
    "avg_bits_err_improve": 30.097464649959473,
    "time": 14787.35205078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.32740431185747,
    "avg_bits_err_output": 22.159901899424472,
    "avg_bits_err_improve": 15.167502412432999,
    "time": 21885.500732421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(if (!= (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (- x -1.0)))) 0.0) (/ (if (!= (/ -1.0 (+ x 1.0)) 0.0) (/ (fma (/ 1.0 x) (/ -1.0 (+ x 1.0)) (pow (/ -1.0 (+ x 1.0)) 2.0)) (/ -1.0 (+ x 1.0))) (+ (/ -1.0 (+ x 1.0)) (/ 1.0 x))) (+ (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (- x -1.0))))) (+ (/ 1.0 (sqrt x)) (/ -1.0 (sqrt (- x -1.0)))))",
    "output_parens": 39,
    "avg_bits_err_input": 19.91670907442092,
    "avg_bits_err_output": 19.933990304326876,
    "avg_bits_err_improve": -0.01728122990595793,
    "time": 17939.841064453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (if (!= (/ (fma (atan (+ N 1.0)) (atan (+ N 1.0)) (* (atan N) (- (atan N)))) (- (- (atan N)) (atan (+ N 1.0)))) 0.0) (/ (- 0.0 (pow (/ (- (* (atan N) (atan N)) (* (atan (+ N 1.0)) (atan (+ N 1.0)))) (- (- (atan N)) (atan (+ N 1.0)))) 2.0)) (/ (fma (atan (+ N 1.0)) (atan (+ N 1.0)) (* (atan N) (- (atan N)))) (- (- (atan N)) (atan (+ N 1.0))))) (/ (- (* (atan N) (atan N)) (* (atan (+ N 1.0)) (atan (+ N 1.0)))) (- (- (atan N)) (atan (+ N 1.0))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 75,
    "avg_bits_err_input": 14.767982564178892,
    "avg_bits_err_output": 14.777297691009386,
    "avg_bits_err_improve": -0.009315126830493625,
    "time": 10110.156005859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.397892207208027,
    "avg_bits_err_output": 1.1879858716004401,
    "avg_bits_err_improve": 28.209906335607588,
    "time": 25258.903564453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07326204570071307,
    "avg_bits_err_output": 0.07326204570071307,
    "avg_bits_err_improve": 0,
    "time": 16490.914794921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b (- a)) (* a b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.437323458131658,
    "avg_bits_err_output": 0.31009718125612984,
    "avg_bits_err_improve": 16.12722627687553,
    "time": 12750.165283203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (- (* (- (* (cos (* angle (/ PI 1440.0))) (cos (* (/ PI 1440.0) (+ angle (+ angle angle))))) (* (sin (* angle (/ PI 1440.0))) (sin (* (/ PI 1440.0) (+ angle (+ angle angle)))))) (cos (* (+ (+ angle angle) (+ angle angle)) (/ PI 1440.0)))) (* (+ (* (cos (* (/ PI 1440.0) (+ angle (+ angle angle)))) (sin (* angle (/ PI 1440.0)))) (* (cos (* angle (/ PI 1440.0))) (sin (* (/ PI 1440.0) (+ angle (+ angle angle)))))) (sin (* (+ (+ angle angle) (+ angle angle)) (/ PI 1440.0)))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 61,
    "avg_bits_err_input": 20.821060747476913,
    "avg_bits_err_output": 20.847916414507804,
    "avg_bits_err_improve": -0.026855667030890373,
    "time": 44684.615478515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(fma (cos (fma PI (/ angle -180.0) PI)) (* (sin (* PI (/ angle -180.0))) (* -2.0 (- (pow a 2.0) (pow b 2.0)))) 0.0)",
    "output_parens": 12,
    "avg_bits_err_input": 30.81752120710567,
    "avg_bits_err_output": 30.775256669399262,
    "avg_bits_err_improve": 0.04226453770640859,
    "time": 34148.03271484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (* (- 1.0 (+ (/ PI 180.0) 1.0)) (- angle)))) 2.0))",
    "output_parens": 14,
    "avg_bits_err_input": 20.12189732157665,
    "avg_bits_err_output": 20.182777441675654,
    "avg_bits_err_improve": -0.060880120099003676,
    "time": 37814.12646484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17863684218813097,
    "avg_bits_err_output": 0.17853375534275098,
    "avg_bits_err_improve": 0.00010308684537999047,
    "time": 19197.063232421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3155272590284995,
    "avg_bits_err_output": 0.31605836151823247,
    "avg_bits_err_improve": -0.0005311024897329819,
    "time": 18558.167724609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (/ e (fma e (cos v) 1.0)) (sin v))",
    "output_parens": 5,
    "avg_bits_err_input": 0.13592403967784733,
    "avg_bits_err_output": 0.13619812031259015,
    "avg_bits_err_improve": -0.00027408063474282374,
    "time": 15381.2685546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.456186758291835,
    "avg_bits_err_output": 16.45197347502879,
    "avg_bits_err_improve": 0.004213283263045042,
    "time": 38395.40087890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.120791713719925,
    "avg_bits_err_output": 0.18108045156583524,
    "avg_bits_err_improve": 51.93971126215409,
    "time": 25621.490966796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (* a 8.0) (/ c (- (- b) (+ b (+ (sqrt (fma c (* a -4.0) (* b b))) (sqrt (+ (* b b) (* a (* c -4.0))))))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 31,
    "avg_bits_err_input": 28.605496859858842,
    "avg_bits_err_output": 0.3626002050870716,
    "avg_bits_err_improve": 28.24289665477177,
    "time": 24733.000732421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 43.99124497118306,
    "avg_bits_err_output": 0.23640150469462118,
    "avg_bits_err_improve": 43.75484346648844,
    "time": 28732.69287109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (* c (/ -4.0 (+ b (if (!= (sqrt (fma c (* a -4.0) (* b b))) 0.0) (/ 1.0 (/ 1.0 (sqrt (fma c (* a -4.0) (* b b))))) (sqrt (fma c (* a -4.0) (* b b)))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 35,
    "avg_bits_err_input": 33.50072855114043,
    "avg_bits_err_output": 21.776680274883287,
    "avg_bits_err_improve": 11.724048276257147,
    "time": 26255.194580078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8208514187129492,
    "avg_bits_err_output": 0.8147689649444515,
    "avg_bits_err_improve": 0.006082453768497698,
    "time": 27789.519775390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (/ (log (+ 1.0 (expm1 (+ -1.0 (/ 4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)))))) (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 27,
    "avg_bits_err_input": 29.025259517857783,
    "avg_bits_err_output": 29.021328336698915,
    "avg_bits_err_improve": 0.003931181158868924,
    "time": 22872.35693359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (/ (- (expm1 (* x -2.0))) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output_parens": 11,
    "avg_bits_err_input": 58.14127252826874,
    "avg_bits_err_output": 1.1266511281273441,
    "avg_bits_err_improve": 57.0146214001414,
    "time": 18468.0380859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.0175177741536,
    "avg_bits_err_output": 0.05232312031259015,
    "avg_bits_err_improve": 57.96519465384101,
    "time": 6812.418701171875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(expm1 (log1p (/ 2.0 (+ (exp x) (exp (- x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.008563721875540865,
    "avg_bits_err_output": 0.00867932343849159,
    "avg_bits_err_improve": -0.00011560156295072413,
    "time": 2245.861328125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log1p (+ (+ x (sqrt (fma x x -1.0))) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 32.345625,
    "avg_bits_err_output": 32.346125,
    "avg_bits_err_improve": -0.0005000000000023874,
    "time": 6180.65771484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (+ (/ (- 1.0 x) (- 1.0 x)) (/ (+ x x) (- 1.0 x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 58.49709355993969,
    "avg_bits_err_output": 58.457794386726086,
    "avg_bits_err_improve": 0.039299173213606764,
    "time": 20484.25048828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.06044812031259014,
    "avg_bits_err_output": 0.06044812031259014,
    "avg_bits_err_improve": 0,
    "time": 4069.455322265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma ew (* (sin t) (cos (atan (/ eh (* ew (tan t)))))) (* (* eh (cos t)) (sin (atan (/ eh (* ew (tan t))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12719812031259015,
    "avg_bits_err_output": 0.12644812031259015,
    "avg_bits_err_improve": 0.0007500000000000007,
    "time": 29946.209228515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12925,
    "avg_bits_err_output": 0.12925,
    "avg_bits_err_improve": 0,
    "time": 23774.630859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* (- lambda1 lambda2) (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0)))) (* (sin (/ phi1 2.0)) (* (- lambda1 lambda2) (sin (/ phi2 2.0))))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 38.41878921237882,
    "avg_bits_err_output": 0.13034698567716468,
    "avg_bits_err_improve": 38.288442226701655,
    "time": 27973.428466796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.75590394101239,
    "avg_bits_err_output": 0.011280990939180448,
    "avg_bits_err_improve": 14.744622950073209,
    "time": 10262.214599609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.15402250659705077,
    "avg_bits_err_output": 0.1506382414334477,
    "avg_bits_err_improve": 0.003384265163603073,
    "time": 40539.20263671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.16219721394157,
    "avg_bits_err_output": 0.1785097750043269,
    "avg_bits_err_improve": 51.98368743893724,
    "time": 30648.669677734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -3.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma b b (* (* a c) -3.0))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.741924115096033,
    "avg_bits_err_output": 0.3411733253996616,
    "avg_bits_err_improve": 28.40075078969637,
    "time": 27702.63037109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* a -3.0)))) (- b)) 0.0) (fma (* a -3.0) (/ c (- b (- (sqrt (fma c (* a -3.0) (* b b)))))) 0.0) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 44.026525042560394,
    "avg_bits_err_output": 0.23530714375685075,
    "avg_bits_err_improve": 43.791217898803545,
    "time": 30297.206298828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -1.32e+154) (* (/ -0.3333333333333333 a) b) (/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma b b (* a (* c -3.0)))))) (* a 3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a)))",
    "output_parens": 28,
    "avg_bits_err_input": 33.5403086642602,
    "avg_bits_err_output": 20.701760010630192,
    "avg_bits_err_improve": 12.83854865363001,
    "time": 29769.107666015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (if (!= (sin (- lambda1 lambda2)) 0.0) (/ 1.0 (/ 1.0 (sin (- lambda1 lambda2)))) (sin (- lambda1 lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 23,
    "avg_bits_err_input": 13.392803135743739,
    "avg_bits_err_output": 13.408601892827734,
    "avg_bits_err_improve": -0.015798757083995696,
    "time": 37611.196533203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (+ (/ (- (+ x -1.0) (* x (/ x (+ x 1.0)))) (- 1.0 x)) (/ (/ x (+ x 1.0)) (- 1.0 x))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.25925549259497,
    "avg_bits_err_output": 0.4431942437171937,
    "avg_bits_err_improve": 28.816061248877777,
    "time": 22657.858154296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (+ (/ 1.0 (+ x -1.0)) (/ x (+ 2.0 (+ x x)))) (/ x (+ 2.0 (+ x x))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.06474896725995868,
    "avg_bits_err_improve": -0.05349896725995869,
    "time": 6736.986083984375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (/ -1.0 (+ x 1.0)) (+ -1.0 (/ x (+ x 1.0)))) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 14.255973601060752,
    "avg_bits_err_output": 12.398575538971741,
    "avg_bits_err_improve": 1.8573980620890111,
    "time": 23992.290771484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2.4e-295) (* (* (if (!= (sqrt (- (pow B 2.0) (* A (* C 4.0)))) 0.0) (/ (- (pow B 2.0) (* A (* C 4.0))) (sqrt (- (pow B 2.0) (* A (* C 4.0))))) (sqrt (- (pow B 2.0) (* A (* C 4.0))))) (sqrt (* F -2.0))) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt F) (sqrt (* (- (pow B 2.0) (* A (* C 4.0))) -2.0))) (/ (sqrt (if (!= A 0.0) (/ (- (* A (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C)) (* A A)) A) (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C)))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 75,
    "avg_bits_err_input": 52.337215148945475,
    "avg_bits_err_output": 46.87899252311481,
    "avg_bits_err_improve": 5.458222625830665,
    "time": 42166.5810546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) -1.0) (/ (* (atan (/ (if (!= A 0.0) (/ (* A (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) A) (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) B)) 180.0) PI) (if (<= (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) 0.785398163) (* (atan (* (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A)) 0.0) (/ (- (pow B 2.0) (* (pow (- A C) 2.0) 0.0)) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (- C A))) (+ (- A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (/ -1.0 B))) (/ 180.0 PI)) (if (!= (* (atan (/ (- (- C (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) A) B)) (/ 180.0 PI)) 0.0) (* (pow (/ 180.0 PI) 2.0) (/ (pow (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) 2.0) (* (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) (/ 180.0 PI)))) (* (atan (/ (- (- C (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) A) B)) (/ 180.0 PI)))))",
    "output_parens": 129,
    "avg_bits_err_input": 29.861659304921883,
    "avg_bits_err_output": 26.03314595794663,
    "avg_bits_err_improve": 3.828513346975253,
    "time": 25512.734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -4.3e-179) (* (/ (sqrt (- (* A (* 4.0 C)) (pow B 2.0))) (- (* A (* 4.0 C)) (pow B 2.0))) (sqrt (* (- F) (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))))) (/ (- (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (* (sqrt F) (sqrt (* 2.0 (if (!= (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) 0.0) (/ (- (- (* (+ A C) (+ A C)) (pow (- A C) 2.0)) (pow B 2.0)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C)))))))) (- (pow B 2.0) (* 4.0 (* A C)))))",
    "output_parens": 72,
    "avg_bits_err_input": 52.21040211276203,
    "avg_bits_err_output": 46.44483275736438,
    "avg_bits_err_improve": 5.765569355397652,
    "time": 50932.558349609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.428865641902025,
    "avg_bits_err_output": 15.428865641902025,
    "avg_bits_err_improve": 0,
    "time": 15938.47265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -5e-280) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (sqrt (- (* g g) (* h h))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (+ g (sqrt (- (* g g) (* h h)))) 0.0) (* h (/ (- h) (+ g (sqrt (- (* g g) (* h h)))))) (- (sqrt (- (* g g) (* h h))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 66,
    "avg_bits_err_input": 35.81181306384064,
    "avg_bits_err_output": 18.41413022402609,
    "avg_bits_err_improve": 17.39768283981455,
    "time": 30766.804443359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (- (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))) (* (sin (* PI 0.6666666666666666)) (sin (/ (acos (/ g (- h))) 3.0)))) (* (expm1 (log1p (sin (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) -3.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.9892646625064913,
    "avg_bits_err_output": 0.03266541406655652,
    "avg_bits_err_improve": 0.9565992484399347,
    "time": 24164.440673828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7293776763925557,
    "avg_bits_err_output": 0.7293776763925557,
    "avg_bits_err_improve": 0,
    "time": 5645.155029296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ 1.0 b1) (* a2 (/ a1 b2))) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-289) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e-244) (* (/ (/ a2 b1) b2) a1) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+308) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 37,
    "avg_bits_err_input": 11.259932373714525,
    "avg_bits_err_output": 3.1169305225528876,
    "avg_bits_err_improve": 8.143001851161637,
    "time": 10331.554931640625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5141795882180192,
    "avg_bits_err_output": 0.4405,
    "avg_bits_err_improve": 0.07367958821801923,
    "time": 9076.21533203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.04) (log (if (!= (- x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 200000000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 43,
    "avg_bits_err_input": 53.072991959607606,
    "avg_bits_err_output": 0.030237761553388216,
    "avg_bits_err_improve": 53.04275419805422,
    "time": 11932.255615234375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.737987692005759,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.737987692005759,
    "time": 2544.166015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (* (- 1.0 x) (/ 1.0 (+ 1.0 x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.012125,
    "avg_bits_err_improve": -0.0006250000000000006,
    "time": 5448.68603515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1385.858154296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= r -20.0) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* r (* w (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (if (<= r 0.0002) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* w (* r (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* r (* w (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.927482184284866,
    "avg_bits_err_output": 0.28783985000288453,
    "avg_bits_err_improve": 12.639642334281982,
    "time": 22463.728759765625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (- (- 1.0 (+ -1.0 (* x1 (* x1 -3.0)))) 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* (* x1 x1) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)))))) (+ x1 x1)))",
    "output_parens": 50,
    "avg_bits_err_input": 0.5116336805139391,
    "avg_bits_err_output": 0.2938057724925655,
    "avg_bits_err_improve": 0.21782790802137358,
    "time": 70122.08959960938,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- v) (+ t1 u)) (/ t1 (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 17.88612866222424,
    "avg_bits_err_output": 1.3600987478036544,
    "avg_bits_err_improve": 16.526029914420587,
    "time": 7606.40625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.22938228322697118,
    "avg_bits_err_output": 0.22938228322697118,
    "avg_bits_err_improve": 0,
    "time": 6980.748779296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2386.1875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (- (/ (/ (/ PI 2.0) a) (+ a b)) (/ (/ PI 2.0) (* b (+ a b)))) (- b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.76977070297973,
    "avg_bits_err_output": 0.2425734968798676,
    "avg_bits_err_improve": 14.527197206099864,
    "time": 19123.31494140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (exp (* x (- -1.0 (- eps)))) (+ (- 1.0 (/ (exp (* x (- -1.0 (- eps)))) eps)) (/ (+ (/ 1.0 eps) -1.0) (exp (fma eps x x))))) 1.0) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.50826244526362,
    "avg_bits_err_output": 1.3639103624442823,
    "avg_bits_err_improve": 28.14435208281934,
    "time": 22658.275390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.027875,
    "avg_bits_err_output": 0.027875,
    "avg_bits_err_improve": 0,
    "time": 4949.273193359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- (- 4.0 (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t))) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0)))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.03175,
    "avg_bits_err_output": 0.09955676718957338,
    "avg_bits_err_improve": -0.06780676718957337,
    "time": 15709.9658203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (- (+ 1.0 (pow (* 2.0 (/ t (+ t 1.0))) 2.0)) -1.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.033625,
    "avg_bits_err_output": 0.031875,
    "avg_bits_err_improve": 0.0017500000000000016,
    "time": 18054.0751953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3225.68896484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8744.889404296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2326.61181640625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.869208202763694,
    "avg_bits_err_output": 0.258875,
    "avg_bits_err_improve": 7.6103332027636945,
    "time": 37751.800537109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (if (!= (+ (pow (+ x eps) 5.0) 1.0) 0.0) (/ (* (pow (+ x eps) 5.0) (+ (pow (+ x eps) 5.0) 1.0)) (+ (pow (+ x eps) 5.0) 1.0)) (pow (+ x eps) 5.0)) (pow x 5.0))",
    "output_parens": 19,
    "avg_bits_err_input": 7.704921750259623,
    "avg_bits_err_output": 7.707758746341332,
    "avg_bits_err_improve": -0.0028369960817089535,
    "time": 21104.735107421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.39349772541454,
    "avg_bits_err_output": 0.047511067236383514,
    "avg_bits_err_improve": 16.34598665817816,
    "time": 12482.42236328125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (pow (exp (* x x)) 10.0) (- (if (!= (exp (* x (* x 10.0))) 0.0) (/ 1.0 (/ 1.0 (pow (exp (* x x)) 10.0))) (pow (exp (* x x)) 10.0)) (* (pow (exp (* x x)) 10.0) (cos x))))",
    "output_parens": 23,
    "avg_bits_err_input": 3.549624384460356,
    "avg_bits_err_output": 3.054433697090639,
    "avg_bits_err_improve": 0.49519068736971716,
    "time": 19976.144775390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -5e-6) (if (!= (* (/ (fma x x 1.0) (fma x x 1.0)) (/ x (fma x x 1.0))) 0.0) (* (/ (+ x x) (+ x (/ 1.0 x))) (/ 1.0 (+ x x))) (/ x (fma x x 1.0))) (if (<= x 2000.0) (/ x (fma x x 1.0)) (if (!= (* (/ (fma x x 1.0) (fma x x 1.0)) (/ x (fma x x 1.0))) 0.0) (* (/ (+ x x) (+ x (/ 1.0 x))) (/ 1.0 (+ x x))) (/ x (fma x x 1.0)))))",
    "output_parens": 40,
    "avg_bits_err_input": 15.440684010593156,
    "avg_bits_err_output": 0.027448120312590144,
    "avg_bits_err_improve": 15.413235890280566,
    "time": 12292.105712890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.83574125539821,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.83574125539821,
    "time": 5576.015869140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.76474219334192,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 38.76349219334192,
    "time": 4710.994384765625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (- 1.7e+308 (+ -1.7e+308 (* t +inf.0))) -2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.30168872187554086,
    "avg_bits_err_improve": 63.69831127812446,
    "time": 20140.06787109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ (* t 1.6e-47) 4e-16) t)",
    "output_parens": 3,
    "avg_bits_err_input": 61.843245613873904,
    "avg_bits_err_output": 0.34927124062518033,
    "avg_bits_err_improve": 61.493974373248726,
    "time": 15769.66015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) 0.0) (* a (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.777319510496454,
    "avg_bits_err_output": 21.560501065688683,
    "avg_bits_err_improve": 12.216818444807771,
    "time": 24331.56982421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (* c (/ -4.0 (+ b (if (!= (sqrt (fma c (* a -4.0) (* b b))) 0.0) (/ 1.0 (/ 1.0 (sqrt (fma c (* a -4.0) (* b b))))) (sqrt (fma c (* a -4.0) (* b b)))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 35,
    "avg_bits_err_input": 33.50072855114043,
    "avg_bits_err_output": 21.776680274883287,
    "avg_bits_err_improve": 11.724048276257147,
    "time": 28397.478271484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2385.799560546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.21935763276731,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 40.209107632767314,
    "time": 5858.697265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.589307546808183,
    "avg_bits_err_output": 20.589307546808183,
    "avg_bits_err_improve": 0,
    "time": 4091.256591796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6405157901204688,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6405157901204688,
    "time": 6940.8388671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.034625,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.034125,
    "time": 6734.375244140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.024188721875540872,
    "avg_bits_err_output": 0.0115,
    "avg_bits_err_improve": 0.012688721875540872,
    "time": 3292.610595703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.012375,
    "avg_bits_err_output": 0.012375,
    "avg_bits_err_improve": 0,
    "time": 1921.460693359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0,
    "time": 1519.539794921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39340601562950744,
    "avg_bits_err_output": 0.24875,
    "avg_bits_err_improve": 0.14465601562950745,
    "time": 4886.77783203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (- 0.5 (- (* (cos (+ x x)) 0.5))) 0.0) (/ (- 0.25 (* (- (* (cos (+ x x)) 0.5)) (- (* (cos (+ x x)) 0.5)))) (- 0.5 (- (* (cos (+ x x)) 0.5)))) (- 0.5 (* (cos (+ x x)) 0.5))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 36,
    "avg_bits_err_input": 29.811700122557763,
    "avg_bits_err_output": 29.762634157475865,
    "avg_bits_err_improve": 0.049065965081897644,
    "time": 12745.940673828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.456523389874434,
    "avg_bits_err_output": 0.30016748125036063,
    "avg_bits_err_improve": 24.15635590862407,
    "time": 13567.44775390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (- (* x x) (pow (sin x) 2.0)) (fma (- (sin x)) (sin x) (pow (sin x) 2.0))) 0.0) (/ (- (pow (- (* x x) (pow (sin x) 2.0)) 2.0) (* (fma (- (sin x)) (sin x) (pow (sin x) 2.0)) (fma (- (sin x)) (sin x) (pow (sin x) 2.0)))) (- (if (!= (- (* x x) (- (pow (sin x) 2.0))) 0.0) (/ (- (pow (* x x) 2.0) (pow (sin x) 4.0)) (- (* x x) (- (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (fma (- (sin x)) (sin x) (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 77,
    "avg_bits_err_input": 29.421632279398324,
    "avg_bits_err_output": 29.332206217139042,
    "avg_bits_err_improve": 0.08942606225928174,
    "time": 37337.693359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005375,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.00475,
    "time": 2497.3798828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= i 2.05e+83) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* 200.0 (- (* (pow (+ (/ i n) 1.0) n) (/ (/ 0.5 (/ i i)) (/ i n))) (/ (/ 0.5 (/ i i)) (/ i n)))))",
    "output_parens": 23,
    "avg_bits_err_input": 47.941282953079444,
    "avg_bits_err_output": 13.963456986905747,
    "avg_bits_err_improve": 33.9778259661737,
    "time": 27699.5654296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.80754034068526,
    "avg_bits_err_output": 22.846569499930933,
    "avg_bits_err_improve": 2.960970840754328,
    "time": 15144.985595703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= b -3.2e+173) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (+ (* d d) (* c c))))) (if (<= b 1.8e+126) (- (/ (* b c) (+ (* d d) (* c c))) (* a (/ d (+ (* d d) (* c c))))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (+ (* d d) (* c c)))))))",
    "output_parens": 35,
    "avg_bits_err_input": 25.95044423935469,
    "avg_bits_err_output": 24.04686950960474,
    "avg_bits_err_improve": 1.903574729749952,
    "time": 15509.2685546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (- (* ux maxCos) ux))",
    "output_parens": 3,
    "avg_bits_err_input": 0.035125,
    "avg_bits_err_output": 0.023856203125901452,
    "avg_bits_err_improve": 0.011268796874098552,
    "time": 8136.188232421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 13.579489360709896,
    "avg_bits_err_output": 12.408031237173681,
    "avg_bits_err_improve": 1.1714581235362154,
    "time": 27465.773681640625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (fma (- 1.0 ux) ux (- (- (* ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))) ux)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.63019050459329,
    "avg_bits_err_output": 0.3165972184639962,
    "avg_bits_err_improve": 13.313593286129294,
    "time": 27188.367919921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (* ux (* (- 1.0 ux) maxCos)) zi (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* ux (* ux (* (- 1.0 ux) maxCos))))))) xi (* (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* ux (* ux (* (- 1.0 ux) maxCos)))))) (* (if (!= (sin (* PI (* uy 2.0))) 0.0) (/ 1.0 (/ 1.0 (sin (* PI (* uy 2.0))))) (sin (* PI (* uy 2.0)))) yi))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.33401348843591894,
    "avg_bits_err_output": 0.34103191639432007,
    "avg_bits_err_improve": -0.00701842795840113,
    "time": 42292.43701171875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (if (!= (- (* (cos (atan (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) 2.0) (pow (cos (atan (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) 2.0)) 0.0) (/ (- (pow (cos (atan (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) 2.0) (pow (- (cos (atan (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) (pow (cos (atan (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) 2.0)) 2.0)) (- (* (- (exp (log1p (cos (atan (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))))) 1.0) 2.0) (pow (cos (atan (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) 2.0))) (pow (cos (atan (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) 2.0)) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 105,
    "avg_bits_err_input": 0.19987260553560118,
    "avg_bits_err_output": 0.1999168481883447,
    "avg_bits_err_improve": -4.424265274352579e-05,
    "time": 56169.00146484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sin (* 6.28318530718 u2)) (* (sqrt u1) (sqrt (/ 1.0 (- 1.0 u1)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5308800480580345,
    "avg_bits_err_output": 0.6010388129955794,
    "avg_bits_err_improve": -0.07015876493754492,
    "time": 18787.59375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (/ (/ u1 4.0) (- 1.0 u1)) (/ (+ (* u1 0.5) (* u1 0.25)) (- 1.0 u1)))) (cos (* 6.28318530718 u2)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.3397218907425026,
    "avg_bits_err_output": 0.3502155818660521,
    "avg_bits_err_improve": -0.010493691123549531,
    "time": 20502.302001953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (expm1 (log1p (exp (/ PI s)))))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 22,
    "avg_bits_err_input": 0.3406485254221038,
    "avg_bits_err_output": 0.3430214886961862,
    "avg_bits_err_improve": -0.002372963274082429,
    "time": 48697.1123046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05871110042782082,
    "avg_bits_err_output": 0.04649475208758201,
    "avg_bits_err_improve": 0.012216348340238811,
    "time": 14573.093505859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (+ (exp (/ (fabs x) (- s))) 1.0)) (fma s (exp (/ (fabs x) (- s))) s))",
    "output_parens": 16,
    "avg_bits_err_input": 0.16424616026081912,
    "avg_bits_err_output": 0.14472998911701784,
    "avg_bits_err_improve": 0.019516171143801275,
    "time": 21845.763916015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6632781777917213,
    "avg_bits_err_output": 0.6632781777917213,
    "avg_bits_err_improve": 0,
    "time": 22208.667724609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (- (exp (/ -2.0 v)) (* u (exp (/ -2.0 v)))) u)) 1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.1462528737561116,
    "avg_bits_err_output": 0.14597998184198763,
    "avg_bits_err_improve": 0.0002728919141239683,
    "time": 23011.960205078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma sinTheta_O (/ sinTheta_O (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) (fma eta eta (* (/ sinTheta_O (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) (* sinTheta_O -2.0)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 2.2895482299233305,
    "avg_bits_err_output": 2.2921873138502686,
    "avg_bits_err_improve": -0.002639083926938124,
    "time": 28785.361083984375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ cosTheta_i v) (/ (/ (/ 0.5 v) (sinh (/ 1.0 v))) (exp (* sinTheta_i (/ sinTheta_O v))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.46097934380132244,
    "avg_bits_err_output": 0.389819718208484,
    "avg_bits_err_improve": 0.07115962559283845,
    "time": 29305.748291015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (- (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (/ 1.0 v))) (* (exp 0.6931) (/ 0.5 v)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.10302601290249022,
    "avg_bits_err_output": 0.11919747457243195,
    "avg_bits_err_improve": -0.016171461669941725,
    "time": 25335.5078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow alpha (* PI 2.0)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4681064950266719,
    "avg_bits_err_output": 0.4126779791097859,
    "avg_bits_err_improve": 0.05542851591688602,
    "time": 25288.863525390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) s)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3060568408883189,
    "avg_bits_err_output": 1.2106984222748027,
    "avg_bits_err_improve": 0.09535841861351613,
    "time": 27175.806640625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ (/ 2.0 (/ 2.0 (- 1.0 (* 4.0 u)))) (log (+ 1.0 (expm1 (pow (+ 1.0 (* u -4.0)) 2.0)))))) s) 2.0) (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 12.538021244643698,
    "avg_bits_err_output": 11.7003605206191,
    "avg_bits_err_improve": 0.8376607240245981,
    "time": 23530.905029296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (/ (/ (* (exp (* r (/ -0.3333333333333333 s))) 0.75) PI) (* r s)) 6.0))",
    "output_parens": 17,
    "avg_bits_err_input": 0.14880376278430135,
    "avg_bits_err_output": 0.16689388735264976,
    "avg_bits_err_improve": -0.01809012456834841,
    "time": 25827.221435546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8751437394991366,
    "avg_bits_err_output": 0.6872763453143915,
    "avg_bits_err_improve": 0.18786739418474507,
    "time": 28401.957275390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7016228866725667,
    "avg_bits_err_output": 0.4806230531061248,
    "avg_bits_err_improve": 0.22099983356644187,
    "time": 25957.96728515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.571038820056883,
    "avg_bits_err_output": 0.5268465040639861,
    "avg_bits_err_improve": 13.044192315992897,
    "time": 19659.673828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(+ (fma (+ (cos (* PI (* u2 -2.0))) -1.0) (sqrt (- (log1p (- u1)))) (* (- 1.0 (cos (* PI (* u2 -2.0)))) (sqrt (- (log1p (- u1)))))) (* (cos (* PI (* u2 -2.0))) (sqrt (- (log1p (- u1))))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.618980245072857,
    "avg_bits_err_output": 0.32549678404333526,
    "avg_bits_err_improve": 13.293483461029522,
    "time": 20843.11181640625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.342785358530046,
    "avg_bits_err_output": 0.31531372187554085,
    "avg_bits_err_improve": 14.027471636654505,
    "time": 16339.728759765625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (- (+ (/ cos2phi (* alphax alphax)) (/ (/ sin2phi alphay) (+ alphay alphay))) (/ (/ sin2phi (* alphay alphay)) -2.0)))",
    "output_parens": 14,
    "avg_bits_err_input": 12.85168414432041,
    "avg_bits_err_output": 0.5348836477579149,
    "avg_bits_err_improve": 12.316800496562495,
    "time": 16862.5087890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.58024427079044,
    "avg_bits_err_output": 12.316308143142303,
    "avg_bits_err_improve": 4.2639361276481385,
    "time": 21674.060546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.20717164837040855,
    "avg_bits_err_output": 0.14606544524450715,
    "avg_bits_err_improve": 0.0611062031259014,
    "time": 17669.64453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 14.041987773608499,
    "avg_bits_err_output": 10.668516014394317,
    "avg_bits_err_improve": 3.3734717592141816,
    "time": 24164.427001953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f -4.0))) (exp (* PI (/ f 4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* (* PI f) -0.5))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0))",
    "output_parens": 31,
    "avg_bits_err_input": 61.52293558095672,
    "avg_bits_err_output": 2.132102463574659,
    "avg_bits_err_improve": 59.39083311738206,
    "time": 45843.4287109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= l -1.35e+154) (/ (* t (sqrt 2.0)) (sqrt (fma l (- l) (/ (+ (* (+ x 1.0) (* t (* t 2.0))) (* (+ x 1.0) (* l l))) (+ x -1.0))))) (if (<= l 2.9e+144) (* t (/ (sqrt 2.0) (sqrt (+ (* (/ (- x -1.0) (+ x -1.0)) (* t (* t 2.0))) (+ (* (* l l) (/ (- x -1.0) (+ x -1.0))) (* l (- l))))))) (- (exp (log1p (* t (/ (sqrt 2.0) (sqrt (fma l (- (/ (fma x l l) (+ x -1.0)) l) (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))))))))) 1.0)))",
    "output_parens": 57,
    "avg_bits_err_input": 42.9698256132607,
    "avg_bits_err_output": 36.40353850724328,
    "avg_bits_err_improve": 6.56628710601742,
    "time": 26419.406494140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.155389877793806,
    "avg_bits_err_output": 0.2156984968798676,
    "avg_bits_err_improve": 3.9396913809139384,
    "time": 30726.581298828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (- (exp (log1p (sqrt (+ (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0) (+ 1.0 (pow (* (* 2.0 (/ l Om)) (sin kx)) 2.0)))))) 1.0)) 0.5)))",
    "output_parens": 20,
    "avg_bits_err_input": 1.0022106035144864,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 0.9947106035144865,
    "time": 14068.000732421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (if (!= (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (fma 2.0 (pow (/ t l) 2.0) 1.0))) 0.0) (/ (/ (- 1.0 (pow (/ Om Omc) 2.0)) (fma 2.0 (pow (/ t l) 2.0) 1.0)) (sqrt (expm1 (log1p (/ (- 1.0 (pow (/ Om Omc) 2.0)) (fma 2.0 (pow (/ t l) 2.0) 1.0)))))) (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (fma 2.0 (pow (/ t l) 2.0) 1.0)))))",
    "output_parens": 37,
    "avg_bits_err_input": 10.401775337236556,
    "avg_bits_err_output": 10.43005367827242,
    "avg_bits_err_improve": -0.028278341035864685,
    "time": 28602.15576171875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -8.8e-302) (* (sqrt (* (* 2.0 n) (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- U))) (* (sqrt (* 2.0 (* n (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt U)))",
    "output_parens": 31,
    "avg_bits_err_input": 34.784326591242504,
    "avg_bits_err_output": 25.2682785259103,
    "avg_bits_err_improve": 9.516048065332203,
    "time": 40815.44677734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -4e-108) (/ 2.0 (/ (* (/ (* (pow t 3.0) (* k (/ (sin k) l))) t) (/ (* k (tan k)) l)) t)) (if (<= t 7.5e-107) (/ 2.0 (* (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) l) (* (sin k) (/ (tan k) l)))) (/ 2.0 (/ (* (/ (* (pow t 3.0) (* k (/ (sin k) l))) t) (/ (* k (tan k)) l)) t))))",
    "output_parens": 41,
    "avg_bits_err_input": 47.17592741129102,
    "avg_bits_err_output": 27.33898373743347,
    "avg_bits_err_improve": 19.83694367385755,
    "time": 46290.626220703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1.7e-106) (/ 2.0 (/ (* (tan k) (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ (pow t 3.0) l)))) l)) (if (<= t 4.2e-107) 0.0 (/ 2.0 (/ (* (+ 2.0 (pow (/ k t) 2.0)) (* (* (pow t 3.0) (/ (sin k) l)) (tan k))) l))))",
    "output_parens": 28,
    "avg_bits_err_input": 32.06283414055706,
    "avg_bits_err_output": 22.962468758472006,
    "avg_bits_err_improve": 9.100365382085052,
    "time": 27149.43798828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (* (cos th) (+ (* a2 a2) (* a1 a1))) (sqrt 2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5179001906453743,
    "avg_bits_err_output": 0.4705815812676698,
    "avg_bits_err_improve": 0.04731860937770449,
    "time": 26372.38720703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (* k -0.5)) (/ (sqrt (* 2.0 (* PI n))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5012922630313916,
    "avg_bits_err_output": 0.35047617249354734,
    "avg_bits_err_improve": 0.15081609053784428,
    "time": 21020.99755859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (if (!= (* J (exp l)) 0.0) (* (/ J (exp l)) (expm1 (+ l l))) (* J (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 18,
    "avg_bits_err_input": 17.579718509402472,
    "avg_bits_err_output": 0.08517932343849159,
    "avg_bits_err_improve": 17.49453918596398,
    "time": 24729.216064453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) 2.0) (* (if (!= (cos (- (* K (/ (+ m n) 2.0)) M)) 0.0) (/ 1.0 (log1p (expm1 (/ 1.0 (cos (- (* K (/ (+ m n) 2.0)) M)))))) (cos (- (* K (/ (+ m n) 2.0)) M))) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K m) 0.0) (* K (* m (* (+ m n) (- (exp (log1p (/ K (* K m)))) 1.0)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))))",
    "output_parens": 78,
    "avg_bits_err_input": 14.906355391942377,
    "avg_bits_err_output": 5.301416688879303,
    "avg_bits_err_improve": 9.604938703063073,
    "time": 22421.052490234375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.52152124062518,
    "avg_bits_err_output": 17.52152124062518,
    "avg_bits_err_improve": 0,
    "time": 36495.827880859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ (* M D) (* 2.0 d)) -5e+95) (* w0 (sqrt (- 1.0 (* (* M (/ (/ D d) 2.0)) (* (* M (/ (/ D d) 2.0)) (/ h l)))))) (if (<= (/ (* M D) (* 2.0 d)) 1e+130) (* w0 (sqrt (- 1.0 (/ (* (pow (/ (/ (* D M) d) 2.0) 2.0) h) l)))) (* w0 (sqrt (- 1.0 (/ (/ (/ (* (/ M (+ d d)) (* D (* D (* M h)))) l) d) 2.0))))))",
    "output_parens": 43,
    "avg_bits_err_input": 14.68144798762942,
    "avg_bits_err_output": 9.498960056130988,
    "avg_bits_err_improve": 5.182487931498432,
    "time": 27769.638427734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= V -1e-308) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (* c0 (* (sqrt (/ A (+ l l))) (sqrt (/ 2.0 V)))))",
    "output_parens": 17,
    "avg_bits_err_input": 19.267624367244505,
    "avg_bits_err_output": 11.510869898519653,
    "avg_bits_err_improve": 7.756754468724852,
    "time": 20610.373291015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(/ (/ (* c0 (if (!= (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))) 0.0) (* M (/ M (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (* (+ M (* (/ (/ d D) (* w h)) (* c0 (/ d D)))) (- (* (/ (/ d D) (* w h)) (* c0 (/ d D))) M)))))) (fma d (/ (* c0 (/ d (* D (* w h)))) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))))) w) 2.0)",
    "output_parens": 63,
    "avg_bits_err_input": 59.816706543722134,
    "avg_bits_err_output": 27.279746727398834,
    "avg_bits_err_improve": 32.536959816323304,
    "time": 67050.18798828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d 9.2e-307) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* (/ (pow (* D (/ M (+ d d))) 2.0) (+ l l)) h))) (if (<= d 1e-101) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- (/ (* (pow (* (/ D 2.0) (/ M d)) 2.0) (* h -0.5)) l) -1.0)) (if (<= d 7.2e+142) (* (* (if (!= (sqrt (/ d h)) 0.0) (/ (/ d h) (sqrt (/ d h))) (sqrt (/ d h))) (sqrt (/ d l))) (- 1.0 (* (/ (pow (* D (/ M (+ d d))) 2.0) (+ l l)) h))) (* (fma 0.5 (* h (* (* M (/ D (+ d d))) (/ (* M (/ D (+ d d))) l))) -1.0) (- (* (sqrt (/ (/ d l) h)) (sqrt d)))))))",
    "output_parens": 73,
    "avg_bits_err_input": 26.594621883612902,
    "avg_bits_err_output": 24.378664219973906,
    "avg_bits_err_improve": 2.2159576636389957,
    "time": 45611.515869140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (- 0.5 (/ -0.5 (hypot 1.0 x))) 0.0) (/ (if (!= (+ 0.25 (/ -0.25 (fma x x 1.0))) 0.0) (/ 1.0 (/ 1.0 (+ 0.25 (/ -0.25 (fma x x 1.0))))) (+ 0.25 (/ -0.25 (fma x x 1.0)))) (- 0.5 (/ -0.5 (hypot 1.0 x)))) (- 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 43,
    "avg_bits_err_input": 15.363753683668655,
    "avg_bits_err_output": 14.85993679769654,
    "avg_bits_err_improve": 0.5038168859721157,
    "time": 31331.185302734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9814481203125902,
    "avg_bits_err_output": 0.013021240625180291,
    "avg_bits_err_improve": 0.9684268796874099,
    "time": 4854.7978515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (fma 5.0 (* v v) -1.0) (* (fma v v -1.0) PI)) (sqrt (- 2.0 (* v (* v 6.0))))) t)",
    "output_parens": 11,
    "avg_bits_err_input": 0.4544076372987831,
    "avg_bits_err_output": 0.10730208319999195,
    "avg_bits_err_improve": 0.3471055540987911,
    "time": 24524.13330078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(fma (/ (sqrt 2.0) 4.0) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (- 1.0 (* v v))) 0.0)",
    "output_parens": 10,
    "avg_bits_err_input": 0.012719360937770435,
    "avg_bits_err_output": 0.01127124062518029,
    "avg_bits_err_improve": 0.0014481203125901454,
    "time": 8972.287109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5944290227989761,
    "avg_bits_err_output": 0.5944290227989761,
    "avg_bits_err_improve": 0,
    "time": 12626.94287109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (/ (pow k m) (- (* k (+ k 10.0)) -1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 1.9715034027665266,
    "avg_bits_err_output": 1.9839497593238276,
    "avg_bits_err_improve": -0.012446356557300975,
    "time": 14591.574462890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (- Vef (- Ec (+ mu EDonor))) KbT)) -1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.015878218412193564,
    "avg_bits_err_output": 0.015878218412193564,
    "avg_bits_err_improve": 0,
    "time": 9369.7333984375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (* (* b b) (+ (* b b) (* a (+ a a))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18413233125324513,
    "avg_bits_err_output": 0.0917949250014423,
    "avg_bits_err_improve": 0.09233740625180283,
    "time": 10152.603515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (pow (* b b) 2.0) (fma (* a (* a b)) (+ b b) (pow a 4.0))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.19084249726654834,
    "avg_bits_err_output": 0.10641052656439305,
    "avg_bits_err_improve": 0.08443197070215529,
    "time": 17898.212158203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (fma (* a a) (* b (+ b b)) (pow b 4.0))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 17,
    "avg_bits_err_input": 0.19892162183657477,
    "avg_bits_err_output": 0.022524652767166184,
    "avg_bits_err_improve": 0.1763969690694086,
    "time": 17217.341064453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (+ (* x (/ 0.25 (sqrt (fma x x (* 4.0 (* p p)))))) (+ (* x (/ 0.25 (sqrt (fma x x (* 4.0 (* p p)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 13.28311631048599,
    "avg_bits_err_output": 13.483533925106892,
    "avg_bits_err_improve": -0.20041761462090157,
    "time": 16883.33349609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.871881448441904,
    "avg_bits_err_output": 0.0485,
    "avg_bits_err_improve": 41.82338144844191,
    "time": 8001.09228515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (!= (/ (- x (sin x)) (- x (tan x))) 0.0) (/ 1.0 (/ 1.0 (/ (- x (sin x)) (- x (tan x))))) (/ (- x (sin x)) (- x (tan x))))",
    "output_parens": 19,
    "avg_bits_err_input": 31.219757239076408,
    "avg_bits_err_output": 31.22347746669099,
    "avg_bits_err_improve": -0.003720227614582683,
    "time": 21729.666259765625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (exp (* 1.0 (log (- b_2)))) a) (if (<= b_2 -8.5e-237) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (if (<= b_2 3.7e+146) (/ (if (!= (- 0.0 b_2) 0.0) (* a (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* c (- a))))))) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a) (/ (if (!= b_2 0.0) (fma (/ a (* b_2 -2.0)) c (/ (* c a) (* b_2 -2.0))) (- b_2)) a))))",
    "output_parens": 44,
    "avg_bits_err_input": 33.3946016815262,
    "avg_bits_err_output": 18.75362467454128,
    "avg_bits_err_improve": 14.640977006984919,
    "time": 20657.63623046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (fma a (- c) (* b_2 b_2))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 33.82572493381178,
    "avg_bits_err_output": 19.303276949791748,
    "avg_bits_err_improve": 14.52244798402003,
    "time": 18763.421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.760817682830556,
    "avg_bits_err_output": 31.019329524309633,
    "avg_bits_err_improve": 0.741488158520923,
    "time": 18099.861083984375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (expm1 (/ (log x) n)) (expm1 (/ (log1p x) n))) 0.0) (/ (- (* (expm1 (/ (log1p x) n)) (expm1 (/ (log1p x) n))) (pow (expm1 (/ (log x) n)) 2.0)) (+ (expm1 (/ (log x) n)) (expm1 (/ (log1p x) n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 35,
    "avg_bits_err_input": 32.572839008559924,
    "avg_bits_err_output": 21.347062499181128,
    "avg_bits_err_improve": 11.225776509378797,
    "time": 30879.673095703125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (if (!= (log1p N) 0.0) (/ 1.0 (/ 1.0 (log1p N))) (log1p N)) (log N))",
    "output_parens": 9,
    "avg_bits_err_input": 29.759153922008,
    "avg_bits_err_output": 29.78867205766488,
    "avg_bits_err_improve": -0.029518135656878997,
    "time": 16635.96630859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ -1.0 x) (/ x (/ x (+ x 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.891865061230554,
    "avg_bits_err_output": 0.0772712406251803,
    "avg_bits_err_improve": 14.814593820605374,
    "time": 15174.566162109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -7.2e-33) (- (* (if (!= (cos eps) 0.0) (/ (- (pow (cos eps) 2.0) (cos eps)) (cos eps)) (+ (cos eps) -1.0)) (cos x)) (* (sin x) (sin eps))) (if (<= x 1.1e-67) (if (!= (+ (cos (+ x eps)) (cos x)) 0.0) (/ (* (+ (sin (+ x eps)) (sin x)) (+ (- (sin x) (* (sin x) (cos eps))) (- (* (cos x) (sin eps))))) (+ (cos (+ x eps)) (cos x))) (- (cos (+ x eps)) (cos x))) (fma (sin x) (- (sin eps)) (* (+ (cos eps) -1.0) (cos x)))))",
    "output_parens": 59,
    "avg_bits_err_input": 39.967193054080916,
    "avg_bits_err_output": 0.904688208976165,
    "avg_bits_err_improve": 39.06250484510475,
    "time": 24890.592529296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.00037727883092,
    "avg_bits_err_output": 29.69146308787265,
    "avg_bits_err_improve": 0.3089141909582729,
    "time": 11668.821533203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log (- 1.0 (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 29.610853563576264,
    "avg_bits_err_output": 29.61255307423071,
    "avg_bits_err_improve": -0.0016995106544470673,
    "time": 21428.927978515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 33.953378994917635,
    "avg_bits_err_output": 21.79819922327719,
    "avg_bits_err_improve": 12.155179771640444,
    "time": 26194.04541015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (* a -4.0) (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b))) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.98620127500834,
    "avg_bits_err_output": 21.789777130974088,
    "avg_bits_err_improve": 12.196424144034253,
    "time": 34112.77001953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ 1.0 (/ (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 61.454338070962,
    "avg_bits_err_output": 0.023118045314032463,
    "avg_bits_err_improve": 61.43122002564797,
    "time": 17564.969970703125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (- (exp (log1p (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 1.0)) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00612660175783,
    "avg_bits_err_output": 44.237533950949995,
    "avg_bits_err_improve": 18.768592650807832,
    "time": 14790.82275390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ (+ eps eps) (+ eps 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.77575192202896,
    "avg_bits_err_output": 0.017344360937770434,
    "avg_bits_err_improve": 58.75840756109119,
    "time": 20479.134765625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (+ (/ (/ (+ (/ 1.0 x) (/ -1.0 (tan x))) (tan x)) (/ 4.0 x)) (+ (/ (/ (+ (/ 1.0 x) (/ -1.0 (tan x))) (tan x)) (/ 4.0 x)) (/ (+ (+ (/ -1.0 (/ (tan x) x)) 2.0) -1.0) (* (tan x) 2.0)))) (/ 1.0 (/ (tan x) x)))",
    "output_parens": 30,
    "avg_bits_err_input": 59.955196340111364,
    "avg_bits_err_output": 59.949121249514135,
    "avg_bits_err_improve": 0.006075090597228439,
    "time": 36677.333251953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.40087358858221,
    "avg_bits_err_output": 29.070420279058844,
    "avg_bits_err_improve": 31.330453309523364,
    "time": 28618.16015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 42.19630522812508,
    "avg_bits_err_output": 0.39721936093777044,
    "avg_bits_err_improve": 41.79908586718731,
    "time": 6958.55126953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.820127470369236,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.819252470369236,
    "time": 3988.219482421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.66894960581914,
    "avg_bits_err_output": 0.018188651651654526,
    "avg_bits_err_improve": 29.650760954167485,
    "time": 7029.987060546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(exp (* 1.0 (log (fma (exp x) (/ -2.0 (exp x)) (+ (exp x) (/ 1.0 (exp x)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 30.426038065991328,
    "avg_bits_err_output": 30.2993244788269,
    "avg_bits_err_improve": 0.12671358716442782,
    "time": 19307.74755859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ (- (/ 2.0 (/ (+ x (+ x 2.0)) x)) 2.0) x) (/ 1.0 (- x 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 10.026637176608501,
    "avg_bits_err_output": 10.036885324058675,
    "avg_bits_err_improve": -0.010248147450173661,
    "time": 24020.018310546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (tan x))",
    "output_parens": 4,
    "avg_bits_err_input": 37.16310756923978,
    "avg_bits_err_output": 37.16310756923978,
    "avg_bits_err_improve": 0,
    "time": 21035.824462890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.11088690925882,
    "avg_bits_err_output": 0.16719360937770425,
    "avg_bits_err_improve": 29.943693299881115,
    "time": 13469.3642578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (<= x -1.4e-70) (if (!= (sin x) 0.0) (/ (+ (+ (- (pow (sin x) 2.0)) (* (sin x) (* (sin x) (cos eps)))) (* (sin x) (* (sin eps) (cos x)))) (sin x)) (- (sin (+ x eps)) (sin x))) (if (<= x 1.8e-186) (- (+ (* (sin x) (cos eps)) (* (sin eps) (cos x))) (sin x)) (if (!= (sin x) 0.0) (/ (+ (+ (- (pow (sin x) 2.0)) (* (sin x) (* (sin x) (cos eps)))) (* (sin x) (* (sin eps) (cos x)))) (sin x)) (- (sin (+ x eps)) (sin x)))))",
    "output_parens": 61,
    "avg_bits_err_input": 37.574983091242494,
    "avg_bits_err_output": 4.292052827683777,
    "avg_bits_err_improve": 33.28293026355872,
    "time": 21541.968017578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (if (!= (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (sqrt (fma x x x)))) 0.0) (/ (fma (/ 1.0 (+ x 1.0)) (/ 1.0 (+ x 1.0)) (- (pow (/ 1.0 (sqrt (fma x x x))) 2.0))) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (expm1 (log1p (sqrt (fma x x x))))))) (- (/ 1.0 (+ 1.0 x)) (/ 1.0 (sqrt (fma x x x))))) (/ -1.0 (sqrt (+ 1.0 x))))",
    "output_parens": 37,
    "avg_bits_err_input": 19.36414428848915,
    "avg_bits_err_output": 19.36403922178252,
    "avg_bits_err_improve": 0.00010506670663090745,
    "time": 16718.76953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (fma (atan (- N -1.0)) (/ (atan (- N -1.0)) (+ (atan (- N -1.0)) (atan N))) (* (atan N) (/ (atan N) (- (- (atan (- N -1.0))) (atan N))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 29,
    "avg_bits_err_input": 14.865302624446377,
    "avg_bits_err_output": 14.872852321040847,
    "avg_bits_err_improve": -0.007549696594470134,
    "time": 12017.403076171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.399025438664076,
    "avg_bits_err_output": 1.263901333936852,
    "avg_bits_err_improve": 28.135124104727225,
    "time": 24584.9423828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- m (- 1.0 (/ (- m (* (* m m) (- 2.0 m))) v)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07928328632589335,
    "avg_bits_err_output": 0.07136412988844354,
    "avg_bits_err_improve": 0.007919156437449809,
    "time": 14779.83837890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (/ a (/ -1.0 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.35089717574628,
    "avg_bits_err_output": 0.28052714927614786,
    "avg_bits_err_improve": 16.070370026470133,
    "time": 11971.422607421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (- (* (log (+ 1.0 (expm1 (cos (* (+ angle angle) (/ PI 1440.0)))))) (cos (* (* (- (- angle) (+ angle angle)) -2.0) (/ PI 1440.0)))) (* (sin (* (+ angle angle) (/ PI 1440.0))) (sin (* (* (- (- angle) (+ angle angle)) -2.0) (/ PI 1440.0)))))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 36,
    "avg_bits_err_input": 20.189043207596974,
    "avg_bits_err_output": 20.19890647304839,
    "avg_bits_err_improve": -0.009863265451414804,
    "time": 39569.056640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (- (* (+ (cos (* PI (/ angle -180.0))) 1.0) 4.0) 4.0) (/ (if (!= (* (sin (* PI (/ angle 180.0))) (pow a 2.0)) 0.0) (- (/ (pow (* b (* (sin (* PI (/ angle 180.0))) a)) 2.0) (* (sin (* PI (/ angle 180.0))) (pow a 2.0))) (/ 2.0 (/ 2.0 (* (sin (* PI (/ angle 180.0))) (pow a 2.0))))) (* (sin (* PI (/ angle 180.0))) (- (pow b 2.0) (pow a 2.0)))) 2.0))",
    "output_parens": 42,
    "avg_bits_err_input": 31.20189951601392,
    "avg_bits_err_output": 30.833674897110942,
    "avg_bits_err_improve": 0.3682246189029783,
    "time": 35021.4404296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (* angle (- -1.0 (+ -1.0 (/ PI -180.0)))))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 19.956372670681894,
    "avg_bits_err_output": 20.049113044812813,
    "avg_bits_err_improve": -0.09274037413091918,
    "time": 36450.4541015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (fma (/ m v) (- m (* m m)) (fma (- m) (* m (/ m v)) (* m (* m (/ m v))))) m)",
    "output_parens": 12,
    "avg_bits_err_input": 0.17507928248159613,
    "avg_bits_err_output": 0.18137764726366376,
    "avg_bits_err_improve": -0.006298364782067634,
    "time": 15812.757080078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3109950042093892,
    "avg_bits_err_output": 0.30797442312357537,
    "avg_bits_err_improve": 0.0030205810858138227,
    "time": 20287.94677734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (/ (* (+ e e) 4.0) (+ (* (* e (cos v)) 8.0) 8.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.1321887218755409,
    "avg_bits_err_output": 0.130136842188131,
    "avg_bits_err_improve": 0.0020518796874098855,
    "time": 15807.9658203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (expm1 (log1p (* (sin phi1) (sin phi2)))) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 14,
    "avg_bits_err_input": 17.180040983176863,
    "avg_bits_err_output": 17.18977058230429,
    "avg_bits_err_improve": -0.009729599127428656,
    "time": 35785.637451171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.74936595178498,
    "avg_bits_err_output": 0.17555225625468746,
    "avg_bits_err_improve": 52.57381369553029,
    "time": 26590.0322265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b)))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.589142920712227,
    "avg_bits_err_output": 0.3379539644618912,
    "avg_bits_err_improve": 28.251188956250335,
    "time": 24811.908935546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 44.01897761971098,
    "avg_bits_err_output": 0.2376539484457027,
    "avg_bits_err_improve": 43.78132367126528,
    "time": 24833.468994140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.26e-287) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* (* a c) 4.0) (- b (sqrt (fma a (* c -4.0) (* b b))))) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- 0.0 b) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0)))",
    "output_parens": 45,
    "avg_bits_err_input": 33.96554197578415,
    "avg_bits_err_output": 15.864359129205706,
    "avg_bits_err_improve": 18.101182846578443,
    "time": 27382.396728515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8053622766329612,
    "avg_bits_err_output": 0.8033141974497877,
    "avg_bits_err_improve": 0.0020480791831735123,
    "time": 28856.615234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(- (log (+ 1.0 (expm1 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))))) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 28.53750820755532,
    "avg_bits_err_output": 28.539464921667765,
    "avg_bits_err_improve": -0.001956714112445468,
    "time": 24061.976318359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ 1.0 (pow (exp x) 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 58.14652874571676,
    "avg_bits_err_output": 0.7185874062518032,
    "avg_bits_err_improve": 57.42794133946495,
    "time": 19218.493896484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (expm1 (* x 2.0)) (exp (- x))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.07901046630942,
    "avg_bits_err_output": 0.06127124062518029,
    "avg_bits_err_improve": 58.01773922568424,
    "time": 8096.816162109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.009823120312590146,
    "avg_bits_err_output": 0.009823120312590146,
    "avg_bits_err_improve": 0,
    "time": 2597.46630859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.753875,
    "avg_bits_err_output": 31.753875,
    "avg_bits_err_improve": 0,
    "time": 5959.5244140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (- (/ x (- 1.0 x)) (log (+ 1.0 (expm1 (+ 1.0 (/ -1.0 (- 1.0 x)))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 58.76182474844535,
    "avg_bits_err_output": 50.67645844953191,
    "avg_bits_err_improve": 8.085366298913442,
    "time": 24591.14892578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.03475,
    "avg_bits_err_output": 0.0345,
    "avg_bits_err_improve": 0.0002500000000000002,
    "time": 4314.47802734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12694812031259015,
    "avg_bits_err_output": 0.12694812031259015,
    "avg_bits_err_improve": 0,
    "time": 27020.91748046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.126,
    "avg_bits_err_output": 0.126,
    "avg_bits_err_improve": 0,
    "time": 26909.27880859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (* (cos (/ phi2 2.0)) (cos (/ phi1 2.0))) (- lambda1 lambda2) (* (- (sin (/ phi2 2.0))) (* (sin (/ phi1 2.0)) (- lambda1 lambda2)))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 39.209571044582276,
    "avg_bits_err_output": 0.11842880041859188,
    "avg_bits_err_improve": 39.091142244163684,
    "time": 30635.61962890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.451062335672834,
    "avg_bits_err_output": 0.011030990939180448,
    "avg_bits_err_improve": 14.440031344733653,
    "time": 6500.72216796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (cos delta))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.15682207471488516,
    "avg_bits_err_output": 0.15260023034313613,
    "avg_bits_err_improve": 0.004221844371749023,
    "time": 41153.811279296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.787022170868994,
    "avg_bits_err_output": 0.18065601562950712,
    "avg_bits_err_improve": 52.606366155239485,
    "time": 26013.20263671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (/ (* c (* a 3.0)) (- (- b) (sqrt (fma b b (* a (* c -3.0)))))) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.74547855708578,
    "avg_bits_err_output": 0.4410862957151373,
    "avg_bits_err_improve": 28.30439226137064,
    "time": 25232.316162109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 44.08677076960128,
    "avg_bits_err_output": 0.2337740609435394,
    "avg_bits_err_improve": 43.85299670865774,
    "time": 29293.153076171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -1.08e-303) (/ (- (if (!= (- (sqrt (fma -3.0 (* c a) (* b b))) b) 0.0) (* c (/ (* a -3.0) (- (sqrt (fma -3.0 (* c a) (* b b))) b))) (+ b (sqrt (fma -3.0 (* c a) (* b b))))) (+ b b)) (* 3.0 a)) (/ (if (!= (- (- b) (sqrt (fma b b (* a (* c -3.0))))) 0.0) (* -3.0 (* a (/ c (+ b (sqrt (fma a (* c -3.0) (* b b))))))) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a)))",
    "output_parens": 49,
    "avg_bits_err_input": 34.00292884734385,
    "avg_bits_err_output": 15.359214957270833,
    "avg_bits_err_improve": 18.64371389007302,
    "time": 28417.262451171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (cos (- lambda2 lambda1)) (expm1 (log1p (sin phi1)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.311878993256501,
    "avg_bits_err_output": 13.317391054402274,
    "avg_bits_err_improve": -0.005512061145772407,
    "time": 37079.100830078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (+ (/ (- (+ x -1.0) (* x (/ x (+ x 1.0)))) (- 1.0 x)) (/ (/ x (+ x 1.0)) (- 1.0 x))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.710162012746203,
    "avg_bits_err_output": 0.44546961469513185,
    "avg_bits_err_improve": 29.26469239805107,
    "time": 22704.841796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.009375,
    "avg_bits_err_output": 0.026718900368805136,
    "avg_bits_err_improve": -0.017343900368805135,
    "time": 6465.330322265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ -1.0 (+ 1.0 x)) 0.0) (/ (if (!= (pow (/ -1.0 (+ 1.0 x)) 2.0) 0.0) (/ (- (/ (pow (/ -1.0 (+ 1.0 x)) 2.0) (fma x x -1.0)) (pow (/ -1.0 (+ 1.0 x)) 4.0)) (pow (/ -1.0 (+ 1.0 x)) 2.0)) (- (/ 1.0 (fma x x -1.0)) (pow (/ -1.0 (+ 1.0 x)) 2.0))) (/ -1.0 (+ 1.0 x))) (- (/ -1.0 (- x 1.0)) (/ -1.0 (+ 1.0 x))))",
    "output_parens": 36,
    "avg_bits_err_input": 14.884995437822148,
    "avg_bits_err_output": 14.84414917336887,
    "avg_bits_err_improve": 0.04084626445327899,
    "time": 16050.12841796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2.4e-292) (* (sqrt (- F)) (* (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (/ (sqrt (fma (pow B 2.0) 2.0 (- (* (* A C) 8.0)))) (- (* A (* C 4.0)) (pow B 2.0))))) (* (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0))) (* (sqrt (- (* (pow B 2.0) -2.0) (* (* A C) -8.0))) (sqrt F))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.0230816104221,
    "avg_bits_err_output": 46.774818209145614,
    "avg_bits_err_improve": 5.248263401276489,
    "time": 39102.9189453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -6.1e-46) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))) 0.0) (/ (- (pow B 2.0)) (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))) (- C (+ A (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))))))) PI)) (* (atan (/ (- C (+ A (sqrt (+ (* (- C A) (- C A)) (pow B 2.0))))) B)) (/ 180.0 PI)))",
    "output_parens": 45,
    "avg_bits_err_input": 29.12373037427018,
    "avg_bits_err_output": 26.341669670765775,
    "avg_bits_err_improve": 2.7820607035044063,
    "time": 26188.038330078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) -5e-190) (* (/ (* (sqrt (- (pow B 2.0) (* A (* 4.0 C)))) (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* A (* 4.0 C)) (pow B 2.0))) (sqrt F)) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (/ (* (sqrt F) (sqrt (* 2.0 (* (- (pow B 2.0) (* A (* 4.0 C))) (if (!= (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) 0.0) (/ (- (- (* (+ A C) (+ A C)) (pow (- A C) 2.0)) (pow B 2.0)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))))) (- (* A (* 4.0 C)) (pow B 2.0))) (/ (sqrt (* 2.0 (* F (* (- (pow B 2.0) (* A (* 4.0 C))) (if (!= (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) 0.0) (/ (+ (+ (pow B 2.0) (pow (- A C) 2.0)) (* (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))))))) (- (* A (* 4.0 C)) (pow B 2.0)))))",
    "output_parens": 159,
    "avg_bits_err_input": 51.50106194647084,
    "avg_bits_err_output": 46.437753520974724,
    "avg_bits_err_improve": 5.063308425496118,
    "time": 50940.722900390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.469744216549094,
    "avg_bits_err_output": 15.469744216549094,
    "avg_bits_err_improve": 0,
    "time": 21297.7919921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-294) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (* (/ h (- (pow (fma g g (* h (- h))) 0.5) g)) h) (- (- g) (sqrt (fma g g (* h (- h))))))))) (if (<= g 1e+146) (+ (cbrt (* (/ 0.5 a) (if (!= (- (- g) (sqrt (* (- g h) (+ g h)))) 0.0) (/ (* h h) (- (- g) (sqrt (* (- g h) (+ g h))))) (- (sqrt (* (- g h) (+ g h))) g)))) (* (cbrt (/ 0.5 a)) (cbrt (- (- g) (sqrt (fma g g (- (* h h)))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- g h)) (sqrt (+ g h))))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))))))",
    "output_parens": 91,
    "avg_bits_err_input": 35.493450781234436,
    "avg_bits_err_output": 6.9228735468251195,
    "avg_bits_err_improve": 28.570577234409317,
    "time": 31177.333984375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) 3.0))) (* (sin (expm1 (log1p (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.9897246250072126,
    "avg_bits_err_output": 0.02029248125036058,
    "avg_bits_err_improve": 0.969432143756852,
    "time": 14759.28173828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7338443609377705,
    "avg_bits_err_output": 0.7338443609377705,
    "avg_bits_err_improve": 0,
    "time": 3493.065673828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-296) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+307) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 10.946943699076499,
    "avg_bits_err_output": 2.119424527693833,
    "avg_bits_err_improve": 8.827519171382665,
    "time": 10196.651123046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(+ (* x y) (+ (log1p (exp x)) (* (- y) (+ x x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.45766730763229724,
    "avg_bits_err_output": 0.4378231203125902,
    "avg_bits_err_improve": 0.019844187319707052,
    "time": 11772.292236328125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.1) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 10.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.15309295628262,
    "avg_bits_err_output": 0.12655762371768825,
    "avg_bits_err_improve": 53.02653533256493,
    "time": 10200.06689453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.671864244806499,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.671864244806499,
    "time": 2067.010498046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.01525,
    "avg_bits_err_output": 0.01525,
    "avg_bits_err_improve": 0,
    "time": 3232.414794921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1306.920654296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (if (!= 4.5 0.0) (/ (+ 20.25 (* (/ (pow (* r w) 2.0) (- 1.0 v)) (* (- 0.375 (* v 0.25)) 4.5))) 4.5) (fma (- 0.375 (* v 0.25)) (/ (pow (* r w) 2.0) (- 1.0 v)) 4.5)))",
    "output_parens": 23,
    "avg_bits_err_input": 12.854716806468947,
    "avg_bits_err_output": 0.43124030615253367,
    "avg_bits_err_improve": 12.423476500316413,
    "time": 26799.505615234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (* x1 -6.0)) (+ (* (* x1 x1) (* (/ (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) (fma (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (- (* -6.0 (/ x1 (fma x1 x1 1.0))) (/ (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (* (/ x1 (fma x1 x1 1.0)) (/ 6.0 (fma x1 x1 1.0)))) -3.0)) (* (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) -3.0) (fma (* (/ x1 (fma x1 x1 1.0)) (/ 6.0 (fma x1 x1 1.0))) (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (* (/ x1 (fma x1 x1 1.0)) (/ 6.0 (fma x1 x1 1.0)))))))))))) (+ x1 x1)))",
    "output_parens": 81,
    "avg_bits_err_input": 0.5202355044794914,
    "avg_bits_err_output": 0.2619883777354132,
    "avg_bits_err_improve": 0.2582471267440782,
    "time": 75926.76440429688,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (- (- u) t1)) v) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.55169286973226,
    "avg_bits_err_output": 1.2463671237958378,
    "avg_bits_err_improve": 17.305325745936422,
    "time": 7856.972412109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.23429268476294263,
    "avg_bits_err_output": 0.1932312031259014,
    "avg_bits_err_improve": 0.041061481637041236,
    "time": 9228.396240234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00325,
    "avg_bits_err_output": 0.00325,
    "avg_bits_err_improve": 0,
    "time": 3557.5341796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI (- (/ 0.5 a) (/ 0.5 b))) (+ a b)) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.10479569368505,
    "avg_bits_err_output": 0.2871588359478664,
    "avg_bits_err_improve": 13.817636857737183,
    "time": 19795.6064453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (- (/ (/ -1.0 eps) (exp (fma eps x x))) (/ (- -1.0 (/ 1.0 eps)) (exp (- x (* eps x))))) (/ 1.0 (- (exp (fma eps x x))))) 2.0)",
    "output_parens": 17,
    "avg_bits_err_input": 29.01462423991279,
    "avg_bits_err_output": 24.386991122634306,
    "avg_bits_err_improve": 4.627633117278485,
    "time": 24160.668701171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (+ (- 2.0 (/ 2.0 (* t (+ 2.0 (/ 2.0 t))))) (- (/ 2.0 (* t (+ 2.0 (/ 2.0 t))))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.02,
    "avg_bits_err_output": 0.019625,
    "avg_bits_err_improve": 0.00037500000000000033,
    "time": 7642.124267578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- 4.0 (+ (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (* t (+ 1.0 (/ 1.0 t)))) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (+ (- 2.0 (/ (/ 2.0 t) (+ (/ 2.0 t) 2.0))) (- (/ (/ 2.0 t) (+ (/ 2.0 t) 2.0)))))))",
    "output_parens": 35,
    "avg_bits_err_input": 0.0245,
    "avg_bits_err_output": 0.06860620312590145,
    "avg_bits_err_improve": -0.044106203125901446,
    "time": 16605.841064453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (- (+ (pow (* 2.0 (/ t (+ t 1.0))) 2.0) -1.0) -1.0)) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.022375,
    "avg_bits_err_output": 0.019874530066695446,
    "avg_bits_err_improve": 0.0025004699333045534,
    "time": 10040.65185546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3809.848388671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8330.071044921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2813.17919921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.807484438451687,
    "avg_bits_err_output": 0.24925,
    "avg_bits_err_improve": 7.558234438451687,
    "time": 38788.900146484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.429971816061293,
    "avg_bits_err_output": 7.429971816061293,
    "avg_bits_err_improve": 0,
    "time": 15681.800048828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (+ (* x (+ eps eps)) (* eps eps)) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 16.15167030008723,
    "avg_bits_err_output": 0.020817878977531904,
    "avg_bits_err_improve": 16.130852421109697,
    "time": 12243.058349609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (pow (exp (* x x)) 10.0) (if (!= (+ 1.0 (+ (cos x) 1.0)) 0.0) (/ (+ (- (+ (cos x) 2.0) (- 1.0 (* (cos x) (+ (cos x) 1.0)))) -1.0) (+ 1.0 (+ (cos x) 1.0))) (cos x)))",
    "output_parens": 23,
    "avg_bits_err_input": 3.509632368915222,
    "avg_bits_err_output": 3.036632641734797,
    "avg_bits_err_improve": 0.47299972718042493,
    "time": 18615.310546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -0.05) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) (/ x (fma x x 1.0))) (if (<= x 1000000.0) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) (/ x (fma x x 1.0)))))",
    "output_parens": 57,
    "avg_bits_err_input": 14.674814088112495,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 14.665189088112495,
    "time": 6070.620849609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.04050213454488,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.04050213454488,
    "time": 4759.298583984375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.0585255882019,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.0580255882019,
    "time": 4129.219482421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (- 1.7e+308 (+ -1.7e+308 (* t +inf.0))) -2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.3025212406251803,
    "avg_bits_err_improve": 63.69747875937482,
    "time": 19790.493408203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (/ t 5e+15) (* t 2e-16))",
    "output_parens": 3,
    "avg_bits_err_input": 61.84325366599201,
    "avg_bits_err_output": 0.34,
    "avg_bits_err_improve": 61.503253665992005,
    "time": 17974.167724609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (* a -4.0) (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b))) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.98620127500834,
    "avg_bits_err_output": 21.789777130974088,
    "avg_bits_err_improve": 12.196424144034253,
    "time": 37711.310546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.26e-287) (/ (- (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) b) 0.0) (/ (* (* a c) 4.0) (- b (sqrt (fma a (* c -4.0) (* b b))))) (+ b (sqrt (fma a (* c -4.0) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- 0.0 b) 0.0) (* (* a 4.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0)))",
    "output_parens": 45,
    "avg_bits_err_input": 33.96554197578415,
    "avg_bits_err_output": 15.864359129205706,
    "avg_bits_err_improve": 18.101182846578443,
    "time": 30920.921630859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1929.4931640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.34420391507517,
    "avg_bits_err_output": 0.01075,
    "avg_bits_err_improve": 40.33345391507517,
    "time": 3573.0615234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(+ (- (fma (+ (/ (+ x y) (fma y y (* x x))) 1.0) (- x y) 1.0) (- x y)) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 19.965563736638746,
    "avg_bits_err_output": 9.348989661800392,
    "avg_bits_err_improve": 10.616574074838354,
    "time": 16174.41064453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.687790786378916,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.687790786378916,
    "time": 7751.900390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.036625,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.036125,
    "time": 5241.1025390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019969360937770436,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.009594360937770436,
    "time": 3703.889892578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.014374999999999999,
    "time": 4494.015869140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.00075,
    "time": 2343.271240234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ d (+ c a)) (+ e b))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40486109062806497,
    "avg_bits_err_output": 0.2325,
    "avg_bits_err_improve": 0.17236109062806496,
    "time": 7760.24169921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (/ (- 1.0 (cos (* x 2.0))) 2.0) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.606384526306954,
    "avg_bits_err_output": 29.558056325714574,
    "avg_bits_err_improve": 0.048328200592379744,
    "time": 16256.154052734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.73343322037492,
    "avg_bits_err_output": 0.2841462406251803,
    "avg_bits_err_improve": 24.44928697974974,
    "time": 14502.135498046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (sin x) 0.0) (/ (if (!= (fma x (sin x) (pow (sin x) 2.0)) 0.0) (/ (fma (sin x) (* (sin x) (* x x)) (- (pow (sin x) 4.0))) (fma x (sin x) (pow (sin x) 2.0))) (- (* x (sin x)) (pow (sin x) 2.0))) (sin x)) (- x (sin x))) (tan x))",
    "output_parens": 33,
    "avg_bits_err_input": 30.39446080742367,
    "avg_bits_err_output": 30.295113448578487,
    "avg_bits_err_improve": 0.09934735884518275,
    "time": 34517.0498046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007698120312590144,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.0071981203125901436,
    "time": 3012.5390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (!= (/ 100.0 (/ i n)) 0.0) (- (/ (/ (* (/ (pow (+ (/ i n) 1.0) n) (/ i n)) 10000.0) (/ i n)) (/ 100.0 (/ i n))) (/ 1.0 (/ 1.0 (/ 100.0 (/ i n))))) (/ (fma 100.0 (pow (+ (/ i n) 1.0) n) -100.0) (/ i n))))",
    "output_parens": 41,
    "avg_bits_err_input": 48.210164515605314,
    "avg_bits_err_output": 14.166373360487647,
    "avg_bits_err_improve": 34.04379115511767,
    "time": 26949.359130859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (- INFINITY)) (fma c (/ a (fma c c (* d d))) (* b (/ d (fma c c (* d d))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 5e+82) (/ (fma c a (* b d)) (+ (* c c) (* d d))) (+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))))",
    "output_parens": 42,
    "avg_bits_err_input": 25.946804357537932,
    "avg_bits_err_output": 22.232096770746416,
    "avg_bits_err_improve": 3.7147075867915156,
    "time": 14915.297119140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 4e+278) (/ (if (!= (* a d) 0.0) (- (* (* b c) (- (/ d d) (/ 0.0 a))) (/ 1.0 (/ (/ 1.0 d) a))) (- (* b c) (* a d))) (+ (* c c) (* d d))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 56,
    "avg_bits_err_input": 25.666643687069257,
    "avg_bits_err_output": 22.63618811516005,
    "avg_bits_err_improve": 3.030455571909208,
    "time": 17202.9853515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (- ux (* ux maxCos)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.035875,
    "avg_bits_err_output": 0.02285396288740179,
    "avg_bits_err_improve": 0.013021037112598208,
    "time": 11963.9638671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ ux (+ -1.0 (- (+ 1.0 (* ux (* maxCos (- ux (fma ux maxCos 1.0))))) (* ux (* (+ maxCos -1.0) (- 1.0 ux))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.634844888315962,
    "avg_bits_err_output": 11.967481543596644,
    "avg_bits_err_improve": 1.667363344719318,
    "time": 28375.547119140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.671874358429502,
    "avg_bits_err_output": 12.143368295590317,
    "avg_bits_err_improve": 1.5285060628391847,
    "time": 29388.510009765625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* ux (- maxCos (* ux maxCos))) zi))",
    "output_parens": 34,
    "avg_bits_err_input": 0.3319351082645813,
    "avg_bits_err_output": 0.3315841448663901,
    "avg_bits_err_improve": 0.00035096339819118416,
    "time": 37922.310791015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (cos (atan (* alphay (/ (tan (* PI (+ (* 2.0 u1) 0.5))) alphax)))) 1.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.20653324229295936,
    "avg_bits_err_output": 0.2067313626055495,
    "avg_bits_err_improve": -0.0001981203125901443,
    "time": 28247.08251953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (/ (/ (* u1 (/ u1 (- 1.0 u1))) (/ u1 (- 1.0 u1))) (- 1.0 u1)) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.5450989847503924,
    "avg_bits_err_output": 0.5557367004935274,
    "avg_bits_err_improve": -0.01063771574313499,
    "time": 20613.9677734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3222715960245229,
    "avg_bits_err_output": 0.3222715960245229,
    "avg_bits_err_improve": 0,
    "time": 23825.53662109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 0.3322475408065705,
    "avg_bits_err_output": 0.3322475408065705,
    "avg_bits_err_improve": 0,
    "time": 43596.910888671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05262998408642589,
    "avg_bits_err_output": 0.03589031262357354,
    "avg_bits_err_improve": 0.01673967146285235,
    "time": 9200.021240234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) s) (exp (* 2.0 (log1p (exp (/ (fabs x) (- s)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.1491181812836496,
    "avg_bits_err_output": 0.13760880253780344,
    "avg_bits_err_improve": 0.01150937874584615,
    "time": 20684.493408203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6652467142518929,
    "avg_bits_err_output": 0.667276720285483,
    "avg_bits_err_improve": -0.0020300060335901593,
    "time": 22548.259521484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (if (!= (exp (/ -2.0 v)) 0.0) (/ 1.0 (/ 1.0 (exp (/ -2.0 v)))) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18097698960340125,
    "avg_bits_err_output": 0.19587308321178407,
    "avg_bits_err_improve": -0.014896093608382815,
    "time": 22372.977294921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (* -2.0 (* sinTheta_O (/ (/ sinTheta_O (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 2.7722461908401734,
    "avg_bits_err_output": 2.770818133963081,
    "avg_bits_err_improve": 0.0014280568770925761,
    "time": 26471.79296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (/ (* cosTheta_i (/ 0.5 (* v (exp (* sinTheta_i (/ sinTheta_O v)))))) (exp (* 1.0 (log (* v (sinh (/ 1.0 v))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.4536425977964531,
    "avg_bits_err_output": 0.41162411681964506,
    "avg_bits_err_improve": 0.04201848097680805,
    "time": 28928.700439453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.0918517741805179,
    "avg_bits_err_output": 0.08107137488191711,
    "avg_bits_err_improve": 0.010780399298600793,
    "time": 30031.04345703125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (- 1.0 (* alpha alpha)) (log (pow (* alpha alpha) PI))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0)) -1.0)",
    "output_parens": 11,
    "avg_bits_err_input": 0.4546062307488622,
    "avg_bits_err_output": 0.4124986831176853,
    "avg_bits_err_improve": 0.04210754763117691,
    "time": 24683.7255859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(/ (* (* 3.0 (* (log (fma u -1.3333333333333333 1.3333333333333333)) 2.0)) s) -2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 1.3239806661406583,
    "avg_bits_err_output": 1.022387583605561,
    "avg_bits_err_improve": 0.3015930825350974,
    "time": 24369.175537109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0) (/ (* (log (* (/ 1.0 (log (+ 1.0 (expm1 (pow (+ 1.0 (* u -4.0)) 2.0))))) (/ 1.0 (/ 1.0 (- 1.0 (* 4.0 u)))))) s) 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 12.377611995813469,
    "avg_bits_err_output": 11.647761541549674,
    "avg_bits_err_improve": 0.7298504542637954,
    "time": 22629.27587890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (* 2.0 PI)))) (* 0.75 (* (exp (/ r (* s -6.0))) (if (!= (/ (exp (/ r (* s -6.0))) (* s (* PI 12.0))) 0.0) (/ 1.0 (/ (exp (- (/ (/ r -6.0) s))) (/ (/ 0.16666666666666666 PI) s))) (* (exp (/ r (* s -6.0))) (/ (/ 0.16666666666666666 PI) s)))))) r)",
    "output_parens": 36,
    "avg_bits_err_input": 0.12956170487676072,
    "avg_bits_err_output": 0.1266159726532474,
    "avg_bits_err_improve": 0.0029457322235133254,
    "time": 28926.946044921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.926627020375334,
    "avg_bits_err_output": 0.76062136943165,
    "avg_bits_err_improve": 0.1660056509436839,
    "time": 30100.255615234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (log1p (expm1 (sqrt (- 1.0 (+ cosTheta cosTheta))))) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6796139703323612,
    "avg_bits_err_output": 0.49106327803295136,
    "avg_bits_err_improve": 0.1885506922994098,
    "time": 19883.985595703125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(if (!= (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2)))) 0.0) (- (* (/ (sin (* (* PI u2) -2.0)) (sqrt (- (log1p (- u1))))) (log1p (- u1))) 0.0) (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2)))))",
    "output_parens": 30,
    "avg_bits_err_input": 13.595958155964459,
    "avg_bits_err_output": 0.5887347266264839,
    "avg_bits_err_improve": 13.007223429337975,
    "time": 22338.29931640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (- (expm1 (log1p (- (log1p (- u1)))))))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.650115896474576,
    "avg_bits_err_output": 0.31287678178631856,
    "avg_bits_err_improve": 13.337239114688257,
    "time": 18988.573974609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(fma (log1p (- u0)) (* alpha (- alpha)) (* (log1p (- u0)) (fma (- alpha) alpha (* alpha alpha))))",
    "output_parens": 11,
    "avg_bits_err_input": 14.194763032863586,
    "avg_bits_err_output": 0.20425,
    "avg_bits_err_improve": 13.990513032863586,
    "time": 15857.3076171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ sin2phi (* alphay alphay)) (/ (/ cos2phi alphax) alphax)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.722424199082445,
    "avg_bits_err_output": 0.5034433283304871,
    "avg_bits_err_improve": 12.218980870751958,
    "time": 17653.033203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (* (/ 1.0 F) (tan (* PI l))) F))",
    "output_parens": 7,
    "avg_bits_err_input": 16.24167241562882,
    "avg_bits_err_output": 12.160094509075385,
    "avg_bits_err_improve": 4.081577906553434,
    "time": 20358.6064453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.20531372187554084,
    "avg_bits_err_output": 0.1505,
    "avg_bits_err_improve": 0.054813721875540844,
    "time": 18117.78759765625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (expm1 (log1p (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.279575600895308,
    "avg_bits_err_output": 10.473706121009585,
    "avg_bits_err_improve": 2.8058694798857235,
    "time": 23216.472412109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* PI (* (/ f -4.0) 2.0)))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0))",
    "output_parens": 32,
    "avg_bits_err_input": 61.35206920019215,
    "avg_bits_err_output": 2.0413620574161375,
    "avg_bits_err_improve": 59.31070714277601,
    "time": 73475.88696289062,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= (* l l) 2e+251) (* (/ (sqrt 2.0) (sqrt (+ (fma (- (fabs l)) (fabs l) (* l l)) (- (* (/ (+ x 1.0) (+ x -1.0)) (fma 2.0 (* t t) (* l l))) (* l l))))) t) (/ (* (sqrt 2.0) t) (sqrt (fma l (- l) (fma l (fma l -1.0 l) (/ (* (+ x 1.0) (fma 2.0 (* t t) (* l l))) (+ x -1.0)))))))",
    "output_parens": 37,
    "avg_bits_err_input": 42.8761941606873,
    "avg_bits_err_output": 39.406351710000514,
    "avg_bits_err_improve": 3.4698424506867838,
    "time": 31751.060791015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.9029741489722687,
    "avg_bits_err_output": 3.9029741489722687,
    "avg_bits_err_improve": 0,
    "time": 36040.7373046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.0585228084366862,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 1.0506478084366861,
    "time": 11499.4560546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- -2.0 (- -1.0 (/ (* Om (/ Om Omc)) Omc))) (- -1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.236104477331978,
    "avg_bits_err_output": 10.237674743005021,
    "avg_bits_err_improve": -0.001570265673043636,
    "time": 28706.585205078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 1e-156) (* (sqrt (* U (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- (* 2.0 n)))) (if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 5e+152) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (* (sqrt (- (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* (/ l Om) (* l 2.0))) t)) (sqrt (* (* n U) -2.0)))))",
    "output_parens": 75,
    "avg_bits_err_input": 34.36355138032334,
    "avg_bits_err_output": 28.299477305266876,
    "avg_bits_err_improve": 6.06407407505646,
    "time": 40332.77978515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1.25e-45) (/ 2.0 (/ (/ (* k (* (/ (sin k) l) (* (pow t 3.0) (* (/ (tan k) l) (+ k k))))) t) (+ t t))) (/ 2.0 (* (/ (* (/ k t) (* (tan k) (pow t 3.0))) l) (* (/ k t) (/ (sin k) l)))))",
    "output_parens": 28,
    "avg_bits_err_input": 47.61774772707072,
    "avg_bits_err_output": 30.893115816979,
    "avg_bits_err_improve": 16.72463191009172,
    "time": 46740.56982421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (sin k) l) (* (pow t 3.0) (* (tan k) (/ (+ 2.0 (pow (/ k t) 2.0)) l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.54339100056812,
    "avg_bits_err_output": 26.594537319906795,
    "avg_bits_err_improve": 5.948853680661326,
    "time": 24854.09033203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(fma (cos th) (* a1 (/ a1 (sqrt 2.0))) (* (/ a2 (sqrt 2.0)) (* a2 (cos th))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5459639125209151,
    "avg_bits_err_output": 0.47688346095507894,
    "avg_bits_err_improve": 0.0690804515658362,
    "time": 22264.373779296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* PI (* n 2.0)) (* k -0.5)) (sqrt (* PI (* n 2.0)))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5113231719727442,
    "avg_bits_err_output": 0.40051917344137633,
    "avg_bits_err_improve": 0.11080399853136791,
    "time": 20367.5146484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output_parens": 9,
    "avg_bits_err_input": 17.876537267042494,
    "avg_bits_err_output": 17.876537267042494,
    "avg_bits_err_improve": 0,
    "time": 27699.098388671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n))))))",
    "output_parens": 19,
    "avg_bits_err_input": 15.541636401465324,
    "avg_bits_err_output": 15.541636401465324,
    "avg_bits_err_improve": 0,
    "time": 7847.881591796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.158271240625183,
    "avg_bits_err_output": 18.158271240625183,
    "avg_bits_err_improve": 0,
    "time": 34780.9453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) -2e+295) (* w0 (sqrt (- 1.0 (/ (/ (* M (* D (* D (/ (* h (/ M d)) 4.0)))) d) l)))) (if (<= (/ h l) -5e-104) (* w0 (sqrt (- 1.0 (* (/ (* D M) (+ d d)) (* (/ (* D M) (+ d d)) (/ h l)))))) (* w0 (sqrt (- 1.0 (* M (* (/ (/ D d) 4.0) (* h (* (/ D d) (/ M l))))))))))",
    "output_parens": 40,
    "avg_bits_err_input": 14.204097075735564,
    "avg_bits_err_output": 9.503400560049226,
    "avg_bits_err_improve": 4.700696515686339,
    "time": 26289.849853515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -2e+264) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) -1e-158) (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (/ (/ A (* l V)) (sqrt (/ A (* l V)))) (sqrt (/ A (* l V))))) (if (<= (* V l) 0.0) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (* c0 (* (sqrt (/ (/ 2.0 V) (+ l l))) (sqrt A))))))",
    "output_parens": 47,
    "avg_bits_err_input": 18.97941775789509,
    "avg_bits_err_output": 9.748063647199466,
    "avg_bits_err_improve": 9.231354110695623,
    "time": 24133.64990234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= c0 -1.32e+194) (* (/ c0 (* 2.0 w)) (if (!= (- (* (/ d D) (* (/ c0 w) (/ d (* D h)))) (sqrt (- (pow (* (/ d D) (* (/ c0 w) (/ d (* D h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* (/ d D) (* (/ c0 w) (/ d (* D h)))) (sqrt (- (pow (* (/ d D) (* (/ c0 w) (/ d (* D h)))) 2.0) (* M M)))))) (fma d (* d (/ (/ c0 (* D h)) (* D w))) (sqrt (- (pow (* (/ d D) (* (/ c0 w) (/ d (* D h)))) 2.0) (* M M)))))) (if (<= c0 -7e+119) (/ (/ (* c0 (if (!= (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (* (+ (* d (/ (* (/ c0 (* D h)) d) (* D w))) M) (- (* d (/ (* (/ c0 (* D h)) d) (* D w))) M)))))) (fma d (/ (* d c0) (* (* D h) (* D w))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))))) w) 2.0) (if (<= c0 -4.2e+112) (* (/ c0 (* 2.0 w)) (if (!= (- (* (/ d D) (* (/ c0 w) (/ d (* D h)))) (sqrt (- (pow (* (/ d D) (* (/ c0 w) (/ d (* D h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* (/ d D) (* (/ c0 w) (/ d (* D h)))) (sqrt (- (pow (* (/ d D) (* (/ c0 w) (/ d (* D h)))) 2.0) (* M M)))))) (fma d (* d (/ (/ c0 (* D h)) (* D w))) (sqrt (- (pow (* (/ d D) (* (/ c0 w) (/ d (* D h)))) 2.0) (* M M)))))) (if (<= c0 -5.5e-91) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* d (/ c0 D)) (* D (* w h)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* d (/ c0 D)) (* D (* w h)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M))))) (fma d (/ (* d (/ c0 D)) (* D (* w h))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M)))))) (if (<= c0 -6e-201) (/ (/ (* c0 (if (!= (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (* (+ (* d (/ (* (/ c0 (* D h)) d) (* D w))) M) (- (* d (/ (* (/ c0 (* D h)) d) (* D w))) M)))))) (+ (* d (* d (/ (/ c0 (* D h)) (* D w)))) (sqrt (- (pow (* d (* d (/ (/ c0 (* D h)) (* D w)))) 2.0) (* M M)))))) w) 2.0) (if (<= c0 2.5e-89) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* d (/ c0 D)) (* w (* h D)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* w (* h D)))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* d (/ c0 D)) (* w (* h D)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* w (* h D)))) 2.0) (* M M))))) (fma d (/ (/ (* d c0) (* D h)) (* D w)) (sqrt (- (pow (* d (/ (/ (* d c0) (* D h)) (* D w))) 2.0) (* M M)))))) (/ (/ (* c0 (if (!= (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (* d c0) (* (* D h) (* D w)))) (* (sqrt (- M (* d (* (/ (/ c0 h) D) (/ d (* D w)))))) (sqrt (- (fma d (* (/ (/ c0 h) D) (/ d (* D w))) M))))))) (fma d (/ (* d c0) (* (* D h) (* D w))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))))) w) 2.0)))))))",
    "output_parens": 431,
    "avg_bits_err_input": 59.5038495139375,
    "avg_bits_err_output": 31.10914080177613,
    "avg_bits_err_improve": 28.39470871216137,
    "time": 81100.9765625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (/ (if (!= (* (pow (* M (/ D (* d 2.0))) 2.0) (* h 0.5)) 0.0) (/ 1.0 (/ 1.0 (/ (* (* D (+ M M)) (* (/ (* D M) (+ d d)) h)) (* d 8.0)))) (/ (* (* D (+ M M)) (* (/ (* D M) (+ d d)) h)) (* d 8.0))) l))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 5e+279) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (* (sqrt (/ d (* h l))) (sqrt d)) (+ (* h (* (/ (pow (/ (* M D) (* d 2.0)) 2.0) l) -0.5)) 1.0))))",
    "output_parens": 97,
    "avg_bits_err_input": 26.64818285572742,
    "avg_bits_err_output": 21.741624648207168,
    "avg_bits_err_improve": 4.906558207520252,
    "time": 48641.172607421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (exp (* 1.0 (log (+ 0.25 (/ -0.25 (fma x x 1.0)))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 36,
    "avg_bits_err_input": 15.291291794951803,
    "avg_bits_err_output": 14.781882692801924,
    "avg_bits_err_improve": 0.5094091021498794,
    "time": 23669.130859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9862383613244511,
    "avg_bits_err_output": 0.010323120312590145,
    "avg_bits_err_improve": 0.9759152410118609,
    "time": 4704.478271484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (- (/ (/ 1.0 PI) t) (* (* v v) (/ (/ 5.0 t) PI))) (* (sqrt (- 2.0 (* v (* v 6.0)))) (- 1.0 (* v v))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.4528530939519554,
    "avg_bits_err_output": 0.32082623659311155,
    "avg_bits_err_improve": 0.13202685735884384,
    "time": 23537.782470703125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt (- 2.0 (* v (* v 6.0)))) -4.0) (- (* v v) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.011292481250360578,
    "avg_bits_err_output": 0.009363361324451066,
    "avg_bits_err_improve": 0.0019291199259095122,
    "time": 7145.53662109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.524612494388833,
    "avg_bits_err_output": 0.524612494388833,
    "avg_bits_err_improve": 0,
    "time": 9490.37451171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (+ (/ (pow k m) (* (* (fma k k (- (* k 10.0) -1.0)) 2.0) 2.0)) (/ (+ (pow k m) (* (pow k m) 2.0)) (* (* (+ (* k (+ 10.0 k)) 1.0) 2.0) 2.0))))",
    "output_parens": 19,
    "avg_bits_err_input": 2.17998571354413,
    "avg_bits_err_output": 2.1484310012324794,
    "avg_bits_err_improve": 0.03155471231165041,
    "time": 18932.033935546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ Vef (+ EDonor mu)) Ec) KbT)))) (/ NaChar (+ 1.0 (- (exp (log1p (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))) 1.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.018873997935444798,
    "avg_bits_err_output": 0.018873997935444798,
    "avg_bits_err_improve": 0,
    "time": 10148.0341796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow a 4.0) (- (* (* a (+ a a)) (* b b)) (* (- b) (* b (* b b))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.17492481250360573,
    "avg_bits_err_output": 0.0709080828133113,
    "avg_bits_err_improve": 0.10401672969029442,
    "time": 7855.18505859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (fma b (* a (* b a)) (pow b 4.0)) (* (* a a) (fma a a (* b b)))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 20,
    "avg_bits_err_input": 0.1863240526179966,
    "avg_bits_err_output": 0.1013592026151121,
    "avg_bits_err_improve": 0.08496485000288449,
    "time": 22350.902099609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (fma (* b b) (fma a a (fma b b (* a a))) (pow a 4.0)) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 0.1862157017554753,
    "avg_bits_err_output": 0.10785356662892104,
    "avg_bits_err_improve": 0.07836213512655427,
    "time": 15138.177978515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.55708596115098,
    "avg_bits_err_output": 13.55708596115098,
    "avg_bits_err_improve": 0,
    "time": 21618.103515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.036489005031974,
    "avg_bits_err_output": 0.049,
    "avg_bits_err_improve": 40.987489005031975,
    "time": 5747.9970703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (- (exp (log1p (/ (pow (tan x) 2.0) (+ x (tan x))))) 1.0)) (- x (tan x))))",
    "output_parens": 22,
    "avg_bits_err_input": 31.3597885931389,
    "avg_bits_err_output": 30.587223447281644,
    "avg_bits_err_improve": 0.7725651458572571,
    "time": 26571.947998046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2) a) 0.0) (- (/ c (- (- (sqrt (fma b_2 b_2 (* c (- a))))) b_2)) 0.0) (/ (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2) a))",
    "output_parens": 23,
    "avg_bits_err_input": 33.896260775808834,
    "avg_bits_err_output": 19.72705105083689,
    "avg_bits_err_improve": 14.169209724971942,
    "time": 18623.6650390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.34583601879705,
    "avg_bits_err_output": 19.46650163906037,
    "avg_bits_err_improve": 14.879334379736683,
    "time": 19347.29541015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 32.197380032654614,
    "avg_bits_err_output": 31.397379051118996,
    "avg_bits_err_improve": 0.8000009815356179,
    "time": 18326.085693359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (if (!= (- 1.0 (pow x (/ 1.0 n))) 0.0) (/ 1.0 (/ 1.0 (expm1 (/ (log x) n)))) (expm1 (/ (log x) n))))",
    "output_parens": 17,
    "avg_bits_err_input": 32.265012022629655,
    "avg_bits_err_output": 10.265482592139167,
    "avg_bits_err_improve": 21.99952943049049,
    "time": 31552.94384765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (- (if (!= (- 1.0 (log1p N)) 0.0) (/ (- 1.0 (pow (log1p N) 2.0)) (- 1.0 (log1p N))) (+ (log1p N) 1.0)) (log N)) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 29.181923357574714,
    "avg_bits_err_output": 29.210158524332506,
    "avg_bits_err_improve": -0.02823516675779203,
    "time": 12478.153564453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (/ 1.0 x) (if (!= (/ x (+ x 1.0)) 0.0) (/ (- (* (/ x (+ x 1.0)) x) x) (+ (/ x (+ x 1.0)) (* x (/ x (+ x 1.0))))) (+ (/ x (+ x 1.0)) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 14.227152949135515,
    "avg_bits_err_output": 13.980490253647059,
    "avg_bits_err_improve": 0.24666269548845676,
    "time": 19265.4697265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -1e-109) (- (fma (cos eps) (cos x) (- (cos x))) (* (sin x) (sin eps))) (if (<= x 1.45e-62) (if (!= (+ (cos (+ x eps)) (cos x)) 0.0) (/ (- (* (sin x) (sin x)) (* (sin (+ x eps)) (sin (+ x eps)))) (+ (cos (+ x eps)) (cos x))) (- (cos (+ x eps)) (cos x))) (- (* (if (!= (- -1.0 (cos eps)) 0.0) (/ (fma (cos eps) (cos eps) -1.0) (+ (cos eps) 1.0)) (+ (cos eps) -1.0)) (cos x)) (* (sin x) (sin eps)))))",
    "output_parens": 55,
    "avg_bits_err_input": 39.48883795789857,
    "avg_bits_err_output": 2.0206193036336284,
    "avg_bits_err_improve": 37.46821865426494,
    "time": 24386.312744140625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.434190690407554,
    "avg_bits_err_output": 29.131100457731332,
    "avg_bits_err_improve": 0.30309023267622237,
    "time": 15108.404052734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (exp (* 1.0 (log1p (- (cos x))))) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 29.684109682184822,
    "avg_bits_err_output": 29.692204051535985,
    "avg_bits_err_improve": -0.008094369351162811,
    "time": 22841.228515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* (* a -4.0) (/ c (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.82758938682075,
    "avg_bits_err_output": 21.650567208189955,
    "avg_bits_err_improve": 12.177022178630793,
    "time": 24230.404296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.980636546105906,
    "avg_bits_err_output": 21.605621738275595,
    "avg_bits_err_improve": 12.375014807830311,
    "time": 26637.2109375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ 1.0 (/ (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 61.26344024916715,
    "avg_bits_err_output": 0.0287124062518029,
    "avg_bits_err_improve": 61.23472784291534,
    "time": 17970.9384765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (- (exp (log1p (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 1.0)) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00405331366263,
    "avg_bits_err_output": 44.25319710498286,
    "avg_bits_err_improve": 18.75085620867977,
    "time": 12874.706298828125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (+ (* (/ 0.5 (- -1.0 eps)) (+ eps eps)) (+ (* -2.0 (/ 0.5 (- -1.0 eps))) -1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 58.70969124861712,
    "avg_bits_err_output": 50.68282258420166,
    "avg_bits_err_improve": 8.02686866441546,
    "time": 20152.748046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (if (!= (+ 1.0 (/ x (tan x))) 0.0) (/ (exp (* 1.0 (log (- 1.0 (pow (/ x (tan x)) 2.0))))) (+ 1.0 (/ x (tan x)))) (- 1.0 (/ x (tan x)))) x)",
    "output_parens": 20,
    "avg_bits_err_input": 59.914072478982206,
    "avg_bits_err_output": 59.90025321091074,
    "avg_bits_err_improve": 0.013819268071465274,
    "time": 28624.48974609375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ a b)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.20264697536054,
    "avg_bits_err_output": 29.29564722061063,
    "avg_bits_err_improve": 30.906999754749908,
    "time": 26505.3369140625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.35365944160877,
    "avg_bits_err_output": 0.45263684218813105,
    "avg_bits_err_improve": 40.901022599420635,
    "time": 7490.466796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.60070967651047,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.60045967651047,
    "time": 3285.760009765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.59846497119116,
    "avg_bits_err_output": 0.015469822378330845,
    "avg_bits_err_improve": 29.582995148812827,
    "time": 8628.321533203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (expm1 (- x)) (expm1 x)) 0.0) (/ (- (pow (expm1 (- x)) 2.0) (* (expm1 x) (expm1 x))) (- (expm1 (- x)) (expm1 x))) (+ (expm1 (- x)) (expm1 x)))",
    "output_parens": 22,
    "avg_bits_err_input": 30.00743125467056,
    "avg_bits_err_output": 29.1592112444523,
    "avg_bits_err_improve": 0.8482200102182595,
    "time": 19682.04443359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.152640581308404,
    "avg_bits_err_output": 9.152640581308404,
    "avg_bits_err_improve": 0,
    "time": 22845.108642578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (tan (+ x eps)) 0.0) (* (tan (+ x eps)) (- (/ (tan (+ x eps)) (tan (+ x eps))) (/ (tan x) (log1p (expm1 (tan (+ x eps))))))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 23,
    "avg_bits_err_input": 36.78331177612614,
    "avg_bits_err_output": 36.81669198775673,
    "avg_bits_err_improve": -0.03338021163058613,
    "time": 20523.272705078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.579155592790897,
    "avg_bits_err_output": 0.16309924843993387,
    "avg_bits_err_improve": 29.416056344350963,
    "time": 15035.5732421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 36.933256363557675,
    "avg_bits_err_output": 21.800203527837443,
    "avg_bits_err_improve": 15.133052835720232,
    "time": 22137.482421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.311396114594427,
    "avg_bits_err_output": 19.311396114594427,
    "avg_bits_err_improve": 0,
    "time": 16451.838134765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- 1.0 (if (!= (+ (atan (+ 1.0 N)) -1.0) 0.0) (* (- 1.0 (atan (+ 1.0 N))) (/ (- (+ 1.0 (atan N)) (atan (+ 1.0 N))) (- 1.0 (atan (+ 1.0 N))))) (- (+ 1.0 (atan N)) (atan (+ 1.0 N)))))",
    "output_parens": 24,
    "avg_bits_err_input": 15.176901341954409,
    "avg_bits_err_output": 15.178427436970642,
    "avg_bits_err_improve": -0.001526095016233242,
    "time": 14203.802001953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.6802993283027,
    "avg_bits_err_output": 1.4740945429348011,
    "avg_bits_err_improve": 28.2062047853679,
    "time": 25379.86669921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (* (/ m v) (* (- 1.0 m) (- 1.0 m))) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07752953698335613,
    "avg_bits_err_output": 0.07341380440922632,
    "avg_bits_err_improve": 0.00411573257412981,
    "time": 12414.002685546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b a) (/ (/ -1.0 a) b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.036826129186863,
    "avg_bits_err_output": 0.27063832984063624,
    "avg_bits_err_improve": 15.766187799346227,
    "time": 12541.65478515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (+ (* (/ PI 1440.0) (+ angle angle)) (* (/ PI 1440.0) (* angle 6.0))))) 2.0))",
    "output_parens": 16,
    "avg_bits_err_input": 20.55777104414763,
    "avg_bits_err_output": 20.563702164588385,
    "avg_bits_err_improve": -0.005931120440756388,
    "time": 39853.06591796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* PI (/ angle 180.0))) (cos (/ (* PI angle) -180.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 30.946381846740348,
    "avg_bits_err_output": 31.016186644592217,
    "avg_bits_err_improve": -0.06980479785186944,
    "time": 33958.691650390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (* (* angle PI) 0.005555555555555556))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 21.097963081477836,
    "avg_bits_err_output": 21.116599466758554,
    "avg_bits_err_improve": -0.018636385280718315,
    "time": 37575.280517578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (/ m v) (- m (* m m))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1742127584773497,
    "avg_bits_err_output": 0.17151403839369667,
    "avg_bits_err_improve": 0.0026987200836530445,
    "time": 17052.247314453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- (fma (tan x) (tan x) -1.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.31606680393017456,
    "avg_bits_err_output": 0.3080552804084554,
    "avg_bits_err_improve": 0.008011523521719133,
    "time": 17818.299072265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1368962406251803,
    "avg_bits_err_output": 0.1368962406251803,
    "avg_bits_err_improve": 0,
    "time": 15990.171630859375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.16051448746713,
    "avg_bits_err_output": 17.155645552419358,
    "avg_bits_err_improve": 0.0048689350477708615,
    "time": 36454.84765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.55899760197495,
    "avg_bits_err_output": 0.1673941734413762,
    "avg_bits_err_improve": 52.39160342853358,
    "time": 25248.119384765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 28.791949948158187,
    "avg_bits_err_output": 0.3372158066500222,
    "avg_bits_err_improve": 28.454734141508165,
    "time": 25465.767578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.909366179606586,
    "avg_bits_err_output": 0.23704774531980144,
    "avg_bits_err_improve": 43.67231843428679,
    "time": 29361.383056640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma c (* a -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.83231652137298,
    "avg_bits_err_output": 21.650567208189955,
    "avg_bits_err_improve": 12.181749313183026,
    "time": 22193.1142578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (fma (cos (- lambda1 lambda2)) (cos phi2) (- (cos phi1))) 0.0) (/ (fma (* (cos (- lambda1 lambda2)) (cos phi2)) (* (cos (- lambda1 lambda2)) (cos phi2)) (- (pow (cos phi1) 2.0))) (fma (cos (- lambda1 lambda2)) (cos phi2) (- (cos phi1)))) (+ (* (cos (- lambda1 lambda2)) (cos phi2)) (cos phi1)))))",
    "output_parens": 39,
    "avg_bits_err_input": 0.8195144067283671,
    "avg_bits_err_output": 0.9012967420011994,
    "avg_bits_err_improve": -0.0817823352728323,
    "time": 26876.62158203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(+ (/ 2.0 (+ 2.0 (expm1 (* -2.0 x)))) -1.0)",
    "output_parens": 5,
    "avg_bits_err_input": 29.38406440195118,
    "avg_bits_err_output": 29.38115969594327,
    "avg_bits_err_improve": 0.002904706007907265,
    "time": 12925.52783203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ (exp (+ x x)) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 58.214160224743246,
    "avg_bits_err_output": 0.6364693609377705,
    "avg_bits_err_improve": 57.57769086380547,
    "time": 19073.093994140625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (/ -1.0 (exp x))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.073115069838195,
    "avg_bits_err_output": 0.07571936093777043,
    "avg_bits_err_improve": 57.99739570890043,
    "time": 8411.626708984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008865601562950725,
    "avg_bits_err_output": 0.008865601562950725,
    "avg_bits_err_improve": 0,
    "time": 2402.429443359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.777,
    "avg_bits_err_output": 31.777,
    "avg_bits_err_improve": 0,
    "time": 5554.4990234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (if (!= (/ 1.0 (- 1.0 x)) 0.0) (/ (/ (if (!= (/ (/ (* x x) (- 1.0 x)) (- 1.0 x)) 0.0) (/ (* (- (/ -1.0 (- (pow (- 1.0 x) 2.0))) (/ (/ (* x x) (- 1.0 x)) (- 1.0 x))) (/ 1.0 (/ 1.0 (/ x (+ x -1.0))))) (/ x (+ x -1.0))) (/ (- -1.0 x) (+ x -1.0))) (- 1.0 x)) (/ 1.0 (- 1.0 x))) (/ (- -1.0 x) (+ x -1.0)))))",
    "output_parens": 42,
    "avg_bits_err_input": 58.70562520356331,
    "avg_bits_err_output": 58.7094256589185,
    "avg_bits_err_improve": -0.0038004553551900244,
    "time": 21759.85302734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04394812031259015,
    "avg_bits_err_output": 0.043875,
    "avg_bits_err_improve": 7.312031259015112e-05,
    "time": 2894.071044921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.127375,
    "avg_bits_err_output": 0.127375,
    "avg_bits_err_improve": 0,
    "time": 28263.85498046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13125,
    "avg_bits_err_output": 0.13125,
    "avg_bits_err_improve": 0,
    "time": 22973.24365234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* (- lambda1 lambda2) (* (cos (/ phi1 2.0)) (cos (/ phi2 2.0)))) (* (- lambda1 lambda2) (* (sin (/ phi1 2.0)) (sin (/ phi2 2.0))))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 38.1486844613934,
    "avg_bits_err_output": 0.12371712664347027,
    "avg_bits_err_improve": 38.02496733474993,
    "time": 27521.770263671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.65675921527103,
    "avg_bits_err_output": 14.65675921527103,
    "avg_bits_err_improve": 0,
    "time": 4868.808837890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.15562405006909605,
    "avg_bits_err_output": 0.15562405006909605,
    "avg_bits_err_improve": 0,
    "time": 39308.38330078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.56642732981351,
    "avg_bits_err_output": 0.17075733125324516,
    "avg_bits_err_improve": 52.395669998560265,
    "time": 24446.13623046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.92385788802242,
    "avg_bits_err_output": 0.34277159750125474,
    "avg_bits_err_improve": 28.581086290521167,
    "time": 27823.27294921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.97902241094706,
    "avg_bits_err_output": 0.24014455000865362,
    "avg_bits_err_improve": 43.73887786093841,
    "time": 32747.643310546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -3.0) (* b b)))) 0.0) (* c (/ (* a -3.0) (+ b (sqrt (fma a (* c -3.0) (* b b)))))) (- (sqrt (fma a (* c -3.0) (* b b))) b)) (* a 3.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.856203313246255,
    "avg_bits_err_output": 22.277400444808624,
    "avg_bits_err_improve": 11.57880286843763,
    "time": 27860.728759765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (log1p (expm1 (* (cos (- lambda2 lambda1)) (* (sin phi1) (cos phi2)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.010364323226927,
    "avg_bits_err_output": 13.026272625163433,
    "avg_bits_err_improve": -0.01590830193650561,
    "time": 38247.06787109375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.967350305388614,
    "avg_bits_err_output": 0.5399511557680089,
    "avg_bits_err_improve": 29.427399149620605,
    "time": 26755.7666015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(log1p (expm1 (+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.010625,
    "avg_bits_err_output": 0.012542481250360577,
    "avg_bits_err_improve": -0.0019174812503605764,
    "time": 7806.3818359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (- (+ -1.0 (/ x (+ x 1.0))) (/ 1.0 (+ x 1.0))) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 14.035714261268229,
    "avg_bits_err_output": 12.213982712458684,
    "avg_bits_err_improve": 1.8217315488095451,
    "time": 17324.87890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= C -1e-6) (* (sqrt (* (* F (- (pow B 2.0) (* A (* C 4.0)))) -2.0)) (/ (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (* A (* C 4.0)) (pow B 2.0)))) (if (<= C 4.6e-27) (* (/ (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C)))) (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (* F -2.0))) (if (<= C 2.4e+123) (/ (sqrt (* (* F (* -2.0 (- (* A (* 4.0 C)) (pow B 2.0)))) (if (!= (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) 0.0) (/ (- (- (pow (+ A C) 2.0) (pow (- A C) 2.0)) (pow B 2.0)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* 4.0 C)) (pow B 2.0))) (* (/ (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (if (!= A 0.0) (/ (- (* A (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C)) (* A A)) A) (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))))) (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (* F -2.0))))))",
    "output_parens": 128,
    "avg_bits_err_input": 51.828736731426396,
    "avg_bits_err_output": 48.3008839580605,
    "avg_bits_err_improve": 3.5278527733658933,
    "time": 48681.533935546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -1e-25) (* (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) (/ 180.0 PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 0.0) (/ (* (atan (/ (if (!= (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))) 0.0) (/ (- (* (pow (- C A) 2.0) 0.0) (pow B 2.0)) (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))) (- (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))) B)) 180.0) PI) (* (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) (/ 180.0 PI))))",
    "output_parens": 77,
    "avg_bits_err_input": 29.104482211257125,
    "avg_bits_err_output": 25.31232420510068,
    "avg_bits_err_improve": 3.792158006156445,
    "time": 25419.414794921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (/ (- (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (* (sqrt F) (sqrt (* 2.0 (+ A (if (!= (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) 0.0) (/ (- (- (* C C) (pow (- A C) 2.0)) (pow B 2.0)) (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))))))) (- (pow B 2.0) (* 4.0 (* A C)))) (exp (* 1.0 (log (/ (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- (* 2.0 (* (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) F))))) (- (* A (* C 4.0)) (pow B 2.0)))))))",
    "output_parens": 92,
    "avg_bits_err_input": 52.28626989007919,
    "avg_bits_err_output": 46.96059357728005,
    "avg_bits_err_improve": 5.325676312799139,
    "time": 47066.95751953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.23335130055074,
    "avg_bits_err_output": 15.23335130055074,
    "avg_bits_err_improve": 0,
    "time": 15588.98388671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-289) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= g 0.0) (/ (* g (if (!= (- (sqrt (fma h (- h) (* g g))) g) 0.0) (* h (/ h (- g (sqrt (fma h (- h) (* g g)))))) (+ g (sqrt (fma h (- h) (* g g)))))) (- g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- g (- (sqrt (- (* g g) (* h h))))) 0.0) (* h (/ h (- (- g) (sqrt (- (* g g) (* h h)))))) (- (sqrt (- (* g g) (* h h))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 79,
    "avg_bits_err_input": 35.849081053277125,
    "avg_bits_err_output": 3.5767292869025886,
    "avg_bits_err_improve": 32.272351766374534,
    "time": 43505.28515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) 3.0))) (* (sin (expm1 (log1p (* PI 0.6666666666666666)))) (sin (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.9904133468827534,
    "avg_bits_err_output": 0.02041748125036058,
    "avg_bits_err_improve": 0.9699958656323928,
    "time": 18284.189697265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (- (+ (exp a) (+ (exp b) 1.0)) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5334749102026902,
    "avg_bits_err_output": 0.5767836551277554,
    "avg_bits_err_improve": -0.0433087449250652,
    "time": 5460.50732421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -5e+288) (* a1 (/ (/ a2 b2) b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-312) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+303) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.45150533875889,
    "avg_bits_err_output": 2.415170196462478,
    "avg_bits_err_improve": 9.036335142296412,
    "time": 11174.93408203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4214587964875865,
    "avg_bits_err_output": 0.3675,
    "avg_bits_err_improve": 0.0539587964875865,
    "time": 10887.642333984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.001) (log (if (!= (- (hypot 1.0 x) x) 0.0) (if (!= (* x (/ x (- (hypot 1.0 x) x))) 0.0) (- (/ (* x (/ x (- (hypot 1.0 x) x))) (* x x)) 0.0) (/ 1.0 (- (hypot 1.0 x) x))) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 500000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 57,
    "avg_bits_err_input": 52.89417892955714,
    "avg_bits_err_output": 0.1291562475411688,
    "avg_bits_err_improve": 52.765022682015974,
    "time": 14886.30908203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.721221891303513,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.721221891303513,
    "time": 2537.548095703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 2.0 (* x 2.0)) (+ x (+ x 2.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.013875,
    "avg_bits_err_output": 0.017625,
    "avg_bits_err_improve": -0.003749999999999998,
    "time": 5466.7490234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1318.916015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= w -1e+58) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* w (* r (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (if (<= w 1e+97) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* r (* w (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v))))) (+ (- (/ 2.0 (* r r)) 1.5) (- (* (* w (* r (* r w))) (/ (- 0.375 (* v 0.25)) (- 1.0 v)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.709489423258463,
    "avg_bits_err_output": 0.27219381289028627,
    "avg_bits_err_improve": 12.437295610368176,
    "time": 25464.758544921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (+ (* x1 (* (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0)) (* x1 -6.0))) (/ (* (* (- 3.0 (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (* x1 -2.0)) (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2)))) (- -1.0 (* x1 x1))))))))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.5159012060702414,
    "avg_bits_err_output": 0.2756764007142153,
    "avg_bits_err_improve": 0.24022480535602608,
    "time": 79902.27734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (- (- u) t1)) v) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.295043589852305,
    "avg_bits_err_output": 1.1278528990175076,
    "avg_bits_err_improve": 17.167190690834797,
    "time": 10563.023681640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.23467251746548876,
    "avg_bits_err_output": 0.23467251746548876,
    "avg_bits_err_improve": 0,
    "time": 10053.412841796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003875,
    "avg_bits_err_output": 0.003875,
    "avg_bits_err_improve": 0,
    "time": 3356.776123046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (- (/ (/ (/ PI 2.0) a) (+ a b)) (/ (/ PI 2.0) (* b (+ a b)))) (- b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.138060384022722,
    "avg_bits_err_output": 0.2534791359420971,
    "avg_bits_err_improve": 13.884581248080625,
    "time": 18331.572265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (exp (- (* eps x) x)) (+ (* (/ 1.0 eps) (exp (- (* eps x) x))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) 2.0)",
    "output_parens": 16,
    "avg_bits_err_input": 29.543531437114826,
    "avg_bits_err_output": 24.929822258127363,
    "avg_bits_err_improve": 4.613709178987463,
    "time": 27566.59228515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.029,
    "avg_bits_err_output": 0.029,
    "avg_bits_err_improve": 0,
    "time": 6300.72021484375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.032875,
    "avg_bits_err_output": 0.032875,
    "avg_bits_err_improve": 0,
    "time": 16650.478271484375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))) (+ 2.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.048,
    "avg_bits_err_output": 0.056,
    "avg_bits_err_improve": -0.008,
    "time": 14656.447998046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3402.896240234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8956.32666015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2359.3427734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.840824799560117,
    "avg_bits_err_output": 0.255375,
    "avg_bits_err_improve": 7.585449799560117,
    "time": 37995.47509765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.3247496513254875,
    "avg_bits_err_output": 7.3247496513254875,
    "avg_bits_err_improve": 0,
    "time": 15128.55810546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 15.708367810745404,
    "avg_bits_err_output": 0.050350172528408066,
    "avg_bits_err_improve": 15.658017638216997,
    "time": 10846.17626953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (if (!= (* (exp (* x (* x 10.0))) (cos x)) 0.0) (/ (* (+ (cos x) 1.0) (* (pow (exp (* x x)) 10.0) (* (pow (exp (* x x)) 10.0) (cos x)))) (* (pow (exp (* x x)) 10.0) (cos x))) (* (pow (exp (* x x)) 10.0) (+ (cos x) 1.0))) (pow (exp (* x x)) 10.0))",
    "output_parens": 35,
    "avg_bits_err_input": 3.541094055679177,
    "avg_bits_err_output": 3.028643662906924,
    "avg_bits_err_improve": 0.5124503927722528,
    "time": 19834.168701171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(log1p (expm1 (/ x (fma x x 1.0))))",
    "output_parens": 4,
    "avg_bits_err_input": 14.28559916519377,
    "avg_bits_err_output": 14.28559916519377,
    "avg_bits_err_improve": 0,
    "time": 13355.537841796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.92305890107985,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.92305890107985,
    "time": 6226.395751953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.353893905130626,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 39.35376890513063,
    "time": 4381.832763671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.300125,
    "avg_bits_err_improve": 63.699875,
    "time": 17739.7998046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* 4e-32 (* t t))",
    "output_parens": 2,
    "avg_bits_err_input": 61.843250060791135,
    "avg_bits_err_output": 0.40952161719245816,
    "avg_bits_err_improve": 61.433728443598675,
    "time": 16820.809326171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.980636546105906,
    "avg_bits_err_output": 21.605621738275595,
    "avg_bits_err_improve": 12.375014807830311,
    "time": 27628.1513671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma c (* a -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.83231652137298,
    "avg_bits_err_output": 21.650567208189955,
    "avg_bits_err_improve": 12.181749313183026,
    "time": 27464.051513671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2566.05322265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.83810762505364,
    "avg_bits_err_output": 0.013125,
    "avg_bits_err_improve": 39.824982625053636,
    "time": 7585.521240234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(- (/ (* x x) (fma y y (* x x))) (* y (/ y (fma y y (* x x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 20.041416061583668,
    "avg_bits_err_output": 20.03834796581127,
    "avg_bits_err_improve": 0.003068095772398749,
    "time": 12831.74951171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.661189081637689,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.661189081637689,
    "time": 6399.048583984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.039375,
    "time": 7565.31494140625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(* (+ a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.022490601562950727,
    "avg_bits_err_output": 0.022490601562950727,
    "avg_bits_err_improve": 0,
    "time": 3244.719482421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.0135,
    "avg_bits_err_output": 0.0135,
    "avg_bits_err_improve": 0,
    "time": 3243.7744140625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000875,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0,
    "time": 2076.189697265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ d (+ c a)) (+ e b))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39465601562950725,
    "avg_bits_err_output": 0.245875,
    "avg_bits_err_improve": 0.14878101562950724,
    "time": 8977.41943359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (pow (cos x) 2.0) 0.0) (/ (- (pow (cos x) 2.0) (/ (* (+ 1.0 (cos (* x 2.0))) (pow (cos x) 2.0)) 2.0)) (pow (cos x) 2.0)) (- 1.0 (pow (cos x) 2.0))) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 29,
    "avg_bits_err_input": 30.292060223209155,
    "avg_bits_err_output": 30.27411942993651,
    "avg_bits_err_improve": 0.01794079327264697,
    "time": 13690.275634765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 25.038366505204042,
    "avg_bits_err_output": 0.28032312031259016,
    "avg_bits_err_improve": 24.75804338489145,
    "time": 13433.628662109375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (+ x (sin x)) 0.0) (/ (if (!= (- (* x x) (- (pow (sin x) 2.0))) 0.0) (/ (+ (fma (- (pow (sin x) 2.0)) (pow (sin x) 2.0) (pow (sin x) 4.0)) (- (pow x 4.0) (pow (sin x) 4.0))) (- (* x x) (- (pow (sin x) 2.0)))) (- (* x x) (pow (sin x) 2.0))) (+ x (sin x))) (- x (sin x))) (tan x))",
    "output_parens": 41,
    "avg_bits_err_input": 30.486938587298585,
    "avg_bits_err_output": 30.383533793961497,
    "avg_bits_err_improve": 0.10340479333708785,
    "time": 33240.452880859375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0065,
    "avg_bits_err_output": 0.001375,
    "avg_bits_err_improve": 0.005124999999999999,
    "time": 2543.548095703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (* 100.0 (/ (pow (+ (/ i n) 1.0) n) (/ i n))) (if (!= (/ 100.0 (/ i n)) 0.0) (- (/ (* (/ 100.0 (/ i n)) 100.0) 100.0) 0.0) (/ 100.0 (/ i n)))))",
    "output_parens": 33,
    "avg_bits_err_input": 47.609822427305765,
    "avg_bits_err_output": 13.358589374947597,
    "avg_bits_err_improve": 34.25123305235817,
    "time": 25116.16064453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.369552687193668,
    "avg_bits_err_output": 23.31015576236769,
    "avg_bits_err_improve": 3.059396924825979,
    "time": 15537.198974609375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 1e+286) (/ (fma a (- d) (* b c)) (+ (* c c) (* d d))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.351501031704768,
    "avg_bits_err_output": 22.9682770523179,
    "avg_bits_err_improve": 3.383223979386866,
    "time": 16465.247314453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (+ (* ux (- maxCos)) ux))",
    "output_parens": 4,
    "avg_bits_err_input": 0.03275,
    "avg_bits_err_output": 0.019990697420484902,
    "avg_bits_err_improve": 0.0127593025795151,
    "time": 8373.21728515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ ux (+ -1.0 (- (+ 1.0 (* ux (* maxCos (- ux (fma ux maxCos 1.0))))) (* ux (* (+ maxCos -1.0) (- 1.0 ux))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.64969994492842,
    "avg_bits_err_output": 11.936198699662285,
    "avg_bits_err_improve": 1.7135012452661353,
    "time": 35190.646484375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (- (- 1.0 (- (fma ux maxCos 1.0) ux)) (* (- (fma ux maxCos 1.0) ux) (fma ux maxCos (- ux))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.686038579350132,
    "avg_bits_err_output": 11.326957811465931,
    "avg_bits_err_improve": 2.359080767884201,
    "time": 29686.22998046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (log1p (expm1 (* uy (* 2.0 PI))))) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output_parens": 36,
    "avg_bits_err_input": 0.34590803930447744,
    "avg_bits_err_output": 0.34637334755753635,
    "avg_bits_err_improve": -0.0004653082530589048,
    "time": 44515.044677734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (+ (+ 2.0 (cos (atan (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5))))))) -2.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.20441147540404264,
    "avg_bits_err_output": 0.20720032443064218,
    "avg_bits_err_improve": -0.002788849026599538,
    "time": 41773.649169921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.543769143854134,
    "avg_bits_err_output": 0.543769143854134,
    "avg_bits_err_improve": 0,
    "time": 21071.103515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (pow (/ u1 (- 1.0 u1)) 0.5) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.32032849407495295,
    "avg_bits_err_output": 0.32045349407495305,
    "avg_bits_err_improve": -0.00012500000000009726,
    "time": 22115.260009765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.33984281472053063,
    "avg_bits_err_output": 0.34011767772908236,
    "avg_bits_err_improve": -0.00027486300855172896,
    "time": 25386.9208984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(expm1 (log1p (/ 1.0 (+ 1.0 (exp (/ x (- s)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.05787217015750099,
    "avg_bits_err_output": 0.061895854533762985,
    "avg_bits_err_improve": -0.004023684376261993,
    "time": 8636.91796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (/ (- (fabs x)) s)) (if (!= (* s (+ (exp (/ (fabs x) (- s))) (exp (/ (fabs x) (/ s -2.0))))) 0.0) (fma (* s (+ (exp (/ (fabs x) (- s))) (exp (/ (fabs x) (/ s -2.0))))) (/ (/ (fma s (exp (/ (fabs x) (- s))) s) s) (+ (exp (/ (fabs x) (- s))) (exp (/ (fabs x) (/ s -2.0))))) (/ 1.0 (/ (/ 1.0 s) (+ (exp (/ (fabs x) (- s))) (exp (/ (fabs x) (/ s -2.0))))))) (* (fma s (exp (/ (fabs x) (- s))) s) (+ (exp (/ (fabs x) (- s))) 1.0))))",
    "output_parens": 67,
    "avg_bits_err_input": 0.13712960107210362,
    "avg_bits_err_output": 0.1443099589572677,
    "avg_bits_err_improve": -0.007180357885164079,
    "time": 19581.521240234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6680207908937882,
    "avg_bits_err_output": 0.6680207908937882,
    "avg_bits_err_improve": 0,
    "time": 21603.829345703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (if (!= (+ (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 2.0) 0.0) (/ (+ -1.0 (+ -1.0 (+ 1.0 (pow (+ 1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))) 2.0)))) (+ (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 2.0)) (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))) 1.0)",
    "output_parens": 31,
    "avg_bits_err_input": 0.16185322714897074,
    "avg_bits_err_output": 0.1924726401608369,
    "avg_bits_err_improve": -0.03061941301186616,
    "time": 22600.18310546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.583018703851672,
    "avg_bits_err_output": 2.580663262784846,
    "avg_bits_err_improve": 0.0023554410668262804,
    "time": 32442.688232421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (+ cosTheta_i cosTheta_i) (* (* cosTheta_O (/ 0.5 v)) (/ (/ (/ 0.5 v) (exp (* sinTheta_i (/ sinTheta_O v)))) (sinh (/ 1.0 v)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4653512624968681,
    "avg_bits_err_output": 0.3551613132512373,
    "avg_bits_err_improve": 0.1101899492456308,
    "time": 27355.490966796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.10650240332098712,
    "avg_bits_err_output": 0.0910454401912694,
    "avg_bits_err_improve": 0.015456963129717727,
    "time": 19995.998291015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (* (log alpha) (* PI 2.0))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4558456497706566,
    "avg_bits_err_output": 0.4615789447706891,
    "avg_bits_err_improve": -0.005733295000032501,
    "time": 24888.1669921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) s)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3065097947354827,
    "avg_bits_err_output": 1.1858446569300336,
    "avg_bits_err_improve": 0.12066513780544907,
    "time": 26262.390380859375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ (/ 2.0 (/ 2.0 (- 1.0 (* 4.0 u)))) (log (+ 1.0 (expm1 (pow (+ 1.0 (* u -4.0)) 2.0)))))) s) 2.0) (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 12.348574563720144,
    "avg_bits_err_output": 11.516165177755445,
    "avg_bits_err_improve": 0.8324093859646986,
    "time": 22949.090576171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* 0.25 (/ (exp (/ (- r) s)) (* s (* 2.0 PI)))) (* 0.75 (* (exp (/ r (* s -6.0))) (/ (exp (/ r (* s -6.0))) (* s (* PI 6.0)))))) r)",
    "output_parens": 20,
    "avg_bits_err_input": 0.13655677100410343,
    "avg_bits_err_output": 0.127003282029471,
    "avg_bits_err_improve": 0.00955348897463243,
    "time": 30487.13623046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.905243938932086,
    "avg_bits_err_output": 0.692986083730703,
    "avg_bits_err_improve": 0.21225785520138296,
    "time": 27659.508056640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) (* cosTheta (exp (* cosTheta cosTheta)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6794786001993081,
    "avg_bits_err_output": 0.4761119206670748,
    "avg_bits_err_improve": 0.20336667953223325,
    "time": 22083.881103515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.343898601823916,
    "avg_bits_err_output": 0.5352074534942936,
    "avg_bits_err_improve": 12.808691148329622,
    "time": 20789.253173828125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (- (fma PI (* u2 2.0) 1.0) 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.384857568120973,
    "avg_bits_err_output": 0.3143950412681666,
    "avg_bits_err_improve": 13.070462526852806,
    "time": 19177.095458984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.05757635386599,
    "avg_bits_err_output": 0.3137406015629507,
    "avg_bits_err_improve": 13.743835752303038,
    "time": 16703.76904296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ cos2phi (* alphax alphax)) (/ (/ sin2phi alphay) alphay)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.58468902222884,
    "avg_bits_err_output": 0.5124299144842598,
    "avg_bits_err_improve": 12.07225910774458,
    "time": 15029.87939453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (- (/ (/ -1.0 l) PI))) (* PI l))) F) F))",
    "output_parens": 13,
    "avg_bits_err_input": 16.52083657805504,
    "avg_bits_err_output": 12.535533626647897,
    "avg_bits_err_improve": 3.9853029514071423,
    "time": 20775.507568359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.21641748125036056,
    "avg_bits_err_output": 0.21641748125036056,
    "avg_bits_err_improve": 0,
    "time": 17131.600830078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.764258446437987,
    "avg_bits_err_output": 10.70998454077833,
    "avg_bits_err_improve": 3.0542739056596577,
    "time": 23105.580078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f -4.0))) (exp (* PI (/ f 4.0)))) (- (expm1 (* PI (/ f 4.0))) (expm1 (* PI (/ f -4.0)))))) (/ PI -4.0))",
    "output_parens": 18,
    "avg_bits_err_input": 61.37742317936748,
    "avg_bits_err_output": 1.9050680241440645,
    "avg_bits_err_improve": 59.47235515522342,
    "time": 87546.63208007812,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.053375779353544,
    "avg_bits_err_output": 33.92545607317904,
    "avg_bits_err_improve": 9.127919706174502,
    "time": 27080.217041015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin th) (/ (sin ky) (hypot (sin ky) (sin kx))))",
    "output_parens": 7,
    "avg_bits_err_input": 3.650189929377229,
    "avg_bits_err_output": 0.2064672937539662,
    "avg_bits_err_improve": 3.443722635623263,
    "time": 35822.0166015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0) (pow (* (* 2.0 (/ l Om)) (sin kx)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.918375,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 0.9117500000000001,
    "time": 11087.74658203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (* (/ Om Omc) (/ Om Omc))) (+ 1.0 (* 2.0 (* (/ t l) (/ t l)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.159428568136615,
    "avg_bits_err_output": 10.159428568136615,
    "avg_bits_err_improve": 0,
    "time": 22076.402587890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(* (sqrt (* 2.0 (fabs (- t (fma l (* (/ l Om) 2.0) (* n (* (pow (/ l Om) 2.0) (- U U*)))))))) (* (sqrt (fabs n)) (sqrt (fabs U))))",
    "output_parens": 18,
    "avg_bits_err_input": 34.64485074348534,
    "avg_bits_err_output": 17.050640544637343,
    "avg_bits_err_improve": 17.594210198848,
    "time": 41993.785400390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* (* (tan k) (/ (sin k) l)) (* (/ (/ k l) t) (* k (pow t 3.0)))) t))",
    "output_parens": 12,
    "avg_bits_err_input": 47.67671050232394,
    "avg_bits_err_output": 31.07705754448368,
    "avg_bits_err_improve": 16.599652957840263,
    "time": 42345.636474609375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -5e-80) (/ 2.0 (* (sin k) (* (/ (tan k) l) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (pow t 3.0) l))))) (if (<= t 1.6e-108) 0.0 (/ 2.0 (/ (* (+ 2.0 (pow (/ k t) 2.0)) (* (* (pow t 3.0) (/ (sin k) l)) (tan k))) l))))",
    "output_parens": 28,
    "avg_bits_err_input": 32.03275996639717,
    "avg_bits_err_output": 22.70482930786918,
    "avg_bits_err_improve": 9.327930658527993,
    "time": 22093.87158203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* a2 (* (/ (* 4.0 (cos th)) (/ 8.0 (sqrt 2.0))) a2)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.5189406047119312,
    "avg_bits_err_output": 0.49777801096373403,
    "avg_bits_err_improve": 0.021162593748197123,
    "time": 26072.686767578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow k -0.5) (* (pow (* 2.0 PI) (+ 0.5 (* k -0.5))) (* (pow n (* k -0.5)) (sqrt n))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.49293429273022,
    "avg_bits_err_output": 0.5689149601683853,
    "avg_bits_err_improve": -0.07598066743816528,
    "time": 22452.80712890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (expm1 (* l 2.0)) (exp l))) (cos (/ K 2.0))) U)",
    "output_parens": 9,
    "avg_bits_err_input": 16.864990563002465,
    "avg_bits_err_output": 0.12710640663848355,
    "avg_bits_err_improve": 16.737884156363982,
    "time": 25841.92626953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (if (!= (* K (/ (+ m n) 2.0)) 0.0) (* (fma (+ m n) (/ K 2.0) (- M)) (/ (/ K (+ K K)) (* K (/ (+ m n) (* (+ m n) (+ K K)))))) (fma (+ m n) (/ K 2.0) (- M)))) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n))))))",
    "output_parens": 38,
    "avg_bits_err_input": 15.698836307057327,
    "avg_bits_err_output": 15.716629689968574,
    "avg_bits_err_improve": -0.01779338291124688,
    "time": 25371.782470703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.95346936093777,
    "avg_bits_err_output": 17.95346936093777,
    "avg_bits_err_improve": 0,
    "time": 37371.707763671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) (- INFINITY)) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))) (if (<= (/ h l) -2e-300) (* w0 (sqrt (- 1.0 (* (* D (/ M (+ d d))) (* (* D (/ M (+ d d))) (/ h l)))))) (* w0 (sqrt (- 1.0 (* (* D (/ M (+ d d))) (/ (* (* (/ D (+ d d)) M) h) l)))))))",
    "output_parens": 40,
    "avg_bits_err_input": 14.633980344312715,
    "avg_bits_err_output": 9.222772538042568,
    "avg_bits_err_improve": 5.411207806270147,
    "time": 24807.489501953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 1e-315) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (/ A (* V l)) 1e+262) (* c0 (sqrt (/ A (* V l)))) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 19.03711654221674,
    "avg_bits_err_output": 12.255199154698525,
    "avg_bits_err_improve": 6.781917387518215,
    "time": 22033.269775390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= c0 -1.15e+119) (/ (/ (* c0 (if (!= (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))) 0.0) (* M (/ M (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (* (+ M (* (/ (/ d D) (* w h)) (* c0 (/ d D)))) (- (* (/ (/ d D) (* w h)) (* c0 (/ d D))) M)))))) (fma d (/ (* c0 (/ d (* D (* w h)))) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))))) w) 2.0) (if (<= c0 -1.85e-94) (* (/ c0 (* 2.0 w)) (if (!= (- (* c0 (* d (/ (/ (/ (/ d D) h) w) D))) (sqrt (- (pow (* c0 (* d (/ (/ (/ (/ d D) h) w) D))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* c0 (* d (/ (/ (/ (/ d D) h) w) D))) (sqrt (- (pow (* c0 (* d (/ (/ (/ (/ d D) h) w) D))) 2.0) (* M M))))) (fma d (* c0 (/ (/ (/ (/ d D) h) w) D)) (sqrt (- (pow (* c0 (* d (/ (/ (/ (/ d D) h) w) D))) 2.0) (* M M)))))) (/ (/ (* c0 (if (!= (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))) 0.0) (* M (/ M (- (/ (* (* c0 (/ d (* D (* w h)))) d) D) (sqrt (* (+ M (* (/ (/ d D) (* w h)) (* c0 (/ d D)))) (- (* (/ (/ d D) (* w h)) (* c0 (/ d D))) M)))))) (fma d (/ (* c0 (/ d (* D (* w h)))) D) (sqrt (- (pow (/ (* (* c0 (/ d (* D (* w h)))) d) D) 2.0) (* M M)))))) w) 2.0)))",
    "output_parens": 187,
    "avg_bits_err_input": 59.78790956957688,
    "avg_bits_err_output": 26.757984042733195,
    "avg_bits_err_improve": 33.029925526843684,
    "time": 61261.613525390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 1e+281) (* (* (if (!= (sqrt (/ d h)) 0.0) (/ (/ d h) (sqrt (/ d h))) (sqrt (/ d h))) (pow (/ d l) 0.5)) (- 1.0 (/ (* (pow (* M (/ (/ D d) 2.0)) 2.0) (* 0.5 h)) l))) (* (* (sqrt (/ d (* h l))) (sqrt d)) (- 1.0 (/ (* h (pow (* D (/ M (+ d d))) 2.0)) (+ l l)))))",
    "output_parens": 52,
    "avg_bits_err_input": 26.30444984918681,
    "avg_bits_err_output": 23.47261343805184,
    "avg_bits_err_improve": 2.8318364111349688,
    "time": 52107.591796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (+ 0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (+ (+ (/ -0.0625 (fma x x 1.0)) 0.125) (+ (/ -0.0625 (fma x x 1.0)) (+ 0.0625 (+ 0.0625 (/ -0.125 (fma x x 1.0)))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 41,
    "avg_bits_err_input": 15.46220520852375,
    "avg_bits_err_output": 14.950039542480514,
    "avg_bits_err_improve": 0.5121656660432361,
    "time": 24822.716552734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9868443609377705,
    "avg_bits_err_output": 0.012,
    "avg_bits_err_improve": 0.9748443609377705,
    "time": 5373.212890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(+ (/ (- (* 5.0 (* v v))) (* (sqrt (- 2.0 (* v (* v 6.0)))) (* PI (- t (* v (* t v)))))) (/ (/ -1.0 PI) (- (* (sqrt (- 2.0 (* v (* v 6.0)))) (- t (* v (* t v)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.4341304608686311,
    "avg_bits_err_output": 0.2918897249488923,
    "avg_bits_err_improve": 0.1422407359197388,
    "time": 21642.9765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (fma v v -1.0) (/ (sqrt (- 2.0 (* v (* v 6.0)))) -4.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.011323120312590145,
    "avg_bits_err_output": 0.008,
    "avg_bits_err_improve": 0.0033231203125901453,
    "time": 4619.219482421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5474621861276876,
    "avg_bits_err_output": 0.5474621861276876,
    "avg_bits_err_improve": 0,
    "time": 8590.47265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output_parens": 7,
    "avg_bits_err_input": 1.9828245666930557,
    "avg_bits_err_output": 1.9828245666930557,
    "avg_bits_err_improve": 0,
    "time": 13472.7060546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- mu (- Ec (+ Vef EDonor))) KbT)))) (/ NaChar (- (pow (exp (/ (+ EAccept (- (+ Ev Vef) mu)) (+ KbT KbT))) 2.0) -1.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.016935321751558364,
    "avg_bits_err_output": 0.01738757633080223,
    "avg_bits_err_improve": -0.0004522545792438673,
    "time": 9295.114990234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow b 4.0) (* (* a a) (+ (* b (+ b b)) (* a a)))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.1862998125036057,
    "avg_bits_err_output": 0.10079492500144231,
    "avg_bits_err_improve": 0.08550488750216338,
    "time": 8180.50537109375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (fma b (* b (* b b)) (* (* a a) (* b b))) (* a (+ (* a (* b b)) (* a (* a a))))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 0.19424740211637467,
    "avg_bits_err_output": 0.13511552304211055,
    "avg_bits_err_improve": 0.05913187907426412,
    "time": 21385.85498046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (+ (fma b (* b (* a a)) (pow b 4.0)) (* (* a a) (fma b b (* a a)))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.18480271804288967,
    "avg_bits_err_output": 0.10668467272885732,
    "avg_bits_err_improve": 0.07811804531403235,
    "time": 20090.004638671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(+ (+ (sqrt (fma (/ x (sqrt (+ (* x x) (* 4.0 (* p p))))) 0.5 0.5)) -1.0) 1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 13.23647577207128,
    "avg_bits_err_output": 13.236242262098214,
    "avg_bits_err_improve": 0.0002335099730661483,
    "time": 18098.931884765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.901760617157315,
    "avg_bits_err_output": 0.056625,
    "avg_bits_err_improve": 40.84513561715732,
    "time": 5934.2197265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (tan x)))",
    "output_parens": 5,
    "avg_bits_err_input": 31.902755490590717,
    "avg_bits_err_output": 31.902755490590717,
    "avg_bits_err_improve": 0,
    "time": 17310.745849609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.32e+154) (+ (/ 0.0 a) (/ b_2 (- a))) (if (<= b_2 -5.5e-267) (/ (+ (- b_2) (sqrt (if (!= (* c a) 0.0) (* (+ (* c (- a)) (+ (- c c) (* b_2 b_2))) (* c (/ a (* c a)))) (+ (* c (- a)) (+ (- c c) (* b_2 b_2)))))) a) (/ (if (!= (- b_2) 0.0) (* (/ c (- (- b_2) (sqrt (fma a (- c) (* b_2 b_2))))) a) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a)))",
    "output_parens": 48,
    "avg_bits_err_input": 34.40584995319248,
    "avg_bits_err_output": 20.848313389863463,
    "avg_bits_err_improve": 13.557536563329016,
    "time": 19430.451904296875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (* (/ a a) c) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.3828390476411,
    "avg_bits_err_output": 20.120162451927218,
    "avg_bits_err_improve": 14.26267659571388,
    "time": 18258.94140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.402821974584036,
    "avg_bits_err_output": 30.657584335047456,
    "avg_bits_err_improve": 0.7452376395365796,
    "time": 17795.0703125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.65858272605914,
    "avg_bits_err_output": 32.299331050523044,
    "avg_bits_err_improve": 0.3592516755360933,
    "time": 28809.219482421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (expm1 (- (log1p N) (log N)))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.889323456536772,
    "avg_bits_err_output": 29.889477201656973,
    "avg_bits_err_improve": -0.00015374512020116526,
    "time": 14258.462158203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (if (!= (/ x (+ x 1.0)) 0.0) (/ (- (* x (/ x (+ x 1.0))) x) (/ (fma x x x) (+ x 1.0))) (+ (/ x (+ x 1.0)) -1.0)) x)",
    "output_parens": 16,
    "avg_bits_err_input": 14.376828836079588,
    "avg_bits_err_output": 14.143878568821755,
    "avg_bits_err_improve": 0.23295026725783252,
    "time": 14994.089599609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (- (* (cos eps) (cos x)) (cos x)) (* (sin x) (sin eps)))",
    "output_parens": 9,
    "avg_bits_err_input": 39.32695016404619,
    "avg_bits_err_output": 6.423062317448831,
    "avg_bits_err_improve": 32.90388784659736,
    "time": 23365.015869140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.409551823361127,
    "avg_bits_err_output": 30.091608505279893,
    "avg_bits_err_improve": 0.3179433180812339,
    "time": 14130.87744140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (log1p (exp (* 1.0 (log (expm1 (- 1.0 (cos x))))))) (sin x))",
    "output_parens": 9,
    "avg_bits_err_input": 30.43412667195782,
    "avg_bits_err_output": 30.452181924033585,
    "avg_bits_err_improve": -0.018055252075765083,
    "time": 25009.200927734375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -5e-53) (/ (- (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (/ (* -4.0 (* c a)) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) (+ b b)) (* a 2.0)) (if (!= (/ (- (- b) (sqrt (fma b b (* a (* c -4.0))))) (* a 2.0)) 0.0) (- (/ (+ c c) (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) 0.0) (/ (- (sqrt (fma b b (* a (* c -4.0)))) b) (* a 2.0))))",
    "output_parens": 52,
    "avg_bits_err_input": 34.45820643720567,
    "avg_bits_err_output": 13.819833420318064,
    "avg_bits_err_improve": 20.638373016887606,
    "time": 33880.5048828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.47193849760178,
    "avg_bits_err_output": 22.343462047186517,
    "avg_bits_err_improve": 12.128476450415267,
    "time": 26769.05419921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.34023281158273,
    "avg_bits_err_output": 0.021377443751081738,
    "avg_bits_err_improve": 61.318855367831645,
    "time": 19943.511962890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(exp (* 1.0 (- (exp (log1p (log (+ (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n))))))) 1.0)))",
    "output_parens": 14,
    "avg_bits_err_input": 63.005504915345526,
    "avg_bits_err_output": 2.4634128764658794,
    "avg_bits_err_improve": 60.542092038879645,
    "time": 17194.7626953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.6068582932264,
    "avg_bits_err_output": 58.56480205031034,
    "avg_bits_err_improve": 0.04205624291606114,
    "time": 19991.11962890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(log (+ 1.0 (- (exp (log1p (exp (- (/ 1.0 x) (/ 1.0 (tan x)))))) 2.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 59.946070332992555,
    "avg_bits_err_output": 59.94583621878736,
    "avg_bits_err_improve": 0.00023411420519181547,
    "time": 29523.260009765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.25634483926499,
    "avg_bits_err_output": 29.316937449543715,
    "avg_bits_err_improve": 30.939407389721275,
    "time": 26553.13671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(- (* (+ 1.0 (/ 1.0 (expm1 x))) (exp x)) (exp x))",
    "output_parens": 7,
    "avg_bits_err_input": 41.33060170075053,
    "avg_bits_err_output": 0.5255551599769501,
    "avg_bits_err_improve": 40.805046540773574,
    "time": 5824.20703125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.64451325328932,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.64426325328932,
    "time": 3416.01025390625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.473618010929215,
    "avg_bits_err_output": 0.02225475254202879,
    "avg_bits_err_improve": 29.451363258387186,
    "time": 6808.454833984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (exp (- x)) 0.0) (/ (if (!= (+ (+ 1.0 (exp (* x -2.0))) (/ 2.0 (exp x))) 0.0) (/ (fma (+ 1.0 (exp (* x -2.0))) (+ 1.0 (exp (* x -2.0))) (* (exp (* x -2.0)) -4.0)) (+ (+ 1.0 (exp (* x -2.0))) (/ 2.0 (exp x)))) (+ 1.0 (/ (+ (exp (- x)) -2.0) (exp x)))) (exp (- x))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 43,
    "avg_bits_err_input": 29.784773665693805,
    "avg_bits_err_output": 29.35472851793704,
    "avg_bits_err_improve": 0.43004514775676483,
    "time": 21762.33251953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (/ (if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (/ (if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (/ (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) (+ x -1.0)) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0)))) (+ x -1.0)) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0)))) (+ x -1.0)) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 55,
    "avg_bits_err_input": 9.6849076618687,
    "avg_bits_err_output": 9.693304352094426,
    "avg_bits_err_improve": -0.008396690225726644,
    "time": 33213.8271484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (if (!= (+ (tan (+ x eps)) 1.0) 0.0) (/ (* (tan (+ x eps)) (+ (tan (+ x eps)) 1.0)) (+ (tan (+ x eps)) 1.0)) (tan (+ x eps))) (tan x))",
    "output_parens": 19,
    "avg_bits_err_input": 37.45831012305874,
    "avg_bits_err_output": 37.48239926971054,
    "avg_bits_err_improve": -0.024089146651803617,
    "time": 21016.099853515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (if (!= (sqrt (+ x 1.0)) 0.0) (/ 1.0 (/ 1.0 (sqrt (+ x 1.0)))) (sqrt (+ x 1.0))) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 23,
    "avg_bits_err_input": 30.451153362379326,
    "avg_bits_err_output": 0.15684680468885218,
    "avg_bits_err_improve": 30.294306557690476,
    "time": 11929.489990234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin x) (cos eps) (* (sin eps) (cos x))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 36.814638662066,
    "avg_bits_err_output": 22.07425988621854,
    "avg_bits_err_improve": 14.74037877584746,
    "time": 21842.58349609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (+ (/ 1.0 (sqrt (+ 1.0 x))) (/ -1.0 (sqrt x))) (* (sqrt x) (/ -1.0 (sqrt x))))",
    "output_parens": 11,
    "avg_bits_err_input": 20.194070471701124,
    "avg_bits_err_output": 20.214343353263484,
    "avg_bits_err_improve": -0.0202728815623594,
    "time": 16316.333984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(exp (* 1.0 (log1p (if (!= (+ (atan (+ N 1.0)) -1.0) 0.0) (+ (/ 1.0 (/ 1.0 (+ (atan (+ N 1.0)) -1.0))) (* (- 1.0 (atan (+ N 1.0))) (/ (atan N) (+ (atan (+ N 1.0)) -1.0)))) (+ (- (atan (+ N 1.0)) (atan N)) -1.0)))))",
    "output_parens": 28,
    "avg_bits_err_input": 14.985983612324597,
    "avg_bits_err_output": 14.985689338176082,
    "avg_bits_err_improve": 0.000294274148515683,
    "time": 11787.281005859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.800148016001764,
    "avg_bits_err_output": 1.4198377343724662,
    "avg_bits_err_improve": 28.3803102816293,
    "time": 25241.1650390625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (- (/ m v) (* m (/ m v))) 1.0) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07936580507553277,
    "avg_bits_err_output": 0.0759804973055088,
    "avg_bits_err_improve": 0.0033853077700239653,
    "time": 17201.438720703125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(+ (- (pow (* b (- a)) 2.0)) (* (fma (- b) a (* a b)) (* a b)))",
    "output_parens": 10,
    "avg_bits_err_input": 16.681680381599026,
    "avg_bits_err_output": 0.2685,
    "avg_bits_err_improve": 16.413180381599027,
    "time": 11919.478759765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* (sin (* angle (* PI 0.005555555555555556))) b) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.634345486172702,
    "avg_bits_err_output": 20.61455246454336,
    "avg_bits_err_improve": 0.019793021629340046,
    "time": 33997.40478515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) -5e-6) (* (if (!= (* (exp (* 1.0 (log (sin (* angle (/ PI -180.0)))))) (pow b 2.0)) 0.0) (- (- (/ (pow (* (sin (* angle (/ PI -180.0))) a) 2.0) (sin (* angle (/ PI -180.0)))) 0.0) (/ 2.0 (/ 2.0 (* (sin (* angle (/ PI -180.0))) (pow b 2.0))))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0))))) (if (<= (* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))) 1e+258) (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* PI (/ angle 180.0))) (- (* (cos (* PI (/ angle -360.0))) (cos (* PI (/ angle -360.0)))) (* (sin (* PI (/ angle -360.0))) (sin (* PI (/ angle -360.0))))))) (* (if (!= (* (cos (- (/ PI 2.0) (* angle (/ PI -180.0)))) (pow b 2.0)) 0.0) (- (- (/ (pow (* (sin (* angle (/ PI -180.0))) a) 2.0) (sin (* angle (/ PI -180.0)))) 0.0) (/ 2.0 (/ 2.0 (* (sin (* angle (/ PI -180.0))) (pow b 2.0))))) (* (sin (* angle (/ PI -180.0))) (- (pow a 2.0) (pow b 2.0)))) (* 2.0 (cos (* PI (/ angle 180.0)))))))",
    "output_parens": 131,
    "avg_bits_err_input": 31.456268841423093,
    "avg_bits_err_output": 27.91691220722976,
    "avg_bits_err_improve": 3.5393566341933322,
    "time": 48522.549072265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (log (exp (- (* (cos (* angle (/ PI 360.0))) (cos (* angle (/ PI 360.0)))) (* (sin (* angle (/ PI 360.0))) (sin (* angle (/ PI 360.0)))))))) 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 21.348467854042926,
    "avg_bits_err_output": 21.341394560177918,
    "avg_bits_err_improve": 0.007073293865008878,
    "time": 43266.463623046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1812550362151282,
    "avg_bits_err_output": 0.1812550362151282,
    "avg_bits_err_improve": 0,
    "time": 16642.73486328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32299789178787647,
    "avg_bits_err_output": 0.31375567096001583,
    "avg_bits_err_improve": 0.009242220827860637,
    "time": 21443.9609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13271936093777043,
    "avg_bits_err_output": 0.13271936093777043,
    "avg_bits_err_improve": 0,
    "time": 17761.42626953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (if (!= (cos (- lambda1 lambda2)) 0.0) (/ (pow (cos (- lambda1 lambda2)) 2.0) (cos (- lambda1 lambda2))) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 22,
    "avg_bits_err_input": 16.845404614420108,
    "avg_bits_err_output": 16.85341528998713,
    "avg_bits_err_improve": -0.008010675567021508,
    "time": 33785.00244140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -4.0) (* b b))))) (* a 4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 25,
    "avg_bits_err_input": 52.64142193928883,
    "avg_bits_err_output": 0.1730498125036057,
    "avg_bits_err_improve": 52.468372126785226,
    "time": 24265.762451171875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.61555811155753,
    "avg_bits_err_output": 0.33421031937679585,
    "avg_bits_err_improve": 28.281347792180732,
    "time": 25856.81884765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.974908201120016,
    "avg_bits_err_output": 0.2326184218813098,
    "avg_bits_err_improve": 43.7422897792387,
    "time": 27735.00244140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -5e-53) (/ (- (if (!= (- (sqrt (fma -4.0 (* c a) (* b b))) b) 0.0) (/ (* (* c a) 4.0) (- b (sqrt (fma -4.0 (* c a) (* b b))))) (+ b (sqrt (fma -4.0 (* c a) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma c (* a -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0)))",
    "output_parens": 49,
    "avg_bits_err_input": 34.46880819558325,
    "avg_bits_err_output": 15.95681707929076,
    "avg_bits_err_improve": 18.511991116292492,
    "time": 26767.092041015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (+ (pow (cos phi1) 2.0) (* (cos (- lambda2 lambda1)) (* (cos phi2) (cos phi1)))) (cos phi1)) (fma (cos (- lambda2 lambda1)) (cos phi2) (cos phi1)))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.9314431385492803,
    "avg_bits_err_output": 0.9489876068940121,
    "avg_bits_err_improve": -0.01754446834473178,
    "time": 27725.24609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(log (exp (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 29.52380263861097,
    "avg_bits_err_output": 29.523064111142038,
    "avg_bits_err_improve": 0.0007385274689326593,
    "time": 17139.81298828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (* x 2.0)) (+ 1.0 (exp (+ x x))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.12213032889227,
    "avg_bits_err_output": 0.7642193609377705,
    "avg_bits_err_improve": 57.357910967954496,
    "time": 18700.79541015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x 2.0)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 57.996967362018786,
    "avg_bits_err_output": 0.037521240625180294,
    "avg_bits_err_improve": 57.959446121393604,
    "time": 10541.3212890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(+ (+ 2.0 (/ 2.0 (+ (exp x) (exp (- x))))) -2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.008323120312590145,
    "avg_bits_err_output": 0.16869908931426145,
    "avg_bits_err_improve": -0.1603759690016713,
    "time": 3782.75634765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (- (* x x) 1.0))) 5e+154) (log1p (+ (+ x (sqrt (fma x x -1.0))) -1.0)) (log x))",
    "output_parens": 12,
    "avg_bits_err_input": 32.07419812031259,
    "avg_bits_err_output": 21.50678546281297,
    "avg_bits_err_improve": 10.567412657499617,
    "time": 5357.851806640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (if (!= (log (/ (- -1.0 x) (+ x -1.0))) 0.0) (/ 1.0 (/ 1.0 (if (!= (- -2.0 (log (/ (- -1.0 x) (- x 1.0)))) 0.0) (/ (log (+ 1.0 (expm1 (expm1 (* 2.0 (log1p (log (/ (- -1.0 x) (+ -1.0 x))))))))) (+ (log (/ (- -1.0 x) (- x 1.0))) 2.0)) (log (/ (- -1.0 x) (- x 1.0)))))) (log (/ (- -1.0 x) (+ x -1.0)))))",
    "output_parens": 40,
    "avg_bits_err_input": 58.596442739326356,
    "avg_bits_err_output": 58.629706364534236,
    "avg_bits_err_improve": -0.033263625207879954,
    "time": 26146.53955078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.020049039677847345,
    "avg_bits_err_output": 0.020049039677847345,
    "avg_bits_err_improve": 0,
    "time": 3403.239990234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12707312031259016,
    "avg_bits_err_output": 0.12707312031259016,
    "avg_bits_err_improve": 0,
    "time": 24405.076904296875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (if (!= (+ ew (* (cos t) ew)) 0.0) (* (* (+ (cos t) 1.0) (/ ew ew)) (/ (* (cos t) ew) (+ (cos t) 1.0))) (* (cos t) ew)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 35,
    "avg_bits_err_input": 0.1242712406251803,
    "avg_bits_err_output": 0.15410864687698314,
    "avg_bits_err_improve": -0.02983740625180284,
    "time": 29327.40478515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (cos (/ phi2 2.0)) (* (- lambda1 lambda2) (cos (/ phi1 2.0))) (* (- lambda1 lambda2) (* (sin (/ phi2 2.0)) (sin (/ phi1 -2.0))))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 38.40633293832862,
    "avg_bits_err_output": 0.12275089996782271,
    "avg_bits_err_improve": 38.2835820383608,
    "time": 30319.94580078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 15.024248602497597,
    "avg_bits_err_output": 0.010180367936981093,
    "avg_bits_err_improve": 15.014068234560616,
    "time": 6209.653076171875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (sin delta) (* (cos phi1) (cos theta)) (* (cos delta) (sin phi1)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1503200559205525,
    "avg_bits_err_output": 0.14829185939389597,
    "avg_bits_err_improve": 0.002028196526656534,
    "time": 36472.433837890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* -3.0 a)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.66005239941638,
    "avg_bits_err_output": 0.171434210940655,
    "avg_bits_err_improve": 52.488618188475726,
    "time": 31078.31640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -3.0)))) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma b b (* (* a c) -3.0))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.78284198433713,
    "avg_bits_err_output": 0.3381096035241209,
    "avg_bits_err_improve": 28.444732380813008,
    "time": 28267.815673828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 44.025899448391854,
    "avg_bits_err_output": 0.24076466250649,
    "avg_bits_err_improve": 43.78513478588536,
    "time": 29708.77587890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a)) (- INFINITY)) (/ (if (!= b 0.0) (* a (/ c (* -0.3333333333333333 b))) (- b)) (* a 3.0)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a)) -2e-189) (+ (/ (sqrt (fma (* a c) -3.0 (* b b))) (* a 3.0)) (/ b (* a -3.0))) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a)) 1e-146) (/ (if (!= (+ b 0.0) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (/ a 0.3333333333333333)) (- (sqrt (fma a (* c -3.0) (* b b))) b)) (* 3.0 a)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a)) 5e+276) (/ (+ (- b) (sqrt (+ (if (!= (/ (* a c) 0.3333333333333333) 0.0) (/ 1.0 (/ -0.3333333333333333 (* a c))) (* c (* a -3.0))) (* b b)))) (* 3.0 a)) (/ (if (!= (+ b (sqrt (fma a (* c -3.0) (* b b)))) 0.0) (* (/ a 0.3333333333333333) (/ c (- b))) (- (sqrt (fma a (* c -3.0) (* b b))) b)) (* 3.0 a))))))",
    "output_parens": 115,
    "avg_bits_err_input": 34.50402994997815,
    "avg_bits_err_output": 21.654085692490895,
    "avg_bits_err_improve": 12.849944257487252,
    "time": 29234.90869140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (log1p (expm1 (sin (- lambda1 lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 17,
    "avg_bits_err_input": 12.948513061722045,
    "avg_bits_err_output": 12.95805341085505,
    "avg_bits_err_improve": -0.00954034913300461,
    "time": 34414.28759765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.37113755413338,
    "avg_bits_err_output": 0.4836707457368143,
    "avg_bits_err_improve": 28.887466808396567,
    "time": 21596.24853515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (+ (/ 1.0 (+ x -1.0)) (/ x (+ 2.0 (+ x x)))) (/ x (+ 2.0 (+ x x))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.011125,
    "avg_bits_err_output": 0.052197071662396045,
    "avg_bits_err_improve": -0.04107207166239604,
    "time": 5654.14111328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (- (/ -1.0 (- 1.0 x)) (+ 1.0 (/ x (- 1.0 x)))) (- -1.0 x))",
    "output_parens": 8,
    "avg_bits_err_input": 14.321671084054008,
    "avg_bits_err_output": 12.434968178310257,
    "avg_bits_err_improve": 1.8867029057437517,
    "time": 21307.732666015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -8.4e-308) (* (sqrt (- F)) (* (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) (- A))) (/ (sqrt (fma (* A C) -8.0 (* 2.0 (pow B 2.0)))) (- (* C (* A 4.0)) (pow B 2.0))))) (/ (* (sqrt F) (sqrt (* (* 2.0 (- (pow B 2.0) (* A (* C 4.0)))) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* 4.0 C)) (pow B 2.0))))",
    "output_parens": 46,
    "avg_bits_err_input": 52.16865161148619,
    "avg_bits_err_output": 46.81447551273693,
    "avg_bits_err_improve": 5.354176098749264,
    "time": 42246.152099609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -0.5) (* 180.0 (/ (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) PI)) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 0.001) (* 180.0 (/ (atan (/ (if (!= (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))) 0.0) (/ (- (* (pow (- C A) 2.0) 0.0) (pow B 2.0)) (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))) (- (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))) B)) PI)) (* (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) (/ 180.0 PI))))",
    "output_parens": 77,
    "avg_bits_err_input": 30.0025210089891,
    "avg_bits_err_output": 26.070687744848826,
    "avg_bits_err_improve": 3.9318332641402733,
    "time": 25285.2138671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -4.5e-208) (* (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (/ (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- F))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (sqrt (* 2.0 F)) (/ (* (sqrt (- (pow B 2.0) (* A (* 4.0 C)))) (sqrt (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* 4.0 C)) (pow B 2.0)))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.36921926210302,
    "avg_bits_err_output": 47.20103273582257,
    "avg_bits_err_improve": 5.168186526280451,
    "time": 47034.153564453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.690131836924849,
    "avg_bits_err_output": 15.690131836924849,
    "avg_bits_err_improve": 0,
    "time": 22798.2998046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-297) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (* (sqrt (- h g)) (sqrt (- (+ g h)))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) (- g)) 0.0) (/ (* h h) (- (- g) (sqrt (fma g g (* h (- h)))))) (- (sqrt (fma g g (* h (- h)))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h))))))))",
    "output_parens": 69,
    "avg_bits_err_input": 35.53274624010303,
    "avg_bits_err_output": 5.110190662028058,
    "avg_bits_err_improve": 30.42255557807497,
    "time": 30881.935791015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (- (+ (cos (* (fma 2.0 PI (acos (- (/ g h)))) 0.3333333333333333)) 1.0) (- 1.0 (cos (- (* 2.0 PI) (* (fma 2.0 PI (acos (- (/ g h)))) 0.3333333333333333))))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 0.9904251890708848,
    "avg_bits_err_output": 0.031712406251802897,
    "avg_bits_err_improve": 0.9587127828190819,
    "time": 24195.84814453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(expm1 (log1p (/ (exp a) (+ (exp a) (exp b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.7035212406251803,
    "avg_bits_err_output": 0.709389285939213,
    "avg_bits_err_improve": -0.005868045314032733,
    "time": 4866.91015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-265) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+289) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.326408975029926,
    "avg_bits_err_output": 2.5562714920023115,
    "avg_bits_err_improve": 8.770137483027614,
    "time": 9364.431396484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3967590118918804,
    "avg_bits_err_output": 0.35021599005682036,
    "avg_bits_err_improve": 0.04654302183506004,
    "time": 6880.73828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.02) (log (if (!= x 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 50000.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 42,
    "avg_bits_err_input": 52.82564529594612,
    "avg_bits_err_output": 0.12975314045847958,
    "avg_bits_err_improve": 52.695892155487634,
    "time": 12777.952880859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.740093080754705,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.740093080754705,
    "time": 1918.30078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.01475,
    "avg_bits_err_output": 0.01475,
    "avg_bits_err_improve": 0,
    "time": 17620.342041015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1353.502685546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= (* w w) 5e+15) (+ (- (+ 3.0 (/ (/ 2.0 r) r)) (* (* (/ r (- 1.0 v)) (* w (- 0.375 (* v 0.25)))) (* r w))) -4.5) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* w (/ (* r (* w r)) (- 1.0 v)))) 4.5)))",
    "output_parens": 29,
    "avg_bits_err_input": 12.980985044843623,
    "avg_bits_err_output": 0.2809297107724525,
    "avg_bits_err_improve": 12.70005533407117,
    "time": 25919.172607421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (+ (* (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0) (* x1 x1)) (* -6.0 (* x1 x1))))))))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5128586979480503,
    "avg_bits_err_output": 0.28108619381872013,
    "avg_bits_err_improve": 0.23177250412933015,
    "time": 75345.3671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ -1.0 (+ t1 u)) (* t1 (/ v (+ t1 u))))",
    "output_parens": 6,
    "avg_bits_err_input": 18.39720575079531,
    "avg_bits_err_output": 1.4886025202959756,
    "avg_bits_err_improve": 16.908603230499335,
    "time": 8461.39013671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.23615584257481162,
    "avg_bits_err_output": 0.18730432343849157,
    "avg_bits_err_improve": 0.04885151913632005,
    "time": 10249.888916015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003625,
    "avg_bits_err_output": 0.003625,
    "avg_bits_err_improve": 0,
    "time": 2383.639404296875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ (- (/ PI a) (/ PI b)) 2.0) (- b a)) (+ b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.242238088516295,
    "avg_bits_err_output": 0.27410169219101554,
    "avg_bits_err_improve": 13.96813639632528,
    "time": 16946.23828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (exp (- (fma eps x x))) (- (/ (- (exp (- (fma eps x x))) (/ (exp (- (* eps x) x)) 2.0)) eps) (/ (+ 0.5 (/ 0.5 eps)) (exp (- x (* eps x)))))) (- (- (/ (exp (- (* eps x) x)) 2.0)))) 2.0)",
    "output_parens": 28,
    "avg_bits_err_input": 30.23530296898333,
    "avg_bits_err_output": 25.065321911276616,
    "avg_bits_err_improve": 5.169981057706714,
    "time": 24232.31396484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ t (/ t t)))) (+ 2.0 (/ -2.0 (+ t (/ t t))))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.019,
    "avg_bits_err_output": 0.004375,
    "avg_bits_err_improve": 0.014624999999999999,
    "time": 9796.274658203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ 2.0 (+ t (/ t t)))) (- 2.0 (/ 2.0 (+ t (/ t t)))))) (+ 2.0 (* (- 2.0 (/ 2.0 (+ t (/ t t)))) (- 2.0 (/ 2.0 (+ t (/ t t)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.022625,
    "avg_bits_err_output": 0.00625,
    "avg_bits_err_improve": 0.016375,
    "time": 23231.650390625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (+ 2.0 (pow (* 2.0 (/ t (+ t 1.0))) 2.0)) 1.0) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.04875,
    "avg_bits_err_output": 0.04224882516673861,
    "avg_bits_err_improve": 0.006501174833261389,
    "time": 18527.650146484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3392.00537109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 9835.550048828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2495.8486328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.847342034684209,
    "avg_bits_err_output": 0.2395,
    "avg_bits_err_improve": 7.607842034684209,
    "time": 49671.231689453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(+ (+ (pow (+ x eps) 5.0) (pow (+ x eps) 5.0)) (- (- (pow x 5.0)) (pow (+ x eps) 5.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 7.638903356860634,
    "avg_bits_err_output": 7.6410292981658845,
    "avg_bits_err_improve": -0.002125941305250123,
    "time": 16698.553955078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.03787629900214,
    "avg_bits_err_output": 0.028359984557066807,
    "avg_bits_err_improve": 16.009516314445072,
    "time": 11103.825439453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (pow (exp (* x x)) 10.0) (- -2.0 (cos x))) 0.0) (/ (- (pow (exp (* x x)) 20.0) (* (pow (exp (* x x)) 20.0) (pow (- -1.0 (cos x)) 2.0))) (* (pow (exp (* x x)) 10.0) (- -2.0 (cos x)))) (* (pow (exp (* x x)) 10.0) (cos x)))",
    "output_parens": 31,
    "avg_bits_err_input": 3.5614595501176867,
    "avg_bits_err_output": 3.0560643256374163,
    "avg_bits_err_improve": 0.5053952244802704,
    "time": 26958.828857421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -2e+45) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 5e-7) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 15.11125884618631,
    "avg_bits_err_output": 0.01525,
    "avg_bits_err_improve": 15.09600884618631,
    "time": 9906.731201171875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.42939066357538,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.42939066357538,
    "time": 5056.94140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.73041824971003,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 38.729918249710025,
    "time": 5447.22216796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.293875,
    "avg_bits_err_improve": 63.706125,
    "time": 14146.45458984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.8432546466958,
    "avg_bits_err_output": 0.4151842109406551,
    "avg_bits_err_improve": 61.428070435755146,
    "time": 13768.38232421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.47193849760178,
    "avg_bits_err_output": 22.343462047186517,
    "avg_bits_err_improve": 12.128476450415267,
    "time": 26721.769287109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -5e-53) (/ (- (if (!= (- (sqrt (fma -4.0 (* c a) (* b b))) b) 0.0) (/ (* (* c a) 4.0) (- b (sqrt (fma -4.0 (* c a) (* b b))))) (+ b (sqrt (fma -4.0 (* c a) (* b b))))) (+ b b)) (* a 2.0)) (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma c (* a -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0)))",
    "output_parens": 49,
    "avg_bits_err_input": 34.46880819558325,
    "avg_bits_err_output": 15.95681707929076,
    "avg_bits_err_improve": 18.511991116292492,
    "time": 26263.336669921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2215.664306640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.95170034462739,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 39.94070034462739,
    "time": 10054.2080078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.466781533013744,
    "avg_bits_err_output": 20.466781533013744,
    "avg_bits_err_improve": 0,
    "time": 6858.865966796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6390114363130643,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6390114363130643,
    "time": 6854.780517578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ b (+ c d)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037125,
    "avg_bits_err_output": 0.036625,
    "avg_bits_err_improve": 0.0005000000000000004,
    "time": 5467.156982421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.020969360937770437,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 0.010844360937770437,
    "time": 2357.893310546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.015,
    "avg_bits_err_output": 0.015,
    "avg_bits_err_improve": 0,
    "time": 2413.73974609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00125,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 0,
    "time": 1651.616943359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ c b) (+ e (+ d a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40246729375396656,
    "avg_bits_err_output": 0.265375,
    "avg_bits_err_improve": 0.13709229375396653,
    "time": 7026.015380859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (- 0.5 (/ (cos (* x 2.0)) 2.0)) (+ 1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.91012317378537,
    "avg_bits_err_output": 29.860719871721926,
    "avg_bits_err_improve": 0.04940330206344257,
    "time": 12469.94189453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.34135249968183,
    "avg_bits_err_output": 0.29389624062518027,
    "avg_bits_err_improve": 24.04745625905665,
    "time": 12295.169677734375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (tan (- x))) 0.0) (/ (fma (/ (sin x) (tan x)) (/ x (tan x)) (- (pow (/ x (tan x)) 2.0))) (/ x (tan (- x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 23,
    "avg_bits_err_input": 30.08428995822381,
    "avg_bits_err_output": 30.092240612356886,
    "avg_bits_err_improve": -0.00795065413307583,
    "time": 32792.9365234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007792481250360578,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.0071674812503605785,
    "time": 2677.867431640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (!= (/ 100.0 (/ i n)) 0.0) (/ (- (/ 20000.0 (/ i n)) (* (/ (pow (+ (/ i n) 1.0) n) (/ i n)) 20000.0)) (* (* (/ i n) 2.0) (- (/ 100.0 (/ i n))))) (/ (/ (/ (- 100.0 (* 100.0 (pow (+ (/ i n) 1.0) n))) (/ i n)) (/ i n)) (/ -1.0 (/ i n)))))",
    "output_parens": 47,
    "avg_bits_err_input": 47.80853741260593,
    "avg_bits_err_output": 13.64443330657955,
    "avg_bits_err_improve": 34.16410410602638,
    "time": 25182.368896484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.722039910265075,
    "avg_bits_err_output": 23.855298820418952,
    "avg_bits_err_improve": 2.8667410898461227,
    "time": 14757.063720703125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 2e+263) (- (/ (* b c) (fma c c (* d d))) (* a (if (!= (/ d (fma c c (* d d))) 0.0) (/ 1.0 (/ 1.0 (/ d (fma c c (* d d))))) (/ d (fma c c (* d d)))))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d))))))",
    "output_parens": 37,
    "avg_bits_err_input": 26.48712388619866,
    "avg_bits_err_output": 24.30337468958778,
    "avg_bits_err_improve": 2.1837491966108793,
    "time": 15933.738525390625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (- ux (* ux maxCos)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.032125,
    "avg_bits_err_output": 0.020222849187341674,
    "avg_bits_err_improve": 0.011902150812658326,
    "time": 12029.077880859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (- (* (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (* maxCos ux)) ux) 0.0) (/ (- (* (- ux (* ux ux)) (- (* (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (* maxCos ux)) ux)) (* (- (* (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (* maxCos ux)) ux) (- (* (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (* maxCos ux)) ux))) (- (* (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (* maxCos ux)) ux)) (- 1.0 (fma ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) (pow (- 1.0 ux) 2.0))))))",
    "output_parens": 57,
    "avg_bits_err_input": 13.636810760200278,
    "avg_bits_err_output": 0.5687942470350665,
    "avg_bits_err_improve": 13.068016513165212,
    "time": 29938.446044921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (if (!= (pow (fma ux maxCos (- 1.0 ux)) 4.0) 0.0) (/ 1.0 (/ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))) (pow (fma ux maxCos (- 1.0 ux)) 4.0)))))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))",
    "output_parens": 37,
    "avg_bits_err_input": 13.665775788780483,
    "avg_bits_err_output": 12.13170504897199,
    "avg_bits_err_improve": 1.5340707398084934,
    "time": 33892.695556640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (* maxCos (* ux (- 1.0 ux))) zi (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* ux (* ux (* (- 1.0 ux) maxCos))))))) xi (* (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* ux (* ux (* (- 1.0 ux) maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.3375869690582136,
    "avg_bits_err_output": 0.32368493094945006,
    "avg_bits_err_improve": 0.01390203810876356,
    "time": 45282.922607421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.19545630303031034,
    "avg_bits_err_output": 0.19545630303031034,
    "avg_bits_err_improve": 0,
    "time": 26242.4755859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (pow (* (/ u1 (- 1.0 u1)) (/ u1 (- 1.0 u1))) 0.25) (sin (* 6.28318530718 u2)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5380415291800155,
    "avg_bits_err_output": 0.5414083225082792,
    "avg_bits_err_improve": -0.0033667933282637286,
    "time": 23126.771240234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (/ u1 (* (- 1.0 u1) 4.0)) (/ (+ (/ u1 4.0) (* u1 0.5)) (- 1.0 u1)))) (cos (* 6.28318530718 u2)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.3137584999820968,
    "avg_bits_err_output": 0.32588025058103015,
    "avg_bits_err_improve": -0.012121750598933334,
    "time": 22896.013916015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.3369293245419511,
    "avg_bits_err_output": 0.3376056044582982,
    "avg_bits_err_improve": -0.0006762799163470556,
    "time": 49164.165771484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06315855607968592,
    "avg_bits_err_output": 0.04392676477927609,
    "avg_bits_err_improve": 0.019231791300409827,
    "time": 16437.826416015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (* 1.0 (log (/ (exp (/ (fabs x) (- s))) (+ (exp (/ (fabs x) (- s))) 1.0))))) (* s (+ (exp (/ (- (fabs x)) s)) 1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1565690076009342,
    "avg_bits_err_output": 0.15343712740578722,
    "avg_bits_err_improve": 0.0031318801951469855,
    "time": 19230.072509765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (expm1 (log1p (* x PI))) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6513452135954878,
    "avg_bits_err_output": 0.6835950235245164,
    "avg_bits_err_improve": -0.032249809929028594,
    "time": 24642.0908203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.16747158469483756,
    "avg_bits_err_output": 0.16173303305689957,
    "avg_bits_err_improve": 0.005738551637937989,
    "time": 21512.734375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.612310869104001,
    "avg_bits_err_output": 2.6111192718829748,
    "avg_bits_err_improve": 0.0011915972210263526,
    "time": 31453.93359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (/ (* (/ (/ 0.5 v) (exp (* sinTheta_i (/ sinTheta_O v)))) (/ cosTheta_i (sinh (/ 1.0 v)))) v))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4526825504145021,
    "avg_bits_err_output": 0.39034782247417354,
    "avg_bits_err_improve": 0.06233472794032857,
    "time": 26880.036376953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (* (exp (/ (fma 2.0 (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) (+ v v))) (exp (+ 0.6931 (/ -1.0 (+ v v))))) (/ 0.5 v))",
    "output_parens": 14,
    "avg_bits_err_input": 0.10742929765524199,
    "avg_bits_err_output": 0.10518809807454861,
    "avg_bits_err_improve": 0.0022411995806933815,
    "time": 19606.006591796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (fma alpha alpha -1.0) (log (pow alpha (* PI 2.0)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.46684033353438215,
    "avg_bits_err_output": 0.41899027691514,
    "avg_bits_err_improve": 0.04785005661924213,
    "time": 26906.377685546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* 3.0 (/ (* (* (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) 2.0) s) 2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 1.311871300643012,
    "avg_bits_err_output": 1.2342150652822768,
    "avg_bits_err_improve": 0.07765623536073529,
    "time": 26454.28369140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (- (log1p (* u -4.0))) s)",
    "output_parens": 4,
    "avg_bits_err_input": 12.31327778622974,
    "avg_bits_err_output": 0.2045,
    "avg_bits_err_improve": 12.10877778622974,
    "time": 19578.17041015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (* (* (* 6.0 PI) s) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.1346384577372028,
    "avg_bits_err_output": 0.13386590783470262,
    "avg_bits_err_improve": 0.0007725499025001692,
    "time": 33449.9873046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma n1_i (/ (sin (* u normAngle)) (sin normAngle)) (* (sin (- normAngle (* u normAngle))) (/ n0_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9343527535727689,
    "avg_bits_err_output": 0.7890206378674076,
    "avg_bits_err_improve": 0.1453321157053613,
    "time": 27625.029052734375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7028325369087378,
    "avg_bits_err_output": 0.4738675431181465,
    "avg_bits_err_improve": 0.22896499379059132,
    "time": 21879.227294921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (if (!= (log1p (- u1)) 0.0) (/ 1.0 (/ 1.0 (log1p (- u1)))) (log1p (- u1))))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 16,
    "avg_bits_err_input": 13.395732373251557,
    "avg_bits_err_output": 0.5442839286275041,
    "avg_bits_err_improve": 12.851448444624053,
    "time": 18950.8564453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.434744053587542,
    "avg_bits_err_output": 0.2958049570455201,
    "avg_bits_err_improve": 13.138939096542021,
    "time": 17198.365478515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.340866284373869,
    "avg_bits_err_output": 0.3092830828133113,
    "avg_bits_err_improve": 14.031583201560558,
    "time": 16390.958740234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ (/ sin2phi alphay) alphay) (/ cos2phi (* alphax alphax))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.601033155138609,
    "avg_bits_err_output": 0.5262212537874972,
    "avg_bits_err_improve": 12.074811901351111,
    "time": 17780.259033203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (* (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (- (/ (/ -1.0 l) PI))) (* PI l))) F) (/ 1.0 F)))",
    "output_parens": 14,
    "avg_bits_err_input": 16.22565607336345,
    "avg_bits_err_output": 11.955998486358343,
    "avg_bits_err_improve": 4.269657587005106,
    "time": 22640.796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21874060156295072,
    "avg_bits_err_output": 0.15557312031259016,
    "avg_bits_err_improve": 0.06316748125036056,
    "time": 15559.5654296875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (* (/ (pow (fma 2.0 x (fma F F 2.0)) -0.5) (sin B)) F))",
    "output_parens": 10,
    "avg_bits_err_input": 13.570001173261042,
    "avg_bits_err_output": 10.523636011689776,
    "avg_bits_err_improve": 3.0463651615712664,
    "time": 23051.32080078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) 0.0) (/ (if (!= (exp (/ (* PI (+ f f)) 4.0)) 0.0) (/ (if (!= (+ (exp (* PI (/ (* f 4.0) 4.0))) (exp (* PI (* 2.0 (+ (/ f -4.0) (/ f 4.0)))))) 0.0) (/ (if (!= (+ (exp (* (* PI f) 2.0)) (exp (* (+ (/ f -4.0) (/ f 4.0)) (* PI 4.0)))) 0.0) (/ (- (exp (* (* PI f) 4.0)) (exp (* PI (* (+ (/ f -4.0) (/ f 4.0)) 8.0)))) (+ (exp (* (* PI f) 2.0)) (exp (* (+ (/ f -4.0) (/ f 4.0)) (* PI 4.0))))) (- (exp (* (* PI f) 2.0)) (exp (* (+ (/ f -4.0) (/ f 4.0)) (* PI 4.0))))) (+ (exp (* PI (/ (* f 4.0) 4.0))) (exp (* PI (* 2.0 (+ (/ f -4.0) (/ f 4.0))))))) (- (exp (* PI (/ (* f 4.0) 4.0))) (exp (* PI (* 2.0 (+ (/ f -4.0) (/ f 4.0))))))) (exp (/ (* PI (+ f f)) 4.0))) (- (exp (/ (* PI (+ f f)) 4.0)) (exp (* PI (* 2.0 (/ f -4.0)))))) (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (/ PI -4.0))",
    "output_parens": 134,
    "avg_bits_err_input": 61.5730331379407,
    "avg_bits_err_output": 61.4393397103469,
    "avg_bits_err_improve": 0.13369342759379776,
    "time": 65572.81616210938,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (/ (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0))))) 1.0)))))",
    "output_parens": 20,
    "avg_bits_err_input": 42.57509323770458,
    "avg_bits_err_output": 33.96093557159104,
    "avg_bits_err_improve": 8.614157666113542,
    "time": 27044.896484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.150766573662981,
    "avg_bits_err_output": 0.21689661719245773,
    "avg_bits_err_improve": 3.9338699564705233,
    "time": 33584.744873046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (+ (pow (* (/ 2.0 Om) (* l (sin kx))) 2.0) (pow (* (* 2.0 (/ l Om)) (sin ky)) 2.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.9363905959419778,
    "avg_bits_err_output": 0.006875,
    "avg_bits_err_improve": 0.9295155959419779,
    "time": 12998.166259765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (- -1.0 (+ (- (pow (/ Om Omc) 2.0)) -1.0))) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 13,
    "avg_bits_err_input": 10.298768464718043,
    "avg_bits_err_output": 10.298822566165446,
    "avg_bits_err_improve": -5.410144740380929e-05,
    "time": 21880.264892578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -7.8e+28) (sqrt (- (* (* n U) (* (* l (/ l Om)) -4.0)) (* (* n (* U -2.0)) (- t (* n (* (pow (/ l Om) 2.0) (- U U*))))))) (if (<= n 5e-287) (sqrt (* U (* (* 2.0 n) (- t (fma 2.0 (* l (/ l Om)) (* (pow (/ l Om) 2.0) (* (- U U*) n))))))) (if (<= n 5.7e-204) (* (sqrt (* (- (fma 2.0 (* l (/ l Om)) (* (pow (/ l Om) 2.0) (* (- U U*) n))) t) (* U -2.0))) (sqrt n)) (if (<= n 1.3e-66) (sqrt (if (!= (* (* U -2.0) (* n (- t (* (/ l Om) (* 2.0 l))))) 0.0) (- (* (* n (* (* U -2.0) (* (pow (/ l Om) 2.0) (* n (- U U*))))) (/ (* (* U -2.0) (* n (- t (* (/ l Om) (* 2.0 l))))) (* (* U -2.0) (* n (- t (* (/ l Om) (* 2.0 l))))))) (/ 1.0 (/ 1.0 (* (* U -2.0) (* n (- t (* (/ l Om) (* 2.0 l)))))))) (* n (* (* U -2.0) (fma 2.0 (* l (/ l Om)) (- (* (pow (/ l Om) 2.0) (* n (- U U*))) t)))))) (* (sqrt (* 2.0 (* U (- t (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* 2.0 (* l (/ l Om)))))))) (sqrt n))))))",
    "output_parens": 122,
    "avg_bits_err_input": 35.01707994436509,
    "avg_bits_err_output": 27.95080000928198,
    "avg_bits_err_improve": 7.066279935083113,
    "time": 41105.277587890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -3.35e+72) (/ 2.0 (/ (* (* k (* (/ k t) (/ (tan k) l))) (* (pow t 3.0) (/ (sin k) t))) l)) (if (<= t 2.3e-38) (/ 2.0 (/ (* (* (pow t 3.0) (* (/ (sin k) l) k)) (* (tan k) (/ k l))) (* t t))) (/ 2.0 (* (/ k t) (* (* k (/ (tan k) l)) (/ (* (pow t 3.0) (/ (sin k) l)) t))))))",
    "output_parens": 40,
    "avg_bits_err_input": 47.900483413567684,
    "avg_bits_err_output": 30.463262158989306,
    "avg_bits_err_improve": 17.43722125457838,
    "time": 48599.890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* (+ 2.0 (pow (/ k t) 2.0)) (* (tan k) (/ (* (+ (pow t 3.0) (pow t 3.0)) (+ (sin k) (sin k))) (+ l l)))) (+ l l)))",
    "output_parens": 18,
    "avg_bits_err_input": 32.95536768404197,
    "avg_bits_err_output": 27.938519897845097,
    "avg_bits_err_improve": 5.01684778619687,
    "time": 26528.024169921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (* (cos th) (+ (* a2 a2) (* a1 a1))) (sqrt 2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5071832734586856,
    "avg_bits_err_output": 0.4690484984543582,
    "avg_bits_err_improve": 0.03813477500432744,
    "time": 22386.6982421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* 2.0 (* PI n)) (* k -0.5)) (sqrt (* 2.0 (* PI n)))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5371243047279676,
    "avg_bits_err_output": 0.4433281761125449,
    "avg_bits_err_improve": 0.09379612861542269,
    "time": 22436.0439453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (if (!= (* J (exp l)) 0.0) (* (/ J (exp l)) (expm1 (+ l l))) (* J (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 18,
    "avg_bits_err_input": 17.263152104342474,
    "avg_bits_err_output": 0.14090808281331133,
    "avg_bits_err_improve": 17.122244021529163,
    "time": 25907.666748046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (log (+ 1.0 (expm1 (cos (- (* K (/ (+ m n) 2.0)) M))))) (exp (- (- (* (- (/ (+ m n) 2.0) M) (- (/ (+ m n) 2.0) M))) (- l (fabs (- m n))))))",
    "output_parens": 22,
    "avg_bits_err_input": 14.61046555967511,
    "avg_bits_err_output": 14.579372901458695,
    "avg_bits_err_improve": 0.031092658216413938,
    "time": 21856.136474609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.37494812031259,
    "avg_bits_err_output": 18.37494812031259,
    "avg_bits_err_improve": 0,
    "time": 26858.740234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (* (/ (* h (* M (/ D d))) (* l 4.0)) (* M (/ D d))))))",
    "output_parens": 11,
    "avg_bits_err_input": 14.388696426827504,
    "avg_bits_err_output": 8.744631640472258,
    "avg_bits_err_improve": 5.644064786355246,
    "time": 22999.77734375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= V -9.5e+228) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= V -2.6e-68) (* c0 (sqrt (* (/ A (* l (+ V V))) 2.0))) (if (<= V -1e-308) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (* c0 (* (sqrt (/ A l)) (sqrt (/ 1.0 V)))))))",
    "output_parens": 34,
    "avg_bits_err_input": 19.034376758014886,
    "avg_bits_err_output": 12.966611077135916,
    "avg_bits_err_improve": 6.067765680878971,
    "time": 20432.017578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -4.4e+65) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* d (/ c0 D)) (* w (* h D)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* w (* h D)))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* d (/ c0 D)) (* w (* h D)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* w (* h D)))) 2.0) (* M M))))) (fma d (/ (* d (/ c0 D)) (* w (* h D))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* w (* h D)))) 2.0) (* M M)))))) (if (<= w 230.0) (/ (/ (* c0 (if (!= (- (* d (/ (* d c0) (* (* D h) (* D w)))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (* d c0) (* (* D h) (* D w)))) (* (sqrt (- M (* d (/ (* d c0) (* D (* D (* h w))))))) (sqrt (- (fma d (/ (* d c0) (* D (* D (* h w)))) M))))))) (fma d (/ (* d c0) (* (* D h) (* D w))) (sqrt (- (pow (* d (/ (* d c0) (* (* D h) (* D w)))) 2.0) (* M M)))))) w) 2.0) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* d (/ c0 D)) (* w (* h D)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* w (* h D)))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (/ (* d (/ c0 D)) (* w (* h D)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* w (* h D)))) 2.0) (* M M))))) (fma d (/ (* d (/ c0 D)) (* w (* h D))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* w (* h D)))) 2.0) (* M M))))))))",
    "output_parens": 182,
    "avg_bits_err_input": 59.680442275452414,
    "avg_bits_err_output": 28.72560635300023,
    "avg_bits_err_improve": 30.954835922452183,
    "time": 68520.26538085938,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (- (sqrt (* (/ d l) (/ d h))) (* (* 0.5 (pow (* M (/ (/ D d) 2.0)) 2.0)) (/ (* h (sqrt (* d (/ (/ d l) h)))) l))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 1e+294) (* (* (pow (/ d h) 0.5) (sqrt (/ d l))) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (sqrt (* d (/ d (* h l)))) (- 1.0 (* h (* (pow (* D (/ M (* d 2.0))) 2.0) (/ 0.5 l)))))))",
    "output_parens": 77,
    "avg_bits_err_input": 26.930657258275332,
    "avg_bits_err_output": 24.00180390917422,
    "avg_bits_err_improve": 2.928853349101111,
    "time": 47682.7265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (/ (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (* x (/ x (+ 1.0 (hypot 1.0 x)))) (+ (hypot 1.0 x) -1.0)) (* (hypot 1.0 x) 2.0)) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 31,
    "avg_bits_err_input": 15.501832345748937,
    "avg_bits_err_output": 0.04491842858894981,
    "avg_bits_err_improve": 15.456913917159987,
    "time": 27242.615966796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9846981203125902,
    "avg_bits_err_output": 0.011021240625180291,
    "avg_bits_err_improve": 0.9736768796874099,
    "time": 4922.664794921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (- (* v (* v 5.0)) (- 2.0 (* v (* v 5.0)))) (* (sqrt (fma v (* v -6.0) 2.0)) (* -2.0 PI))) (- t (* v (* v t))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.4177905635405,
    "avg_bits_err_output": 0.11319116562662261,
    "avg_bits_err_improve": 0.30459939791387736,
    "time": 22890.918701171875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt (- 2.0 (* v (* v 6.0)))) -4.0) (+ (* v v) -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.011594360937770434,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 0.001969360937770434,
    "time": 6746.94384765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5259832657021648,
    "avg_bits_err_output": 0.5259832657021648,
    "avg_bits_err_improve": 0,
    "time": 9592.442138671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output_parens": 7,
    "avg_bits_err_input": 2.32511591314059,
    "avg_bits_err_output": 2.32511591314059,
    "avg_bits_err_improve": 0,
    "time": 11787.4189453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- mu (- Ec (+ Vef EDonor))) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0160842797537534,
    "avg_bits_err_output": 0.0160842797537534,
    "avg_bits_err_improve": 0,
    "time": 7023.96630859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow b 4.0) (* (* a a) (+ (* b (+ b b)) (* a a)))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18960905390214727,
    "avg_bits_err_output": 0.10242952695107367,
    "avg_bits_err_improve": 0.0871795269510736,
    "time": 10228.554931640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (fma (* b (* b a)) (+ a a) (+ (pow a 4.0) (pow b 4.0))) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 18,
    "avg_bits_err_input": 0.1865633717196659,
    "avg_bits_err_output": 0.020061552039443705,
    "avg_bits_err_improve": 0.16650181968022218,
    "time": 18754.630126953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (+ (* (* a a) (* b b)) (+ (* b (* b (* b b))) (* (* a a) (fma b b (* a a))))) (pow (fma b b (* a a)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 30,
    "avg_bits_err_input": 0.1860512990690369,
    "avg_bits_err_output": 0.1609969756305454,
    "avg_bits_err_improve": 0.025054323438491483,
    "time": 23039.52099609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (+ (/ x (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0)) (if (!= (/ (/ x 4.0) (sqrt (fma 4.0 (* p p) (* x x)))) 0.0) (/ (/ (/ (* x (+ x (+ x x))) 4.0) (sqrt (fma 4.0 (* p p) (* x x)))) x) (/ (/ (+ x (+ x x)) 4.0) (sqrt (fma 4.0 (* p p) (* x x)))))))))",
    "output_parens": 37,
    "avg_bits_err_input": 13.049863174189971,
    "avg_bits_err_output": 13.243561391989836,
    "avg_bits_err_improve": -0.19369821779986474,
    "time": 19154.2392578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (/ (/ (expm1 (+ x x)) (expm1 x)) (expm1 x)) (/ 1.0 (expm1 x))))",
    "output_parens": 10,
    "avg_bits_err_input": 41.581795527543186,
    "avg_bits_err_output": 0.04325,
    "avg_bits_err_improve": 41.538545527543185,
    "time": 9736.44189453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (+ x (tan x)) 0.0) (- (* x (/ x (+ x (tan x)))) (/ (pow (tan x) 2.0) (+ x (tan x)))) (- x (tan x))))",
    "output_parens": 19,
    "avg_bits_err_input": 31.616592616403562,
    "avg_bits_err_output": 31.074599377235835,
    "avg_bits_err_improve": 0.5419932391677271,
    "time": 26322.77880859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -3.45e-308) (/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (if (!= (- 0.0 b_2) 0.0) (* a (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* a (- c))))))) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a))",
    "output_parens": 26,
    "avg_bits_err_input": 34.45107456429824,
    "avg_bits_err_output": 22.29724076578647,
    "avg_bits_err_improve": 12.15383379851177,
    "time": 17224.3046875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.62861518651838,
    "avg_bits_err_output": 22.092714423735647,
    "avg_bits_err_improve": 12.535900762782735,
    "time": 15293.30615234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (log (+ 1.0 (expm1 (+ 2.0 (* (cos x) -2.0))))) x) (+ x x))",
    "output_parens": 9,
    "avg_bits_err_input": 31.382620110201913,
    "avg_bits_err_output": 30.65176495352868,
    "avg_bits_err_improve": 0.7308551566732326,
    "time": 19360.325439453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (/ (- (exp (* (/ (log1p x) n) 2.0)) (pow x (/ 2.0 n))) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 28,
    "avg_bits_err_input": 32.97007266637754,
    "avg_bits_err_output": 32.63008403645127,
    "avg_bits_err_improve": 0.33998862992626755,
    "time": 34811.86376953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (if (!= (+ (log1p N) 2.0) 0.0) (- (/ (pow (+ (log1p N) 1.0) 2.0) (+ (log1p N) 2.0)) (/ 1.0 (+ (log1p N) 2.0))) (log1p N)) (log N))",
    "output_parens": 17,
    "avg_bits_err_input": 29.545799160346263,
    "avg_bits_err_output": 29.667651488261416,
    "avg_bits_err_improve": -0.12185232791515332,
    "time": 15174.73974609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (/ 1.0 x) (if (!= (/ x (+ x 1.0)) 0.0) (/ (- (* (/ x (+ x 1.0)) x) x) (/ (fma x x x) (+ x 1.0))) (+ (/ x (+ x 1.0)) -1.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 14.45404023870485,
    "avg_bits_err_output": 14.247724181962706,
    "avg_bits_err_improve": 0.20631605674214448,
    "time": 21008.404541015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))",
    "output_parens": 8,
    "avg_bits_err_input": 40.45591082540549,
    "avg_bits_err_output": 6.376070401701845,
    "avg_bits_err_improve": 34.079840423703644,
    "time": 23381.47314453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (+ (cbrt (+ 1.0 x)) (- -1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.832082985190723,
    "avg_bits_err_output": 29.533082889844756,
    "avg_bits_err_improve": 0.29900009534596705,
    "time": 14041.818603515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.87957046301514,
    "avg_bits_err_output": 30.87957046301514,
    "avg_bits_err_improve": 0,
    "time": 22677.937255859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (+ (* (* a 2.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b)))))) (* (* a 2.0) (/ c (- (- b) (sqrt (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 34,
    "avg_bits_err_input": 34.453524917576104,
    "avg_bits_err_output": 22.266337022659105,
    "avg_bits_err_improve": 12.187187894916999,
    "time": 27680.540771484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0)))) b) 0.0) (* (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b))) a) (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 35.01359457323689,
    "avg_bits_err_output": 22.71564282900504,
    "avg_bits_err_improve": 12.297951744231845,
    "time": 30164.995849609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(if (!= (+ 1.0 (+ 1.0 (/ (log1p (- x)) (log1p x)))) 0.0) (/ (- (* (+ 1.0 (/ (log1p (- x)) (log1p x))) (+ 1.0 (/ (log1p (- x)) (log1p x)))) 1.0) (+ 1.0 (+ 1.0 (/ (log1p (- x)) (log1p x))))) (/ (log1p (- x)) (log1p x)))",
    "output_parens": 31,
    "avg_bits_err_input": 61.617755739700655,
    "avg_bits_err_output": 0.023797368752524053,
    "avg_bits_err_improve": 61.59395837094813,
    "time": 19208.674072265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (- (exp (log1p (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 1.0)) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00704683582842,
    "avg_bits_err_output": 44.205324785667585,
    "avg_bits_err_improve": 18.801722050160834,
    "time": 13386.021240234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(if (!= (log (/ (- 1.0 eps) (+ 1.0 eps))) 0.0) (/ 1.0 (/ 1.0 (if (!= (- -2.0 (log (/ (- 1.0 eps) (- eps -1.0)))) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (pow (+ 1.0 (log (/ (+ eps -1.0) (- -1.0 eps)))) 2.0))))) (- -2.0 (log (/ (- 1.0 eps) (- eps -1.0))))) (log (/ (- 1.0 eps) (- eps -1.0)))))) (log (/ (- 1.0 eps) (+ 1.0 eps))))",
    "output_parens": 39,
    "avg_bits_err_input": 58.510085398497004,
    "avg_bits_err_output": 58.51153449404978,
    "avg_bits_err_improve": -0.001449095552779056,
    "time": 22315.171142578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (if (!= (+ 1.0 (/ 1.0 (/ x (tan x)))) 0.0) (/ (/ (/ (+ (/ 1.0 (pow (/ x (tan x)) 2.0)) -1.0) (/ -1.0 (pow (/ x (tan x)) 2.0))) (pow (/ x (tan x)) 2.0)) (+ -1.0 (/ -1.0 (/ x (tan x))))) (+ -1.0 (/ 1.0 (/ x (tan x))))) (* x (- (+ 1.0 (/ 1.0 (/ x (tan x)))) 1.0)))",
    "output_parens": 36,
    "avg_bits_err_input": 59.818693213327315,
    "avg_bits_err_output": 59.798712706885496,
    "avg_bits_err_improve": 0.01998050644181859,
    "time": 31019.834716796875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.298200043857314,
    "avg_bits_err_output": 28.61485663854178,
    "avg_bits_err_improve": 31.683343405315533,
    "time": 28596.13232421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.96361656350097,
    "avg_bits_err_output": 0.4385943609377705,
    "avg_bits_err_improve": 41.5250222025632,
    "time": 9445.0166015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.6588772568554,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.6580022568554,
    "time": 5218.873291015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.42017257535626,
    "avg_bits_err_output": 0.016070789202753646,
    "avg_bits_err_improve": 29.404101786153507,
    "time": 5612.53125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (+ (- (exp x) (exp (- x))) -2.0) 0.0) (/ (+ (fma (- (exp (- x))) (exp (- x)) (exp (* x -2.0))) (+ (fma (/ -1.0 (exp x)) (exp (- x)) (exp (* x -2.0))) (- (pow (+ (exp x) -2.0) 2.0) (exp (* x -2.0))))) (+ (- (exp x) (exp (- x))) -2.0)) (+ (+ (exp x) -2.0) (exp (- x))))",
    "output_parens": 41,
    "avg_bits_err_input": 29.97926091000864,
    "avg_bits_err_output": 29.67206924649529,
    "avg_bits_err_improve": 0.3071916635133505,
    "time": 21698.124755859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.523050693013245,
    "avg_bits_err_output": 9.523050693013245,
    "avg_bits_err_improve": 0,
    "time": 23846.025146484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (if (!= (+ (tan (+ x eps)) 1.0) 0.0) (+ (* (/ (tan (+ x eps)) (+ (tan (+ x eps)) 1.0)) (tan (+ x eps))) (/ (tan (+ x eps)) (+ (tan (+ x eps)) 1.0))) (tan (+ x eps))) (tan x))",
    "output_parens": 25,
    "avg_bits_err_input": 36.559457049524056,
    "avg_bits_err_output": 36.701695910558385,
    "avg_bits_err_improve": -0.14223886103432903,
    "time": 22800.9384765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.066230535009122,
    "avg_bits_err_output": 0.16254736875252399,
    "avg_bits_err_improve": 29.9036831662566,
    "time": 13552.138671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (fma (sin eps) (cos x) (* (sin x) (cos eps))) (sin x))",
    "output_parens": 8,
    "avg_bits_err_input": 37.50143438815844,
    "avg_bits_err_output": 22.093387082294313,
    "avg_bits_err_improve": 15.408047305864123,
    "time": 19873.41796875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.546716205344698,
    "avg_bits_err_output": 19.546716205344698,
    "avg_bits_err_improve": 0,
    "time": 16978.68603515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- 1.0 (- (atan N) (if (!= (+ 1.0 (atan (+ 1.0 N))) 0.0) (/ (fma (atan (+ 1.0 N)) (atan (+ 1.0 N)) -1.0) (+ 1.0 (atan (+ 1.0 N)))) (+ (atan (+ 1.0 N)) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 14.54986387644225,
    "avg_bits_err_output": 14.551721248640973,
    "avg_bits_err_improve": -0.0018573721987227287,
    "time": 14120.570068359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.5427609228867,
    "avg_bits_err_output": 1.5133184183111608,
    "avg_bits_err_improve": 28.029442504575538,
    "time": 24987.49072265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (- (/ m v) (* m (/ m v))) 1.0) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07596240625180288,
    "avg_bits_err_output": 0.07539868437626203,
    "avg_bits_err_improve": 0.0005637218755408513,
    "time": 19060.631103515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(+ (- (pow (* a b) 2.0)) (* (fma (- a) b (* a b)) (* a b)))",
    "output_parens": 9,
    "avg_bits_err_input": 16.31332318650586,
    "avg_bits_err_output": 0.25725,
    "avg_bits_err_improve": 16.05607318650586,
    "time": 12051.5048828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= PI 0.0) (* (/ 0.5 PI) (* (* PI angle) (* 0.011111111111111112 PI))) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.741136635939192,
    "avg_bits_err_output": 20.74654439800168,
    "avg_bits_err_improve": -0.005407762062489496,
    "time": 38044.392578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (- (pow a 2.0) (pow b 2.0)) (/ (- (/ (sin (* (+ angle angle) (/ PI 180.0))) 2.0) (* (sin (- (* angle (/ PI 180.0)))) (sin (- (/ PI 2.0) (* angle (/ PI 180.0)))))) -2.0)))",
    "output_parens": 22,
    "avg_bits_err_input": 31.095909298799665,
    "avg_bits_err_output": 31.141626201658973,
    "avg_bits_err_improve": -0.04571690285930785,
    "time": 35575.8740234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (log1p (expm1 (sin (* angle (/ PI 180.0)))))) 2.0) (pow (* b (cos (if (!= (* angle (/ PI 360.0)) 0.0) (* (- (- PI (- angle)) angle) (* angle 0.005555555555555556)) (* angle (/ PI 180.0))))) 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 20.55448105433022,
    "avg_bits_err_output": 20.392176993305416,
    "avg_bits_err_improve": 0.16230406102480543,
    "time": 38615.1904296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17812744375108172,
    "avg_bits_err_output": 0.17349736350301956,
    "avg_bits_err_improve": 0.004630080248062163,
    "time": 16851.28369140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3237485555484409,
    "avg_bits_err_output": 0.3222196541248029,
    "avg_bits_err_improve": 0.001528901423637985,
    "time": 20115.661376953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13684436093777044,
    "avg_bits_err_output": 0.13684436093777044,
    "avg_bits_err_improve": 0,
    "time": 15321.57958984375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi2) (* (cos phi1) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.749913700046047,
    "avg_bits_err_output": 16.741738043275998,
    "avg_bits_err_improve": 0.0081756567700495,
    "time": 36797.49072265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.24080678802017,
    "avg_bits_err_output": 0.17261109062806482,
    "avg_bits_err_improve": 52.068195697392106,
    "time": 26581.42822265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (* a -4.0) (/ c (+ b (sqrt (if (!= (* a (* c -4.0)) 0.0) (/ (/ (+ (/ 4.0 (/ -1.0 (* a c))) (+ (/ (* (* b b) (* a -4.0)) (* a -4.0)) (+ (/ (* (* b b) (* a -4.0)) (* a -4.0)) (/ 4.0 (/ -1.0 (* a c)))))) 1.0) 2.0) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 47,
    "avg_bits_err_input": 28.163699049436563,
    "avg_bits_err_output": 0.35136449102628414,
    "avg_bits_err_improve": 27.812334558410278,
    "time": 26972.00390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* b b) (* -4.0 (* a c))))))) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 43.55315757788315,
    "avg_bits_err_output": 0.2408986646850586,
    "avg_bits_err_improve": 43.31225891319809,
    "time": 30480.1328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (pow (fma b b (* a (* c -4.0))) 0.5))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.47102289653146,
    "avg_bits_err_output": 22.28452249313144,
    "avg_bits_err_improve": 12.186500403400018,
    "time": 23807.096923828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (* (cos phi1) (/ (+ (* (cos (- lambda2 lambda1)) (cos phi2)) (cos phi1)) (cos phi1))) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.8806065906188587,
    "avg_bits_err_output": 0.8867150064904783,
    "avg_bits_err_improve": -0.006108415871619588,
    "time": 29931.08203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ 2.0 (- -1.0 (exp (* -2.0 x)))) -1.0) 0.0) (/ (log (+ 1.0 (expm1 (- -1.0 (/ -4.0 (pow (+ 1.0 (exp (* -2.0 x))) 2.0)))))) (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 27,
    "avg_bits_err_input": 28.599473414399565,
    "avg_bits_err_output": 28.593849213525164,
    "avg_bits_err_improve": 0.005624200874400742,
    "time": 17597.608642578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ (exp (+ x x)) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 57.93453049033198,
    "avg_bits_err_output": 0.6548868421881311,
    "avg_bits_err_improve": 57.279643648143846,
    "time": 18509.50927734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x 2.0)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 57.90369207397151,
    "avg_bits_err_output": 0.07184436093777043,
    "avg_bits_err_improve": 57.831847713033746,
    "time": 7872.0478515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(log (exp (/ 2.0 (+ (exp x) (exp (- x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.005948120312590145,
    "avg_bits_err_output": 0.1474378473087649,
    "avg_bits_err_improve": -0.14148972699617476,
    "time": 4707.5693359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.68993242895233,
    "avg_bits_err_output": 31.68993242895233,
    "avg_bits_err_improve": 0,
    "time": 6013.105712890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(log (sqrt (/ (+ 1.0 x) (- 1.0 x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.502049688533155,
    "avg_bits_err_output": 58.53331220742115,
    "avg_bits_err_improve": -0.03126251888799203,
    "time": 22009.3798828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.003625,
    "avg_bits_err_output": 0.003625,
    "avg_bits_err_improve": 0,
    "time": 3278.53759765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (/ (* (- (sin t)) (* ew (cos (atan (/ eh (* ew (tan t))))))) -1.0) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.131875,
    "avg_bits_err_output": 0.132,
    "avg_bits_err_improve": -0.000125000000000014,
    "time": 25654.056884765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12189624062518029,
    "avg_bits_err_output": 0.12189624062518029,
    "avg_bits_err_improve": 0,
    "time": 27537.330078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (/ (* (cos (/ phi1 2.0)) (* (- lambda1 lambda2) (cos (/ phi2 2.0)))) 1.0) (* (sin (/ phi2 2.0)) (* (sin (/ phi1 2.0)) (- lambda1 lambda2)))) (- phi1 phi2)))",
    "output_parens": 19,
    "avg_bits_err_input": 39.14955991869289,
    "avg_bits_err_output": 0.12559475230684766,
    "avg_bits_err_improve": 39.02396516638604,
    "time": 29224.72607421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (* (+ a b) (/ (- a b) a)) a)))",
    "output_parens": 7,
    "avg_bits_err_input": 15.030912421810992,
    "avg_bits_err_output": 0.017375,
    "avg_bits_err_improve": 15.013537421810993,
    "time": 5640.367919921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (log (exp (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos theta) (cos phi1))))))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.1634541690030238,
    "avg_bits_err_output": 0.19629667213847862,
    "avg_bits_err_improve": -0.03284250313545481,
    "time": 41274.759521484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.281141624971596,
    "avg_bits_err_output": 0.17519321311922348,
    "avg_bits_err_improve": 52.105948411852374,
    "time": 28822.882080078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.35602565152832,
    "avg_bits_err_output": 0.3358712421996698,
    "avg_bits_err_improve": 28.02015440932865,
    "time": 23933.413330078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.60290176876151,
    "avg_bits_err_output": 0.2408310316456947,
    "avg_bits_err_improve": 43.362070737115815,
    "time": 24902.304931640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -3.0) (* b b)))) 0.0) (* (* a -3.0) (/ c (+ b (sqrt (fma c (* a -3.0) (* b b)))))) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 22,
    "avg_bits_err_input": 34.48780767584708,
    "avg_bits_err_output": 22.266002120793036,
    "avg_bits_err_improve": 12.221805555054043,
    "time": 24871.138671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (log1p (expm1 (sin (- lambda1 lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.212609150528868,
    "avg_bits_err_output": 13.22160158908917,
    "avg_bits_err_improve": -0.008992438560301963,
    "time": 36208.779052734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.079432701395508,
    "avg_bits_err_output": 0.48375858029785085,
    "avg_bits_err_improve": 28.595674121097655,
    "time": 18289.061279296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.0115,
    "avg_bits_err_improve": 0,
    "time": 6393.66650390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ (+ (+ -1.0 (/ x (+ x 1.0))) (/ -2.0 (+ x 1.0))) (+ x (+ x -2.0))) (/ (+ -1.0 (/ x (+ x 1.0))) (+ x (+ x -2.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 14.383260165823431,
    "avg_bits_err_output": 12.516860362242781,
    "avg_bits_err_improve": 1.8663998035806504,
    "time": 17947.111083984375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.65e-307) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt (* F -2.0))) (/ (sqrt (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C))) (- (* A (* C 4.0)) (pow B 2.0)))) (/ (* (sqrt F) (* (sqrt (- (* (* A C) 8.0) (* 2.0 (pow B 2.0)))) (sqrt (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))))) (- (* A (* 4.0 C)) (pow B 2.0))))",
    "output_parens": 47,
    "avg_bits_err_input": 52.48032292019452,
    "avg_bits_err_output": 46.67218741096418,
    "avg_bits_err_improve": 5.80813550923034,
    "time": 47154.047607421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) -1.0) (* 180.0 (log1p (expm1 (/ (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) PI)))) (if (<= (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) 2e-5) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0)))) 0.0) (/ (- (* (pow (- C A) 2.0) 0.0) (pow B 2.0)) (+ (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))) (- (- C A) (sqrt (+ (pow B 2.0) (pow (- C A) 2.0))))))) PI)) (* 180.0 (/ (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) PI))))",
    "output_parens": 80,
    "avg_bits_err_input": 29.428998426865522,
    "avg_bits_err_output": 25.66686406401154,
    "avg_bits_err_improve": 3.762134362853981,
    "time": 27103.21728515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2.35e-284) (* (* (sqrt (- (* A (* C 4.0)) (pow B 2.0))) (sqrt (- F))) (/ (sqrt (* 2.0 (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* A (* C 4.0)) (pow B 2.0)))) (* (* (sqrt (- (pow B 2.0) (* A (* C 4.0)))) (sqrt F)) (/ (sqrt (* 2.0 (+ A (if (!= (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) 0.0) (/ (- (- (* C C) (pow (- A C) 2.0)) (pow B 2.0)) (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* A (* C 4.0)) (pow B 2.0)))))",
    "output_parens": 68,
    "avg_bits_err_input": 52.40359133940805,
    "avg_bits_err_output": 45.758236514261625,
    "avg_bits_err_improve": 6.645354825146427,
    "time": 48497.37646484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.752350087011,
    "avg_bits_err_output": 15.752350087011,
    "avg_bits_err_improve": 0,
    "time": 24084.798828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -2.3e+143) (+ (cbrt (* (/ 0.5 a) (- (* (sqrt (- h g)) (sqrt (- (+ g h)))) g))) (cbrt (* (/ 0.5 a) (if (!= (- (sqrt (fma g g (- (* h h)))) g) 0.0) (/ (+ 0.0 (- (- (* h h)))) (- (sqrt (fma g g (- (* h h)))) g)) (- (- g) (sqrt (fma g g (- (* h h))))))))) (if (<= g -2e-295) (* (cbrt (/ 0.5 a)) (+ (cbrt (fma g -1.0 (sqrt (- (* g g) (* h h))))) (cbrt (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (* h h) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h))))))))) (* (cbrt (/ 0.5 a)) (+ (cbrt (if (!= (- g (- (sqrt (- (* g g) (* h h))))) 0.0) (* h (/ h (- (- g) (sqrt (- (* g g) (* h h)))))) (- (sqrt (- (* g g) (* h h))) g))) (cbrt (- (- g) (* (sqrt (- g h)) (sqrt (+ g h)))))))))",
    "output_parens": 106,
    "avg_bits_err_input": 35.99520121547135,
    "avg_bits_err_output": 11.243286020899118,
    "avg_bits_err_improve": 24.751915194572227,
    "time": 34283.37060546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (if (!= (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) -3.0))) 0.0) (* (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) -3.0))) (/ (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))) (* (cos (* PI 0.6666666666666666)) (cos (/ (acos (/ g (- h))) -3.0))))) (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.9882127828190815,
    "avg_bits_err_output": 0.039427256254687515,
    "avg_bits_err_improve": 0.9487855265643941,
    "time": 25800.5556640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.6085433791303934,
    "avg_bits_err_output": 0.6085433791303934,
    "avg_bits_err_improve": 0,
    "time": 2722.396728515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -5e+273) (/ (* (/ a1 b2) a2) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-311) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+280) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.32111551295781,
    "avg_bits_err_output": 2.7238886900221684,
    "avg_bits_err_improve": 8.597226822935642,
    "time": 10249.55322265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4924154457670652,
    "avg_bits_err_output": 0.459125,
    "avg_bits_err_improve": 0.03329044576706519,
    "time": 6797.243408203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.1) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (expm1 (log1p (- (hypot 1.0 x) x)))) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 2.0) (log1p (+ x (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (/ (* x x) (+ 1.0 (hypot 1.0 x))) (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 46,
    "avg_bits_err_input": 53.03431540410139,
    "avg_bits_err_output": 0.15844139450290448,
    "avg_bits_err_improve": 52.87587400959849,
    "time": 12225.864501953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.650665790699693,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.650665790699693,
    "time": 2106.189453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (expm1 (log1p (sqrt (/ (- 1.0 x) (+ 1.0 x)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.018125,
    "avg_bits_err_improve": -0.003624999999999998,
    "time": 3614.646484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1379.633544921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.898187306960708,
    "avg_bits_err_output": 0.6136209155037722,
    "avg_bits_err_improve": 12.284566391456936,
    "time": 21889.478515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (+ (* x1 (* (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0)) (* x1 -6.0))) (/ (* (* (- 3.0 (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (* x1 -2.0)) (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2)))) (- -1.0 (* x1 x1))))))))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.5135698396923305,
    "avg_bits_err_output": 0.2753419706728911,
    "avg_bits_err_improve": 0.23822786901943938,
    "time": 68440.33642578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- v) (+ t1 u)) (/ t1 (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 17.915628747042692,
    "avg_bits_err_output": 1.2893388056900368,
    "avg_bits_err_improve": 16.626289941352656,
    "time": 9097.333251953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.25346936093777045,
    "avg_bits_err_output": 0.18920996250072117,
    "avg_bits_err_improve": 0.06425939843704928,
    "time": 6378.5419921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0025,
    "avg_bits_err_output": 0.0025,
    "avg_bits_err_improve": 0,
    "time": 2495.2724609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ (- (/ PI a) (/ PI b)) (- b a)) 2.0) (+ b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.770976513200347,
    "avg_bits_err_output": 0.26456409844281836,
    "avg_bits_err_improve": 14.506412414757529,
    "time": 19347.555908203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (- (/ -1.0 (- (exp (- x (* eps x))))) (- (/ -1.0 (* eps (exp (- x (* eps x))))) (/ (/ -1.0 eps) (exp (fma eps x x))))) (/ 1.0 (- (exp (fma eps x x))))) 2.0)",
    "output_parens": 22,
    "avg_bits_err_input": 29.453644125620823,
    "avg_bits_err_output": 1.2223963628039096,
    "avg_bits_err_improve": 28.231247762816913,
    "time": 22020.246826171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.011625,
    "avg_bits_err_output": 0.011625,
    "avg_bits_err_improve": 0,
    "time": 6857.18408203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.01625,
    "avg_bits_err_output": 0.01625,
    "avg_bits_err_improve": 0,
    "time": 17589.90576171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (- (+ (pow (* 2.0 (/ t (+ 1.0 t))) 2.0) -1.0) -1.0)) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.03925,
    "avg_bits_err_output": 0.03637406013339089,
    "avg_bits_err_improve": 0.002875939866609112,
    "time": 8702.820556640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3814.780517578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* -2.0 (* (fma y (* y (fma y y -2.0)) (* (pow x 4.0) -9.0)) (* y y))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 8407.025634765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2877.89990234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.801530994643082,
    "avg_bits_err_output": 0.243,
    "avg_bits_err_improve": 7.558530994643082,
    "time": 39256.8994140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.8289289514031815,
    "avg_bits_err_output": 7.8289289514031815,
    "avg_bits_err_improve": 0,
    "time": 15075.992919921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (+ eps (+ x x)) eps) (+ (* x x) (- (pow x 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.614361036599533,
    "avg_bits_err_output": 0.023095942504985482,
    "avg_bits_err_improve": 16.59126509409455,
    "time": 11415.555419921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (exp (* x (* x 10.0))) (+ (cos x) 2.0)) 0.0) (/ (- (* (pow (exp (* x x)) 20.0) (pow (+ 1.0 (cos x)) 2.0)) (pow (exp (* x x)) 20.0)) (* (pow (exp (* x x)) 10.0) (+ (cos x) 2.0))) (* (pow (exp (* x x)) 10.0) (cos x)))",
    "output_parens": 31,
    "avg_bits_err_input": 3.564018320784271,
    "avg_bits_err_output": 3.067760856401567,
    "avg_bits_err_improve": 0.49625746438270424,
    "time": 23348.317626953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 14.876132882244992,
    "avg_bits_err_output": 14.876132882244992,
    "avg_bits_err_improve": 0,
    "time": 13577.262451171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.65687027405402,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.65687027405402,
    "time": 5316.13916015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.03638582326905,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.03588582326905,
    "time": 5914.780517578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (- 1.7e+308 (+ -1.7e+308 (* t +inf.0))) -2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.30114624062518025,
    "avg_bits_err_improve": 63.69885375937482,
    "time": 20094.812744140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325519148306,
    "avg_bits_err_output": 0.409061654691737,
    "avg_bits_err_improve": 61.43419353679132,
    "time": 13099.6328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0)))) b) 0.0) (* (* 4.0 (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b))) a) (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 35.01359457323689,
    "avg_bits_err_output": 22.71564282900504,
    "avg_bits_err_improve": 12.297951744231845,
    "time": 32220.173583984375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (- (- b) (pow (fma b b (* a (* c -4.0))) 0.5))) (* a 4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.47102289653146,
    "avg_bits_err_output": 22.28452249313144,
    "avg_bits_err_improve": 12.186500403400018,
    "time": 26748.605224609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 3003.878173828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.386030501860056,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 40.37503050186005,
    "time": 4769.7490234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- (* x x) (* y y)) (fma x x (* y y)))",
    "output_parens": 6,
    "avg_bits_err_input": 19.900819241230433,
    "avg_bits_err_output": 19.901463197678645,
    "avg_bits_err_improve": -0.000643956448211469,
    "time": 5328.1875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6717340797998848,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6717340797998848,
    "time": 7493.1533203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04275,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.04225,
    "time": 8959.514404296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02177124062518029,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0.01152124062518029,
    "time": 3487.928955078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* (* x x) (+ x 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.02254248125036058,
    "avg_bits_err_improve": -0.00916748125036058,
    "time": 2430.349609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 1725.424072265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ a (+ c b))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4040216171924582,
    "avg_bits_err_output": 0.235375,
    "avg_bits_err_improve": 0.16864661719245821,
    "time": 8228.635986328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(- 1.0 (cos x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.880607605573434,
    "avg_bits_err_output": 29.880607605573434,
    "avg_bits_err_improve": 0,
    "time": 8024.481201171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.61180531814241,
    "avg_bits_err_output": 0.28675,
    "avg_bits_err_improve": 24.325055318142407,
    "time": 12456.74169921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(- (expm1 (log1p (/ x (tan x)))) (/ (sin x) (tan x)))",
    "output_parens": 8,
    "avg_bits_err_input": 30.371839472538547,
    "avg_bits_err_output": 30.388797094638736,
    "avg_bits_err_improve": -0.016957622100189695,
    "time": 33513.105712890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006600919365257201,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.005725919365257201,
    "time": 2971.700927734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (- (* (/ 100.0 (/ i n)) (- (+ 1.0 (pow (+ 1.0 (/ i n)) n)) 1.0)) (/ (/ 1.0 (/ 1.0 (/ 10000.0 (/ i n)))) 200.0)) (/ (/ 1.0 (/ 1.0 (/ 10000.0 (/ i n)))) 200.0)))",
    "output_parens": 35,
    "avg_bits_err_input": 47.40229719414461,
    "avg_bits_err_output": 14.103274897207,
    "avg_bits_err_improve": 33.29902229693761,
    "time": 29394.8486328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma c c (* d d)))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.114874810140503,
    "avg_bits_err_output": 23.297404180787446,
    "avg_bits_err_improve": 2.817470629353057,
    "time": 15456.880126953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.210439665110023,
    "avg_bits_err_output": 22.955341230793575,
    "avg_bits_err_improve": 3.255098434316448,
    "time": 17239.6435546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (- (* ux maxCos) ux))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037,
    "avg_bits_err_output": 0.022853257067009147,
    "avg_bits_err_improve": 0.014146742932990852,
    "time": 11527.526611328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (* (- (fma ux maxCos 1.0) ux) (* ux (- maxCos 1.0))) 0.0) (/ (- (* (* (- (fma ux maxCos 1.0) ux) (* ux (- maxCos 1.0))) (+ 1.0 (- ux (fma ux maxCos 1.0)))) (* (* (- (fma ux maxCos 1.0) ux) (* ux (- maxCos 1.0))) (* (- (fma ux maxCos 1.0) ux) (* ux (- maxCos 1.0))))) (* (- (fma ux maxCos 1.0) ux) (* ux (- maxCos 1.0)))) (- 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)))))",
    "output_parens": 43,
    "avg_bits_err_input": 13.701491355935918,
    "avg_bits_err_output": 11.409356376394873,
    "avg_bits_err_improve": 2.2921349795410446,
    "time": 33738.571044921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.736653736431963,
    "avg_bits_err_output": 12.191548627117545,
    "avg_bits_err_improve": 1.5451051093144184,
    "time": 28462.6923828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (if (!= (* uy (* 2.0 PI)) 0.0) (/ 1.0 (* (/ (/ 1.0 uy) PI) 0.5)) (* uy (* 2.0 PI)))) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output_parens": 42,
    "avg_bits_err_input": 0.34700233475199505,
    "avg_bits_err_output": 0.35544819831684743,
    "avg_bits_err_improve": -0.008445863564852385,
    "time": 50507.538818359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (pow (/ (+ (- 1.0 (* (cos (atan (* (/ alphay alphax) (tan (* PI (fma u1 2.0 0.5)))))) 2.0)) -1.0) -2.0) 2.0) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 43,
    "avg_bits_err_input": 0.1992409899958042,
    "avg_bits_err_output": 0.19908068856317312,
    "avg_bits_err_improve": 0.00016030143263107144,
    "time": 66307.9404296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (* (/ (* u1 u1) (* (- 1.0 u1) (- 1.0 u1))) (/ 1.0 (/ u1 (- 1.0 u1)))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 19,
    "avg_bits_err_input": 0.5327953589052737,
    "avg_bits_err_output": 0.5735638980912273,
    "avg_bits_err_improve": -0.04076853918595358,
    "time": 22922.8779296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (/ u1 (* (- 1.0 u1) 4.0)) (/ (+ u1 (+ u1 u1)) (- 4.0 (* u1 4.0))))) (cos (* 6.28318530718 u2)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.3269974191468956,
    "avg_bits_err_output": 0.339132021096527,
    "avg_bits_err_improve": -0.012134601949631396,
    "time": 21498.508056640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (* (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (- 1.0 (/ 1.0 (+ 1.0 (exp (/ PI s))))) (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ PI (- s)))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 71,
    "avg_bits_err_input": 0.33157011017982335,
    "avg_bits_err_output": 0.3122419004187247,
    "avg_bits_err_improve": 0.01932820976109867,
    "time": 57239.693115234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05277137048278721,
    "avg_bits_err_output": 0.03487778576674878,
    "avg_bits_err_improve": 0.017893584716038434,
    "time": 8907.5087890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (* (pow (+ (exp (/ (fabs x) (- s))) 1.0) -2.0) (exp (/ (fabs x) (- s)))) s)",
    "output_parens": 12,
    "avg_bits_err_input": 0.14704880041152202,
    "avg_bits_err_output": 0.13410352010849438,
    "avg_bits_err_improve": 0.012945280303027634,
    "time": 20689.611572265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6610546146344237,
    "avg_bits_err_output": 0.6610546146344237,
    "avg_bits_err_improve": 0,
    "time": 20852.908203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(- (* v (+ (+ 1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))) -1.0)) -1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.1607340264575818,
    "avg_bits_err_output": 0.17433207454361446,
    "avg_bits_err_improve": -0.013598048086032655,
    "time": 20641.7900390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (+ (fma (/ (- sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) sinTheta_O (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 2.4787252456347293,
    "avg_bits_err_output": 2.4748634065226365,
    "avg_bits_err_improve": 0.003861839112092813,
    "time": 31899.543701171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (/ (/ (/ (* (+ cosTheta_i cosTheta_i) (/ 2.0 v)) 1.0) (sinh (/ 1.0 v))) (* (+ (+ v v) (+ v v)) (+ (exp (* sinTheta_i (/ sinTheta_O v))) (exp (* sinTheta_i (/ sinTheta_O v)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.44697668449907874,
    "avg_bits_err_output": 0.38502958622148625,
    "avg_bits_err_improve": 0.06194709827759248,
    "time": 28371.14990234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (+ (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (/ -1.0 v)) 0.6931)) 0.5) v)",
    "output_parens": 10,
    "avg_bits_err_input": 0.1127232469302494,
    "avg_bits_err_output": 0.08218798196094755,
    "avg_bits_err_improve": 0.030535264969301854,
    "time": 29098.0361328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(- (/ (/ (- 1.0 (* alpha alpha)) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0)) (log (pow (* alpha alpha) PI))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.46684617393572764,
    "avg_bits_err_output": 0.4257891609330815,
    "avg_bits_err_improve": 0.04105701300264614,
    "time": 24491.12158203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) s)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3155586273297748,
    "avg_bits_err_output": 1.2126467267851484,
    "avg_bits_err_improve": 0.1029119005446264,
    "time": 22281.307861328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ (/ 2.0 (/ 2.0 (- 1.0 (* 4.0 u)))) (log (+ 1.0 (expm1 (pow (+ 1.0 (* u -4.0)) 2.0)))))) s) 2.0) (/ (* (log (/ 1.0 (- 1.0 (* 4.0 u)))) s) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 12.177074462391777,
    "avg_bits_err_output": 11.362673138467857,
    "avg_bits_err_improve": 0.8144013239239207,
    "time": 21215.592529296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (/ (* (exp (* r (/ -0.3333333333333333 s))) 0.75) (* r PI)) (* s 6.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.14136866499793704,
    "avg_bits_err_output": 0.15575140164595797,
    "avg_bits_err_improve": -0.014382736648020922,
    "time": 28551.347412109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9211949337940752,
    "avg_bits_err_output": 0.7288380555780936,
    "avg_bits_err_improve": 0.19235687821598169,
    "time": 27327.014892578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (pow (- (- 1.0 cosTheta) cosTheta) 0.5) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6968330656105688,
    "avg_bits_err_output": 0.49228579139980294,
    "avg_bits_err_improve": 0.20454727421076585,
    "time": 24965.376220703125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.602537837612301,
    "avg_bits_err_output": 0.5172734402693678,
    "avg_bits_err_improve": 13.085264397342934,
    "time": 20169.4306640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (if (!= u2 0.0) (/ (* u2 (* u2 (* 2.0 PI))) u2) (* u2 (* 2.0 PI)))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.650906166182418,
    "avg_bits_err_output": 0.31680631618342764,
    "avg_bits_err_improve": 13.33409984999899,
    "time": 18332.558837890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* (- alpha) alpha) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.142857218853672,
    "avg_bits_err_output": 0.32187988750216356,
    "avg_bits_err_improve": 13.820977331351509,
    "time": 16108.34814453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (+ (/ cos2phi (* alphax (* alphax -2.0))) (- (/ cos2phi (* alphax (* alphax -2.0))) (/ sin2phi (* alphay alphay)))))",
    "output_parens": 13,
    "avg_bits_err_input": 12.704742806965966,
    "avg_bits_err_output": 0.5427890867785813,
    "avg_bits_err_improve": 12.161953720187384,
    "time": 18648.4521484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -1e+23) (- (* PI l) (/ 0.0 F)) (if (<= (* PI l) 20000.0) (- (* PI l) (+ (/ (* (tan (* PI l)) (/ 2.0 F)) (* (* (+ F F) 2.0) 2.0)) (/ (* (tan (* PI l)) (/ 6.0 F)) (* (* (+ F F) 2.0) 2.0)))) (- (* PI l) (/ 0.0 F))))",
    "output_parens": 31,
    "avg_bits_err_input": 16.27470222508504,
    "avg_bits_err_output": 0.6757408148177384,
    "avg_bits_err_improve": 15.598961410267302,
    "time": 21305.693359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (- (/ 1.0 (sin B)) (/ (/ x (tan B)) 2.0)) (/ (/ x (tan B)) 2.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.21018872187554086,
    "avg_bits_err_output": 0.15811560156295076,
    "avg_bits_err_improve": 0.05207312031259009,
    "time": 17473.986083984375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.931669761833206,
    "avg_bits_err_output": 10.817695878551827,
    "avg_bits_err_improve": 3.1139738832813784,
    "time": 22106.045166015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (expm1 (log1p (/ (+ (exp (* PI (/ f -4.0))) (exp (* PI (/ f 4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (* (/ f -4.0) 2.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))))) (/ PI -4.0))",
    "output_parens": 34,
    "avg_bits_err_input": 61.35569690165737,
    "avg_bits_err_output": 1.9285464105230645,
    "avg_bits_err_improve": 59.427150491134306,
    "time": 47256.555908203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* t (sqrt 2.0)) (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* t (* t 2.0))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.76990330589846,
    "avg_bits_err_output": 33.72344607880617,
    "avg_bits_err_improve": 9.04645722709229,
    "time": 27966.787353515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin th) (/ (sin ky) (hypot (sin ky) (sin kx))))",
    "output_parens": 7,
    "avg_bits_err_input": 3.964076345249619,
    "avg_bits_err_output": 0.21404041406655636,
    "avg_bits_err_improve": 3.7500359311830627,
    "time": 31250.306640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (exp (* 0.5 (expm1 (log1p (log1p (+ (* 4.0 (pow (* (/ l Om) (sin ky)) 2.0)) (* 4.0 (pow (* (/ l Om) (sin kx)) 2.0))))))))) 0.5)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.941,
    "avg_bits_err_output": 0.0055,
    "avg_bits_err_improve": 0.9355,
    "time": 20186.26611328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (+ (/ (pow (/ Om Omc) 2.0) (- -1.0 (* 2.0 (pow (/ t l) 2.0)))) (/ -1.0 (- -1.0 (* 2.0 (pow (/ t l) 2.0)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 10.513191713756571,
    "avg_bits_err_output": 10.512441713756571,
    "avg_bits_err_improve": 0.0007500000000000284,
    "time": 21401.93212890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -8e-297) (* (sqrt (* (* 2.0 n) (- (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))) t))) (sqrt (- U))) (* (sqrt (* 2.0 (* n (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt U)))",
    "output_parens": 31,
    "avg_bits_err_input": 34.81510642911647,
    "avg_bits_err_output": 25.611296999279244,
    "avg_bits_err_improve": 9.203809429837225,
    "time": 39426.3955078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* k (/ (* (* (pow t 3.0) (/ (sin k) l)) (* k (/ (tan k) l))) t)) t))",
    "output_parens": 12,
    "avg_bits_err_input": 47.393965477818895,
    "avg_bits_err_output": 31.3023193199943,
    "avg_bits_err_improve": 16.091646157824595,
    "time": 43811.6806640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (pow t 3.0) (/ (sin k) l)) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (tan k) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.28531013236232,
    "avg_bits_err_output": 26.765034691816016,
    "avg_bits_err_improve": 5.520275440546303,
    "time": 22110.889892578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(+ (/ (* a1 (* a1 (+ (+ (cos th) (cos th)) (+ (cos th) (cos th))))) (+ (sqrt 2.0) (+ (sqrt 2.0) (+ (sqrt 2.0) (sqrt 2.0))))) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output_parens": 23,
    "avg_bits_err_input": 0.5056808297076038,
    "avg_bits_err_output": 0.51452970158026,
    "avg_bits_err_improve": -0.008848871872656261,
    "time": 24987.8818359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* PI (* n 2.0)) (* k -0.5)) (sqrt (* PI (* n 2.0)))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5319846978978081,
    "avg_bits_err_output": 0.4239742764844014,
    "avg_bits_err_improve": 0.10801042141340672,
    "time": 20637.55908203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (+ (fma (- (exp (+ l (* l -2.0)))) J (* J (exp (+ l (* l -2.0))))) (* (if (!= (- (exp (fma l -1.0 l)) (exp (* l -2.0))) 0.0) (/ 1.0 (/ 1.0 (- (exp (fma l -1.0 l)) (exp (* l -2.0))))) (- (exp (fma l -1.0 l)) (exp (* l -2.0)))) (* (exp l) J))) (cos (/ K 2.0))) U)",
    "output_parens": 36,
    "avg_bits_err_input": 17.644283046851097,
    "avg_bits_err_output": 17.651163676451663,
    "avg_bits_err_improve": -0.006880629600566124,
    "time": 30292.160888671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(log1p (expm1 (* (- (- (cos (- (* (+ m n) (/ K 2.0)) M)) -1.0) 1.0) (exp (- (fabs (- m n)) (+ l (pow (- (/ (+ m n) 2.0) M) 2.0)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 15.451455712274758,
    "avg_bits_err_output": 15.45252745097524,
    "avg_bits_err_improve": -0.001071738700481717,
    "time": 26459.45849609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.888448120312592,
    "avg_bits_err_output": 17.888448120312592,
    "avg_bits_err_improve": 0,
    "time": 34937.142333984375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= M -5e-140) (* w0 (sqrt (- 1.0 (* (/ (* h (* M (/ D d))) (* l 4.0)) (* M (/ D d)))))) (* w0 (sqrt (- 1.0 (* D (/ (* h (* D (pow (/ M (+ d d)) 2.0))) l))))))",
    "output_parens": 23,
    "avg_bits_err_input": 13.773766496309056,
    "avg_bits_err_output": 8.458425254359918,
    "avg_bits_err_improve": 5.315341241949138,
    "time": 24329.496826171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+210) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) -2e-224) (* c0 (sqrt (/ A (* V l)))) (if (<= (* V l) 2e-299) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V))))) (if (<= (* V l) 2e+282) (* c0 (* (sqrt (/ (/ 2.0 V) (+ l l))) (sqrt A))) (* c0 (* (sqrt (- (/ A l))) (sqrt (- (/ 1.0 V)))))))))",
    "output_parens": 47,
    "avg_bits_err_input": 19.38393505942606,
    "avg_bits_err_output": 10.099276765411151,
    "avg_bits_err_improve": 9.28465829401491,
    "time": 19025.004150390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) -2e-309) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma d (/ (/ (* (/ d D) c0) (* w h)) D) M)) (sqrt (fma d (/ (/ (* (/ d D) c0) (* w h)) D) (- M))) (* d (/ (/ (* (/ d D) c0) (* w h)) D)))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 5e-291) (* (/ c0 (* 2.0 w)) (if (!= (- (* d (/ (* d (/ c0 D)) (* D (* w h)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M)))) 0.0) (* M (/ M (- (* d (/ (* d (/ c0 D)) (* D (* w h)))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M)))))) (fma d (/ (* d (/ c0 D)) (* D (* w h))) (sqrt (- (pow (* d (/ (* d (/ c0 D)) (* D (* w h)))) 2.0) (* M M)))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma d (/ (/ (* (/ d D) c0) (* w h)) D) M)) (sqrt (fma d (/ (/ (* (/ d D) c0) (* w h)) D) (- M))) (* d (/ (/ (* (/ d D) c0) (* w h)) D)))) (/ (/ (* c0 (if (!= (- (* d (* (/ (/ d h) (* w D)) (/ c0 D))) (sqrt (- (pow (* d (* (/ (/ d h) (* w D)) (/ c0 D))) 2.0) (* M M)))) 0.0) (/ (* M M) (- (* d (* (/ (/ d h) (* w D)) (/ c0 D))) (sqrt (- (pow (* d (* (/ (/ d h) (* w D)) (/ c0 D))) 2.0) (* M M))))) (+ (* (/ (/ d h) (* w D)) (* d (/ c0 D))) (sqrt (- (pow (* (/ (/ d h) (* w D)) (* d (/ c0 D))) 2.0) (* M M)))))) w) 2.0))))",
    "output_parens": 249,
    "avg_bits_err_input": 59.63760002667698,
    "avg_bits_err_output": 28.738362668869172,
    "avg_bits_err_improve": 30.899237357807806,
    "time": 61696.763671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 5e+254) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (fma 0.5 (* h (/ (pow (* M (/ D (* d 2.0))) 2.0) l)) -1.0) (- (* (sqrt (/ d (* h l))) (sqrt d)))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.269140892190727,
    "avg_bits_err_output": 23.042173057254054,
    "avg_bits_err_improve": 3.226967834936673,
    "time": 51120.7802734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (/ (if (!= (- -1.0 (hypot 1.0 x)) 0.0) (* (/ x (+ 1.0 (hypot 1.0 x))) x) (+ (hypot 1.0 x) -1.0)) (* (hypot 1.0 x) 2.0)) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 31,
    "avg_bits_err_input": 15.558024646213862,
    "avg_bits_err_output": 0.04603403015190053,
    "avg_bits_err_improve": 15.511990616061961,
    "time": 19301.86669921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9827924812503607,
    "avg_bits_err_output": 0.01214624062518029,
    "avg_bits_err_improve": 0.9706462406251803,
    "time": 5593.62890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (- 2.0 (* 6.0 (* v v))))) (* (fma v v -1.0) (- t))) (* v (/ (* v 5.0) (* (sqrt (- 2.0 (* v (* v 6.0)))) (* PI (* t (- 1.0 (* v v))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.41964857393116367,
    "avg_bits_err_output": 0.11228579206866862,
    "avg_bits_err_improve": 0.30736278186249505,
    "time": 21190.318359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (fma v v -1.0) (/ (sqrt (- 2.0 (* v (* v 6.0)))) -4.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.013146240625180288,
    "avg_bits_err_output": 0.010448120312590145,
    "avg_bits_err_improve": 0.002698120312590143,
    "time": 3175.26806640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5191202699468207,
    "avg_bits_err_output": 0.5191202699468207,
    "avg_bits_err_improve": 0,
    "time": 10533.632568359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.96427427963445,
    "avg_bits_err_output": 1.92377427963445,
    "avg_bits_err_improve": 0.04049999999999998,
    "time": 15317.59765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 2.0 (expm1 (/ (- Vef (- (- Ec mu) EDonor)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017326569372752045,
    "avg_bits_err_output": 0.016899689685342188,
    "avg_bits_err_improve": 0.00042687968740985627,
    "time": 9498.33837890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (+ (pow b 4.0) (* (* a a) (+ (* b b) (fma a a (* b b))))) (* 4.0 (* b b))) 1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.17891093358955718,
    "avg_bits_err_output": 0.09632352733775433,
    "avg_bits_err_improve": 0.08258740625180284,
    "time": 5149.31884765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (fma (* a a) (fma b b (* a a)) (* b (* b (fma b b (* a a))))) (* 4.0 (* b (- b (* 3.0 (* a b)))))) (+ (* a (* a (* a 4.0))) (* a (* a 4.0)))) 1.0)",
    "output_parens": 22,
    "avg_bits_err_input": 0.1845460060198135,
    "avg_bits_err_output": 0.15125300789991963,
    "avg_bits_err_improve": 0.03329299811989386,
    "time": 20431.50927734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (fma (fma a a (* b b)) (* a a) (+ (pow b 4.0) (pow (* b a) 2.0))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 18,
    "avg_bits_err_input": 0.1884003703942341,
    "avg_bits_err_output": 0.1026973625794806,
    "avg_bits_err_improve": 0.0857030078147535,
    "time": 19367.984130859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (- (+ (* x (/ 0.5 (sqrt (fma 4.0 (* p p) (* x x))))) 1.5) 1.0))",
    "output_parens": 9,
    "avg_bits_err_input": 13.537728423626795,
    "avg_bits_err_output": 13.55438954556711,
    "avg_bits_err_improve": -0.01666112194031477,
    "time": 18133.507568359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo"
  }
]
