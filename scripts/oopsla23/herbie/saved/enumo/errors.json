[
  {
    "seed": 1,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 17.584716796875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9007.6083984375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5137.476318359375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 706.495361328125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 2,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.98876953125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8977.219970703125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5096.0107421875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 344.778076171875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 3,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.76708984375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9305.50341796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4992.9931640625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 443.061279296875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 4,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 12.666015625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9522.844482421875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 6032.0830078125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 573.409423828125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 5,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 23.82568359375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9996.319091796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5864.6953125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 743.0673828125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 6,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.164794921875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9633.2744140625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4792.867431640625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 328.688232421875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 7,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.400634765625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9606.28076171875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 6003.657958984375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 403.491943359375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 8,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 16.104736328125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9074.564208984375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4715.533203125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 520.320556640625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 9,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.10888671875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8902.1552734375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4606.88818359375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 675.27294921875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 10,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 21.25439453125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9129.794677734375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5477.926025390625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 627.718505859375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 11,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.4794921875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9746.5009765625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5491.01513671875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 463.636474609375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 12,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 48.240234375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9495.183349609375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5150.105224609375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 551.538818359375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 13,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 63.286865234375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8440.771484375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5181.60546875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 610.960205078125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 14,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.942138671875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9354.040771484375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5562.943359375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 351.27783203125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 15,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.864990234375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 10608.184814453125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5326.83154296875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 507.800537109375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 16,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 18.17724609375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9309.466552734375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4939.638671875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 535.1015625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 17,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 18.54150390625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9135.4072265625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5013.98095703125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 497.089111328125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 18,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 16.589111328125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9283.90283203125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5320.310302734375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 562.906494140625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 19,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 15.88427734375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8974.4990234375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5433.64892578125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 753.687744140625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 20,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.8408203125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9172.268310546875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5402.427490234375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 545.375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 21,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.338134765625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9050.847412109375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5218.049560546875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 685.322509765625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 22,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.48193359375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9969.70556640625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4307.1923828125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 445.97265625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 23,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 16.902587890625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 10225.65478515625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4613.9033203125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 760.800048828125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 24,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 96.22509765625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8313.932373046875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5307.90869140625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 607.811279296875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 25,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 20.632080078125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9702.2607421875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4868.6416015625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 588.64453125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 26,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.537841796875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9786.126708984375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4807.275634765625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 365.830322265625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 27,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 17.66748046875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8892.865966796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4931.9287109375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 843.60546875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 28,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.09033203125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 10173.226806640625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5072.199951171875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 720.041015625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 29,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 16.901123046875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 10305.17431640625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4912.472900390625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 658.0927734375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 30,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 18.10791015625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9381.588134765625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4896.86181640625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 575.708740234375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  }
]
