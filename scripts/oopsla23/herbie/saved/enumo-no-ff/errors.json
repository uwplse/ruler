[
  {
    "seed": 1,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.6796875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9552.0908203125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5393.426513671875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 644.267578125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 2,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.892822265625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8878.015380859375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4559.3623046875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 644.8994140625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 3,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 21.557373046875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 7453.41162109375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4522.53955078125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 714.5146484375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 4,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.1455078125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9066.244384765625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4815.5830078125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 447.650634765625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 5,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 12.822021484375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9695.092041015625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4373.40673828125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 627.255615234375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 6,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 74.44140625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 10427.879150390625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4758.95654296875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 569.863525390625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 7,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 17.10791015625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9979.50927734375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5074.9599609375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 443.182861328125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 8,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.611328125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8640.446044921875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4696.5361328125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 555.162841796875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 9,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 119.205322265625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 7936.470458984375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4704.61328125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 529.227294921875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 10,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.62890625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9130.876953125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5469.827880859375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 383.302978515625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 11,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 18.52490234375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9014.550537109375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5794.5166015625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 650.269287109375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 12,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.414306640625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9819.41796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5920.672119140625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 688.873291015625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 13,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.11328125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9373.6884765625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4820.07421875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 788.5185546875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 14,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 12.95654296875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9182.890380859375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5702.525390625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 577.02099609375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 15,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 19.4169921875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 10007.983154296875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4566.411376953125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 326.623046875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 16,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.39306640625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9965.1650390625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5224.13232421875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 753.352783203125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 17,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 15.738037109375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8715.205078125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4702.28466796875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 357.67333984375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 18,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.742431640625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8641.2685546875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5206.80078125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 824.02734375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 19,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.583740234375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8994.992919921875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4912.50732421875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 396.0927734375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 20,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 16.535888671875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8632.03662109375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5135.9521484375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 618.675048828125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 21,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.47216796875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9407.767822265625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5178.798828125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 454.523681640625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 22,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.20263671875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8054.15185546875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4788.79345703125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 562.319091796875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 23,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.71630859375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8896.59423828125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5117.504638671875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 602.1806640625,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 24,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.543212890625,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8469.279296875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5410.75634765625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 348.019287109375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 25,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.522705078125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8696.271484375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5217.2578125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 541.255859375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 26,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 26.37158203125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9942.142822265625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4679.196533203125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 770.08349609375,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 27,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.251220703125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8996.53076171875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5494.507080078125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 563.80029296875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 28,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 14.2060546875,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8809.4521484375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5390.358154296875,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 652.147705078125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 29,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 16.759521484375,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 8726.07275390625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 4943.061767578125,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 594.461669921875,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  },
  {
    "seed": 30,
    "errors": [
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(- (/ x0 (- 1.0 x1)) x0)",
        "link": "mathematics/46-x01x1x0",
        "name": "(- (/ x0 (- 1 x1)) x0)",
        "output": "#f",
        "pre": "(or (and (== x0 1.855) (== x1 0.000209)) (and (== x0 2.985) (== x1 0.0186)))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(- (/ x0 (- 1.0 x1)) x0)",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (* x0 x1) (- 1.0 x1))",
        "time": 13.9189453125,
        "vars": [
          "x0",
          "x1"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "link": "numerics/9-KahansUnumTargetedMonster",
        "name": "Kahan's Unum-Targeted Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0)))) 0.0) 1.0 (/ (- (exp (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))) 1.0) (+ (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) (pow (pow 10.0 -300.0) (* 10000.0 (+ y 1.0))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 9341.3818359375,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "link": "numerics/10-KahansMonster",
        "name": "Kahan's Monster",
        "output": "#f",
        "pre": "(and (<= 1.0 y) (<= y 9999.0))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(if (== (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0)))))) 0.0) 1.0 (/ (- (exp (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))) 1.0) (* (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))) (- (fabs (- y (sqrt (+ (* y y) 1.0)))) (/ 1.0 (+ y (sqrt (+ (* y y) 1.0))))))))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "#f",
        "time": 5151.603515625,
        "vars": [
          "y"
        ]
      },
      {
        "bits": 128,
        "conversions": [],
        "cost-accuracy": [],
        "end": false,
        "end-est": false,
        "identifier": "#f",
        "input": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "link": "numerics/44-Areaofatriangle",
        "name": "Area of a triangle",
        "output": "#f",
        "pre": "(and (and (and (< 0.0 a) (< a (+ b c))) (and (< 0.0 b) (< b (+ a c)))) (and (< 0.0 c) (< c (+ a b))))",
        "prec": "binary64",
        "preprocess": "()",
        "spec": "(sqrt (* (* (* (/ (+ (+ a b) c) 2.0) (- (/ (+ (+ a b) c) 2.0) a)) (- (/ (+ (+ a b) c) 2.0) b)) (- (/ (+ (+ a b) c) 2.0) c)))",
        "start": false,
        "start-est": false,
        "status": "error",
        "target": false,
        "target-prog": "(/ (sqrt (* (* (* (+ a (+ b c)) (- c (- a b))) (+ c (- a b))) (+ a (- b c)))) 4.0)",
        "time": 885.39501953125,
        "vars": [
          "a",
          "b",
          "c"
        ]
      }
    ]
  }
]
