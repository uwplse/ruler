[
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.87488418017552,
    "avg_bits_err_output": 0.04775,
    "avg_bits_err_improve": 40.82713418017552,
    "time": 5436.244140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (- (tan x) x)) (if (!= (/ x (- (tan x) x)) 0.0) (/ 1.0 (/ 1.0 (/ x (- (tan x) x)))) (/ x (- (tan x) x))))",
    "output_parens": 18,
    "avg_bits_err_input": 31.180782228138554,
    "avg_bits_err_output": 31.184068975561843,
    "avg_bits_err_improve": -0.003286747423288716,
    "time": 26405.425537109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 0.0) (- (/ (* (/ a a) c) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) 0.0) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a))",
    "output_parens": 25,
    "avg_bits_err_input": 34.41134914409666,
    "avg_bits_err_output": 20.26143359454064,
    "avg_bits_err_improve": 14.14991554955602,
    "time": 15674.942138671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.25264941759655,
    "avg_bits_err_output": 22.051571362056634,
    "avg_bits_err_improve": 12.201078055539917,
    "time": 15778.105712890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (- 1.0 (cos x)) x) (/ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 31.575020739923517,
    "avg_bits_err_output": 30.884434437418857,
    "avg_bits_err_improve": 0.6905863025046592,
    "time": 16856.8408203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (<= x 0.55) (- (expm1 (/ (log x) n))) (- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.65983579670954,
    "avg_bits_err_output": 11.862389739549995,
    "avg_bits_err_improve": 20.79744605715954,
    "time": 25061.581787109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (+ (+ (log1p N) 2.0) -2.0) (log N))",
    "output_parens": 5,
    "avg_bits_err_input": 29.89630016366425,
    "avg_bits_err_output": 29.90591092852436,
    "avg_bits_err_improve": -0.00961076486010981,
    "time": 11806.701416015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ 0.0 (if (!= (/ 1.0 (+ 1.0 x)) 0.0) (/ (/ -1.0 x) (+ x 1.0)) (+ (/ -1.0 x) (/ 1.0 (+ 1.0 x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.026953453822443,
    "avg_bits_err_output": 0.0715,
    "avg_bits_err_improve": 13.955453453822443,
    "time": 13218.205322265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (log (log1p (expm1 (exp (cos (+ x eps)))))) (cos x))",
    "output_parens": 8,
    "avg_bits_err_input": 39.995185282530144,
    "avg_bits_err_output": 40.07205046275829,
    "avg_bits_err_improve": -0.07686518022814681,
    "time": 21018.487548828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(expm1 (log1p (+ 1.0 (- (cbrt (+ 1.0 x)) (+ 1.0 (cbrt x))))))",
    "output_parens": 8,
    "avg_bits_err_input": 30.020420158353453,
    "avg_bits_err_output": 29.723936840297412,
    "avg_bits_err_improve": 0.29648331805604045,
    "time": 13961.86181640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (/ 1.0 (sin x)) 0.0) (/ (* (/ (- 1.0 (cos x)) (sin x)) (/ 1.0 (sin x))) (/ 1.0 (sin x))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 18,
    "avg_bits_err_input": 30.4562400601662,
    "avg_bits_err_output": 30.476060864139363,
    "avg_bits_err_improve": -0.019820803973164658,
    "time": 23613.80322265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (if (!= (- (* c (* a 4.0)) (* b b)) 0.0) (/ 1.0 (/ 1.0 (+ (* c (* a -4.0)) (* b b)))) (+ (* c (* a -4.0)) (* b b))))) (* a 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 34.46033237308252,
    "avg_bits_err_output": 34.719942245070314,
    "avg_bits_err_improve": -0.2596098719877915,
    "time": 24325.55322265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.472549351833045,
    "avg_bits_err_output": 34.472549351833045,
    "avg_bits_err_improve": 0,
    "time": 23485.722900390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.453730727635474,
    "avg_bits_err_output": 0.7840745592370696,
    "avg_bits_err_improve": 60.669656168398404,
    "time": 25857.123291015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log1p n) (log n)) n)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 63.008218201337286,
    "avg_bits_err_output": 44.21392876338445,
    "avg_bits_err_improve": 18.794289437952834,
    "time": 11469.3359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (exp (log1p (log (if (!= (* (/ eps (+ 1.0 eps)) (/ eps (+ 1.0 eps))) 0.0) (+ (/ (* (/ (- 1.0 eps) (+ eps 1.0)) (/ 1.0 (/ 1.0 (/ eps (+ eps 1.0))))) (/ (+ eps eps) (+ eps 1.0))) (/ (* (/ (- 1.0 eps) (+ eps 1.0)) (/ 1.0 (/ 1.0 (/ eps (+ eps 1.0))))) (/ (+ eps eps) (+ eps 1.0)))) (/ (- 1.0 eps) (+ 1.0 eps)))))) 1.0)",
    "output_parens": 39,
    "avg_bits_err_input": 58.64187700601443,
    "avg_bits_err_output": 58.66414186331044,
    "avg_bits_err_improve": -0.022264857296008245,
    "time": 19706.74951171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output_parens": 4,
    "avg_bits_err_input": 59.87792033337887,
    "avg_bits_err_output": 59.87792033337887,
    "avg_bits_err_improve": 0,
    "time": 31692.758056640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.1572632360821,
    "avg_bits_err_output": 29.501246445174395,
    "avg_bits_err_improve": 30.656016790907707,
    "time": 27228.919921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.31012038960202,
    "avg_bits_err_output": 0.531375,
    "avg_bits_err_improve": 40.77874538960202,
    "time": 3872.7080078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.60569648221609,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.60544648221609,
    "time": 3045.278076171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.540685457791106,
    "avg_bits_err_output": 0.01914441780414224,
    "avg_bits_err_improve": 29.521541039986964,
    "time": 4997.75927734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (if (!= (expm1 x) 0.0) (* (expm1 x) (/ (+ (expm1 x) (expm1 (- x))) (- (expm1 x)))) (- (- (expm1 x)) (expm1 (- x)))))",
    "output_parens": 18,
    "avg_bits_err_input": 29.637424647862787,
    "avg_bits_err_output": 28.676142864405925,
    "avg_bits_err_improve": 0.9612817834568617,
    "time": 21685.96533203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ (/ 4.0 (+ 4.0 (/ 4.0 x))) x) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 9.14813584865345,
    "avg_bits_err_output": 9.152894512042517,
    "avg_bits_err_improve": -0.004758663389067053,
    "time": 22194.64599609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (- (/ (sin x) (+ (cos x) (cos x))) (* (tan (+ x eps)) 0.5)) -2.0)",
    "output_parens": 10,
    "avg_bits_err_input": 36.94670660178132,
    "avg_bits_err_output": 36.94067075499244,
    "avg_bits_err_improve": 0.006035846788883248,
    "time": 21346.480712890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (if (!= (+ 1.0 (/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))) 0.0) (/ (- (/ 1.0 (* (+ (sqrt (+ 1.0 x)) (sqrt x)) (+ (sqrt (+ 1.0 x)) (sqrt x)))) (/ -1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))) (+ 1.0 (/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x))))) (/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 46,
    "avg_bits_err_input": 30.292353743518234,
    "avg_bits_err_output": 0.18108533906799862,
    "avg_bits_err_improve": 30.111268404450236,
    "time": 13523.036376953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (expm1 (log1p (sin x))))",
    "output_parens": 6,
    "avg_bits_err_input": 37.60663541607277,
    "avg_bits_err_output": 37.618537874973896,
    "avg_bits_err_improve": -0.011902458901126067,
    "time": 24259.669189453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 20.151960140066578,
    "avg_bits_err_output": 20.016473633493714,
    "avg_bits_err_improve": 0.13548650657286387,
    "time": 17491.9658203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 14.787589356586064,
    "avg_bits_err_output": 14.787589356586064,
    "avg_bits_err_improve": 0,
    "time": 11028.184814453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (if (!= (- (expm1 b) (exp a)) 0.0) (* (/ (+ (expm1 b) (exp a)) (- (expm1 b) (exp a))) (- (expm1 b) (exp a))) (+ (exp a) (expm1 b))))",
    "output_parens": 20,
    "avg_bits_err_input": 29.99235110276065,
    "avg_bits_err_output": 1.1442165877778279,
    "avg_bits_err_improve": 28.848134514982824,
    "time": 26401.360107421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (* (/ m v) (* (- 1.0 m) (- 1.0 m))) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07563928593921272,
    "avg_bits_err_output": 0.07700244375108173,
    "avg_bits_err_improve": -0.0013631578118690063,
    "time": 8121.798583984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (* 0.5 (- (* a (- (/ b -2.0) b)) (* a (* b 0.5)))))",
    "output_parens": 9,
    "avg_bits_err_input": 16.006908175956998,
    "avg_bits_err_output": 0.2963694663797996,
    "avg_bits_err_improve": 15.710538709577198,
    "time": 10714.80810546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ (* (/ angle PI) (/ (* PI angle) (/ (* (* PI angle) (/ angle (* PI angle))) PI))) 180.0))) 2.0) (pow (* b (expm1 (log1p (sin (/ (* PI angle) 180.0))))) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 20.320657935588994,
    "avg_bits_err_output": 20.33380444874908,
    "avg_bits_err_improve": -0.013146513160087636,
    "time": 44912.36962890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (- (pow a 2.0) (pow b 2.0)) (cos (* PI (/ angle 180.0)))) (* (sin (* PI (/ angle 180.0))) -2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 31.220150071696498,
    "avg_bits_err_output": 31.204801496623986,
    "avg_bits_err_improve": 0.01534857507251175,
    "time": 45169.827392578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (if (!= (* (* angle PI) -0.005555555555555556) 0.0) (* (* angle (* 0.005555555555555556 (* PI PI))) (- (exp (log1p (/ angle (* angle PI)))) 1.0)) (* angle (* PI 0.005555555555555556))))) 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 20.517435164799974,
    "avg_bits_err_output": 20.548871219634307,
    "avg_bits_err_improve": -0.03143605483433376,
    "time": 40447.71630859375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.17476184218813104,
    "avg_bits_err_output": 0.17458496250072117,
    "avg_bits_err_improve": 0.00017687968740986992,
    "time": 19271.604736328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.30518865959940467,
    "avg_bits_err_output": 0.299576620759291,
    "avg_bits_err_improve": 0.005612038840113687,
    "time": 16000.50537109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13169812031259015,
    "avg_bits_err_output": 0.13171936093777042,
    "avg_bits_err_improve": -2.1240625180274364e-05,
    "time": 17453.3837890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.171775623305866,
    "avg_bits_err_output": 17.166654644343684,
    "avg_bits_err_improve": 0.005120978962182221,
    "time": 33692.910888671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (* -4.0 (/ c (+ b (sqrt (fma b b (* a (* c -4.0)))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.83969044350404,
    "avg_bits_err_output": 0.16927857187842543,
    "avg_bits_err_improve": 52.67041187162562,
    "time": 27072.35400390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (* b b) 0.0) (/ (+ (* (* b b) (* b b)) (* (* c a) (* -4.0 (* b b)))) (* b b)) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 35,
    "avg_bits_err_input": 28.219180534707085,
    "avg_bits_err_output": 0.34807425001442355,
    "avg_bits_err_improve": 27.87110628469266,
    "time": 25422.628662109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.685511367535874,
    "avg_bits_err_output": 0.23270094063094934,
    "avg_bits_err_improve": 43.452810426904925,
    "time": 24693.776123046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 34.46212258103005,
    "avg_bits_err_output": 22.233903088892642,
    "avg_bits_err_improve": 12.22821949213741,
    "time": 19623.58056640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (fma (* (cos phi2) (cos (- lambda1 lambda2))) (cos phi1) (* (cos phi1) (cos phi1))) (cos phi1)) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.9203810234809323,
    "avg_bits_err_output": 0.9342805926216743,
    "avg_bits_err_improve": -0.013899569140741974,
    "time": 33596.78515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (log (exp (+ 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 28,
    "avg_bits_err_input": 29.064811471220583,
    "avg_bits_err_output": 29.037378015830484,
    "avg_bits_err_improve": 0.027433455390099226,
    "time": 20868.751708984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ 1.0 (exp (+ x x))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.213622374202764,
    "avg_bits_err_output": 0.6372618421881311,
    "avg_bits_err_improve": 57.57636053201463,
    "time": 17011.072021484375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (- (exp (- x)))) 2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 57.93285336758055,
    "avg_bits_err_output": 0.04729248125036058,
    "avg_bits_err_improve": 57.88556088633019,
    "time": 7502.382568359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(expm1 (log1p (/ 2.0 (+ (exp x) (exp (- x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.009912798070799487,
    "avg_bits_err_output": 0.011580279321160064,
    "avg_bits_err_improve": -0.001667481250360578,
    "time": 2770.793212890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.60125,
    "avg_bits_err_output": 31.60125,
    "avg_bits_err_improve": 0,
    "time": 4388.320068359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (if (!= (- 2.0 (log (/ (- x -1.0) (- 1.0 x)))) 0.0) (/ (+ (- 1.0 (* (log (/ (- -1.0 x) (+ x -1.0))) (+ -1.0 (log (/ (- -1.0 x) (+ x -1.0)))))) (+ -1.0 (log (/ (- -1.0 x) (+ x -1.0))))) (- 2.0 (log (/ (- x -1.0) (- 1.0 x))))) (log (/ (- x -1.0) (- 1.0 x)))))",
    "output_parens": 35,
    "avg_bits_err_input": 58.630511978163696,
    "avg_bits_err_output": 58.63839660423943,
    "avg_bits_err_improve": -0.007884626075735923,
    "time": 22893.82470703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.027448120312590144,
    "avg_bits_err_output": 0.027448120312590144,
    "avg_bits_err_improve": 0,
    "time": 3479.695556640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1272712406251803,
    "avg_bits_err_output": 0.1272712406251803,
    "avg_bits_err_improve": 0,
    "time": 16397.678955078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.123625,
    "avg_bits_err_output": 0.123625,
    "avg_bits_err_improve": 0,
    "time": 14089.623779296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.35118233120891,
    "avg_bits_err_output": 3.8184791240944125,
    "avg_bits_err_improve": 35.5327032071145,
    "time": 24030.37255859375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.805285926075854,
    "avg_bits_err_output": 14.805285926075854,
    "avg_bits_err_improve": 0,
    "time": 3286.003662109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.16210147755514773,
    "avg_bits_err_output": 0.15963504687753932,
    "avg_bits_err_improve": 0.0024664306776084055,
    "time": 36313.4443359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.82050532703905,
    "avg_bits_err_output": 0.1730191734413761,
    "avg_bits_err_improve": 52.647486153597676,
    "time": 30636.317626953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* c (* a -3.0)) 0.0) (+ (/ 1.0 (/ 1.0 (* c (* a -3.0)))) (/ (* b (* b (* c (* a -3.0)))) (* c (* a -3.0)))) (fma a (* c -3.0) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 40,
    "avg_bits_err_input": 28.36819594953342,
    "avg_bits_err_output": 0.35670189727808743,
    "avg_bits_err_improve": 28.011494052255333,
    "time": 22080.276611328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.77758319506283,
    "avg_bits_err_output": 0.23707838438203102,
    "avg_bits_err_improve": 43.5405048106808,
    "time": 22757.57373046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.51819949511365,
    "avg_bits_err_output": 34.51819949511365,
    "avg_bits_err_improve": 0,
    "time": 22722.468505859375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.447363567738538,
    "avg_bits_err_output": 13.447363567738538,
    "avg_bits_err_improve": 0,
    "time": 37478.190185546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (- (* (/ x (+ x 1.0)) (+ x -1.0)) (+ x -1.0)) (+ x -1.0)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 28.907142100152114,
    "avg_bits_err_output": 24.336874448192603,
    "avg_bits_err_improve": 4.570267651959512,
    "time": 18901.5947265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.04332237716990204,
    "avg_bits_err_improve": -0.031572377169902036,
    "time": 3925.361572265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ (fma (/ -1.0 (+ x -1.0)) (/ 1.0 (+ x -1.0)) (* (/ 1.0 (+ -1.0 x)) (/ 1.0 (+ -1.0 x)))) (/ 1.0 (+ x -1.0))) (- (/ -1.0 (+ x -1.0)) (/ -1.0 (+ 1.0 x))))",
    "output_parens": 19,
    "avg_bits_err_input": 14.187970758462768,
    "avg_bits_err_output": 14.255921798691055,
    "avg_bits_err_improve": -0.06795104022828724,
    "time": 24789.75537109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* 2.0 (* (+ C (- A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (* F (- (pow B 2.0) (* C (* A 4.0))))))) (- (* C (* A 4.0)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.76292766261422,
    "avg_bits_err_output": 52.46500072895459,
    "avg_bits_err_improve": 0.29792693365962464,
    "time": 38924.036865234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* (atan (* (- (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI))",
    "output_parens": 12,
    "avg_bits_err_input": 29.043603710209847,
    "avg_bits_err_output": 29.04233369237103,
    "avg_bits_err_improve": 0.0012700178388165284,
    "time": 26353.783203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (* F (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.606007567516684,
    "avg_bits_err_output": 52.33846814468344,
    "avg_bits_err_improve": 0.26753942283324506,
    "time": 36372.861083984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (/ (* (cbrt (/ g (+ a a))) (+ 1.0 (+ (cbrt (/ g (+ a a))) 1.0))) (+ (cbrt (/ g (+ a a))) 2.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.171756941918344,
    "avg_bits_err_output": 15.19024116887519,
    "avg_bits_err_improve": -0.018484226956845262,
    "time": 36519.68115234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- (- g) (sqrt (- (* g g) (* h h)))) 0.0) (/ (- (* h h)) (- g (- (sqrt (- (* g g) (* h h)))))) (- (sqrt (- (* g g) (* h h))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 35,
    "avg_bits_err_input": 35.67640701467552,
    "avg_bits_err_output": 35.44394531056005,
    "avg_bits_err_improve": 0.2324617041154653,
    "time": 17917.1494140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9912883468827537,
    "avg_bits_err_output": 0.9767736843762622,
    "avg_bits_err_improve": 0.014514662506491471,
    "time": 9692.71142578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log1p (expm1 (/ (exp a) (+ (exp a) (exp b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.6610943609377705,
    "avg_bits_err_output": 0.6630118421881311,
    "avg_bits_err_improve": -0.0019174812503606198,
    "time": 3012.007080078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (* a1 (/ a2 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-273) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ (/ a2 b1) b2) a1) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+280) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.294396107797018,
    "avg_bits_err_output": 2.806322406358069,
    "avg_bits_err_improve": 8.48807370143895,
    "time": 8035.155029296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40895293827427864,
    "avg_bits_err_output": 0.36,
    "avg_bits_err_improve": 0.04895293827427866,
    "time": 11968.568359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.2) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ -1.0 (- x (hypot 1.0 x))) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 50.0) (log1p (+ x (+ (hypot 1.0 x) -1.0))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ -1.0 (- x (hypot 1.0 x))) (+ x (hypot 1.0 x))))))",
    "output_parens": 36,
    "avg_bits_err_input": 53.22922637428044,
    "avg_bits_err_output": 0.495423319096098,
    "avg_bits_err_improve": 52.73380305518434,
    "time": 9636.642578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.679809565668414,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.679809565668414,
    "time": 2264.197265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.012375,
    "avg_bits_err_output": 0.012375,
    "avg_bits_err_improve": 0,
    "time": 4103.598388671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1144.8671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (+ (/ (/ 6.0 r) (+ r (+ r (+ r r)))) (/ 0.5 (* r r)))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 19,
    "avg_bits_err_input": 12.992930689537006,
    "avg_bits_err_output": 0.6615342768291506,
    "avg_bits_err_improve": 12.331396412707855,
    "time": 20218.699462890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (if (!= (* x1 (* x1 (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0))) 0.0) (/ (- (* x1 (* (* x1 (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)) (* x1 (* x1 (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0))))) (* (* x1 (* x1 0.0)) (* x1 (* x1 0.0)))) (* x1 (* x1 (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)))) (* x1 (* x1 (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)))) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 95,
    "avg_bits_err_input": 0.524059527574896,
    "avg_bits_err_output": 0.7233562433413719,
    "avg_bits_err_improve": -0.1992967157664759,
    "time": 67647.31127929688,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.045396829725135,
    "avg_bits_err_output": 1.4738351962201592,
    "avg_bits_err_improve": 16.571561633504977,
    "time": 9476.59912109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.28223776155338814,
    "avg_bits_err_output": 0.1903043234384916,
    "avg_bits_err_improve": 0.09193343811489654,
    "time": 6645.204833984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003125,
    "avg_bits_err_output": 0.003125,
    "avg_bits_err_improve": 0,
    "time": 2884.21533203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI (+ (/ -0.5 b) (/ 0.5 a))) (+ b a)) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.1091207942105,
    "avg_bits_err_output": 0.32662840039821944,
    "avg_bits_err_improve": 13.782492393812282,
    "time": 16037.7177734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (/ (exp (- (- x (* eps x)))) eps) 0.0) (+ (exp (- (* x eps) x)) (/ (+ (/ (- 1.0 (/ 1.0 eps)) (exp (+ x x))) (/ (exp (* (- x (* eps x)) -2.0)) eps)) (exp (- (* eps x) x)))) (+ (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* eps x)))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) 2.0)",
    "output_parens": 39,
    "avg_bits_err_input": 29.78789341309523,
    "avg_bits_err_output": 25.17931098039391,
    "avg_bits_err_improve": 4.6085824327013185,
    "time": 20836.466796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.0055,
    "avg_bits_err_output": 0.0055,
    "avg_bits_err_improve": 0,
    "time": 4475.619384765625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (+ 1.0 (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))))) (+ (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))) 4.0))",
    "output_parens": 26,
    "avg_bits_err_input": 0.008625,
    "avg_bits_err_output": 0.038625,
    "avg_bits_err_improve": -0.03,
    "time": 9491.421142578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (fma (* 2.0 (/ t (+ 1.0 t))) (* 2.0 (/ t (+ 1.0 t))) 1.0) (fma (* 2.0 (/ t (+ 1.0 t))) (* 2.0 (/ t (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.048625,
    "avg_bits_err_output": 0.0085,
    "avg_bits_err_improve": 0.040125,
    "time": 21148.014404296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3065.666015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7445.27587890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2720.146240234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.822912304428905,
    "avg_bits_err_output": 0.248875,
    "avg_bits_err_improve": 7.574037304428905,
    "time": 29838.27587890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.3143548054901855,
    "avg_bits_err_output": 7.3143548054901855,
    "avg_bits_err_improve": 0,
    "time": 15089.86572265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (expm1 (log1p (pow (+ x eps) 2.0))) (pow x 2.0))",
    "output_parens": 6,
    "avg_bits_err_input": 15.835406440542085,
    "avg_bits_err_output": 15.858399944982853,
    "avg_bits_err_improve": -0.022993504440767865,
    "time": 15873.03466796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (- (* (exp (* x (* x 10.0))) (+ (cos x) -1.0))) 0.0) (/ (* (cos x) (- (expm1 (log1p (exp (* x (* x 20.0))))) (* (cos x) (exp (* (* x x) 20.0))))) (- (* (if (!= (+ 1.0 (exp (log1p (exp (* x (* x 10.0)))))) 0.0) (/ (- (* (exp (log1p (exp (* x (* x 10.0))))) (exp (log1p (exp (* x (* x 10.0)))))) 1.0) (+ 1.0 (exp (log1p (exp (* x (* x 10.0))))))) (exp (* x (* x 10.0)))) (+ (cos x) -1.0)))) (* (exp (* x (* x 10.0))) (cos x)))",
    "output_parens": 62,
    "avg_bits_err_input": 3.5487659458009073,
    "avg_bits_err_output": 3.115797301676038,
    "avg_bits_err_improve": 0.43296864412486924,
    "time": 21719.320556640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -0.005) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 20.0) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 15.020530630351313,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 15.010655630351314,
    "time": 9802.07666015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.53511209548896,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.53511209548896,
    "time": 4253.765869140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.803248968089605,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 38.802373968089604,
    "time": 4445.343017578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.252375,
    "avg_bits_err_improve": 63.747625,
    "time": 20853.50732421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325147286218,
    "avg_bits_err_output": 0.40598853437914684,
    "avg_bits_err_improve": 61.43726293848303,
    "time": 7826.856689453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.472549351833045,
    "avg_bits_err_output": 34.472549351833045,
    "avg_bits_err_improve": 0,
    "time": 26062.1806640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 34.46212258103005,
    "avg_bits_err_output": 22.233903088892642,
    "avg_bits_err_improve": 12.22821949213741,
    "time": 22424.430419921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2418.575927734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.76818272521393,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 39.759057725213935,
    "time": 6684.198486328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- (* x x) (* y y)) (fma x x (* y y)))",
    "output_parens": 6,
    "avg_bits_err_input": 19.798566548015334,
    "avg_bits_err_output": 19.800843052744526,
    "avg_bits_err_improve": -0.0022765047291919416,
    "time": 9879.82177734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6701016891069065,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6701016891069065,
    "time": 12647.873779296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.036875,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.036,
    "time": 7602.153076171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019073120312590144,
    "avg_bits_err_output": 0.01125,
    "avg_bits_err_improve": 0.007823120312590144,
    "time": 3900.830322265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.015375,
    "avg_bits_err_output": 0.015375,
    "avg_bits_err_improve": 0,
    "time": 3490.353271484375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0,
    "time": 1684.109619140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ (+ c b) (+ e a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.38880225625468784,
    "avg_bits_err_output": 0.26325,
    "avg_bits_err_improve": 0.12555225625468786,
    "time": 5882.2822265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (- (/ (* (cos x) (log1p (expm1 (/ (cos x) (- -1.0 (cos x)))))) 2.0) (/ (- 2.0 (* (cos x) (cos x))) (+ (- -1.0 (cos x)) (- -1.0 (cos x))))) (- 1.0 (cos x)))",
    "output_parens": 26,
    "avg_bits_err_input": 29.488135785344156,
    "avg_bits_err_output": 29.496456522323232,
    "avg_bits_err_improve": -0.008320736979076315,
    "time": 16364.402099609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (sqrt (- (* x x) eps)))",
    "output_parens": 4,
    "avg_bits_err_input": 24.17771523680861,
    "avg_bits_err_output": 24.17771523680861,
    "avg_bits_err_improve": 0,
    "time": 12695.26708984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (- (tan x))) 0.0) (/ (/ (if (!= (* (sin x) (/ x (tan x))) 0.0) (/ (- (* (/ (sin x) (tan x)) (* x (* (sin x) (/ x (tan x))))) (* (* (sin x) (/ x (tan x))) (/ (* x x) (tan x)))) (* (sin x) (/ x (tan x)))) (/ (+ (* x (sin x)) (- (* x x))) (tan x))) (tan x)) (/ x (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 51,
    "avg_bits_err_input": 29.920272973259017,
    "avg_bits_err_output": 29.941554346459522,
    "avg_bits_err_improve": -0.02128137320050527,
    "time": 34023.195556640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007681401388979041,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.006556401388979041,
    "time": 2617.510009765625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (/ (* 100.0 (pow (+ (/ i n) 1.0) n)) (/ i n)) (if (!= (/ 100.0 (/ i n)) 0.0) (- (/ (/ 10000.0 (/ i n)) 100.0) 0.0) (/ 100.0 (/ i n)))))",
    "output_parens": 32,
    "avg_bits_err_input": 47.58844782478861,
    "avg_bits_err_output": 13.314346365329937,
    "avg_bits_err_improve": 34.27410145945867,
    "time": 26572.01806640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma d d (* c c)))) (* a (/ c (fma d d (* c c)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.675386994784667,
    "avg_bits_err_output": 23.64414960251351,
    "avg_bits_err_improve": 3.031237392271155,
    "time": 13331.689453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 5e+273) (- (/ (* b c) (fma c c (* d d))) (* a (/ d (+ (* d d) (* c c))))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d))))))",
    "output_parens": 28,
    "avg_bits_err_input": 26.20477483441839,
    "avg_bits_err_output": 23.807835127175043,
    "avg_bits_err_improve": 2.396939707243348,
    "time": 16082.149169921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.031375,
    "avg_bits_err_output": 0.018207016441828858,
    "avg_bits_err_improve": 0.013167983558171142,
    "time": 5001.699462890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ (+ ux ux) (* (+ ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))) (- ux)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.647832149166652,
    "avg_bits_err_output": 0.5485658752412895,
    "avg_bits_err_improve": 13.099266273925362,
    "time": 25076.190185546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(if (<= ux 2.999999892949745e-8) (* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) 0.0) (/ (+ (* (fma maxCos ux (- 1.0 ux)) (* (- 1.0 ux) (* ux (fma maxCos ux (- 1.0 ux))))) (+ (* (fma maxCos ux (- 1.0 ux)) (* (fma maxCos ux (- 1.0 ux)) (+ ux -1.0))) (* (fma maxCos (* ux (fma maxCos ux (- 1.0 ux))) -1.0) (* (fma maxCos ux (- 1.0 ux)) (+ ux -1.0))))) (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) (- 1.0 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux))))))) (* (cos (* (* uy 2.0) PI)) (sqrt (+ (if (!= (fma (- 1.0 ux) (fma ux maxCos (- 1.0 ux)) -1.0) 0.0) (/ 1.0 (/ -1.0 (- (* ux (* (- 1.0 ux) maxCos)) (- (- ux (* ux ux)) (- ux))))) (- 1.0 (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))) (- (* maxCos (* ux (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 82,
    "avg_bits_err_input": 13.676623533641141,
    "avg_bits_err_output": 5.048819046148146,
    "avg_bits_err_improve": 8.627804487492995,
    "time": 29156.53759765625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (+ (* (- 1.0 ux) (* ux (* maxCos zi))) (* (sin (* PI (* uy 2.0))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* (* maxCos maxCos) (* ux (- ux (* ux ux))))))) yi))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.33887085912373005,
    "avg_bits_err_output": 0.3269211042554877,
    "avg_bits_err_improve": 0.011949754868242346,
    "time": 45810.8916015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.2029600952810437,
    "avg_bits_err_output": 0.2029600952810437,
    "avg_bits_err_improve": 0,
    "time": 21107.348388671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (/ (+ (/ (/ (/ (* u1 u1) (- 1.0 u1)) 4.0) (- 1.0 u1)) (* (/ (/ u1 (- 1.0 u1)) 2.0) (/ (/ u1 (- 1.0 u1)) 2.0))) (/ (/ u1 (- 1.0 u1)) 2.0)) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 29,
    "avg_bits_err_input": 0.5324980702766468,
    "avg_bits_err_output": 0.5543096077606324,
    "avg_bits_err_improve": -0.021811537483985677,
    "time": 21839.7978515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(+ (* (sqrt (/ u1 (- 1.0 u1))) (+ (cos (* 6.28318530718 u2)) -1.0)) (sqrt (/ u1 (- 1.0 u1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.33138921929424436,
    "avg_bits_err_output": 0.34100521549842083,
    "avg_bits_err_improve": -0.009615996204176469,
    "time": 18158.40673828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.33393869296766343,
    "avg_bits_err_output": 0.33381369296766344,
    "avg_bits_err_improve": 0.00012499999999998623,
    "time": 45123.0615234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05662766810866245,
    "avg_bits_err_output": 0.0381802422170575,
    "avg_bits_err_improve": 0.018447425891604953,
    "time": 10483.4814453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (fma s (exp (/ (fabs x) (- s))) s)) (+ (exp (/ (fabs x) (- s))) 1.0))",
    "output_parens": 16,
    "avg_bits_err_input": 0.17231890009084724,
    "avg_bits_err_output": 0.1568194890952267,
    "avg_bits_err_improve": 0.01549941099562055,
    "time": 15671.697998046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6627989233643427,
    "avg_bits_err_output": 0.6598612367210324,
    "avg_bits_err_improve": 0.002937686643310289,
    "time": 21941.081787109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.15328271046875777,
    "avg_bits_err_output": 0.1537164668795955,
    "avg_bits_err_improve": -0.0004337564108377323,
    "time": 17758.8232421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.599083711564975,
    "avg_bits_err_output": 2.595183742036864,
    "avg_bits_err_improve": 0.0038999695281112245,
    "time": 27579.675537109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (* (/ 1.0 v) (/ cosTheta_i (sinh (/ 1.0 v)))) (/ 0.5 (* v (exp (* sinTheta_i (/ sinTheta_O v)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4628038478056186,
    "avg_bits_err_output": 0.3547662721681825,
    "avg_bits_err_improve": 0.1080375756374361,
    "time": 25817.203857421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp 0.6931) (exp (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (expm1 (log1p (log (/ 0.5 v)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.11301117382757771,
    "avg_bits_err_output": 0.11315549872696483,
    "avg_bits_err_improve": -0.00014432489938712156,
    "time": 28676.5283203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (+ (* alpha alpha) -1.0) PI) (log (* alpha alpha))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4757510659776972,
    "avg_bits_err_output": 0.49806616045005986,
    "avg_bits_err_improve": -0.022315094472362684,
    "time": 25799.549560546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (+ 1.0 (expm1 (* 3.0 (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))))))) s)",
    "output_parens": 8,
    "avg_bits_err_input": 1.328498093227955,
    "avg_bits_err_output": 1.2483875675854974,
    "avg_bits_err_improve": 0.08011052564245769,
    "time": 28435.22021484375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(/ (- (+ (* (* (log (/ 1.0 (fma u -4.0 1.0))) 2.0) s) s) s) 2.0)",
    "output_parens": 8,
    "avg_bits_err_input": 12.502287367634787,
    "avg_bits_err_output": 12.540369832400977,
    "avg_bits_err_improve": -0.03808246476618926,
    "time": 21513.517822265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (/ (/ (* (exp (/ (/ r s) -3.0)) 0.75) (* r 6.0)) s) PI))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12988456576125287,
    "avg_bits_err_output": 0.131147092500819,
    "avg_bits_err_improve": -0.0012625267395661166,
    "time": 29578.724365234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* n0_i (/ (sin (- normAngle (* normAngle u))) (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9211871839963994,
    "avg_bits_err_output": 0.7387928352481768,
    "avg_bits_err_improve": 0.18239434874822258,
    "time": 29111.859619140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (- c -1.0) (/ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6828617256700389,
    "avg_bits_err_output": 0.48560137895925237,
    "avg_bits_err_improve": 0.19726034671078652,
    "time": 22960.86181640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(if (!= (+ (sqrt (- (log (- 1.0 u1)))) (* (sqrt (- (log (- 1.0 u1)))) (+ 1.0 (sin (* 2.0 (* PI u2)))))) 0.0) (/ (* (+ (sqrt (- (log (- 1.0 u1)))) (* (sqrt (- (log (- 1.0 u1)))) (+ 1.0 (sin (* 2.0 (* PI u2)))))) (* (sqrt (- (log (- 1.0 u1)))) (sin (* 2.0 (* PI u2))))) (+ (sqrt (- (log (- 1.0 u1)))) (* (sqrt (- (log (- 1.0 u1)))) (+ 1.0 (sin (* 2.0 (* PI u2))))))) (* (sqrt (- (log (- 1.0 u1)))) (sin (* 2.0 (* PI u2)))))",
    "output_parens": 62,
    "avg_bits_err_input": 13.349306948014679,
    "avg_bits_err_output": 13.353397376502379,
    "avg_bits_err_improve": -0.004090428487700137,
    "time": 26399.686279296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(if (<= (- 1.0 u1) 1.0) (* (sqrt (- (log (- 1.0 u1)))) (- (exp (log1p (cos (* 2.0 (* PI u2))))) 1.0)) (* (sqrt (- (fma (exp (+ 1.0 (log1p (log (- 1.0 u1))))) (exp -1.0) -1.0))) (cos (* (* 2.0 PI) u2))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.394814497583212,
    "avg_bits_err_output": 13.402187749269673,
    "avg_bits_err_improve": -0.007373251686461302,
    "time": 21903.83154296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(if (!= (* (log (- 1.0 u0)) (* alpha alpha)) 0.0) (/ 1.0 (/ (/ 1.0 (- (* alpha alpha))) (log (- 1.0 u0)))) (* (log (- 1.0 u0)) (- (* alpha alpha))))",
    "output_parens": 18,
    "avg_bits_err_input": 14.280362091942722,
    "avg_bits_err_output": 14.286475499582338,
    "avg_bits_err_improve": -0.006113407639615431,
    "time": 19960.40087890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (/ -1.0 (+ (/ sin2phi (* alphay alphay)) (+ (/ sin2phi (* alphay alphay)) (/ (+ cos2phi cos2phi) (* alphax alphax))))) (+ (log (- 1.0 u0)) (log (- 1.0 u0))))",
    "output_parens": 16,
    "avg_bits_err_input": 12.65511148338157,
    "avg_bits_err_output": 12.68031335722829,
    "avg_bits_err_improve": -0.025201873846720346,
    "time": 19692.855712890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.493597986284563,
    "avg_bits_err_output": 12.627409128929308,
    "avg_bits_err_improve": 3.8661888573552545,
    "time": 23936.7392578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2138327222622215,
    "avg_bits_err_output": 0.15629024101186093,
    "avg_bits_err_improve": 0.05754248125036057,
    "time": 13554.869384765625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.859468280720668,
    "avg_bits_err_output": 10.381110851208508,
    "avg_bits_err_improve": 3.47835742951216,
    "time": 20685.736083984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f 4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) 4.0))) (exp (* PI (/ f 4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.25))",
    "output_parens": 31,
    "avg_bits_err_input": 61.53501356036294,
    "avg_bits_err_output": 1.9023127799766788,
    "avg_bits_err_improve": 59.632700780386266,
    "time": 40007.189697265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.87654474662172,
    "avg_bits_err_output": 33.39225726413966,
    "avg_bits_err_improve": 9.48428748248206,
    "time": 26477.051513671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin th) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin ky))",
    "output_parens": 10,
    "avg_bits_err_input": 3.8751220386912992,
    "avg_bits_err_output": 3.9230057125745676,
    "avg_bits_err_improve": -0.04788367388326842,
    "time": 26636.259765625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (pow (- (* (pow (* 2.0 (/ l Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0) -0.5) 0.5)))",
    "output_parens": 14,
    "avg_bits_err_input": 1.0164762837965524,
    "avg_bits_err_output": 1.0166012837965526,
    "avg_bits_err_improve": -0.00012500000000015277,
    "time": 12579.435546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.501658317288966,
    "avg_bits_err_output": 10.501658317288966,
    "avg_bits_err_improve": 0,
    "time": 10482.439697265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -1e-166) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (if (<= U 1.45e-98) (sqrt (* (* 2.0 n) (- (* U (- t (* 2.0 (* l (/ l Om))))) (* (pow (/ l Om) 2.0) (* n (* U (- U U*))))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))))",
    "output_parens": 47,
    "avg_bits_err_input": 34.563245528192134,
    "avg_bits_err_output": 29.780797463786907,
    "avg_bits_err_improve": 4.7824480644052265,
    "time": 34817.226318359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -5e-107) (/ (/ 2.0 (/ (tan k) l)) (* (pow (/ k t) 2.0) (* (pow t 3.0) (/ (sin k) l)))) (if (<= t 1.75e-113) (/ 2.0 (* (/ (tan k) l) (* (/ (sin k) l) (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t))))))) (/ 2.0 (* (/ (sin k) l) (* (pow (/ k t) 2.0) (* (tan k) (/ (pow t 3.0) l)))))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.57916968591727,
    "avg_bits_err_output": 34.13105945630636,
    "avg_bits_err_improve": 13.448110229610911,
    "time": 42314.600341796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ (/ 2.0 (+ 2.0 (pow (/ k t) 2.0))) (/ (sin k) l)) (* (pow t 3.0) (/ (tan k) l)))",
    "output_parens": 12,
    "avg_bits_err_input": 33.21556720405132,
    "avg_bits_err_output": 27.212368472486457,
    "avg_bits_err_improve": 6.003198731564861,
    "time": 21155.241943359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (* (cos th) (exp (* (log 2.0) -0.5))) (+ (* a1 a1) (* a2 a2)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5316951156468169,
    "avg_bits_err_output": 0.48527725782917797,
    "avg_bits_err_improve": 0.04641785781763896,
    "time": 19999.6552734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (pow (* 2.0 (* PI n)) (+ 0.5 (* k -0.5))) (sqrt k))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5182383812897454,
    "avg_bits_err_output": 0.469882832367866,
    "avg_bits_err_improve": 0.04835554892187943,
    "time": 20127.93603515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (if (!= (+ (exp (+ l l)) (exp (fma l -1.0 l))) 0.0) (/ (if (!= (+ (exp (+ (+ l l) (+ l l))) (exp (+ l (+ l (- (- l) l))))) 0.0) (/ (* (expm1 (+ l (+ l (+ l l)))) (/ (fma (exp (+ l (+ l l))) (+ (exp l) (exp l)) 2.0) 2.0)) (+ (exp (+ (+ l l) (+ l l))) (exp (+ l (+ l (- (- l) l)))))) (- (exp (+ (+ l l) (+ l l))) (exp (+ l (+ l (- (- l) l)))))) (+ (exp (+ l l)) (exp (fma l -1.0 l)))) (- (exp (+ l l)) (exp (fma l -1.0 l)))) (exp l))) (cos (/ K 2.0))) U)",
    "output_parens": 71,
    "avg_bits_err_input": 16.86010227587373,
    "avg_bits_err_output": 0.16079698623033017,
    "avg_bits_err_improve": 16.699305289643398,
    "time": 30471.2294921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 16,
    "avg_bits_err_input": 15.470931656540774,
    "avg_bits_err_output": 15.470931656540774,
    "avg_bits_err_improve": 0,
    "time": 23592.3291015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.14964624062518,
    "avg_bits_err_output": 18.14964624062518,
    "avg_bits_err_improve": 0,
    "time": 28339.48193359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (* (/ (pow (* D (/ (/ M 2.0) d)) 2.0) l) h))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.928901350771833,
    "avg_bits_err_output": 10.544919479653947,
    "avg_bits_err_improve": 3.3839818711178857,
    "time": 22042.912841796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 1e-316) (* (sqrt (/ (/ A V) l)) c0) (if (<= (/ A (* V l)) 5e+251) (* c0 (sqrt (if (!= (/ A (* l V)) 0.0) (/ 1.0 (/ 1.0 (/ A (* l V)))) (/ A (* l V))))) (* c0 (sqrt (* (/ A l) (/ 1.0 V))))))",
    "output_parens": 29,
    "avg_bits_err_input": 19.465906873322314,
    "avg_bits_err_output": 15.60825257395098,
    "avg_bits_err_improve": 3.857654299371335,
    "time": 15781.444091796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -2.3e+194) (/ (* (/ c0 w) (fma (* d c0) (/ (/ d (* D h)) (* D w)) (sqrt (* (fma (/ (/ d (* D h)) (* D w)) (* d c0) M) (- (* (* d c0) (/ (/ d (* D h)) (* D w))) M))))) 2.0) (if (<= w 2e-251) (* c0 (/ (+ (* d (/ (/ (* d c0) (* D (* D h))) w)) (sqrt (* (fma d (/ (/ (* d c0) (* D (* D h))) w) M) (fma d (/ (/ (* d c0) (* D (* D h))) w) (- M))))) (+ w w))) (/ (* (/ c0 w) (+ (* (/ (/ d D) (* D (* w h))) (* c0 d)) (sqrt (* (fma (/ (/ d D) (* D (* w h))) (* c0 d) M) (- (* (/ (/ d D) (* D (* w h))) (* c0 d)) M))))) 2.0)))",
    "output_parens": 78,
    "avg_bits_err_input": 59.429657685104644,
    "avg_bits_err_output": 54.892776441823294,
    "avg_bits_err_improve": 4.53688124328135,
    "time": 45778.65234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d -2e+18) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* h (/ (pow (* M (/ (/ D d) 2.0)) 2.0) (+ l l))))) (if (<= d 5e-16) (- (* (sqrt (/ d l)) (sqrt (/ d h))) (/ (* (pow (/ (* M D) (* 2.0 d)) 2.0) (* (* 0.5 (sqrt (/ d l))) (* h (sqrt (/ d h))))) l)) (* (sqrt (/ d h)) (* (sqrt (/ d l)) (- (* h (* (/ (pow (* D (/ M (+ d d))) 2.0) l) -0.5)) -1.0)))))",
    "output_parens": 51,
    "avg_bits_err_input": 26.602134880330688,
    "avg_bits_err_output": 24.236644926068312,
    "avg_bits_err_improve": 2.365489954262376,
    "time": 39336.603515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (+ 0.5 (log1p (expm1 (/ -0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.733236059195152,
    "avg_bits_err_output": 15.250590917309134,
    "avg_bits_err_improve": 0.48264514188601737,
    "time": 29536.76953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 4.0 (fma v v -1.0)) (- (* 3.0 PI))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.9845731203125901,
    "avg_bits_err_output": 0.013834962500721158,
    "avg_bits_err_improve": 0.970738157811869,
    "time": 5964.686767578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (+ 2.0 (* (* v v) -6.0)))) (* t (- 1.0 (* v v)))) (/ (* (/ 5.0 (* PI (* t (- 1.0 (* v v))))) (* v v)) (sqrt (+ 2.0 (* (* v v) -6.0)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.4586993025406222,
    "avg_bits_err_output": 0.11007128709925464,
    "avg_bits_err_improve": 0.34862801544136757,
    "time": 18606.151123046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (/ (sqrt 2.0) 4.0) (if (!= (sqrt (- (fma 3.0 (* v v) -1.0))) 0.0) (/ 1.0 (/ 1.0 (sqrt (- (fma 3.0 (* v v) -1.0))))) (sqrt (- (fma 3.0 (* v v) -1.0))))) (- 1.0 (* v v)))",
    "output_parens": 22,
    "avg_bits_err_input": 0.012146240625180289,
    "avg_bits_err_output": 0.012886842188131013,
    "avg_bits_err_improve": -0.0007406015629507247,
    "time": 14633.785888671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (if (!= (/ (* v (* v 10.0)) (+ (* v (+ v v)) -2.0)) 0.0) (if (!= 0.0 0.0) (/ (- (* (- (/ (/ (- (* v (* v 5.0)) (* v (* (* v -5.0) (* v (* v -5.0))))) (fma v v -1.0)) (* v (* v 5.0))) 0.0) 0.0) 0.0) 0.0) (- (/ (/ (- (* v (* v 5.0)) (* v (* (* v -5.0) (* v (* v -5.0))))) (fma v v -1.0)) (* v (* v 5.0))) 0.0)) (/ (fma v (* v -5.0) 1.0) (fma v v -1.0))))",
    "output_parens": 46,
    "avg_bits_err_input": 0.5546123587068369,
    "avg_bits_err_output": 0.5696042044099575,
    "avg_bits_err_improve": -0.014991845703120621,
    "time": 15726.0419921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (if (!= (* k 10.0) 0.0) (* (/ (+ k 10.0) 20.0) (* (* k 20.0) (/ k k))) (* k (+ k 10.0))) -1.0))",
    "output_parens": 15,
    "avg_bits_err_input": 1.8381491208740295,
    "avg_bits_err_output": 1.8374840833747508,
    "avg_bits_err_improve": 0.0006650374992787089,
    "time": 19360.88720703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ EDonor (+ Vef mu)) Ec) KbT)))) (/ NaChar (- (exp (/ (- (+ Ev (+ Vef EAccept)) mu) KbT)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.018230344508855918,
    "avg_bits_err_output": 0.018230344508855918,
    "avg_bits_err_improve": 0,
    "time": 8904.92333984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (if (!= (* b (* b 4.0)) 0.0) (+ (/ 1.0 (/ 1.0 (* b (* b 4.0)))) (+ (* (pow (fma b b (* a a)) 2.0) (* b (/ b (* b b)))) 0.0)) (fma b (* b 4.0) (pow (fma a a (* b b)) 2.0))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 0.1817998125036057,
    "avg_bits_err_output": 0.3329826260065306,
    "avg_bits_err_improve": -0.15118281350292492,
    "time": 21134.02685546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.18492463672813633,
    "avg_bits_err_output": 0.18492463672813633,
    "avg_bits_err_improve": 0,
    "time": 28581.7666015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* b (* b (+ 3.0 a)))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18631897236993444,
    "avg_bits_err_output": 0.18585185167066365,
    "avg_bits_err_improve": 0.00046712069927079547,
    "time": 22643.69384765625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (+ (/ x (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0)) (if (!= (/ (/ x 8.0) (sqrt (fma 4.0 (* p p) (* x x)))) 0.0) (+ (/ 1.0 (/ 1.0 (/ (/ x 8.0) (sqrt (fma 4.0 (* p p) (* x x)))))) (/ (/ (/ (fma x x (* (+ x x) (+ x x))) (sqrt (fma 4.0 (* p p) (* x x)))) 8.0) x)) (/ (+ x (+ x x)) (* 4.0 (sqrt (fma 4.0 (* p p) (* x x))))))))))",
    "output_parens": 47,
    "avg_bits_err_input": 13.374506953137011,
    "avg_bits_err_output": 13.561681407716554,
    "avg_bits_err_improve": -0.18717445457954263,
    "time": 18417.90478515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.79512143001579,
    "avg_bits_err_output": 0.047875,
    "avg_bits_err_improve": 40.74724643001579,
    "time": 7026.917236328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (- (tan x) x)) (if (!= (/ x (- (tan x) x)) 0.0) (/ 1.0 (/ 1.0 (/ x (- (tan x) x)))) (/ x (- (tan x) x))))",
    "output_parens": 18,
    "avg_bits_err_input": 31.17525936815557,
    "avg_bits_err_output": 31.15685356434839,
    "avg_bits_err_improve": 0.018405803807180376,
    "time": 23551.64697265625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 34.22785241872434,
    "avg_bits_err_output": 34.22785241872434,
    "avg_bits_err_improve": 0,
    "time": 16966.078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.23761159853698,
    "avg_bits_err_output": 22.588812920332597,
    "avg_bits_err_improve": 11.648798678204383,
    "time": 18006.760986328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (log1p (expm1 (- 1.0 (cos x)))) x) x)",
    "output_parens": 6,
    "avg_bits_err_input": 31.549309820278808,
    "avg_bits_err_output": 30.78004000326493,
    "avg_bits_err_improve": 0.7692698170138783,
    "time": 17481.612060546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (<= x 1.0) (- (expm1 (/ (log x) n))) (- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.9093314416616,
    "avg_bits_err_output": 12.075743870243155,
    "avg_bits_err_improve": 20.833587571418445,
    "time": 31030.55712890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (- (log1p N) (- (log N))) 0.0) (log (+ 1.0 (expm1 (/ (- (* (log1p N) (log1p N)) (* (log N) (log N))) (+ (log N) (log1p N)))))) (- (log1p N) (log N)))",
    "output_parens": 23,
    "avg_bits_err_input": 29.543885853594208,
    "avg_bits_err_output": 29.583849977459664,
    "avg_bits_err_improve": -0.039964123865456,
    "time": 12176.66064453125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (- (/ (+ (/ -1.0 x) (/ (/ x x) (+ 1.0 x))) 2.0) (/ (+ 1.0 (/ -1.0 (/ (+ 1.0 x) x))) (+ x x))) 0.0)",
    "output_parens": 14,
    "avg_bits_err_input": 14.112249711393671,
    "avg_bits_err_output": 14.103954630433233,
    "avg_bits_err_improve": 0.008295080960438739,
    "time": 20252.456787109375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (!= (cos x) 0.0) (/ (if (!= (* (cos x) (cos x)) 0.0) (/ (fma (log (+ 1.0 (expm1 (* (cos x) (cos x))))) (* (cos (+ x eps)) (cos x)) (* (* (cos x) (* (cos x) (cos x))) (- (cos x)))) (* (cos x) (cos x))) (* (cos x) (- (cos (+ x eps)) (cos x)))) (cos x)) (- (cos (+ x eps)) (cos x)))",
    "output_parens": 43,
    "avg_bits_err_input": 39.98961918396757,
    "avg_bits_err_output": 40.03398090014534,
    "avg_bits_err_improve": -0.044361716177768074,
    "time": 29573.29443359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(- (- (cbrt (- x -1.0)) (+ 1.0 (cbrt x))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.10594522353427,
    "avg_bits_err_output": 29.80219313237363,
    "avg_bits_err_improve": 0.3037520911606393,
    "time": 12614.44921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (/ (- 1.0 (cos x)) (* (sin x) 2.0)) 0.0) (/ (+ (* (/ (- 1.0 (cos x)) (* (sin x) 2.0)) (/ (- 1.0 (cos x)) (* (sin x) 2.0))) (* (/ (- 1.0 (cos x)) (* (sin x) 2.0)) (/ (log (+ 1.0 (expm1 (- 1.0 (cos x))))) (* (sin x) 2.0)))) (/ (- 1.0 (cos x)) (* (sin x) 2.0))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 43,
    "avg_bits_err_input": 30.031646316473925,
    "avg_bits_err_output": 30.091324326447275,
    "avg_bits_err_improve": -0.059678009973350044,
    "time": 27372.215087890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* c (* a 4.0))))) (* a 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 34.14834767390882,
    "avg_bits_err_output": 34.1542325955339,
    "avg_bits_err_improve": -0.005884921625074924,
    "time": 28067.50390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a -4.0)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.83041998751424,
    "avg_bits_err_output": 21.68923491142793,
    "avg_bits_err_improve": 12.141185076086309,
    "time": 22922.43359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (+ (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ -1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.348962375838774,
    "avg_bits_err_output": 0.8399240838690292,
    "avg_bits_err_improve": 60.509038291969745,
    "time": 19682.37841796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))) 0.0) (if (!= (* (fma n (- (log1p n) (log n)) (log1p n)) (/ (fma n (- (log1p n) (log n)) (log1p n)) (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 0.0) (- (/ 1.0 (/ (- (exp (log1p (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 1.0) (/ (fma n (- (log1p n) (log n)) (log1p n)) (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) 0.0) (+ (fma n (- (log1p n) (log n)) (log1p n)) -1.0))",
    "output_parens": 58,
    "avg_bits_err_input": 63.0047477116072,
    "avg_bits_err_output": 44.21025682270182,
    "avg_bits_err_improve": 18.79449088890538,
    "time": 15823.149658203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (exp (log1p (log (/ (- 1.0 eps) (+ 1.0 eps))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 58.64668196380714,
    "avg_bits_err_output": 58.6828873596938,
    "avg_bits_err_improve": -0.03620539588666105,
    "time": 16230.13671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(log (+ 1.0 (+ (+ 1.0 (exp (+ (/ 1.0 x) (/ -1.0 (tan x))))) -2.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 59.82052690918915,
    "avg_bits_err_output": 59.82046308024198,
    "avg_bits_err_improve": 6.38289471694975e-05,
    "time": 29591.077392578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ (expm1 (* eps (+ a b))) (expm1 (* eps b))) (if (!= (/ eps (expm1 (* eps a))) 0.0) (/ 1.0 (/ 1.0 (/ eps (expm1 (* eps a))))) (/ eps (expm1 (* eps a)))))",
    "output_parens": 20,
    "avg_bits_err_input": 60.14925138088946,
    "avg_bits_err_output": 29.837767837184835,
    "avg_bits_err_improve": 30.311483543704625,
    "time": 26382.079833984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.10146429990704,
    "avg_bits_err_output": 0.4136981203125902,
    "avg_bits_err_improve": 40.687766179594455,
    "time": 4254.521484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.63475144687459,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 58.63362644687459,
    "time": 4139.20556640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.611401246432838,
    "avg_bits_err_output": 0.019765210880563468,
    "avg_bits_err_improve": 29.591636035552273,
    "time": 6114.713623046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (if (!= (- 1.0 (expm1 (- x))) 0.0) (if (!= (* (+ (expm1 (- x)) -1.0) (/ (exp x) (- 2.0 (exp (- x))))) 0.0) (/ (fma (if (!= (* (+ (expm1 (- x)) -1.0) (/ (exp x) (- 2.0 (exp (- x))))) 0.0) (- (* (/ (+ (expm1 (- x)) -1.0) (- 2.0 (exp (- x)))) (/ (* (+ (expm1 (- x)) -1.0) (exp (+ x x))) (* (+ (expm1 (- x)) -1.0) (exp x)))) (/ 0.0 (- 2.0 (exp (- x))))) (* (+ (expm1 (- x)) -1.0) (/ (exp x) (- 2.0 (exp (- x)))))) (* (+ (expm1 (- x)) -1.0) (/ (exp x) (- 2.0 (exp (- x))))) (- (/ (* (+ (expm1 (- x)) -1.0) (exp x)) 1.0) (/ 0.0 (- 2.0 (exp (- x)))))) (* (+ (expm1 (- x)) -1.0) (/ (exp x) (- 2.0 (exp (- x)))))) (fma (+ (expm1 (- x)) -1.0) (/ (exp x) (- 2.0 (exp (- x)))) (/ 2.0 (/ 2.0 (- 2.0 (exp (- x))))))) (- 1.0 (+ (exp x) (expm1 (- x))))))",
    "output_parens": 112,
    "avg_bits_err_input": 29.516741666768688,
    "avg_bits_err_output": 29.28666049061566,
    "avg_bits_err_improve": 0.23008117615302837,
    "time": 25271.564208984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (* (/ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 4.0 (+ 1.0 x))) (/ 4.0 (+ 1.0 x))) (/ 1.0 (- x 1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 9.27282688135644,
    "avg_bits_err_output": 9.273345504892568,
    "avg_bits_err_improve": -0.000518623536127194,
    "time": 28354.735107421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (if (!= (/ (sin x) (+ (cos x) (cos x))) 0.0) (if (!= 0.0 0.0) (/ (- 0.0 (/ 0.0 (/ 2.0 (/ (sin x) (cos x))))) 0.0) (- (/ 1.0 (/ 2.0 (/ (sin x) (cos x)))) (/ (tan (+ x eps)) 2.0))) (- (/ (sin x) (+ (cos x) (cos x))) (/ (sin (+ x eps)) (* (cos (+ x eps)) 2.0)))) -2.0)",
    "output_parens": 38,
    "avg_bits_err_input": 36.824550139501774,
    "avg_bits_err_output": 36.84146715145237,
    "avg_bits_err_improve": -0.01691701195059636,
    "time": 24888.638671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.3118285325049,
    "avg_bits_err_output": 0.16534680468885218,
    "avg_bits_err_improve": 30.14648172781605,
    "time": 15576.7080078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (+ (sin (+ x eps)) 1.0) 0.0) (/ (+ (fma (- -1.0 (expm1 (log1p (sin (+ x eps))))) (+ 1.0 (sin x)) (* (+ (sin (+ x eps)) 1.0) (+ 1.0 (sin x)))) (* (+ (sin (+ x eps)) 1.0) (- (sin (+ x eps)) (sin x)))) (+ (sin (+ x eps)) 1.0)) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 36,
    "avg_bits_err_input": 37.076640996947305,
    "avg_bits_err_output": 37.19756068133284,
    "avg_bits_err_improve": -0.1209196843855338,
    "time": 22215.08251953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (+ (/ 1.0 (sqrt (+ 1.0 x))) (/ -1.0 (sqrt x))) (* (sqrt x) (/ -1.0 (sqrt x))))",
    "output_parens": 11,
    "avg_bits_err_input": 20.160534528008185,
    "avg_bits_err_output": 20.176678680086212,
    "avg_bits_err_improve": -0.01614415207802722,
    "time": 15821.484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 14.638241763027859,
    "avg_bits_err_output": 14.638241763027859,
    "avg_bits_err_improve": 0,
    "time": 5626.773681640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.50977604596259,
    "avg_bits_err_output": 1.410675545594294,
    "avg_bits_err_improve": 28.099100500368294,
    "time": 26244.135498046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (- m (* m m)) v) (+ (- 1.0 m) (* (/ m v) (- m (* m m)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.07411804531403245,
    "avg_bits_err_output": 0.07775391956416637,
    "avg_bits_err_improve": -0.0036358742501339247,
    "time": 19483.03466796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b (/ a -4.0)) (+ (* a b) (* a (+ (+ b b) b))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.090487036499425,
    "avg_bits_err_output": 0.2917409781302283,
    "avg_bits_err_improve": 15.798746058369197,
    "time": 13222.20703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ (+ angle (+ angle (+ (+ angle (+ angle angle)) (+ angle (+ angle angle))))) 1440.0)))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.331947925664565,
    "avg_bits_err_output": 20.365820578468732,
    "avg_bits_err_improve": -0.03387265280416685,
    "time": 34889.0751953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (expm1 (log1p (sin (* PI (/ angle 180.0)))))) (cos (* PI (/ angle 180.0))))",
    "output_parens": 14,
    "avg_bits_err_input": 31.72152342700583,
    "avg_bits_err_output": 31.721596638578443,
    "avg_bits_err_improve": -7.321157261230837e-05,
    "time": 41741.422607421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (if (!= (* PI (* angle -0.005555555555555556)) 0.0) (/ 1.0 (/ 1.0 (* 0.005555555555555556 (* angle PI)))) (* 0.005555555555555556 (* angle PI))))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.567626989963102,
    "avg_bits_err_output": 20.586090376099072,
    "avg_bits_err_improve": -0.018463386135969984,
    "time": 41790.987548828125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.18167932343849155,
    "avg_bits_err_output": 0.1760498429614923,
    "avg_bits_err_improve": 0.005629480476999266,
    "time": 13161.396240234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3253321527932952,
    "avg_bits_err_output": 0.3142967054206411,
    "avg_bits_err_improve": 0.011035447372654106,
    "time": 18929.670166015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (- (sin v)) (/ e (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13404248125036058,
    "avg_bits_err_output": 0.13496936093777043,
    "avg_bits_err_improve": -0.0009268796874098428,
    "time": 18309.24365234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos (- lambda1 lambda2))) (cos phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.773023324629563,
    "avg_bits_err_output": 16.766391381084418,
    "avg_bits_err_improve": 0.006631943545144736,
    "time": 35743.283203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (* -4.0 (/ c (+ b (sqrt (fma b b (* a (* c -4.0)))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.41577278449764,
    "avg_bits_err_output": 0.17526672969029447,
    "avg_bits_err_improve": 52.24050605480735,
    "time": 27115.079833984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.773278837012505,
    "avg_bits_err_output": 0.3390812047003908,
    "avg_bits_err_improve": 28.434197632312113,
    "time": 26059.478759765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.91716270595241,
    "avg_bits_err_output": 0.23192030156871965,
    "avg_bits_err_improve": 43.685242404383686,
    "time": 25022.879638671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 34.1542325955339,
    "avg_bits_err_output": 22.049699065015847,
    "avg_bits_err_improve": 12.10453353051805,
    "time": 20520.265380859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (* (cos phi1) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1))) (cos phi1)) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.9275932301321357,
    "avg_bits_err_output": 0.931289676168201,
    "avg_bits_err_improve": -0.0036964460360653373,
    "time": 32258.328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(- (log (exp (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 29.428468357254232,
    "avg_bits_err_output": 29.429804032978925,
    "avg_bits_err_improve": -0.001335675724693175,
    "time": 20498.8701171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= x -20.0) (- (/ (exp x) (+ (exp x) (exp (- x)))) (/ 1.0 (+ 1.0 (exp (+ x x))))) (fma (exp x) (* (/ (/ (expm1 (* x -2.0)) (+ (exp (- x)) (exp x))) (exp x)) (- (exp x))) 0.0))",
    "output_parens": 27,
    "avg_bits_err_input": 58.248533931562456,
    "avg_bits_err_output": 0.6790537948496463,
    "avg_bits_err_improve": 57.56948013671281,
    "time": 22992.129150390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.18737650829796,
    "avg_bits_err_output": 0.04075,
    "avg_bits_err_improve": 58.146626508297956,
    "time": 10341.978271484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(log (expm1 (log1p (exp (/ 2.0 (+ (exp x) (exp (- x))))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.009026789890100096,
    "avg_bits_err_output": 0.16410507536459276,
    "avg_bits_err_improve": -0.15507828547449268,
    "time": 5329.930419921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.761290241011864,
    "avg_bits_err_output": 32.761290241011864,
    "avg_bits_err_improve": 0,
    "time": 3712.631591796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (exp (log1p (log (/ (- -1.0 x) (+ x -1.0))))) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 58.62976193228778,
    "avg_bits_err_output": 58.683558324860314,
    "avg_bits_err_improve": -0.05379639257253643,
    "time": 23014.570556640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05073836132445107,
    "avg_bits_err_output": 0.05127124062518029,
    "avg_bits_err_improve": -0.0005328793007292193,
    "time": 2681.96923828125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12277124062518029,
    "avg_bits_err_output": 0.12244812031259014,
    "avg_bits_err_improve": 0.0003231203125901444,
    "time": 22929.435302734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12832312031259013,
    "avg_bits_err_output": 0.12832312031259013,
    "avg_bits_err_improve": 0,
    "time": 12748.707763671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (cos (/ (+ phi1 phi2) 2.0)) (- lambda1 lambda2) (fma (- lambda2) (cos (/ (+ phi1 phi2) 2.0)) (* (cos (/ (+ phi1 phi2) 2.0)) lambda2))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.425490359356836,
    "avg_bits_err_output": 3.70792237477895,
    "avg_bits_err_improve": 35.71756798457788,
    "time": 26177.571044921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.467379223809136,
    "avg_bits_err_output": 0.011271240625180288,
    "avg_bits_err_improve": 14.456107983183955,
    "time": 8290.632568359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (cos theta) (* (cos phi1) (sin delta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.15031926026065223,
    "avg_bits_err_output": 0.14858880935253632,
    "avg_bits_err_improve": 0.0017304509081159103,
    "time": 35654.093505859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.432124763581655,
    "avg_bits_err_output": 0.17988477500432684,
    "avg_bits_err_improve": 52.25223998857733,
    "time": 21452.611083984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.98665986906457,
    "avg_bits_err_output": 0.3458896428152877,
    "avg_bits_err_improve": 28.640770226249284,
    "time": 23729.2939453125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.988148458846915,
    "avg_bits_err_output": 0.2422058281331127,
    "avg_bits_err_improve": 43.7459426307138,
    "time": 31746.83740234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -3.0) (* b b)))) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma a (* c -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 34.200232836986736,
    "avg_bits_err_output": 22.065766437838786,
    "avg_bits_err_improve": 12.13446639914795,
    "time": 21135.56640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (log (exp (cos (- lambda1 lambda2)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.309146663637202,
    "avg_bits_err_output": 13.319010284931155,
    "avg_bits_err_improve": -0.009863621293952463,
    "time": 37013.250244140625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.22226749814124,
    "avg_bits_err_output": 0.5290098950059389,
    "avg_bits_err_improve": 28.6932576031353,
    "time": 21637.60791015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.013125,
    "avg_bits_err_output": 0.013125,
    "avg_bits_err_improve": 0,
    "time": 5521.224609375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (log (+ 1.0 (expm1 (- 1.0 (/ x (+ x -1.0)))))) (- (/ 1.0 (+ x -1.0)))) (+ 1.0 x))",
    "output_parens": 12,
    "avg_bits_err_input": 14.034993816559629,
    "avg_bits_err_output": 12.216099905080654,
    "avg_bits_err_improve": 1.818893911478975,
    "time": 17590.169921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 4e+256) (/ (sqrt (* (if (!= A 0.0) (/ (fma A (- (if (!= (- (exp (log1p (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) 1.0) 0.0) (/ 2.0 (/ 2.0 (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) C) (* A (- A))) A) (- (if (!= (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) 0.0) (/ 2.0 (/ 2.0 (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) (+ A C))) (* (* (- (pow B 2.0) (* A (* 4.0 C))) F) -2.0))) (- (- (pow B 2.0) (* A (* 4.0 C))))) 0.0)",
    "output_parens": 87,
    "avg_bits_err_input": 51.961170785148546,
    "avg_bits_err_output": 50.89778643749252,
    "avg_bits_err_improve": 1.0633843476560259,
    "time": 43495.603515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -7e+50) 0.0 (* 180.0 (/ (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) PI)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.392346234756975,
    "avg_bits_err_output": 28.489658661579167,
    "avg_bits_err_improve": 0.9026875731778077,
    "time": 33554.36962890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (fma 2.0 (pow B 2.0) (* A (* C -8.0))) (* (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) F))) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 52.00291471876566,
    "avg_bits_err_output": 51.77768834216806,
    "avg_bits_err_improve": 0.2252263765975968,
    "time": 34322.68017578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.184989911331883,
    "avg_bits_err_output": 15.184989911331883,
    "avg_bits_err_improve": 0,
    "time": 28062.056396484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 0.5 a) (if (!= (- (sqrt (fma h (- h) (* g g))) g) 0.0) (* h (/ h (- (sqrt (fma h (- h) (* g g))) g))) (- (- g) (sqrt (fma h (- h) (* g g))))))))",
    "output_parens": 33,
    "avg_bits_err_input": 36.10907955477037,
    "avg_bits_err_output": 35.89587934888741,
    "avg_bits_err_improve": 0.21320020588295563,
    "time": 17787.5341796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9885077078205238,
    "avg_bits_err_output": 0.9734718046888522,
    "avg_bits_err_improve": 0.01503590313167158,
    "time": 12576.526611328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log1p (expm1 (/ (exp a) (+ (exp a) (exp b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.6606981203125901,
    "avg_bits_err_output": 0.6648161656266227,
    "avg_bits_err_improve": -0.004118045314032592,
    "time": 4283.640380859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -4e+276) (/ (* a2 (/ a1 b1)) b2) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-321) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 4e-307) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+246) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.550700597999379,
    "avg_bits_err_output": 2.9675429944142957,
    "avg_bits_err_improve": 8.583157603585082,
    "time": 11502.31591796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5152431164648773,
    "avg_bits_err_output": 0.43469812031259014,
    "avg_bits_err_improve": 0.08054499615228716,
    "time": 9818.442138671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x 5e-13) (log1p (if (!= (+ (hypot 1.0 x) -1.0) 0.0) (+ (/ (* (+ (hypot 1.0 x) -1.0) (+ x (hypot 1.0 x))) (+ (hypot 1.0 x) (+ (hypot 1.0 x) -2.0))) (+ (/ (- 1.0 (hypot 1.0 x)) (expm1 (log1p (+ (hypot 1.0 x) (+ (hypot 1.0 x) -2.0))))) (/ (+ (+ x (+ (hypot 1.0 x) -1.0)) (/ 0.0 (+ (hypot 1.0 x) -1.0))) 2.0))) (+ x (+ (hypot 1.0 x) -1.0)))) (log1p (- (hypot 1.0 x) (- 1.0 x))))",
    "output_parens": 43,
    "avg_bits_err_input": 53.11708979415488,
    "avg_bits_err_output": 13.527543065254973,
    "avg_bits_err_improve": 39.589546728899904,
    "time": 17489.57958984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.6611866482956055,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.6611866482956055,
    "time": 1807.91015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 2.0 (* x 2.0)) (+ x (+ x 2.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.0155,
    "avg_bits_err_output": 0.018625,
    "avg_bits_err_improve": -0.0031249999999999993,
    "time": 3619.95556640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1327.71630859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.560425494193913,
    "avg_bits_err_output": 0.5856883674448178,
    "avg_bits_err_improve": 11.974737126749096,
    "time": 26480.06884765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* (* x1 x1) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)))))) (+ x1 x1)))",
    "output_parens": 47,
    "avg_bits_err_input": 0.5183431564370132,
    "avg_bits_err_output": 0.29379349795169785,
    "avg_bits_err_improve": 0.22454965848531538,
    "time": 79490.8232421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.08953280509871,
    "avg_bits_err_output": 1.3328160756775498,
    "avg_bits_err_improve": 16.75671672942116,
    "time": 10467.7119140625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* (* x x) (* 0.12900613773279798 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2636062031259014,
    "avg_bits_err_output": 0.18745056406367183,
    "avg_bits_err_improve": 0.07615563906222955,
    "time": 7247.646240234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0026981203125901448,
    "avg_bits_err_output": 0.0026981203125901448,
    "avg_bits_err_improve": 0,
    "time": 2456.49755859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (- (/ (* PI -0.5) (* b (- b a))) (/ (* PI -0.5) (* a (- b a)))) (+ b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.646059466340832,
    "avg_bits_err_output": 0.24538721875540845,
    "avg_bits_err_improve": 14.400672247585424,
    "time": 19381.890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (exp (- (* x eps) x)) (+ (/ (exp (- (- x (* eps x)))) eps) (- (exp (- (fma x eps x))) (/ (exp (- (fma x eps x))) eps)))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.306274922815316,
    "avg_bits_err_output": 24.628259026876226,
    "avg_bits_err_improve": 4.67801589593909,
    "time": 21559.48486328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.018875,
    "avg_bits_err_output": 0.018875,
    "avg_bits_err_improve": 0,
    "time": 3918.397705078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.023,
    "avg_bits_err_output": 0.023,
    "avg_bits_err_improve": 0,
    "time": 7162.44482421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (fma (* 2.0 (/ t (+ 1.0 t))) (* 2.0 (/ t (+ 1.0 t))) 1.0) (fma (* 2.0 (/ t (+ 1.0 t))) (* 2.0 (/ t (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.04675,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 0.03975,
    "time": 10701.410400390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3166.038818359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7153.50146484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2543.508544921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8139700812676445,
    "avg_bits_err_output": 0.24525,
    "avg_bits_err_improve": 7.568720081267644,
    "time": 35535.076416015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(/ (- (if (!= (+ 1.0 (pow x 5.0)) 0.0) (/ (* (+ 1.0 (pow x 5.0)) (pow x 5.0)) (+ 1.0 (pow x 5.0))) (pow x 5.0)) (pow (+ x eps) 5.0)) -1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 7.418636990969528,
    "avg_bits_err_output": 7.422344049041347,
    "avg_bits_err_improve": -0.003707058071818814,
    "time": 15948.34716796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 15.505556957623671,
    "avg_bits_err_output": 15.505556957623671,
    "avg_bits_err_improve": 0,
    "time": 14938.44873046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (if (!= (* (+ (cos x) 1.0) (exp (* 10.0 (* x x)))) 0.0) (/ 1.0 (/ 1.0 (/ (+ (/ (* (* (+ (cos x) 1.0) (exp (* (* x x) 20.0))) (+ (cos x) 1.0)) (exp (* 10.0 (* x x)))) (/ (* (* (+ (cos x) 1.0) (exp (* (* x x) 20.0))) (+ (cos x) 1.0)) (exp (* 10.0 (* x x))))) (+ (cos x) (+ 1.0 (+ (cos x) 1.0)))))) (exp (fma x (* x 10.0) (log1p (cos x))))) (exp (* 10.0 (* x x))))",
    "output_parens": 52,
    "avg_bits_err_input": 3.5236648542646294,
    "avg_bits_err_output": 3.528086164217067,
    "avg_bits_err_improve": -0.004421309952437724,
    "time": 17694.676025390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 15.070886192041119,
    "avg_bits_err_output": 15.070886192041119,
    "avg_bits_err_improve": 0,
    "time": 13662.765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.51272108009075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.51272108009075,
    "time": 3745.263916015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.840564387060496,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 38.840064387060494,
    "time": 3770.27587890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (/ (* -1.7e+308 (- 1.7e+308 (* 1.7e+308 t))) -1.7e+308) -1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.29821936093777035,
    "avg_bits_err_improve": 63.70178063906223,
    "time": 19150.4296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84324597984583,
    "avg_bits_err_output": 0.384,
    "avg_bits_err_improve": 61.45924597984583,
    "time": 7976.590576171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a -4.0)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.83041998751424,
    "avg_bits_err_output": 21.68923491142793,
    "avg_bits_err_improve": 12.141185076086309,
    "time": 24046.41552734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 34.1542325955339,
    "avg_bits_err_output": 22.049699065015847,
    "avg_bits_err_improve": 12.10453353051805,
    "time": 23613.471923828125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2658.64111328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.153440145217154,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 40.14206514521715,
    "time": 4405.801513671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (fma x x (* y y)))",
    "output_parens": 6,
    "avg_bits_err_input": 20.24408881976937,
    "avg_bits_err_output": 20.24333881976937,
    "avg_bits_err_improve": 0.0007500000000000284,
    "time": 5651.979248046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ c b) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6807592107043496,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6807592107043496,
    "time": 6590.558837890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ (+ b c) d))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03975,
    "avg_bits_err_output": 0.03975,
    "avg_bits_err_improve": 0,
    "time": 3671.853271484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019896240625180292,
    "avg_bits_err_output": 0.010625,
    "avg_bits_err_improve": 0.009271240625180291,
    "time": 2666.067626953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0135,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.013125,
    "time": 3185.35107421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 2040.5771484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ c a) (+ b d)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40911597813022865,
    "avg_bits_err_output": 0.22975,
    "avg_bits_err_improve": 0.17936597813022864,
    "time": 6138.578369140625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(log (+ 1.0 (expm1 (- 1.0 (cos x)))))",
    "output_parens": 5,
    "avg_bits_err_input": 29.737439948755863,
    "avg_bits_err_output": 29.763552148914382,
    "avg_bits_err_improve": -0.02611220015851856,
    "time": 7889.195068359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (- x (- (sqrt (- (* x x) eps)))) 0.0) (/ (- (* x x) (* (sqrt (- (* x x) eps)) (sqrt (- (* x x) eps)))) (- x (- (sqrt (- (* x x) eps))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 26,
    "avg_bits_err_input": 24.378553841773787,
    "avg_bits_err_output": 24.429848752057286,
    "avg_bits_err_improve": -0.05129491028349875,
    "time": 11224.52587890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (- (tan x))) 0.0) (/ (fma (/ (- (sin x) x) (tan x)) (/ (sin x) (tan x)) (/ (fma (/ (- x) (- (tan x))) (sin x) (* (/ x (tan x)) (- (sin x)))) (- (tan x)))) (/ (sin x) (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 37,
    "avg_bits_err_input": 30.13032666123096,
    "avg_bits_err_output": 30.135824903589835,
    "avg_bits_err_improve": -0.005498242358875416,
    "time": 31476.642822265625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006573120312590145,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.006073120312590144,
    "time": 2722.2275390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (/ (* (- 1.0 (pow (+ 1.0 (/ i n)) n)) -400.0) (/ (+ (+ i i) (+ i i)) n)))",
    "output_parens": 25,
    "avg_bits_err_input": 47.562523908102385,
    "avg_bits_err_output": 13.56043025073427,
    "avg_bits_err_improve": 34.002093657368114,
    "time": 25487.7060546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma d d (* c c)))) (* a (/ c (fma d d (* c c)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.13673888214304,
    "avg_bits_err_output": 23.117305392018306,
    "avg_bits_err_improve": 3.019433490124733,
    "time": 12858.699951171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 2e+303) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 25.721552241386195,
    "avg_bits_err_output": 22.269388454120705,
    "avg_bits_err_improve": 3.4521637872654907,
    "time": 15821.210205078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.033875,
    "avg_bits_err_output": 0.021859921543825708,
    "avg_bits_err_improve": 0.012015078456174295,
    "time": 4876.09716796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ (- 1.0 (log (+ 1.0 (expm1 (+ (- 1.0 (+ ux (- ux (* ux ux)))) (* (- 1.0 ux) (* ux maxCos))))))) (- (* ux (* maxCos (fma ux maxCos (- 1.0 ux))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 13.52321638343316,
    "avg_bits_err_output": 11.972962276469008,
    "avg_bits_err_improve": 1.550254106964152,
    "time": 34048.677490234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- (+ ux ux) (* ux ux)) (- (* (* ux maxCos) (+ (fma ux maxCos (- 1.0 ux)) (- 1.0 ux)))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.563306556753554,
    "avg_bits_err_output": 0.32065332177180494,
    "avg_bits_err_improve": 13.242653234981749,
    "time": 27603.992431640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (sin (* (* uy 2.0) PI))) yi)) (* (* ux (* (- 1.0 ux) maxCos)) zi))",
    "output_parens": 33,
    "avg_bits_err_input": 0.3314456029260001,
    "avg_bits_err_output": 0.3242799442257529,
    "avg_bits_err_improve": 0.007165658700247213,
    "time": 45780.973876953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.19989265691970173,
    "avg_bits_err_output": 0.19989265691970173,
    "avg_bits_err_improve": 0,
    "time": 22401.582763671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (expm1 (log1p (sin (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5388518745975742,
    "avg_bits_err_output": 0.5567197747625625,
    "avg_bits_err_improve": -0.017867900164988293,
    "time": 23854.083251953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3193740149427155,
    "avg_bits_err_output": 0.3193740149427155,
    "avg_bits_err_improve": 0,
    "time": 21378.654052734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.33106943524805477,
    "avg_bits_err_output": 0.3312240651477174,
    "avg_bits_err_improve": -0.0001546298996626394,
    "time": 40297.638427734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (* (expm1 (log1p (exp (/ x (* s -2.0))))) (if (!= (exp (/ x (* s -2.0))) 0.0) (/ 1.0 (/ 1.0 (exp (/ x (* s -2.0))))) (exp (/ x (* s -2.0)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.0566284130638754,
    "avg_bits_err_output": 0.06716519285812947,
    "avg_bits_err_improve": -0.010536779794254068,
    "time": 9456.12158203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.16613285452224863,
    "avg_bits_err_output": 0.11143050536168281,
    "avg_bits_err_improve": 0.05470234916056582,
    "time": 15334.5361328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6683661899137501,
    "avg_bits_err_output": 0.6683661899137501,
    "avg_bits_err_improve": 0,
    "time": 20275.415283203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.1596515861568558,
    "avg_bits_err_output": 0.15646355769904188,
    "avg_bits_err_improve": 0.0031880284578139073,
    "time": 19349.0673828125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma sinTheta_O (/ (- sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) (* eta eta)))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.5288712353957905,
    "avg_bits_err_output": 2.5286328740713397,
    "avg_bits_err_improve": 0.0002383613244507643,
    "time": 28524.366455078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ cosTheta_i (* v (* (sinh (/ 1.0 v)) (exp (* sinTheta_i (/ sinTheta_O v)))))) (* (/ 0.5 v) (* v (/ (exp (* sinTheta_i (/ sinTheta_O v))) (* v (exp (* sinTheta_i (/ sinTheta_O v)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.46140259357247504,
    "avg_bits_err_output": 0.3848361472882106,
    "avg_bits_err_improve": 0.07656644628426446,
    "time": 28823.988037109375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ (+ (- (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (/ 1.0 v)) 0.6931) (log (/ 0.5 v))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.13207255135387566,
    "avg_bits_err_output": 0.13207255135387566,
    "avg_bits_err_improve": 0,
    "time": 9226.504638671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (/ (* alpha (/ alpha PI)) (log (* alpha alpha))) (/ 1.0 (* PI (log (* alpha alpha))))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 14,
    "avg_bits_err_input": 0.4592061850091888,
    "avg_bits_err_output": 0.5346858164281806,
    "avg_bits_err_improve": -0.07547963141899178,
    "time": 26335.422607421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* 3.0 (* (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- (fma u -1.3333333333333333 0.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))) s))",
    "output_parens": 14,
    "avg_bits_err_input": 1.3308150195375212,
    "avg_bits_err_output": 0.44363797188996473,
    "avg_bits_err_improve": 0.8871770476475564,
    "time": 26872.19287109375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (log1p (if (!= (/ 4.0 (/ 4.0 (fma u -4.0 1.0))) 0.0) (/ (* (/ 4.0 (/ 4.0 (fma u -4.0 1.0))) (- (* u -4.0) (if (!= (- (/ 4.0 (/ 4.0 (fma u -4.0 1.0))) (- (/ 1.0 (fma u -4.0 1.0)) 2.0)) 0.0) (/ (- (/ (/ 16.0 (/ 4.0 (fma u -4.0 1.0))) (/ 4.0 (fma u -4.0 1.0))) (* (- (/ 1.0 (fma u -4.0 1.0)) 2.0) (- (/ 1.0 (fma u -4.0 1.0)) 2.0))) (- (/ 4.0 (/ 4.0 (fma u -4.0 1.0))) (- (/ 1.0 (fma u -4.0 1.0)) 2.0))) (+ (/ 4.0 (/ 4.0 (fma u -4.0 1.0))) (- (/ 1.0 (fma u -4.0 1.0)) 2.0))))) (/ -4.0 (/ 4.0 (fma u -4.0 1.0)))) (+ (/ 1.0 (fma u -4.0 1.0)) -1.0))))",
    "output_parens": 58,
    "avg_bits_err_input": 12.472208825576596,
    "avg_bits_err_output": 3.2934688102519534,
    "avg_bits_err_improve": 9.178740015324642,
    "time": 29899.971435546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ (/ 0.125 s) PI)) (* 0.75 (/ (exp (/ (/ r -3.0) s)) (* s (* PI 6.0))))) r)",
    "output_parens": 15,
    "avg_bits_err_input": 0.13923235097205922,
    "avg_bits_err_output": 0.1410005998706909,
    "avg_bits_err_improve": -0.0017682488986316969,
    "time": 32801.509033203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* u normAngle)) (sin normAngle)) n1_i (* (/ (sin (* normAngle (- 1.0 u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8455285600998349,
    "avg_bits_err_output": 0.6786053257046899,
    "avg_bits_err_improve": 0.166923234395145,
    "time": 31429.46875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(- (/ 1.0 (+ 1.0 (+ c (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (* cosTheta (sqrt PI)) (exp (* cosTheta cosTheta))))))) 0.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.7076747669225678,
    "avg_bits_err_output": 0.47805168422326216,
    "avg_bits_err_improve": 0.22962308269930565,
    "time": 22618.375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (if (!= (+ 2.0 (sin (* 2.0 (* PI u2)))) 0.0) (/ (expm1 (+ (log1p (sin (* 2.0 (* PI u2)))) (log1p (sin (* 2.0 (* PI u2)))))) (+ 2.0 (sin (* 2.0 (* PI u2))))) (sin (* 2.0 (* PI u2)))))",
    "output_parens": 29,
    "avg_bits_err_input": 13.505166915409903,
    "avg_bits_err_output": 13.520392801101462,
    "avg_bits_err_improve": -0.01522588569155836,
    "time": 28173.79296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (cos (if (!= (* PI u2) 0.0) (/ 2.0 (/ (- (+ 1.0 (/ 1.0 u2)) 1.0) PI)) (* 2.0 (* PI u2)))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.554990548217358,
    "avg_bits_err_output": 13.557223215066218,
    "avg_bits_err_improve": -0.002232666848859921,
    "time": 22291.3515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(if (!= (* (log (- 1.0 u0)) (* alpha alpha)) 0.0) (/ 1.0 (/ (expm1 (log1p (/ -1.0 (log (- 1.0 u0))))) (* alpha alpha))) (* (log (- 1.0 u0)) (* alpha (- alpha))))",
    "output_parens": 19,
    "avg_bits_err_input": 14.06827126295669,
    "avg_bits_err_output": 14.091958293461555,
    "avg_bits_err_improve": -0.023687030504865092,
    "time": 21793.274169921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log (- 1.0 u0)) (- (+ (/ cos2phi (* alphax alphax)) (/ (/ sin2phi alphay) alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.607422848736979,
    "avg_bits_err_output": 12.603592883641769,
    "avg_bits_err_improve": 0.003829965095210497,
    "time": 20488.67041015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (log1p (expm1 (tan (* PI l)))) F) F))",
    "output_parens": 8,
    "avg_bits_err_input": 16.648886789168525,
    "avg_bits_err_output": 12.66155647285129,
    "avg_bits_err_improve": 3.9873303163172356,
    "time": 27984.8408203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.20313176194006882,
    "avg_bits_err_output": 0.14545264201415933,
    "avg_bits_err_improve": 0.05767911992590949,
    "time": 14254.20458984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.674082945768122,
    "avg_bits_err_output": 10.558004974720724,
    "avg_bits_err_improve": 3.116077971047398,
    "time": 19950.703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0))) (if (!= (exp (/ (* PI f) -4.0)) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (/ (* PI f) -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0)))))) (* PI -0.25))",
    "output_parens": 32,
    "avg_bits_err_input": 61.512769494777324,
    "avg_bits_err_output": 1.6651850828684314,
    "avg_bits_err_improve": 59.84758441190889,
    "time": 57248.927734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.729269903665504,
    "avg_bits_err_output": 33.8878201076753,
    "avg_bits_err_improve": 8.8414497959902,
    "time": 26760.734619140625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.613972633566915,
    "avg_bits_err_output": 3.613972633566915,
    "avg_bits_err_improve": 0,
    "time": 26299.74072265625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 1.0567992787880738,
    "avg_bits_err_output": 1.0569242787880737,
    "avg_bits_err_improve": -0.00012499999999993072,
    "time": 9704.589111328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (- (- (/ 1.0 (fma 2.0 (pow (/ t l) 2.0) 1.0)) (/ (pow (/ Om Omc) 2.0) (+ 2.0 (* (pow (/ t l) 2.0) 4.0)))) (/ (pow (/ Om Omc) 2.0) (+ 2.0 (* (pow (/ t l) 2.0) 4.0))))))",
    "output_parens": 22,
    "avg_bits_err_input": 10.166034271136256,
    "avg_bits_err_output": 10.166222801986855,
    "avg_bits_err_improve": -0.00018853085059866714,
    "time": 27936.185546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 0.0) (sqrt (* U (* (* 2.0 n) (- t (+ (* (pow (/ l Om) 2.0) (* n (- U U*))) (* 2.0 (* l (/ l Om)))))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))",
    "output_parens": 43,
    "avg_bits_err_input": 34.62495036196397,
    "avg_bits_err_output": 29.40333396400452,
    "avg_bits_err_improve": 5.221616397959448,
    "time": 34859.25830078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (tan k) l) (* (pow (/ k t) 2.0) (* (pow t 3.0) (/ (sin k) l)))))",
    "output_parens": 11,
    "avg_bits_err_input": 47.150159029512665,
    "avg_bits_err_output": 36.32435232372511,
    "avg_bits_err_improve": 10.825806705787556,
    "time": 41316.220458984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)) 0.0) (/ 2.0 (/ (* (sin k) (* (pow t 3.0) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (tan k) l)))) l)) (/ (/ (/ 2.0 (sin k)) (/ (* (tan k) (/ (pow t 3.0) l)) l)) (+ 2.0 (pow (/ k t) 2.0))))",
    "output_parens": 38,
    "avg_bits_err_input": 32.954967263930065,
    "avg_bits_err_output": 28.00338153671296,
    "avg_bits_err_improve": 4.951585727217104,
    "time": 26569.127685546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (/ (* a2 a2) (sqrt 2.0)) (* a1 (if (!= (/ a1 (sqrt 2.0)) 0.0) (+ (/ (/ (+ a1 (+ a1 a1)) (sqrt 2.0)) 4.0) (/ (/ a1 (sqrt 2.0)) 4.0)) (/ a1 (sqrt 2.0))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.5652188000230793,
    "avg_bits_err_output": 0.5088246265817027,
    "avg_bits_err_improve": 0.05639417344137665,
    "time": 26390.60546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (pow (* 2.0 (* PI n)) (+ 0.5 (* k -0.5))) (sqrt k))",
    "output_parens": 7,
    "avg_bits_err_input": 0.506403650579543,
    "avg_bits_err_output": 0.45874791018442823,
    "avg_bits_err_improve": 0.04765574039511472,
    "time": 18184.191162109375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (if (!= (+ (exp (fma l -1.0 l)) (exp (* l -2.0))) 0.0) (/ (if (!= (+ (exp (+ l (- (fma l -1.0 l) l))) (exp (* l -4.0))) 0.0) (/ (if (!= (+ (exp (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l)))) (exp (* l -8.0))) 0.0) (/ (- (exp (+ (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l))) (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l))))) (exp (* l -16.0))) (+ (exp (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l)))) (exp (* l -8.0)))) (- (exp (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l)))) (exp (* l -8.0)))) (+ (exp (+ l (- (fma l -1.0 l) l))) (exp (* l -4.0)))) (- (exp (+ l (- (fma l -1.0 l) l))) (exp (* l -4.0)))) (+ (exp (fma l -1.0 l)) (exp (* l -2.0)))) (- (exp (fma l -1.0 l)) (exp (* l -2.0)))) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output_parens": 95,
    "avg_bits_err_input": 17.422381916765367,
    "avg_bits_err_output": 17.39853875097668,
    "avg_bits_err_improve": 0.02384316578868706,
    "time": 28347.624755859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) 0.7) (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K n) 0.0) (fma K (* n (* (+ n m) (/ K (* K n)))) 0.0) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))))",
    "output_parens": 59,
    "avg_bits_err_input": 15.138600875798987,
    "avg_bits_err_output": 6.811823056705956,
    "avg_bits_err_improve": 8.326777819093031,
    "time": 24542.20947265625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (sqrt (+ 1.0 (pow (/ (/ U (* 2.0 J)) (cos (/ K 2.0))) 2.0))) (* (cos (/ K 2.0)) -2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 18.39296936093777,
    "avg_bits_err_output": 18.38715808281331,
    "avg_bits_err_improve": 0.005811278124458141,
    "time": 24003.58154296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (* (/ (pow (* (/ D d) (/ M 2.0)) 2.0) l) h))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.148568107581532,
    "avg_bits_err_output": 10.648515295659697,
    "avg_bits_err_improve": 3.500052811921835,
    "time": 23958.91455078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 0.0) (* c0 (sqrt (/ (/ A V) l))) (if (<= (/ A (* V l)) 2e+293) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (/ (/ A l) V)))))",
    "output_parens": 20,
    "avg_bits_err_input": 19.35037798114036,
    "avg_bits_err_output": 14.921835576847887,
    "avg_bits_err_improve": 4.428542404292472,
    "time": 15070.654052734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (if (!= (- (sqrt (* (fma c0 (/ (* d d) (* h (* w (* D D)))) M) (- (* c0 (/ (* d d) (* h (* w (* D D))))) M))) (* c0 (/ (* d d) (* h (* w (* D D)))))) 0.0) (/ (- (* M M) 0.0) (- (* c0 (/ (* d d) (* h (* w (* D D))))) (sqrt (* (fma c0 (/ (* d d) (* h (* w (* D D)))) M) (- (* c0 (/ (* d d) (* h (* w (* D D))))) M))))) (fma c0 (/ (* d d) (* h (* w (* D D)))) (sqrt (* (fma c0 (/ (* d d) (* h (* w (* D D)))) M) (- (* c0 (/ (* d d) (* h (* w (* D D))))) M)))))) (/ (/ (* c0 (if (!= (sqrt (* (fma (/ (/ c0 D) (* w h)) (* d (/ d D)) M) (- (* (/ (/ c0 D) (* w h)) (* d (/ d D))) M))) 0.0) 0.0 (fma d (* (/ d D) (/ (/ c0 D) (* w h))) (sqrt (* (+ (* d (* (/ d D) (/ (/ (/ c0 h) w) D))) M) (- (* (/ (/ c0 D) (* w h)) (* d (/ d D))) M)))))) w) 2.0))",
    "output_parens": 143,
    "avg_bits_err_input": 60.05213465042429,
    "avg_bits_err_output": 30.215112762957514,
    "avg_bits_err_improve": 29.83702188746678,
    "time": 48929.026611328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (- (* (sqrt (/ d h)) (sqrt (/ d l))) (* h (/ (* (pow (* M (/ D (+ d d))) 2.0) (* (sqrt (/ d h)) (sqrt (/ d l)))) (+ l l)))) (fma (sqrt (/ d l)) (* (sqrt (/ d h)) (- 1.0 (* (pow (/ (* M D) (* d 2.0)) 2.0) (* h (/ 0.5 l))))) 0.0))",
    "output_parens": 50,
    "avg_bits_err_input": 26.719306999155272,
    "avg_bits_err_output": 25.500667100788064,
    "avg_bits_err_improve": 1.2186398983672078,
    "time": 45031.6640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (if (!= (/ (+ 0.5 (/ -1.0 (hypot 1.0 x))) (fma 2.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0)) 0.0) (/ (+ (* (/ (+ 0.5 (/ -1.0 (hypot 1.0 x))) (fma 2.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0)) (/ (+ 0.5 (/ -1.0 (hypot 1.0 x))) (fma 2.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0))) (* (/ 0.5 (fma 2.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0)) (/ (+ 0.5 (/ -1.0 (hypot 1.0 x))) (fma 2.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0)))) (/ (+ 0.5 (/ -1.0 (hypot 1.0 x))) (fma 2.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0))) (/ (+ (/ -1.0 (hypot 1.0 x)) 1.0) (fma 2.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 78,
    "avg_bits_err_input": 15.169975748055608,
    "avg_bits_err_output": 14.691913506222734,
    "avg_bits_err_improve": 0.47806224183287327,
    "time": 26965.525634765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ -1.3333333333333333 (fma v v -1.0)) (* (sqrt (- 2.0 (* 6.0 (* v v)))) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9848962406251803,
    "avg_bits_err_output": 0.013990601562950726,
    "avg_bits_err_improve": 0.9709056390622296,
    "time": 7256.832763671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (+ 2.0 (* (* v v) -6.0)))) (* t (- 1.0 (* v v)))) (/ (* (/ 5.0 (* PI (* t (- 1.0 (* v v))))) (* v v)) (sqrt (+ 2.0 (* (* v v) -6.0)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.4319795188744793,
    "avg_bits_err_output": 0.1275332863258934,
    "avg_bits_err_improve": 0.3044462325485859,
    "time": 20434.04833984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (- 1.0 (* 3.0 (* v v)))) (/ (- (* (* v v) (sqrt 2.0)) (sqrt 2.0)) -4.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.0105,
    "avg_bits_err_output": 0.010198120312590144,
    "avg_bits_err_improve": 0.00030187968740985616,
    "time": 7239.718994140625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5230027583132026,
    "avg_bits_err_output": 0.5230027583132026,
    "avg_bits_err_improve": 0,
    "time": 10361.08544921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.0467293448454136,
    "avg_bits_err_output": 2.0298543448454134,
    "avg_bits_err_improve": 0.016875000000000195,
    "time": 18542.508056640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (+ mu (- Vef (- Ec EDonor))) KbT)) -1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.01732905741540336,
    "avg_bits_err_output": 0.01732905741540336,
    "avg_bits_err_improve": 0,
    "time": 7962.56494140625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.18503757405699392,
    "avg_bits_err_output": 0.18503757405699392,
    "avg_bits_err_improve": 0,
    "time": 18862.55908203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.1950031027577738,
    "avg_bits_err_output": 0.1950031027577738,
    "avg_bits_err_improve": 0,
    "time": 21472.490234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* a (- a (* a a))) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.19198460929168018,
    "avg_bits_err_output": 0.19273004355717704,
    "avg_bits_err_improve": -0.0007454342654968638,
    "time": 25404.535400390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (+ (/ (* x 0.25) (sqrt (fma 4.0 (* p p) (* x x)))) (+ (/ x (* 4.0 (* (sqrt (fma 4.0 (* p p) (* x x))) 2.0))) (/ (if (!= (- x (+ x (+ x (+ x x)))) 0.0) (/ (+ (* x (- x)) (* (+ (+ x x) (+ x x)) (+ (+ x x) (+ x x)))) (+ x (+ x x))) (+ x (+ x (+ x (+ x x))))) (* 4.0 (* (sqrt (fma 4.0 (* p p) (* x x))) 2.0))))))))",
    "output_parens": 48,
    "avg_bits_err_input": 13.4454905073507,
    "avg_bits_err_output": 13.659536367495594,
    "avg_bits_err_improve": -0.21404586014489446,
    "time": 17737.650146484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.514317950428634,
    "avg_bits_err_output": 0.057125,
    "avg_bits_err_improve": 41.457192950428635,
    "time": 7493.576904296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))",
    "output_parens": 8,
    "avg_bits_err_input": 31.622030420974493,
    "avg_bits_err_output": 31.595932639530325,
    "avg_bits_err_improve": 0.026097781444168078,
    "time": 22429.350341796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) 0.0 (if (<= (/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 2e+292) (/ (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2) a) 0.0))",
    "output_parens": 25,
    "avg_bits_err_input": 33.66020273230366,
    "avg_bits_err_output": 29.077456443120578,
    "avg_bits_err_improve": 4.582746289183081,
    "time": 14327.228759765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) 0.0 (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 1e+287) (/ (/ (- (if (!= (- b_2 (* (sqrt (- (* b_2 b_2) (* a c))) 2.0)) 0.0) (/ (- (* (sqrt (- (* b_2 b_2) (* a c))) (* (sqrt (- (* b_2 b_2) (* a c))) 4.0)) (* b_2 b_2)) (- b_2 (* (sqrt (- (* b_2 b_2) (* a c))) 2.0))) (- (fma (sqrt (- (* b_2 b_2) (* a c))) 2.0 b_2))) b_2) 2.0) a) 0.0))",
    "output_parens": 55,
    "avg_bits_err_input": 34.19653135953239,
    "avg_bits_err_output": 29.995965175991756,
    "avg_bits_err_improve": 4.200566183540637,
    "time": 19443.64111328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(if (<= x -0.0007) (* (/ (- 1.0 (cos x)) x) (/ 1.0 x)) (if (<= x 0.078) (+ (- (/ 1.0 (* x x)) (+ 1.0 (/ (cos x) (* x x)))) 1.0) (/ (- (* (/ -1.0 x) (cos x)) (/ -1.0 x)) x)))",
    "output_parens": 23,
    "avg_bits_err_input": 30.767338452662628,
    "avg_bits_err_output": 28.07715496084489,
    "avg_bits_err_improve": 2.690183491817738,
    "time": 17235.142822265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (/ (if (!= (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n))) 0.0) (/ (if (!= (+ (exp (* (/ (+ (log1p x) (log1p x)) n) 2.0)) (exp (/ (* (log x) 4.0) n))) 0.0) (/ (- (exp (* (/ (+ (log1p x) (log1p x)) n) 4.0)) (exp (/ (* (log x) 8.0) n))) (+ (exp (* (/ (+ (log1p x) (log1p x)) n) 2.0)) (exp (/ (* (log x) 4.0) n)))) (- (exp (* (/ (+ (log1p x) (log1p x)) n) 2.0)) (exp (/ (* (log x) 4.0) n)))) (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n)))) (- (exp (/ (+ (log1p x) (log1p x)) n)) (* (pow x (/ 1.0 n)) (pow x (/ 1.0 n))))) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 102,
    "avg_bits_err_input": 33.01816708714132,
    "avg_bits_err_output": 32.741921208768275,
    "avg_bits_err_improve": 0.2762458783730466,
    "time": 29553.27978515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (- (exp (log1p (exp (- (log1p N) (log N))))) 2.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 29.59902153910503,
    "avg_bits_err_output": 29.60979081665607,
    "avg_bits_err_improve": -0.010769277551037959,
    "time": 12290.564697265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (- (/ (+ (/ -1.0 x) (/ (/ x x) (+ 1.0 x))) 2.0) (/ (log (+ 1.0 (expm1 (+ 1.0 (/ -1.0 (/ (+ x 1.0) x)))))) (+ x x))) 0.0)",
    "output_parens": 17,
    "avg_bits_err_input": 14.712999100824304,
    "avg_bits_err_output": 14.69965252622119,
    "avg_bits_err_improve": 0.013346574603113837,
    "time": 16770.137451171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(+ (if (!= (+ (cos x) -1.0) 0.0) (/ (- (* (+ (cos x) -1.0) (cos (+ x eps))) (* (+ (cos x) -1.0) (+ (cos x) -1.0))) (+ (cos x) -1.0)) (- (cos (+ x eps)) (+ (cos x) -1.0))) -1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 39.53647609230894,
    "avg_bits_err_output": 39.53307446515452,
    "avg_bits_err_improve": 0.003401627154417497,
    "time": 24269.921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(- (if (!= (cbrt (+ x 1.0)) 0.0) (/ 1.0 (/ (/ (/ 2.0 (cbrt (+ 1.0 x))) (cbrt (+ 1.0 x))) (/ 2.0 (cbrt (+ 1.0 x))))) (cbrt (+ x 1.0))) (cbrt x))",
    "output_parens": 19,
    "avg_bits_err_input": 29.844376805081026,
    "avg_bits_err_output": 29.8884429065496,
    "avg_bits_err_improve": -0.04406610146857304,
    "time": 14029.157470703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 29.862912215081383,
    "avg_bits_err_output": 29.862912215081383,
    "avg_bits_err_improve": 0,
    "time": 21214.392333984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (/ (+ b (sqrt (fma c (* a -4.0) (* b b)))) 2.0) b) a)",
    "output_parens": 8,
    "avg_bits_err_input": 33.558811642659755,
    "avg_bits_err_output": 33.563817787143215,
    "avg_bits_err_improve": -0.005006144483459707,
    "time": 27984.395751953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a -4.0)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.80157756696032,
    "avg_bits_err_output": 21.498945829658087,
    "avg_bits_err_improve": 12.302631737302232,
    "time": 25438.912841796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.472647159634384,
    "avg_bits_err_output": 0.8244647564862725,
    "avg_bits_err_improve": 60.64818240314811,
    "time": 23843.4345703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00484071284103,
    "avg_bits_err_output": 44.22522210048003,
    "avg_bits_err_improve": 18.779618612361,
    "time": 12884.149169921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.49530586794207,
    "avg_bits_err_output": 58.45653321127815,
    "avg_bits_err_improve": 0.038772656663923044,
    "time": 18724.561279296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(log (+ 1.0 (expm1 (+ (/ 1.0 x) (/ -1.0 (tan x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 59.992713143387256,
    "avg_bits_err_output": 59.992705992471436,
    "avg_bits_err_improve": 7.150915820375303e-06,
    "time": 26480.970458984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ (expm1 (* eps (+ a b))) (expm1 (* eps b))) (/ eps (expm1 (* eps a))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.24891967224722,
    "avg_bits_err_output": 29.229497253052056,
    "avg_bits_err_improve": 31.019422419195163,
    "time": 26962.75439453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(- 1.0 (/ -1.0 (expm1 x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.9159850089408,
    "avg_bits_err_output": 0.14443390000926062,
    "avg_bits_err_improve": 41.77155110893154,
    "time": 4940.595458984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.66431510498684,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.66381510498684,
    "time": 4637.175048828125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.68898603451497,
    "avg_bits_err_output": 0.018374784063608936,
    "avg_bits_err_improve": 29.67061125045136,
    "time": 7574.981689453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (- (exp x) 2.0) (exp (- x))) 0.0) (/ (if (!= (fma (exp x) 2.0 -4.0) 0.0) (/ (fma (fma (exp x) 2.0 -4.0) (- (* (exp x) (- (exp x) 2.0)) (exp (* x -2.0))) (- (* (fma (exp x) 2.0 -4.0) (fma (exp x) 2.0 -4.0)))) (fma (exp x) 2.0 -4.0)) (- (* (- (exp x) 2.0) (- (exp x) 2.0)) (exp (* x -2.0)))) (- (- (exp x) 2.0) (exp (- x)))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 49,
    "avg_bits_err_input": 29.529493374551613,
    "avg_bits_err_output": 29.055677889616355,
    "avg_bits_err_improve": 0.47381548493525827,
    "time": 27641.5390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (- (+ (/ 0.5 (+ x -1.0)) (- (/ 0.5 (+ x 1.0)) (/ 1.0 x))) (/ (+ -1.0 (- (/ 2.0 (/ x (+ x -1.0))) (/ (+ x -1.0) (+ x 1.0)))) (+ -2.0 (* x 2.0)))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 30,
    "avg_bits_err_input": 9.719244606835552,
    "avg_bits_err_output": 9.712865510079373,
    "avg_bits_err_improve": 0.006379096756178981,
    "time": 31915.591552734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (tan x) 0.0) (+ (- (tan (+ x eps)) (tan x)) (fma (sin x) (/ (tan x) (* (sin x) -2.0)) (fma (sin x) (/ (tan x) (* (sin x) -2.0)) (/ 1.0 (/ 1.0 (tan x)))))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 27,
    "avg_bits_err_input": 36.767742998630105,
    "avg_bits_err_output": 36.8115897731485,
    "avg_bits_err_improve": -0.043846774518392806,
    "time": 22530.0830078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.875174423587065,
    "avg_bits_err_output": 0.16828797031547468,
    "avg_bits_err_improve": 29.70688645327159,
    "time": 13084.634521484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (+ (sin x) 1.0) 0.0) (/ (- (* (sin (+ x eps)) (+ 1.0 (sin x))) (+ (* (sin x) (sin x)) (sin x))) (+ (sin x) 1.0)) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 22,
    "avg_bits_err_input": 37.066784457637866,
    "avg_bits_err_output": 37.10765124191129,
    "avg_bits_err_improve": -0.04086678427342605,
    "time": 20291.08837890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.157797650223724,
    "avg_bits_err_output": 19.014439352463405,
    "avg_bits_err_improve": 0.14335829776031872,
    "time": 13094.780029296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (atan (+ N 1.0)) 0.0) (* (atan (+ N 1.0)) (- 1.0 (/ (atan N) (atan (+ N 1.0))))) (- (atan (+ N 1.0)) (atan N)))",
    "output_parens": 16,
    "avg_bits_err_input": 14.900590385858418,
    "avg_bits_err_output": 14.909758599195381,
    "avg_bits_err_improve": -0.00916821333696305,
    "time": 12213.332275390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.69295475452943,
    "avg_bits_err_output": 1.187781173875969,
    "avg_bits_err_improve": 28.505173580653462,
    "time": 24148.282958984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (- m (* m m)) v) (+ (* (- 1.0 m) (* m (/ m v))) (- 1.0 m)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.07188136568158808,
    "avg_bits_err_output": 0.07619843780811897,
    "avg_bits_err_improve": -0.004317072126530888,
    "time": 11634.7626953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(- (* (* a (+ (+ b b) b)) (* a (* b -0.25))) (* (* a b) (* (- a) (* b -0.25))))",
    "output_parens": 12,
    "avg_bits_err_input": 16.143185580880708,
    "avg_bits_err_output": 0.3098872187554087,
    "avg_bits_err_improve": 15.8332983621253,
    "time": 11940.399658203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (/ angle 180.0)) 0.0) (/ 1.0 (/ 1.0 (/ (* PI angle) 180.0))) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 19.8618769896957,
    "avg_bits_err_output": 19.868851108839845,
    "avg_bits_err_improve": -0.006974119144146584,
    "time": 37593.2431640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (+ (/ (sin (* PI (/ angle 180.0))) 2.0) (/ (sin (* PI (/ angle 180.0))) 2.0))) (cos (* PI (/ angle 180.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 30.801951198756488,
    "avg_bits_err_output": 30.802049647997556,
    "avg_bits_err_improve": -9.8449241068721e-05,
    "time": 39439.22509765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (if (!= (* angle (/ PI 180.0)) 0.0) (/ 1.0 (/ 1.0 (* angle (/ PI 180.0)))) (* angle (/ PI 180.0))))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.388018091198553,
    "avg_bits_err_output": 20.39729700697493,
    "avg_bits_err_improve": -0.009278915776377517,
    "time": 40811.259765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17553303878037732,
    "avg_bits_err_output": 0.17553303878037732,
    "avg_bits_err_improve": 0,
    "time": 16389.156494140625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3283543319995591,
    "avg_bits_err_output": 0.3141382861921381,
    "avg_bits_err_improve": 0.014216045807420974,
    "time": 16601.956787109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.14111560156295072,
    "avg_bits_err_output": 0.14111560156295072,
    "avg_bits_err_improve": 0,
    "time": 17280.309814453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.785056858727277,
    "avg_bits_err_output": 16.781479311218582,
    "avg_bits_err_improve": 0.003577547508694323,
    "time": 34819.58642578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.5625467302506,
    "avg_bits_err_output": 0.16736109062806484,
    "avg_bits_err_improve": 52.39518563962254,
    "time": 23372.322021484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (if (!= (+ b (sqrt (fma b b (* -4.0 (* c a))))) 0.0) (* -4.0 (* a (/ c (+ b (sqrt (fma b b (* -4.0 (* c a)))))))) (- (sqrt (fma b b (* -4.0 (* c a)))) b)) a) 0.5)",
    "output_parens": 22,
    "avg_bits_err_input": 28.566420960658263,
    "avg_bits_err_output": 0.340505640636719,
    "avg_bits_err_improve": 28.225915320021546,
    "time": 26362.191650390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 43.77825332635467,
    "avg_bits_err_output": 0.23838986601907228,
    "avg_bits_err_improve": 43.5398634603356,
    "time": 23499.144287109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (- (/ (+ b (sqrt (fma c (* a -4.0) (* b b)))) 2.0) b) a)",
    "output_parens": 8,
    "avg_bits_err_input": 33.555181521123515,
    "avg_bits_err_output": 33.563817787143215,
    "avg_bits_err_improve": -0.00863626601969969,
    "time": 19805.88427734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8698663842409012,
    "avg_bits_err_output": 0.8698663842409012,
    "avg_bits_err_improve": 0,
    "time": 29906.097412109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (if (!= (/ 1.0 (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0)))))) 0.0) (/ (if (!= (/ 4.0 (* (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0)))))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0))))))) 0.0) (/ (- (* (/ 4.0 (* (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0)))))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0))))))) (/ 4.0 (* (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0)))))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0)))))))) (* (/ 4.0 (* (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0)))))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0))))))) (/ 1.0 (* (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0))))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0))))))))) (/ 4.0 (* (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0)))))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0)))))))) (/ (/ (+ (/ 8.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0)))))) (+ (/ -4.0 (- -1.0 (exp (* x -2.0)))) 2.0))) (/ 1.0 (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0))))))) (/ (- 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* x -2.0))))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 174,
    "avg_bits_err_input": 29.29529444909919,
    "avg_bits_err_output": 29.271627691406287,
    "avg_bits_err_improve": 0.02366675769290083,
    "time": 24965.364013671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (* x -2.0)) (- -1.0 (exp (* x -2.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.179648862205234,
    "avg_bits_err_output": 0.6238137218755408,
    "avg_bits_err_improve": 57.55583514032969,
    "time": 16469.310546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.116196462917856,
    "avg_bits_err_output": 0.021323120312590146,
    "avg_bits_err_improve": 58.09487334260527,
    "time": 9777.84765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007375,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 0,
    "time": 2421.2060546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.35483755496477,
    "avg_bits_err_output": 32.35483755496477,
    "avg_bits_err_improve": 0,
    "time": 4482.170166015625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (- (/ -1.0 (- (+ -1.0 (+ x x)) (* x x))) (* (/ x (+ -1.0 x)) (/ x (+ -1.0 x))))))",
    "output_parens": 13,
    "avg_bits_err_input": 58.48491139901325,
    "avg_bits_err_output": 58.48196137621503,
    "avg_bits_err_improve": 0.002950022798216878,
    "time": 20642.93603515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.026698120312590144,
    "avg_bits_err_output": 0.026698120312590144,
    "avg_bits_err_improve": 0,
    "time": 2647.49267578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.1285,
    "avg_bits_err_output": 0.12732312031259016,
    "avg_bits_err_improve": 0.001176879687409843,
    "time": 21131.103271484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12584436093777043,
    "avg_bits_err_output": 0.12584436093777043,
    "avg_bits_err_improve": 0,
    "time": 26240.008544921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* (cos (/ (+ phi1 phi2) 2.0)) lambda1) (* (cos (/ (+ phi1 phi2) 2.0)) lambda2)) (- phi1 phi2)))",
    "output_parens": 12,
    "avg_bits_err_input": 39.12957355708429,
    "avg_bits_err_output": 3.765918484711821,
    "avg_bits_err_improve": 35.363655072372474,
    "time": 31129.046630859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.485065143779895,
    "avg_bits_err_output": 14.485065143779895,
    "avg_bits_err_improve": 0,
    "time": 3237.54345703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (log1p (- (exp (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) 1.0))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.14518239233819433,
    "avg_bits_err_output": 0.1691598751950288,
    "avg_bits_err_improve": -0.023977482856834487,
    "time": 35191.229248046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.63803521654936,
    "avg_bits_err_output": 0.16802877539100758,
    "avg_bits_err_improve": 52.470006441158354,
    "time": 28832.25537109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* b b) 0.0) (/ (+ (* b (* b (* b b))) (* b (* b (* c (* a -3.0))))) (* b b)) (fma c (* a -3.0) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 37,
    "avg_bits_err_input": 28.75543818824443,
    "avg_bits_err_output": 0.34842576915074336,
    "avg_bits_err_improve": 28.407012419093686,
    "time": 32878.052001953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.79604538061518,
    "avg_bits_err_output": 0.24314230977015383,
    "avg_bits_err_improve": 43.552903070845026,
    "time": 23482.80712890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* c (* a -3.0))))) 0.0) (* (/ c (+ b (sqrt (fma c (* a -3.0) (* b b))))) (* a -3.0)) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 22,
    "avg_bits_err_input": 33.60464308425093,
    "avg_bits_err_output": 21.762516834706172,
    "avg_bits_err_improve": 11.842126249544759,
    "time": 21940.283447265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.115325253846082,
    "avg_bits_err_output": 13.115325253846082,
    "avg_bits_err_improve": 0,
    "time": 36904.115966796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (- (* (/ x (+ x 1.0)) (+ x -1.0)) (+ x -1.0)) (+ x -1.0)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.524752988330512,
    "avg_bits_err_output": 24.840553393839517,
    "avg_bits_err_improve": 4.684199594490995,
    "time": 22306.5888671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.0105,
    "avg_bits_err_output": 0.0105,
    "avg_bits_err_improve": 0,
    "time": 6729.481689453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (/ -1.0 (+ x 1.0)) (+ -1.0 (/ x (+ x 1.0)))) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 14.755221738489459,
    "avg_bits_err_output": 12.827242760375189,
    "avg_bits_err_improve": 1.92797897811427,
    "time": 20575.972412109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* 2.0 (+ (* (- (pow B 2.0) (* A (* C 4.0))) (* F (- A (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C)))) (* (fma (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) F (* F (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C))) (- (pow B 2.0) (* A (* C 4.0))))))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 40,
    "avg_bits_err_input": 52.45772386407188,
    "avg_bits_err_output": 52.16361093659903,
    "avg_bits_err_improve": 0.29411292747285245,
    "time": 37034.188232421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 5.4e+193) (* (atan (/ (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))) B)) (/ 180.0 PI)) (* 180.0 (/ (atan (if (!= (fma (/ -1.0 B) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (/ (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) B)) 0.0) 0.0 (/ (+ (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (- C (+ A (+ (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) B))) PI)))",
    "output_parens": 51,
    "avg_bits_err_input": 29.894744119429234,
    "avg_bits_err_output": 28.6032414390196,
    "avg_bits_err_improve": 1.2915026804096321,
    "time": 22819.82080078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (fma 2.0 (pow B 2.0) (* A (* C -8.0))) (* F (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* C (* A 4.0)) (pow B 2.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 52.169770239385244,
    "avg_bits_err_output": 51.958096810697285,
    "avg_bits_err_improve": 0.21167342868795913,
    "time": 38092.53076171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (/ (* (cbrt (/ g (+ a a))) (- (- (+ (cbrt (/ g (+ a a))) 1.0) -2.0) 1.0)) (+ (cbrt (/ g (+ a a))) 2.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 24,
    "avg_bits_err_input": 15.270554961776552,
    "avg_bits_err_output": 15.291298587170447,
    "avg_bits_err_improve": -0.020743625393894405,
    "time": 31799.0556640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* -0.5 (/ (if (!= g 0.0) (/ (* g (+ g (sqrt (fma g g (- (* h h)))))) g) (+ g (sqrt (fma g g (- (* h h)))))) a))))",
    "output_parens": 27,
    "avg_bits_err_input": 35.99589430439149,
    "avg_bits_err_output": 35.92997772030935,
    "avg_bits_err_improve": 0.06591658408213874,
    "time": 19239.987060546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9910808281331139,
    "avg_bits_err_output": 0.9758774437510819,
    "avg_bits_err_improve": 0.015203384382032059,
    "time": 9615.546630859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.678375,
    "avg_bits_err_output": 0.678375,
    "avg_bits_err_improve": 0,
    "time": 3087.298583984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (* a2 (/ a1 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-267) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+279) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.196144545501134,
    "avg_bits_err_output": 2.5783277934059994,
    "avg_bits_err_improve": 8.617816752095134,
    "time": 8882.66796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.49046350769904495,
    "avg_bits_err_output": 0.461875,
    "avg_bits_err_improve": 0.028588507699044974,
    "time": 7480.6328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(log1p (- x (- 1.0 (hypot 1.0 x))))",
    "output_parens": 4,
    "avg_bits_err_input": 52.89821046338433,
    "avg_bits_err_output": 15.270308930588868,
    "avg_bits_err_improve": 37.62790153279546,
    "time": 14520.46435546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.727833059046273,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.727833059046273,
    "time": 2974.336181640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (expm1 (log1p (/ (- 1.0 x) (+ 1.0 x)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.01325,
    "avg_bits_err_improve": 0.0007500000000000007,
    "time": 9160.0703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1217.427001953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= (* w w) 1500.0) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* w r) (* (* w (+ 0.375 (* v -0.25))) (/ r (- 1.0 v)))) 4.5)) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* w (* (/ w (- 1.0 v)) (* r r)))) 4.5)))",
    "output_parens": 29,
    "avg_bits_err_input": 12.55342337153112,
    "avg_bits_err_output": 0.2905443031728363,
    "avg_bits_err_improve": 12.262879068358282,
    "time": 29477.6259765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (+ (* x1 (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0))) (* x1 (* x1 -6.0))))))))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5125415513252507,
    "avg_bits_err_output": 0.28714067291711837,
    "avg_bits_err_improve": 0.22540087840813233,
    "time": 71189.85083007812,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.393029181735724,
    "avg_bits_err_output": 1.3476989174630924,
    "avg_bits_err_improve": 17.045330264272632,
    "time": 5323.365478515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.21761336132445105,
    "avg_bits_err_output": 0.19131372187554083,
    "avg_bits_err_improve": 0.026299639448910228,
    "time": 9945.817138671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00275,
    "avg_bits_err_output": 0.00275,
    "avg_bits_err_improve": 0,
    "time": 2667.053466796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (- (/ (* PI -0.5) (* b (+ a b))) (/ (* PI -0.5) (* a (+ a b)))) (- b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.087345127366637,
    "avg_bits_err_output": 0.23525037656727743,
    "avg_bits_err_improve": 13.85209475079936,
    "time": 19057.354736328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (/ (+ 1.0 (/ 1.0 eps)) (exp (* (- 1.0 eps) x))) (/ (/ 1.0 eps) (exp (* x (+ 1.0 eps))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.018270759143785,
    "avg_bits_err_output": 24.39071310695724,
    "avg_bits_err_improve": 4.627557652186546,
    "time": 19821.106689453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (log1p (expm1 (/ 1.0 (fma (- (/ 2.0 (+ t (/ t t))) 2.0) (- (/ 2.0 (+ t (/ t t))) 2.0) 2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.012,
    "avg_bits_err_output": 0.005625,
    "avg_bits_err_improve": 0.0063750000000000005,
    "time": 6076.214111328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (+ 1.0 (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))))) (+ (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))) 4.0))",
    "output_parens": 26,
    "avg_bits_err_input": 0.017375,
    "avg_bits_err_output": 0.046875,
    "avg_bits_err_improve": -0.0295,
    "time": 15770.1533203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* (/ t (+ t 1.0)) 4.0))) (+ 2.0 (* (/ t (+ t 1.0)) (* (/ t (+ t 1.0)) 4.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.03925,
    "avg_bits_err_output": 0.00725,
    "avg_bits_err_improve": 0.032,
    "time": 12839.570068359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3672.05029296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6769.015869140625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2311.88671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.824873496755416,
    "avg_bits_err_output": 0.25625,
    "avg_bits_err_improve": 7.568623496755416,
    "time": 27899.779296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (if (!= (+ -1.0 (pow (+ x eps) 5.0)) 0.0) (/ (* (pow (+ x eps) 5.0) (+ -1.0 (pow (+ x eps) 5.0))) (+ -1.0 (pow (+ x eps) 5.0))) (pow (+ x eps) 5.0)) (pow x 5.0))",
    "output_parens": 19,
    "avg_bits_err_input": 7.275850852148199,
    "avg_bits_err_output": 7.274179071700595,
    "avg_bits_err_improve": 0.0016717804476042986,
    "time": 16045.856201171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 15.95633635648257,
    "avg_bits_err_output": 15.95633635648257,
    "avg_bits_err_improve": 0,
    "time": 15494.706787109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (+ (cos x) -1.0) (- (exp (* 10.0 (* x x))))) 0.0) (* (- (exp (* (* x x) 20.0)) (* (cos x) (if (!= (+ (pow (exp (* x 20.0)) x) 2.0) 0.0) (/ (+ (* (+ (pow (exp (* x 20.0)) x) 1.0) (+ (pow (exp (* x 20.0)) x) 1.0)) -1.0) (+ (pow (exp (* x 20.0)) x) 2.0)) (pow (exp (* x 20.0)) x)))) (/ (cos x) (* (+ (cos x) -1.0) (- (exp (* 10.0 (* x x))))))) (* (exp (* 10.0 (* x x))) (cos x)))",
    "output_parens": 54,
    "avg_bits_err_input": 3.5403741726438858,
    "avg_bits_err_output": 2.9215498769639563,
    "avg_bits_err_improve": 0.6188242956799295,
    "time": 19811.010009765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -50000.0) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 20000000.0) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 14.454857748212941,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 14.44548274821294,
    "time": 8751.888671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.876912008031375,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.876912008031375,
    "time": 5006.752197265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.914283630750894,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 38.913408630750894,
    "time": 4048.59423828125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.25575,
    "avg_bits_err_improve": 63.74425,
    "time": 25307.441650390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (* t 4e-32))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325851722857,
    "avg_bits_err_output": 0.407625,
    "avg_bits_err_improve": 61.43563351722857,
    "time": 8926.40234375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a -4.0)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.80157756696032,
    "avg_bits_err_output": 21.498945829658087,
    "avg_bits_err_improve": 12.302631737302232,
    "time": 27142.697509765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (- (/ (+ b (sqrt (fma c (* a -4.0) (* b b)))) 2.0) b) a)",
    "output_parens": 8,
    "avg_bits_err_input": 33.555181521123515,
    "avg_bits_err_output": 33.563817787143215,
    "avg_bits_err_improve": -0.00863626601969969,
    "time": 23270.68310546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2234.02880859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.656383154794554,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 39.64725815479456,
    "time": 2950.887451171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 19.89337487829978,
    "avg_bits_err_output": 19.89337487829978,
    "avg_bits_err_improve": 0,
    "time": 4734.123046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ c (+ d a))) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.656178838185139,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.656178838185139,
    "time": 10794.504150390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.041,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.040375,
    "time": 9616.124755859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01929248125036058,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 0.00754248125036058,
    "time": 4442.29345703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.018625,
    "avg_bits_err_improve": -0.00375,
    "time": 2535.79931640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00125,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 0,
    "time": 1630.7021484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ c a) (+ b d)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39664661719245803,
    "avg_bits_err_output": 0.238875,
    "avg_bits_err_improve": 0.15777161719245802,
    "time": 6010.413818359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (- 1.0 (cos x)) 0.0) (/ 1.0 (expm1 (log1p (/ 1.0 (- 1.0 (cos x)))))) (- 1.0 (cos x)))",
    "output_parens": 12,
    "avg_bits_err_input": 30.434841256513014,
    "avg_bits_err_output": 30.434841255262562,
    "avg_bits_err_improve": 1.2504521862410911e-09,
    "time": 8880.2080078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (fma x x (- eps)))) 0.0) (if (!= 0.0 0.0) 0.0 (/ eps (+ x (sqrt (- (* x x) eps))))) (- x (sqrt (fma x x (- eps)))))",
    "output_parens": 17,
    "avg_bits_err_input": 24.636226017078148,
    "avg_bits_err_output": 0.29494812031259016,
    "avg_bits_err_improve": 24.341277896765558,
    "time": 11526.446533203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (- (tan x))) 0.0) (/ (fma (/ (sin x) (- (tan x))) (/ (sin x) (- (tan x))) (/ (* (sin x) (/ (- x) (tan x))) (tan x))) (/ (sin x) (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 31,
    "avg_bits_err_input": 30.51449603473977,
    "avg_bits_err_output": 30.529419757149842,
    "avg_bits_err_improve": -0.014923722410070894,
    "time": 32514.747314453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005875,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.00475,
    "time": 2807.5986328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (/ (- (* 100.0 (pow (+ (/ i n) 1.0) n)) 100.0) (/ i n)))",
    "output_parens": 22,
    "avg_bits_err_input": 47.42998750322962,
    "avg_bits_err_output": 13.622496887240834,
    "avg_bits_err_improve": 33.80749061598878,
    "time": 24347.537841796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= d -6e-141) (fma b (/ d (fma c c (* d d))) (* a (/ c (fma c c (* d d))))) (if (<= d 1e-53) (+ (/ (* b d) (fma c c (* d d))) (* a (/ c (fma c c (* d d))))) (+ (* d (/ b (fma c c (* d d)))) (* c (/ a (fma c c (* d d)))))))",
    "output_parens": 30,
    "avg_bits_err_input": 25.68809225727731,
    "avg_bits_err_output": 22.91457403215766,
    "avg_bits_err_improve": 2.773518225119652,
    "time": 15074.43505859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= d 1.65e-130) (fma b (/ c (+ (* d d) (* c c))) (/ (* a (- d)) (+ (* d d) (* c c)))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d))))))",
    "output_parens": 22,
    "avg_bits_err_input": 25.93468028107988,
    "avg_bits_err_output": 24.049303585359038,
    "avg_bits_err_improve": 1.8853766957208435,
    "time": 15885.51904296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.03275,
    "avg_bits_err_output": 0.02091875355086315,
    "avg_bits_err_improve": 0.011831246449136853,
    "time": 4509.427490234375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (- (exp (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))) 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.47745675145116,
    "avg_bits_err_output": 12.308003652872673,
    "avg_bits_err_improve": 1.1694530985784866,
    "time": 33761.986572265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (- ux (+ (fma ux ux -1.0) (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)))) 0.0) (+ (/ 1.0 (/ 1.0 (- ux (+ (fma ux ux -1.0) (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)))))) (* (* maxCos (* ux ux)) (/ (- ux (+ (fma ux ux -1.0) (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)))) (- ux (+ (fma ux ux -1.0) (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux))))))) (+ 1.0 (* (- ux (fma ux maxCos 1.0)) (- (fma ux maxCos 1.0) ux))))))",
    "output_parens": 48,
    "avg_bits_err_input": 13.509575650849145,
    "avg_bits_err_output": 11.387588643292345,
    "avg_bits_err_improve": 2.1219870075568004,
    "time": 34908.9521484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (+ (* (- 1.0 ux) (* ux (* maxCos zi))) (* (sin (if (!= (* (* PI uy) -2.0) 0.0) (/ (* PI (* (* uy 2.0) (* PI (* uy 2.0)))) (* PI (* uy 2.0))) (* PI (* uy 2.0)))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* (* maxCos maxCos) (* ux (- ux (* ux ux))))))) yi))))",
    "output_parens": 45,
    "avg_bits_err_input": 0.3379176676902881,
    "avg_bits_err_output": 0.37222190622839013,
    "avg_bits_err_improve": -0.03430423853810205,
    "time": 45503.05712890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.20632376014563122,
    "avg_bits_err_output": 0.20632376014563122,
    "avg_bits_err_improve": 0,
    "time": 24085.51513671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (log1p (if (!= (expm1 (/ u1 (- 1.0 u1))) 0.0) (/ 1.0 (/ 1.0 (expm1 (/ u1 (- 1.0 u1))))) (expm1 (/ u1 (- 1.0 u1)))))) (sin (* 6.28318530718 u2)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.5389125018159427,
    "avg_bits_err_output": 0.5721867967301618,
    "avg_bits_err_improve": -0.03327429491421907,
    "time": 23668.6015625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(+ (* (sqrt (/ u1 (- 1.0 u1))) (if (!= (- 1.0 (cos (* 6.28318530718 u2))) 0.0) (/ 1.0 (/ 1.0 (+ (cos (* 6.28318530718 u2)) -1.0))) (+ (cos (* 6.28318530718 u2)) -1.0))) (sqrt (/ u1 (- 1.0 u1))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.32966220470572555,
    "avg_bits_err_output": 0.34891070379811046,
    "avg_bits_err_improve": -0.019248499092384908,
    "time": 22525.891845703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (* (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (- 1.0 (/ 1.0 (+ 1.0 (exp (/ PI s))))) (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ PI (- s)))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))))",
    "output_parens": 71,
    "avg_bits_err_input": 0.3328383993812466,
    "avg_bits_err_output": 0.31338963412483445,
    "avg_bits_err_improve": 0.019448765256412148,
    "time": 54496.45849609375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0629791461110475,
    "avg_bits_err_output": 0.044465333529752085,
    "avg_bits_err_improve": 0.01851381258129542,
    "time": 13340.302490234375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1524771533391353,
    "avg_bits_err_output": 0.11342537258139229,
    "avg_bits_err_improve": 0.039051780757743015,
    "time": 24085.954345703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6763791529307713,
    "avg_bits_err_output": 0.6690207173900792,
    "avg_bits_err_improve": 0.007358435540692154,
    "time": 20779.898681640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.16121027039678423,
    "avg_bits_err_output": 0.16244700337331874,
    "avg_bits_err_improve": -0.0012367329765345103,
    "time": 20028.447265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.601394269178739,
    "avg_bits_err_output": 2.598342389491329,
    "avg_bits_err_improve": 0.00305187968740972,
    "time": 35905.501953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (/ (* (/ 1.0 v) (* cosTheta_i (/ (/ 0.5 v) (exp (* sinTheta_O (/ sinTheta_i v)))))) (sinh (/ 1.0 v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.46020301216139614,
    "avg_bits_err_output": 0.3480217413503019,
    "avg_bits_err_improve": 0.11218127081109425,
    "time": 24595.840576171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (+ (/ (- (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) 1.0) v) 0.6931)) (/ 0.5 v))",
    "output_parens": 9,
    "avg_bits_err_input": 0.11850146213482501,
    "avg_bits_err_output": 0.11583373681642783,
    "avg_bits_err_improve": 0.0026677253183971794,
    "time": 17663.510986328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(- (/ (- 1.0 (* alpha alpha)) (+ (* (* PI (log (* alpha alpha))) (- (* (* alpha alpha) (* cosTheta cosTheta)) (* cosTheta cosTheta))) (* PI (log (* alpha alpha))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.47145509358540966,
    "avg_bits_err_output": 0.46976417962285266,
    "avg_bits_err_improve": 0.0016909139625569947,
    "time": 25374.4296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- -0.3333333333333333 (* u -1.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 14,
    "avg_bits_err_input": 1.3250281364382597,
    "avg_bits_err_output": 0.7646529720024482,
    "avg_bits_err_improve": 0.5603751644358115,
    "time": 24105.88525390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (+ (+ (log (/ 1.0 (fma u -4.0 1.0))) 2.0) -2.0) s) 2.0) (/ (* (log (/ 1.0 (+ 1.0 (* u -4.0)))) s) 2.0))",
    "output_parens": 14,
    "avg_bits_err_input": 12.524832499128747,
    "avg_bits_err_output": 12.64558737939677,
    "avg_bits_err_improve": -0.12075488026802361,
    "time": 20384.60498046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (/ (* (exp (* r (/ -0.3333333333333333 s))) 0.75) (* s 6.0)) (/ (* PI (/ (* PI (* r r)) r)) PI)))",
    "output_parens": 21,
    "avg_bits_err_input": 0.13214706366884663,
    "avg_bits_err_output": 0.1481945034034331,
    "avg_bits_err_improve": -0.01604743973458647,
    "time": 29956.40673828125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9054577894286165,
    "avg_bits_err_output": 0.7212850458165323,
    "avg_bits_err_improve": 0.18417274361208424,
    "time": 29123.676025390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6895539068954744,
    "avg_bits_err_output": 0.46369176145487495,
    "avg_bits_err_improve": 0.2258621454405994,
    "time": 20577.023193359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(if (!= (+ (sqrt (- (log1p (- u1)))) (* (sqrt (- (log1p (- u1)))) (+ (sin (* 2.0 (* PI u2))) 1.0))) 0.0) (/ (* (+ (sqrt (- (log1p (- u1)))) (* (sqrt (- (log1p (- u1)))) (+ (sin (* 2.0 (* PI u2))) 1.0))) (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2))))) (+ (sqrt (- (log1p (- u1)))) (* (sqrt (- (log1p (- u1)))) (+ (sin (* 2.0 (* PI u2))) 1.0)))) (* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2)))))",
    "output_parens": 62,
    "avg_bits_err_input": 13.516249132322612,
    "avg_bits_err_output": 0.5634714758130236,
    "avg_bits_err_improve": 12.952777656509587,
    "time": 23660.082275390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (exp (log1p (* (cos (* 2.0 (* PI u2))) (sqrt (- (if (!= (- -1.0 (+ 1.0 (log (- 1.0 u1)))) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (* (- -1.0 (log (- 1.0 u1))) (- -1.0 (log (- 1.0 u1)))))))) (- -1.0 (+ 1.0 (log (- 1.0 u1))))) (log (- 1.0 u1)))))))) 1.0)",
    "output_parens": 33,
    "avg_bits_err_input": 13.568327845070785,
    "avg_bits_err_output": 12.509585152141375,
    "avg_bits_err_improve": 1.0587426929294104,
    "time": 21486.4501953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* alpha (- (log1p (- u0)))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.133087496674943,
    "avg_bits_err_output": 0.328910526564393,
    "avg_bits_err_improve": 13.80417697011055,
    "time": 13894.230224609375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (if (!= (/ sin2phi (* alphay alphay)) 0.0) (/ 1.0 (- (/ 1.0 (/ (/ sin2phi alphay) alphay)) 0.0)) (/ sin2phi (* alphay alphay)))))",
    "output_parens": 18,
    "avg_bits_err_input": 12.67058122986409,
    "avg_bits_err_output": 12.67112688687189,
    "avg_bits_err_improve": -0.0005456570077999601,
    "time": 19039.832763671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -5e+37) (- (* PI l) (/ 0.0 F)) (if (<= (* PI l) 50000000.0) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (- (* PI l) (/ 0.0 F))))",
    "output_parens": 18,
    "avg_bits_err_input": 16.816575316829883,
    "avg_bits_err_output": 1.048693009791966,
    "avg_bits_err_improve": 15.767882307037917,
    "time": 24424.898193359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21608496250072115,
    "avg_bits_err_output": 0.154125,
    "avg_bits_err_improve": 0.06195996250072114,
    "time": 14212.13134765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.629165918357492,
    "avg_bits_err_output": 10.364107160136125,
    "avg_bits_err_improve": 3.2650587582213664,
    "time": 22323.17333984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (- (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) -1.0) 1.0) (* PI -0.25))",
    "output_parens": 34,
    "avg_bits_err_input": 61.49983771544291,
    "avg_bits_err_output": 1.9283152861253323,
    "avg_bits_err_improve": 59.571522429317575,
    "time": 44628.5576171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* (* l l) (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.95922449358038,
    "avg_bits_err_output": 35.10424199195204,
    "avg_bits_err_improve": 7.854982501628342,
    "time": 29695.180419921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 4.050222550256112,
    "avg_bits_err_output": 4.050222550256112,
    "avg_bits_err_improve": 0,
    "time": 27495.131591796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.9870666069875106,
    "avg_bits_err_output": 0.9870666069875106,
    "avg_bits_err_improve": 0,
    "time": 9966.24462890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (+ (/ (pow (/ Om Omc) 2.0) (+ -1.0 (* (pow (/ t l) 2.0) -2.0))) (/ -1.0 (+ -1.0 (* (pow (/ t l) 2.0) -2.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 10.191200829976648,
    "avg_bits_err_output": 10.191366070988506,
    "avg_bits_err_improve": -0.0001652410118584413,
    "time": 17940.303466796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -7.5e+79) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (if (<= U 1e-59) (sqrt (* (* 2.0 n) (* U (- t (fma n (* (pow (/ l Om) 2.0) (- U U*)) (* 2.0 (* l (/ l Om)))))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))))",
    "output_parens": 45,
    "avg_bits_err_input": 34.24242992177961,
    "avg_bits_err_output": 29.752999752111634,
    "avg_bits_err_improve": 4.489430169667976,
    "time": 36253.222900390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -2.25e-104) (/ 2.0 (/ (* (tan k) (* (pow (/ k t) 2.0) (* (pow t 3.0) (/ (sin k) l)))) l)) (if (<= t 1.9e-122) (/ 2.0 (* (/ (sin k) l) (* (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) (/ (tan k) l)))) (/ 2.0 (/ (* (pow (/ k t) 2.0) (* (tan k) (* (pow t 3.0) (/ (sin k) l)))) l))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.54258284319369,
    "avg_bits_err_output": 34.97153614275653,
    "avg_bits_err_improve": 12.571046700437165,
    "time": 44765.67822265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= (* l l) 4e+102) (/ 2.0 (* (/ (* (sin k) (/ (pow t 3.0) l)) l) (* (tan k) (+ (pow (/ k t) 2.0) 2.0)))) (/ 2.0 (* (/ (+ 2.0 (pow (/ k t) 2.0)) l) (* (tan k) (* (sin k) (/ (pow t 3.0) l))))))",
    "output_parens": 27,
    "avg_bits_err_input": 32.46389821472174,
    "avg_bits_err_output": 27.82526610502491,
    "avg_bits_err_improve": 4.638632109696829,
    "time": 25071.532958984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (+ (* a2 a2) (* a1 a1)) (sqrt 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5391338375223579,
    "avg_bits_err_output": 0.49081973907953863,
    "avg_bits_err_improve": 0.04831409844281925,
    "time": 22592.084716796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* PI (* n 2.0)) (* k -0.5)) (/ (sqrt (* PI (* n 2.0))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4908464607940856,
    "avg_bits_err_output": 0.41853101562950756,
    "avg_bits_err_improve": 0.07231544516457805,
    "time": 19838.54638671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (/ (* J (expm1 (+ l l))) (exp l)) (cos (/ K 2.0))) U)",
    "output_parens": 9,
    "avg_bits_err_input": 17.094553649194772,
    "avg_bits_err_output": 0.15167708319999193,
    "avg_bits_err_improve": 16.94287656599478,
    "time": 21659.141845703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= K -1.35e+154) (* (cos (- (/ (if (!= (- (* K n) (* K m)) 0.0) (- (* K (* m (* m (/ K (* K (- m n)))))) (* K (* (* n n) (/ K (* K (- m n)))))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (if (<= K 1.35e+154) (* (cos (- (/ (if (!= (- (* K n) (* K m)) 0.0) (fma (+ n m) (* (* K K) (/ (- n m) (* (- n m) K))) 0.0) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (- (* K n) (* K m)) 0.0) (- (* K (* m (* m (/ K (* K (- m n)))))) (* K (* (* n n) (/ K (* K (- m n)))))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))))",
    "output_parens": 101,
    "avg_bits_err_input": 15.597584544532033,
    "avg_bits_err_output": 5.67901247623161,
    "avg_bits_err_improve": 9.918572068300424,
    "time": 28184.754638671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* -2.0 J) (* (cos (/ K 2.0)) (sqrt (+ 1.0 (pow (/ (/ U (+ J J)) (cos (/ K 2.0))) 2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.834719360937772,
    "avg_bits_err_output": 17.84478308281331,
    "avg_bits_err_improve": -0.0100637218755395,
    "time": 18117.36474609375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.150926840649017,
    "avg_bits_err_output": 10.770780343125782,
    "avg_bits_err_improve": 3.380146497523235,
    "time": 12502.30908203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+275) (* c0 (sqrt (/ (* A (/ 2.0 l)) (+ V V)))) (if (<= (* V l) -5e-240) (* c0 (sqrt (/ A (* V l)))) (if (<= (* V l) 5e-226) (* c0 (sqrt (/ (- (- A (* A (/ -2.0 V))) A) (+ l l)))) (if (<= (* V l) 4e+66) (* c0 (sqrt (* (/ 2.0 (* V (+ l l))) A))) (* c0 (sqrt (- (/ (+ (/ A l) (/ A (+ l l))) (+ V V)) (/ (- (/ A (+ l l))) (+ V V)))))))))",
    "output_parens": 50,
    "avg_bits_err_input": 18.987251701785507,
    "avg_bits_err_output": 15.027788165578498,
    "avg_bits_err_improve": 3.959463536207009,
    "time": 18331.610107421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 5e+269) (* (/ c0 (* 2.0 w)) (+ (sqrt (* (fma d (* c0 (/ d (* D (* D (* w h))))) M) (- (* d (* c0 (/ d (* D (* D (* w h)))))) M))) (/ (* (* c0 (/ d (* D (* D (* w h))))) (+ d d)) 2.0))) (* (/ c0 (* 2.0 w)) (if (!= (sqrt (* (fma (/ c0 (* D D)) (* d (/ (/ d w) h)) M) (- (* (/ (* d d) w) (/ (/ c0 h) (* D D))) M))) 0.0) 0.0 (fma d (* d (/ (/ (/ c0 h) (* D D)) w)) (sqrt (* (+ (* d (/ (/ (* d (/ (/ c0 D) D)) h) w)) M) (- (* (/ (* d d) w) (/ (/ c0 h) (* D D))) M)))))))",
    "output_parens": 97,
    "avg_bits_err_input": 59.61431169794126,
    "avg_bits_err_output": 34.32183746436751,
    "avg_bits_err_improve": 25.29247423357375,
    "time": 46857.9482421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* M D) -4e-40) (* (sqrt (/ d l)) (- (sqrt (/ d h)) (* (/ (pow (* D (/ M (* 2.0 d))) 2.0) l) (* (* 0.5 h) (sqrt (/ d h)))))) (if (<= (* M D) 5e-36) (- (* (sqrt (/ d h)) (sqrt (/ d l))) (/ (* (sqrt (/ d h)) (* (sqrt (/ d l)) (* (pow (/ (* M D) (* d 2.0)) 2.0) h))) (+ l l))) (* (sqrt (/ d l)) (- (sqrt (/ d h)) (* (/ (pow (/ (* M (/ D 2.0)) d) 2.0) l) (* (* 0.5 h) (sqrt (/ d h))))))))",
    "output_parens": 57,
    "avg_bits_err_input": 26.885601663223525,
    "avg_bits_err_output": 24.906802135217582,
    "avg_bits_err_improve": 1.9787995280059434,
    "time": 46792.56689453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (- (/ (/ -0.5 (hypot 1.0 x)) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (/ 0.5 (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 27,
    "avg_bits_err_input": 15.011050498090572,
    "avg_bits_err_output": 14.521608901178919,
    "avg_bits_err_improve": 0.4894415969116537,
    "time": 24618.2255859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9837712406251803,
    "avg_bits_err_output": 0.011290241011860921,
    "avg_bits_err_improve": 0.9724809996133194,
    "time": 3681.333740234375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (+ 2.0 (* (* v v) -6.0)))) (* t (- 1.0 (* v v)))) (* (* v v) (/ (/ 5.0 (* PI (* t (- 1.0 (* v v))))) (sqrt (+ 2.0 (* (* v v) -6.0))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.42716751275219256,
    "avg_bits_err_output": 0.12669447465304276,
    "avg_bits_err_improve": 0.3004730380991498,
    "time": 14483.836669921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (- 1.0 (* 3.0 (* v v)))) (/ (- (* (* v v) (sqrt 2.0)) (sqrt 2.0)) -4.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.011667481250360576,
    "avg_bits_err_output": 0.012225919365257201,
    "avg_bits_err_improve": -0.0005584381148966248,
    "time": 7244.4794921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5145300913881009,
    "avg_bits_err_output": 0.5145300913881009,
    "avg_bits_err_improve": 0,
    "time": 13254.484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.1490949785499773,
    "avg_bits_err_output": 2.1067506176122066,
    "avg_bits_err_improve": 0.04234436093777072,
    "time": 9685.158447265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (* (exp (/ (- Vef (- (- Ec mu) EDonor)) (+ KbT KbT))) (exp (/ (- Vef (- (- Ec mu) EDonor)) (+ KbT KbT)))))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.014188321399553346,
    "avg_bits_err_output": 0.015169321012872713,
    "avg_bits_err_improve": -0.0009809996133193673,
    "time": 8541.366455078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (fma a a (* b b)) 2.0) (* b (* b 4.0))) -1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.18094172101615547,
    "avg_bits_err_output": 0.18069172101615547,
    "avg_bits_err_improve": 0.0002500000000000002,
    "time": 18274.5439453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.18970316694580563,
    "avg_bits_err_output": 0.18970316694580563,
    "avg_bits_err_improve": 0,
    "time": 27078.481689453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (- (* a a) (* a (* a a))) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.18203309357999456,
    "avg_bits_err_output": 0.18234377193339082,
    "avg_bits_err_improve": -0.00031067835339626537,
    "time": 26214.72021484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (/ (- -1.0 (+ 1.0 (/ (+ x x) (sqrt (fma x x (* 4.0 (* p p))))))) -2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 12.932476742341763,
    "avg_bits_err_output": 12.933073845907414,
    "avg_bits_err_improve": -0.0005971035656511248,
    "time": 17352.18701171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.15322183461517,
    "avg_bits_err_output": 0.056,
    "avg_bits_err_improve": 41.09722183461517,
    "time": 6116.635986328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -2e-8) (/ (/ (+ (sin x) (- (sin x) (+ x x))) (- (tan x) x)) 2.0) (if (<= x 2e-8) (if (!= (/ x (- x (tan x))) 0.0) 0.0 (/ (- x (sin x)) (- x (tan x)))) (if (!= (/ (sin x) (- (tan x) x)) 0.0) (/ (- (* (/ (sin x) (- (tan x) x)) (/ (sin x) (- (tan x) x))) (* (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))) (/ (sin x) (- (tan x) x))) (/ (- x (sin x)) (- x (tan x))))))",
    "output_parens": 57,
    "avg_bits_err_input": 31.533065694187442,
    "avg_bits_err_output": 30.635258598216577,
    "avg_bits_err_improve": 0.8978070959708653,
    "time": 23153.68994140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 34.389283387442845,
    "avg_bits_err_output": 34.389283387442845,
    "avg_bits_err_improve": 0,
    "time": 14778.662841796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.129451249660974,
    "avg_bits_err_output": 34.129451249660974,
    "avg_bits_err_improve": 0,
    "time": 16609.50390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.134044478686224,
    "avg_bits_err_output": 30.333461651200427,
    "avg_bits_err_improve": 0.8005828274857976,
    "time": 16308.26123046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.23633584885353,
    "avg_bits_err_output": 11.183093269477437,
    "avg_bits_err_improve": 21.05324257937609,
    "time": 32066.967041015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (expm1 (- (log1p N) (log N)))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.669629428432366,
    "avg_bits_err_output": 29.680498664843533,
    "avg_bits_err_improve": -0.010869236411167549,
    "time": 10742.716064453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (* (/ 1.0 x) (+ (/ x (+ 1.0 x)) 0.0)) (/ 1.0 x))",
    "output_parens": 7,
    "avg_bits_err_input": 14.698462470854961,
    "avg_bits_err_output": 14.701687267794819,
    "avg_bits_err_improve": -0.003224796939857555,
    "time": 16249.3447265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (log (exp (cos (+ x eps)))) (cos x))",
    "output_parens": 6,
    "avg_bits_err_input": 39.75990502859051,
    "avg_bits_err_output": 39.834887648173435,
    "avg_bits_err_improve": -0.07498261958292574,
    "time": 22362.718994140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.6509733651925,
    "avg_bits_err_output": 29.34201610720836,
    "avg_bits_err_improve": 0.3089572579841402,
    "time": 14090.4169921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.378223525986172,
    "avg_bits_err_output": 30.378223525986172,
    "avg_bits_err_improve": 0,
    "time": 23533.972900390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (+ b (sqrt (fma b b (* (* a c) -4.0)))) (+ b b)) (* a 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 34.51695654767653,
    "avg_bits_err_output": 34.5296959284687,
    "avg_bits_err_improve": -0.012739380792169186,
    "time": 20368.8623046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0))))) 0.0) (+ (/ (- (* a (* c -4.0))) (+ (sqrt (fma a (* c -4.0) (* b b))) (sqrt (fma a (* c -4.0) (* b b))))) (+ (/ (- (* (sqrt (fma a (* c -4.0) (* b b))) (- b)) (* b b)) (+ (sqrt (fma a (* c -4.0) (* b b))) (sqrt (fma a (* c -4.0) (* b b))))) (/ (/ (- (* (sqrt (fma a (* c -4.0) (* b b))) (- b)) (fma a (* c -4.0) (* b b))) (sqrt (fma a (* c -4.0) (* b b)))) 2.0))) (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 2.0))",
    "output_parens": 64,
    "avg_bits_err_input": 34.04895770910524,
    "avg_bits_err_output": 27.53906037626715,
    "avg_bits_err_improve": 6.5098973328380865,
    "time": 22192.771484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (+ (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ -1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.285247213091395,
    "avg_bits_err_output": 0.8774611403947302,
    "avg_bits_err_improve": 60.407786072696666,
    "time": 21219.357177734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00828121079103,
    "avg_bits_err_output": 44.223531720743274,
    "avg_bits_err_improve": 18.78474949004776,
    "time": 11618.500732421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.7186003831563,
    "avg_bits_err_output": 58.68284699357927,
    "avg_bits_err_improve": 0.03575338957703167,
    "time": 16994.841552734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(log (+ 1.0 (expm1 (+ (/ 1.0 x) (/ -1.0 (tan x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 60.00642841108273,
    "avg_bits_err_output": 60.006371007938135,
    "avg_bits_err_improve": 5.7403144595014055e-05,
    "time": 29198.06689453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (if (!= (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a)))) 0.0) (/ 1.0 (/ 1.0 (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a)))))) (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a))))) (expm1 (* eps b)))",
    "output_parens": 28,
    "avg_bits_err_input": 60.17191290402927,
    "avg_bits_err_output": 29.586615024582244,
    "avg_bits_err_improve": 30.585297879447026,
    "time": 27951.892333984375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.5112415262548,
    "avg_bits_err_output": 0.4749906015629508,
    "avg_bits_err_improve": 41.03625092469185,
    "time": 3801.95751953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.77728461579644,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.77678461579644,
    "time": 2677.215576171875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.252303740510047,
    "avg_bits_err_output": 0.016165233569958675,
    "avg_bits_err_improve": 29.23613850694009,
    "time": 5271.0029296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (- (if (!= (+ 1.0 (exp x)) 0.0) (/ (expm1 (+ x x)) (- -1.0 (exp x))) (- (expm1 x))) (expm1 (- x))))",
    "output_parens": 15,
    "avg_bits_err_input": 29.845495044499835,
    "avg_bits_err_output": 29.001674953281537,
    "avg_bits_err_improve": 0.8438200912182978,
    "time": 24169.87060546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ 1.0 x)) 0.0) (fma (/ 1.0 (+ 1.0 x)) (/ (+ (/ 1.0 (+ x -1.0)) (/ -2.0 x)) (/ 1.0 (+ 1.0 x))) (/ 1.0 (+ 1.0 x))) (+ (/ 1.0 (+ 1.0 x)) (+ (/ 1.0 (+ x -1.0)) (/ -2.0 x))))",
    "output_parens": 23,
    "avg_bits_err_input": 10.041605755021347,
    "avg_bits_err_output": 10.042465319393965,
    "avg_bits_err_improve": -0.0008595643726181379,
    "time": 27335.9296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (/ (log1p (expm1 (sin (+ x eps)))) (cos (+ x eps))) (tan x))",
    "output_parens": 9,
    "avg_bits_err_input": 36.556955566873185,
    "avg_bits_err_output": 36.68515979468366,
    "avg_bits_err_improve": -0.12820422781047824,
    "time": 18708.343017578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.69974681681252,
    "avg_bits_err_output": 0.16473364687698316,
    "avg_bits_err_improve": 29.53501316993554,
    "time": 13049.49267578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (sin x) 0.0) (+ (/ -1.0 (/ 1.0 (sin x))) (sin (+ x eps))) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 13,
    "avg_bits_err_input": 36.88128012781721,
    "avg_bits_err_output": 36.92167593763576,
    "avg_bits_err_improve": -0.0403958098185484,
    "time": 20870.12646484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.94802338498216,
    "avg_bits_err_output": 19.81904333497369,
    "avg_bits_err_improve": 0.12898005000847235,
    "time": 16556.58203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (* (- (* (atan (+ 1.0 N)) (atan (+ 1.0 N))) (* (atan N) (atan N))) (/ 1.0 (+ (atan (+ 1.0 N)) (atan N)))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 25,
    "avg_bits_err_input": 15.245350639810278,
    "avg_bits_err_output": 15.255038885246641,
    "avg_bits_err_improve": -0.009688245436363374,
    "time": 13254.3603515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.844951854568617,
    "avg_bits_err_output": 1.2177357040041645,
    "avg_bits_err_improve": 28.62721615056445,
    "time": 24126.779052734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (+ (/ (fma (- m) m (* m m)) v) (/ (- m (* m m)) v)) 1.0) (- 1.0 m))",
    "output_parens": 11,
    "avg_bits_err_input": 0.07497180468885216,
    "avg_bits_err_output": 0.07195056406367188,
    "avg_bits_err_improve": 0.003021240625180277,
    "time": 18817.33154296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(fma (* a b) (* a (/ b -4.0)) (* (* b (+ a (+ a a))) (* a (/ b -4.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 16.058677217463785,
    "avg_bits_err_output": 0.2894345875079325,
    "avg_bits_err_improve": 15.769242629955853,
    "time": 11284.00390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (if (!= (cos (/ (* (+ angle angle) (* PI 2.0)) 720.0)) 0.0) (/ 1.0 (/ 1.0 (cos (* (/ (+ angle angle) -720.0) (- 1.0 (exp (log1p (* PI 2.0)))))))) (cos (/ (* (+ angle angle) (* PI 2.0)) 720.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 30,
    "avg_bits_err_input": 20.33803249018788,
    "avg_bits_err_output": 20.356598202880235,
    "avg_bits_err_improve": -0.018565712692353742,
    "time": 37131.73291015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* PI (/ angle 180.0))) (log (+ 1.0 (expm1 (- (exp (log1p (cos (* PI (/ angle 180.0))))) 1.0))))))",
    "output_parens": 18,
    "avg_bits_err_input": 31.145442296575986,
    "avg_bits_err_output": 31.14636826080464,
    "avg_bits_err_improve": -0.0009259642286529868,
    "time": 45077.2587890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (if (!= (* PI (/ angle -180.0)) 0.0) (/ 1.0 (/ 1.0 (* angle (* PI 0.005555555555555556)))) (* angle (* PI 0.005555555555555556))))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.316869005994228,
    "avg_bits_err_output": 20.290744507618033,
    "avg_bits_err_improve": 0.026124498376194794,
    "time": 41798.117431640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.18225020351258203,
    "avg_bits_err_output": 0.1824634750397233,
    "avg_bits_err_improve": -0.00021327152714126218,
    "time": 16416.5263671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3316504019803842,
    "avg_bits_err_output": 0.31762994799929856,
    "avg_bits_err_improve": 0.014020453981085645,
    "time": 19380.546630859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (- (sin v)) (/ e (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13414624062518027,
    "avg_bits_err_output": 0.13429248125036058,
    "avg_bits_err_improve": -0.0001462406251803161,
    "time": 18774.905029296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.799114515947352,
    "avg_bits_err_output": 16.791983961601243,
    "avg_bits_err_improve": 0.007130554346108653,
    "time": 32856.47412109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 52.903880467862585,
    "avg_bits_err_output": 0.16599793281619593,
    "avg_bits_err_improve": 52.73788253504639,
    "time": 27250.38525390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (- (* b b) (* c (* a -4.0))) 0.0) (/ (- (* b (* b (* b b))) (* (* (* a c) 16.0) (* a c))) (- (* b b) (* c (* a -4.0)))) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 41,
    "avg_bits_err_input": 28.549210173889637,
    "avg_bits_err_output": 0.3533784003982195,
    "avg_bits_err_improve": 28.195831773491417,
    "time": 26007.9638671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.800863444631155,
    "avg_bits_err_output": 0.24222706875829292,
    "avg_bits_err_improve": 43.558636375872865,
    "time": 30962.79833984375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (- (+ b (sqrt (fma b b (* (* a c) -4.0)))) (+ b b)) (* a 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 34.52001636568025,
    "avg_bits_err_output": 34.5296959284687,
    "avg_bits_err_improve": -0.009679562788448948,
    "time": 20928.51123046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (- (* (cos phi2) (cos (- lambda1 lambda2))) (cos phi1)) 0.0) (/ (* (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)) (- (* (cos phi2) (cos (- lambda1 lambda2))) (cos phi1))) (- (* (cos phi2) (cos (- lambda1 lambda2))) (cos phi1))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.8023021374663263,
    "avg_bits_err_output": 0.8076522286333282,
    "avg_bits_err_improve": -0.0053500911670019136,
    "time": 34902.703369140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (- 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))) 0.0) (/ (/ (+ (/ -16.0 (* (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))) (+ (/ -16.0 (* (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))) 2.0)) 2.0) (- 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) (+ 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 76,
    "avg_bits_err_input": 29.07521441751625,
    "avg_bits_err_output": 29.033205559434872,
    "avg_bits_err_improve": 0.042008858081377554,
    "time": 22889.296142578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= x -5.0) (+ (/ -2.0 (- -1.0 (exp (* x -2.0)))) -1.0) (/ (expm1 (* x -2.0)) (- -1.0 (exp (* x -2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 58.215840184959255,
    "avg_bits_err_output": 0.02089624062518029,
    "avg_bits_err_improve": 58.19494394433408,
    "time": 16420.7783203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (- (exp (+ x (* x -2.0))))) 2.0)",
    "output_parens": 8,
    "avg_bits_err_input": 58.18402014172814,
    "avg_bits_err_output": 0.03452124062518029,
    "avg_bits_err_improve": 58.14949890110296,
    "time": 6094.416015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(- 0.0 (log1p (expm1 (/ -2.0 (+ (exp x) (exp (- x)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.010635515405487158,
    "avg_bits_err_output": 0.015553200168429818,
    "avg_bits_err_improve": -0.004917684762942661,
    "time": 4229.04638671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.90577124062518,
    "avg_bits_err_output": 31.90577124062518,
    "avg_bits_err_improve": 0,
    "time": 4578.2392578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (/ x (/ (- 1.0 x) 2.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.7038449870256,
    "avg_bits_err_output": 0.014771240625180291,
    "avg_bits_err_improve": 58.68907374640042,
    "time": 13684.40478515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log1p (- (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.011698120312590146,
    "avg_bits_err_improve": 0.0001768796874098543,
    "time": 5076.92138671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (sin t) (* ew (cos (atan (/ eh (* ew (tan t))))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12425,
    "avg_bits_err_output": 0.12494812031259014,
    "avg_bits_err_improve": -0.0006981203125901447,
    "time": 26941.506103515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1296674812503606,
    "avg_bits_err_output": 0.1296674812503606,
    "avg_bits_err_improve": 0,
    "time": 13789.13427734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (cos (/ (+ phi1 phi2) 2.0)) (- lambda1 lambda2) (fma (- lambda2) (cos (/ (+ phi1 phi2) 2.0)) (* (cos (/ (+ phi1 phi2) 2.0)) lambda2))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.39515394909506,
    "avg_bits_err_output": 3.831820118824024,
    "avg_bits_err_improve": 35.563333830271034,
    "time": 27246.735107421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 13.995094089426662,
    "avg_bits_err_output": 0.009483795589947925,
    "avg_bits_err_improve": 13.985610293836714,
    "time": 7222.26611328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (expm1 (log1p (* (sin delta) (* (cos phi1) (cos theta))))))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.15595999319001144,
    "avg_bits_err_output": 0.15635549649786312,
    "avg_bits_err_improve": -0.0003955033078516801,
    "time": 38108.028564453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.908560327204256,
    "avg_bits_err_output": 0.16748609062806488,
    "avg_bits_err_improve": 52.74107423657619,
    "time": 29462.315185546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* -3.0 a)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.717548485991898,
    "avg_bits_err_output": 0.3433099640752107,
    "avg_bits_err_improve": 28.374238521916688,
    "time": 25674.978271484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.82823094140982,
    "avg_bits_err_output": 0.24263026406944085,
    "avg_bits_err_improve": 43.58560067734038,
    "time": 23521.6513671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.55748047305467,
    "avg_bits_err_output": 34.55748047305467,
    "avg_bits_err_improve": 0,
    "time": 20765.43603515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (sin phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 15,
    "avg_bits_err_input": 12.819481171290647,
    "avg_bits_err_output": 12.819858029054178,
    "avg_bits_err_improve": -0.0003768577635305803,
    "time": 37341.21044921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.702365385298744,
    "avg_bits_err_output": 0.5223066279335955,
    "avg_bits_err_improve": 29.18005875736515,
    "time": 18896.9169921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.010125,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 0,
    "time": 5827.7607421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (- (+ -1.0 (/ x (+ x 1.0))) (/ 1.0 (+ x 1.0))) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 14.72004917919412,
    "avg_bits_err_output": 12.788290954769414,
    "avg_bits_err_improve": 1.9317582244247067,
    "time": 13363.5986328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* 2.0 (fma (* F (- A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (- (pow B 2.0) (* A (* C 4.0))) (* (- (pow B 2.0) (* A (* C 4.0))) (* C F))))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 25,
    "avg_bits_err_input": 52.124822280773145,
    "avg_bits_err_output": 51.81237422518442,
    "avg_bits_err_improve": 0.31244805558872457,
    "time": 37197.32763671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output_parens": 12,
    "avg_bits_err_input": 30.321259719347697,
    "avg_bits_err_output": 30.321259719347697,
    "avg_bits_err_improve": 0,
    "time": 24182.1953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (* F (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.34563997338811,
    "avg_bits_err_output": 52.064413989207054,
    "avg_bits_err_improve": 0.2812259841810558,
    "time": 37619.873046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (/ (* (+ (cbrt (/ g (+ a a))) 2.0) (cbrt (/ g (+ a a)))) (+ (cbrt (/ g (+ a a))) 2.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 22,
    "avg_bits_err_input": 15.356114480563749,
    "avg_bits_err_output": 15.365310533692542,
    "avg_bits_err_improve": -0.009196053128793125,
    "time": 28356.503173828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (+ g (sqrt (fma h (- h) (* g g)))) 0.0) (/ (- (* h (- h))) (- (- g) (sqrt (fma h (- h) (* g g))))) (- (sqrt (fma h (- h) (* g g))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 35,
    "avg_bits_err_input": 35.675476118018906,
    "avg_bits_err_output": 35.430462421738504,
    "avg_bits_err_improve": 0.24501369628040237,
    "time": 19548.1123046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (if (!= (cos (/ (fma 2.0 PI (acos (/ g (- h)))) 3.0)) 0.0) (* (* (cos (if (!= (* PI 0.6666666666666666) 0.0) (/ (fma (* PI 0.6666666666666666) (* PI 0.6666666666666666) (* (acos (/ g (- h))) (* PI 0.2222222222222222))) (* PI 0.6666666666666666)) (* (fma 2.0 PI (acos (/ g (- h)))) 0.3333333333333333))) (cos (* (fma 2.0 PI (acos (/ g (- h)))) 0.3333333333333333))) (/ 1.0 (cos (* (fma 2.0 PI (acos (/ g (- h)))) 0.3333333333333333)))) (cos (/ (fma 2.0 PI (acos (/ g (- h)))) 3.0))))",
    "output_parens": 49,
    "avg_bits_err_input": 0.9892528203183604,
    "avg_bits_err_output": 0.03686597813022839,
    "avg_bits_err_improve": 0.952386842188132,
    "time": 20532.066650390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (- (expm1 b) (- -1.0 (exp a))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.6456981203125902,
    "avg_bits_err_output": 0.671610568295179,
    "avg_bits_err_improve": -0.025912447982588738,
    "time": 3996.41943359375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (* a1 a2) -2e+243) (* (/ a2 b2) (/ a1 b1)) (if (<= (* a1 a2) -2e-196) (/ (* a1 a2) (* b1 b2)) (if (<= (* a1 a2) 1e-150) (* (/ a2 b2) (/ a1 b1)) (if (<= (* a1 a2) 5e+226) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 27,
    "avg_bits_err_input": 11.785799122496455,
    "avg_bits_err_output": 5.276713061560276,
    "avg_bits_err_improve": 6.509086060936179,
    "time": 7910.98388671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4428257887595321,
    "avg_bits_err_output": 0.396125,
    "avg_bits_err_improve": 0.0467007887595321,
    "time": 10331.911376953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(log1p (if (!= (- 1.0 (hypot 1.0 x)) 0.0) (* (+ (hypot 1.0 x) -1.0) (/ (- 1.0 (+ x (hypot 1.0 x))) (- 1.0 (hypot 1.0 x)))) (+ x (+ (hypot 1.0 x) -1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 53.11726904540219,
    "avg_bits_err_output": 15.961478062685226,
    "avg_bits_err_improve": 37.155790982716965,
    "time": 16670.528564453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.7380536978855154,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.7380536978855154,
    "time": 2267.85400390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- 1.0 (- (+ 1.0 (* 2.0 (/ x (+ x 1.0)))) 1.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.014042481250360577,
    "avg_bits_err_improve": 0.00045751874963942396,
    "time": 8336.619384765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1156.6875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* w r) (* (* w (/ r (- 1.0 v))) (- 0.375 (* v 0.25)))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.970045637983286,
    "avg_bits_err_output": 0.6031596536368055,
    "avg_bits_err_improve": 12.366885984346482,
    "time": 22732.9072265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (* x1 -6.0)) (+ (* (* x1 x1) (* (/ (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) (* (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (/ (* x1 2.0) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0))))))) (+ x1 x1)))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5116868640749087,
    "avg_bits_err_output": 0.24896713813385346,
    "avg_bits_err_improve": 0.26271972594105525,
    "time": 68122.36206054688,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.28419832474688,
    "avg_bits_err_output": 1.3172969641566725,
    "avg_bits_err_improve": 16.966901360590207,
    "time": 6326.98046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* (* x x) (* -0.12900613773279798 x)) (* (- x) 0.954929658551372))",
    "output_parens": 6,
    "avg_bits_err_input": 0.22184436093777044,
    "avg_bits_err_output": 0.1892099625007211,
    "avg_bits_err_improve": 0.03263439843704932,
    "time": 10907.0087890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0021981203125901443,
    "avg_bits_err_output": 0.0021981203125901443,
    "avg_bits_err_improve": 0,
    "time": 2339.927490234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI (- (/ 0.5 a) (/ 0.5 b))) (- b a)) (+ a b))",
    "output_parens": 8,
    "avg_bits_err_input": 14.084617614909417,
    "avg_bits_err_output": 0.30799135469750594,
    "avg_bits_err_improve": 13.776626260211911,
    "time": 16464.6533203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (/ (+ 1.0 (/ 1.0 eps)) (exp (* (- 1.0 eps) x))) (/ (/ 1.0 eps) (exp (* x (+ 1.0 eps))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 30.466625857289806,
    "avg_bits_err_output": 25.60537693358728,
    "avg_bits_err_improve": 4.861248923702526,
    "time": 22229.76220703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (expm1 (log1p (/ 1.0 (fma (- 2.0 (/ 2.0 (+ (/ t t) t))) (- 2.0 (/ 2.0 (+ (/ t t) t))) 2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.013125,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 0.006124999999999999,
    "time": 7203.05615234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.017125,
    "avg_bits_err_output": 0.017125,
    "avg_bits_err_improve": 0,
    "time": 11144.202392578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.0075,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 0,
    "time": 12270.142822265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3610.74267578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7447.089599609375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2419.136474609375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.808299539132032,
    "avg_bits_err_output": 0.252125,
    "avg_bits_err_improve": 7.556174539132032,
    "time": 30897.93408203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.307054420725671,
    "avg_bits_err_output": 7.307054420725671,
    "avg_bits_err_improve": 0,
    "time": 14725.67919921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 15.95912717625473,
    "avg_bits_err_output": 15.95912717625473,
    "avg_bits_err_improve": 0,
    "time": 14440.666015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (if (!= (- 4.0 (cos x)) 0.0) (/ (fma (+ (cos x) -2.0) (+ (cos x) -2.0) -4.0) (- (cos x) 4.0)) (cos x)) (exp (* 10.0 (* x x))))",
    "output_parens": 17,
    "avg_bits_err_input": 3.540502444771896,
    "avg_bits_err_output": 3.5442454224755906,
    "avg_bits_err_improve": -0.0037429777036948053,
    "time": 16774.175048828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -1e+26) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 1e-26) (/ (+ (/ x (fma x x 1.0)) (/ (+ x (+ x x)) (fma x x 1.0))) 4.0) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 64,
    "avg_bits_err_input": 14.68810725363533,
    "avg_bits_err_output": 0.016021240625180292,
    "avg_bits_err_improve": 14.67208601301015,
    "time": 10609.453857421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.506265881854695,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.506265881854695,
    "time": 5259.99169921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.6191748059602,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.6189248059602,
    "time": 4219.1923828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.3005,
    "avg_bits_err_improve": 63.6995,
    "time": 18731.5380859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (* t 4e-32))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325373223181,
    "avg_bits_err_output": 0.41032312031259016,
    "avg_bits_err_improve": 61.43293061191922,
    "time": 7955.964111328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0))))) 0.0) (+ (/ (- (* a (* c -4.0))) (+ (sqrt (fma a (* c -4.0) (* b b))) (sqrt (fma a (* c -4.0) (* b b))))) (+ (/ (- (* (sqrt (fma a (* c -4.0) (* b b))) (- b)) (* b b)) (+ (sqrt (fma a (* c -4.0) (* b b))) (sqrt (fma a (* c -4.0) (* b b))))) (/ (/ (- (* (sqrt (fma a (* c -4.0) (* b b))) (- b)) (fma a (* c -4.0) (* b b))) (sqrt (fma a (* c -4.0) (* b b)))) 2.0))) (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 2.0))",
    "output_parens": 64,
    "avg_bits_err_input": 34.04895770910524,
    "avg_bits_err_output": 27.53906037626715,
    "avg_bits_err_improve": 6.5098973328380865,
    "time": 24708.839599609375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (- (+ b (sqrt (fma b b (* (* a c) -4.0)))) (+ b b)) (* a 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 34.52001636568025,
    "avg_bits_err_output": 34.5296959284687,
    "avg_bits_err_improve": -0.009679562788448948,
    "time": 21479.873046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2773.41259765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.70703321656496,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 39.69715821656496,
    "time": 5136.493408203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.166642772734377,
    "avg_bits_err_output": 20.166642772734377,
    "avg_bits_err_improve": 0,
    "time": 3912.090087890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6594213341394606,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6594213341394606,
    "time": 9059.32958984375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(+ (* a (+ b d)) (* a c))",
    "output_parens": 4,
    "avg_bits_err_input": 0.041125,
    "avg_bits_err_output": 0.04375,
    "avg_bits_err_improve": -0.0026249999999999954,
    "time": 8057.022216796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(* (+ a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.019896240625180292,
    "avg_bits_err_output": 0.019896240625180292,
    "avg_bits_err_improve": 0,
    "time": 3030.893310546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.01225,
    "time": 3964.771728515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.00075,
    "time": 1930.355224609375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ d c) (+ e (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4036797000057695,
    "avg_bits_err_output": 0.243,
    "avg_bits_err_improve": 0.16067970000576953,
    "time": 6289.026611328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(log (+ 1.0 (expm1 (- 1.0 (cos x)))))",
    "output_parens": 5,
    "avg_bits_err_input": 30.16991500837944,
    "avg_bits_err_output": 30.19831628877744,
    "avg_bits_err_improve": -0.028401280398000495,
    "time": 8137.423095703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (sqrt (if (!= (- (* x x) (- eps)) 0.0) (* (if (!= (* (+ x x) (- x)) 0.0) (* (fma x (+ x x) (* eps -2.0)) (* x (/ (/ x x) x))) (fma x (+ x x) (* eps -2.0))) (/ (fma x x eps) (+ (fma x x eps) (fma x x eps)))) (- (* x x) eps))))",
    "output_parens": 30,
    "avg_bits_err_input": 24.579067066851806,
    "avg_bits_err_output": 24.61273188355612,
    "avg_bits_err_improve": -0.03366481670431298,
    "time": 13713.322509765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (- (tan x))) 0.0) (/ (+ (/ (* (- (sin x) x) (/ x (tan x))) (tan x)) (fma (/ x (- (tan x))) (/ x (tan x)) (* (/ x (tan x)) (/ x (tan x))))) (/ x (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 32,
    "avg_bits_err_input": 29.935148109685397,
    "avg_bits_err_output": 29.935214896368336,
    "avg_bits_err_improve": -6.678668293957912e-05,
    "time": 33780.1259765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006625,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 0,
    "time": 1797.4072265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (* 100.0 (/ (pow (+ (/ i n) 1.0) n) (/ i n))) (/ 100.0 (/ i n))))",
    "output_parens": 24,
    "avg_bits_err_input": 47.94170988204123,
    "avg_bits_err_output": 13.319357782013432,
    "avg_bits_err_improve": 34.6223521000278,
    "time": 28079.07861328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (- INFINITY)) (+ (* (/ a (fma c c (* d d))) c) (* d (/ b (fma d d (* c c))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 2e+296) (/ (+ (* c (+ a a)) (* d (+ b b))) (* (fma d d (* c c)) 2.0)) (+ (* (/ a (fma c c (* d d))) c) (* d (/ b (fma d d (* c c)))))))",
    "output_parens": 46,
    "avg_bits_err_input": 26.3920867006932,
    "avg_bits_err_output": 22.9114031480515,
    "avg_bits_err_improve": 3.480683552641697,
    "time": 11895.55419921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 0.0) (- (* b (/ c (fma c c (* d d)))) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 1e-75) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- (* b (/ c (fma c c (* d d)))) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 26.16791257004547,
    "avg_bits_err_output": 22.552850040671157,
    "avg_bits_err_improve": 3.6150625293743133,
    "time": 17736.235595703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.03425,
    "avg_bits_err_output": 0.020240425366668893,
    "avg_bits_err_improve": 0.01400957463333111,
    "time": 8038.40380859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (if (!= (+ 1.0 (exp (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux))))) 0.0) (/ (+ -1.0 (exp (* (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux))) 2.0))) (+ 1.0 (exp (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))) (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux))))))))))",
    "output_parens": 39,
    "avg_bits_err_input": 13.265780636450266,
    "avg_bits_err_output": 12.236599909738285,
    "avg_bits_err_improve": 1.0291807267119815,
    "time": 34165.743896484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- ux (* ux (+ ux -1.0))) (- (* ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.30430100271784,
    "avg_bits_err_output": 0.3442142012363882,
    "avg_bits_err_improve": 12.960086801481452,
    "time": 35406.727783203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (* ux (* (- 1.0 ux) maxCos)) zi (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.3331290051909574,
    "avg_bits_err_output": 0.3245228676982762,
    "avg_bits_err_improve": 0.008606137492681187,
    "time": 42628.799072265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.20630759366319829,
    "avg_bits_err_output": 0.20630759366319829,
    "avg_bits_err_improve": 0,
    "time": 25360.304443359375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (+ (/ (* (/ u1 (- 2.0 (+ u1 u1))) (+ (/ u1 (- 1.0 u1)) (/ u1 (- 2.0 (+ u1 u1))))) (/ u1 (- 1.0 u1))) (/ (* (/ u1 (- 1.0 u1)) (/ u1 u1)) 4.0)) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 30,
    "avg_bits_err_input": 0.5398968997108202,
    "avg_bits_err_output": 0.5422448743619649,
    "avg_bits_err_improve": -0.0023479746511446686,
    "time": 27934.68896484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (log1p (expm1 (/ u1 (- 1.0 u1))))) (cos (* 6.28318530718 u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3178456279750203,
    "avg_bits_err_output": 0.33473291152024676,
    "avg_bits_err_improve": -0.01688728354522645,
    "time": 20762.907958984375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (* PI (/ 2.0 (+ s s)))))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.33478257062772354,
    "avg_bits_err_output": 0.33535569094031364,
    "avg_bits_err_improve": -0.000573120312590103,
    "time": 43680.329833984375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05820654601193664,
    "avg_bits_err_output": 0.042984626865391985,
    "avg_bits_err_improve": 0.015221919146544652,
    "time": 11991.82421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (/ 1.0 (- -1.0 (exp (/ (fabs x) (- s))))) (* (exp (/ (fabs x) (* s -2.0))) (* (exp (/ (fabs x) (* s -2.0))) (/ (/ 1.0 s) (- -1.0 (exp (/ (fabs x) (- s))))))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.1562500466966886,
    "avg_bits_err_output": 0.17500981770650548,
    "avg_bits_err_improve": -0.018759771009816878,
    "time": 22351.591552734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (log1p (expm1 (sin (* x (* PI tau))))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6876513735889636,
    "avg_bits_err_output": 0.6962070353778912,
    "avg_bits_err_improve": -0.008555661788927638,
    "time": 22019.17626953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.1753757084092386,
    "avg_bits_err_output": 0.1698505593086121,
    "avg_bits_err_improve": 0.005525149100626514,
    "time": 17220.1337890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.5257487598013366,
    "avg_bits_err_output": 2.52174063603113,
    "avg_bits_err_improve": 0.004008123770206762,
    "time": 30598.86279296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ (/ cosTheta_i (sinh (/ 1.0 v))) (exp (* sinTheta_O (/ sinTheta_i v)))) (* (/ 1.0 v) (/ 0.5 v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.46658294560228564,
    "avg_bits_err_output": 0.3533166143604916,
    "avg_bits_err_improve": 0.11326633124179403,
    "time": 25460.3623046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ (if (!= 0.6931 0.0) (+ 0.6931 (/ (/ (* (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) 0.6931) v) 0.6931)) (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) 0.6931)) (log (/ 0.5 v))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.10410405243715923,
    "avg_bits_err_output": 0.11068992748945843,
    "avg_bits_err_improve": -0.006585875052299198,
    "time": 24692.98779296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (+ (* alpha alpha) -1.0) (log (* alpha alpha))) PI) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4685091442512029,
    "avg_bits_err_output": 0.46053218655591116,
    "avg_bits_err_improve": 0.00797695769529172,
    "time": 25504.97314453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- (fma u -1.3333333333333333 0.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 14,
    "avg_bits_err_input": 1.3159584407674125,
    "avg_bits_err_output": 0.42655056563816185,
    "avg_bits_err_improve": 0.8894078751292507,
    "time": 28018.312744140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(/ (/ (+ (fma (log (/ 1.0 (fma u -4.0 1.0))) (+ s s) (- s)) (fma (log (/ 1.0 (fma u -4.0 1.0))) (+ s s) s)) 2.0) 2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 12.56426601420522,
    "avg_bits_err_output": 12.580387228394297,
    "avg_bits_err_improve": -0.016121214189077193,
    "time": 19639.4794921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ 0.25 (* s (* 2.0 PI)))) (* 0.75 (* (exp (/ (/ r -6.0) s)) (/ (* (exp (if (!= (/ (/ r s) 12.0) 0.0) (* (/ (/ r s) (* r -12.0)) (* r (* r (/ (* s -12.0) (* r (* s -12.0)))))) (/ r (* s -12.0)))) (exp (/ r (* s -12.0)))) (* s (* PI 6.0)))))) r)",
    "output_parens": 38,
    "avg_bits_err_input": 0.13847928776050428,
    "avg_bits_err_output": 0.12324948459056306,
    "avg_bits_err_improve": 0.015229803169941214,
    "time": 30131.079345703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (sin (- normAngle (* normAngle u))) (/ n0_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8646385385723694,
    "avg_bits_err_output": 0.722259114357255,
    "avg_bits_err_improve": 0.1423794242151144,
    "time": 29553.936767578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (- c -1.0) (/ (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6857721731942664,
    "avg_bits_err_output": 0.47312973319712887,
    "avg_bits_err_improve": 0.21264243999713756,
    "time": 20500.2412109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(- (sin (* 2.0 (if (!= (* PI u2) 0.0) (* (/ (* u2 u2) PI) (/ (* PI PI) u2)) (* PI u2)))) (- (sin (* 2.0 (* PI u2))) (* (sqrt (- (log (- 1.0 u1)))) (sin (* 2.0 (* PI u2))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.653590131905819,
    "avg_bits_err_output": 13.539480934536087,
    "avg_bits_err_improve": 0.11410919736973213,
    "time": 31661.7255859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(+ (* (sqrt (- (log (- 1.0 u1)))) (+ (cos (* 2.0 (* PI u2))) -1.0)) (sqrt (- (log (- 1.0 u1)))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.691179165085,
    "avg_bits_err_output": 13.691974715330911,
    "avg_bits_err_improve": -0.0007955502459111585,
    "time": 24572.9736328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* (- alpha) alpha) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.174956408182862,
    "avg_bits_err_output": 0.3265661656266226,
    "avg_bits_err_improve": 13.848390242556238,
    "time": 17811.130859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (/ (* (log (- 1.0 u0)) -2.0) -1.0) (/ -1.0 (+ (/ sin2phi (* alphay alphay)) (+ (/ sin2phi (* alphay alphay)) (/ (+ cos2phi cos2phi) (* alphax alphax))))))",
    "output_parens": 15,
    "avg_bits_err_input": 12.57253538117605,
    "avg_bits_err_output": 12.61628725317436,
    "avg_bits_err_improve": -0.04375187199831032,
    "time": 20396.0400390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (* (/ (tan (* PI l)) F) (/ 1.0 F)))",
    "output_parens": 7,
    "avg_bits_err_input": 16.723557015822454,
    "avg_bits_err_output": 12.534269133516446,
    "avg_bits_err_improve": 4.189287882306008,
    "time": 23839.105712890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2184387218755409,
    "avg_bits_err_output": 0.15271936093777042,
    "avg_bits_err_improve": 0.06571936093777048,
    "time": 14520.125244140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (expm1 (log1p (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 14.13654311864041,
    "avg_bits_err_output": 11.115497215020966,
    "avg_bits_err_improve": 3.0210459036194433,
    "time": 20895.28955078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0))) (if (!= (exp (/ (* PI f) -4.0)) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (/ (* PI f) -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0)))))) (* PI -0.25))",
    "output_parens": 32,
    "avg_bits_err_input": 61.477159954499704,
    "avg_bits_err_output": 1.8639618494107568,
    "avg_bits_err_improve": 59.61319810508895,
    "time": 53284.614501953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.13593552709568,
    "avg_bits_err_output": 34.154310670842285,
    "avg_bits_err_improve": 8.981624856253397,
    "time": 31362.712646484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 4.142166604141708,
    "avg_bits_err_output": 4.142166604141708,
    "avg_bits_err_improve": 0,
    "time": 27809.544921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (- (exp (log1p (sqrt (- (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0)))) 1.0)) 0.5)))",
    "output_parens": 18,
    "avg_bits_err_input": 1.0028867854942232,
    "avg_bits_err_output": 1.005011785494223,
    "avg_bits_err_improve": -0.0021249999999999325,
    "time": 11055.677978515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (- (+ 1.0 (pow (/ Om Omc) 2.0)) 1.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.01840953910635,
    "avg_bits_err_output": 10.02029340109097,
    "avg_bits_err_improve": -0.0018838619846199833,
    "time": 12198.74365234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 0.0) (sqrt (* U (* (* 2.0 n) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 4e+131) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (fma (* U 2.0) (* (* l -2.0) (* (/ l Om) n)) (* (* U (* 2.0 n)) (- t (* (pow (/ l Om) 2.0) (* n (- U U*)))))))))",
    "output_parens": 75,
    "avg_bits_err_input": 35.07639001983728,
    "avg_bits_err_output": 29.198534090889456,
    "avg_bits_err_improve": 5.87785592894782,
    "time": 37072.021484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -8e-103) (/ (/ 2.0 (* (pow t 3.0) (/ (sin k) l))) (* (pow (/ k t) 2.0) (/ (tan k) l))) (if (<= t 1.06e-94) (/ 2.0 (* (/ (tan k) l) (* (/ (sin k) l) (exp (fma 3.0 (log t) (* 2.0 (log (/ k t)))))))) (+ (/ (/ 2.0 (/ (tan k) l)) (* (/ (sin k) l) (* (pow (/ k t) 2.0) (+ (pow t 3.0) (pow t 3.0))))) (/ (/ 2.0 (/ (tan k) l)) (* (/ (sin k) l) (* (pow (/ k t) 2.0) (+ (pow t 3.0) (pow t 3.0))))))))",
    "output_parens": 55,
    "avg_bits_err_input": 47.59580084174757,
    "avg_bits_err_output": 34.09092306495182,
    "avg_bits_err_improve": 13.504877776795752,
    "time": 46283.663818359375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (tan k) (* (/ (+ 2.0 (pow (/ k t) 2.0)) l) (* (sin k) (/ (pow t 3.0) l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 31.955668116995383,
    "avg_bits_err_output": 27.220423000881254,
    "avg_bits_err_improve": 4.735245116114129,
    "time": 23420.07666015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (fma a1 (/ a1 (sqrt 2.0)) (* a2 (/ a2 (sqrt 2.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5340962437741605,
    "avg_bits_err_output": 0.47041165626622694,
    "avg_bits_err_improve": 0.0636845875079336,
    "time": 23107.685302734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (exp (log1p (+ (pow (* 2.0 (* PI n)) (* k -0.5)) -1.0))) (sqrt (* 2.0 (* PI n)))) (sqrt k))",
    "output_parens": 13,
    "avg_bits_err_input": 0.5244609778208092,
    "avg_bits_err_output": 0.5456289790376476,
    "avg_bits_err_improve": -0.021168001216838372,
    "time": 21424.851318359375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (if (!= (exp (* l -2.0)) 0.0) (/ (if (!= (exp (* l -4.0)) 0.0) (/ (if (!= (- (exp (+ l (+ l (* l -6.0)))) (exp (* l -8.0))) 0.0) (/ 1.0 (/ 1.0 (- (exp (+ l (+ l (* l -6.0)))) (exp (* l -8.0))))) (- (exp (+ l (+ l (* l -6.0)))) (exp (* l -8.0)))) (exp (* l -4.0))) (- (exp (fma l -2.0 (+ l l))) (exp (* l -4.0)))) (exp (* l -2.0))) (- (exp (+ l l)) (exp (* l -2.0)))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 70,
    "avg_bits_err_input": 17.133124816344267,
    "avg_bits_err_output": 17.173345664658605,
    "avg_bits_err_improve": -0.04022084831433759,
    "time": 28596.3515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (if (!= (* K (/ (+ m n) 2.0)) 0.0) (* (- (* K (/ (+ m n) 2.0)) M) (* (+ m n) (/ K (* K (+ m n))))) (- (* K (/ (+ m n) 2.0)) M))) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 31,
    "avg_bits_err_input": 15.5280737184317,
    "avg_bits_err_output": 15.502851801944232,
    "avg_bits_err_improve": 0.025221916487469187,
    "time": 24879.87255859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.995917481250363,
    "avg_bits_err_output": 17.995917481250363,
    "avg_bits_err_improve": 0,
    "time": 22478.190673828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= h -2e+85) (* w0 (sqrt (- 1.0 (* (/ (pow (* D (/ (/ M 2.0) d)) 2.0) l) h)))) (if (<= h 1e-283) (* w0 (sqrt (- 1.0 (* (pow (* D (/ (/ M 2.0) d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (* (/ (pow (* D (/ (/ M 2.0) d)) 2.0) l) h))))))",
    "output_parens": 31,
    "avg_bits_err_input": 14.067381665166643,
    "avg_bits_err_output": 10.472562796746104,
    "avg_bits_err_improve": 3.594818868420539,
    "time": 11987.11376953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+109) (* c0 (sqrt (/ (/ A V) l))) (if (<= (* V l) -2e-290) (* c0 (sqrt (* (/ 2.0 (* V (+ l l))) A))) (if (<= (* V l) 2e-243) (* c0 (sqrt (/ (* A (/ 2.0 V)) (+ l l)))) (if (<= (* V l) 1e+281) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (/ (/ A l) V)))))))",
    "output_parens": 36,
    "avg_bits_err_input": 19.173273755806512,
    "avg_bits_err_output": 14.918151901227894,
    "avg_bits_err_improve": 4.2551218545786185,
    "time": 18656.955322265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= h -3.5e+72) (* (+ (* d (* (/ (/ d w) (* D h)) (/ c0 D))) (sqrt (* (fma d (* (/ (/ d w) (* D h)) (/ c0 D)) M) (fma d (* (/ (/ d w) (* D h)) (/ c0 D)) (- M))))) (/ c0 (* w 2.0))) (if (<= h 8.6e-225) (* c0 (/ (fma c0 (/ (* (/ d (* w D)) (/ d D)) h) (sqrt (* (fma c0 (/ (* (/ d (* w D)) (/ d D)) h) M) (fma c0 (/ (* (/ d (* w D)) (/ d D)) h) (- M))))) (+ w w))) (* (+ (* d (* (/ (/ d w) (* D h)) (/ c0 D))) (sqrt (* (fma d (* (/ (/ d w) (* D h)) (/ c0 D)) M) (fma d (* (/ (/ d w) (* D h)) (/ c0 D)) (- M))))) (/ c0 (* w 2.0)))))",
    "output_parens": 78,
    "avg_bits_err_input": 59.477399904622935,
    "avg_bits_err_output": 54.66094415968711,
    "avg_bits_err_improve": 4.816455744935823,
    "time": 46615.726318359375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) -1e+194) (- (* (sqrt (/ d h)) (sqrt (/ d l))) (* (* 0.5 (pow (* M (/ D (* d 2.0))) 2.0)) (* (sqrt (/ d h)) (* (/ h l) (sqrt (/ d l)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 2e-5) (* (* (pow (/ d h) 0.5) (if (!= (sqrt (/ d l)) 0.0) (+ (/ (/ d (sqrt (/ d l))) (+ l l)) (/ (/ (/ d l) 2.0) (sqrt (/ d l)))) (sqrt (/ d l)))) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (/ (+ 2.0 (- (* h (/ (pow (- (* (+ (/ D (+ d d)) 1.0) M) M) 2.0) l)))) 2.0))))",
    "output_parens": 97,
    "avg_bits_err_input": 26.979217564542626,
    "avg_bits_err_output": 25.49442835422258,
    "avg_bits_err_improve": 1.484789210320045,
    "time": 38734.032470703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (- -0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (- 0.25 (/ 0.25 (* (hypot 1.0 x) (hypot 1.0 x)))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 15.441218408153023,
    "avg_bits_err_output": 14.95287810666897,
    "avg_bits_err_improve": 0.48834030148405283,
    "time": 23619.6796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9848962406251803,
    "avg_bits_err_output": 0.011198120312590145,
    "avg_bits_err_improve": 0.9736981203125902,
    "time": 4032.485595703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (- 2.0 (* v (* v 6.0))))) (* t (- 1.0 (* v v)))) (* (* v v) (/ (/ (/ 5.0 PI) (sqrt (- 2.0 (* v (* v 6.0))))) (* t (- 1.0 (* v v))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.4508996903074717,
    "avg_bits_err_output": 0.1159082863258934,
    "avg_bits_err_improve": 0.3349914039815783,
    "time": 23959.7626953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (- 1.0 (* 3.0 (* v v)))) (fma (* v v) (/ (sqrt 2.0) 4.0) (* (/ (sqrt 2.0) -4.0) (+ -1.0 (* v (+ v v))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.01164624062518029,
    "avg_bits_err_output": 0.012188721875540867,
    "avg_bits_err_improve": -0.0005424812503605769,
    "time": 5909.885009765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (- -1.0 (+ (* (* v v) -5.0) -1.0))) (- (* v v) 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5352647360209091,
    "avg_bits_err_output": 0.5542075845738269,
    "avg_bits_err_improve": -0.018942848552917835,
    "time": 8921.405517578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.771707114896289,
    "avg_bits_err_output": 1.7632071148962891,
    "avg_bits_err_improve": 0.008499999999999952,
    "time": 26660.5576171875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (* (exp (/ (+ mu (- EDonor (- Ec Vef))) (+ KbT KbT))) (exp (/ (+ mu (- EDonor (- Ec Vef))) (+ KbT KbT)))))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.03188787450397706,
    "avg_bits_err_output": 0.03190840092275805,
    "avg_bits_err_improve": -2.052641878098893e-05,
    "time": 10458.2724609375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(fma (* b 4.0) b (+ (pow (fma a a (* b b)) 2.0) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.18579697249404314,
    "avg_bits_err_output": 0.18576388968073188,
    "avg_bits_err_improve": 3.308281331126928e-05,
    "time": 21989.763671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (if (!= (* (* (* b b) (fma a 3.0 -1.0)) -4.0) 0.0) (* (* b (/ (* b (fma a 3.0 -1.0)) (* (fma a 3.0 -1.0) (* b b)))) (fma (* b b) (* (fma a 3.0 -1.0) -4.0) (fma (* a (fma a a a)) 4.0 (pow (fma b b (* a a)) 2.0)))) (fma 4.0 (fma (* b b) (- 1.0 (* a 3.0)) (* a (fma a a a))) (pow (fma a a (* b b)) 2.0))) 1.0)",
    "output_parens": 35,
    "avg_bits_err_input": 0.18888333395870788,
    "avg_bits_err_output": 0.33662010979011814,
    "avg_bits_err_improve": -0.14773677583141026,
    "time": 30249.410400390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18917557175431662,
    "avg_bits_err_output": 0.18917557175431662,
    "avg_bits_err_improve": 0,
    "time": 27772.115478515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (if (!= (* p (* p 4.0)) 0.0) (* (fma 4.0 (* p p) (* x x)) (/ 1.0 (* (/ 1.0 p) p))) (fma 4.0 (* p p) (* x x))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 13.556949941172181,
    "avg_bits_err_output": 13.547644604690394,
    "avg_bits_err_improve": 0.009305336481787663,
    "time": 15822.666748046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.4978094337969,
    "avg_bits_err_output": 0.032375,
    "avg_bits_err_improve": 40.4654344337969,
    "time": 5548.404052734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(log (log (+ 1.0 (expm1 (exp (/ (- x (sin x)) (- x (tan x))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 31.936707880230397,
    "avg_bits_err_output": 31.93886308720973,
    "avg_bits_err_improve": -0.002155206979331581,
    "time": 25299.123779296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) (- b_2)) 0.0) (* (/ c (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.3296966223253,
    "avg_bits_err_output": 21.610598457665095,
    "avg_bits_err_improve": 12.719098164660206,
    "time": 15521.565673828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (fma b_2 b_2 (* a (- c))))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.0714052041139,
    "avg_bits_err_output": 34.070546478510856,
    "avg_bits_err_improve": 0.0008587256030452295,
    "time": 19471.765625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.100323104351038,
    "avg_bits_err_output": 30.294248932082763,
    "avg_bits_err_improve": 0.8060741722682749,
    "time": 18532.940185546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 33.17957847590282,
    "avg_bits_err_output": 10.925745637102743,
    "avg_bits_err_improve": 22.25383283880008,
    "time": 28788.257080078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (+ -4.0 (+ (exp (- (log1p N) (log N))) 3.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 29.32475496090731,
    "avg_bits_err_output": 29.337323755466713,
    "avg_bits_err_improve": -0.012568794559403074,
    "time": 13309.889892578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ -1.0 x) (/ x (/ x (+ 1.0 x))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.248885183343658,
    "avg_bits_err_output": 0.07179248125036057,
    "avg_bits_err_improve": 14.177092702093297,
    "time": 13495.650634765625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (cos (+ x eps)) (log (expm1 (log1p (exp (cos x))))))",
    "output_parens": 8,
    "avg_bits_err_input": 39.46031141867641,
    "avg_bits_err_output": 39.46208676169227,
    "avg_bits_err_improve": -0.0017753430158577999,
    "time": 21931.58984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ 1.0 x)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.84055146491137,
    "avg_bits_err_output": 29.54349724296768,
    "avg_bits_err_improve": 0.2970542219436929,
    "time": 13760.519775390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(* (log (+ 1.0 (expm1 (- 2.0 (* 2.0 (cos x)))))) (/ 0.5 (sin x)))",
    "output_parens": 9,
    "avg_bits_err_input": 30.386027519795867,
    "avg_bits_err_output": 30.455017495020094,
    "avg_bits_err_improve": -0.0689899752242269,
    "time": 25040.9892578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* c (* a 4.0))))) (* a 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 34.196290081002864,
    "avg_bits_err_output": 34.19223999182593,
    "avg_bits_err_improve": 0.004050089176935501,
    "time": 23380.314697265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 34.39471082197148,
    "avg_bits_err_output": 34.39017948855141,
    "avg_bits_err_improve": 0.004531333420068506,
    "time": 24229.859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ (/ (+ 1.0 (log (- 1.0 x))) (log1p x)) 1.0) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.22634751687551,
    "avg_bits_err_output": 0.8649692576045801,
    "avg_bits_err_improve": 60.36137825927093,
    "time": 25327.045166015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log1p n) (log n)) n)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 63.00267498396311,
    "avg_bits_err_output": 44.22041200741528,
    "avg_bits_err_improve": 18.782262976547834,
    "time": 12096.645751953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (/ (+ eps eps) (- -1.0 eps)))",
    "output_parens": 4,
    "avg_bits_err_input": 58.54819709755006,
    "avg_bits_err_output": 0.018625,
    "avg_bits_err_improve": 58.52957209755006,
    "time": 18046.50732421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (if (!= (- 1.0 (/ 1.0 (/ (- (tan x)) x))) 0.0) (/ (- 1.0 (/ (/ 1.0 (/ (- (tan x)) x)) (/ (- (tan x)) x))) (- 1.0 (/ 1.0 (/ (- (tan x)) x)))) (+ 1.0 (/ 1.0 (/ (- (tan x)) x)))) x)",
    "output_parens": 28,
    "avg_bits_err_input": 59.84548669582391,
    "avg_bits_err_output": 59.84248531333274,
    "avg_bits_err_improve": 0.0030013824911705456,
    "time": 28352.105224609375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.232625251042634,
    "avg_bits_err_output": 28.807408215949653,
    "avg_bits_err_improve": 31.42521703509298,
    "time": 26918.602294921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 40.86640520061961,
    "avg_bits_err_output": 0.37344812031259017,
    "avg_bits_err_improve": 40.49295708030702,
    "time": 3738.406982421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.54124921015561,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.54074921015561,
    "time": 3014.764892578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(if (!= (- -1.0 (exp (* a x))) 0.0) (/ (expm1 (* a (+ x x))) (+ (expm1 (* a x)) 2.0)) (expm1 (* a x)))",
    "output_parens": 14,
    "avg_bits_err_input": 29.52050738731715,
    "avg_bits_err_output": 0.06480619624580493,
    "avg_bits_err_improve": 29.455701191071345,
    "time": 4323.049072265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (- (exp x) (+ 2.0 (exp (- x)))) 0.0) (/ (+ (+ (- (* (- (exp x) 2.0) (- (exp x) 2.0)) (exp (* x -2.0))) (fma (exp (- x)) (/ -1.0 (exp x)) (exp (* x -2.0)))) (fma (- (/ -1.0 (exp x))) (/ -1.0 (exp x)) (exp (* x -2.0)))) (- (exp x) (+ 2.0 (exp (- x))))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 43,
    "avg_bits_err_input": 29.214461849268176,
    "avg_bits_err_output": 28.845786050286232,
    "avg_bits_err_improve": 0.36867579898194336,
    "time": 28303.337158203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ (/ (/ 2.0 (+ x 1.0)) (/ 2.0 x)) x) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 9.843690680938964,
    "avg_bits_err_output": 9.849777310921157,
    "avg_bits_err_improve": -0.0060866299821924486,
    "time": 39325.434814453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (/ (sin x) (cos x)))",
    "output_parens": 6,
    "avg_bits_err_input": 36.7119505772127,
    "avg_bits_err_output": 36.72656610429904,
    "avg_bits_err_improve": -0.014615527086341729,
    "time": 20361.771728515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (pow (+ x 1.0) 0.5) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.01322397282652,
    "avg_bits_err_output": 0.17179736875252402,
    "avg_bits_err_improve": 29.841426604073995,
    "time": 12846.587646484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (+ (sin (+ x eps)) 1.0) 0.0) (/ (fma (sin (+ x eps)) (+ (sin (+ x eps)) 1.0) (- (* (- (exp (log1p (+ (sin (+ x eps)) 1.0))) 1.0) (sin x)))) (+ (sin (+ x eps)) 1.0)) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 28,
    "avg_bits_err_input": 37.02781205846847,
    "avg_bits_err_output": 37.07439328734587,
    "avg_bits_err_improve": -0.04658122887740035,
    "time": 23716.717529296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(* (/ 2.0 (sqrt x)) (- (* -0.5 (/ (sqrt x) (sqrt (+ 1.0 x)))) -0.5))",
    "output_parens": 9,
    "avg_bits_err_input": 19.67262804726614,
    "avg_bits_err_output": 19.661589500582153,
    "avg_bits_err_improve": 0.01103854668398796,
    "time": 14861.121826171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 14.925742312787628,
    "avg_bits_err_output": 14.925742312787628,
    "avg_bits_err_improve": 0,
    "time": 3823.869873046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.887854101821585,
    "avg_bits_err_output": 1.3005975755771406,
    "avg_bits_err_improve": 28.587256526244445,
    "time": 25767.38671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (* m (* (- 1.0 m) (- 1.0 m))) v) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07366484475338013,
    "avg_bits_err_output": 0.0753629650659703,
    "avg_bits_err_improve": -0.0016981203125901734,
    "time": 16851.865478515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(+ (* (* a b) (* a (/ b -4.0))) (/ (* (* a b) (* b (+ a (+ a a)))) -4.0))",
    "output_parens": 11,
    "avg_bits_err_input": 16.498193545902865,
    "avg_bits_err_output": 0.31540601562950726,
    "avg_bits_err_improve": 16.18278753027336,
    "time": 12496.359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (+ (/ (* PI angle) 720.0) (/ (* PI (+ angle (+ angle angle))) 720.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 16,
    "avg_bits_err_input": 19.863074373178627,
    "avg_bits_err_output": 19.887578823798204,
    "avg_bits_err_improve": -0.02450445061957751,
    "time": 36799.515869140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (expm1 (log1p (cos (* PI (/ angle 180.0))))))",
    "output_parens": 14,
    "avg_bits_err_input": 31.767193257253773,
    "avg_bits_err_output": 31.76753798007196,
    "avg_bits_err_improve": -0.00034472281818764827,
    "time": 38245.792724609375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (/ PI 180.0))) a) 2.0) (pow (* b (+ (+ 1.0 (cos (* angle (* PI 0.005555555555555556)))) -1.0)) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 19.959423476632974,
    "avg_bits_err_output": 19.93291887229114,
    "avg_bits_err_improve": 0.026504604341834437,
    "time": 40323.72802734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (+ (/ (fma (- m) m (* m m)) v) (/ (- m (* m m)) v)) 1.0) m)",
    "output_parens": 10,
    "avg_bits_err_input": 0.18050055538953297,
    "avg_bits_err_output": 0.1773330741391724,
    "avg_bits_err_improve": 0.0031674812503605654,
    "time": 16374.375244140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.32558722911195537,
    "avg_bits_err_output": 0.32218475922053535,
    "avg_bits_err_improve": 0.0034024698914200124,
    "time": 19191.22021484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13684436093777044,
    "avg_bits_err_output": 0.13684436093777044,
    "avg_bits_err_improve": 0,
    "time": 15015.374755859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.198816294993406,
    "avg_bits_err_output": 17.193047204826886,
    "avg_bits_err_improve": 0.005769090166520385,
    "time": 33083.56689453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.18668749439654,
    "avg_bits_err_output": 0.1708847750043269,
    "avg_bits_err_improve": 52.01580271939221,
    "time": 26773.951904296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.44517071933788,
    "avg_bits_err_output": 0.33703627969894845,
    "avg_bits_err_improve": 28.10813443963893,
    "time": 22294.965087890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (- (* b b) (* a (* c -4.0))) 0.0) (/ (- (* b (* b (* b b))) (* c (* a (* 16.0 (* a c))))) (- (* b b) (* a (* c -4.0)))) (fma -4.0 (* a c) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 41,
    "avg_bits_err_input": 43.67076178833966,
    "avg_bits_err_output": 0.25997706875829296,
    "avg_bits_err_improve": 43.410784719581365,
    "time": 26334.893798828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.19223999182593,
    "avg_bits_err_output": 34.19223999182593,
    "avg_bits_err_improve": 0,
    "time": 19791.918701171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8229353861021843,
    "avg_bits_err_output": 0.8229353861021843,
    "avg_bits_err_improve": 0,
    "time": 28532.156494140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (- (/ 4.0 (* (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0))))) (- (* 2.0 (exp (* x -2.0))) (- -1.0 (exp (* x -4.0)))))) (/ 1.0 (+ 1.0 (/ -2.0 (- -1.0 (exp (* -2.0 x))))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 33,
    "avg_bits_err_input": 29.257231818172045,
    "avg_bits_err_output": 29.23899131148405,
    "avg_bits_err_improve": 0.01824050668799515,
    "time": 23088.191162109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (* x -2.0)) (- -1.0 (exp (* x -2.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.08868462277677,
    "avg_bits_err_output": 0.7023962406251804,
    "avg_bits_err_improve": 57.38628838215159,
    "time": 18294.952392578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (- (+ (* (expm1 (* x -2.0)) (expm1 x)) (expm1 (* x -2.0)))) 2.0)",
    "output_parens": 9,
    "avg_bits_err_input": 57.7514954079555,
    "avg_bits_err_output": 0.18547936283216046,
    "avg_bits_err_improve": 57.56601604512334,
    "time": 12156.717529296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007344360937770433,
    "avg_bits_err_output": 0.007344360937770433,
    "avg_bits_err_improve": 0,
    "time": 1940.7451171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.241125,
    "avg_bits_err_output": 32.241125,
    "avg_bits_err_improve": 0,
    "time": 5900.127685546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (exp (log1p (log (/ (- -1.0 x) (+ x -1.0))))) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 58.54673702084727,
    "avg_bits_err_output": 58.57203583224284,
    "avg_bits_err_improve": -0.02529881139557233,
    "time": 18941.591552734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04369812031259015,
    "avg_bits_err_output": 0.043875,
    "avg_bits_err_improve": -0.0001768796874098491,
    "time": 3981.243896484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* (* eh (cos t)) (sin (atan (/ eh (* ew (tan t))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.125375,
    "avg_bits_err_output": 0.124625,
    "avg_bits_err_improve": 0.0007499999999999868,
    "time": 21911.8095703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12607312031259016,
    "avg_bits_err_output": 0.12607312031259016,
    "avg_bits_err_improve": 0,
    "time": 22913.71142578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.01120546324586,
    "avg_bits_err_output": 3.5470393481337132,
    "avg_bits_err_improve": 35.46416611511214,
    "time": 27279.363037109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.543707163975762,
    "avg_bits_err_output": 0.011594360937770436,
    "avg_bits_err_improve": 14.532112803037991,
    "time": 7157.958740234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (if (!= (+ (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) 1.0) 0.0) (/ (* (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (cos delta))) (+ -1.0 (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (cos delta))))) (+ (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) 1.0)) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 84,
    "avg_bits_err_input": 0.14608197728352681,
    "avg_bits_err_output": 0.14778788405493343,
    "avg_bits_err_improve": -0.0017059067714066123,
    "time": 38002.419677734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.19193956543452,
    "avg_bits_err_output": 0.17353797031547474,
    "avg_bits_err_improve": 52.018401595119045,
    "time": 33176.621337890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.628214395472614,
    "avg_bits_err_output": 0.3436120472752027,
    "avg_bits_err_improve": 28.28460234819741,
    "time": 22250.517822265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.76212072528842,
    "avg_bits_err_output": 0.23033778281908027,
    "avg_bits_err_improve": 43.53178294246934,
    "time": 26625.412109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.24197516158707,
    "avg_bits_err_output": 34.24197516158707,
    "avg_bits_err_improve": 0,
    "time": 31311.85791015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (cos (- lambda1 lambda2))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.380679768160723,
    "avg_bits_err_output": 13.382218196726374,
    "avg_bits_err_improve": -0.0015384285656505625,
    "time": 36447.865966796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 28.462837068428296,
    "avg_bits_err_output": 0.5306852920160327,
    "avg_bits_err_improve": 27.932151776412265,
    "time": 20617.25634765625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.011625,
    "avg_bits_err_output": 0.011625,
    "avg_bits_err_improve": 0,
    "time": 5257.631591796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))) 0.0) (/ (if (!= (/ 1.0 (* (+ x -1.0) (+ x -1.0))) 0.0) (/ (fma (/ -1.0 (+ x -1.0)) (/ (/ -1.0 (+ x -1.0)) (* (+ 1.0 x) (+ 1.0 x))) (- (/ 1.0 (* (* (+ x -1.0) (+ x -1.0)) (* (+ x -1.0) (+ x -1.0)))))) (/ 1.0 (* (+ x -1.0) (+ x -1.0)))) (+ (/ 1.0 (* (+ 1.0 x) (+ 1.0 x))) (/ (/ -1.0 (+ x -1.0)) (+ x -1.0)))) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))) (+ (/ 1.0 (+ 1.0 x)) (/ -1.0 (+ x -1.0))))",
    "output_parens": 56,
    "avg_bits_err_input": 13.97788253504498,
    "avg_bits_err_output": 14.797105339267262,
    "avg_bits_err_improve": -0.8192228042222816,
    "time": 21520.728515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 2e+146) (/ (sqrt (+ (* (- (pow B 2.0) (* C (* A 4.0))) (* (* 2.0 F) (+ A (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (* (fma (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) (* 2.0 F) (* (* 2.0 F) (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C))) (- (pow B 2.0) (* C (* A 4.0)))))) (- (* C (* A 4.0)) (pow B 2.0))) 0.0)",
    "output_parens": 65,
    "avg_bits_err_input": 52.02378954338342,
    "avg_bits_err_output": 50.89713475934458,
    "avg_bits_err_improve": 1.1266547840388412,
    "time": 45139.87646484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -2.6e+121) 0.0 (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI)))",
    "output_parens": 14,
    "avg_bits_err_input": 29.71015275926808,
    "avg_bits_err_output": 27.779454672203624,
    "avg_bits_err_improve": 1.9306980870644566,
    "time": 23038.4052734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (pow (* 2.0 (fma (* A F) (fma (* A C) -4.0 (pow B 2.0)) (* (fma (* A C) -4.0 (pow B 2.0)) (* F (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) 0.5) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 23,
    "avg_bits_err_input": 52.740710839481196,
    "avg_bits_err_output": 52.49613197688567,
    "avg_bits_err_improve": 0.24457886259552453,
    "time": 39117.251953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.789346630896121,
    "avg_bits_err_output": 15.789346630896121,
    "avg_bits_err_improve": 0,
    "time": 14837.4560546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- g) 0.0) (/ (* (- g) (- (sqrt (fma g g (* h (- h)))) g)) (- g)) (- (sqrt (fma g g (* h (- h)))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 30,
    "avg_bits_err_input": 35.98163594674697,
    "avg_bits_err_output": 35.901557896418645,
    "avg_bits_err_improve": 0.08007805032832493,
    "time": 17138.229248046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9887885503953355,
    "avg_bits_err_output": 0.9739836468769834,
    "avg_bits_err_improve": 0.014804903518352175,
    "time": 15640.58837890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.684625,
    "avg_bits_err_output": 0.684625,
    "avg_bits_err_improve": 0,
    "time": 4302.802978515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-250) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ (/ a2 b1) b2) a1) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+291) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.217747438681487,
    "avg_bits_err_output": 2.9836264735695135,
    "avg_bits_err_improve": 8.234120965111973,
    "time": 6681.40185546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.471054483806003,
    "avg_bits_err_output": 0.4055,
    "avg_bits_err_improve": 0.06555448380600298,
    "time": 9012.1455078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(log1p (+ x (+ (hypot 1.0 x) -1.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 53.0760533601966,
    "avg_bits_err_output": 15.84345638389306,
    "avg_bits_err_improve": 37.23259697630354,
    "time": 12707.8037109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.739294068766958,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.739294068766958,
    "time": 2495.80859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (expm1 (log1p (/ (- 1.0 x) (- x -1.0)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 0.0023750000000000004,
    "time": 8575.552490234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1245.294921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* w r) (* (/ (* w r) (- 1.0 v)) (- 0.375 (* v 0.25)))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.425687634112146,
    "avg_bits_err_output": 0.31597520508707116,
    "avg_bits_err_improve": 12.109712429025075,
    "time": 22220.529541015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (+ (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) x1) (* (* x1 -6.0) x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.51500260748199,
    "avg_bits_err_output": 0.2766625561692596,
    "avg_bits_err_improve": 0.2383400513127304,
    "time": 65943.40625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= t1 -6.6e-267) (/ (* (/ t1 (+ t1 u)) (- v)) (+ t1 u)) (if (<= t1 6.6e-270) (* (- t1) (/ (/ v (+ t1 u)) (+ t1 u))) (/ (* (/ t1 (+ t1 u)) (- v)) (+ t1 u))))",
    "output_parens": 22,
    "avg_bits_err_input": 18.304213894702073,
    "avg_bits_err_output": 1.5225156067112686,
    "avg_bits_err_improve": 16.781698287990803,
    "time": 10318.885009765625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.26071275847734965,
    "avg_bits_err_output": 0.18391484475338007,
    "avg_bits_err_improve": 0.07679791372396957,
    "time": 7730.0517578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0021009193652572005,
    "avg_bits_err_output": 0.0021009193652572005,
    "avg_bits_err_improve": 0,
    "time": 2790.1103515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* PI (+ (/ 0.5 (* a (+ b a))) (/ -0.5 (* b (+ b a))))) (- b a))",
    "output_parens": 10,
    "avg_bits_err_input": 13.757174470309106,
    "avg_bits_err_output": 0.2797344000115384,
    "avg_bits_err_improve": 13.477440070297568,
    "time": 17562.743408203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (/ (+ 1.0 (/ 1.0 eps)) (exp (* (- 1.0 eps) x))) (/ (/ 1.0 eps) (exp (* x (+ 1.0 eps))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 30.03112156650771,
    "avg_bits_err_output": 25.230913502934346,
    "avg_bits_err_improve": 4.800208063573365,
    "time": 16383.242431640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.01125,
    "avg_bits_err_improve": 0,
    "time": 3820.34912109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.015625,
    "avg_bits_err_output": 0.015625,
    "avg_bits_err_improve": 0,
    "time": 10851.71728515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (+ 1.0 (/ (* (/ (* 2.0 t) (+ t 1.0)) (* t 4.0)) (+ t 1.0)))) (+ 4.0 (/ (* (/ (* 2.0 t) (+ t 1.0)) (* t 4.0)) (+ t 1.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.0095,
    "avg_bits_err_output": 0.053625,
    "avg_bits_err_improve": -0.044125,
    "time": 10264.686767578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3350.98828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6806.04931640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2244.41162109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8371841634018695,
    "avg_bits_err_output": 0.247375,
    "avg_bits_err_improve": 7.58980916340187,
    "time": 32035.925048828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(if (!= (+ (pow (+ x eps) 5.0) 1.0) 0.0) (/ (+ (+ (pow (+ x eps) 5.0) (pow (+ x eps) 10.0)) (* (- (pow x 5.0)) (+ (pow (+ x eps) 5.0) 1.0))) (+ (pow (+ x eps) 5.0) 1.0)) (- (pow (+ x eps) 5.0) (pow x 5.0)))",
    "output_parens": 25,
    "avg_bits_err_input": 7.484800959171523,
    "avg_bits_err_output": 7.5012671069802375,
    "avg_bits_err_improve": -0.016466147808714027,
    "time": 18412.968505859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (if (!= (+ (pow (+ x eps) 2.0) 1.0) 0.0) (/ (* (pow (+ x eps) 2.0) (+ (pow (+ x eps) 2.0) 1.0)) (+ (pow (+ x eps) 2.0) 1.0)) (pow (+ x eps) 2.0)) (pow x 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 16.244735096869938,
    "avg_bits_err_output": 16.2469315335343,
    "avg_bits_err_improve": -0.0021964366643629774,
    "time": 17198.86083984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (exp (* 10.0 (* x x))) (+ (cos x) 2.0)) 0.0) (* (* (cos x) (exp (* 10.0 (* x x)))) (* (exp (* 10.0 (* x x))) (+ (/ (/ (cos x) (exp (* x (* x 10.0)))) (+ (cos x) 2.0)) (/ 2.0 (* (exp (* 10.0 (* x x))) (+ (cos x) 2.0)))))) (* (cos x) (exp (* 10.0 (* x x)))))",
    "output_parens": 39,
    "avg_bits_err_input": 3.5386042855481405,
    "avg_bits_err_output": 3.192003170147724,
    "avg_bits_err_improve": 0.3466011154004165,
    "time": 20342.546142578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -0.001) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (- 0.0 (/ x (+ x (/ 1.0 x)))) (- x)) 0.0) (/ x (fma x x 1.0))) (if (<= x 2e-7) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (- 0.0 (/ x (+ x (/ 1.0 x)))) (- x)) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 45,
    "avg_bits_err_input": 15.0717478663596,
    "avg_bits_err_output": 0.01252124062518029,
    "avg_bits_err_improve": 15.05922662573442,
    "time": 5697.998779296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.06648705772956,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.06648705772956,
    "time": 5224.255859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.12558211302138,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.124832113021384,
    "time": 4446.5576171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.24625,
    "avg_bits_err_improve": 63.75375,
    "time": 18639.22998046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325561318282,
    "avg_bits_err_output": 0.38925,
    "avg_bits_err_improve": 61.45400561318282,
    "time": 7878.3310546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 34.39471082197148,
    "avg_bits_err_output": 34.39017948855141,
    "avg_bits_err_improve": 0.004531333420068506,
    "time": 24682.906982421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.19223999182593,
    "avg_bits_err_output": 34.19223999182593,
    "avg_bits_err_improve": 0,
    "time": 22553.125732421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2310.277099609375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.9475805527553,
    "avg_bits_err_output": 0.012625,
    "avg_bits_err_improve": 39.9349555527553,
    "time": 8874.654541015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- (* x x) (* y y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.49962911266229,
    "avg_bits_err_output": 20.501046593912648,
    "avg_bits_err_improve": -0.0014174812503569,
    "time": 5861.859619140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.672973892985605,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.672973892985605,
    "time": 9922.010498046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.038,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.03725,
    "time": 6448.074462890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.024594360937770437,
    "avg_bits_err_output": 0.012875,
    "avg_bits_err_improve": 0.011719360937770438,
    "time": 3792.74755859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.016875,
    "avg_bits_err_output": 0.015875,
    "avg_bits_err_improve": 0.0010000000000000009,
    "time": 2239.65087890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.001,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.001,
    "time": 1579.763671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ b (+ d a)) (+ c e))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40579285781763874,
    "avg_bits_err_output": 0.246125,
    "avg_bits_err_improve": 0.15966785781763873,
    "time": 4395.20361328125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (- 1.0 (cos x)) 0.0) (/ 1.0 (- (expm1 (log (+ (expm1 (log1p (/ 1.0 (- 1.0 (cos x))))) 2.0))) 1.0)) (- 1.0 (cos x)))",
    "output_parens": 16,
    "avg_bits_err_input": 30.059580929313302,
    "avg_bits_err_output": 30.05958216178251,
    "avg_bits_err_improve": -1.2324692093557132e-06,
    "time": 10585.02294921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (if (!= (+ (sqrt (- (* x x) eps)) 1.0) 0.0) (/ (* (sqrt (- (* x x) eps)) (+ (sqrt (- (* x x) eps)) 1.0)) (+ (sqrt (- (* x x) eps)) 1.0)) (sqrt (- (* x x) eps))))",
    "output_parens": 23,
    "avg_bits_err_input": 23.885156494912707,
    "avg_bits_err_output": 23.891939312648297,
    "avg_bits_err_improve": -0.0067828177355906405,
    "time": 11057.6953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (- (tan x))) 0.0) (/ (if (!= (- (* (/ (sin x) (tan x)) (/ (sin x) (tan x))) (/ (* (/ (sin x) (tan x)) (- x)) (tan x))) 0.0) (/ (* (/ (sin x) (- (tan x))) (* (/ (- x (sin x)) (tan x)) (* (/ (sin x) (- (tan x))) (/ (+ x (sin x)) (- (tan x)))))) (- (* (/ (sin x) (tan x)) (/ (sin x) (tan x))) (/ (* (/ (sin x) (tan x)) (- x)) (tan x)))) (* (/ (sin x) (- (tan x))) (/ (- x (sin x)) (tan x)))) (/ (sin x) (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 77,
    "avg_bits_err_input": 30.292814726161268,
    "avg_bits_err_output": 30.292989680634516,
    "avg_bits_err_improve": -0.00017495447324833435,
    "time": 31669.831787109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006415241011860921,
    "avg_bits_err_output": 0.006415241011860921,
    "avg_bits_err_improve": 0,
    "time": 1975.41650390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 2e-291) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (/ (* (- 1.0 (pow (+ 1.0 (/ i n)) n)) -400.0) (/ (+ (+ i i) (+ i i)) n)))",
    "output_parens": 25,
    "avg_bits_err_input": 47.69810470040508,
    "avg_bits_err_output": 13.585254832373744,
    "avg_bits_err_improve": 34.11284986803134,
    "time": 24715.4814453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (/ (* c a) (+ (* d d) (* c c))) (* b (/ d (+ (* d d) (* c c)))))",
    "output_parens": 11,
    "avg_bits_err_input": 26.18973041289681,
    "avg_bits_err_output": 24.544028287721552,
    "avg_bits_err_improve": 1.6457021251752586,
    "time": 13226.315185546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* b (/ c (fma c c (* d d)))) (* a (if (!= (/ d (fma d d (* c c))) 0.0) (/ 1.0 (/ 1.0 (/ d (fma d d (* c c))))) (/ d (fma d d (* c c))))))",
    "output_parens": 19,
    "avg_bits_err_input": 26.389734815961095,
    "avg_bits_err_output": 23.347310588156343,
    "avg_bits_err_improve": 3.0424242278047515,
    "time": 16104.803955078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.03575,
    "avg_bits_err_output": 0.01993080161791619,
    "avg_bits_err_improve": 0.01581919838208381,
    "time": 4258.00732421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (if (!= (* -2.0 (* uy PI)) 0.0) (/ 1.0 (/ (/ 1.0 uy) (* 2.0 PI))) (* uy (* 2.0 PI)))) (sqrt (if (!= (+ (* (- 1.0 ux) (- 1.0 ux)) (* (- 1.0 ux) (* ux maxCos))) 0.0) (/ (- (* (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (- 1.0 (* ux (* maxCos (fma ux maxCos (- 1.0 ux)))))) (* (- 1.0 ux) (* (fma ux maxCos (- 1.0 ux)) (log (+ 1.0 (expm1 (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))))) (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) (- (fma (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)) -1.0)))))",
    "output_parens": 56,
    "avg_bits_err_input": 13.63824748318509,
    "avg_bits_err_output": 12.464029628639699,
    "avg_bits_err_improve": 1.1742178545453914,
    "time": 41655.70751953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- ux (+ (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) (* ux ux))) (- (- ux)))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.67436470532853,
    "avg_bits_err_output": 0.31572248959041743,
    "avg_bits_err_improve": 13.358642215738113,
    "time": 30112.180908203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (if (!= (* maxCos (* ux ux)) 0.0) (* (- maxCos (* maxCos ux)) (* (* ux (* ux ux)) (/ maxCos (* ux (* maxCos ux))))) (* ux (- maxCos (* ux maxCos)))) zi))",
    "output_parens": 47,
    "avg_bits_err_input": 0.34068761311264495,
    "avg_bits_err_output": 0.36739618450529854,
    "avg_bits_err_improve": -0.02670857139265359,
    "time": 49035.327392578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.1992922197419501,
    "avg_bits_err_output": 0.1992922197419501,
    "avg_bits_err_improve": 0,
    "time": 23477.007568359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (- (/ (* u1 (/ u1 (- 1.0 u1))) u1) 0.0) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.543569304548471,
    "avg_bits_err_output": 0.5535786708097389,
    "avg_bits_err_improve": -0.010009366261267916,
    "time": 21270.608642578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(+ (* (sqrt (/ u1 (- 1.0 u1))) (+ (cos (* 6.28318530718 u2)) -1.0)) (sqrt (/ u1 (- 1.0 u1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.3151450401005405,
    "avg_bits_err_output": 0.3288504305415999,
    "avg_bits_err_improve": -0.013705390441059395,
    "time": 20832.17578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (/ (+ (- 1.0 (/ 1.0 (+ 1.0 (exp (/ PI s))))) (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ PI (- s))))))) (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 70,
    "avg_bits_err_input": 0.32963404237189015,
    "avg_bits_err_output": 0.3045264312014842,
    "avg_bits_err_improve": 0.02510761117040594,
    "time": 48508.796630859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06665255881401566,
    "avg_bits_err_output": 0.04779782351295715,
    "avg_bits_err_improve": 0.01885473530105851,
    "time": 9504.982666015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (+ (expm1 (/ (fabs x) (- s))) 2.0)) (+ (* s (exp (/ (fabs x) (- s)))) s))",
    "output_parens": 17,
    "avg_bits_err_input": 0.16605002735452667,
    "avg_bits_err_output": 0.1523177858985914,
    "avg_bits_err_improve": 0.013732241455935268,
    "time": 22812.453369140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.659869554704408,
    "avg_bits_err_output": 0.659869554704408,
    "avg_bits_err_improve": 0,
    "time": 21365.717041015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (+ (+ 1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))) -1.0) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.16408674862765432,
    "avg_bits_err_output": 0.17194003093183344,
    "avg_bits_err_improve": -0.007853282304179116,
    "time": 25960.2041015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (pow (fma eta eta (/ (/ (* sinTheta_O (+ sinTheta_O sinTheta_O)) -2.0) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) 0.5)))",
    "output_parens": 11,
    "avg_bits_err_input": 2.51106599356844,
    "avg_bits_err_output": 2.5064271340817097,
    "avg_bits_err_improve": 0.004638859486730151,
    "time": 26557.99853515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ (/ (* cosTheta_O (/ 0.5 v)) v) (exp (* sinTheta_i (/ sinTheta_O v)))) (/ cosTheta_i (sinh (/ 1.0 v))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4632674196993997,
    "avg_bits_err_output": 0.38712918969533106,
    "avg_bits_err_improve": 0.07613823000406866,
    "time": 29494.965576171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (- (* cosTheta_i cosTheta_O) (+ 1.0 (* sinTheta_i sinTheta_O))) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.11598676697993002,
    "avg_bits_err_output": 0.08922527250886439,
    "avg_bits_err_improve": 0.026761494471065628,
    "time": 22884.095458984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (/ (/ (- 1.0 (* alpha alpha)) (log (* alpha alpha))) PI)) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4787302764106153,
    "avg_bits_err_output": 0.48136122193401565,
    "avg_bits_err_improve": -0.0026309455234003742,
    "time": 25647.554443359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- (fma u -1.3333333333333333 0.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 14,
    "avg_bits_err_input": 1.3375915294041014,
    "avg_bits_err_output": 0.431911279698949,
    "avg_bits_err_improve": 0.9056802497051524,
    "time": 26340.21923828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (if (!= (log (/ 1.0 (+ 1.0 (* u -4.0)))) 0.0) (/ 1.0 (/ 1.0 (/ (- (- 2.0 (log (/ 1.0 (fma u -4.0 1.0)))) (+ (log (/ 1.0 (fma u -4.0 1.0))) (* (+ 1.0 (log (/ 1.0 (fma u -4.0 1.0)))) 2.0))) -4.0))) (log (/ 1.0 (+ 1.0 (* u -4.0))))))",
    "output_parens": 28,
    "avg_bits_err_input": 12.364197765594707,
    "avg_bits_err_output": 12.368574857671392,
    "avg_bits_err_improve": -0.004377092076685685,
    "time": 26550.916748046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (* (* (* 6.0 PI) s) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.1322888898725968,
    "avg_bits_err_output": 0.13245573357631404,
    "avg_bits_err_improve": -0.000166843703717251,
    "time": 22421.42041015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8834567869471265,
    "avg_bits_err_output": 0.7148888825382897,
    "avg_bits_err_improve": 0.16856790440883673,
    "time": 31168.267578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(log1p (expm1 (/ 1.0 (fma (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6912347107001349,
    "avg_bits_err_output": 0.47813284730424,
    "avg_bits_err_improve": 0.21310186339589487,
    "time": 21306.44677734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (sin (if (!= (* -2.0 (* PI u2)) 0.0) (/ 1.0 (- (if (!= (+ 1.0 (/ 0.5 (* PI u2))) 0.0) (/ 1.0 (/ 1.0 (+ 1.0 (/ 0.5 (* PI u2))))) (+ 1.0 (/ 0.5 (* PI u2)))) 1.0)) (* 2.0 (* PI u2)))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.64238750509035,
    "avg_bits_err_output": 13.668305562260702,
    "avg_bits_err_improve": -0.025918057170352782,
    "time": 23884.888916015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (fma (exp (+ 1.0 (log1p (log (- 1.0 u1))))) (exp -1.0) -1.0))) (cos (- (exp (log1p (* 2.0 (* PI u2)))) 1.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 13.697039825434446,
    "avg_bits_err_output": 13.619403190377882,
    "avg_bits_err_improve": 0.07763663505656382,
    "time": 25109.022216796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(if (!= alpha 0.0) (* (* alpha (log (- 1.0 u0))) (/ 1.0 (/ -1.0 alpha))) (* alpha (* alpha (- (log (- 1.0 u0))))))",
    "output_parens": 13,
    "avg_bits_err_input": 14.002637804717528,
    "avg_bits_err_output": 14.008055364775927,
    "avg_bits_err_improve": -0.005417560058399218,
    "time": 15998.748779296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (log1p (- u0)) (- (/ (/ sin2phi alphay) (- alphay)) (/ (/ cos2phi alphax) alphax)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.555530842915715,
    "avg_bits_err_output": 0.5236896245042678,
    "avg_bits_err_improve": 12.031841218411447,
    "time": 17092.232421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (* (tan (* PI l)) 8.0) (+ (+ F (+ F F)) (+ F (+ F (+ F (+ F F)))))) F))",
    "output_parens": 14,
    "avg_bits_err_input": 16.697940926346046,
    "avg_bits_err_output": 12.282147209311589,
    "avg_bits_err_improve": 4.415793717034457,
    "time": 26607.363525390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21540127684030846,
    "avg_bits_err_output": 0.14791524101186093,
    "avg_bits_err_improve": 0.06748603582844753,
    "time": 14222.420166015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 14.169776114473212,
    "avg_bits_err_output": 10.884327565696346,
    "avg_bits_err_improve": 3.2854485487768663,
    "time": 21168.0771484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (+ (+ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) -1.0) 1.0) (* PI -0.25))",
    "output_parens": 34,
    "avg_bits_err_input": 61.24436236411623,
    "avg_bits_err_output": 1.9184042661396896,
    "avg_bits_err_improve": 59.32595809797654,
    "time": 44262.536376953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= (* l l) 2e+215) (/ (* (sqrt 2.0) t) (sqrt (+ (* (* 2.0 t) (* t (/ (+ x 1.0) (+ x -1.0)))) (+ (* (/ (+ x 1.0) (+ x -1.0)) (* l l)) (* l (- l)))))) (/ (* (sqrt 2.0) t) (sqrt (+ (/ (* (+ x 1.0) (* 2.0 (* t t))) (+ x -1.0)) (fma (- l) l (/ (* (+ x 1.0) (* l l)) (+ x -1.0)))))))",
    "output_parens": 40,
    "avg_bits_err_input": 43.24177929978166,
    "avg_bits_err_output": 37.664301889123855,
    "avg_bits_err_improve": 5.5774774106578064,
    "time": 25272.259521484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.953121431623882,
    "avg_bits_err_output": 3.953121431623882,
    "avg_bits_err_improve": 0,
    "time": 25447.763671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 1.1960248549434027,
    "avg_bits_err_output": 1.2024284107805072,
    "avg_bits_err_improve": -0.006403555837104502,
    "time": 9716.86865234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (+ (/ (pow (/ Om Omc) 2.0) (fma (pow (/ t l) 2.0) -2.0 -1.0)) (/ -2.0 (- -2.0 (* (pow (/ t l) 2.0) 4.0))))))",
    "output_parens": 14,
    "avg_bits_err_input": 10.343448877249196,
    "avg_bits_err_output": 10.35037547922805,
    "avg_bits_err_improve": -0.006926601978854308,
    "time": 23441.93896484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 1e-161) (sqrt (* U (* (* 2.0 n) (- t (+ (* (pow (/ l Om) 2.0) (* n (- U U*))) (* 2.0 (* l (/ l Om)))))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))",
    "output_parens": 44,
    "avg_bits_err_input": 34.87608845753049,
    "avg_bits_err_output": 29.4027154983339,
    "avg_bits_err_improve": 5.473372959196592,
    "time": 35534.572265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -2e-108) (/ 2.0 (* (/ (* (sin k) (tan k)) l) (* (pow t 3.0) (/ (pow (/ k t) 2.0) l)))) (if (<= t 3.3e-108) (/ 2.0 (/ (* (exp (fma 3.0 (log t) (* 2.0 (log (/ k t))))) (* (sin k) (/ (tan k) l))) l)) (/ 2.0 (/ (* (pow (/ k t) 2.0) (* (tan k) (* (pow t 3.0) (/ (sin k) l)))) l))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.433712742115276,
    "avg_bits_err_output": 34.28376736378389,
    "avg_bits_err_improve": 13.149945378331388,
    "time": 43323.099609375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(- (/ (/ 2.0 (* (pow t 3.0) (/ (sin k) l))) (* (/ (tan k) l) (+ 2.0 (pow (/ k t) 2.0)))) 0.0)",
    "output_parens": 13,
    "avg_bits_err_input": 32.875653945299014,
    "avg_bits_err_output": 26.944104489351677,
    "avg_bits_err_improve": 5.931549455947337,
    "time": 22954.59619140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (+ (* a2 a2) (* a1 a1)) (sqrt 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5192069578349481,
    "avg_bits_err_output": 0.46678421251514535,
    "avg_bits_err_improve": 0.05242274531980273,
    "time": 25161.366943359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (exp (* (log (* 2.0 (* PI n))) (* k -0.5))) (sqrt (* 2.0 (* PI n)))) (sqrt k))",
    "output_parens": 12,
    "avg_bits_err_input": 0.5133391902296772,
    "avg_bits_err_output": 0.40948555592532854,
    "avg_bits_err_improve": 0.10385363430434869,
    "time": 19880.7705078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (cos (/ K 2.0)) (exp l))) (expm1 (+ l l))) U)",
    "output_parens": 9,
    "avg_bits_err_input": 17.536522096306445,
    "avg_bits_err_output": 0.09546240625180291,
    "avg_bits_err_improve": 17.441059690054644,
    "time": 25604.544677734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) 2.0) (* (cos (- (/ (if (!= (* K (+ m n)) 0.0) (/ 1.0 (/ 1.0 (* K (+ m n)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K m) 0.0) (* K (* (+ m n) (* K (- (exp (log1p (/ m (* K m)))) 1.0)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))))",
    "output_parens": 70,
    "avg_bits_err_input": 15.244949337409441,
    "avg_bits_err_output": 1.42462584697936,
    "avg_bits_err_improve": 13.82032349043008,
    "time": 24204.74365234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.66936560156295,
    "avg_bits_err_output": 17.66936560156295,
    "avg_bits_err_improve": 0,
    "time": 29718.508544921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.942765264523583,
    "avg_bits_err_output": 10.738614372688035,
    "avg_bits_err_improve": 3.204150891835548,
    "time": 26828.83642578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e+217) (* c0 (sqrt (/ (/ A l) V))) (if (<= (* V l) -2e-234) (* c0 (sqrt (/ A (* V l)))) (if (<= (* V l) 1e-115) (* c0 (sqrt (/ (/ A l) V))) (if (<= (* V l) 4e+255) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (/ (/ A V) l)))))))",
    "output_parens": 32,
    "avg_bits_err_input": 19.754043750378862,
    "avg_bits_err_output": 15.3555564521905,
    "avg_bits_err_improve": 4.398487298188362,
    "time": 18440.48291015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= d -5e+162) (* (/ c0 (* 2.0 w)) (fma (* d (/ (* d c0) (* (* w D) (* h D)))) 1.0 (sqrt (* (fma d (/ (* d c0) (* (* w D) (* h D))) M) (- (* d (/ (* d c0) (* (* w D) (* h D)))) M))))) (if (<= d -4.4e-138) (* (/ c0 (* 2.0 w)) (+ (/ (* (/ (/ c0 w) (* h D)) (* d d)) D) (sqrt (- (* (/ (* (/ (/ c0 w) (* h D)) (* d d)) D) (/ (* (/ (/ c0 w) (* h D)) (* d d)) D)) (* M M))))) (if (<= d 1e-153) (+ (* (* c0 (* d (/ (/ d (* w D)) (* D h)))) (/ c0 (+ w w))) (* (sqrt (* (fma (/ (/ d (* w D)) (* D h)) (* c0 d) M) (fma c0 (* d (/ (/ d (* w D)) (* D h))) (- M)))) (/ c0 (+ w w)))) (* (/ c0 (* 2.0 w)) (+ (* d (* d (/ (/ c0 w) (* D (* h D))))) (- (sqrt (fma (* d (* d (/ (/ c0 w) (* D (* h D))))) (* d (* d (/ (/ c0 w) (* D (* h D))))) (* M (- M)))) 0.0))))))",
    "output_parens": 112,
    "avg_bits_err_input": 59.414281227251884,
    "avg_bits_err_output": 54.797359505314695,
    "avg_bits_err_improve": 4.616921721937189,
    "time": 51982.725830078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* h (/ (pow (* M (/ (/ D d) 2.0)) 2.0) (+ l l)))))",
    "output_parens": 14,
    "avg_bits_err_input": 26.216037983146116,
    "avg_bits_err_output": 25.292447780474856,
    "avg_bits_err_improve": 0.9235902026712601,
    "time": 35523.311279296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (- -0.5 (/ 0.5 (hypot 1.0 x))) 0.0) (/ (if (!= (+ 0.25 (/ 0.25 (* (hypot 1.0 x) (hypot 1.0 x)))) 0.0) (/ (if (!= (+ 0.0625 (/ (/ 0.0625 (* (hypot 1.0 x) (hypot 1.0 x))) (* (hypot 1.0 x) (hypot 1.0 x)))) 0.0) (/ (- 0.00390625 (/ 0.00390625 (* (hypot 1.0 x) (* (* (hypot 1.0 x) (* (hypot 1.0 x) (* (hypot 1.0 x) (hypot 1.0 x)))) (* (hypot 1.0 x) (* (hypot 1.0 x) (hypot 1.0 x))))))) (+ 0.0625 (/ (/ 0.0625 (* (hypot 1.0 x) (hypot 1.0 x))) (* (hypot 1.0 x) (hypot 1.0 x))))) (+ 0.0625 (/ -0.0625 (* (hypot 1.0 x) (* (hypot 1.0 x) (* (hypot 1.0 x) (hypot 1.0 x))))))) (+ 0.25 (/ 0.25 (* (hypot 1.0 x) (hypot 1.0 x))))) (+ 0.25 (/ -0.25 (* (hypot 1.0 x) (hypot 1.0 x))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 95,
    "avg_bits_err_input": 15.391789417137355,
    "avg_bits_err_output": 14.904223951222715,
    "avg_bits_err_improve": 0.48756546591464023,
    "time": 17132.33251953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9828202803030276,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 0.9705702803030276,
    "time": 3324.2373046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* v (* v 5.0))) PI) (sqrt (- 2.0 (* v (* v 6.0))))) (* (fma v v -1.0) (- t)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4362961123149945,
    "avg_bits_err_output": 0.11181651785216942,
    "avg_bits_err_improve": 0.32447959446282504,
    "time": 16012.609375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (sqrt 2.0) 0.25) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.01322491020269024,
    "avg_bits_err_output": 0.01364624062518029,
    "avg_bits_err_improve": -0.00042133042249004916,
    "time": 10271.023681640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5586795959272463,
    "avg_bits_err_output": 0.5586795959272463,
    "avg_bits_err_improve": 0,
    "time": 10616.538818359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.8344327472608766,
    "avg_bits_err_output": 1.8258596269482863,
    "avg_bits_err_improve": 0.008573120312590277,
    "time": 22662.379638671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- mu (- (- Ec EDonor) Vef)) KbT)))) (/ NaChar (- (exp (/ (- (+ Ev (+ Vef EAccept)) mu) KbT)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02622911122411479,
    "avg_bits_err_output": 0.02622911122411479,
    "avg_bits_err_improve": 0,
    "time": 9070.28662109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (fma b (* b 4.0) (pow (fma a a (* b b)) 2.0)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.17661109062806482,
    "avg_bits_err_output": 0.17558985000288457,
    "avg_bits_err_improve": 0.0010212406251802475,
    "time": 13796.169677734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.1904976065326843,
    "avg_bits_err_output": 0.1904976065326843,
    "avg_bits_err_improve": 0,
    "time": 11481.706787109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18888481622889675,
    "avg_bits_err_output": 0.18888481622889675,
    "avg_bits_err_improve": 0,
    "time": 19442.579833984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (* (/ 1.0 (sqrt (fma x x (* 4.0 (* p p))))) x))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.998031364856104,
    "avg_bits_err_output": 13.258371506078301,
    "avg_bits_err_improve": -0.26034014122219773,
    "time": 13943.99951171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.94225197430117,
    "avg_bits_err_output": 0.04,
    "avg_bits_err_improve": 40.90225197430117,
    "time": 7851.792724609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))",
    "output_parens": 8,
    "avg_bits_err_input": 31.00025058020758,
    "avg_bits_err_output": 30.94990562879783,
    "avg_bits_err_improve": 0.050344951409751815,
    "time": 24564.49072265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) 0.0) (* (- a) (/ c (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))))) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.10190090268774,
    "avg_bits_err_output": 21.940484026788717,
    "avg_bits_err_improve": 12.161416875899022,
    "time": 16167.355712890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.40190670582469,
    "avg_bits_err_output": 34.40190670582469,
    "avg_bits_err_improve": 0,
    "time": 22895.545166015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (- 1.0 (cos x)) x) (/ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 31.351370300103493,
    "avg_bits_err_output": 30.575988023000495,
    "avg_bits_err_improve": 0.7753822771029988,
    "time": 16965.514404296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (/ (if (!= (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n))) 0.0) (/ (if (!= (+ (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (* (+ (log x) (log x)) (/ 2.0 n)))) 0.0) (/ (if (!= (+ (exp (/ (- (- (* (+ (log1p x) (log1p x)) -2.0)) (* (+ (log1p x) (log1p x)) -2.0)) n)) (exp (* 8.0 (/ (log x) n)))) 0.0) (/ (- (exp (/ (+ (- (- (* (+ (log1p x) (log1p x)) -2.0)) (* (+ (log1p x) (log1p x)) -2.0)) (- (- (* (+ (log1p x) (log1p x)) -2.0)) (* (+ (log1p x) (log1p x)) -2.0))) n)) (exp (* (/ (+ (log x) (log x)) n) 8.0))) (+ (exp (/ (- (- (* (+ (log1p x) (log1p x)) -2.0)) (* (+ (log1p x) (log1p x)) -2.0)) n)) (exp (* 8.0 (/ (log x) n))))) (- (exp (/ (- (- (* (+ (log1p x) (log1p x)) -2.0)) (* (+ (log1p x) (log1p x)) -2.0)) n)) (exp (* 8.0 (/ (log x) n))))) (+ (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (* (+ (log x) (log x)) (/ 2.0 n))))) (- (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (* (+ (log x) (log x)) (/ 2.0 n))))) (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n)))) (- (exp (/ (+ (log1p x) (log1p x)) n)) (* (pow x (/ 1.0 n)) (pow x (/ 1.0 n))))) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 190,
    "avg_bits_err_input": 33.09710080445001,
    "avg_bits_err_output": 32.83296321195627,
    "avg_bits_err_improve": 0.26413759249373925,
    "time": 35491.990478515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (+ (+ (log1p N) 2.0) -2.0) (log N))",
    "output_parens": 5,
    "avg_bits_err_input": 29.461923562613176,
    "avg_bits_err_output": 29.469611088865953,
    "avg_bits_err_improve": -0.007687526252777133,
    "time": 14845.831298828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (/ 1.0 x) (if (!= (+ 1.0 (/ x (+ x 1.0))) 0.0) (/ (fma (/ x (+ x 1.0)) (/ x (+ x 1.0)) -1.0) (+ 1.0 (/ x (+ x 1.0)))) (+ (/ x (+ x 1.0)) -1.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 14.989250107322736,
    "avg_bits_err_output": 14.992612807215657,
    "avg_bits_err_improve": -0.0033626998929214835,
    "time": 15972.7236328125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(+ (if (!= (cos x) 0.0) (/ (* (cos x) (- (cos (+ x eps)) (+ (cos x) -1.0))) (cos x)) (- (cos (+ x eps)) (+ (cos x) -1.0))) -1.0)",
    "output_parens": 18,
    "avg_bits_err_input": 39.667621311749734,
    "avg_bits_err_output": 39.69316319188393,
    "avg_bits_err_improve": -0.02554188013419889,
    "time": 25756.939208984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.80329868934751,
    "avg_bits_err_output": 29.50163538960708,
    "avg_bits_err_improve": 0.3016632997404294,
    "time": 12101.125732421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (/ (- 1.0 (cos x)) (sin x)) 0.0) (/ 1.0 (/ 1.0 (/ (- 1.0 (cos x)) (sin x)))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 16,
    "avg_bits_err_input": 30.524368888568375,
    "avg_bits_err_output": 30.55284322584926,
    "avg_bits_err_improve": -0.028474337280883333,
    "time": 21971.203857421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ c (+ b (sqrt (fma -4.0 (* a c) (* b b))))) (* a -4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.99866586007448,
    "avg_bits_err_output": 21.6832482293706,
    "avg_bits_err_improve": 12.31541763070388,
    "time": 26538.579345703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (if (!= (- (* b b) (* (* a c) -4.0)) 0.0) (+ (* (fma b b (* c (* a 4.0))) (/ (* (* a c) -4.0) (fma b b (* c (* a 4.0))))) (* (fma b b (* c (* a 4.0))) (* b (/ b (fma b b (* c (* a 4.0))))))) (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 34,
    "avg_bits_err_input": 34.516884818183726,
    "avg_bits_err_output": 34.66631044594546,
    "avg_bits_err_improve": -0.14942562776173673,
    "time": 26285.33544921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(if (<= (/ (log (- 1.0 x)) (log (+ 1.0 x))) -0.999) (/ (if (!= (exp (log1p (log (- 1.0 x)))) 0.0) (/ (- (* (exp (log1p (log (- 1.0 x)))) (exp (log1p (log (- 1.0 x))))) (* (exp (log1p (log (- 1.0 x)))) 1.0)) (exp (log1p (log (- 1.0 x))))) (log (- 1.0 x))) (+ (+ (log1p x) -1.0) 1.0)) (- (+ (+ 1.0 (/ (fma (log (- 1.0 x)) 0.5 -0.5) (log1p x))) (/ (fma (log (- 1.0 x)) 0.5 0.5) (log1p x))) 1.0))",
    "output_parens": 52,
    "avg_bits_err_input": 61.15650823780998,
    "avg_bits_err_output": 0.4891592457271808,
    "avg_bits_err_improve": 60.6673489920828,
    "time": 26417.3125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (log1p n) 0.0) (/ (+ (* (log1p n) (log1p n)) (* (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n))))) (log1p n)) (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0)))",
    "output_parens": 23,
    "avg_bits_err_input": 63.00680280572232,
    "avg_bits_err_output": 0.6276981134048124,
    "avg_bits_err_improve": 62.37910469231751,
    "time": 18849.884765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ eps (- -1.0 eps)) (if (!= (+ 1.0 (/ -1.0 (- -1.0 eps))) 0.0) (/ (- 1.0 (/ 1.0 (- (+ 1.0 eps) (* eps (- -1.0 eps))))) (+ 1.0 (/ -1.0 (- -1.0 eps)))) (+ 1.0 (/ 1.0 (- -1.0 eps))))))",
    "output_parens": 22,
    "avg_bits_err_input": 58.77462370524597,
    "avg_bits_err_output": 50.64667069342326,
    "avg_bits_err_improve": 8.127953011822711,
    "time": 18387.16357421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ (+ (/ 0.5 x) (/ -0.5 (tan x))) (if (!= (- -1.0 (+ 1.0 (/ (- 1.0 (/ x (tan x))) (+ x x)))) 0.0) (/ (- 1.0 (* (+ 1.0 (/ (- 1.0 (/ x (tan x))) (+ x x))) (+ 1.0 (/ (- 1.0 (/ x (tan x))) (+ x x))))) (- -1.0 (+ 1.0 (/ (- 1.0 (/ x (tan x))) (+ x x))))) (/ (- 1.0 (/ x (tan x))) (+ x x))))",
    "output_parens": 41,
    "avg_bits_err_input": 59.95306982695454,
    "avg_bits_err_output": 59.94479367162856,
    "avg_bits_err_improve": 0.008276155325980028,
    "time": 28850.204345703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ (expm1 (* eps (+ a b))) (expm1 (* eps b))) (/ eps (expm1 (* eps a))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.128964569987595,
    "avg_bits_err_output": 29.54757109627706,
    "avg_bits_err_improve": 30.581393473710534,
    "time": 27193.380615234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.33835830818711,
    "avg_bits_err_output": 0.405,
    "avg_bits_err_improve": 40.93335830818711,
    "time": 5431.142333984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.77604677655998,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 58.77529677655998,
    "time": 3152.4404296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.492312971654627,
    "avg_bits_err_output": 0.024869335871256167,
    "avg_bits_err_improve": 29.467443635783372,
    "time": 4093.1005859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (if (!= (expm1 (- x)) 0.0) (/ (if (!= (* (expm1 (- x)) (expm1 (- x))) 0.0) (/ (fma (* (expm1 (- x)) (expm1 (- x))) (* (expm1 (- x)) (expm1 (- x))) (* (expm1 (- x)) (* (expm1 x) (* (expm1 (- x)) (expm1 (- x)))))) (* (expm1 (- x)) (expm1 (- x)))) (* (expm1 (- x)) (+ (expm1 (- x)) (expm1 x)))) (- (expm1 (- x)))) (- 2.0 (+ (exp x) (exp (- x))))))",
    "output_parens": 55,
    "avg_bits_err_input": 30.160152882582313,
    "avg_bits_err_output": 29.069580546701033,
    "avg_bits_err_improve": 1.09057233588128,
    "time": 21469.5673828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.983138448054993,
    "avg_bits_err_output": 9.983138448054993,
    "avg_bits_err_improve": 0,
    "time": 43226.00146484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (/ (sin (+ x eps)) (if (!= (cos (+ x eps)) 0.0) (/ (* (cos (+ x eps)) (cos (+ x eps))) (log1p (expm1 (cos (+ x eps))))) (cos (+ x eps)))) (tan x))",
    "output_parens": 21,
    "avg_bits_err_input": 37.213770144703545,
    "avg_bits_err_output": 37.314724014780104,
    "avg_bits_err_improve": -0.10095387007655887,
    "time": 21786.701171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (pow (+ x 1.0) 0.5) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.254410173334666,
    "avg_bits_err_output": 0.16419116562662261,
    "avg_bits_err_improve": 30.090219007708043,
    "time": 12552.009521484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 36.9918538104059,
    "avg_bits_err_output": 36.9918538104059,
    "avg_bits_err_improve": 0,
    "time": 22798.50244140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(* (/ 2.0 (sqrt x)) (/ (/ (- 1.0 (/ 1.0 (/ (sqrt (+ 1.0 x)) (sqrt x)))) (sqrt x)) (/ 2.0 (sqrt x))))",
    "output_parens": 14,
    "avg_bits_err_input": 19.508638628069466,
    "avg_bits_err_output": 19.512807786086313,
    "avg_bits_err_improve": -0.004169158016846808,
    "time": 19149.913330078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 14.915952475671583,
    "avg_bits_err_output": 14.915952475671583,
    "avg_bits_err_improve": 0,
    "time": 12036.66015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.2586342510356,
    "avg_bits_err_output": 1.1996047253163828,
    "avg_bits_err_improve": 29.059029525719215,
    "time": 24007.53955078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (* (/ m v) (* (- 1.0 m) (- 1.0 m))) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07949080507553279,
    "avg_bits_err_output": 0.07594832382517222,
    "avg_bits_err_improve": 0.0035424812503605657,
    "time": 10077.28955078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (/ a (/ 1.0 b)) (* a (- b)))",
    "output_parens": 5,
    "avg_bits_err_input": 16.12199246437602,
    "avg_bits_err_output": 0.26945545156583534,
    "avg_bits_err_improve": 15.852537012810185,
    "time": 12327.485595703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (/ angle 180.0)) 0.0) (/ 1.0 (/ 1.0 (if (!= (* PI (/ angle 180.0)) 0.0) (/ 2.0 (/ (/ 2.0 PI) (/ angle 180.0))) (* PI (/ angle 180.0))))) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 27,
    "avg_bits_err_input": 20.039304238767144,
    "avg_bits_err_output": 20.03633269393331,
    "avg_bits_err_improve": 0.0029715448338336614,
    "time": 41871.745849609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (log1p (expm1 (cos (* PI (/ angle 180.0))))))",
    "output_parens": 14,
    "avg_bits_err_input": 31.154669206096404,
    "avg_bits_err_output": 31.155033940099894,
    "avg_bits_err_improve": -0.0003647340034902413,
    "time": 37720.663818359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (* angle 0.005555555555555556) PI))) 2.0) (pow (* b (cos (/ (* angle PI) 180.0))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.483593051521456,
    "avg_bits_err_output": 20.47470312699188,
    "avg_bits_err_improve": 0.008889924529576376,
    "time": 41111.314208984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17922236042698106,
    "avg_bits_err_output": 0.17499213598105767,
    "avg_bits_err_improve": 0.004230224445923386,
    "time": 15754.49365234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (/ (* (tan x) (sin x)) (cos x))) (+ 1.0 (/ (* (tan x) (sin x)) (cos x))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.30791094300227856,
    "avg_bits_err_output": 0.29924730174685543,
    "avg_bits_err_improve": 0.008663641255423127,
    "time": 16926.396240234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13743872187554088,
    "avg_bits_err_output": 0.1382924812503606,
    "avg_bits_err_improve": -0.0008537593748197125,
    "time": 18223.551025390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.21888736549553,
    "avg_bits_err_output": 17.216134354192377,
    "avg_bits_err_improve": 0.0027530113031524195,
    "time": 34945.303466796875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.45237299224613,
    "avg_bits_err_output": 0.1689860906280649,
    "avg_bits_err_improve": 52.283386901618066,
    "time": 24386.59912109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* -4.0 (* a c))))) 0.0) (* (* -4.0 a) (/ c (+ b (sqrt (fma b b (* -4.0 (* a c))))))) (- (sqrt (fma b b (* -4.0 (* a c)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.379383801467668,
    "avg_bits_err_output": 0.33014475352123585,
    "avg_bits_err_improve": 28.049239047946433,
    "time": 26227.11474609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* -4.0 (* (/ c (+ b (sqrt (fma -4.0 (* a c) (* b b))))) a)) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.97590902782919,
    "avg_bits_err_output": 0.24645338438203102,
    "avg_bits_err_improve": 43.72945564344716,
    "time": 21641.210205078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.99914084391831,
    "avg_bits_err_output": 33.99914084391831,
    "avg_bits_err_improve": 0,
    "time": 19709.777587890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (log1p (expm1 (cos (- lambda1 lambda2)))) (cos phi1))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.8633101713535926,
    "avg_bits_err_output": 0.8823769134778255,
    "avg_bits_err_improve": -0.019066742124232983,
    "time": 29380.952392578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (log (exp (+ 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 28,
    "avg_bits_err_input": 29.561451474339556,
    "avg_bits_err_output": 29.53038418888825,
    "avg_bits_err_improve": 0.031067285451307214,
    "time": 16952.140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(- (/ (expm1 x) (+ (exp x) (exp (- x)))) (/ (expm1 (- x)) (+ (exp x) (exp (- x)))))",
    "output_parens": 14,
    "avg_bits_err_input": 58.20251103404985,
    "avg_bits_err_output": 1.184188721875541,
    "avg_bits_err_improve": 57.018322312174305,
    "time": 20124.702392578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (- (exp (- x)))) 2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 58.131545867547196,
    "avg_bits_err_output": 0.04407312031259014,
    "avg_bits_err_improve": 58.08747274723461,
    "time": 8764.91552734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.009271240625180288,
    "avg_bits_err_output": 0.009271240625180288,
    "avg_bits_err_improve": 0,
    "time": 2993.020263671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.51375,
    "avg_bits_err_output": 31.51375,
    "avg_bits_err_improve": 0,
    "time": 5533.700439453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (/ x (/ (+ x -1.0) -2.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.766096294650104,
    "avg_bits_err_output": 0.015969360937770433,
    "avg_bits_err_improve": 58.75012693371234,
    "time": 16439.71875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ (- (sqrt (- 1.0 (* x x))) -0.5) x) (/ 1.0 (+ x x))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.01075,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": -0.00037500000000000033,
    "time": 5627.840576171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (* (cos (atan (/ eh (* ew (tan t))))) (sin t))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.129375,
    "avg_bits_err_output": 0.1298962406251803,
    "avg_bits_err_improve": -0.0005212406251803026,
    "time": 24932.526611328125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (if (!= (cos (atan (* (- eh) (/ (tan t) ew)))) 0.0) (/ 1.0 (/ 1.0 (cos (atan (* (- eh) (/ (tan t) ew)))))) (cos (atan (* (- eh) (/ (tan t) ew)))))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.12587595881547559,
    "avg_bits_err_output": 0.12772031779892273,
    "avg_bits_err_improve": -0.0018443589834471474,
    "time": 18748.55126953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.35066410203863,
    "avg_bits_err_output": 3.7905688609331434,
    "avg_bits_err_improve": 35.560095241105486,
    "time": 29377.372802734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.618058391079979,
    "avg_bits_err_output": 0.00975,
    "avg_bits_err_improve": 14.608308391079978,
    "time": 7674.674560546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (if (!= (- -1.0 (- (cos delta) (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) -1.0))) 0.0) (/ (- 1.0 (- (* (cos delta) (cos delta)) (+ (* (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) -1.0) (- (cos delta) (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) -1.0))) (* (cos delta) (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) -1.0))))) (- -1.0 (- (cos delta) (fma (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) -1.0)))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 101,
    "avg_bits_err_input": 0.15662077084698975,
    "avg_bits_err_output": 0.1948943819071331,
    "avg_bits_err_improve": -0.03827361106014335,
    "time": 40734.644287109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.47411886526256,
    "avg_bits_err_output": 0.16808045156583534,
    "avg_bits_err_improve": 52.306038413696726,
    "time": 24536.268798828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.58994764020808,
    "avg_bits_err_output": 0.3414137234500302,
    "avg_bits_err_improve": 28.24853391675805,
    "time": 23096.02783203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 44.01911326624868,
    "avg_bits_err_output": 0.2451208656323915,
    "avg_bits_err_improve": 43.77399240061629,
    "time": 24682.291748046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.031625337564016,
    "avg_bits_err_output": 34.031625337564016,
    "avg_bits_err_improve": 0,
    "time": 20109.820068359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.194486882436959,
    "avg_bits_err_output": 13.194486882436959,
    "avg_bits_err_improve": 0,
    "time": 35248.65380859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(+ (if (!= (/ x (+ -2.0 (+ x x))) 0.0) (/ (- (* (/ x (+ -2.0 (+ x x))) (- (/ x (+ x 1.0)) (/ x (+ -2.0 (+ x x))))) (* (/ x (+ -2.0 (+ x x))) (/ x (+ -2.0 (+ x x))))) (/ x (+ -2.0 (+ x x)))) (- (/ x (+ x 1.0)) (/ (+ x x) (+ -2.0 (+ x x))))) (- (/ 1.0 (+ x -1.0))))",
    "output_parens": 38,
    "avg_bits_err_input": 29.358130577874952,
    "avg_bits_err_output": 25.65067218917456,
    "avg_bits_err_improve": 3.707458388700392,
    "time": 29741.90771484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.05037399119763805,
    "avg_bits_err_improve": -0.038498991197638055,
    "time": 4976.41259765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (if (!= (/ 1.0 (+ -1.0 x)) 0.0) (/ (- (* (/ (- (/ (/ x (+ x -1.0)) (+ x -1.0)) (/ 1.0 (+ x -1.0))) (/ 1.0 (- 1.0 x))) (/ 1.0 (+ -1.0 x))) (/ 1.0 (* (+ -1.0 x) (+ -1.0 x)))) (/ 1.0 (+ -1.0 x))) (- 1.0 (/ (- -1.0 x) (- 1.0 x)))) (+ 1.0 x))",
    "output_parens": 31,
    "avg_bits_err_input": 14.85230374844709,
    "avg_bits_err_output": 12.92488002877231,
    "avg_bits_err_improve": 1.9274237196747794,
    "time": 20058.899658203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) (- A)) (* (+ (pow B 2.0) (* (* A C) -4.0)) (* F -2.0)))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 52.566082583251784,
    "avg_bits_err_output": 52.26183953890354,
    "avg_bits_err_improve": 0.30424304434824734,
    "time": 36407.607421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) PI))",
    "output_parens": 11,
    "avg_bits_err_input": 29.75221806948308,
    "avg_bits_err_output": 29.75171896608196,
    "avg_bits_err_improve": 0.0004991034011219142,
    "time": 30656.994873046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (* (pow (* (* F (+ (* A (* C -8.0)) (* 2.0 (pow B 2.0)))) (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) 0.5) 2.0) (- (- (pow B 2.0)) (- (pow B 2.0) (* A (* C 8.0)))))",
    "output_parens": 24,
    "avg_bits_err_input": 52.30050522129833,
    "avg_bits_err_output": 52.005200184221586,
    "avg_bits_err_improve": 0.29530503707674427,
    "time": 35354.5419921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.34486327965288,
    "avg_bits_err_output": 15.34486327965288,
    "avg_bits_err_improve": 0,
    "time": 32710.916259765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 0.5 a) (if (!= g 0.0) (/ (* g (- g (- (sqrt (- (* g g) (* h h)))))) (- g)) (- (- g) (sqrt (- (* g g) (* h h))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 35.23042539824691,
    "avg_bits_err_output": 35.1375572702472,
    "avg_bits_err_improve": 0.0928681279997079,
    "time": 20314.767578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (if (!= (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0))) 0.0) (* (* (cos (fma PI 0.6666666666666666 (/ (acos (- (/ g h))) 3.0))) (cos (fma PI 0.6666666666666666 (- (exp (log1p (/ (acos (/ g (- h))) 3.0))) 1.0)))) (/ 1.0 (cos (fma PI 0.6666666666666666 (/ (acos (- (/ g h))) 3.0))))) (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))",
    "output_parens": 39,
    "avg_bits_err_input": 0.9899345875079336,
    "avg_bits_err_output": 0.03618665469173679,
    "avg_bits_err_improve": 0.9537479328161969,
    "time": 17297.015380859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7018656015629509,
    "avg_bits_err_output": 0.7018656015629509,
    "avg_bits_err_improve": 0,
    "time": 3919.255859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+306) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-313) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ (* a2 (/ a1 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) 4e+296) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.147461439121788,
    "avg_bits_err_output": 2.2506919678425947,
    "avg_bits_err_improve": 8.896769471279192,
    "time": 10202.104736328125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(+ (* x y) (- (log1p (exp x)) (* x (+ y y))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.44698812628009865,
    "avg_bits_err_output": 0.4099364816370412,
    "avg_bits_err_improve": 0.037051644643057435,
    "time": 9263.555419921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -0.000102) (log1p (if (!= (hypot 1.0 x) 0.0) (+ (/ (* (hypot 1.0 x) (+ x (hypot 1.0 x))) (+ (hypot 1.0 x) (hypot 1.0 x))) (+ (/ (/ (/ (hypot 1.0 x) (hypot 1.0 x)) 2.0) -1.0) (* (+ (hypot 1.0 x) (+ x -1.0)) (/ (/ (hypot 1.0 x) (hypot 1.0 x)) 2.0)))) (+ x (+ (hypot 1.0 x) -1.0)))) (log1p (if (!= (- (- 1.0 x) (hypot 1.0 x)) 0.0) (/ 1.0 (/ 1.0 (+ x (+ (hypot 1.0 x) -1.0)))) (+ x (+ (hypot 1.0 x) -1.0)))))",
    "output_parens": 46,
    "avg_bits_err_input": 53.36214296657906,
    "avg_bits_err_output": 14.267440242561928,
    "avg_bits_err_improve": 39.094702724017125,
    "time": 15774.93310546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.716441266604496,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.716441266604496,
    "time": 1951.406982421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- (/ x (* (+ 1.0 x) -2.0)) (/ (- 2.0 x) (* (+ 1.0 x) -2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.010875,
    "avg_bits_err_output": 0.015323120312590146,
    "avg_bits_err_improve": -0.004448120312590146,
    "time": 8237.160888671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1330.035400390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* w r) (fma (/ (* w r) (- 1.0 v)) (- 0.375 (* v 0.25)) (fma (/ (- v) 4.0) (/ (* w r) (- 1.0 v)) (* w (* (/ r (- 1.0 v)) (* v 0.25)))))) 4.5))",
    "output_parens": 24,
    "avg_bits_err_input": 13.010359042811723,
    "avg_bits_err_output": 0.6157286238626631,
    "avg_bits_err_improve": 12.39463041894906,
    "time": 24512.593994140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (+ (* (* x1 (* (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0)) x1) (* (* x1 -6.0) x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.5076809803471464,
    "avg_bits_err_output": 0.2715935239960449,
    "avg_bits_err_improve": 0.23608745635110145,
    "time": 71007.67895507812,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (+ t1 u)) (- v)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.241386591681053,
    "avg_bits_err_output": 1.3519960487637437,
    "avg_bits_err_improve": 16.889390542917308,
    "time": 8594.6728515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2251156015629507,
    "avg_bits_err_output": 0.18457556406367184,
    "avg_bits_err_improve": 0.04054003749927887,
    "time": 8288.4033203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003948120312590144,
    "avg_bits_err_output": 0.003948120312590144,
    "avg_bits_err_improve": 0,
    "time": 8401.364990234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (- (/ (* PI -0.5) (* b (- b a))) (/ (* PI -0.5) (* a (- b a)))) (+ b a))",
    "output_parens": 11,
    "avg_bits_err_input": 14.104115558514566,
    "avg_bits_err_output": 0.24141541406655634,
    "avg_bits_err_improve": 13.86270014444801,
    "time": 17502.614990234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (+ 1.0 (exp (- (* x eps) x))) 0.0) (/ (+ (* (+ 1.0 (exp (- (* x eps) x))) (+ 1.0 (exp (- (* x eps) x)))) (* (+ 1.0 (exp (- (* x eps) x))) (- (+ (/ (exp (- (* x eps) x)) eps) (+ (exp (- (fma x eps x))) -1.0)) (/ (exp (- (fma x eps x))) eps)))) (+ 1.0 (exp (- (* x eps) x)))) (+ (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* x eps)))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma x eps x))))) 2.0)",
    "output_parens": 53,
    "avg_bits_err_input": 29.48144291384505,
    "avg_bits_err_output": 0.9160175491094877,
    "avg_bits_err_improve": 28.565425364735564,
    "time": 21809.532470703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.01225,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 0,
    "time": 4151.683349609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- (- 4.0 (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t))) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0)))) (+ 2.0 (- (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t)))))",
    "output_parens": 31,
    "avg_bits_err_input": 0.0155,
    "avg_bits_err_output": 0.0641911656266226,
    "avg_bits_err_improve": -0.048691165626622596,
    "time": 16894.28369140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ (* (/ t (+ t 1.0)) (* 8.0 (/ t (+ t 1.0)))) 2.0) (+ (* (/ t (+ t 1.0)) (* 8.0 (/ t (+ t 1.0)))) 4.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.07075,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 0.06399999999999999,
    "time": 13143.0693359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3697.68017578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6755.5283203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2705.552978515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.814598372922784,
    "avg_bits_err_output": 0.25275,
    "avg_bits_err_improve": 7.5618483729227846,
    "time": 35891.643310546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.403162216803511,
    "avg_bits_err_output": 7.403162216803511,
    "avg_bits_err_improve": 0,
    "time": 15776.290771484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 16.029201965016785,
    "avg_bits_err_output": 16.029201965016785,
    "avg_bits_err_improve": 0,
    "time": 13974.759033203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(+ (+ (exp (* 10.0 (* x x))) (exp (* 10.0 (* x x)))) (* (exp (* 10.0 (* x x))) (+ (cos x) -2.0)))",
    "output_parens": 14,
    "avg_bits_err_input": 3.552710306718202,
    "avg_bits_err_output": 3.56400023530461,
    "avg_bits_err_improve": -0.011289928586407871,
    "time": 17523.234619140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -100000000000.0) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (* (/ x (+ x (/ 1.0 x))) (/ 1.0 x)) 0.0) (/ x (fma x x 1.0))) (if (<= x 5e-37) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (* (/ x (+ x (/ 1.0 x))) (/ 1.0 x)) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 43,
    "avg_bits_err_input": 14.791668553750958,
    "avg_bits_err_output": 0.011698120312590146,
    "avg_bits_err_improve": 14.779970433438367,
    "time": 8789.236572265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.593630075264166,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.593630075264166,
    "time": 5766.490234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.00222041175863,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 39.00134541175863,
    "time": 4771.469970703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.290875,
    "avg_bits_err_improve": 63.709125,
    "time": 15815.39404296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.8432554647147,
    "avg_bits_err_output": 0.4082409781302287,
    "avg_bits_err_improve": 61.43501448658447,
    "time": 7755.201171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (if (!= (- (* b b) (* (* a c) -4.0)) 0.0) (+ (* (fma b b (* c (* a 4.0))) (/ (* (* a c) -4.0) (fma b b (* c (* a 4.0))))) (* (fma b b (* c (* a 4.0))) (* b (/ b (fma b b (* c (* a 4.0))))))) (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 34,
    "avg_bits_err_input": 34.516884818183726,
    "avg_bits_err_output": 34.66631044594546,
    "avg_bits_err_improve": -0.14942562776173673,
    "time": 27804.896240234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.99914084391831,
    "avg_bits_err_output": 33.99914084391831,
    "avg_bits_err_improve": 0,
    "time": 22460.796875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2230.324951171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.88220275472192,
    "avg_bits_err_output": 0.018375,
    "avg_bits_err_improve": 39.86382775472192,
    "time": 6949.98828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.660100310055522,
    "avg_bits_err_output": 20.660100310055522,
    "avg_bits_err_improve": 0,
    "time": 4852.6787109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.675222906064817,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.675222906064817,
    "time": 9706.321533203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(+ (* a (+ c d)) (* a b))",
    "output_parens": 4,
    "avg_bits_err_input": 0.039625,
    "avg_bits_err_output": 0.041,
    "avg_bits_err_improve": -0.0013750000000000012,
    "time": 5569.4091796875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ a b)) (* a (+ a b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.022073120312590146,
    "avg_bits_err_output": 0.01625,
    "avg_bits_err_improve": 0.005823120312590146,
    "time": 5603.068115234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.01275,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0.012499999999999999,
    "time": 3503.682373046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0,
    "time": 1912.257080078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ c (+ b (+ a d))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40046033906799905,
    "avg_bits_err_output": 0.24825,
    "avg_bits_err_improve": 0.15221033906799905,
    "time": 4781.03271484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(- 1.0 (cos x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.882990703357898,
    "avg_bits_err_output": 29.882990703357898,
    "avg_bits_err_improve": 0,
    "time": 7827.684814453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.225150136310525,
    "avg_bits_err_output": 0.296875,
    "avg_bits_err_improve": 23.928275136310525,
    "time": 10512.857177734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (- (tan x))) 0.0) (/ (/ (/ (fma x (/ x (tan x)) (* x (/ (sin x) (- (tan x))))) (tan x)) -1.0) (/ x (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 24,
    "avg_bits_err_input": 30.003921320546326,
    "avg_bits_err_output": 30.01184727130916,
    "avg_bits_err_improve": -0.007925950762835754,
    "time": 32258.31103515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007573120312590144,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.006448120312590144,
    "time": 2448.655517578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* 100.0 (- (/ (pow (+ (/ i n) 1.0) n) (/ i n)) (/ 1.0 (/ i n)))))",
    "output_parens": 24,
    "avg_bits_err_input": 47.94633672975809,
    "avg_bits_err_output": 13.510333577926145,
    "avg_bits_err_improve": 34.43600315183194,
    "time": 25621.1748046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma d d (* c c)))) (* a (/ c (fma d d (* c c)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.152970838189805,
    "avg_bits_err_output": 22.75329032898852,
    "avg_bits_err_improve": 3.3996805092012856,
    "time": 12532.558349609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.438523611620948,
    "avg_bits_err_output": 23.164720900542935,
    "avg_bits_err_improve": 3.2738027110780124,
    "time": 14283.045654296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.033125,
    "avg_bits_err_output": 0.020360521314888556,
    "avg_bits_err_improve": 0.012764478685111446,
    "time": 13652.20458984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- ux (fma ux (* maxCos (fma ux maxCos (- 2.0 (* 2.0 ux)))) (- (* ux ux) ux)))))",
    "output_parens": 13,
    "avg_bits_err_input": 13.686185619014726,
    "avg_bits_err_output": 0.5475179629825446,
    "avg_bits_err_improve": 13.138667656032181,
    "time": 29445.11474609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- (- ux (* ux ux)) (+ (* ux (* (- 1.0 ux) maxCos)) (* ux (* maxCos (* ux maxCos))))) (- (+ (- ux) (* ux (* maxCos (- 1.0 ux))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 13.724063613141345,
    "avg_bits_err_output": 0.33173564713228965,
    "avg_bits_err_improve": 13.392327966009056,
    "time": 26880.21728515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (+ (* (* ux maxCos) (* (- 1.0 ux) zi)) (* (sqrt (- 1.0 (* (- 1.0 ux) (* (* maxCos maxCos) (* ux (- ux (* ux ux))))))) (* (sin (* PI (* uy 2.0))) yi))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.3372387253491264,
    "avg_bits_err_output": 0.32874203635093796,
    "avg_bits_err_improve": 0.00849668899818845,
    "time": 44016.364501953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.20894844765789308,
    "avg_bits_err_output": 0.20894844765789308,
    "avg_bits_err_improve": 0,
    "time": 22202.578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (log1p (expm1 (sin (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5538096882505927,
    "avg_bits_err_output": 0.5578581281573773,
    "avg_bits_err_improve": -0.004048439906784607,
    "time": 25816.455810546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(+ (* (sqrt (/ u1 (- 1.0 u1))) (+ (cos (* 6.28318530718 u2)) -1.0)) (sqrt (/ u1 (- 1.0 u1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.3207886334593113,
    "avg_bits_err_output": 0.3340109373939564,
    "avg_bits_err_improve": -0.013222303934645074,
    "time": 19073.80029296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ -1.0 (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 2.0 (expm1 (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.3318218683702057,
    "avg_bits_err_output": 0.3327553064851024,
    "avg_bits_err_improve": -0.0009334381148966564,
    "time": 59869.166259765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (+ (/ (+ x (+ x x)) (* s -4.0)) (/ x (* s -4.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.05961664007037485,
    "avg_bits_err_output": 0.061132653173593295,
    "avg_bits_err_improve": -0.0015160131032184443,
    "time": 16094.84033203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (- (exp (/ (fabs x) (- s)))) (- -1.0 (+ (exp (/ (fabs x) (/ s -2.0))) (* (exp (/ (fabs x) (- s))) 2.0)))) s)",
    "output_parens": 18,
    "avg_bits_err_input": 0.12713487757054245,
    "avg_bits_err_output": 0.0933424267780683,
    "avg_bits_err_improve": 0.03379245079247416,
    "time": 21386.2119140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6635499846456265,
    "avg_bits_err_output": 0.6635499846456265,
    "avg_bits_err_improve": 0,
    "time": 21922.081298828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.161460654199401,
    "avg_bits_err_output": 0.15414467802558782,
    "avg_bits_err_improve": 0.007315976173813188,
    "time": 17815.112060546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.5778873774689015,
    "avg_bits_err_output": 2.5778873774689015,
    "avg_bits_err_improve": 0,
    "time": 35552.87451171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ (/ (/ cosTheta_O (exp (/ (* sinTheta_i sinTheta_O) v))) (sinh (/ 1.0 v))) (* 4.0 v)) (* cosTheta_i (/ 2.0 v)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45413552700512566,
    "avg_bits_err_output": 0.38967870547053185,
    "avg_bits_err_improve": 0.06445682153459381,
    "time": 27996.12548828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (- (* cosTheta_i cosTheta_O) (+ 1.0 (* sinTheta_i sinTheta_O))) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.11152254660054957,
    "avg_bits_err_output": 0.08746631595093277,
    "avg_bits_err_improve": 0.024056230649616803,
    "time": 24077.677001953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (- 1.0 (* alpha alpha)) (* (log (* alpha alpha)) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))) (- PI))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4718355008318359,
    "avg_bits_err_output": 0.46530327611215255,
    "avg_bits_err_improve": 0.006532224719683344,
    "time": 27563.20361328125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) s)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3317612159065804,
    "avg_bits_err_output": 1.2046944122044314,
    "avg_bits_err_improve": 0.12706680370214896,
    "time": 25731.67431640625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(/ (* s (if (!= (+ 2.0 (* (log (/ 1.0 (fma u -4.0 1.0))) 2.0)) 0.0) (/ (+ -1.0 (exp (* (log1p (* (log (/ 1.0 (fma u -4.0 1.0))) 2.0)) 2.0))) (+ 2.0 (* (log (/ 1.0 (fma u -4.0 1.0))) 2.0))) (* (log (/ 1.0 (fma u -4.0 1.0))) 2.0))) 2.0)",
    "output_parens": 27,
    "avg_bits_err_input": 12.37033347220054,
    "avg_bits_err_output": 12.39326673555527,
    "avg_bits_err_improve": -0.022933263354730116,
    "time": 25815.1826171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ 0.125 (* PI s))) (* 0.75 (/ (exp (/ r (* -3.0 s))) (* s (* PI 6.0))))) r)",
    "output_parens": 15,
    "avg_bits_err_input": 0.1504416214531113,
    "avg_bits_err_output": 0.16093542630977428,
    "avg_bits_err_improve": -0.010493804856662986,
    "time": 24673.51025390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.9471200880812249,
    "avg_bits_err_output": 0.768693929267526,
    "avg_bits_err_improve": 0.17842615881369894,
    "time": 28884.313232421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (- c -1.0) (/ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7033159359408594,
    "avg_bits_err_output": 0.4879799155788563,
    "avg_bits_err_improve": 0.2153360203620031,
    "time": 21639.37158203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(- (sin (* 2.0 (* PI u2))) (* (sin (* 2.0 (if (!= (* PI u2) 0.0) (/ (* PI (* u2 (* PI u2))) (* PI u2)) (* PI u2)))) (- 1.0 (sqrt (- (log (- 1.0 u1)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.689376373062071,
    "avg_bits_err_output": 13.660025674417815,
    "avg_bits_err_improve": 0.029350698644256212,
    "time": 30316.627197265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (sqrt (- (log1p (- u1)))) (- (sqrt (- (log1p (- u1)))) (* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (* PI u2))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.735547786346128,
    "avg_bits_err_output": 0.30123430580710114,
    "avg_bits_err_improve": 13.434313480539027,
    "time": 22446.0107421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (fma (- alpha) alpha (* alpha alpha)) (* (- alpha) (* alpha (log (- 1.0 u0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.959537248136943,
    "avg_bits_err_output": 13.904044600122296,
    "avg_bits_err_improve": 0.05549264801464737,
    "time": 16674.701416015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ (/ sin2phi alphay) alphay) (/ cos2phi (* alphax alphax))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.729088581998798,
    "avg_bits_err_output": 0.5199028203892576,
    "avg_bits_err_improve": 12.209185761609541,
    "time": 16029.724609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.981408703704858,
    "avg_bits_err_output": 12.685970437511607,
    "avg_bits_err_improve": 4.295438266193251,
    "time": 26498.8115234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ x (tan B)) (- (/ -1.0 (sin B)) (* (/ x (tan B)) -2.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.2161770831999919,
    "avg_bits_err_output": 0.17168648163704123,
    "avg_bits_err_improve": 0.04449060156295068,
    "time": 14471.52197265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.600603606515639,
    "avg_bits_err_output": 10.331957269435707,
    "avg_bits_err_improve": 3.2686463370799324,
    "time": 20495.23681640625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (* -0.5 f))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.25))",
    "output_parens": 31,
    "avg_bits_err_input": 61.35017041931623,
    "avg_bits_err_output": 1.925534514042723,
    "avg_bits_err_improve": 59.424635905273504,
    "time": 52469.98828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -2.1e-148) (* (/ (sqrt 2.0) (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (+ -1.0 (/ (+ x 1.0) (+ x -1.0)))))))) t) (if (<= t 1.3e-57) (* (/ (sqrt 2.0) (sqrt (fma l (- l) (/ (+ (* l (* l x)) (+ (* l l) (* (+ x 1.0) (* 2.0 (* t t))))) (+ x -1.0))))) t) (* (/ (sqrt 2.0) (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (+ -1.0 (/ (+ x 1.0) (+ x -1.0)))))))) t)))",
    "output_parens": 55,
    "avg_bits_err_input": 43.45845029640257,
    "avg_bits_err_output": 36.46518553629194,
    "avg_bits_err_improve": 6.993264760110627,
    "time": 27125.281005859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin th) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin ky))",
    "output_parens": 10,
    "avg_bits_err_input": 4.052084893928113,
    "avg_bits_err_output": 4.0999759849289825,
    "avg_bits_err_improve": -0.047891091000869856,
    "time": 28351.17041015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 1.0803795705210955,
    "avg_bits_err_output": 1.0883795705210955,
    "avg_bits_err_improve": -0.008000000000000007,
    "time": 9643.69775390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.079392923555607,
    "avg_bits_err_output": 10.079392923555607,
    "avg_bits_err_improve": 0,
    "time": 31707.806640625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 0.0) (sqrt (* (* 2.0 n) (* U (- t (+ (* (pow (/ l Om) 2.0) (* n (- U U*))) (* 2.0 (* l (/ l Om)))))))) (if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 1e+147) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* (* 2.0 n) (* U (- t (+ (/ (* (* (pow (/ l Om) 2.0) (- U U*)) (+ n n)) 2.0) (* 2.0 (* l (/ l Om))))))))))",
    "output_parens": 76,
    "avg_bits_err_input": 34.06067149106098,
    "avg_bits_err_output": 28.12637191710673,
    "avg_bits_err_improve": 5.934299573954249,
    "time": 34864.21240234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* (* (sin k) (tan k)) (* (pow t 3.0) (/ (pow (/ k t) 2.0) l))) l))",
    "output_parens": 11,
    "avg_bits_err_input": 47.43296114968898,
    "avg_bits_err_output": 36.82004387588848,
    "avg_bits_err_improve": 10.612917273800498,
    "time": 38284.971923828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (* (sin k) (/ (pow t 3.0) l)) l) (* (tan k) (+ (pow (/ k t) 2.0) 2.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.220085978087475,
    "avg_bits_err_output": 28.185022193131022,
    "avg_bits_err_improve": 4.035063784956453,
    "time": 20254.318115234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(+ (* (cos th) (/ (* a2 a2) (sqrt 2.0))) (* a1 (* (/ a1 (sqrt 2.0)) (cos th))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.5379875968971776,
    "avg_bits_err_output": 0.4755484984543582,
    "avg_bits_err_improve": 0.06243909844281936,
    "time": 25550.157470703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (pow (* 2.0 (* PI n)) (+ 0.5 (* k -0.5))) (sqrt k))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5094101744730215,
    "avg_bits_err_output": 0.4683849558303543,
    "avg_bits_err_improve": 0.04102521864266723,
    "time": 18654.43701171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (/ (if (!= (fma (exp l) (exp l) (exp (fma l -1.0 l))) 0.0) (/ (if (!= (exp (+ l (+ l (+ l l)))) 0.0) (/ (* (- (exp (+ l (+ l (+ l l)))) (exp (fma l -1.0 l))) (/ 1.0 (/ 1.0 (exp (+ l l))))) (exp (+ l l))) (- (exp (+ l (+ l (+ l l)))) (exp (fma l -1.0 l)))) (fma (exp l) (exp l) (exp (fma l -1.0 l)))) (- (exp (+ l l)) (exp (fma l -1.0 l)))) (exp l)) (* J (cos (/ K 2.0)))) U)",
    "output_parens": 53,
    "avg_bits_err_input": 17.457157721169843,
    "avg_bits_err_output": 17.435697120531334,
    "avg_bits_err_improve": 0.021460600638508964,
    "time": 30977.97802734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (log1p (- (log1p (expm1 (+ (expm1 (cos (fma (+ m n) (/ K 2.0) (- M)))) -1.0))) -1.0)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l))))",
    "output_parens": 21,
    "avg_bits_err_input": 15.580029875800928,
    "avg_bits_err_output": 15.556980478777339,
    "avg_bits_err_improve": 0.023049397023589435,
    "time": 24056.254638671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.476386842188134,
    "avg_bits_err_output": 18.476386842188134,
    "avg_bits_err_improve": 0,
    "time": 26686.5830078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) (- INFINITY)) (* w0 (sqrt (- 1.0 (* (/ (pow (* (/ D d) (/ M 2.0)) 2.0) l) h)))) (if (<= (/ h l) 0.0) (* w0 (sqrt (- 1.0 (* (pow (* D (/ (/ M 2.0) d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (* (/ (pow (* (/ D d) (/ M 2.0)) 2.0) l) h))))))",
    "output_parens": 34,
    "avg_bits_err_input": 13.652115268102541,
    "avg_bits_err_output": 10.19499231821519,
    "avg_bits_err_improve": 3.457122949887351,
    "time": 17241.137939453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (* c0 (sqrt (/ (* (/ A l) (/ 1.0 l)) (/ V l)))) (if (<= (* V l) -2e-203) (* c0 (sqrt (if (!= (/ A (* l V)) 0.0) (/ 1.0 (/ 1.0 (/ A (* l V)))) (/ A (* l V))))) (if (<= (* V l) 0.0) (* c0 (sqrt (* (/ A V) (/ 1.0 l)))) (if (<= (* V l) 2e+285) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (/ (/ A V) l)))))))",
    "output_parens": 45,
    "avg_bits_err_input": 19.48360003408157,
    "avg_bits_err_output": 15.36451014500269,
    "avg_bits_err_improve": 4.119089889078879,
    "time": 15496.281982421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= c0 -1e+210) (* c0 (/ (fma d (* (/ (/ d D) (* D (* w h))) c0) (sqrt (* (fma d (* (/ (/ d D) (* D (* w h))) c0) M) (fma d (* (/ (/ d D) (* D (* w h))) c0) (- M))))) (* w 2.0))) (if (<= c0 -1.3e-225) (* (/ c0 (* 2.0 w)) (fma (* d (/ (* (/ c0 D) d) (* w (* D h)))) 1.0 (sqrt (* (fma d (/ (* (/ c0 D) d) (* w (* D h))) M) (- (* d (/ (* (/ c0 D) d) (* w (* D h)))) M))))) (* (/ c0 (* w 2.0)) (+ (* d (/ (/ (* c0 (/ (/ d w) D)) D) h)) (sqrt (* (fma d (/ (/ (* c0 (/ (/ d w) D)) D) h) M) (fma d (/ (/ (* c0 (/ (/ d w) D)) D) h) (- M))))))))",
    "output_parens": 78,
    "avg_bits_err_input": 59.29148434905495,
    "avg_bits_err_output": 53.67095557082413,
    "avg_bits_err_improve": 5.62052877823082,
    "time": 45018.60791015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= M -2.6e-174) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* h (/ (pow (* M (/ D (* 2.0 d))) 2.0) (+ l l))))) (if (<= M 4e-138) (- (* (sqrt (/ d l)) (sqrt (/ d h))) (/ (* (pow (/ (* M D) (* 2.0 d)) 2.0) (* (* 0.5 (sqrt (/ d l))) (* h (sqrt (/ d h))))) l)) (- (* (sqrt (/ d l)) (sqrt (/ d h))) (* (* (pow (* M (/ D (* 2.0 d))) 2.0) 0.5) (* (sqrt (/ d l)) (* (/ h l) (sqrt (/ d h))))))))",
    "output_parens": 56,
    "avg_bits_err_input": 26.562177345692803,
    "avg_bits_err_output": 25.439002712800455,
    "avg_bits_err_improve": 1.123174632892347,
    "time": 40589.0361328125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (+ 0.5 (log (exp (/ -0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.733607877400226,
    "avg_bits_err_output": 15.255801682847563,
    "avg_bits_err_improve": 0.47780619455266304,
    "time": 32868.5791015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9838443609377705,
    "avg_bits_err_output": 0.01,
    "avg_bits_err_improve": 0.9738443609377705,
    "time": 5131.0478515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (fma 5.0 (* v v) -1.0) (- PI)) (- (* v (* v t)) t)) (- (sqrt (- 2.0 (* v (* v 6.0))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.44108909742812363,
    "avg_bits_err_output": 0.27230452695107354,
    "avg_bits_err_improve": 0.1687845704770501,
    "time": 21626.88330078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (- 1.0 (* 3.0 (* v v)))) (* (/ (sqrt 2.0) 4.0) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012344360937770431,
    "avg_bits_err_output": 0.01189624062518029,
    "avg_bits_err_improve": 0.00044812031259014104,
    "time": 10123.315673828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.6181967939153886,
    "avg_bits_err_output": 0.6181967939153886,
    "avg_bits_err_improve": 0,
    "time": 8407.915771484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.015190885762199,
    "avg_bits_err_output": 1.9895234045118382,
    "avg_bits_err_improve": 0.025667481250361,
    "time": 10886.37255859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (+ mu (- Vef (- Ec EDonor))) KbT)) -1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017331650391671637,
    "avg_bits_err_output": 0.017331650391671637,
    "avg_bits_err_improve": 0,
    "time": 9762.771484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (fma a a (* b b)) 2.0) (* b (* b 4.0))) -1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.18633289531691705,
    "avg_bits_err_output": 0.18593665469173673,
    "avg_bits_err_improve": 0.00039624062518031633,
    "time": 16636.10009765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (if (!= (* 3.0 (* b (* b a))) 0.0) (- (/ 1.0 (/ -1.0 (* (* 3.0 a) (* b b)))) (- (/ (/ (* (* b b) (* a 6.0)) -6.0) a) 0.0)) (* b (- b (* b (* a 3.0)))))))) 1.0)",
    "output_parens": 32,
    "avg_bits_err_input": 0.18874838106592987,
    "avg_bits_err_output": 0.18932150137852,
    "avg_bits_err_improve": -0.0005731203125901307,
    "time": 20308.50537109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (fma b b (* a a)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1823877602212981,
    "avg_bits_err_output": 0.18204339928352767,
    "avg_bits_err_improve": 0.00034436093777043264,
    "time": 21312.915283203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (if (!= (/ x (sqrt (fma 4.0 (* p p) (* x x)))) 0.0) (/ (- (* (/ x (sqrt (fma 4.0 (* p p) (* x x)))) (/ x (sqrt (fma 4.0 (* p p) (* x x))))) (- (/ x (sqrt (fma 4.0 (* p p) (* x x)))))) (/ x (sqrt (fma 4.0 (* p p) (* x x))))) (+ 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x))))))))",
    "output_parens": 39,
    "avg_bits_err_input": 13.219543623686569,
    "avg_bits_err_output": 13.222444895340198,
    "avg_bits_err_improve": -0.0029012716536289673,
    "time": 23508.30029296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* x 2.0)) (if (!= (- -1.0 (exp x)) 0.0) (/ (expm1 (+ x x)) (+ (exp x) 1.0)) (expm1 x))))",
    "output_parens": 14,
    "avg_bits_err_input": 41.179015890162,
    "avg_bits_err_output": 0.04775,
    "avg_bits_err_improve": 41.131265890162,
    "time": 7826.689453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (+ (+ (tan x) 2.0) -2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 31.90397771703424,
    "avg_bits_err_output": 31.118479963175243,
    "avg_bits_err_improve": 0.7854977538589978,
    "time": 25392.735595703125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) 0.0) (* (- a) (/ c (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))))) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.14185691002886,
    "avg_bits_err_output": 21.93180018395096,
    "avg_bits_err_improve": 12.210056726077898,
    "time": 14194.824951171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) 0.0 (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 5e+303) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 0.0))",
    "output_parens": 26,
    "avg_bits_err_input": 33.84744890084061,
    "avg_bits_err_output": 29.07247241514385,
    "avg_bits_err_improve": 4.774976485696762,
    "time": 19023.24658203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(if (<= x -9.4e-5) (/ (/ (- 1.0 (cos x)) x) x) (if (<= x 0.00068) (+ (- (/ 1.0 (* x x)) (+ 1.0 (/ (cos x) (* x x)))) 1.0) (/ (- 1.0 (cos x)) (* x x))))",
    "output_parens": 20,
    "avg_bits_err_input": 32.20379012175142,
    "avg_bits_err_output": 29.61594177641251,
    "avg_bits_err_improve": 2.5878483453389087,
    "time": 19312.4462890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (log1p (expm1 (expm1 (/ (log x) n)))))",
    "output_parens": 9,
    "avg_bits_err_input": 33.25467620735367,
    "avg_bits_err_output": 11.139938600064378,
    "avg_bits_err_improve": 22.114737607289292,
    "time": 33852.810791015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (+ (+ (log1p N) 2.0) -2.0) (log N))",
    "output_parens": 5,
    "avg_bits_err_input": 29.486007637322597,
    "avg_bits_err_output": 29.488734537274855,
    "avg_bits_err_improve": -0.002726899952257611,
    "time": 13094.877197265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (- (/ -1.0 x) (+ -1.0 (/ x x))) (/ x (/ x (+ 1.0 x))))",
    "output_parens": 8,
    "avg_bits_err_input": 14.542454852721805,
    "avg_bits_err_output": 0.07836560156295072,
    "avg_bits_err_improve": 14.464089251158855,
    "time": 13953.283203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (!= (cos (+ x eps)) 0.0) (/ (if (!= (- (* (cos (+ x eps)) (- (cos (+ x eps)) (cos x))) (fma (- (cos (+ x eps))) (cos x) (* (cos (+ x eps)) (cos x)))) 0.0) (/ (- (* (* (cos (+ x eps)) (- (cos (+ x eps)) (cos x))) (* (cos (+ x eps)) (- (cos (+ x eps)) (cos x)))) (* (fma (- (cos (+ x eps))) (cos x) (* (cos (+ x eps)) (cos x))) (fma (- (cos (+ x eps))) (cos x) (* (cos (+ x eps)) (cos x))))) (- (* (cos (+ x eps)) (- (cos (+ x eps)) (cos x))) (fma (- (cos (+ x eps))) (cos x) (* (cos (+ x eps)) (cos x))))) (* (cos (+ x eps)) (- (cos (+ x eps)) (cos x)))) (cos (+ x eps))) (- (cos (+ x eps)) (cos x)))",
    "output_parens": 90,
    "avg_bits_err_input": 39.236232941011416,
    "avg_bits_err_output": 39.30786813028447,
    "avg_bits_err_improve": -0.0716351892730529,
    "time": 23362.515380859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.8676301540041,
    "avg_bits_err_output": 29.57744759226878,
    "avg_bits_err_improve": 0.2901825617353211,
    "time": 14257.02587890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.61912989970838,
    "avg_bits_err_output": 30.61912989970838,
    "avg_bits_err_improve": 0,
    "time": 22762.71875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.96605243463104,
    "avg_bits_err_output": 33.96605243463104,
    "avg_bits_err_improve": 0,
    "time": 20179.843017578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.06103919246469,
    "avg_bits_err_output": 34.06103919246469,
    "avg_bits_err_improve": 0,
    "time": 21737.23291015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(- (/ (+ 1.0 (log (- 1.0 x))) (log1p x)) (* (- 0.0 (* (log1p x) (/ 1.0 (log1p x)))) (- (/ 1.0 (log1p x)))))",
    "output_parens": 15,
    "avg_bits_err_input": 61.468757477423495,
    "avg_bits_err_output": 59.833274297198834,
    "avg_bits_err_improve": 1.6354831802246608,
    "time": 24821.1630859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))) 0.0) (if (!= (* (fma n (- (log1p n) (log n)) (log1p n)) (/ (fma n (- (log1p n) (log n)) (log1p n)) (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 0.0) (- (/ 1.0 (/ (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n)))))) (/ (fma n (- (log1p n) (log n)) (log1p n)) (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) 0.0) (+ (fma n (- (log1p n) (log n)) (log1p n)) -1.0))",
    "output_parens": 58,
    "avg_bits_err_input": 63.005613431672735,
    "avg_bits_err_output": 44.208952394891504,
    "avg_bits_err_improve": 18.79666103678123,
    "time": 19573.7412109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (exp (log1p (- (+ (log (/ (- 1.0 eps) (- eps -1.0))) -1.0) -1.0))) 1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 58.46515362392268,
    "avg_bits_err_output": 58.53070317082191,
    "avg_bits_err_improve": -0.0655495468992271,
    "time": 19161.3447265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (+ (/ x (+ x x)) (+ 0.5 (/ (- x) (tan x)))) x)",
    "output_parens": 8,
    "avg_bits_err_input": 59.88804697047933,
    "avg_bits_err_output": 59.86728985055503,
    "avg_bits_err_improve": 0.02075711992429774,
    "time": 30639.64501953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ (expm1 (* eps (+ a b))) (expm1 (* eps a))) (if (!= (/ eps (expm1 (* eps b))) 0.0) (/ 1.0 (/ 1.0 (/ eps (expm1 (* eps b))))) (/ eps (expm1 (* eps b)))))",
    "output_parens": 20,
    "avg_bits_err_input": 60.36918945083786,
    "avg_bits_err_output": 29.526343285473594,
    "avg_bits_err_improve": 30.842846165364264,
    "time": 27281.475341796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(- (/ 1.0 (expm1 x)) -1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 41.51891809206283,
    "avg_bits_err_output": 0.12019875157544475,
    "avg_bits_err_improve": 41.39871934048739,
    "time": 9390.96484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.58823761586692,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.58736261586692,
    "time": 3569.232666015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.314059832286034,
    "avg_bits_err_output": 0.020062931983547826,
    "avg_bits_err_improve": 29.293996900302485,
    "time": 8819.213134765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (+ (if (!= (+ 1.0 (exp x)) 0.0) (/ (- (expm1 (+ x x))) (+ 1.0 (exp x))) (- (expm1 x))) (- (expm1 (- x)))))",
    "output_parens": 17,
    "avg_bits_err_input": 29.562467002314683,
    "avg_bits_err_output": 28.703548217074317,
    "avg_bits_err_improve": 0.8589187852403661,
    "time": 22970.03759765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ 0.0 (+ (/ -2.0 x) (if (!= (/ 1.0 (+ 1.0 x)) 0.0) (/ (+ 1.0 (/ 1.0 (/ (+ x -1.0) (+ 1.0 x)))) (+ 1.0 x)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))))))",
    "output_parens": 19,
    "avg_bits_err_input": 9.608333295066489,
    "avg_bits_err_output": 9.616526027167222,
    "avg_bits_err_improve": -0.008192732100733124,
    "time": 29913.791015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(+ (/ (tan (+ x eps)) 2.0) (- (/ (tan (+ x eps)) 2.0) (tan x)))",
    "output_parens": 9,
    "avg_bits_err_input": 36.840457708542395,
    "avg_bits_err_output": 36.84367049486301,
    "avg_bits_err_improve": -0.003212786320617056,
    "time": 20411.381103515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.04240395230425,
    "avg_bits_err_output": 0.16565112812734376,
    "avg_bits_err_improve": 29.876752824176908,
    "time": 13469.0966796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (+ (sin x) 1.0) 0.0) (/ (+ (- (sin (+ x eps)) (sin x)) (* (sin x) (- (sin (+ x eps)) (sin x)))) (expm1 (log1p (+ (sin x) 1.0)))) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 24,
    "avg_bits_err_input": 37.05896402966488,
    "avg_bits_err_output": 37.05919093993727,
    "avg_bits_err_improve": -0.00022691027238863626,
    "time": 22856.507080078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 20.026034465467962,
    "avg_bits_err_output": 19.888480579066282,
    "avg_bits_err_improve": 0.13755388640167965,
    "time": 16583.728759765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (+ (* (/ (atan N) (+ (atan N) (atan (+ N 1.0)))) (/ (atan N) -2.0)) (/ (+ (* (atan N) (- (atan N))) (* (atan (+ N 1.0)) (+ (atan (+ N 1.0)) (atan (+ N 1.0))))) (+ (atan N) (+ (atan N) (+ (atan (+ N 1.0)) (atan (+ N 1.0))))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 43,
    "avg_bits_err_input": 14.991472377652421,
    "avg_bits_err_output": 15.001748626135713,
    "avg_bits_err_improve": -0.010276248483291894,
    "time": 11411.777099609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.174707168965995,
    "avg_bits_err_output": 1.2664966232126014,
    "avg_bits_err_improve": 28.908210545753395,
    "time": 25219.877685546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (- m (* m m)) v) (+ (- 1.0 m) (* (/ m v) (- m (* m m)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.07847755746635404,
    "avg_bits_err_output": 0.07808583854274295,
    "avg_bits_err_improve": 0.0003917189236110896,
    "time": 15559.908447265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b (- a)) (* a b))",
    "output_parens": 4,
    "avg_bits_err_input": 15.852117248422408,
    "avg_bits_err_output": 0.29742481250360575,
    "avg_bits_err_improve": 15.554692435918803,
    "time": 11806.507080078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (expm1 (if (!= (log1p (sin (if (!= (* PI (/ angle -180.0)) 0.0) (/ 2.0 (/ 360.0 (* PI angle))) (* PI (/ angle 180.0))))) 0.0) (/ 1.0 (/ 1.0 (log1p (sin (if (!= (* PI (/ angle -180.0)) 0.0) (/ 2.0 (/ 360.0 (* PI angle))) (* PI (/ angle 180.0))))))) (log1p (sin (if (!= (* PI (/ angle -180.0)) 0.0) (/ 2.0 (/ 360.0 (* PI angle))) (* PI (/ angle 180.0)))))))) 2.0))",
    "output_parens": 46,
    "avg_bits_err_input": 19.82264113287219,
    "avg_bits_err_output": 19.85429132097865,
    "avg_bits_err_improve": -0.03165018810646103,
    "time": 39117.67041015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (if (!= (- -1.0 (+ 1.0 (sin (* PI (/ angle 180.0))))) 0.0) (/ (- (- (sin (* PI (/ angle 180.0)))) (* (sin (* PI (/ angle 180.0))) (+ (sin (* PI (/ angle 180.0))) 1.0))) (- -1.0 (+ 1.0 (sin (* PI (/ angle 180.0)))))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))))",
    "output_parens": 38,
    "avg_bits_err_input": 31.069179065568253,
    "avg_bits_err_output": 31.07358485826632,
    "avg_bits_err_improve": -0.004405792698065625,
    "time": 42524.896728515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (* (* angle 0.005555555555555556) PI))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.27522524694481,
    "avg_bits_err_output": 20.284766188956223,
    "avg_bits_err_improve": -0.009540942011412312,
    "time": 41068.6572265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17585416639998386,
    "avg_bits_err_output": 0.17267025517746534,
    "avg_bits_err_improve": 0.003183911222518515,
    "time": 15611.260009765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.32912410109759316,
    "avg_bits_err_output": 0.3236638249507136,
    "avg_bits_err_improve": 0.00546027614687955,
    "time": 18719.078369140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.14231372187554087,
    "avg_bits_err_output": 0.143761842188131,
    "avg_bits_err_improve": -0.0014481203125901454,
    "time": 15363.36572265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.90002975143135,
    "avg_bits_err_output": 16.894819219187298,
    "avg_bits_err_improve": 0.005210532244053212,
    "time": 34813.810546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 52.823534972120875,
    "avg_bits_err_output": 0.17772913594209722,
    "avg_bits_err_improve": 52.64580583617878,
    "time": 23677.393798828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (* b b) 0.0) (/ (+ (* (* b b) (* b b)) (if (!= 0.0 0.0) 0.0 (* (* a -4.0) (* c (* b b))))) (* b b)) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 37,
    "avg_bits_err_input": 28.784753414520114,
    "avg_bits_err_output": 0.3413289644618912,
    "avg_bits_err_improve": 28.443424450058224,
    "time": 23275.296142578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (* b b) 0.0) (/ (+ (* (* b b) (* b b)) (* a (* (* c -4.0) (* b b)))) (* b b)) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 35,
    "avg_bits_err_input": 44.354955677005634,
    "avg_bits_err_output": 0.24593458750793243,
    "avg_bits_err_improve": 44.1090210894977,
    "time": 21155.052978515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.9724835388945,
    "avg_bits_err_output": 33.9724835388945,
    "avg_bits_err_improve": 0,
    "time": 19391.634765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (expm1 (log1p (cos (- lambda1 lambda2))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.9316221955006693,
    "avg_bits_err_output": 0.9398363081706664,
    "avg_bits_err_improve": -0.008214112669997164,
    "time": 29959.02490234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (if (!= (+ 2.0 (/ 1.0 (- -1.0 (exp (* x -2.0))))) 0.0) (/ (fma (+ 2.0 (/ 1.0 (- -1.0 (exp (* x -2.0))))) (+ 2.0 (/ 1.0 (- -1.0 (exp (* x -2.0))))) (/ (fma (/ 1.0 (- -1.0 (exp (* x -2.0)))) 3.0 6.0) (- -1.0 (exp (* x -2.0))))) (+ 2.0 (/ 1.0 (- -1.0 (exp (* x -2.0)))))) (+ (+ 2.0 (/ 1.0 (- -1.0 (exp (* x -2.0))))) (/ 3.0 (- -1.0 (exp (* x -2.0)))))) -2.0)",
    "output_parens": 44,
    "avg_bits_err_input": 29.48928923050382,
    "avg_bits_err_output": 29.497121918336948,
    "avg_bits_err_improve": -0.007832687833126073,
    "time": 27787.899169921875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(+ (/ (expm1 (+ x x)) (* (* (fma (exp x) (exp x) 1.0) 2.0) 2.0)) (/ (+ (expm1 (+ x x)) (* (expm1 (+ x x)) 2.0)) (* (* (fma (exp x) (exp x) 1.0) 2.0) 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.10358578893647,
    "avg_bits_err_output": 0.6829836468769833,
    "avg_bits_err_improve": 57.42060214205949,
    "time": 19161.62060546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (- (+ (* (expm1 (* x -2.0)) (expm1 x)) (expm1 (* x -2.0)))) 2.0)",
    "output_parens": 9,
    "avg_bits_err_input": 58.02302317436167,
    "avg_bits_err_output": 0.17853736025865738,
    "avg_bits_err_improve": 57.84448581410301,
    "time": 9469.875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008240601562950723,
    "avg_bits_err_output": 0.008240601562950723,
    "avg_bits_err_improve": 0,
    "time": 1888.405517578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (if (!= (* x x) 0.0) (* (* x x) (/ (fma x x -1.0) (* x x))) (fma x x -1.0)))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.161125,
    "avg_bits_err_output": 32.16125,
    "avg_bits_err_improve": -0.00012500000000414957,
    "time": 5112.237548828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.456263283840364,
    "avg_bits_err_output": 58.456263283840364,
    "avg_bits_err_improve": 0,
    "time": 17643.265380859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04375,
    "avg_bits_err_output": 0.04325,
    "avg_bits_err_improve": 0.0005000000000000004,
    "time": 2278.431396484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1302712406251803,
    "avg_bits_err_output": 0.1302712406251803,
    "avg_bits_err_improve": 0,
    "time": 12120.395751953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12832312031259016,
    "avg_bits_err_output": 0.12832312031259016,
    "avg_bits_err_improve": 0,
    "time": 21526.2119140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.37138127544293,
    "avg_bits_err_output": 4.013014378076799,
    "avg_bits_err_improve": 35.35836689736613,
    "time": 24764.79052734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.283674373791138,
    "avg_bits_err_output": 14.283674373791138,
    "avg_bits_err_improve": 0,
    "time": 3731.6103515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (if (!= (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) 0.0) (/ (* (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 81,
    "avg_bits_err_input": 0.13904330086437403,
    "avg_bits_err_output": 0.140902113581307,
    "avg_bits_err_improve": -0.0018588127169329727,
    "time": 39804.177734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.84631070773147,
    "avg_bits_err_output": 0.17487069257769622,
    "avg_bits_err_improve": 52.67144001515377,
    "time": 23200.135009765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.85335407011293,
    "avg_bits_err_output": 0.3496116510167217,
    "avg_bits_err_improve": 28.503742419096206,
    "time": 21652.209716796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* c (* a -3.0)) 0.0) (- (/ (* (* -3.0 (* c a)) (fma -3.0 (* c a) (* b b))) (* -3.0 (* c a))) 0.0) (fma c (* a -3.0) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 38,
    "avg_bits_err_input": 44.42040056330815,
    "avg_bits_err_output": 0.24884022657016197,
    "avg_bits_err_improve": 44.17156033673799,
    "time": 28389.53125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* -3.0 (* c a)))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma -3.0 (* c a) (* b b))))) (* -3.0 a)) (- (sqrt (fma b b (* -3.0 (* c a)))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 34.013366455742556,
    "avg_bits_err_output": 21.959342635276048,
    "avg_bits_err_improve": 12.054023820466508,
    "time": 24717.1943359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (cos (- lambda1 lambda2))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.70846327050992,
    "avg_bits_err_output": 13.708209721382998,
    "avg_bits_err_improve": 0.0002535491269224366,
    "time": 35544.82080078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.027332819947535,
    "avg_bits_err_output": 0.4788461530624799,
    "avg_bits_err_improve": 28.548486666885054,
    "time": 19685.296142578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(if (!= (/ x (+ 1.0 x)) 0.0) (/ (/ (+ (/ x (+ x -1.0)) (* (/ x (+ x 1.0)) x)) (+ 1.0 x)) (/ x (+ 1.0 x))) (+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.013615601562950726,
    "avg_bits_err_improve": -0.0017406015629507256,
    "time": 7849.011962890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(- (+ (/ 1.0 (* (+ x -1.0) (+ 1.0 x))) (+ (/ (/ x (+ x -1.0)) (+ 1.0 x)) (/ -1.0 (+ 1.0 x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 14.619113870524966,
    "avg_bits_err_output": 12.733437480156768,
    "avg_bits_err_improve": 1.8856763903681983,
    "time": 15731.90478515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 5e+163) (/ (sqrt (* 2.0 (* (- (pow B 2.0) (* A (* C 4.0))) (* F (- A (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C)))))) (- (* A (* C 4.0)) (pow B 2.0))) 0.0)",
    "output_parens": 43,
    "avg_bits_err_input": 52.557777024598984,
    "avg_bits_err_output": 51.234712860970156,
    "avg_bits_err_improve": 1.3230641636288283,
    "time": 42154.008544921875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 1.05e+145) (* (atan (* (- (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI)) (/ (* (atan (/ 0.0 B)) 180.0) PI))",
    "output_parens": 18,
    "avg_bits_err_input": 29.85365437021454,
    "avg_bits_err_output": 27.610361227112232,
    "avg_bits_err_improve": 2.2432931431023064,
    "time": 23323.098876953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (* 2.0 (- (pow B 2.0) (* A (* 4.0 C)))) (* F (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* A (* 4.0 C)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.76154166964942,
    "avg_bits_err_output": 52.45043301323847,
    "avg_bits_err_improve": 0.3111086564109513,
    "time": 41762.830078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.391838770633505,
    "avg_bits_err_output": 15.391838770633505,
    "avg_bits_err_improve": 0,
    "time": 25437.930908203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (+ g (sqrt (fma h (- h) (* g g)))) 0.0) (* (/ (- h) (+ g (sqrt (fma g g (* h (- h)))))) h) (- (sqrt (fma h (- h) (* g g))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 33,
    "avg_bits_err_input": 35.81750611425101,
    "avg_bits_err_output": 35.50484608956919,
    "avg_bits_err_improve": 0.3126600246818185,
    "time": 17290.257568359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9924015046946224,
    "avg_bits_err_output": 0.9814317671895736,
    "avg_bits_err_improve": 0.010969737505048816,
    "time": 9624.89453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.931125,
    "avg_bits_err_output": 0.931125,
    "avg_bits_err_improve": 0,
    "time": 6025.892822265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -2e+272) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-305) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+288) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.28370955146603,
    "avg_bits_err_output": 2.434714390410962,
    "avg_bits_err_improve": 8.848995161055068,
    "time": 8453.466064453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5119730148866263,
    "avg_bits_err_output": 0.4845,
    "avg_bits_err_improve": 0.02747301488662629,
    "time": 10639.71044921875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -3.1e+16) (log1p (if (!= (- 1.0 (hypot 1.0 x)) 0.0) (/ (expm1 (log1p (* (- 1.0 (hypot 1.0 x)) (+ (+ x (hypot 1.0 x)) -1.0)))) (- 1.0 (hypot 1.0 x))) (+ x (+ (hypot 1.0 x) -1.0)))) (if (<= x 5e+32) (log1p (if (!= (- 1.0 (hypot 1.0 x)) 0.0) (/ (- (* x (- 1.0 (hypot 1.0 x))) (* (- 1.0 (hypot 1.0 x)) (- 1.0 (hypot 1.0 x)))) (- 1.0 (hypot 1.0 x))) (if (!= (+ 1.0 (- x (hypot 1.0 x))) 0.0) (* (+ 1.0 (- x (hypot 1.0 x))) (/ (+ x (+ (hypot 1.0 x) -1.0)) (+ 1.0 (- x (hypot 1.0 x))))) (+ x (+ (hypot 1.0 x) -1.0))))) (log (+ x (hypot 1.0 x)))))",
    "output_parens": 62,
    "avg_bits_err_input": 52.99372040857784,
    "avg_bits_err_output": 15.082024715271059,
    "avg_bits_err_improve": 37.91169569330678,
    "time": 18875.724609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.684403591105956,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.684403591105956,
    "time": 2605.677734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (log1p (expm1 (/ (- 1.0 x) (- x -1.0)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.013125,
    "avg_bits_err_improve": 0.0005000000000000004,
    "time": 5617.40234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1285.376708984375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* w r) (* (* w (/ r (- 1.0 v))) (- 0.375 (* v 0.25)))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.565362110838905,
    "avg_bits_err_output": 0.6264465122320378,
    "avg_bits_err_improve": 11.938915598606867,
    "time": 23192.02685546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* x1 (* x1 (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0))))))))))",
    "output_parens": 48,
    "avg_bits_err_input": 0.5180940075640867,
    "avg_bits_err_output": 0.27449685113731837,
    "avg_bits_err_improve": 0.24359715642676838,
    "time": 69903.9462890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.25644350928271,
    "avg_bits_err_output": 1.1995300526959174,
    "avg_bits_err_improve": 17.056913456586795,
    "time": 9785.476806640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.22679248125036058,
    "avg_bits_err_output": 0.18691748125036056,
    "avg_bits_err_improve": 0.03987500000000002,
    "time": 8184.00927734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002625,
    "avg_bits_err_output": 0.002625,
    "avg_bits_err_improve": 0,
    "time": 2846.045654296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (- (* (/ 1.0 a) (/ (* PI 0.5) (+ a b))) (/ (/ (* PI 0.5) (+ a b)) b)) (- b a))",
    "output_parens": 12,
    "avg_bits_err_input": 14.54698531867687,
    "avg_bits_err_output": 0.24812086563239158,
    "avg_bits_err_improve": 14.298864453044478,
    "time": 16968.53125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (/ (exp (- (- x (* eps x)))) eps) 0.0) (+ (exp (- (* x eps) x)) (+ (exp (- (fma eps x x))) (/ (- (exp (- (* eps x) x)) (- (/ 2.0 (exp (fma eps x x))) (exp (- (* eps x) x)))) (+ eps eps)))) (+ (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* eps x)))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) 2.0)",
    "output_parens": 41,
    "avg_bits_err_input": 28.848695455601533,
    "avg_bits_err_output": 1.2346250409177741,
    "avg_bits_err_improve": 27.61407041468376,
    "time": 21023.62548828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (if (!= (+ 2.0 (/ -1.0 (+ t (/ t t)))) 0.0) (/ (- (* (- (/ 2.0 (* t (+ 2.0 (/ 2.0 t)))) 2.0) (- (/ 2.0 (* t (+ 2.0 (/ 2.0 t)))) 2.0)) (/ (+ 2.0 (- 2.0 (/ 2.0 (+ t (/ t t))))) (* t (+ 2.0 (/ 2.0 t))))) (+ 2.0 (/ -1.0 (+ t (/ t t))))) (- 2.0 (/ 2.0 (+ t (/ t t)))))))))",
    "output_parens": 45,
    "avg_bits_err_input": 0.004125,
    "avg_bits_err_output": 0.0045,
    "avg_bits_err_improve": -0.00037499999999999947,
    "time": 11175.195556640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.0085,
    "avg_bits_err_output": 0.0085,
    "avg_bits_err_improve": 0,
    "time": 8573.27734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ (/ (* (/ t (+ t 1.0)) (* t 8.0)) (+ t 1.0)) 2.0) (+ 4.0 (/ (* (/ t (+ t 1.0)) (* t 8.0)) (+ t 1.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.046573120312590144,
    "avg_bits_err_output": 0.08669812031259015,
    "avg_bits_err_improve": -0.04012500000000001,
    "time": 9475.778076171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3236.99609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6631.431884765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2365.0107421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.868468556723507,
    "avg_bits_err_output": 0.2465,
    "avg_bits_err_improve": 7.621968556723507,
    "time": 33522.298828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.2546251846211645,
    "avg_bits_err_output": 7.2546251846211645,
    "avg_bits_err_improve": 0,
    "time": 16666.9501953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (expm1 (log1p (pow (+ x eps) 2.0))) (pow x 2.0))",
    "output_parens": 6,
    "avg_bits_err_input": 15.755211617548808,
    "avg_bits_err_output": 15.777665017482345,
    "avg_bits_err_improve": -0.022453399933537455,
    "time": 13513.84912109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (log (+ 1.0 (expm1 (cos x)))) (if (!= (exp (* 10.0 (* x x))) 0.0) (/ 1.0 (/ 1.0 (exp (* 10.0 (* x x))))) (exp (* 10.0 (* x x)))))",
    "output_parens": 18,
    "avg_bits_err_input": 3.532546884364404,
    "avg_bits_err_output": 3.5369367762245987,
    "avg_bits_err_improve": -0.004389891860194783,
    "time": 17617.4765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (/ (- x 0.0) x) (+ x (/ 1.0 x))) 0.0) (/ x (fma x x 1.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 15.344769544218986,
    "avg_bits_err_output": 0.0975607748392475,
    "avg_bits_err_improve": 15.24720876937974,
    "time": 10723.664306640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.849550129934634,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.849550129934634,
    "time": 4559.124267578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.14092750219331,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.140427502193305,
    "time": 3993.206787109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2525,
    "avg_bits_err_improve": 63.7475,
    "time": 21202.898193359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325466514815,
    "avg_bits_err_output": 0.393875,
    "avg_bits_err_improve": 61.44937966514815,
    "time": 7447.014404296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.06103919246469,
    "avg_bits_err_output": 34.06103919246469,
    "avg_bits_err_improve": 0,
    "time": 23800.567138671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.9724835388945,
    "avg_bits_err_output": 33.9724835388945,
    "avg_bits_err_improve": 0,
    "time": 22029.955078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2422.913818359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.804810527354064,
    "avg_bits_err_output": 0.011875,
    "avg_bits_err_improve": 39.79293552735406,
    "time": 4274.78125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.48084172065822,
    "avg_bits_err_output": 20.48084172065822,
    "avg_bits_err_improve": 0,
    "time": 4208.357421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6571481356869886,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6571481356869886,
    "time": 8937.65673828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ (+ b c) d))",
    "output_parens": 3,
    "avg_bits_err_input": 0.040125,
    "avg_bits_err_output": 0.040125,
    "avg_bits_err_improve": 0,
    "time": 5234.23779296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02239624062518029,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 0.011021240625180291,
    "time": 4378.988037109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.01425,
    "avg_bits_err_output": 0.01425,
    "avg_bits_err_improve": 0,
    "time": 3093.700927734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000875,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0,
    "time": 1815.21435546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.41169605312878627,
    "avg_bits_err_output": 0.239125,
    "avg_bits_err_improve": 0.17257105312878626,
    "time": 5597.660888671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(- 1.0 (cos x))",
    "output_parens": 2,
    "avg_bits_err_input": 30.224150718920463,
    "avg_bits_err_output": 30.224150718920463,
    "avg_bits_err_improve": 0,
    "time": 8008.34814453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (sqrt (- (* x x) eps)))",
    "output_parens": 4,
    "avg_bits_err_input": 24.325377732130907,
    "avg_bits_err_output": 24.325377732130907,
    "avg_bits_err_improve": 0,
    "time": 11199.9765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (- x (sin x)) 0.0) (/ 1.0 (/ 1.0 (- x (sin x)))) (- x (sin x))) (tan x))",
    "output_parens": 12,
    "avg_bits_err_input": 29.580091874103584,
    "avg_bits_err_output": 29.58016886394595,
    "avg_bits_err_improve": -7.698984236625961e-05,
    "time": 32528.351806640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006573120312590144,
    "avg_bits_err_output": 0.001625,
    "avg_bits_err_improve": 0.004948120312590144,
    "time": 2438.868408203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (/ (- (- 100.0 (* 100.0 (pow (+ (/ i n) 1.0) n)))) (/ 2.0 (/ 2.0 (/ i n)))))",
    "output_parens": 25,
    "avg_bits_err_input": 47.72965976414739,
    "avg_bits_err_output": 13.942909184433397,
    "avg_bits_err_improve": 33.786750579713996,
    "time": 25846.771484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* (/ d (fma d d (* c c))) b) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.436088356440877,
    "avg_bits_err_output": 22.405565882451143,
    "avg_bits_err_improve": 3.030522473989734,
    "time": 11968.076171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.623499127443804,
    "avg_bits_err_output": 22.623480160864283,
    "avg_bits_err_improve": 3.000018966579521,
    "time": 15491.672119140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- (fma ux (+ maxCos -1.0) 1.0) 0.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.035,
    "avg_bits_err_output": 0.01800317066803707,
    "avg_bits_err_improve": 0.016996829331962934,
    "time": 7863.412841796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (- (exp (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))) 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.505415196103039,
    "avg_bits_err_output": 12.363150541354118,
    "avg_bits_err_improve": 1.1422646547489208,
    "time": 31078.14794921875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (- (- ux (* ux ux)) (+ (- ux) (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.548809366169355,
    "avg_bits_err_output": 0.3328449250266358,
    "avg_bits_err_improve": 13.215964441142718,
    "time": 25989.567626953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* (* (- 1.0 ux) maxCos) (* ux ux))))) xi) (fma (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* (* (- 1.0 ux) maxCos) (* ux ux))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (* (- 1.0 ux) maxCos) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.34026445899576524,
    "avg_bits_err_output": 0.3325841557797503,
    "avg_bits_err_improve": 0.007680303216014928,
    "time": 47259.931640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.20140481469338017,
    "avg_bits_err_output": 0.20140481469338017,
    "avg_bits_err_improve": 0,
    "time": 23271.928955078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (- (/ (* u1 (/ u1 (- 1.0 u1))) u1) 0.0) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.542935509015052,
    "avg_bits_err_output": 0.5521146837405791,
    "avg_bits_err_improve": -0.009179174725527095,
    "time": 24434.82080078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (/ (* u1 (- u1 (* u1 u1))) (* (- 1.0 u1) (- u1 (* u1 u1)))) (/ u1 (- 1.0 u1)))) (cos (* 6.28318530718 u2)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.32672121110921293,
    "avg_bits_err_output": 0.3641596400730076,
    "avg_bits_err_improve": -0.03743842896379468,
    "time": 21568.476318359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.32466646930498516,
    "avg_bits_err_output": 0.32526353104977934,
    "avg_bits_err_improve": -0.0005970617447941806,
    "time": 49527.29248046875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.062307858716118235,
    "avg_bits_err_output": 0.04594906031780625,
    "avg_bits_err_improve": 0.01635879839831198,
    "time": 16489.72998046875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (fma s (exp (/ (fabs x) (- s))) s)) (+ (exp (/ (fabs x) (- s))) 1.0))",
    "output_parens": 16,
    "avg_bits_err_input": 0.13040594065941177,
    "avg_bits_err_output": 0.11885608693123609,
    "avg_bits_err_improve": 0.011549853728175685,
    "time": 17994.14697265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6827529928988721,
    "avg_bits_err_output": 0.6889228779478774,
    "avg_bits_err_improve": -0.006169885049005286,
    "time": 23014.151611328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.15776153656422884,
    "avg_bits_err_output": 0.15776153656422884,
    "avg_bits_err_improve": 0,
    "time": 16695.25341796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.668334903845633,
    "avg_bits_err_output": 2.668334903845633,
    "avg_bits_err_improve": 0,
    "time": 30697.741455078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (/ (/ (* cosTheta_i (/ 0.5 v)) (sinh (/ 1.0 v))) (* v (exp (* sinTheta_i (/ sinTheta_O v))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.45579228081252515,
    "avg_bits_err_output": 0.38669180423439864,
    "avg_bits_err_improve": 0.06910047657812651,
    "time": 28658.71923828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (+ (/ (- (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) 1.0) v) 0.6931)) (/ 0.5 v))",
    "output_parens": 9,
    "avg_bits_err_input": 0.10260851389960937,
    "avg_bits_err_output": 0.10196636316850573,
    "avg_bits_err_improve": 0.000642150731103644,
    "time": 8993.813232421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (+ (* alpha alpha) -1.0) (log (* alpha alpha))) PI) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.46990039415795626,
    "avg_bits_err_output": 0.47066674728097274,
    "avg_bits_err_improve": -0.0007663531230164833,
    "time": 24940.987060546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* 3.0 (* (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- (fma u -1.3333333333333333 0.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))) s))",
    "output_parens": 14,
    "avg_bits_err_input": 1.3279020321432367,
    "avg_bits_err_output": 0.42593740782629275,
    "avg_bits_err_improve": 0.9019646243169439,
    "time": 27915.107177734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (+ (+ (log (/ 1.0 (fma u -4.0 1.0))) -1.0) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 12.385976548948085,
    "avg_bits_err_output": 12.398316141862722,
    "avg_bits_err_improve": -0.012339592914637265,
    "time": 22669.774658203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (/ 1.0 (exp (/ r s))) (- (/ (/ 0.125 PI) s) 0.0)) (* 0.75 (/ (exp (/ (/ r -3.0) s)) (* s (* PI 6.0))))) r)",
    "output_parens": 16,
    "avg_bits_err_input": 0.1447449350722043,
    "avg_bits_err_output": 0.14861829247416472,
    "avg_bits_err_improve": -0.003873357401960431,
    "time": 25393.7939453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9024449258931355,
    "avg_bits_err_output": 0.7403937824327652,
    "avg_bits_err_improve": 0.1620511434603703,
    "time": 29225.09716796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6945803313842076,
    "avg_bits_err_output": 0.4763381974583993,
    "avg_bits_err_improve": 0.21824213392580832,
    "time": 19749.42138671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (if (!= (log (- 1.0 u1)) 0.0) (/ 1.0 (/ 1.0 (log (- 1.0 u1)))) (log (- 1.0 u1))))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 16,
    "avg_bits_err_input": 13.570361051648597,
    "avg_bits_err_output": 13.573430648589495,
    "avg_bits_err_improve": -0.003069596940898478,
    "time": 23793.780517578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.617788886988382,
    "avg_bits_err_output": 0.3037011847878007,
    "avg_bits_err_improve": 13.314087702200581,
    "time": 21829.889892578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(fma alpha (fma alpha (log (- 1.0 u0)) alpha) (fma alpha (- (fma alpha (log (- 1.0 u0)) alpha)) (* (log (- 1.0 u0)) (* alpha (- alpha)))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.988949961053551,
    "avg_bits_err_output": 13.898007192973061,
    "avg_bits_err_improve": 0.09094276808048996,
    "time": 20383.916259765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (* (* (log (- 1.0 u0)) -2.0) -2.0)) (+ (/ sin2phi (* alphay alphay)) (+ (+ (/ sin2phi (* alphay alphay)) (/ (+ cos2phi cos2phi) (* alphax alphax))) (+ (/ sin2phi (* alphay alphay)) (+ (/ sin2phi (* alphay alphay)) (/ (+ cos2phi cos2phi) (* alphax alphax)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 12.657846703115,
    "avg_bits_err_output": 12.711982209504887,
    "avg_bits_err_improve": -0.054135506389886956,
    "time": 19284.501708984375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.51630223095017,
    "avg_bits_err_output": 12.149131688793489,
    "avg_bits_err_improve": 4.367170542156682,
    "time": 24679.20556640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.210761842188131,
    "avg_bits_err_output": 0.15275,
    "avg_bits_err_improve": 0.05801184218813099,
    "time": 14630.55859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.812547798383543,
    "avg_bits_err_output": 10.664861573467572,
    "avg_bits_err_improve": 3.1476862249159705,
    "time": 19951.980712890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (- (expm1 (* PI (/ f 4.0))) (expm1 (* PI (/ f -4.0)))))) (* PI -0.25))",
    "output_parens": 18,
    "avg_bits_err_input": 61.69592345952694,
    "avg_bits_err_output": 2.0829268143991486,
    "avg_bits_err_improve": 59.61299664512779,
    "time": 44524.98681640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.855677604555986,
    "avg_bits_err_output": 34.11662580846703,
    "avg_bits_err_improve": 8.739051796088958,
    "time": 25085.607421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.8710282331018293,
    "avg_bits_err_output": 3.8710282331018293,
    "avg_bits_err_improve": 0,
    "time": 29094.704345703125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (- (- (sqrt (- (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0)) -1.0) 1.0)) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.0442544754655605,
    "avg_bits_err_output": 1.0465044754655606,
    "avg_bits_err_improve": -0.0022500000000000853,
    "time": 12294.262451171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.231380863159591,
    "avg_bits_err_output": 10.231380863159591,
    "avg_bits_err_improve": 0,
    "time": 10676.221435546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -4.6e+114) (sqrt (* (* 2.0 n) (* U (- t (fma n (* (pow (/ l Om) 2.0) (- U U*)) (* 2.0 (* l (/ l Om)))))))) (if (<= n 1.26e-22) (sqrt (if (!= (* 2.0 (* U (* n (- t (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (* l (/ l Om)))))))) 0.0) (/ 1.0 (/ (/ 0.5 U) (* n (- t (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (* l (/ l Om)))))))) (* (- t (fma 2.0 (* l (/ l Om)) (* (pow (/ l Om) 2.0) (* (- U U*) n)))) (* (* 2.0 n) U)))) (sqrt (if (!= (* (* 2.0 (* n U)) (- t (* 2.0 (* l (/ l Om))))) 0.0) (- (* (* 2.0 (* U (* n (* (* U n) (/ 1.0 (* U n)))))) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))) 0.0) (* (* 2.0 n) (* U (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))))))",
    "output_parens": 97,
    "avg_bits_err_input": 34.9832577964157,
    "avg_bits_err_output": 29.60014370652722,
    "avg_bits_err_improve": 5.38311408988848,
    "time": 47351.67724609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -2.6e+87) 0.0 (if (<= t -3.25e-86) (/ 2.0 (* (/ (tan k) l) (* (pow (/ k t) 2.0) (* (pow t 3.0) (/ (sin k) l))))) (if (<= t 1.3e-107) 0.0 (if (<= t 7.3e+93) (/ 2.0 (* (/ (tan k) l) (* (pow (/ k t) 2.0) (* (pow t 3.0) (/ (sin k) l))))) 0.0))))",
    "output_parens": 30,
    "avg_bits_err_input": 47.14853979378786,
    "avg_bits_err_output": 27.21169668767867,
    "avg_bits_err_improve": 19.93684310610919,
    "time": 45252.160888671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (* (sin k) (/ (pow t 3.0) l)) l) (* (tan k) (+ (pow (/ k t) 2.0) 2.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.55534704050198,
    "avg_bits_err_output": 28.228449632379185,
    "avg_bits_err_improve": 4.326897408122793,
    "time": 23737.7626953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* (cos th) (* a1 a1)) (* (cos th) (* a2 a2))) (sqrt 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4899924843993411,
    "avg_bits_err_output": 0.43412161876694827,
    "avg_bits_err_improve": 0.05587086563239285,
    "time": 23069.715087890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (* k -0.5)) (/ (sqrt (* 2.0 (* PI n))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.48712105639185577,
    "avg_bits_err_output": 0.38266583811874016,
    "avg_bits_err_improve": 0.1044552182731156,
    "time": 19917.874755859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (if (!= (+ (exp (* l -2.0)) (exp (fma l -1.0 l))) 0.0) (/ (- (exp (* l -4.0)) (exp (+ (fma l -1.0 l) (fma l -1.0 l)))) (+ (exp (* l -2.0)) (exp (fma l -1.0 l)))) (- (exp (* l -2.0)) (exp (fma l -1.0 l)))) (/ -1.0 (exp l)))) (cos (/ K 2.0))) U)",
    "output_parens": 33,
    "avg_bits_err_input": 16.93383418685015,
    "avg_bits_err_output": 16.94734511276174,
    "avg_bits_err_improve": -0.013510925911592864,
    "time": 25190.279296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (if (!= (cos (- (* K (/ (+ m n) 2.0)) M)) 0.0) (log1p (expm1 (/ 1.0 (/ 1.0 (cos (- (* K (/ (+ m n) 2.0)) M)))))) (cos (- (* K (/ (+ m n) 2.0)) M))) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 32,
    "avg_bits_err_input": 14.87102626627843,
    "avg_bits_err_output": 14.855573178456773,
    "avg_bits_err_improve": 0.015453087821656553,
    "time": 19203.55078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.872313721875543,
    "avg_bits_err_output": 17.872313721875543,
    "avg_bits_err_improve": 0,
    "time": 24093.227294921875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) (- INFINITY)) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))) (if (<= (/ h l) -1e-224) (* w0 (sqrt (- 1.0 (if (!= (* (pow (* D (/ (/ M 2.0) d)) 2.0) (/ h l)) 0.0) (/ 1.0 (/ 1.0 (* (/ h l) (pow (* M (/ D (+ d d))) 2.0)))) (* (pow (* D (/ (/ M 2.0) d)) 2.0) (/ h l)))))) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))))",
    "output_parens": 50,
    "avg_bits_err_input": 13.919590528764356,
    "avg_bits_err_output": 10.322180294504102,
    "avg_bits_err_improve": 3.597410234260254,
    "time": 27141.87890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 0.0) (* c0 (sqrt (/ (/ A V) l))) (if (<= (/ A (* V l)) 2e+293) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (/ (/ A l) V)))))",
    "output_parens": 20,
    "avg_bits_err_input": 19.01020085077524,
    "avg_bits_err_output": 14.635772002089018,
    "avg_bits_err_improve": 4.3744288486862235,
    "time": 17761.26318359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -1.2e+114) (* (fma d (/ (* d c0) (* D (* h (* w D)))) (sqrt (* (fma d (/ (* d c0) (* D (* h (* w D)))) M) (- (* d (/ (* d c0) (* D (* h (* w D))))) M)))) (/ c0 (* w 2.0))) (if (<= w 2.6e-64) (+ (* (/ c0 (* w 2.0)) (sqrt (* (fma d (* (/ (/ c0 w) D) (/ (/ d h) D)) M) (fma d (* (/ (/ c0 w) D) (/ (/ d h) D)) (- M))))) (* d (* (/ c0 (* w 2.0)) (* (/ (/ c0 w) D) (/ (/ d h) D))))) (* (/ c0 (* 2.0 w)) (+ (* (/ (/ d (* w D)) (* D h)) (* c0 d)) (sqrt (* (fma d (* c0 (/ (/ d (* w D)) (* D h))) M) (- (* (/ (/ d (* w D)) (* D h)) (* c0 d)) M)))))))",
    "output_parens": 81,
    "avg_bits_err_input": 59.29488111332215,
    "avg_bits_err_output": 54.91909497414955,
    "avg_bits_err_improve": 4.375786139172597,
    "time": 46699.05859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= D 0.00032) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* h (/ (pow (* M (/ (/ D d) 2.0)) 2.0) (+ l l))))) (* (sqrt (/ d h)) (* (- (* (pow (* (/ M d) (/ D 2.0)) 2.0) (/ h (+ l l))) 1.0) (- (sqrt (/ d l))))))",
    "output_parens": 31,
    "avg_bits_err_input": 26.725104960433168,
    "avg_bits_err_output": 25.777838531692062,
    "avg_bits_err_improve": 0.9472664287411057,
    "time": 40489.06689453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (+ 0.5 (log1p (expm1 (/ -0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.265705062211147,
    "avg_bits_err_output": 14.772327594105375,
    "avg_bits_err_improve": 0.49337746810577165,
    "time": 6884.229736328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9835490396778473,
    "avg_bits_err_output": 0.01468191590253807,
    "avg_bits_err_improve": 0.9688671237753093,
    "time": 3672.65283203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (+ 2.0 (* (* v v) -6.0)))) (* t (- 1.0 (* v v)))) (* (* v v) (/ (/ 5.0 (* PI (* t (- 1.0 (* v v))))) (sqrt (+ 2.0 (* (* v v) -6.0))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.44247189432537193,
    "avg_bits_err_output": 0.12019040356754755,
    "avg_bits_err_improve": 0.32228149075782436,
    "time": 14508.318115234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.013216520928207924,
    "avg_bits_err_output": 0.013216520928207924,
    "avg_bits_err_improve": 0,
    "time": 2383.30078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5169218506131418,
    "avg_bits_err_output": 0.5169218506131418,
    "avg_bits_err_improve": 0,
    "time": 11649.6943359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(+ (* a (/ (fma (pow k m) 0.5 (pow k m)) (+ 2.0 (* (+ k 10.0) (+ k k))))) (/ (* a (* (pow k m) 0.5)) (+ 2.0 (* (+ k 10.0) (+ k k)))))",
    "output_parens": 18,
    "avg_bits_err_input": 2.0931415881287134,
    "avg_bits_err_output": 2.0869540724224884,
    "avg_bits_err_improve": 0.006187515706225,
    "time": 20043.3369140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- Vef (- Ec (+ mu EDonor))) KbT)))) (/ NaChar (+ 2.0 (expm1 (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.015361468716510129,
    "avg_bits_err_output": 0.014538348403919982,
    "avg_bits_err_improve": 0.0008231203125901466,
    "time": 15404.900146484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (if (!= (* (* b b) 4.0) 0.0) (* (fma b (* b 4.0) (pow (fma b b (* a a)) 2.0)) (* b (/ b (* b b)))) (fma b (* b 4.0) (pow (fma a a (* b b)) 2.0))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.17933914418249194,
    "avg_bits_err_output": 0.2930024954309928,
    "avg_bits_err_improve": -0.11366335124850088,
    "time": 19224.333251953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (/ 1.0 (pow (fma a a (* b b)) -2.0)) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 0.18458191605492125,
    "avg_bits_err_output": 0.20171218012436215,
    "avg_bits_err_improve": -0.017130264069440904,
    "time": 25085.07177734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (/ 1.0 (pow (fma a a (* b b)) -2.0)) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 22,
    "avg_bits_err_input": 0.18646520187983545,
    "avg_bits_err_output": 0.20151070696113724,
    "avg_bits_err_improve": -0.015045505081301785,
    "time": 33448.3994140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.173163709861829,
    "avg_bits_err_output": 13.173163709861829,
    "avg_bits_err_improve": 0,
    "time": 20150.357666015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (- (+ (/ (expm1 (* 2.0 x)) (expm1 x)) 1.0) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 40.89116367628887,
    "avg_bits_err_output": 0.05,
    "avg_bits_err_improve": 40.84116367628887,
    "time": 6883.59521484375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(+ (/ (sin x) (* (- (tan x) x) 2.0)) (if (!= (/ (+ (sin x) (+ x x)) (* (- (tan x) x) 2.0)) 0.0) (* (/ (- (sin x) (+ x x)) (* (- (tan x) x) 2.0)) (/ (+ (sin x) (+ x x)) (* (* (- (tan x) x) 2.0) (/ (+ (sin x) (+ x x)) (* (- (tan x) x) 2.0))))) (/ (- (sin x) (+ x x)) (* (- (tan x) x) 2.0))))",
    "output_parens": 45,
    "avg_bits_err_input": 31.729140590893675,
    "avg_bits_err_output": 31.73360751620802,
    "avg_bits_err_improve": -0.004466925314346781,
    "time": 24701.261474609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 33.53619996649882,
    "avg_bits_err_output": 33.53619996649882,
    "avg_bits_err_improve": 0,
    "time": 14353.02294921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (* b_2 -0.5) (+ (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 2.0))) a)",
    "output_parens": 9,
    "avg_bits_err_input": 33.7289563848553,
    "avg_bits_err_output": 33.731617776606384,
    "avg_bits_err_improve": -0.002661391751082931,
    "time": 17986.367431640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (- (* (/ -1.0 x) (cos x)) (/ -1.0 x)) x)",
    "output_parens": 6,
    "avg_bits_err_input": 31.625737249144954,
    "avg_bits_err_output": 30.91469009086665,
    "avg_bits_err_improve": 0.7110471582783049,
    "time": 19044.390869140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (<= x 0.94) (- (expm1 (/ (log x) n))) (- (pow (+ x 1.0) (/ 1.0 n)) (if (!= (pow x (/ 1.0 n)) 0.0) (/ 1.0 (/ 1.0 (pow x (/ 1.0 n)))) (pow x (/ 1.0 n)))))",
    "output_parens": 20,
    "avg_bits_err_input": 32.77697784492157,
    "avg_bits_err_output": 12.13531379891134,
    "avg_bits_err_improve": 20.641664046010227,
    "time": 33304.166015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (- (log1p N) (+ (log N) 1.0)) -1.0)",
    "output_parens": 5,
    "avg_bits_err_input": 30.06302376670628,
    "avg_bits_err_output": 30.06654976353246,
    "avg_bits_err_improve": -0.0035259968261804886,
    "time": 10527.842041015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (+ (/ -0.5 x) (/ 1.0 (+ x (+ x 2.0)))) (/ (+ -1.0 (/ 2.0 (if (!= (/ 2.0 x) 0.0) (/ (+ (* (/ 2.0 x) (/ 2.0 x)) (* (/ 2.0 x) (* 2.0 (/ x x)))) (/ 2.0 x)) (/ (fma 2.0 x 2.0) x)))) (+ x x)))",
    "output_parens": 25,
    "avg_bits_err_input": 13.664943789160496,
    "avg_bits_err_output": 13.690358677648359,
    "avg_bits_err_improve": -0.02541488848786244,
    "time": 17686.82421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (cos (+ x eps)) (- -1.0 (- -1.0 (cos x))))",
    "output_parens": 6,
    "avg_bits_err_input": 39.57246204492315,
    "avg_bits_err_output": 39.57760934429014,
    "avg_bits_err_improve": -0.005147299366988989,
    "time": 23003.40380859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(- (- (cbrt (- x -1.0)) (+ 1.0 (cbrt x))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.527942284184142,
    "avg_bits_err_output": 30.222840666258705,
    "avg_bits_err_improve": 0.30510161792543755,
    "time": 14097.64990234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (+ (/ (- 1.0 (cos x)) (sin x)) (/ 2.0 (/ 2.0 (sin x)))) 0.0) (/ (fma (+ (/ (- 1.0 (cos x)) (sin x)) (/ 2.0 (/ 2.0 (sin x)))) (+ (/ (- 1.0 (cos x)) (sin x)) (/ 2.0 (/ 2.0 (sin x)))) (* (+ (/ (- 1.0 (cos x)) (sin x)) (/ 2.0 (/ 2.0 (sin x)))) (/ -2.0 (/ 2.0 (sin x))))) (+ (/ (- 1.0 (cos x)) (sin x)) (/ 2.0 (/ 2.0 (sin x))))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 52,
    "avg_bits_err_input": 30.226092642270725,
    "avg_bits_err_output": 30.01694993080408,
    "avg_bits_err_improve": 0.20914271146664376,
    "time": 24814.720703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.8680721684986,
    "avg_bits_err_output": 22.051463825170433,
    "avg_bits_err_improve": 11.816608343328166,
    "time": 20105.8271484375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 33.8941878028341,
    "avg_bits_err_output": 33.914625700394,
    "avg_bits_err_improve": -0.02043789755990133,
    "time": 22035.560302734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.33709469106678,
    "avg_bits_err_output": 0.8681121934011806,
    "avg_bits_err_improve": 60.4689824976656,
    "time": 20263.991943359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.0022783914742,
    "avg_bits_err_output": 44.23671744432036,
    "avg_bits_err_improve": 18.765560947153837,
    "time": 11542.859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (if (!= (/ eps (- eps -1.0)) 0.0) (- (- (/ (/ eps (- eps -1.0)) eps) (/ 0.0 (- eps -1.0))) (/ 1.0 (/ 1.0 (/ eps (- eps -1.0))))) (/ (- 1.0 eps) (- eps -1.0))))",
    "output_parens": 19,
    "avg_bits_err_input": 58.44410861979138,
    "avg_bits_err_output": 58.457286102332674,
    "avg_bits_err_improve": -0.013177482541294694,
    "time": 17870.900634765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(if (!= (+ (/ 0.5 x) (/ -0.5 (tan x))) 0.0) (/ (* (+ (/ 0.5 x) (/ -0.5 (tan x))) (+ (/ 0.5 x) (/ -0.5 (tan x)))) (/ (if (!= (/ 1.0 (* (tan x) (/ -2.0 x))) 0.0) (+ (/ 1.0 (* (tan x) (/ -2.0 x))) (/ (/ 1.0 (/ (/ 2.0 (/ -2.0 x)) (tan x))) (* (tan x) (/ -2.0 x)))) (+ 0.5 (/ 1.0 (* (tan x) (/ -2.0 x))))) (+ x x))) (+ (/ 1.0 x) (/ -1.0 (tan x))))",
    "output_parens": 47,
    "avg_bits_err_input": 59.86598605168939,
    "avg_bits_err_output": 59.880146963561565,
    "avg_bits_err_improve": -0.014160911872174609,
    "time": 31364.694091796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ a b)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.25932700563275,
    "avg_bits_err_output": 29.174127042860317,
    "avg_bits_err_improve": 31.085199962772432,
    "time": 25503.57080078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.29180283119123,
    "avg_bits_err_output": 0.3900943609377705,
    "avg_bits_err_improve": 40.90170847025345,
    "time": 5939.574462890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.69584748524195,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.69584748524195,
    "time": 3484.12890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.58006687886283,
    "avg_bits_err_output": 0.015464992043082168,
    "avg_bits_err_improve": 29.564601886819748,
    "time": 6288.9970703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (if (!= (- (expm1 (- x)) (expm1 x)) 0.0) (/ (- (* (expm1 x) (expm1 x)) (* (expm1 (- x)) (expm1 (- x)))) (- (expm1 (- x)) (expm1 x))) (- (- (expm1 x)) (expm1 (- x)))))",
    "output_parens": 26,
    "avg_bits_err_input": 29.587006303554848,
    "avg_bits_err_output": 28.742735691413863,
    "avg_bits_err_improve": 0.8442706121409849,
    "time": 19353.908447265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (if (!= (- (/ 2.0 x) (/ 1.0 (+ 1.0 x))) 0.0) (/ 1.0 (/ 2.0 (- (/ 2.0 (+ 1.0 x)) (/ 4.0 x)))) (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x))) (/ 1.0 (- x 1.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 9.74572717208754,
    "avg_bits_err_output": 9.756174923006128,
    "avg_bits_err_improve": -0.010447750918588739,
    "time": 32473.840087890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (+ (tan x) 1.0) 0.0) (/ (+ (* (+ 1.0 (tan x)) (- (tan (+ x eps)) (tan x))) (fma (+ 1.0 (tan x)) (- -1.0 (tan x)) (* (+ 1.0 (tan x)) (+ 1.0 (tan x))))) (+ (tan x) 1.0)) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 29,
    "avg_bits_err_input": 36.990941654153616,
    "avg_bits_err_output": 37.02212850885087,
    "avg_bits_err_improve": -0.031186854697253352,
    "time": 22838.988525390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.42149008764258,
    "avg_bits_err_output": 0.16681860937770432,
    "avg_bits_err_improve": 30.25467147826488,
    "time": 14418.961181640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 37.503821979855935,
    "avg_bits_err_output": 37.503821979855935,
    "avg_bits_err_improve": 0,
    "time": 26268.146728515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.814181388769363,
    "avg_bits_err_output": 19.672859533366413,
    "avg_bits_err_improve": 0.14132185540294984,
    "time": 15409.246337890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (- (atan (+ N 1.0)) (atan N)) 0.0) (/ 1.0 (/ 1.0 (- (atan (+ N 1.0)) (atan N)))) (- (atan (+ N 1.0)) (atan N)))",
    "output_parens": 16,
    "avg_bits_err_input": 14.277424160347712,
    "avg_bits_err_output": 14.28094618961344,
    "avg_bits_err_improve": -0.0035220292657278662,
    "time": 6851.598876953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 28.96638773513798,
    "avg_bits_err_output": 1.2500851671895141,
    "avg_bits_err_improve": 27.716302567948468,
    "time": 24878.970458984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (* (/ m v) (* (- 1.0 m) (- 1.0 m))) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.08487256701560164,
    "avg_bits_err_output": 0.07850696545265091,
    "avg_bits_err_improve": 0.006365601562950726,
    "time": 12708.826171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(fma (* a b) (* a (/ b -4.0)) (* (* b (+ a (+ a a))) (* a (/ b -4.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 16.087441263329783,
    "avg_bits_err_output": 0.31085698671834333,
    "avg_bits_err_improve": 15.77658427661144,
    "time": 11237.005615234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (/ angle 180.0)) 0.0) 0.0 (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 20.348666461291202,
    "avg_bits_err_output": 20.376400734576045,
    "avg_bits_err_improve": -0.02773427328484246,
    "time": 39436.38427734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (log (+ 1.0 (expm1 (cos (* PI (/ angle 180.0)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 31.37059061946111,
    "avg_bits_err_output": 31.370864601456383,
    "avg_bits_err_improve": -0.00027398199527084444,
    "time": 35771.55224609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (log (log (+ 1.0 (if (!= (+ (expm1 (exp (cos (* angle (* PI 0.005555555555555556))))) 2.0) 0.0) (/ (+ -1.0 (exp (+ (exp (cos (* angle (* PI 0.005555555555555556)))) (exp (cos (* angle (* PI 0.005555555555555556))))))) (+ (expm1 (exp (cos (* angle (* PI 0.005555555555555556))))) 2.0)) (expm1 (exp (cos (* angle (* PI 0.005555555555555556)))))))))) 2.0))",
    "output_parens": 42,
    "avg_bits_err_input": 20.541261682835103,
    "avg_bits_err_output": 20.553427821808,
    "avg_bits_err_improve": -0.012166138972897755,
    "time": 43937.903076171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.18474279776851638,
    "avg_bits_err_output": 0.18260642424864698,
    "avg_bits_err_improve": 0.0021363735198693945,
    "time": 14816.804443359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (* (tan x) (tan x))) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3180175992242749,
    "avg_bits_err_output": 0.3176061407913269,
    "avg_bits_err_improve": 0.00041145843294804196,
    "time": 17439.905029296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13227124062518028,
    "avg_bits_err_output": 0.13227124062518028,
    "avg_bits_err_improve": 0,
    "time": 17731.839599609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.004589539228938,
    "avg_bits_err_output": 17.003400863830354,
    "avg_bits_err_improve": 0.001188675398584138,
    "time": 34360.598876953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.31160300809916,
    "avg_bits_err_output": 0.16246485000288458,
    "avg_bits_err_improve": 52.14913815809628,
    "time": 25586.307373046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.508292504147214,
    "avg_bits_err_output": 0.33564248282484993,
    "avg_bits_err_improve": 28.172650021322365,
    "time": 24225.107421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 43.87748042462839,
    "avg_bits_err_output": 0.24138026406944094,
    "avg_bits_err_improve": 43.63610016055895,
    "time": 20893.679931640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.88879999874394,
    "avg_bits_err_output": 22.051463825170433,
    "avg_bits_err_improve": 11.837336173573508,
    "time": 20666.31103515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (expm1 (log1p (cos (- lambda1 lambda2))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.8908471282957333,
    "avg_bits_err_output": 0.9026760529839578,
    "avg_bits_err_improve": -0.011828924688224496,
    "time": 31799.6650390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (+ 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0)))))) 0.0) (/ (- 1.0 (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0))))))) (+ 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0))))))) (- 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0))))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 60,
    "avg_bits_err_input": 29.039778307518205,
    "avg_bits_err_output": 28.99964599850208,
    "avg_bits_err_improve": 0.0401323090161263,
    "time": 27467.39404296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) (+ (exp x) (exp (- x))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.189138759505,
    "avg_bits_err_output": 1.2394505640636722,
    "avg_bits_err_improve": 56.949688195441325,
    "time": 17924.23193359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (+ x x)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 58.02941010114313,
    "avg_bits_err_output": 0.052896240625180294,
    "avg_bits_err_improve": 57.97651386051795,
    "time": 9391.72900390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008094360937770434,
    "avg_bits_err_output": 0.008094360937770434,
    "avg_bits_err_improve": 0,
    "time": 2946.5458984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.07325,
    "avg_bits_err_output": 32.07325,
    "avg_bits_err_improve": 0,
    "time": 5801.76806640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (if (!= (- -2.0 (log (/ (- -1.0 x) (+ -1.0 x)))) 0.0) (/ (log (+ 1.0 (expm1 (expm1 (* (log1p (log (/ (- -1.0 x) (- x 1.0)))) 2.0))))) (+ (log (/ (- -1.0 x) (+ -1.0 x))) 2.0)) (log (/ (- -1.0 x) (+ -1.0 x)))))",
    "output_parens": 28,
    "avg_bits_err_input": 58.43124789208118,
    "avg_bits_err_output": 58.44647552488982,
    "avg_bits_err_improve": -0.015227632808638702,
    "time": 20892.815673828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04369812031259015,
    "avg_bits_err_output": 0.042863361324451066,
    "avg_bits_err_improve": 0.0008347589881390824,
    "time": 2196.62890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (- (exp (log1p (cos (atan (/ eh (* ew (tan t))))))) 1.0)) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.13021936093777042,
    "avg_bits_err_output": 0.13296936093777043,
    "avg_bits_err_improve": -0.0027500000000000024,
    "time": 23795.041259765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.122625,
    "avg_bits_err_output": 0.122625,
    "avg_bits_err_improve": 0,
    "time": 14461.92138671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* (cos (/ (+ phi1 phi2) 2.0)) lambda1) (* (cos (/ (+ phi1 phi2) 2.0)) lambda2)) (- phi1 phi2)))",
    "output_parens": 12,
    "avg_bits_err_input": 38.849716132013,
    "avg_bits_err_output": 3.58124714271852,
    "avg_bits_err_improve": 35.26846898929448,
    "time": 29183.427978515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.657914333518113,
    "avg_bits_err_output": 0.009948120312590146,
    "avg_bits_err_improve": 14.647966213205523,
    "time": 6394.09423828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (if (!= (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) 0.0) (- (/ 0.0 (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (if (!= (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (cos phi1) (* (sin delta) (cos theta))))))) 0.0) (/ (fma (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (cos phi1) (* (sin delta) (cos theta))))))) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (cos phi1) (* (sin delta) (cos theta))))))) (* (- (cos delta)) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (cos phi1) (* (sin delta) (cos theta))))))))) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (cos phi1) (* (sin delta) (cos theta)))))))) (fma (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (cos phi1) (* (sin delta) (cos theta)))))) (- (cos delta))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 134,
    "avg_bits_err_input": 0.16004668487053925,
    "avg_bits_err_output": 0.1665044177078814,
    "avg_bits_err_improve": -0.006457732837342162,
    "time": 43808.348876953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.33944271674547,
    "avg_bits_err_output": 0.17096729375396633,
    "avg_bits_err_improve": 52.1684754229915,
    "time": 22955.943603515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.646493578571594,
    "avg_bits_err_output": 0.339031972276645,
    "avg_bits_err_improve": 28.30746160629495,
    "time": 26184.23828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.89042012060226,
    "avg_bits_err_output": 0.2343708656323915,
    "avg_bits_err_improve": 43.656049254969865,
    "time": 25376.279541015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* c (* a -3.0))))) 0.0) (/ (+ 0.0 (- (* c (* a -3.0)))) (- (- b) (sqrt (fma b b (* c (* a -3.0)))))) (- (sqrt (fma b b (* c (* a -3.0)))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 33.93005751268642,
    "avg_bits_err_output": 23.00715402700569,
    "avg_bits_err_improve": 10.922903485680727,
    "time": 20174.561767578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.362692445980375,
    "avg_bits_err_output": 13.362692445980375,
    "avg_bits_err_improve": 0,
    "time": 36424.92138671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.32578772281659,
    "avg_bits_err_output": 0.5284702927335423,
    "avg_bits_err_improve": 28.797317430083048,
    "time": 20864.53955078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (/ x (+ x (+ x 2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.011125,
    "avg_bits_err_output": 0.03607260624775762,
    "avg_bits_err_improve": -0.02494760624775762,
    "time": 6628.451171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(- (/ (- 1.0 (/ x (+ x -1.0))) (+ 1.0 x)) (/ 1.0 (fma x x -1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 14.143255548844879,
    "avg_bits_err_output": 12.275843664896744,
    "avg_bits_err_improve": 1.8674118839481348,
    "time": 18044.106689453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* 2.0 (* (- (pow B 2.0) (* A (* C 4.0))) (* F (+ (- A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) C))))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.36936568687435,
    "avg_bits_err_output": 52.09299498534808,
    "avg_bits_err_improve": 0.2763707015262753,
    "time": 36089.253173828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -1.16e+164) 0.0 (* (atan (* (- (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI)))",
    "output_parens": 14,
    "avg_bits_err_input": 29.552095268521562,
    "avg_bits_err_output": 27.418362385572948,
    "avg_bits_err_improve": 2.133732882948614,
    "time": 24006.81689453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (+ C (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A)) (* 2.0 (* (- (pow B 2.0) (* A (* C 4.0))) F)))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.91519349146561,
    "avg_bits_err_output": 52.60801712528444,
    "avg_bits_err_improve": 0.3071763661811673,
    "time": 35768.6875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 1.0) 0.0) (/ (/ (cbrt (/ g (+ a a))) (+ (cbrt (/ g (+ a a))) 1.0)) (/ 1.0 (+ (cbrt (/ g (+ a a))) 1.0))) (cbrt (/ g (+ a a))))",
    "output_parens": 23,
    "avg_bits_err_input": 16.01564985920578,
    "avg_bits_err_output": 16.045813582655835,
    "avg_bits_err_improve": -0.030163723450055357,
    "time": 24320.06201171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (+ g (sqrt (fma h (- h) (* g g)))) 0.0) (* (/ (- h) (+ g (sqrt (fma h (- h) (* g g))))) h) (- (sqrt (fma h (- h) (* g g))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 33,
    "avg_bits_err_input": 35.977806423664475,
    "avg_bits_err_output": 35.69791903084528,
    "avg_bits_err_improve": 0.27988739281919806,
    "time": 19834.17236328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9911727453198026,
    "avg_bits_err_output": 0.9777218046888523,
    "avg_bits_err_improve": 0.013450940630950314,
    "time": 6645.385498046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (+ -1.0 (+ (exp a) 1.0)) (+ (exp a) (exp b)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.9006462406251803,
    "avg_bits_err_output": 1.0188299995149501,
    "avg_bits_err_improve": -0.11818375888976984,
    "time": 3949.2841796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-299) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e-287) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+208) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.103851474437171,
    "avg_bits_err_output": 3.210259701041634,
    "avg_bits_err_improve": 7.893591773395537,
    "time": 9355.12353515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5259289385955593,
    "avg_bits_err_output": 0.434375,
    "avg_bits_err_improve": 0.09155393859555933,
    "time": 13595.131103515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.1) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 100000000.0) (log1p (+ x (+ (hypot 1.0 x) -1.0))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 36,
    "avg_bits_err_input": 53.251528206832646,
    "avg_bits_err_output": 0.3602704865169331,
    "avg_bits_err_improve": 52.891257720315714,
    "time": 17584.86572265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.740628981971858,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.740628981971858,
    "time": 2610.92626953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.014,
    "avg_bits_err_improve": 0,
    "time": 3389.0751953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1191.272705078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.582187331450612,
    "avg_bits_err_output": 0.6024493636807774,
    "avg_bits_err_improve": 11.979737967769834,
    "time": 24642.37060546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (+ (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) x1) (* (* x1 -6.0) x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.5148986108851147,
    "avg_bits_err_output": 0.27579636952278613,
    "avg_bits_err_improve": 0.23910224136232855,
    "time": 69114.7685546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.313158470463996,
    "avg_bits_err_output": 1.409984404663397,
    "avg_bits_err_improve": 16.9031740658006,
    "time": 7913.698486328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2306079264948677,
    "avg_bits_err_output": 0.2306079264948677,
    "avg_bits_err_improve": 0,
    "time": 8862.361572265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2424.9208984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* (/ (- (/ 0.5 a) (/ 0.5 b)) (- b a)) (/ PI (+ a b)))",
    "output_parens": 8,
    "avg_bits_err_input": 14.656241829431005,
    "avg_bits_err_output": 0.28152932501298045,
    "avg_bits_err_improve": 14.374712504418024,
    "time": 16299.625244140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (/ (exp (- (- x (* eps x)))) eps) 0.0) (+ (exp (- (* x eps) x)) (+ (/ (exp (- (* x eps) x)) eps) (/ (- 1.0 (/ 1.0 eps)) (exp (fma x eps x))))) (+ (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* eps x)))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) 2.0)",
    "output_parens": 34,
    "avg_bits_err_input": 29.178838880393464,
    "avg_bits_err_output": 24.658786021445994,
    "avg_bits_err_improve": 4.520052858947469,
    "time": 25322.47265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ 2.0 (+ t (/ t t)))) (- 2.0 (/ 2.0 (+ t (/ t t))))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.0125,
    "avg_bits_err_output": 0.006125,
    "avg_bits_err_improve": 0.0063750000000000005,
    "time": 7780.119873046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (log (+ 1.0 (expm1 (* (+ (/ -2.0 (+ t (/ t t))) 2.0) (- 2.0 (/ 2.0 (+ (/ t t) t)))))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 26,
    "avg_bits_err_input": 0.01725,
    "avg_bits_err_output": 0.02569776774770735,
    "avg_bits_err_improve": -0.00844776774770735,
    "time": 12755.906494140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (+ 1.0 (/ (* (/ (* 2.0 t) (+ t 1.0)) (* t 4.0)) (+ t 1.0)))) (+ 4.0 (/ (* (/ (* 2.0 t) (+ t 1.0)) (* t 4.0)) (+ t 1.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.04275,
    "avg_bits_err_output": 0.103625,
    "avg_bits_err_improve": -0.06087499999999999,
    "time": 16759.513916015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 4046.10498046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7261.46240234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2613.440185546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.843910449075863,
    "avg_bits_err_output": 0.249875,
    "avg_bits_err_improve": 7.594035449075863,
    "time": 30432.646484375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.7158885577526855,
    "avg_bits_err_output": 7.7158885577526855,
    "avg_bits_err_improve": 0,
    "time": 14167.01025390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 16.11846614546361,
    "avg_bits_err_output": 16.11846614546361,
    "avg_bits_err_improve": 0,
    "time": 13723.582275390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (+ 2.0 (expm1 (* 10.0 (* x x)))) (cos x)) 0.0) (* (* (+ 2.0 (expm1 (* 10.0 (* x x)))) (- (exp (log1p (* (cos x) (cos x)))) 1.0)) (/ (exp (* 10.0 (* x x))) (* (+ 2.0 (- (exp (* 10.0 (* x x))) 1.0)) (cos x)))) (* (exp (* 10.0 (* x x))) (cos x)))",
    "output_parens": 36,
    "avg_bits_err_input": 3.5323393279850985,
    "avg_bits_err_output": 3.5384811436599812,
    "avg_bits_err_improve": -0.0061418156748827,
    "time": 19816.138916015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -1e+55) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 2e-31) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 15.29409370700576,
    "avg_bits_err_output": 0.024573120312590145,
    "avg_bits_err_improve": 15.26952058669317,
    "time": 8726.85107421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.96791563568305,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.96791563568305,
    "time": 4967.51904296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.30441054977922,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 38.30403554977922,
    "time": 4212.418212890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2985,
    "avg_bits_err_improve": 63.7015,
    "time": 17855.8369140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.843251042012014,
    "avg_bits_err_output": 0.401875,
    "avg_bits_err_improve": 61.44137604201202,
    "time": 8553.3525390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 33.8941878028341,
    "avg_bits_err_output": 33.914625700394,
    "avg_bits_err_improve": -0.02043789755990133,
    "time": 24425.404541015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.88879999874394,
    "avg_bits_err_output": 22.051463825170433,
    "avg_bits_err_improve": 11.837336173573508,
    "time": 22231.922119140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2182.497802734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.16383456716739,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 40.15370956716739,
    "time": 7031.41015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.353977514116686,
    "avg_bits_err_output": 20.353977514116686,
    "avg_bits_err_improve": 0,
    "time": 5947.064208984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ c b) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6186085787196505,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6186085787196505,
    "time": 7238.086181640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.036,
    "time": 6102.278076171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ a b)) (* a (+ a b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021969360937770434,
    "avg_bits_err_output": 0.01575,
    "avg_bits_err_improve": 0.006219360937770434,
    "time": 3618.17919921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.01275,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 0.0013749999999999995,
    "time": 2032.343994140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00025,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0,
    "time": 1305.29736328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3988729328161961,
    "avg_bits_err_output": 0.240875,
    "avg_bits_err_improve": 0.15799793281619612,
    "time": 5348.039794921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(- 1.0 (cos x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.483744802675492,
    "avg_bits_err_output": 29.483744802675492,
    "avg_bits_err_improve": 0,
    "time": 8069.561767578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ (- eps 0.0) (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 16,
    "avg_bits_err_input": 24.967283559370152,
    "avg_bits_err_output": 0.29094812031259015,
    "avg_bits_err_improve": 24.676335439057564,
    "time": 11561.29541015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (- (tan x))) 0.0) (/ (+ (/ (* (/ (sin x) (tan x)) (- x)) (tan x)) (* (/ (sin x) (tan x)) (/ (sin x) (tan x)))) (/ (sin x) (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 30,
    "avg_bits_err_input": 30.077157344841027,
    "avg_bits_err_output": 30.088601340493206,
    "avg_bits_err_improve": -0.01144399565217924,
    "time": 32499.1708984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00764624062518029,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.00652124062518029,
    "time": 2893.43896484375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 2e-231) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (* 100.0 (/ (pow (+ (/ i n) 1.0) n) (/ i n))) (/ 100.0 (/ i n))))",
    "output_parens": 24,
    "avg_bits_err_input": 47.686514191116316,
    "avg_bits_err_output": 13.36660082864612,
    "avg_bits_err_improve": 34.319913362470196,
    "time": 24883.073486328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= d -500000.0) (+ (* d (/ b (fma c c (* d d)))) (/ (* (/ a (fma c c (* d d))) (+ c c)) 2.0)) (if (<= d 5e-275) (+ (/ (* b d) (fma c c (* d d))) (* a (/ c (fma c c (* d d))))) (fma b (/ d (fma c c (* d d))) (* a (/ c (fma c c (* d d)))))))",
    "output_parens": 32,
    "avg_bits_err_input": 26.1341579976068,
    "avg_bits_err_output": 23.17659198766102,
    "avg_bits_err_improve": 2.9575660099457792,
    "time": 13626.8046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* b (/ c (fma c c (* d d)))) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.197595971955746,
    "avg_bits_err_output": 23.080880370750236,
    "avg_bits_err_improve": 3.1167156012055095,
    "time": 14019.772705078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.03375,
    "avg_bits_err_output": 0.023450605288241753,
    "avg_bits_err_improve": 0.01029939471175825,
    "time": 6956.5205078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- (- ux (* ux ux)) (+ (- ux) (* (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (* ux maxCos))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.703806796572488,
    "avg_bits_err_output": 0.5548526407844777,
    "avg_bits_err_improve": 13.14895415578801,
    "time": 27030.161865234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (- (- (+ ux ux) (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))) (* ux ux))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.741929338666584,
    "avg_bits_err_output": 0.3242414076635514,
    "avg_bits_err_improve": 13.417687931003032,
    "time": 28419.21142578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (* (- ux (* ux ux)) maxCos) zi (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (* (sin (if (!= (* (* uy PI) -2.0) 0.0) (* (+ uy uy) (* PI (* uy (/ PI (* uy PI))))) (* 2.0 (* uy PI)))) yi))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.33763074281731875,
    "avg_bits_err_output": 0.3526051634490265,
    "avg_bits_err_improve": -0.01497442063170773,
    "time": 54537.90185546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.1906883504838014,
    "avg_bits_err_output": 0.1906883504838014,
    "avg_bits_err_improve": 0,
    "time": 20513.38623046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (* (/ u1 (- (- 2.0 u1) u1)) (/ (+ u1 u1) u1)) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.5439826908594201,
    "avg_bits_err_output": 0.5630198312613642,
    "avg_bits_err_improve": -0.019037140401944153,
    "time": 27161.368408203125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3170521316007832,
    "avg_bits_err_output": 0.3170521316007832,
    "avg_bits_err_improve": 0,
    "time": 19646.528564453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(+ (* (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)) (- s)) (fma (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))) s (* s (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))))",
    "output_parens": 60,
    "avg_bits_err_input": 0.33130660728913075,
    "avg_bits_err_output": 0.33276365068087543,
    "avg_bits_err_improve": -0.0014570433917446834,
    "time": 48014.819091796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.061751992049796756,
    "avg_bits_err_output": 0.04154837748020238,
    "avg_bits_err_improve": 0.020203614569594373,
    "time": 10278.863037109375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (- (/ (fabs x) s))) (- (/ 2.0 (exp (/ (fabs x) s))) (- -1.0 (exp (/ (* (fabs x) -2.0) s))))) s)",
    "output_parens": 16,
    "avg_bits_err_input": 0.15397063354866408,
    "avg_bits_err_output": 0.1425288681509787,
    "avg_bits_err_improve": 0.011441765397685377,
    "time": 19647.39208984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (- (/ (/ (sin (* x (* PI tau))) (* PI (- tau))) x)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.648488859115783,
    "avg_bits_err_output": 0.7547888416955397,
    "avg_bits_err_improve": -0.1062999825797567,
    "time": 23232.10400390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (- (exp (/ -2.0 v)) (* u (exp (/ -2.0 v)))) u)) 1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.1675748508106349,
    "avg_bits_err_output": 0.1686501848340153,
    "avg_bits_err_improve": -0.0010753340233804198,
    "time": 22151.36865234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.4634390628625606,
    "avg_bits_err_output": 2.461625047994461,
    "avg_bits_err_improve": 0.0018140148680996226,
    "time": 42796.583251953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (* (* cosTheta_i cosTheta_O) (/ 1.0 v)) (* (/ (exp (* sinTheta_O (/ sinTheta_i (- v)))) v) (/ 0.5 (sinh (/ 1.0 v)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.47404769640329625,
    "avg_bits_err_output": 0.39255873028507987,
    "avg_bits_err_improve": 0.08148896611821638,
    "time": 28723.207763671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (+ (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (/ -1.0 v)) 0.6931)) 0.5) v)",
    "output_parens": 10,
    "avg_bits_err_input": 0.1179853212986712,
    "avg_bits_err_output": 0.0841378618959963,
    "avg_bits_err_improve": 0.033847459402674904,
    "time": 9875.53173828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (- 1.0 (* alpha alpha)) (log (* alpha alpha))) (- PI)) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.47274946954319436,
    "avg_bits_err_output": 0.4741551086054238,
    "avg_bits_err_improve": -0.001405639062229458,
    "time": 25651.552978515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* 3.0 (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- -0.3333333333333333 (* u -1.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333)))))))",
    "output_parens": 14,
    "avg_bits_err_input": 1.3164124899728602,
    "avg_bits_err_output": 0.7730944047445462,
    "avg_bits_err_improve": 0.543318085228314,
    "time": 23723.8505859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (if (!= (- 1.0 (+ (log (/ 1.0 (fma u -4.0 1.0))) -1.0)) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (* (+ (log (/ 1.0 (fma u -4.0 1.0))) -1.0) (+ (log (/ 1.0 (fma u -4.0 1.0))) -1.0)))))) (- 1.0 (+ (log (/ 1.0 (fma u -4.0 1.0))) -1.0))) (log (/ 1.0 (fma u -4.0 1.0)))) s) 2.0) (/ (* (log (/ 1.0 (+ 1.0 (* u -4.0)))) s) 2.0))",
    "output_parens": 38,
    "avg_bits_err_input": 12.394417548115204,
    "avg_bits_err_output": 11.71502074373889,
    "avg_bits_err_improve": 0.6793968043763137,
    "time": 25465.977294921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* 2.0 (* PI (* s r)))) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1410571449845021,
    "avg_bits_err_output": 0.14016090435932183,
    "avg_bits_err_improve": 0.0008962406251802613,
    "time": 23864.96923828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (- normAngle (* u normAngle))) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8889425159661124,
    "avg_bits_err_output": 0.7110059506837316,
    "avg_bits_err_improve": 0.17793656528238078,
    "time": 28378.55126953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) cosTheta) (sqrt PI)) (exp (* (- cosTheta) cosTheta)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6715434552179841,
    "avg_bits_err_output": 0.5053896911196913,
    "avg_bits_err_improve": 0.16615376409829274,
    "time": 22885.43408203125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (sin (if (!= (* PI u2) 0.0) (* (/ PI (if (!= (* PI u2) 0.0) (/ 1.0 (/ 1.0 (* PI u2))) (* PI u2))) (* u2 (* PI (+ u2 u2)))) (* 2.0 (* PI u2)))))",
    "output_parens": 23,
    "avg_bits_err_input": 13.621784274776658,
    "avg_bits_err_output": 13.636661857007237,
    "avg_bits_err_improve": -0.014877582230578668,
    "time": 24323.783935546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (exp (* 0.5 (log (- (/ (- 1.0 (+ 1.0 (* (log (- 1.0 u1)) 2.0))) -2.0))))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 14,
    "avg_bits_err_input": 13.665214078245482,
    "avg_bits_err_output": 13.685972810666307,
    "avg_bits_err_improve": -0.020758732420825154,
    "time": 20736.7255859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* (- alpha) alpha) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.170012526780337,
    "avg_bits_err_output": 0.32003552656439316,
    "avg_bits_err_improve": 13.849977000215944,
    "time": 15624.2919921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ (/ cos2phi alphax) alphax) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.597309665124838,
    "avg_bits_err_output": 0.5140621588863046,
    "avg_bits_err_improve": 12.083247506238534,
    "time": 17562.96630859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l)))) 2e+186) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (if (<= (- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l)))) 4e+299) (- (* PI l) (if (!= (/ (tan (* PI l)) (* F (+ F F))) 0.0) (* (/ (tan (* PI l)) (* F (+ F F))) (/ (/ (tan (* PI l)) (* F (+ F F))) (/ (tan (* PI l)) (* (* (* F F) (* F F)) (/ 4.0 (* F F)))))) (/ (tan (* PI l)) (* F F)))) (- (* PI l) (/ (* (tan (* PI l)) (/ 1.0 F)) F))))",
    "output_parens": 65,
    "avg_bits_err_input": 16.6436605511083,
    "avg_bits_err_output": 12.240627916435116,
    "avg_bits_err_improve": 4.403032634673185,
    "time": 24510.7353515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.20960112287783922,
    "avg_bits_err_output": 0.14833928068970825,
    "avg_bits_err_improve": 0.061261842188130966,
    "time": 15091.798583984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.19585464388637,
    "avg_bits_err_output": 10.139288202831374,
    "avg_bits_err_improve": 3.056566441054997,
    "time": 19260.070556640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f 4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) 4.0))) (exp (* PI (/ f 4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.25))",
    "output_parens": 31,
    "avg_bits_err_input": 61.58779739507401,
    "avg_bits_err_output": 1.9210721450650459,
    "avg_bits_err_improve": 59.666725250008966,
    "time": 59291.44384765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.70191322909703,
    "avg_bits_err_output": 33.37680284899168,
    "avg_bits_err_improve": 9.32511038010535,
    "time": 31837.166015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 4.202135922791699,
    "avg_bits_err_output": 4.202135922791699,
    "avg_bits_err_improve": 0,
    "time": 29582.254638671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (log (+ 1.0 (expm1 (/ 1.0 (sqrt (- (* (pow (* 2.0 (/ l Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0)))))) 0.5)))",
    "output_parens": 18,
    "avg_bits_err_input": 1.060151335454401,
    "avg_bits_err_output": 1.0614013354544012,
    "avg_bits_err_improve": -0.0012500000000001954,
    "time": 18753.736572265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.389237730312896,
    "avg_bits_err_output": 10.389237730312896,
    "avg_bits_err_improve": 0,
    "time": 9694.36474609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 4e-256) (sqrt (* U (fma (- (fma 2.0 (* l (/ l Om)) (* (- U U*) (* n (pow (/ l Om) 2.0)))) t) (* n -2.0) (fma (- (fma 2.0 (* l (/ l Om)) (* (- U U*) (* n (pow (/ l Om) 2.0))))) (* 2.0 n) (* (fma 2.0 (* l (/ l Om)) (* (- U U*) (* n (pow (/ l Om) 2.0)))) (* 2.0 n)))))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 1e+272) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* U (- (* (* 2.0 n) (- t (* (- U U*) (* n (pow (/ l Om) 2.0))))) (* l (* (/ l Om) (* n 4.0))))))))",
    "output_parens": 93,
    "avg_bits_err_input": 34.559575328156924,
    "avg_bits_err_output": 28.345594768399724,
    "avg_bits_err_improve": 6.2139805597572,
    "time": 37672.69921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1e-106) (/ 2.0 (* (- 0.0 (pow (/ k t) 2.0)) (- (/ (* (sin k) (* (tan k) (/ (pow t 3.0) l))) l)))) (if (<= t 1.4e-108) (/ 2.0 (* (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) l) (* (/ (sin k) l) (tan k)))) (if (<= t 5e+67) (/ 2.0 (/ (* (pow (/ k t) 2.0) (* (sin k) (* (tan k) (/ (pow t 3.0) l)))) l)) (/ 2.0 (* (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) l) (* (/ (sin k) l) (tan k)))))))",
    "output_parens": 56,
    "avg_bits_err_input": 47.90102348639842,
    "avg_bits_err_output": 36.49302122548168,
    "avg_bits_err_improve": 11.408002260916746,
    "time": 41559.794921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* (* (tan k) (+ 2.0 (pow (/ k t) 2.0))) (/ (* (sin k) (pow t 3.0)) l)) l))",
    "output_parens": 12,
    "avg_bits_err_input": 32.68437030765328,
    "avg_bits_err_output": 27.736531595419244,
    "avg_bits_err_improve": 4.947838712234038,
    "time": 19922.341064453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (/ (* a2 a2) (sqrt 2.0)) (* a1 (/ a1 (sqrt 2.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5266481234615706,
    "avg_bits_err_output": 0.46698722032989914,
    "avg_bits_err_improve": 0.059660903131671494,
    "time": 23648.0341796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (+ 0.5 (/ k -2.0))) (pow k -0.5))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5506039723449057,
    "avg_bits_err_output": 0.5078631068914388,
    "avg_bits_err_improve": 0.04274086545346689,
    "time": 20706.82958984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (/ (- (* (exp (fma l -1.0 l)) (* J (cos (/ K 2.0)))) (* (exp (* l -2.0)) (* J (cos (/ K 2.0))))) (exp (- l))) U)",
    "output_parens": 17,
    "avg_bits_err_input": 17.57793623564195,
    "avg_bits_err_output": 17.590990254521586,
    "avg_bits_err_improve": -0.013054018879635976,
    "time": 28573.002197265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= n -5e+31) (* (cos (- (/ (if (!= (* K n) 0.0) (* K (* (+ n m) (* n (/ K (* K n))))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (if (<= n 5e-66) (* (cos (- (/ (if (!= (* K n) 0.0) (* K (* (+ n m) (/ (/ K (/ K n)) n))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K n) 0.0) (* K (* (+ n m) (* n (/ K (* K n))))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))))",
    "output_parens": 79,
    "avg_bits_err_input": 15.525022680929563,
    "avg_bits_err_output": 4.265219808837812,
    "avg_bits_err_improve": 11.25980287209175,
    "time": 17709.75830078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.301167481250364,
    "avg_bits_err_output": 18.301167481250364,
    "avg_bits_err_improve": 0,
    "time": 17761.779052734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (/ (* (/ D d) M) 2.0) 2.0) h) l))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.097235306350637,
    "avg_bits_err_output": 10.82325649924906,
    "avg_bits_err_improve": 3.2739788071015763,
    "time": 23285.001708984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (* c0 (sqrt (/ (/ A l) V))) (if (<= (* V l) -1e-299) (* c0 (sqrt (* (/ 2.0 (* V (+ l l))) A))) (if (<= (* V l) 5e-123) (* c0 (sqrt (/ (/ A l) V))) (if (<= (* V l) 1e+178) (* c0 (sqrt (if (!= (/ A (* l V)) 0.0) (/ 1.0 (/ 1.0 (/ A (* l V)))) (/ A (* l V))))) (if (!= (* (sqrt (/ (+ (/ A (/ V -2.0)) (/ (* A 4.0) V)) (+ l l))) c0) 0.0) (/ 1.0 (/ 1.0 (* (sqrt (/ (+ (/ A (/ V -2.0)) (/ (* A 4.0) V)) (+ l l))) c0))) (* (sqrt (/ (+ (/ A (/ V -2.0)) (/ (* A 4.0) V)) (+ l l))) c0))))))",
    "output_parens": 70,
    "avg_bits_err_input": 18.458718662940683,
    "avg_bits_err_output": 14.410737099053163,
    "avg_bits_err_improve": 4.04798156388752,
    "time": 15973.606689453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(* (/ c0 (* w 2.0)) (+ (* d (/ (/ (* c0 (/ (/ d w) D)) D) h)) (sqrt (* (fma d (/ (/ (* c0 (/ (/ d w) D)) D) h) M) (fma d (/ (/ (* c0 (/ (/ d w) D)) D) h) (- M))))))",
    "output_parens": 25,
    "avg_bits_err_input": 59.269508356723485,
    "avg_bits_err_output": 53.40989127295841,
    "avg_bits_err_improve": 5.859617083765073,
    "time": 44792.9736328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 1e-98) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* (* 0.5 (pow (* D (/ M (* d 2.0))) 2.0)) (/ h l)))) (* (sqrt (/ d h)) (* (sqrt (/ d l)) (- 1.0 (/ (* h (pow (/ (* D M) (+ d d)) 2.0)) (+ l l))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.68856513104088,
    "avg_bits_err_output": 25.973256783143402,
    "avg_bits_err_improve": 0.7153083478974764,
    "time": 40491.75634765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (log1p (expm1 (+ 0.5 (/ -0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 23,
    "avg_bits_err_input": 16.00784359152053,
    "avg_bits_err_output": 15.521591358567385,
    "avg_bits_err_improve": 0.4862522329531451,
    "time": 18014.07861328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(- (/ (/ (/ -1.3333333333333333 (fma v v -1.0)) (sqrt (- 2.0 (* 6.0 (* v v))))) PI) 0.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.9842193609377705,
    "avg_bits_err_output": 0.012292481250360579,
    "avg_bits_err_improve": 0.97192687968741,
    "time": 6833.1513671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* v (* v 5.0))) PI) (sqrt (- 2.0 (* v (* v 6.0))))) (* (fma v v -1.0) (- t)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4448520355945246,
    "avg_bits_err_output": 0.11103700474381764,
    "avg_bits_err_improve": 0.33381503085070696,
    "time": 19820.5654296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(- (* (/ (sqrt 2.0) 4.0) (* (if (!= (sqrt (+ 1.0 (* (* v v) -3.0))) 0.0) (/ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (* v v) -3.0))))) (sqrt (+ 1.0 (* (* v v) -3.0)))) (fma v v -1.0))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.014292481250360577,
    "avg_bits_err_output": 0.015761842188131012,
    "avg_bits_err_improve": -0.0014693609377704354,
    "time": 8324.17822265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* v (* 5.0 v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.515697075733991,
    "avg_bits_err_output": 0.515572075733991,
    "avg_bits_err_improve": 0.00012500000000004174,
    "time": 10852.25390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (if (!= (- (* k 10.0) -1.0) 0.0) (* (/ (- (* k 20.0) -2.0) 2.0) (/ (- (* k (+ k 10.0)) (- -2.0 (* k (+ k 10.0)))) (+ 1.0 (+ 1.0 (* k 20.0))))) (fma k (+ k 10.0) 1.0)))",
    "output_parens": 23,
    "avg_bits_err_input": 2.106638157000591,
    "avg_bits_err_output": 2.2533911862871636,
    "avg_bits_err_improve": -0.14675302928657263,
    "time": 21495.34375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ EDonor (+ Vef mu)) Ec) KbT)))) (/ NaChar (- (exp (/ (- (+ Ev (+ Vef EAccept)) mu) KbT)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017997431866599887,
    "avg_bits_err_output": 0.017997431866599887,
    "avg_bits_err_improve": 0,
    "time": 8241.739013671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (fma b (* b 4.0) (pow (fma a a (* b b)) 2.0)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.1822479328161959,
    "avg_bits_err_output": 0.1814554515658353,
    "avg_bits_err_improve": 0.0007924812503605771,
    "time": 19872.80029296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.1846298982688467,
    "avg_bits_err_output": 0.1846298982688467,
    "avg_bits_err_improve": 0,
    "time": 21461.70703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (fma a a (* b b)) 2.0) (* 4.0 (+ (* (* b b) (+ a 3.0)) (* (* a a) (- 1.0 a))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18933762053106826,
    "avg_bits_err_output": 0.18888950021847814,
    "avg_bits_err_improve": 0.00044812031259011675,
    "time": 27174.64599609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.235230172694507,
    "avg_bits_err_output": 13.235230172694507,
    "avg_bits_err_improve": 0,
    "time": 15695.822509765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.279883517511536,
    "avg_bits_err_output": 0.050125,
    "avg_bits_err_improve": 40.229758517511534,
    "time": 5922.97265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (!= (/ (sin x) (- (tan x) x)) 0.0) (- (/ 1.0 (/ 1.0 (/ (sin x) (- (tan x) x)))) (- (/ (* (sin x) (/ x (if (!= (- x (tan x)) 0.0) (/ 2.0 (/ 2.0 (- (tan x) x))) (- (tan x) x)))) (sin x)) 0.0)) (- (/ (sin x) (- (tan x) x)) (/ x (if (!= (- x (tan x)) 0.0) (/ 2.0 (/ 2.0 (- (tan x) x))) (- (tan x) x)))))",
    "output_parens": 45,
    "avg_bits_err_input": 31.887283812701988,
    "avg_bits_err_output": 31.98170983881865,
    "avg_bits_err_improve": -0.09442602611666118,
    "time": 22404.95068359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 34.25679418892966,
    "avg_bits_err_output": 34.25679418892966,
    "avg_bits_err_improve": 0,
    "time": 14789.347900390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (* b_2 -0.5) (+ (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 2.0))) a)",
    "output_parens": 9,
    "avg_bits_err_input": 34.646977942311466,
    "avg_bits_err_output": 34.648076987587416,
    "avg_bits_err_improve": -0.0010990452759500613,
    "time": 16513.4296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(if (<= (/ (- 1.0 (cos x)) (* x x)) 0.0) (+ (- (/ 1.0 (* x x)) (+ 1.0 (/ (cos x) (* x x)))) 1.0) (/ (/ (- 1.0 (cos x)) x) x))",
    "output_parens": 18,
    "avg_bits_err_input": 31.51567623839316,
    "avg_bits_err_output": 28.7029067384016,
    "avg_bits_err_improve": 2.812769499991557,
    "time": 16718.45068359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (/ (if (!= (+ (exp (* (log x) (/ 2.0 n))) (exp (* (/ (log1p x) n) 2.0))) 0.0) (/ (if (!= (+ (exp (* (/ (log1p x) n) 4.0)) (pow x (/ 4.0 n))) 0.0) (/ (- (exp (* (/ (log1p x) n) 8.0)) (exp (* (/ (log x) n) 8.0))) (+ (exp (* (/ (log1p x) n) 4.0)) (pow x (/ 4.0 n)))) (- (exp (* (/ (log1p x) n) 4.0)) (pow x (/ 4.0 n)))) (+ (exp (* (log x) (/ 2.0 n))) (exp (* (/ (log1p x) n) 2.0)))) (- (exp (* (/ (log1p x) n) 2.0)) (exp (* (log x) (/ 2.0 n))))) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 84,
    "avg_bits_err_input": 32.593478801695994,
    "avg_bits_err_output": 32.32536941132759,
    "avg_bits_err_improve": 0.26810939036840153,
    "time": 30189.963134765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (log1p N) (log N))",
    "output_parens": 3,
    "avg_bits_err_input": 29.482993288620186,
    "avg_bits_err_output": 29.483117328523058,
    "avg_bits_err_improve": -0.00012403990287168654,
    "time": 14026.883056640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (+ (/ 0.5 (+ 1.0 x)) (/ -0.5 x)) (/ (- (/ -1.0 x) (+ -1.0 (/ x x))) (if (!= (- -1.0 x) 0.0) (/ 1.0 (/ 0.5 (- x -1.0))) (+ x (+ x 2.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 14.84130662861528,
    "avg_bits_err_output": 12.88398631776001,
    "avg_bits_err_improve": 1.9573203108552697,
    "time": 16110.38525390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (!= (cos (+ x eps)) 0.0) (/ (fma (- (cos x)) (cos (+ x eps)) (* (cos (+ x eps)) (cos (+ x eps)))) (cos (+ x eps))) (- (cos (+ x eps)) (cos x)))",
    "output_parens": 21,
    "avg_bits_err_input": 39.39427075411002,
    "avg_bits_err_output": 39.46499790535846,
    "avg_bits_err_improve": -0.07072715124844109,
    "time": 24798.9951171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (!= (cbrt (+ x 1.0)) 0.0) (/ (+ (* (cbrt (+ x 1.0)) (cbrt (+ x 1.0))) (* (cbrt (+ x 1.0)) (- (cbrt x)))) (cbrt (+ x 1.0))) (- (cbrt (+ x 1.0)) (cbrt x)))",
    "output_parens": 22,
    "avg_bits_err_input": 29.94498734798447,
    "avg_bits_err_output": 29.952030361419464,
    "avg_bits_err_improve": -0.007043013434994805,
    "time": 13846.35693359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(* (- (- (* (cos x) 2.0) 2.0)) (/ 0.5 (sin x)))",
    "output_parens": 7,
    "avg_bits_err_input": 30.263074593365097,
    "avg_bits_err_output": 30.296362041879966,
    "avg_bits_err_improve": -0.03328744851486931,
    "time": 21522.83251953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) (+ b b)) (* a 2.0))",
    "output_parens": 10,
    "avg_bits_err_input": 34.195757106768276,
    "avg_bits_err_output": 34.226887017665355,
    "avg_bits_err_improve": -0.031129910897078616,
    "time": 25429.66064453125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(- (/ (/ (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) -2.0) a) 0.0)",
    "output_parens": 9,
    "avg_bits_err_input": 34.44614432655109,
    "avg_bits_err_output": 34.45201058791806,
    "avg_bits_err_improve": -0.005866261366968217,
    "time": 20915.294677734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(- (/ (+ 1.0 (log (- 1.0 x))) (log1p x)) (/ (/ 1.0 (log1p x)) (* (log1p x) (/ 1.0 (log1p x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 61.305152710857946,
    "avg_bits_err_output": 59.532975470086264,
    "avg_bits_err_improve": 1.7721772407716827,
    "time": 25017.362548828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (- 1.0 (fma n (- (log1p n) (log n)) (log1p n))) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (+ (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n))))))))) (+ (fma n (- (log1p n) (log n)) (log1p n)) -1.0))",
    "output_parens": 27,
    "avg_bits_err_input": 62.99370881589905,
    "avg_bits_err_output": 6.787718361008622,
    "avg_bits_err_improve": 56.205990454890426,
    "time": 17766.094970703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (if (!= (* (/ eps (+ 1.0 eps)) (/ eps (+ 1.0 eps))) 0.0) (/ (fma (+ eps eps) (* (+ eps -1.0) (/ eps (* (+ eps eps) (- -1.0 eps)))) (* (/ (+ eps -1.0) eps) (/ (* eps eps) (- -1.0 eps)))) (+ eps eps)) (/ (- 1.0 eps) (+ 1.0 eps))))",
    "output_parens": 27,
    "avg_bits_err_input": 58.463043797532045,
    "avg_bits_err_output": 58.47924774341635,
    "avg_bits_err_improve": -0.016203945884306847,
    "time": 23453.545654296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (log (+ 1.0 (expm1 (+ (/ 1.0 (tan x)) (/ -1.0 x))))) (/ -1.0 x)) x)",
    "output_parens": 10,
    "avg_bits_err_input": 59.90029006700842,
    "avg_bits_err_output": 59.90072488352687,
    "avg_bits_err_improve": -0.0004348165184495656,
    "time": 28561.103515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (/ eps (expm1 (* eps a))) (expm1 (+ (* eps b) (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 11,
    "avg_bits_err_input": 60.35248503890346,
    "avg_bits_err_output": 28.847369209207578,
    "avg_bits_err_improve": 31.50511582969588,
    "time": 26887.98095703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 40.71257744821935,
    "avg_bits_err_output": 0.4538962406251803,
    "avg_bits_err_improve": 40.25868120759417,
    "time": 5523.946533203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.639894128298145,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.63939412829814,
    "time": 3131.3642578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 28.49945657089388,
    "avg_bits_err_output": 0.01815499375684071,
    "avg_bits_err_improve": 28.48130157713704,
    "time": 4531.920166015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (exp x) (- (- (* (exp x) 2.0) 1.0))) (exp x))",
    "output_parens": 9,
    "avg_bits_err_input": 29.14058623538579,
    "avg_bits_err_output": 28.258597587665637,
    "avg_bits_err_improve": 0.8819886477201528,
    "time": 22567.29248046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 10.00177022459701,
    "avg_bits_err_output": 10.00177022459701,
    "avg_bits_err_improve": 0,
    "time": 32706.036376953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (+ (- (/ (tan (+ x eps)) 2.0) (tan x)) (/ (/ (sin (+ x eps)) (cos (+ x eps))) 4.0)) (- (/ (tan (+ x eps)) 4.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 37.06446869702387,
    "avg_bits_err_output": 37.08537490435123,
    "avg_bits_err_improve": -0.02090620732735715,
    "time": 20845.91455078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.073167042723615,
    "avg_bits_err_output": 0.16090112812734375,
    "avg_bits_err_improve": 29.912265914596272,
    "time": 10515.964599609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 37.03248519238114,
    "avg_bits_err_output": 37.03248519238114,
    "avg_bits_err_improve": 0,
    "time": 22782.25537109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.56944854718025,
    "avg_bits_err_output": 19.56944854718025,
    "avg_bits_err_improve": 0,
    "time": 16357.592529296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (- (* (atan (+ 1.0 N)) (/ (atan (+ 1.0 N)) (+ (atan (+ 1.0 N)) (atan N)))) (* (atan N) (/ (atan N) (+ (atan (+ 1.0 N)) (atan N))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 29,
    "avg_bits_err_input": 14.825275473549802,
    "avg_bits_err_output": 14.8363366352626,
    "avg_bits_err_improve": -0.011061161712797585,
    "time": 11458.192626953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.209372297151717,
    "avg_bits_err_output": 1.4312366936942307,
    "avg_bits_err_improve": 27.778135603457486,
    "time": 28298.238525390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07142932343849158,
    "avg_bits_err_output": 0.0779411656266226,
    "avg_bits_err_improve": -0.0065118421881310146,
    "time": 14374.783447265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (/ (- b) (/ 1.0 a)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.494462756005221,
    "avg_bits_err_output": 0.2668729328161959,
    "avg_bits_err_improve": 15.227589823189026,
    "time": 11673.638427734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ (* PI angle) 180.0))) 2.0) (pow (* b (log1p (expm1 (sin (if (!= (* PI (/ angle -180.0)) 0.0) (/ 1.0 (/ (/ 180.0 angle) PI)) (* PI (/ angle 180.0))))))) 2.0))",
    "output_parens": 20,
    "avg_bits_err_input": 20.553976437900413,
    "avg_bits_err_output": 20.604439454378156,
    "avg_bits_err_improve": -0.05046301647774243,
    "time": 38496.071533203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* PI (/ angle 180.0))) (expm1 (log1p (cos (* PI (/ angle 180.0)))))))",
    "output_parens": 14,
    "avg_bits_err_input": 31.68913021245405,
    "avg_bits_err_output": 31.69069378724322,
    "avg_bits_err_improve": -0.0015635747891700191,
    "time": 41185.750732421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (if (!= (* (* angle PI) -0.005555555555555556) 0.0) (* (* (* angle PI) (* PI 3.08641975308642e-5)) (/ angle (* angle (* PI 0.005555555555555556)))) (* angle (* PI 0.005555555555555556))))) 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 20.992348440806676,
    "avg_bits_err_output": 21.037124751982333,
    "avg_bits_err_improve": -0.0447763111756565,
    "time": 43772.275634765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.18145772226222148,
    "avg_bits_err_output": 0.18177144413776233,
    "avg_bits_err_improve": -0.00031372187554085107,
    "time": 13089.78857421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.32372057079218763,
    "avg_bits_err_output": 0.31334727931679757,
    "avg_bits_err_improve": 0.010373291475390067,
    "time": 19369.443603515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (/ (sin v) (+ 1.0 (+ (/ (+ 1.0 (* (* e (cos v)) 2.0)) 2.0) -0.5))) e)",
    "output_parens": 10,
    "avg_bits_err_input": 0.1403962406251803,
    "avg_bits_err_output": 0.1439080828133113,
    "avg_bits_err_improve": -0.003511842188130998,
    "time": 18968.15625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (if (!= (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))) 0.0) (/ (* (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))) R)",
    "output_parens": 39,
    "avg_bits_err_input": 16.526754732811064,
    "avg_bits_err_output": 16.53083163026353,
    "avg_bits_err_improve": -0.004076897452467421,
    "time": 33974.509033203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* -4.0 (* a c)))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.58784690087849,
    "avg_bits_err_output": 0.1679390984428184,
    "avg_bits_err_improve": 52.419907802435674,
    "time": 21598.707763671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (- (* c (* a -4.0)) (* b b)) 0.0) (/ (- (* c (* (* c a) (* a 16.0))) (* (* b b) (* b b))) (- (* c (* a -4.0)) (* b b))) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 41,
    "avg_bits_err_input": 28.054785036784796,
    "avg_bits_err_output": 0.34652688126189923,
    "avg_bits_err_improve": 27.7082581555229,
    "time": 25935.679443359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.88496704593725,
    "avg_bits_err_output": 0.24313966250649005,
    "avg_bits_err_improve": 43.64182738343076,
    "time": 23866.15869140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (- (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) (+ b b)) (* a 2.0))",
    "output_parens": 10,
    "avg_bits_err_input": 34.194225814587526,
    "avg_bits_err_output": 34.226887017665355,
    "avg_bits_err_improve": -0.03266120307782927,
    "time": 19557.9140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (if (!= (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))) 0.0) (/ (* (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))) (* (cos phi1) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))) (* (cos phi1) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))) (cos phi1)) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.8901279830007941,
    "avg_bits_err_output": 0.9022911632816949,
    "avg_bits_err_improve": -0.012163180280900798,
    "time": 33366.6435546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))) 0.0) (/ (- 1.0 (/ (/ 16.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))) (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) (- 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 60,
    "avg_bits_err_input": 29.18561948043984,
    "avg_bits_err_output": 29.157240338788572,
    "avg_bits_err_improve": 0.02837914165126776,
    "time": 28817.538330078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= x -8e-17) (/ (expm1 (+ x x)) (+ (exp (+ x x)) 1.0)) (* (expm1 (* x -2.0)) (/ 1.0 (- -1.0 (exp (* x -2.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 58.03829425603023,
    "avg_bits_err_output": 0.02004248125036058,
    "avg_bits_err_improve": 58.01825177477986,
    "time": 20894.825439453125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (- (+ (* (expm1 (* x -2.0)) (expm1 x)) (expm1 (* x -2.0)))) 2.0)",
    "output_parens": 9,
    "avg_bits_err_input": 57.95333233912599,
    "avg_bits_err_output": 0.23158144151162832,
    "avg_bits_err_improve": 57.72175089761436,
    "time": 11078.823486328125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01337461079306209,
    "avg_bits_err_output": 0.01337461079306209,
    "avg_bits_err_improve": 0,
    "time": 3393.25830078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.129375,
    "avg_bits_err_output": 32.129375,
    "avg_bits_err_improve": 0,
    "time": 3885.711181640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (if (!= (- -2.0 (log (/ (- -1.0 x) (- x 1.0)))) 0.0) (/ (expm1 (+ (log1p (+ (+ -1.0 (log (/ (+ 1.0 x) (- 1.0 x)))) 1.0)) (log1p (log (/ (- -1.0 x) (- x 1.0)))))) (+ (+ 2.0 (+ (+ -1.0 (log (/ (+ 1.0 x) (- 1.0 x)))) -1.0)) 2.0)) (log (/ (- -1.0 x) (- x 1.0)))))",
    "output_parens": 35,
    "avg_bits_err_input": 58.44706635597823,
    "avg_bits_err_output": 58.493973217391876,
    "avg_bits_err_improve": -0.046906861413646084,
    "time": 21964.53369140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04344812031259015,
    "avg_bits_err_output": 0.042875,
    "avg_bits_err_improve": 0.0005731203125901446,
    "time": 3067.523193359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12591748125036056,
    "avg_bits_err_output": 0.12591748125036056,
    "avg_bits_err_improve": 0,
    "time": 14349.478515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (* (tan t) (/ (- eh) ew))))) (* (sin t) (* eh (sin (atan (* (tan t) (/ (- eh) ew))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12221936093777043,
    "avg_bits_err_output": 0.1215212406251803,
    "avg_bits_err_improve": 0.0006981203125901309,
    "time": 13875.168212890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (cos (/ (+ phi1 phi2) 2.0)) (- lambda1 lambda2) (fma (- lambda2) (cos (/ (+ phi1 phi2) 2.0)) (* (cos (/ (+ phi1 phi2) 2.0)) lambda2))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 38.550200061136444,
    "avg_bits_err_output": 4.098770735984576,
    "avg_bits_err_improve": 34.451429325151864,
    "time": 26987.00732421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- a (* (/ b a) b)) a)))",
    "output_parens": 6,
    "avg_bits_err_input": 14.63862258158851,
    "avg_bits_err_output": 0.013225919365257202,
    "avg_bits_err_improve": 14.625396662223253,
    "time": 5909.41650390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (log1p (expm1 (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.1578551135373302,
    "avg_bits_err_output": 0.163541660097933,
    "avg_bits_err_improve": -0.005686546560602801,
    "time": 38491.578857421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.604906270673375,
    "avg_bits_err_output": 0.16723609062806485,
    "avg_bits_err_improve": 52.43767018004531,
    "time": 27869.542724609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -3.0) (* b b)))) 0.0) (* (/ c (- (- b) (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 28.272329037636187,
    "avg_bits_err_output": 0.3366024453255712,
    "avg_bits_err_improve": 27.935726592310616,
    "time": 33151.73583984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.96643487876498,
    "avg_bits_err_output": 0.24288966250649002,
    "avg_bits_err_improve": 43.723545216258486,
    "time": 22176.013671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -3.0 (* c a) (* b b)))) 0.0) (* (/ c (- (- b) (sqrt (fma c (* -3.0 a) (* b b))))) (* a 3.0)) (- (sqrt (fma -3.0 (* c a) (* b b))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 34.196854534573504,
    "avg_bits_err_output": 22.137479183030038,
    "avg_bits_err_improve": 12.059375351543466,
    "time": 24793.213134765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (expm1 (log1p (* (cos (- lambda1 lambda2)) (sin phi1)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.156630702960724,
    "avg_bits_err_output": 13.164186795080056,
    "avg_bits_err_improve": -0.0075560921193318364,
    "time": 37361.225830078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.514354193511846,
    "avg_bits_err_output": 0.5485050926542355,
    "avg_bits_err_improve": 28.96584910085761,
    "time": 20437.84716796875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.013,
    "avg_bits_err_output": 0.013,
    "avg_bits_err_improve": 0,
    "time": 5859.81103515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))) 0.0) (/ (if (!= (- (/ 1.0 (* (+ x 1.0) (+ x 1.0))) (/ -1.0 (* (- 1.0 x) (- 1.0 x)))) 0.0) (/ (+ (fma (/ -1.0 (* (+ 1.0 x) (+ 1.0 x))) (/ 1.0 (* (+ 1.0 x) (+ 1.0 x))) (/ 1.0 (* (+ 1.0 x) (* (+ 1.0 x) (* (+ 1.0 x) (+ 1.0 x)))))) (- (/ 1.0 (* (- 1.0 x) (* (+ x -1.0) (* (- 1.0 x) (+ x -1.0))))) (/ 1.0 (* (+ 1.0 x) (* (+ 1.0 x) (* (+ 1.0 x) (+ 1.0 x))))))) (- (/ -1.0 (* (- 1.0 x) (- 1.0 x))) (/ 1.0 (* (+ x 1.0) (+ x 1.0))))) (+ (/ -1.0 (* (- 1.0 x) (- 1.0 x))) (/ 1.0 (* (+ x 1.0) (+ x 1.0))))) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))) (+ (/ 1.0 (+ 1.0 x)) (/ -1.0 (+ x -1.0))))",
    "output_parens": 83,
    "avg_bits_err_input": 14.359911804127425,
    "avg_bits_err_output": 14.729421609720378,
    "avg_bits_err_improve": -0.3695098055929531,
    "time": 31728.7451171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 5e+242) (/ (sqrt (* 2.0 (* (- (* A (* C 4.0)) (pow B 2.0)) (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C)) F)))) (- (* A (* C 4.0)) (pow B 2.0))) 0.0)",
    "output_parens": 44,
    "avg_bits_err_input": 52.764235445500084,
    "avg_bits_err_output": 51.23461934879813,
    "avg_bits_err_improve": 1.5296160967019574,
    "time": 35014.483642578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -3.4e+99) 0.0 (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI)))",
    "output_parens": 14,
    "avg_bits_err_input": 29.396248183615747,
    "avg_bits_err_output": 27.76902816454032,
    "avg_bits_err_improve": 1.627220019075427,
    "time": 27031.080322265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (* F (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (+ A (if (!= (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) 0.0) (- (/ (- (* C C) (pow (- A C) 2.0)) (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (/ (pow B 2.0) (- C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 48,
    "avg_bits_err_input": 52.38526105972533,
    "avg_bits_err_output": 51.53496025296215,
    "avg_bits_err_improve": 0.8503008067631797,
    "time": 38179.295166015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.471001910125102,
    "avg_bits_err_output": 15.471001910125102,
    "avg_bits_err_improve": 0,
    "time": 29111.7568359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 0.5 a) (if (!= (- (sqrt (fma g g (* h (- h)))) g) 0.0) (/ (- (* h (- h))) (- (sqrt (fma g g (* h (- h)))) g)) (- (- g) (sqrt (fma g g (* h (- h)))))))))",
    "output_parens": 35,
    "avg_bits_err_input": 36.41911381376894,
    "avg_bits_err_output": 36.147456916891514,
    "avg_bits_err_improve": 0.271656896877424,
    "time": 16580.522705078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9922577078205239,
    "avg_bits_err_output": 0.9773468046888524,
    "avg_bits_err_improve": 0.014910903131671538,
    "time": 11035.455810546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7405,
    "avg_bits_err_output": 0.7405,
    "avg_bits_err_improve": 0,
    "time": 4389.882080078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -5e+258) (/ (* a1 (/ a2 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-303) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ (* a1 (/ a2 b1)) b2) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+288) (/ (* a1 a2) (* b1 b2)) (* (/ (/ a2 b2) b1) a1)))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.56122765733664,
    "avg_bits_err_output": 3.812897689842892,
    "avg_bits_err_improve": 7.748329967493749,
    "time": 9119.410400390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4620794223799711,
    "avg_bits_err_output": 0.4232259193652572,
    "avg_bits_err_improve": 0.03885350301471391,
    "time": 14308.973388671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(log1p (if (!= (+ x -1.0) 0.0) (* (/ (- x 1.0) (- x (- 2.0 x))) (* (+ x (+ -1.0 (hypot 1.0 x))) 2.0)) (+ x (+ (hypot 1.0 x) -1.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 52.80995237557292,
    "avg_bits_err_output": 16.165078711786972,
    "avg_bits_err_improve": 36.644873663785944,
    "time": 15984.10595703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.6820655613684465,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.6820655613684465,
    "time": 2175.363037109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 2.0 (* x 2.0)) (+ x (+ x 2.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.018,
    "avg_bits_err_improve": -0.003999999999999998,
    "time": 4762.458740234375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1299.921142578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (- (+ 3.0 (/ 2.0 (* r r))) (* (/ (- 0.375 (* v 0.25)) (- 1.0 v)) (if (!= (* (* w r) (* w r)) 0.0) (/ 1.0 (/ 1.0 (* (* w r) (* w r)))) (* (* w r) (* w r))))) 4.5)",
    "output_parens": 23,
    "avg_bits_err_input": 12.81312687351412,
    "avg_bits_err_output": 0.35269992254386323,
    "avg_bits_err_improve": 12.460426950970257,
    "time": 27736.57373046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0) (* x1 x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 0.5178261617280987,
    "avg_bits_err_output": 0.2839608571959587,
    "avg_bits_err_improve": 0.23386530453214,
    "time": 72750.73583984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 17.86576924066963,
    "avg_bits_err_output": 1.304463772085617,
    "avg_bits_err_improve": 16.56130546858401,
    "time": 7199.410888671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2370827222622215,
    "avg_bits_err_output": 0.1859052428037488,
    "avg_bits_err_improve": 0.0511774794584727,
    "time": 7216.242919921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0031981203125901443,
    "avg_bits_err_output": 0.0031981203125901443,
    "avg_bits_err_improve": 0,
    "time": 2605.892822265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* (- (/ 1.0 a) (/ 1.0 b)) (* PI 0.5)) (+ b a)) (- b a))",
    "output_parens": 9,
    "avg_bits_err_input": 13.890576369762117,
    "avg_bits_err_output": 0.30331447501009595,
    "avg_bits_err_improve": 13.587261894752022,
    "time": 17302.591552734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (/ (+ 1.0 (/ 1.0 eps)) (exp (* (- 1.0 eps) x))) (/ (/ 1.0 eps) (exp (* x (+ 1.0 eps))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.582559723460626,
    "avg_bits_err_output": 24.858394150565914,
    "avg_bits_err_improve": 4.724165572894712,
    "time": 19697.309326171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (if (!= (+ 2.0 (/ 2.0 (fma (/ 1.0 t) t t))) 0.0) (/ (- 4.0 (/ 4.0 (* (+ t (/ t t)) (+ t (/ t t))))) (+ 2.0 (/ 2.0 (fma (/ 1.0 t) t t)))) (- 2.0 (/ 2.0 (fma (/ 1.0 t) t t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 31,
    "avg_bits_err_input": 0.021875,
    "avg_bits_err_output": 0.022625,
    "avg_bits_err_improve": -0.0007500000000000007,
    "time": 8754.6884765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ 2.0 (+ 1.0 (/ 4.0 (/ 4.0 t))))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.025125,
    "avg_bits_err_output": 0.026073120312590146,
    "avg_bits_err_improve": -0.000948120312590145,
    "time": 13365.257080078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))) (+ 2.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.033375,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 0.02425,
    "time": 8314.68408203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 2974.342041015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6966.1513671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2829.264404296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.85217844556147,
    "avg_bits_err_output": 0.250625,
    "avg_bits_err_improve": 7.6015534455614695,
    "time": 32827.15625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.356420441774422,
    "avg_bits_err_output": 7.356420441774422,
    "avg_bits_err_improve": 0,
    "time": 13939.24169921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 16.065916226199413,
    "avg_bits_err_output": 16.065916226199413,
    "avg_bits_err_improve": 0,
    "time": 13951.04150390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (exp (* x (* x 10.0))) (cos x)) 0.0) (/ 1.0 (/ 1.0 (- (exp (* x (* x 10.0))) (- (expm1 (log1p (exp (* x (* x 10.0))))) (/ 1.0 (/ (exp (* (* x x) -10.0)) (cos x))))))) (* (exp (* x (* x 10.0))) (cos x)))",
    "output_parens": 30,
    "avg_bits_err_input": 3.545927065533903,
    "avg_bits_err_output": 3.5419347039686566,
    "avg_bits_err_improve": 0.003992361565246405,
    "time": 19045.239990234375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 15.232342327066089,
    "avg_bits_err_output": 15.232342327066089,
    "avg_bits_err_improve": 0,
    "time": 22713.0595703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.28054089694213,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.28054089694213,
    "time": 4655.084716796875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.16200663003109,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.16125663003109,
    "time": 4763.800537109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.252,
    "avg_bits_err_improve": 63.748,
    "time": 14587.947021484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84324714829695,
    "avg_bits_err_output": 0.38207312031259016,
    "avg_bits_err_improve": 61.46117402798436,
    "time": 8332.018798828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(- (/ (/ (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) -2.0) a) 0.0)",
    "output_parens": 9,
    "avg_bits_err_input": 34.44614432655109,
    "avg_bits_err_output": 34.45201058791806,
    "avg_bits_err_improve": -0.005866261366968217,
    "time": 22771.7705078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (- (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) (+ b b)) (* a 2.0))",
    "output_parens": 10,
    "avg_bits_err_input": 34.194225814587526,
    "avg_bits_err_output": 34.226887017665355,
    "avg_bits_err_improve": -0.03266120307782927,
    "time": 22686.7509765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2385.911865234375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.02494290489038,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 40.01456790489038,
    "time": 3431.47509765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(- (/ (* x x) (fma x x (* y y))) (/ (* y y) (fma x x (* y y))))",
    "output_parens": 9,
    "avg_bits_err_input": 20.003784732652008,
    "avg_bits_err_output": 20.00508544525335,
    "avg_bits_err_improve": -0.0013007126013420134,
    "time": 5481.21923828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.640094545805552,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.640094545805552,
    "time": 8783.492919921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03475,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.034375,
    "time": 8650.545166015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ a b)) (* a (+ a b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02429248125036058,
    "avg_bits_err_output": 0.01625,
    "avg_bits_err_improve": 0.00804248125036058,
    "time": 5093.91748046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0.013375,
    "time": 4996.4921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 1278.812744140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ e (+ d c)) (+ b a))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4062834593805893,
    "avg_bits_err_output": 0.309625,
    "avg_bits_err_improve": 0.09665845938058931,
    "time": 4536.9873046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (- 1.0 (cos x)) 0.0) (/ 1.0 (if (!= (+ 1.0 (/ 1.0 (- 1.0 (cos x)))) 0.0) (/ (+ (expm1 (log1p (* (+ 1.0 (/ 1.0 (- 1.0 (cos x)))) (+ 1.0 (/ 1.0 (- 1.0 (cos x))))))) (- -1.0 (/ 1.0 (- 1.0 (cos x))))) (+ 1.0 (/ 1.0 (- 1.0 (cos x))))) (/ 1.0 (- 1.0 (cos x))))) (- 1.0 (cos x)))",
    "output_parens": 37,
    "avg_bits_err_input": 29.794982550211905,
    "avg_bits_err_output": 29.794982669686192,
    "avg_bits_err_improve": -1.1947428646408298e-07,
    "time": 10492.550048828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (fma x x (- eps))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.974306063092257,
    "avg_bits_err_output": 0.29527124062518034,
    "avg_bits_err_improve": 24.679034822467077,
    "time": 11469.6650390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (- (tan x))) 0.0) (/ (if (!= (/ (fma (/ x (tan x)) (/ x -2.0) (* (sin x) (/ x (tan x)))) (tan x)) 0.0) (/ (fma (/ (fma (/ x (tan x)) (/ x -2.0) (* (sin x) (/ x (tan x)))) (tan x)) (/ (fma (/ x (tan x)) (/ x -2.0) (* (sin x) (/ x (tan x)))) (tan x)) (* (/ (/ x (tan x)) -2.0) (* (/ x (tan x)) (/ (fma (/ x (tan x)) (/ x -2.0) (* (sin x) (/ x (tan x)))) (tan x))))) (/ (fma (/ x (tan x)) (/ x -2.0) (* (sin x) (/ x (tan x)))) (tan x))) (fma (/ x (* (tan x) (tan x))) (sin x) (* (/ (/ x (tan x)) -2.0) (/ x (/ (tan x) 2.0))))) (/ x (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 87,
    "avg_bits_err_input": 29.917198975434502,
    "avg_bits_err_output": 30.02001673763035,
    "avg_bits_err_improve": -0.1028177621958477,
    "time": 34059.73193359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005448120312590145,
    "avg_bits_err_output": 0.005448120312590145,
    "avg_bits_err_improve": 0,
    "time": 1905.080078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (!= (/ 100.0 (/ i n)) 0.0) (/ (* -20000.0 (- 1.0 (pow (+ (/ i n) 1.0) n))) (- (/ (* i 200.0) n) 0.0)) (/ (fma (pow (+ (/ i n) 1.0) n) 100.0 -100.0) (/ i n))))",
    "output_parens": 34,
    "avg_bits_err_input": 47.42313709608519,
    "avg_bits_err_output": 13.998956993281283,
    "avg_bits_err_improve": 33.42418010280391,
    "time": 26191.636962890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(fma b (/ d (fma d d (* c c))) (* a (/ c (fma d d (* c c)))))",
    "output_parens": 8,
    "avg_bits_err_input": 26.400683635839055,
    "avg_bits_err_output": 23.058042848348673,
    "avg_bits_err_improve": 3.3426407874903816,
    "time": 14790.087890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 1e-130) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 25.865055488060655,
    "avg_bits_err_output": 22.43430507525623,
    "avg_bits_err_improve": 3.430750412804425,
    "time": 15727.070068359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- 1.0 ux) (* ux maxCos))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03575,
    "avg_bits_err_output": 0.03575,
    "avg_bits_err_improve": 0,
    "time": 7855.16552734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (- (exp (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))) 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.53660620613949,
    "avg_bits_err_output": 12.366242329270712,
    "avg_bits_err_improve": 1.1703638768687785,
    "time": 31956.546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (- (- ux (* ux ux)) (- ux)) 0.0) (/ (+ (fma (- ux (- (* ux ux) ux)) (+ ux ux) (* (* ux ux) (fma ux -2.0 (* ux ux)))) (* (- (- ux (* ux ux)) (- ux)) (- (* (* ux maxCos) (+ (fma ux maxCos (- 1.0 ux)) (- 1.0 ux)))))) (- (- ux (* ux ux)) (- ux))) (- 1.0 (fma (- 1.0 ux) (- 1.0 ux) (* (* ux maxCos) (+ (fma ux maxCos (- 1.0 ux)) (- 1.0 ux))))))))",
    "output_parens": 48,
    "avg_bits_err_input": 13.573655209608024,
    "avg_bits_err_output": 0.35869519231673175,
    "avg_bits_err_improve": 13.214960017291292,
    "time": 26850.7197265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (- 1.0 ux) (* ux maxCos)) zi))",
    "output_parens": 34,
    "avg_bits_err_input": 0.3487942396280732,
    "avg_bits_err_output": 0.34958847918968744,
    "avg_bits_err_improve": -0.0007942395616142295,
    "time": 43420.3447265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (+ (+ 1.0 (cos (atan (* (/ alphay alphax) (tan (fma 2.0 (* PI u1) (* PI 0.5))))))) -1.0) (+ (+ 1.0 (cos (atan (* (/ alphay alphax) (tan (fma 2.0 (* PI u1) (* PI 0.5))))))) -1.0)) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.19875731732960175,
    "avg_bits_err_output": 0.19990591533318847,
    "avg_bits_err_improve": -0.001148598003586715,
    "time": 43983.179931640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5274287772379858,
    "avg_bits_err_output": 0.5274287772379858,
    "avg_bits_err_improve": 0,
    "time": 21866.589599609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (- (/ (* u1 (/ 0.5 u1)) (* (- 1.0 u1) (/ 0.5 u1))) 0.0) (/ u1 (- 1.0 u1)))) (cos (* 6.28318530718 u2)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.3212644161665526,
    "avg_bits_err_output": 0.33985155609875767,
    "avg_bits_err_improve": -0.018587139932205066,
    "time": 19989.49169921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (* PI (/ 2.0 (+ s s)))))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.3398029990847761,
    "avg_bits_err_output": 0.34097048033513677,
    "avg_bits_err_improve": -0.0011674812503606469,
    "time": 57712.04248046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.055718613676711756,
    "avg_bits_err_output": 0.04193243549330766,
    "avg_bits_err_improve": 0.013786178183404094,
    "time": 9424.068359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (if (!= (exp (* (fabs x) (/ -0.5 s))) 0.0) (/ 1.0 (/ 1.0 (exp (/ (/ (- (/ (fabs x) s)) s) (/ 2.0 s))))) (exp (* (fabs x) (/ -0.5 s)))) (/ (exp (* (/ (fabs x) s) -0.5)) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.16732094247556387,
    "avg_bits_err_output": 0.1417159955229956,
    "avg_bits_err_improve": 0.025604946952568264,
    "time": 25818.24658203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (log1p (expm1 (* x PI)))) (* x PI)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6693614518190241,
    "avg_bits_err_output": 0.6762246203975766,
    "avg_bits_err_improve": -0.006863168578552514,
    "time": 22350.390869140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (if (!= (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 0.0) (/ 1.0 (/ 1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)))) (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.14976554748583387,
    "avg_bits_err_output": 0.15682802494550108,
    "avg_bits_err_improve": -0.007062477459667205,
    "time": 19824.150634765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.5517181718552395,
    "avg_bits_err_output": 2.5497890519293303,
    "avg_bits_err_improve": 0.0019291199259092728,
    "time": 32463.357666015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ cosTheta_i (* v (* (sinh (/ 1.0 v)) (exp (* sinTheta_i (/ sinTheta_O v)))))) (* (/ 0.5 v) (* v (/ (exp (* sinTheta_i (/ sinTheta_O v))) (* v (exp (* sinTheta_i (/ sinTheta_O v)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.46066836139509765,
    "avg_bits_err_output": 0.38684829984342195,
    "avg_bits_err_improve": 0.0738200615516757,
    "time": 29203.456787109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(fma (exp (* (* (log (/ 0.5 v)) 1.4427932477276006) 0.6931)) (exp (+ 0.6931 (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v))) 0.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.1147120518670971,
    "avg_bits_err_output": 0.11286785725319226,
    "avg_bits_err_improve": 0.001844194613904837,
    "time": 17280.842041015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (- 2.0 (* alpha (+ alpha alpha))) (- 2.0 (* alpha (+ alpha alpha)))) (- (* PI (* (* 4.0 (log (* alpha alpha))) (fma cosTheta (- (* alpha (* alpha cosTheta)) cosTheta) 1.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.45996173427410836,
    "avg_bits_err_output": 0.45906397143656974,
    "avg_bits_err_improve": 0.0008977628375386182,
    "time": 23369.648681640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- (fma u -1.3333333333333333 0.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 14,
    "avg_bits_err_input": 1.317276311743076,
    "avg_bits_err_output": 0.4322817687640634,
    "avg_bits_err_improve": 0.8849945429790125,
    "time": 27158.627685546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* 2.0 (* (log (/ 1.0 (fma u -4.0 1.0))) (/ s 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 12.682042951267007,
    "avg_bits_err_output": 12.685170234083696,
    "avg_bits_err_improve": -0.0031272828166883926,
    "time": 21465.943115234375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (* (/ r s) -0.3333333333333333))) (* (* (* 6.0 PI) s) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13378643935956866,
    "avg_bits_err_output": 0.14137652951367677,
    "avg_bits_err_improve": -0.007590090154108109,
    "time": 23226.7001953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9084112578988484,
    "avg_bits_err_output": 0.7231145568365862,
    "avg_bits_err_improve": 0.18529670106226215,
    "time": 28899.489501953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) (* cosTheta (exp (* cosTheta cosTheta))))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.678554291109187,
    "avg_bits_err_output": 0.4826771905187126,
    "avg_bits_err_improve": 0.19587710059047436,
    "time": 23392.332763671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(- (sin (* 2.0 (log (+ 1.0 (expm1 (* PI u2)))))) (- (sin (* 2.0 (if (!= (* PI u2) 0.0) (/ 1.0 (/ 1.0 (log (+ 1.0 (expm1 (* PI u2)))))) (* PI u2)))) (* (sqrt (- (log (- 1.0 u1)))) (sin (* 2.0 (* PI u2))))))",
    "output_parens": 28,
    "avg_bits_err_input": 13.461463227361117,
    "avg_bits_err_output": 13.457942545905933,
    "avg_bits_err_improve": 0.003520681455183805,
    "time": 25495.63037109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(log (exp (* (sqrt (- (log (- 1.0 u1)))) (cos (* PI (* u2 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.50769491823571,
    "avg_bits_err_output": 13.545875906073158,
    "avg_bits_err_improve": -0.038180987837447944,
    "time": 26192.719970703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(if (!= (- (log (- 1.0 u0))) 0.0) (* (* (log (- 1.0 u0)) (- (log (- 1.0 u0)))) (/ (* alpha (- alpha)) (- (log (- 1.0 u0))))) (* (log (- 1.0 u0)) (* alpha (- alpha))))",
    "output_parens": 23,
    "avg_bits_err_input": 14.041905495798238,
    "avg_bits_err_output": 14.047651354390785,
    "avg_bits_err_improve": -0.005745858592547393,
    "time": 17623.793212890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (if (!= (/ cos2phi (* alphax alphax)) 0.0) (* (/ cos2phi alphax) (/ cos2phi (* cos2phi alphax))) (/ cos2phi (* alphax alphax))) (/ sin2phi (* alphay alphay))))",
    "output_parens": 17,
    "avg_bits_err_input": 12.349824006685278,
    "avg_bits_err_output": 12.351587694499715,
    "avg_bits_err_improve": -0.0017636878144369206,
    "time": 17523.220458984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -5e+159) (- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (/ (/ 1.0 l) (* (* l PI) (/ l (* l l))))) (* PI l))) F) F)) (if (<= (* PI l) -5e+20) (- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (/ (- (/ 1.0 (* l (* PI (* PI l))))) (- (exp (log1p (/ (/ -1.0 PI) l))) 1.0))) (* PI l))) F) F)) (if (<= (* PI l) 4e-21) (- (* PI l) (* (/ (tan (* PI l)) F) (/ 1.0 F))) (if (<= (* PI l) 2e+123) (- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (/ (- (/ 1.0 (* l (* PI (* PI l))))) (- (exp (log1p (/ (/ -1.0 PI) l))) 1.0))) (* PI l))) F) F)) (- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (/ (/ 1.0 l) (* (* l PI) (/ l (* l l))))) (* PI l))) F) F))))))",
    "output_parens": 93,
    "avg_bits_err_input": 17.053863350340244,
    "avg_bits_err_output": 2.552667645912835,
    "avg_bits_err_improve": 14.50119570442741,
    "time": 30858.957763671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ x (tan B)) (- (/ -1.0 (sin B)) (* (/ x (tan B)) -2.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.217504167120048,
    "avg_bits_err_output": 0.1943060468074578,
    "avg_bits_err_improve": 0.023198120312590192,
    "time": 13511.283935546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (* (/ (pow (fma 2.0 x (fma F F 2.0)) -0.5) (sin B)) F))",
    "output_parens": 10,
    "avg_bits_err_input": 14.088389699750529,
    "avg_bits_err_output": 10.789965073266458,
    "avg_bits_err_improve": 3.2984246264840706,
    "time": 19336.060302734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (+ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) 1.0) 1.0) (* PI -0.25))",
    "output_parens": 34,
    "avg_bits_err_input": 61.656665015601824,
    "avg_bits_err_output": 1.8357167313016662,
    "avg_bits_err_improve": 59.82094828430016,
    "time": 39308.558837890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= (* l l) 2e+300) (/ (* (sqrt 2.0) t) (sqrt (if (!= (* l (- l)) 0.0) (+ (+ (* l (- l)) (* (/ (+ x 1.0) (+ x -1.0)) (* l l))) (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t)))) (fma (/ (+ x 1.0) (+ x -1.0)) (fma l l (* 2.0 (* t t))) (* l (- l)))))) (* t (/ (sqrt 2.0) (sqrt (- (fma l l (/ (* (fma t (* t 2.0) (* l l)) (fma x -2.0 -2.0)) (+ x (+ x -2.0)))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 43.0332305403977,
    "avg_bits_err_output": 36.50881968691495,
    "avg_bits_err_improve": 6.524410853482756,
    "time": 25152.026611328125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (expm1 (log1p (pow (sin kx) 2.0))) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 12,
    "avg_bits_err_input": 3.822046058506583,
    "avg_bits_err_output": 3.8377114725731407,
    "avg_bits_err_improve": -0.015665414066557748,
    "time": 25126.43896484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 1.0909239778258346,
    "avg_bits_err_output": 1.0909239778258346,
    "avg_bits_err_improve": 0,
    "time": 10000.9951171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.250903229399619,
    "avg_bits_err_output": 10.250903229399619,
    "avg_bits_err_improve": 0,
    "time": 12608.896240234375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 1e-151) (if (!= (sqrt (* U (* (* 2.0 n) (- t (fma 2.0 (* l (/ l Om)) (* (pow (/ l Om) 2.0) (* n (- U U*)))))))) 0.0) (/ (* (sqrt (* U (* (* 2.0 n) (- t (fma 2.0 (* l (/ l Om)) (* (pow (/ l Om) 2.0) (* n (- U U*)))))))) (sqrt (* U (* (* 2.0 n) (- t (fma 2.0 (* l (/ l Om)) (* (pow (/ l Om) 2.0) (* n (- U U*))))))))) (sqrt (* U (* (* 2.0 n) (- t (fma 2.0 (* l (/ l Om)) (* (pow (/ l Om) 2.0) (* n (- U U*))))))))) (sqrt (* U (* (* 2.0 n) (- t (fma 2.0 (* l (/ l Om)) (* (pow (/ l Om) 2.0) (* n (- U U*))))))))) (if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 2e+145) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (- (/ (* (pow (/ l Om) 2.0) (* (* n -2.0) (* (- U U*) (* n U)))) 1.0) (fma -2.0 (* U (* n t)) (* (* l (* (/ l Om) (* n U))) 4.0))))))",
    "output_parens": 134,
    "avg_bits_err_input": 34.73260626226498,
    "avg_bits_err_output": 28.516279616521913,
    "avg_bits_err_improve": 6.216326645743067,
    "time": 43204.530517578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -4e-108) (/ (/ (/ (/ 2.0 (/ (pow t 3.0) l)) (pow (/ k t) 2.0)) (/ (sin k) l)) (tan k)) (if (<= t 1.9e-93) (/ 2.0 (* (/ (tan k) l) (* (/ (sin k) l) (exp (fma 3.0 (log t) (* 2.0 (log (/ k t)))))))) (if (<= t 3.2e+114) (/ (/ 2.0 (/ (tan k) l)) (* (* (pow (/ k t) 2.0) (sin k)) (/ (pow t 3.0) l))) (if (<= t 3.2e+234) (/ 2.0 (* (/ (tan k) l) (* (/ (sin k) l) (exp (fma 3.0 (log t) (* 2.0 (log (/ k t)))))))) (/ 2.0 (* (/ (tan k) l) (* (/ (sin k) l) (* (pow t 3.0) (pow (/ k t) 2.0)))))))))",
    "output_parens": 67,
    "avg_bits_err_input": 47.42179906374774,
    "avg_bits_err_output": 34.654526099104615,
    "avg_bits_err_improve": 12.767272964643126,
    "time": 42657.28076171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* (tan k) (* (+ 2.0 (pow (/ k t) 2.0)) (* (pow t 3.0) (/ (sin k) l)))) l))",
    "output_parens": 12,
    "avg_bits_err_input": 32.4004713729434,
    "avg_bits_err_output": 27.334216711455248,
    "avg_bits_err_improve": 5.066254661488152,
    "time": 22668.173583984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (fma a2 (/ a2 (sqrt 2.0)) (/ (* a1 a1) (sqrt 2.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5111644765845871,
    "avg_bits_err_output": 0.45819473907953817,
    "avg_bits_err_improve": 0.05296973750504891,
    "time": 25376.057373046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(+ (/ (pow (* PI (* n 2.0)) (fma k -0.5 0.5)) (* 4.0 (sqrt k))) (* (pow (* PI (* n 2.0)) (fma k -0.5 0.5)) (/ 0.75 (sqrt k))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.4632588704756291,
    "avg_bits_err_output": 0.4354673607719888,
    "avg_bits_err_improve": 0.027791509703640305,
    "time": 24276.1533203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (if (!= (fma (exp l) (exp l) (exp (fma l -1.0 l))) 0.0) (/ (if (!= (+ (exp (+ l (+ l (+ l l)))) (exp (fma l -1.0 l))) 0.0) (/ (* (expm1 (+ (+ l l) (+ l l))) (+ (exp (+ (+ l l) (+ l l))) 1.0)) (+ (exp (+ l (+ l (+ l l)))) (exp (fma l -1.0 l)))) (- (exp (+ l (+ l (+ l l)))) (exp (fma l -1.0 l)))) (fma (exp l) (exp l) (exp (fma l -1.0 l)))) (- (exp (+ l l)) (exp (fma l -1.0 l)))) (exp l))) (cos (/ K 2.0))) U)",
    "output_parens": 59,
    "avg_bits_err_input": 17.31387788804528,
    "avg_bits_err_output": 0.1701629703154747,
    "avg_bits_err_improve": 17.143714917729806,
    "time": 33960.944580078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= K -1.5e+78) (* (cos (- (/ (if (!= (* K m) 0.0) (* K (* K (* (+ m n) (/ m (* K m))))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (if (<= K 2e-20) (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K m) 0.0) (* K (* K (* (+ m n) (/ m (* K m))))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))))",
    "output_parens": 70,
    "avg_bits_err_input": 15.628191190906573,
    "avg_bits_err_output": 7.547516538501826,
    "avg_bits_err_improve": 8.080674652404747,
    "time": 24641.957275390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* -2.0 J) (* (cos (/ K 2.0)) (sqrt (+ 1.0 (pow (/ (/ U (+ J J)) (cos (/ K 2.0))) 2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.778667481250363,
    "avg_bits_err_output": 17.782804323438494,
    "avg_bits_err_improve": -0.004136842188131595,
    "time": 14162.794677734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 2e-147) (* w0 (sqrt (- 1.0 (* (/ (pow (* D (/ (/ M 2.0) d)) 2.0) l) h)))) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))))",
    "output_parens": 24,
    "avg_bits_err_input": 14.522832118794017,
    "avg_bits_err_output": 10.741518630493546,
    "avg_bits_err_improve": 3.781313488300471,
    "time": 21707.679443359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* c0 (sqrt (/ A (* V l)))) -4e-204) (* c0 (sqrt (+ (/ (- A (/ A -2.0)) (* V (+ l l))) (/ (/ A (* l V)) 4.0)))) (if (<= (* c0 (sqrt (/ A (* V l)))) 2e-247) (* (sqrt (/ (+ (/ A (+ l l)) (/ (- A (/ A -2.0)) l)) (+ V V))) c0) (* c0 (sqrt (+ (/ (- A (/ A -2.0)) (* V (+ l l))) (/ (/ A (* l V)) 4.0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 19.03724219765438,
    "avg_bits_err_output": 17.067986507223324,
    "avg_bits_err_improve": 1.969255690431055,
    "time": 18493.8037109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* d d) 1e-128) (* (/ c0 (* 2.0 w)) (+ (* c0 (/ (* d (/ (/ d D) (* w h))) D)) (sqrt (* (fma c0 (/ (* d (/ (/ d D) (* w h))) D) M) (- (* c0 (/ (* d (/ (/ d D) (* w h))) D)) M))))) (if (<= (* d d) 2e+238) (* (/ c0 (* 2.0 w)) (+ (* c0 (* d (/ (/ d (* w D)) (* D h)))) (sqrt (* (fma (/ (/ d (* w D)) (* D h)) (* c0 d) M) (fma c0 (* d (/ (/ d (* w D)) (* D h))) (- M)))))) (* (/ c0 (* 2.0 w)) (fma d (* c0 (/ (/ d (* (* w h) D)) D)) (sqrt (* (fma d (* c0 (/ (/ d (* (* w h) D)) D)) M) (- (* d (* c0 (/ (/ d (* (* w h) D)) D))) M)))))))",
    "output_parens": 80,
    "avg_bits_err_input": 59.62991978504072,
    "avg_bits_err_output": 53.93991800666313,
    "avg_bits_err_improve": 5.690001778377592,
    "time": 44375.999267578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= h -1.45e+115) (* (sqrt (/ d l)) (- (sqrt (/ d h)) (* (/ (pow (* D (/ M (* 2.0 d))) 2.0) l) (* (* 0.5 h) (sqrt (/ d h)))))) (if (<= h 4.4e+204) (fma (sqrt (/ d h)) (sqrt (/ d l)) (/ (* (pow (* M (/ D (* d 2.0))) 2.0) (* (* h (* 0.5 (sqrt (/ d l)))) (- (sqrt (/ d h))))) l)) (* (sqrt (/ d l)) (- (sqrt (/ d h)) (* (/ (pow (* D (/ M (* 2.0 d))) 2.0) l) (* (* 0.5 h) (sqrt (/ d h))))))))",
    "output_parens": 55,
    "avg_bits_err_input": 26.625379458411643,
    "avg_bits_err_output": 25.354510825801377,
    "avg_bits_err_improve": 1.2708686326102665,
    "time": 42848.861328125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (- (/ -0.5 (hypot 1.0 x)) 0.5) 0.0) (/ (- 0.25 (/ (/ 0.25 (hypot 1.0 x)) (hypot 1.0 x))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 15.827180933665998,
    "avg_bits_err_output": 15.338401543135577,
    "avg_bits_err_improve": 0.4887793905304214,
    "time": 11540.222900390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9823231203125902,
    "avg_bits_err_output": 0.013073120312590145,
    "avg_bits_err_improve": 0.9692500000000001,
    "time": 2670.283935546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (+ 2.0 (* (* v v) -6.0)))) (* t (- 1.0 (* v v)))) (/ (* (/ 5.0 (* PI (* t (- 1.0 (* v v))))) (* v v)) (sqrt (+ 2.0 (* (* v v) -6.0)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.46706241769983164,
    "avg_bits_err_output": 0.12189584436669952,
    "avg_bits_err_improve": 0.3451665733331321,
    "time": 16662.02685546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012896240625180291,
    "avg_bits_err_output": 0.012896240625180291,
    "avg_bits_err_improve": 0,
    "time": 2893.3818359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5246140864383407,
    "avg_bits_err_output": 0.5246140864383407,
    "avg_bits_err_improve": 0,
    "time": 11629.82421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (+ (/ (pow k m) (* (fma k (+ k 10.0) 1.0) 4.0)) (/ (+ (pow k m) (* (pow k m) 2.0)) (* (* (fma k (+ k 10.0) 1.0) 2.0) 2.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 2.1306996052535694,
    "avg_bits_err_output": 2.110386116677201,
    "avg_bits_err_improve": 0.0203134885763685,
    "time": 16065.31005859375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ (exp (/ (+ mu (- Vef (- Ec EDonor))) KbT)) 1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02299749334274228,
    "avg_bits_err_output": 0.02299749334274228,
    "avg_bits_err_improve": 0,
    "time": 9874.518798828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (pow (fma a a (* b b)) 2.0) (- 1.0 (* b (* b 4.0))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.18560825061850234,
    "avg_bits_err_output": 0.18781576936814176,
    "avg_bits_err_improve": -0.0022075187496394255,
    "time": 16923.66015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (if (!= (* (fma a 3.0 -1.0) (* (* b b) -4.0)) 0.0) (* (* (* b -4.0) (/ b (* b (* b -4.0)))) (fma (fma a 3.0 -1.0) (* b (* b -4.0)) (fma (* a (fma a a a)) 4.0 (pow (fma a a (* b b)) 2.0)))) (fma 4.0 (fma a (fma a a a) (* b (- b (* a (* b 3.0))))) (pow (fma a a (* b b)) 2.0))) 1.0)",
    "output_parens": 33,
    "avg_bits_err_input": 0.1839420758309814,
    "avg_bits_err_output": 0.30378908339889904,
    "avg_bits_err_improve": -0.11984700756791763,
    "time": 28582.30908203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (+ (* b (* b a)) (* b (* b 3.0)))))) 1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 0.1864564212650287,
    "avg_bits_err_output": 0.18652954157761886,
    "avg_bits_err_improve": -7.312031259015805e-05,
    "time": 28221.507568359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (+ (/ x (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0)) (/ (+ x (+ x x)) (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.228236724088283,
    "avg_bits_err_output": 13.40397663747468,
    "avg_bits_err_improve": -0.17573991338639594,
    "time": 17664.693603515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ -2.0 (+ 2.0 (/ (expm1 (* 2.0 x)) (expm1 x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 41.60856231977707,
    "avg_bits_err_output": 0.06969812031259014,
    "avg_bits_err_improve": 41.538864199464484,
    "time": 14445.6552734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (tan x)))",
    "output_parens": 5,
    "avg_bits_err_input": 31.193350173374697,
    "avg_bits_err_output": 31.193350173374697,
    "avg_bits_err_improve": 0,
    "time": 16336.7265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) (+ b_2 b_2)) a)",
    "output_parens": 8,
    "avg_bits_err_input": 34.538466372829376,
    "avg_bits_err_output": 34.55063166368171,
    "avg_bits_err_improve": -0.012165290852337307,
    "time": 15463.932861328125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (fma b_2 b_2 (* a (- c))))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.359671427520006,
    "avg_bits_err_output": 34.358684847038035,
    "avg_bits_err_improve": 0.0009865804819710888,
    "time": 16760.871826171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.863183204671362,
    "avg_bits_err_output": 31.041861344422422,
    "avg_bits_err_improve": 0.8213218602489398,
    "time": 16656.366455078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (if (!= (+ (exp (/ (log x) n)) 1.0) 0.0) (/ (expm1 (/ (+ (log x) (log x)) n)) (+ (exp (/ (log x) n)) 1.0)) (expm1 (/ (log x) n))))",
    "output_parens": 23,
    "avg_bits_err_input": 32.715736835205774,
    "avg_bits_err_output": 11.132842340780172,
    "avg_bits_err_improve": 21.582894494425602,
    "time": 30832.40576171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (expm1 (- (log1p N) (log N)))))",
    "output_parens": 6,
    "avg_bits_err_input": 28.931379202585735,
    "avg_bits_err_output": 28.932099773476033,
    "avg_bits_err_improve": -0.0007205708902979779,
    "time": 12803.15625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (/ (+ -1.0 (/ (+ x x) (+ x 1.0))) (+ x x)) (/ -1.0 (+ x x)))",
    "output_parens": 9,
    "avg_bits_err_input": 14.697968263542883,
    "avg_bits_err_output": 14.724072275936434,
    "avg_bits_err_improve": -0.0261040123935512,
    "time": 14759.385498046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (if (!= (+ (cos x) -1.0) 0.0) (/ (- (* (+ (cos x) -1.0) (cos (+ x eps))) (* (+ (cos x) -1.0) (+ (cos x) -1.0))) (+ (cos x) -1.0)) (+ (- (cos (+ x eps)) (cos x)) 1.0)) 1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 39.53909484960069,
    "avg_bits_err_output": 39.55019390713664,
    "avg_bits_err_improve": -0.011099057535950863,
    "time": 20278.9052734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (!= (- (cbrt x) (- (cbrt (+ 1.0 x)))) 0.0) (/ (- (exp (log1p (- (* (cbrt (+ 1.0 x)) (cbrt (+ 1.0 x))) (* (cbrt x) (cbrt x))))) (+ (fma (- (cbrt x)) (cbrt x) (* (cbrt x) (cbrt x))) 1.0)) (- (cbrt x) (- (cbrt (+ 1.0 x))))) (- (cbrt (+ 1.0 x)) (cbrt x)))",
    "output_parens": 37,
    "avg_bits_err_input": 29.693757557383183,
    "avg_bits_err_output": 29.898522186971626,
    "avg_bits_err_improve": -0.20476462958844266,
    "time": 13427.84765625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 29.664429132167218,
    "avg_bits_err_output": 29.664429132167218,
    "avg_bits_err_improve": 0,
    "time": 23456.70947265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (sqrt (+ (* b b) (* a (* c -4.0)))) (+ (sqrt (+ (* b b) (* a (* c -4.0)))) (* b -2.0))) (* a 4.0))",
    "output_parens": 15,
    "avg_bits_err_input": 33.96952294757647,
    "avg_bits_err_output": 33.97255894788129,
    "avg_bits_err_improve": -0.003036000304817321,
    "time": 22387.794189453125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a -4.0)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.07549345058352,
    "avg_bits_err_output": 21.730702645287177,
    "avg_bits_err_improve": 12.344790805296345,
    "time": 25183.850830078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (+ (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ -1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.2319294488308,
    "avg_bits_err_output": 0.8922644188875606,
    "avg_bits_err_improve": 60.339665029943234,
    "time": 26641.772705078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))) 0.0) (- (* (fma n (- (log1p n) (log n)) (log1p n)) (/ (exp (log (fma n (- (log1p n) (log n)) (log1p n)))) (- -1.0 (fma n (- (log1p n) (log n)) (log1p n)))))) (+ (fma n (- (log1p n) (log n)) (log1p n)) -1.0))",
    "output_parens": 35,
    "avg_bits_err_input": 63.01122761611562,
    "avg_bits_err_output": 44.22874164900236,
    "avg_bits_err_improve": 18.78248596711326,
    "time": 19188.458740234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.61476200552469,
    "avg_bits_err_output": 58.57599041148406,
    "avg_bits_err_improve": 0.03877159404063235,
    "time": 17120.810791015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(if (!= (+ (/ 0.5 x) (/ -0.5 (tan x))) 0.0) (* (+ (/ 0.5 x) (/ -0.5 (tan x))) (/ (+ (/ 0.5 x) (/ -0.5 (tan x))) (/ (if (!= (- (/ (/ 2.0 (tan x)) (/ -4.0 x)) 0.5) 0.0) (/ (+ (/ 4.0 (* (* (tan x) (/ -4.0 x)) (* (tan x) (/ -4.0 x)))) -0.25) (- (/ (/ 2.0 (tan x)) (/ -4.0 x)) 0.5)) (+ (/ (/ 2.0 (tan x)) (/ -4.0 x)) 0.5)) (+ x x)))) (+ (/ 1.0 x) (/ -1.0 (tan x))))",
    "output_parens": 49,
    "avg_bits_err_input": 59.8891276216965,
    "avg_bits_err_output": 59.85749778829496,
    "avg_bits_err_improve": 0.03162983340154568,
    "time": 29916.9765625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.466944364512365,
    "avg_bits_err_output": 29.96132041562214,
    "avg_bits_err_improve": 30.505623948890225,
    "time": 27569.13671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (/ (/ (exp x) (expm1 x)) (/ 1.0 (expm1 x))) (expm1 x))",
    "output_parens": 8,
    "avg_bits_err_input": 41.968656923695356,
    "avg_bits_err_output": 0.5263680453140326,
    "avg_bits_err_improve": 41.442288878381326,
    "time": 8254.957275390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.45593533040235,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.455435330402345,
    "time": 2804.259033203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.140522535259453,
    "avg_bits_err_output": 0.014320968774394887,
    "avg_bits_err_improve": 29.126201566485058,
    "time": 4620.179931640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (exp x) (- (- (* (exp x) 2.0) 1.0))) (exp x))",
    "output_parens": 9,
    "avg_bits_err_input": 29.22318893748671,
    "avg_bits_err_output": 28.34879187348234,
    "avg_bits_err_improve": 0.8743970640043699,
    "time": 23141.29833984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (* (/ (/ 2.0 (+ 1.0 x)) (/ 4.0 x)) (/ 2.0 x)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 10.087273144814745,
    "avg_bits_err_output": 10.08754741386199,
    "avg_bits_err_improve": -0.00027426904724592305,
    "time": 27684.0859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (- (/ (sin x) (+ (if (!= (cos x) 0.0) (/ 1.0 (/ 1.0 (cos x))) (cos x)) (cos x))) (/ (tan (+ x eps)) 2.0)) -2.0)",
    "output_parens": 16,
    "avg_bits_err_input": 37.007013946764296,
    "avg_bits_err_output": 36.98371233781911,
    "avg_bits_err_improve": 0.0233016089451894,
    "time": 21840.519287109375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.700997026746272,
    "avg_bits_err_output": 0.16418176718957328,
    "avg_bits_err_improve": 29.5368152595567,
    "time": 11908.80322265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (expm1 (log1p (sin (+ x eps)))) (sin x))",
    "output_parens": 6,
    "avg_bits_err_input": 37.16570685385567,
    "avg_bits_err_output": 37.20982014866593,
    "avg_bits_err_improve": -0.04411329481026627,
    "time": 20588.20947265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (- 1.0 (/ (sqrt x) (sqrt (+ 1.0 x)))) (sqrt x))",
    "output_parens": 7,
    "avg_bits_err_input": 19.874430557313985,
    "avg_bits_err_output": 19.8569376503347,
    "avg_bits_err_improve": 0.017492906979285294,
    "time": 16329.740478515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (fma (atan (- N -1.0)) (/ (atan (- N -1.0)) (+ (atan (- N -1.0)) (atan N))) (* (atan N) (log1p (expm1 (/ (atan N) (- (- (atan N)) (atan (+ N 1.0)))))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 31,
    "avg_bits_err_input": 15.409385879312945,
    "avg_bits_err_output": 15.41354264834373,
    "avg_bits_err_improve": -0.004156769030785767,
    "time": 12484.96044921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.50234736225663,
    "avg_bits_err_output": 1.4976939463424883,
    "avg_bits_err_improve": 28.00465341591414,
    "time": 24662.056396484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07098120312590143,
    "avg_bits_err_output": 0.07098120312590143,
    "avg_bits_err_improve": 0,
    "time": 9657.551513671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (* (- b) a))",
    "output_parens": 4,
    "avg_bits_err_input": 16.360975021658504,
    "avg_bits_err_output": 0.30055225625468746,
    "avg_bits_err_improve": 16.060422765403818,
    "time": 10444.796142578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (if (!= (pow (* (sin (* PI (/ angle 180.0))) b) 2.0) 0.0) (/ 1.0 (/ 1.0 (pow (* (sin (* PI (/ angle 180.0))) b) 2.0))) (pow (* (sin (* PI (/ angle 180.0))) b) 2.0)))",
    "output_parens": 25,
    "avg_bits_err_input": 20.387664189979713,
    "avg_bits_err_output": 20.44855443546065,
    "avg_bits_err_improve": -0.060890245480937466,
    "time": 38550.38671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(- (* 2.0 (* (- (pow b 2.0) (pow a 2.0)) (* (log1p (expm1 (sin (* PI (/ angle 180.0))))) (+ 1.0 (cos (* PI (/ angle 180.0))))))) (* 2.0 (* (- (pow b 2.0) (pow a 2.0)) (sin (* PI (/ angle 180.0))))))",
    "output_parens": 24,
    "avg_bits_err_input": 31.456932807889103,
    "avg_bits_err_output": 31.43038373229659,
    "avg_bits_err_improve": 0.02654907559251285,
    "time": 46598.6796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (* angle PI) 0.005555555555555556))) 2.0) (pow (* b (cos (* PI (* angle 0.005555555555555556)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.077501069464418,
    "avg_bits_err_output": 20.082478043862817,
    "avg_bits_err_improve": -0.004976974398399392,
    "time": 44515.367919921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17320996250072115,
    "avg_bits_err_output": 0.16566748125036057,
    "avg_bits_err_improve": 0.007542481250360583,
    "time": 15118.80517578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.32397650950092693,
    "avg_bits_err_output": 0.3147396380865067,
    "avg_bits_err_improve": 0.009236871414420256,
    "time": 18641.74951171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (+ (/ (+ 1.0 (* (* e (cos v)) 2.0)) 2.0) -0.5)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.13916748125036058,
    "avg_bits_err_output": 0.14132556406367186,
    "avg_bits_err_improve": -0.002158082813311285,
    "time": 18409.970703125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (expm1 (log1p (* (sin phi1) (sin phi2)))) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 14,
    "avg_bits_err_input": 16.9079449299305,
    "avg_bits_err_output": 16.915599792994147,
    "avg_bits_err_improve": -0.007654863063645934,
    "time": 33321.2724609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* -4.0 (* a c)))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.931795447052565,
    "avg_bits_err_output": 0.16793441445323706,
    "avg_bits_err_improve": 52.76386103259933,
    "time": 20836.006103515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* -4.0 (* (/ c (+ b (sqrt (fma -4.0 (* a c) (* b b))))) a)) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.60219856016556,
    "avg_bits_err_output": 0.34318252032412877,
    "avg_bits_err_improve": 28.259016039841434,
    "time": 21667.3857421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0)))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (+ (* b b) (* a (* c -4.0)))))) a) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 44.26002592204503,
    "avg_bits_err_output": 0.24016110664425236,
    "avg_bits_err_improve": 44.01986481540078,
    "time": 22683.10791015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (sqrt (+ (* b b) (* a (* c -4.0)))) (+ (sqrt (+ (* b b) (* a (* c -4.0)))) (* b -2.0))) (* a 4.0))",
    "output_parens": 15,
    "avg_bits_err_input": 33.96409567475518,
    "avg_bits_err_output": 33.97255894788129,
    "avg_bits_err_improve": -0.008463273126110948,
    "time": 23674.931396484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (* (cos phi1) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1))) (cos phi1)) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.8975531091494992,
    "avg_bits_err_output": 0.8981351940633159,
    "avg_bits_err_improve": -0.0005820849138167272,
    "time": 33864.501220703125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0)))) 0.0) (/ (- 1.0 (/ (/ 16.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))) (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0)))) (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))) (- 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 60,
    "avg_bits_err_input": 29.275680607362645,
    "avg_bits_err_output": 29.239395557776604,
    "avg_bits_err_improve": 0.036285049586041396,
    "time": 27433.0908203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= (/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x)))) 0.05) (if (!= (/ (exp (* x -2.0)) (* (+ (exp x) (exp (- x))) (+ (exp x) (exp (- x))))) 0.0) (- (/ (/ (/ (/ (expm1 (* x -4.0)) (+ (exp x) (exp (- x)))) (+ (exp x) (exp (- x)))) (- (+ (exp x) (exp (- x))))) (/ (exp (* x -2.0)) (+ (exp x) (exp (- x))))) 0.0) (/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))) (/ (- (exp (fma x -1.0 x)) (exp (* x -2.0))) (+ (exp (fma x -1.0 x)) (exp (* x -2.0)))))",
    "output_parens": 72,
    "avg_bits_err_input": 58.096357746333474,
    "avg_bits_err_output": 0.7140191734413768,
    "avg_bits_err_improve": 57.382338572892095,
    "time": 22494.9580078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 57.96805335612618,
    "avg_bits_err_output": 0.05757312031259014,
    "avg_bits_err_improve": 57.91048023581359,
    "time": 7820.985107421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.010417481250360577,
    "avg_bits_err_output": 0.010417481250360577,
    "avg_bits_err_improve": 0,
    "time": 4793.771484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.698094360937773,
    "avg_bits_err_output": 31.698094360937773,
    "avg_bits_err_improve": 0,
    "time": 4751.79296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (if (!= (/ (* x x) (* (+ x -1.0) (+ x -1.0))) 0.0) (- (- (/ (* x (/ x (* x x))) (* (+ x -1.0) (+ x -1.0))) 0.0) (/ 1.0 (/ 1.0 (/ (* x x) (* (+ x -1.0) (+ x -1.0)))))) (/ (fma x x -1.0) (* (+ x -1.0) (- 1.0 x))))))",
    "output_parens": 30,
    "avg_bits_err_input": 58.610680513426786,
    "avg_bits_err_output": 58.61517242788461,
    "avg_bits_err_improve": -0.004491914457823043,
    "time": 17740.73681640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0105,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0.0002500000000000002,
    "time": 2706.927734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.124,
    "avg_bits_err_output": 0.124,
    "avg_bits_err_improve": 0,
    "time": 19881.75439453125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1261462406251803,
    "avg_bits_err_output": 0.1261462406251803,
    "avg_bits_err_improve": 0,
    "time": 13278.194091796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.29166150430416,
    "avg_bits_err_output": 3.735432900672037,
    "avg_bits_err_improve": 35.55622860363212,
    "time": 25980.9541015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.241415957400738,
    "avg_bits_err_output": 14.241415957400738,
    "avg_bits_err_improve": 0,
    "time": 3143.8525390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (log1p (expm1 (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.15151540977261335,
    "avg_bits_err_output": 0.1561688895560276,
    "avg_bits_err_improve": -0.004653479783414238,
    "time": 50265.4228515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.923375528437695,
    "avg_bits_err_output": 0.16814417344137605,
    "avg_bits_err_improve": 52.75523135499632,
    "time": 22512.020751953125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* -3.0 (* c a)))) (- b)) 0.0) (* (* a 6.0) (/ c (- (- b) (+ (sqrt (fma -3.0 (* c a) (* b b))) (+ b (sqrt (fma -3.0 (* c a) (* b b)))))))) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 31,
    "avg_bits_err_input": 28.7157085658012,
    "avg_bits_err_output": 0.3642294928181725,
    "avg_bits_err_improve": 28.35147907298303,
    "time": 29472.749267578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 44.29182590516657,
    "avg_bits_err_output": 0.23388986601907222,
    "avg_bits_err_improve": 44.0579360391475,
    "time": 29649.565185546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (- (sqrt (fma b b (* c (* a -3.0)))) b) 3.0) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.013940608330714,
    "avg_bits_err_output": 34.02953467856071,
    "avg_bits_err_improve": -0.015594070229994372,
    "time": 18768.099365234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.473314311980436,
    "avg_bits_err_output": 13.473314311980436,
    "avg_bits_err_improve": 0,
    "time": 34166.6640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 28.91820384602095,
    "avg_bits_err_output": 0.5215365739310077,
    "avg_bits_err_improve": 28.396667272089942,
    "time": 20215.7783203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (+ (/ 1.0 (+ x -1.0)) (/ x (+ 2.0 (+ x x)))) (/ x (+ 2.0 (+ x x))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.011,
    "avg_bits_err_output": 0.027999503815187884,
    "avg_bits_err_improve": -0.016999503815187885,
    "time": 4465.021484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (if (!= (/ x (+ x -1.0)) 0.0) (/ (- x (* x (/ x (+ x -1.0)))) x) (- 1.0 (/ x (+ x -1.0)))) (- (/ 1.0 (+ x -1.0)))) (+ 1.0 x))",
    "output_parens": 18,
    "avg_bits_err_input": 14.696180249082623,
    "avg_bits_err_output": 12.521998897536331,
    "avg_bits_err_improve": 2.1741813515462916,
    "time": 18685.373291015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C)) (* (fma (+ (pow B 2.0) (* (* A C) -4.0)) F (fma (* (* A C) -4.0) F (* A (* F (* C 4.0))))) -2.0))) (- (- (pow B 2.0) (* A (* 4.0 C)))))",
    "output_parens": 28,
    "avg_bits_err_input": 52.2410603264072,
    "avg_bits_err_output": 52.180020970507606,
    "avg_bits_err_improve": 0.061039355899595193,
    "time": 37737.93408203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -9.5e+159) 0.0 (* (atan (* (- (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI)))",
    "output_parens": 14,
    "avg_bits_err_input": 29.474804534991712,
    "avg_bits_err_output": 27.390834406657177,
    "avg_bits_err_improve": 2.083970128334535,
    "time": 27331.9638671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (* 2.0 (sqrt (* (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (* 2.0 (* (- (pow B 2.0) (* C (* A 4.0))) F))))) (- (- (* C (* A 8.0)) (pow B 2.0)) (pow B 2.0)))",
    "output_parens": 23,
    "avg_bits_err_input": 52.72704333584218,
    "avg_bits_err_output": 52.40425813770859,
    "avg_bits_err_improve": 0.3227851981335945,
    "time": 36698.9228515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (/ (* (+ (cbrt (/ g (+ a a))) 2.0) (cbrt (/ g (+ a a)))) (+ (cbrt (/ g (+ a a))) 2.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 22,
    "avg_bits_err_input": 15.773959931546122,
    "avg_bits_err_output": 15.782498105374184,
    "avg_bits_err_improve": -0.008538173828062767,
    "time": 22060.310546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (- (sqrt (* (+ g h) (- g h))) g))) (cbrt (* (/ -0.5 a) (if (!= (- g (sqrt (- (* g g) (* h h)))) 0.0) (/ (- (* h h)) (- (sqrt (- (* g g) (* h h))) g)) (+ g (sqrt (- (* g g) (* h h))))))))",
    "output_parens": 32,
    "avg_bits_err_input": 35.86431059287852,
    "avg_bits_err_output": 35.56892443263901,
    "avg_bits_err_improve": 0.29538616023950937,
    "time": 17224.042724609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (if (!= (cos (+ (/ (acos (/ g (- h))) 3.0) (* PI 0.6666666666666666))) 0.0) (/ 1.0 (/ 1.0 (cos (/ (fma 2.0 PI (acos (/ g (- h)))) 3.0)))) (cos (/ (fma 2.0 PI (acos (/ g (- h)))) 3.0))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.9894441894575653,
    "avg_bits_err_output": 0.9802197375050489,
    "avg_bits_err_improve": 0.009224451952516421,
    "time": 11524.054443359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (+ (exp a) (expm1 b)) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.7002193609377705,
    "avg_bits_err_output": 0.7256982392205324,
    "avg_bits_err_improve": -0.025478878282761963,
    "time": 17876.067626953125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -2e+290) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-238) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 4e-262) (* a2 (/ (/ a1 b2) b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+294) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.460099516228876,
    "avg_bits_err_output": 3.458387754656833,
    "avg_bits_err_improve": 8.001711761572043,
    "time": 11047.804931640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5379376695931969,
    "avg_bits_err_output": 0.467375,
    "avg_bits_err_improve": 0.0705626695931969,
    "time": 10975.710205078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.04) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 500000.0) (log1p (if (!= (+ (- (hypot 1.0 x) x) -1.0) 0.0) (/ (* (+ 1.0 (- x (hypot 1.0 x))) (- x (- 1.0 (hypot 1.0 x)))) (/ (+ (- x (hypot 1.0 x)) (+ (- x (hypot 1.0 x)) 2.0)) 2.0)) (+ x (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 56,
    "avg_bits_err_input": 53.05676708120647,
    "avg_bits_err_output": 0.5537791721435874,
    "avg_bits_err_improve": 52.50298790906289,
    "time": 12434.997802734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.675553231529634,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.675553231529634,
    "time": 2887.339599609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- x (- 2.0 x)) (- -2.0 (+ x x))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.016323120312590145,
    "avg_bits_err_improve": -0.005073120312590145,
    "time": 2837.856689453125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1155.869140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= (* w w) 1.2e-33) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (/ r (- 1.0 v)) (* w (* w r)))) 4.5)) (- (- (+ 3.0 (/ 2.0 (* r r))) (* (/ (- 0.375 (* v 0.25)) (- 1.0 v)) (* w (* r (* r w))))) 4.5))",
    "output_parens": 29,
    "avg_bits_err_input": 13.006076314377172,
    "avg_bits_err_output": 0.3496727453198018,
    "avg_bits_err_improve": 12.65640356905737,
    "time": 22531.144775390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (+ (* (* x1 (* (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0)) x1) (* (* x1 -6.0) x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.5146300528268175,
    "avg_bits_err_output": 0.27440240740892835,
    "avg_bits_err_improve": 0.24022764541788916,
    "time": 68224.07153320312,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.04225740340445,
    "avg_bits_err_output": 1.3973193946950893,
    "avg_bits_err_improve": 16.64493800870936,
    "time": 10286.821533203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.19424060156295073,
    "avg_bits_err_output": 0.19424060156295073,
    "avg_bits_err_improve": 0,
    "time": 8237.151611328125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0035,
    "avg_bits_err_output": 0.0035,
    "avg_bits_err_improve": 0,
    "time": 3657.47216796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* (/ (- (/ 0.5 a) (/ 0.5 b)) (+ a b)) (/ PI (- b a)))",
    "output_parens": 8,
    "avg_bits_err_input": 14.080555225714622,
    "avg_bits_err_output": 0.29221560313743977,
    "avg_bits_err_improve": 13.788339622577183,
    "time": 15732.943359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (- (+ (/ (+ (exp (- (* eps x) x)) (/ -1.0 (exp (fma eps x x)))) eps) 1.0) (/ 1.0 (- (exp (fma eps x x))))) (- 1.0 (exp (- (* (- 1.0 eps) x))))) 2.0)",
    "output_parens": 21,
    "avg_bits_err_input": 29.945426673179135,
    "avg_bits_err_output": 1.292563716940447,
    "avg_bits_err_improve": 28.65286295623869,
    "time": 22497.60205078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (if (!= (/ 1.0 (+ (- 4.0 (/ (+ 4.0 (- 4.0 (/ 4.0 (+ t (/ t t))))) (+ t (/ t t)))) 2.0)) 0.0) (/ (/ (/ 1.0 (+ (- 4.0 (/ (+ 4.0 (- 4.0 (/ 4.0 (+ t (/ t t))))) (+ t (/ t t)))) 2.0)) (+ (- 4.0 (/ (+ 4.0 (- 4.0 (/ 4.0 (+ t (/ t t))))) (+ t (/ t t)))) 2.0)) (/ 1.0 (+ (- 4.0 (/ (+ 4.0 (- 4.0 (/ 4.0 (+ t (/ t t))))) (+ t (/ t t)))) 2.0))) (/ 1.0 (+ (- 4.0 (/ (+ 4.0 (- 4.0 (/ 4.0 (+ t (/ t t))))) (+ t (/ t t)))) 2.0))))",
    "output_parens": 59,
    "avg_bits_err_input": 0.020125,
    "avg_bits_err_output": 0.012167481250360579,
    "avg_bits_err_improve": 0.007957518749639422,
    "time": 7317.03857421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.02475,
    "avg_bits_err_output": 0.02475,
    "avg_bits_err_improve": 0,
    "time": 10591.52685546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))) (+ 2.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0315,
    "avg_bits_err_output": 0.0395,
    "avg_bits_err_improve": -0.008,
    "time": 11739.317138671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3351.68408203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7210.686767578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2688.82763671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(- (+ (/ -10.0 (fma x x -1.0)) 1.0) 1.0)",
    "output_parens": 4,
    "avg_bits_err_input": 7.860831900243411,
    "avg_bits_err_output": 0.2485,
    "avg_bits_err_improve": 7.612331900243411,
    "time": 30478.16796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.365979288052949,
    "avg_bits_err_output": 7.365979288052949,
    "avg_bits_err_improve": 0,
    "time": 13282.964599609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (if (!= (+ -1.0 (pow (+ x eps) 2.0)) 0.0) (/ (* (pow (+ x eps) 2.0) (+ -1.0 (pow (+ x eps) 2.0))) (+ -1.0 (pow (+ x eps) 2.0))) (pow (+ x eps) 2.0)) (pow x 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 16.15603944471507,
    "avg_bits_err_output": 16.161059475709813,
    "avg_bits_err_improve": -0.005020030994742797,
    "time": 16275.445068359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (exp (* x (* x 10.0))) (cos x)) 0.0) (/ 1.0 (* (/ 2.0 (exp (* x (* x 10.0)))) (/ (/ (exp (* (* x x) -10.0)) (cos x)) (/ 2.0 (- (expm1 (* x (* x 10.0))) -1.0))))) (* (exp (* x (* x 10.0))) (cos x)))",
    "output_parens": 29,
    "avg_bits_err_input": 3.531589396523647,
    "avg_bits_err_output": 3.5281062683885436,
    "avg_bits_err_improve": 0.0034831281351035415,
    "time": 19440.624267578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ (+ (/ x (fma x x 1.0)) (/ (+ x (+ x x)) (fma x x 1.0))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 15.335924263130591,
    "avg_bits_err_output": 15.354761371984198,
    "avg_bits_err_improve": -0.018837108853606566,
    "time": 11665.961181640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.289253767540075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.289253767540075,
    "time": 5402.058837890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.72356555091175,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.72306555091175,
    "time": 4497.044921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.253,
    "avg_bits_err_improve": 63.747,
    "time": 17718.820068359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (* t 4e-32))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325825111469,
    "avg_bits_err_output": 0.402625,
    "avg_bits_err_improve": 61.44063325111469,
    "time": 7918.691162109375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a -4.0)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.07549345058352,
    "avg_bits_err_output": 21.730702645287177,
    "avg_bits_err_improve": 12.344790805296345,
    "time": 27154.578857421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (sqrt (+ (* b b) (* a (* c -4.0)))) (+ (sqrt (+ (* b b) (* a (* c -4.0)))) (* b -2.0))) (* a 4.0))",
    "output_parens": 15,
    "avg_bits_err_input": 33.96409567475518,
    "avg_bits_err_output": 33.97255894788129,
    "avg_bits_err_improve": -0.008463273126110948,
    "time": 26449.14697265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2607.331787109375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.09852066573798,
    "avg_bits_err_output": 0.01125,
    "avg_bits_err_improve": 40.08727066573798,
    "time": 9541.265869140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.502515420042872,
    "avg_bits_err_output": 20.502515420042872,
    "avg_bits_err_improve": 0,
    "time": 4117.39990234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ c (+ b (+ d a))) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6591384579897333,
    "avg_bits_err_output": 0.019331300966383105,
    "avg_bits_err_improve": 3.63980715702335,
    "time": 9653.31201171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ (+ b c) d))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037875,
    "avg_bits_err_output": 0.037875,
    "avg_bits_err_improve": 0,
    "time": 6992.19921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ a b)) (* a (+ a b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021948120312590146,
    "avg_bits_err_output": 0.0175,
    "avg_bits_err_improve": 0.004448120312590145,
    "time": 2965.130615234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.014625,
    "avg_bits_err_output": 0.014625,
    "avg_bits_err_improve": 0,
    "time": 2245.762451171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0,
    "time": 1320.32568359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39961353437914676,
    "avg_bits_err_output": 0.24425,
    "avg_bits_err_improve": 0.15536353437914677,
    "time": 5689.7236328125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(+ (- (* (cos x) 0.25)) (+ (- 1.0 (* (cos x) 0.25)) (/ (cos x) -2.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 30.290450352934208,
    "avg_bits_err_output": 30.298418218207306,
    "avg_bits_err_improve": -0.00796786527309834,
    "time": 15162.304443359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (sqrt (- (* x x) eps)))",
    "output_parens": 4,
    "avg_bits_err_input": 24.796915210370255,
    "avg_bits_err_output": 24.796915210370255,
    "avg_bits_err_improve": 0,
    "time": 13925.021484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(+ (+ (/ (- x (sin x)) (tan x)) -1.0) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.532143519155557,
    "avg_bits_err_output": 29.529223796028134,
    "avg_bits_err_improve": 0.0029197231274231683,
    "time": 28594.685546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006198120312590144,
    "avg_bits_err_output": 0.006198120312590144,
    "avg_bits_err_improve": 0,
    "time": 1805.263916015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 5e-251) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (* 100.0 (/ (pow (+ (/ i n) 1.0) n) (/ i n))) (if (!= (/ 100.0 (/ i n)) 0.0) (- (/ (/ 10000.0 (/ i n)) 100.0) 0.0) (/ 100.0 (/ i n)))))",
    "output_parens": 32,
    "avg_bits_err_input": 47.44885723323919,
    "avg_bits_err_output": 14.359678381311207,
    "avg_bits_err_improve": 33.08917885192798,
    "time": 25442.461181640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (/ (* b d) (+ (* d d) (* c c))) (* a (/ c (+ (* d d) (* c c)))))",
    "output_parens": 11,
    "avg_bits_err_input": 26.07241525507372,
    "avg_bits_err_output": 24.528985691191078,
    "avg_bits_err_improve": 1.5434295638826434,
    "time": 14676.91455078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma d d (* c c))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 2e+297) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma d d (* c c)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.106454942368067,
    "avg_bits_err_output": 22.757017176074317,
    "avg_bits_err_improve": 3.3494377662937502,
    "time": 14849.53466796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (if (!= ux 0.0) (/ (* ux (fma ux maxCos (- ux))) ux) (fma ux maxCos (- ux))) 1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.033625,
    "avg_bits_err_output": 0.029048457997890808,
    "avg_bits_err_improve": 0.004576542002109194,
    "time": 9519.17578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* uy (* 2.0 PI))) (sqrt (- (fma (fma ux maxCos (- 1.0 ux)) (* ux maxCos) (- (- (fma ux maxCos (- 1.0 ux)) 1.0) (* ux (fma ux maxCos (- 1.0 ux))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.369883984414619,
    "avg_bits_err_output": 11.100933449951395,
    "avg_bits_err_improve": 2.268950534463224,
    "time": 27680.2783203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- (+ ux ux) (* ux ux)) (- (* (* ux maxCos) (+ (fma ux maxCos (- 1.0 ux)) (- 1.0 ux)))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.402046285481308,
    "avg_bits_err_output": 0.3202253592113851,
    "avg_bits_err_improve": 13.081820926269923,
    "time": 29124.279296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (fma (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) yi) (- (* ux (* maxCos zi)) (* ux (* ux (* maxCos zi))))))",
    "output_parens": 34,
    "avg_bits_err_input": 0.33738181104624615,
    "avg_bits_err_output": 0.3287122133936841,
    "avg_bits_err_improve": 0.008669597652562033,
    "time": 47572.882568359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (+ (+ 2.0 (cos (atan (* (/ alphay alphax) (/ (tan (* PI (+ (* 2.0 u1) 0.5))) 1.0))))) -2.0) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.20460615593600745,
    "avg_bits_err_output": 0.20637733439098216,
    "avg_bits_err_improve": -0.001771178454974709,
    "time": 45237.754150390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (/ 1.0 (/ 1.0 (/ u1 (- 1.0 u1)))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 14,
    "avg_bits_err_input": 0.5396182899107279,
    "avg_bits_err_output": 0.554605575255183,
    "avg_bits_err_improve": -0.014987285344455037,
    "time": 22431.710693359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (if (!= (* u1 (/ 0.25 (- 1.0 u1))) 0.0) (* u1 (/ u1 (* u1 (- 4.0 (* 4.0 u1))))) (* u1 (/ 0.25 (- 1.0 u1)))) (/ (+ u1 (/ u1 2.0)) (- 2.0 (+ u1 u1))))) (cos (* 6.28318530718 u2)))",
    "output_parens": 23,
    "avg_bits_err_input": 0.3202862910193155,
    "avg_bits_err_output": 0.35140660961369496,
    "avg_bits_err_improve": -0.03112031859437947,
    "time": 18930.99169921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (if (!= (/ PI s) 0.0) (- (/ 1.0 (/ 1.0 (/ PI s))) 0.0) (/ PI s))))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.33423293891705724,
    "avg_bits_err_output": 0.33535138048957047,
    "avg_bits_err_improve": -0.001118441572513229,
    "time": 44066.2041015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.06337955531749875,
    "avg_bits_err_output": 0.06337955531749875,
    "avg_bits_err_improve": 0,
    "time": 11553.90869140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (/ (- (fabs x)) s)) (* (+ (exp (/ (- (fabs x)) s)) 1.0) (+ (* s (exp (/ (fabs x) (- s)))) s)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.16429215136219916,
    "avg_bits_err_output": 0.149155705432549,
    "avg_bits_err_improve": 0.01513644592965016,
    "time": 17209.711181640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641084826074513,
    "avg_bits_err_output": 0.6641084826074513,
    "avg_bits_err_improve": 0,
    "time": 23182.2197265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.16916530269330018,
    "avg_bits_err_output": 0.16916530269330018,
    "avg_bits_err_improve": 0,
    "time": 21373.48388671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.514782104455441,
    "avg_bits_err_output": 2.5111052247680314,
    "avg_bits_err_improve": 0.0036768796874095955,
    "time": 37924.177490234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (* (* cosTheta_i cosTheta_O) (/ 1.0 v))) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4633497118029939,
    "avg_bits_err_output": 0.40752827765449723,
    "avg_bits_err_improve": 0.05582143414849666,
    "time": 28232.303955078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp 0.6931) (exp (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (log (/ 0.5 v)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.12518526195804403,
    "avg_bits_err_output": 0.12694035752606955,
    "avg_bits_err_improve": -0.0017550955680255276,
    "time": 24345.26611328125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.46386933414691894,
    "avg_bits_err_output": 0.46386933414691894,
    "avg_bits_err_improve": 0,
    "time": 24471.27197265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) s)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3216063405233007,
    "avg_bits_err_output": 1.1975720425383722,
    "avg_bits_err_improve": 0.12403429798492849,
    "time": 25351.65478515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (fma (- s) (- 1.0 (log (/ 1.0 (fma u -4.0 1.0)))) (- s (* (log (log (+ 1.0 (expm1 (/ 1.0 (fma u -4.0 1.0)))))) s))) (* (- s) (- (log (/ 1.0 (fma u -4.0 1.0))))))",
    "output_parens": 21,
    "avg_bits_err_input": 12.438894629017375,
    "avg_bits_err_output": 12.251759922157206,
    "avg_bits_err_improve": 0.18713470686016898,
    "time": 28232.68212890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ 0.125 (* PI s))) (* 0.75 (* (exp (/ r (* s -3.0))) (/ (/ 0.16666666666666666 PI) s)))) r)",
    "output_parens": 15,
    "avg_bits_err_input": 0.14841609693991722,
    "avg_bits_err_output": 0.15466062024192256,
    "avg_bits_err_improve": -0.006244523302005339,
    "time": 22011.563232421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (- normAngle (* u normAngle))) (sin normAngle)) n0_i) (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.9172214596710796,
    "avg_bits_err_output": 0.7470542059285746,
    "avg_bits_err_improve": 0.17016725374250496,
    "time": 28303.2158203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.7000439462243894,
    "avg_bits_err_output": 0.48994152699850196,
    "avg_bits_err_improve": 0.2101024192258874,
    "time": 22303.932861328125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(- (sin (* 2.0 (if (!= (* PI u2) 0.0) (/ (fma u2 (* PI (* PI u2)) 0.0) (* PI u2)) (* PI u2)))) (- (sin (* 2.0 (* PI u2))) (* (sqrt (- (log (- 1.0 u1)))) (sin (* 2.0 (* PI u2))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.726960596178067,
    "avg_bits_err_output": 13.700543672574723,
    "avg_bits_err_improve": 0.026416923603344244,
    "time": 30787.567138671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (log1p (if (!= (expm1 (sqrt (- (log (- 1.0 u1))))) 0.0) (/ 1.0 (/ 1.0 (expm1 (sqrt (- (log (- 1.0 u1))))))) (expm1 (sqrt (- (log (- 1.0 u1))))))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 24,
    "avg_bits_err_input": 13.768073639905353,
    "avg_bits_err_output": 13.7726789883687,
    "avg_bits_err_improve": -0.0046053484633468145,
    "time": 23179.70947265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (fma (- alpha) alpha (* alpha alpha)) (/ (* (* alpha -2.0) (* (log (- 1.0 u0)) alpha)) 2.0))",
    "output_parens": 10,
    "avg_bits_err_input": 14.356825423854707,
    "avg_bits_err_output": 14.265812848249691,
    "avg_bits_err_improve": 0.0910125756050153,
    "time": 20506.962890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.657366776701199,
    "avg_bits_err_output": 12.657366776701199,
    "avg_bits_err_improve": 0,
    "time": 16683.426513671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -4e+159) (- (* PI l) (/ (tan (if (!= (* PI l) 0.0) (* (* PI (* PI l)) (/ l (* PI l))) (* PI l))) (* F F))) (if (<= (* PI l) -2e+26) (- (* PI l) (/ (tan (if (!= (* PI l) 0.0) (* (* PI (* l l)) (- (exp (log1p (/ PI (* PI l)))) 1.0)) (* PI l))) (* F F))) (if (<= (* PI l) 5e-6) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (if (<= (* PI l) 2e+107) (- (* PI l) (/ (tan (if (!= (* PI l) 0.0) (* (* PI (* l l)) (- (exp (log1p (/ PI (* PI l)))) 1.0)) (* PI l))) (* F F))) (- (* PI l) (/ (tan (expm1 (log1p (* PI l)))) (* F F)))))))",
    "output_parens": 74,
    "avg_bits_err_input": 16.61431987146278,
    "avg_bits_err_output": 10.315439729533344,
    "avg_bits_err_improve": 6.298880141929436,
    "time": 26894.756591796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (- (/ x (tan B)) (/ -1.0 (sin B))) (/ (+ x x) (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.21891901566846755,
    "avg_bits_err_output": 0.1890227750432873,
    "avg_bits_err_improve": 0.02989624062518026,
    "time": 14094.03955078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.808494131170866,
    "avg_bits_err_output": 10.454000934505217,
    "avg_bits_err_improve": 3.354493196665649,
    "time": 18638.37353515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(if (!= (/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.5)) 0.0) (/ (+ (* (/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.5)) (/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.5))) (* (log (/ (+ (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0))) (if (!= (exp (/ (* PI f) -4.0)) 0.0) (/ (expm1 (/ (* PI (+ f f)) -4.0)) (- (exp (/ (* PI f) -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0)))))) (/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0))) (if (!= (exp (/ (* PI f) -4.0)) 0.0) (/ (expm1 (/ (* PI (+ f f)) -4.0)) (- (exp (/ (* PI f) -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0)))))) (* PI (* PI 0.25))))) (/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.5))) (/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.25)))",
    "output_parens": 229,
    "avg_bits_err_input": 61.56136905097554,
    "avg_bits_err_output": 2.081707833621315,
    "avg_bits_err_improve": 59.47966121735423,
    "time": 59666.467529296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= (* l l) 2e+302) (/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (- -1.0 x) (- 1.0 x)) (* 2.0 (* t t))) (+ (* (* l l) (/ (- -1.0 x) (- 1.0 x))) (* l (- l)))))) (* t (expm1 (log1p (/ (sqrt 2.0) (sqrt (fma l (- l) (/ (* (fma 2.0 (* t t) (* l l)) (+ x 1.0)) (+ x -1.0)))))))))",
    "output_parens": 37,
    "avg_bits_err_input": 42.539973515654495,
    "avg_bits_err_output": 36.520203636437856,
    "avg_bits_err_improve": 6.019769879216639,
    "time": 24907.15673828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.8189911087062542,
    "avg_bits_err_output": 3.8189911087062542,
    "avg_bits_err_improve": 0,
    "time": 28526.77783203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.8909181020552495,
    "avg_bits_err_output": 0.8909181020552495,
    "avg_bits_err_improve": 0,
    "time": 10975.79248046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.300471547290924,
    "avg_bits_err_output": 10.300471547290924,
    "avg_bits_err_improve": 0,
    "time": 11758.310791015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -3.9e-20) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (if (<= U 2e-46) (sqrt (- (* (* 2.0 n) (- (* (+ U (- U*)) (* (* n U) (pow (/ l Om) 2.0))) (* U (- t (* l (* 2.0 (/ l Om))))))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))))",
    "output_parens": 49,
    "avg_bits_err_input": 34.25266843955151,
    "avg_bits_err_output": 28.643935376000734,
    "avg_bits_err_improve": 5.60873306355078,
    "time": 35944.816650390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ 2.0 (/ (* (sin k) (* (tan k) (/ (pow t 3.0) l))) l)) (pow (/ k t) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 47.49037683069059,
    "avg_bits_err_output": 37.1546812163099,
    "avg_bits_err_improve": 10.33569561438069,
    "time": 39101.5498046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (pow t 3.0) (/ (sin k) l)) (* (tan k) (/ (+ 2.0 (pow (/ k t) 2.0)) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.127143358607746,
    "avg_bits_err_output": 26.49163653863967,
    "avg_bits_err_improve": 5.635506819968075,
    "time": 18377.772216796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (/ (* a2 a2) (sqrt 2.0)) (* a1 (/ a1 (sqrt 2.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5379524469000625,
    "avg_bits_err_output": 0.4830934234558007,
    "avg_bits_err_improve": 0.0548590234442618,
    "time": 22903.61669921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (/ 1.0 (sqrt k)) (pow (if (!= (* PI n) 0.0) (/ 2.0 (/ 1.0 (* PI n))) (* n (* PI 2.0))) (+ 0.5 (* k -0.5))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.4852067580956259,
    "avg_bits_err_output": 0.49597993812895047,
    "avg_bits_err_improve": -0.010773180033324559,
    "time": 19259.78564453125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (- (exp (+ l l)) (exp (* l -2.0))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 25,
    "avg_bits_err_input": 17.53553653168156,
    "avg_bits_err_output": 17.55521596511112,
    "avg_bits_err_improve": -0.019679433429558912,
    "time": 29153.336181640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (log1p (+ (+ 2.0 (expm1 (cos (- (* K (/ (+ m n) 2.0)) M)))) -2.0)) (exp (- (fabs (- m n)) (+ l (pow (- (/ (+ m n) 2.0) M) 2.0)))))",
    "output_parens": 19,
    "avg_bits_err_input": 15.58374602098597,
    "avg_bits_err_output": 15.553186465570269,
    "avg_bits_err_improve": 0.03055955541570121,
    "time": 19527.89990234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (sqrt (+ 1.0 (pow (/ (/ U (* 2.0 J)) (cos (/ K 2.0))) 2.0))) (* (cos (/ K 2.0)) -2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 18.186511842188136,
    "avg_bits_err_output": 18.18670996250072,
    "avg_bits_err_improve": -0.00019812031258581442,
    "time": 25249.440673828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (/ (if (!= (/ (* M D) (+ d d)) 0.0) (/ (* (/ M d) (* D (* D (/ M (* D (/ M 4.0)))))) 4.0) (* D (/ M d))) 2.0) 2.0) h) l))))",
    "output_parens": 22,
    "avg_bits_err_input": 14.013086210429998,
    "avg_bits_err_output": 10.492699184301605,
    "avg_bits_err_improve": 3.520387026128393,
    "time": 17427.857666015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 4e-300) (* c0 (sqrt (/ (/ A l) V))) (if (<= (/ A (* V l)) 1e+303) (* c0 (sqrt (+ (/ (+ A (+ A A)) (* (+ l l) (+ V V))) (/ A (* (+ l l) (+ V V)))))) (* c0 (sqrt (/ (/ (/ A l) l) (/ V l))))))",
    "output_parens": 31,
    "avg_bits_err_input": 18.845743201392345,
    "avg_bits_err_output": 15.345632992368412,
    "avg_bits_err_improve": 3.5001102090239335,
    "time": 16041.819091796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(* (/ c0 (* 2.0 w)) (+ (* (/ (/ d (* w D)) (* D h)) (* c0 d)) (sqrt (* (fma (/ (/ d (* w D)) (* D h)) (* c0 d) M) (- (* (/ (/ d (* w D)) (* D h)) (* c0 d)) M)))))",
    "output_parens": 25,
    "avg_bits_err_input": 59.545428212516434,
    "avg_bits_err_output": 54.56229035519733,
    "avg_bits_err_improve": 4.983137857319107,
    "time": 42371.90380859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (/ (* (pow (* M (/ D (* d 2.0))) 2.0) (* 0.5 h)) l)))",
    "output_parens": 14,
    "avg_bits_err_input": 26.92738928625457,
    "avg_bits_err_output": 26.387954630580698,
    "avg_bits_err_improve": 0.5394346556738725,
    "time": 39819.254150390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (- (/ -0.5 (hypot 1.0 x)) 0.5) 0.0) (/ (- 0.25 (/ 0.25 (* (hypot 1.0 x) (hypot 1.0 x)))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (- (exp (log (+ (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0))) 1.0)) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 38,
    "avg_bits_err_input": 15.40199340572836,
    "avg_bits_err_output": 14.911017481207686,
    "avg_bits_err_improve": 0.49097592452067396,
    "time": 21485.852294921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9841981203125901,
    "avg_bits_err_output": 0.013167481250360578,
    "avg_bits_err_improve": 0.9710306390622295,
    "time": 3829.593505859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (- (/ (/ (/ (fma v (* v 5.0) -1.0) PI) (sqrt (- 2.0 (* 6.0 (* v v))))) (- t (* t (* v v)))) 0.0))",
    "output_parens": 14,
    "avg_bits_err_input": 0.4565768815682678,
    "avg_bits_err_output": 0.11450244375108176,
    "avg_bits_err_improve": 0.34207443781718605,
    "time": 19971.294677734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (- 1.0 (* 3.0 (* v v)))) (* (/ (sqrt 2.0) 4.0) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012323120312590145,
    "avg_bits_err_output": 0.012917481250360578,
    "avg_bits_err_improve": -0.0005943609377704329,
    "time": 8239.27197265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (if (!= (/ (- 1.0 (* v (* v -5.0))) (- 1.0 (* v v))) 0.0) (* (/ (fma v (* v -5.0) -1.0) (- 1.0 (* v v))) (- (/ (+ (* v (* v -10.0)) 2.0) (+ (* (* v v) 10.0) 2.0)) 0.0)) (/ (fma v (* v -5.0) 1.0) (fma v v -1.0))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.508847125251714,
    "avg_bits_err_output": 0.5303421767584648,
    "avg_bits_err_improve": -0.021495051506750795,
    "time": 13254.656005859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.9987596601181528,
    "avg_bits_err_output": 1.9652384194929726,
    "avg_bits_err_improve": 0.03352124062518014,
    "time": 22619.397705078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (* (exp (/ (- (+ mu (+ Vef EDonor)) Ec) (+ KbT KbT))) (exp (/ (- (+ mu (+ Vef EDonor)) Ec) (+ KbT KbT)))))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.016281150418828574,
    "avg_bits_err_output": 0.01605894947149563,
    "avg_bits_err_improve": 0.00022220094733294352,
    "time": 8962.20458984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (if (!= (* (* b b) 4.0) 0.0) (/ (* (- (fma b (* b 4.0) (pow (fma b b (* a a)) 2.0))) (* b (+ (/ (/ b b) (+ b b)) (/ (/ b b) (+ b b))))) -1.0) (fma b (* b 4.0) (pow (fma a a (* b b)) 2.0))) 1.0)",
    "output_parens": 26,
    "avg_bits_err_input": 0.18960735349127605,
    "avg_bits_err_output": 0.2026460928374696,
    "avg_bits_err_improve": -0.01303873934619354,
    "time": 17101.005126953125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (* (pow (fma a a (* b b)) 2.0) (/ (fma 4.0 (fma a (fma a a a) (* (- 1.0 (* a 3.0)) (* b b))) (pow (fma a a (* b b)) 2.0)) (pow (fma a a (* b b)) 2.0))) (fma 4.0 (fma b (* (fma 3.0 a -1.0) (- b)) (* a (fma a a a))) (pow (fma a a (* b b)) 2.0))) 1.0)",
    "output_parens": 34,
    "avg_bits_err_input": 0.18656697967695074,
    "avg_bits_err_output": 0.18982887503427864,
    "avg_bits_err_improve": -0.003261895357327904,
    "time": 25869.31591796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18854912789656242,
    "avg_bits_err_output": 0.18854912789656242,
    "avg_bits_err_improve": 0,
    "time": 17736.02880859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (- (+ (/ x (sqrt (fma x x (* p (* 4.0 p))))) 2.0) 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.75244049231281,
    "avg_bits_err_output": 13.76165628313641,
    "avg_bits_err_improve": -0.009215790823601466,
    "time": 15727.020263671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.75957069438255,
    "avg_bits_err_output": 0.081375,
    "avg_bits_err_improve": 40.67819569438255,
    "time": 5336.55810546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (!= (/ (sin x) (- x (tan x))) 0.0) (if (!= (+ (/ x (- x (tan x))) (/ 1.0 (/ 1.0 (/ (sin x) (- x (tan x)))))) 0.0) (/ (- (* (/ x (- x (tan x))) (/ x (- x (tan x)))) (/ (/ 1.0 (/ 1.0 (/ (sin x) (- x (tan x))))) (/ 1.0 (/ (sin x) (- x (tan x)))))) (+ (/ x (- x (tan x))) (/ 1.0 (/ 1.0 (/ (sin x) (- x (tan x))))))) (- (/ x (- x (tan x))) (/ 1.0 (/ 1.0 (/ (sin x) (- x (tan x))))))) (/ (- x (sin x)) (- x (tan x))))",
    "output_parens": 64,
    "avg_bits_err_input": 31.426259028215274,
    "avg_bits_err_output": 31.536369045809078,
    "avg_bits_err_improve": -0.11011001759380434,
    "time": 27394.019287109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 34.40629718842668,
    "avg_bits_err_output": 34.40629718842668,
    "avg_bits_err_improve": 0,
    "time": 16481.24365234375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 33.97145927407366,
    "avg_bits_err_output": 33.97145927407366,
    "avg_bits_err_improve": 0,
    "time": 18257.94970703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(if (<= (/ (- 1.0 (cos x)) (* x x)) 0.0) (+ (- (/ 1.0 (* x x)) (+ 1.0 (/ (cos x) (* x x)))) 1.0) (/ (if (!= (/ (- 1.0 (cos x)) x) 0.0) (/ 1.0 (/ 1.0 (/ (- 1.0 (cos x)) x))) (/ (- 1.0 (cos x)) x)) x))",
    "output_parens": 28,
    "avg_bits_err_input": 31.411070634483735,
    "avg_bits_err_output": 28.643144760824942,
    "avg_bits_err_improve": 2.7679258736587933,
    "time": 16131.24072265625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (/ (if (!= (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n))) 0.0) (/ (if (!= (+ (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (log x) (+ (log x) (+ (log x) (log x)))) n))) 0.0) (/ (- (exp (/ (+ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x))))) n)) (exp (/ (+ (log x) (+ (+ (log x) (+ (log x) (log x))) (+ (log x) (+ (log x) (+ (log x) (log x)))))) n))) (+ (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (log x) (+ (log x) (+ (log x) (log x)))) n)))) (- (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (log x) (+ (log x) (+ (log x) (log x)))) n)))) (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n)))) (- (exp (/ (+ (log1p x) (log1p x)) n)) (* (pow x (/ 1.0 n)) (pow x (/ 1.0 n))))) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 150,
    "avg_bits_err_input": 32.65270767685723,
    "avg_bits_err_output": 32.36990234233347,
    "avg_bits_err_improve": 0.2828053345237649,
    "time": 30381.04248046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (- (- (log1p N) -1.0) 1.0) (log N))",
    "output_parens": 5,
    "avg_bits_err_input": 29.968340199517087,
    "avg_bits_err_output": 29.972079576042454,
    "avg_bits_err_improve": -0.003739376525366822,
    "time": 13628.215576171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (- (/ (+ (/ x (+ x (+ x 2.0))) -1.0) x) (/ -1.0 (+ x (+ x 2.0)))) 0.0)",
    "output_parens": 10,
    "avg_bits_err_input": 14.957259567815925,
    "avg_bits_err_output": 14.957857008679404,
    "avg_bits_err_improve": -0.0005974408634799033,
    "time": 16080.648681640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(+ (if (!= (cos (+ x eps)) 0.0) (/ (- (* (cos (+ x eps)) (cos (+ x eps))) (* (cos (+ x eps)) (+ (cos x) -1.0))) (cos (+ x eps))) (- (cos (+ x eps)) (+ (cos x) -1.0))) -1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 39.8583013065861,
    "avg_bits_err_output": 39.87265604633301,
    "avg_bits_err_improve": -0.01435473974691348,
    "time": 22639.0498046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(log (+ 1.0 (expm1 (if (!= (+ (+ (- (cbrt (+ x 1.0)) (cbrt x)) -1.0) -1.0) 0.0) (/ (+ (* (if (!= (+ (cbrt (+ 1.0 x)) (+ 1.0 (cbrt x))) 0.0) (/ (fma (+ 1.0 (cbrt x)) (+ 1.0 (cbrt x)) (- (* (cbrt (+ 1.0 x)) (cbrt (+ 1.0 x))))) (+ (cbrt (+ 1.0 x)) (+ 1.0 (cbrt x)))) (+ 1.0 (- (cbrt x) (cbrt (+ 1.0 x))))) (- (+ 1.0 (cbrt x)) (cbrt (+ x 1.0)))) -1.0) (+ (+ (- (cbrt (+ x 1.0)) (cbrt x)) -1.0) -1.0)) (- (cbrt (+ x 1.0)) (cbrt x))))))",
    "output_parens": 58,
    "avg_bits_err_input": 30.21417733891934,
    "avg_bits_err_output": 29.78807374328289,
    "avg_bits_err_improve": 0.4261035956364516,
    "time": 13149.7294921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (/ -1.0 (sin x)) 0.0) (/ (+ (- (+ (/ (cos x) (* (sin x) (sin x))) 1.0) (/ 1.0 (* (sin x) (sin x)))) -1.0) (/ -1.0 (sin x))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 23,
    "avg_bits_err_input": 29.98425757669562,
    "avg_bits_err_output": 28.820456405674815,
    "avg_bits_err_improve": 1.163801171020804,
    "time": 22119.41943359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 34.02880879723151,
    "avg_bits_err_output": 21.64333599711659,
    "avg_bits_err_improve": 12.385472800114922,
    "time": 21600.553466796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.31682482700995,
    "avg_bits_err_output": 34.31682482700995,
    "avg_bits_err_improve": 0,
    "time": 23675.0341796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(log (exp (- (- (/ (log (- 1.0 x)) (log1p x)) (/ -1.0 (log1p x))) (/ 1.0 (log1p x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 61.506351104515716,
    "avg_bits_err_output": 59.570195369347225,
    "avg_bits_err_improve": 1.9361557351684908,
    "time": 25456.432373046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 62.99830314314377,
    "avg_bits_err_output": 44.20458561864122,
    "avg_bits_err_improve": 18.793717524502554,
    "time": 12470.702392578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (if (!= (/ eps (- -1.0 eps)) 0.0) (/ (/ (- (/ eps (- -1.0 eps)) (* eps (/ eps (- -1.0 eps)))) (- -1.0 eps)) (/ eps (+ eps 1.0))) (/ (- 1.0 eps) (- eps -1.0))))",
    "output_parens": 19,
    "avg_bits_err_input": 58.69856530902926,
    "avg_bits_err_output": 58.71593529778265,
    "avg_bits_err_improve": -0.017369988753387133,
    "time": 18246.36181640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ 0.0 (if (!= (/ 1.0 x) 0.0) (/ (+ (/ -1.0 (/ (tan x) x)) 1.0) x) (+ (/ 1.0 x) (/ -1.0 (tan x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 60.03390797384855,
    "avg_bits_err_output": 60.02846669966118,
    "avg_bits_err_improve": 0.005441274187369061,
    "time": 29384.056640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* eps (/ (expm1 (* eps (+ a b))) (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.545498997463795,
    "avg_bits_err_output": 29.28348397923268,
    "avg_bits_err_improve": 31.262015018231114,
    "time": 26225.110107421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (expm1 (log1p (exp x))) (expm1 x))",
    "output_parens": 5,
    "avg_bits_err_input": 41.14198855681147,
    "avg_bits_err_output": 0.5001115281111156,
    "avg_bits_err_improve": 40.64187702870036,
    "time": 7273.682861328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.72375050291582,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.72312550291582,
    "time": 3124.031005859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(if (!= (- -1.0 (exp (* a x))) 0.0) (/ (expm1 (* a (+ x x))) (+ (- (exp (log1p (exp (* a x)))) 2.0) 2.0)) (expm1 (* a x)))",
    "output_parens": 17,
    "avg_bits_err_input": 29.752675469533614,
    "avg_bits_err_output": 0.038587073966394984,
    "avg_bits_err_improve": 29.71408839556722,
    "time": 5690.530029296875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (exp (- x)) 0.0) (/ (fma (exp (- x)) (exp (- x)) (+ 1.0 (/ -2.0 (exp x)))) (exp (- x))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 20,
    "avg_bits_err_input": 29.97256274512492,
    "avg_bits_err_output": 29.536719905196406,
    "avg_bits_err_improve": 0.43584283992851525,
    "time": 28038.09619140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (if (!= (/ 1.0 (* (- 1.0 x) (+ x -1.0))) 0.0) (/ (- (* (/ 1.0 (+ x -1.0)) (* (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (* (- 1.0 x) (+ x -1.0))))) (/ (/ (/ (/ 1.0 (- 1.0 x)) (- 1.0 x)) (+ x -1.0)) (+ x -1.0))) (/ 1.0 (* (- 1.0 x) (+ x -1.0)))) (/ (- (/ 1.0 (+ 1.0 x)) (- (/ 2.0 x) (/ 1.0 (+ x -1.0)))) (+ x -1.0))) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 55,
    "avg_bits_err_input": 9.883531490737864,
    "avg_bits_err_output": 9.893842783399624,
    "avg_bits_err_improve": -0.010311292661759452,
    "time": 30904.71533203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (+ (- (/ (sin x) (+ (cos x) (cos x))) (* 0.5 (tan (+ x eps)))) (fma (- (/ 0.5 (cos (+ x eps)))) (sin (+ x eps)) (* 0.5 (/ (sin (+ x eps)) (cos (+ x eps)))))) -2.0)",
    "output_parens": 24,
    "avg_bits_err_input": 36.82708596163752,
    "avg_bits_err_output": 36.94155411715064,
    "avg_bits_err_improve": -0.11446815551311573,
    "time": 23392.779296875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.46279392718438,
    "avg_bits_err_output": 0.16608740625180285,
    "avg_bits_err_improve": 30.296706520932577,
    "time": 15027.52685546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 37.2820694714606,
    "avg_bits_err_output": 37.2820694714606,
    "avg_bits_err_improve": 0,
    "time": 19196.598876953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.53816983068328,
    "avg_bits_err_output": 19.53816983068328,
    "avg_bits_err_improve": 0,
    "time": 13422.859619140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 15.104404949952972,
    "avg_bits_err_output": 15.104404949952972,
    "avg_bits_err_improve": 0,
    "time": 4654.075439453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.58275976293066,
    "avg_bits_err_output": 1.2541989507961064,
    "avg_bits_err_improve": 28.328560812134555,
    "time": 25301.93603515625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (* (/ m v) (* (- 1.0 m) (- 1.0 m))) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07792999596793129,
    "avg_bits_err_output": 0.07790875534275102,
    "avg_bits_err_improve": 2.1240625180274364e-05,
    "time": 6968.047607421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* a (- b)) (/ (/ 1.0 b) a))",
    "output_parens": 5,
    "avg_bits_err_input": 16.681627241265716,
    "avg_bits_err_output": 0.2667291767454448,
    "avg_bits_err_improve": 16.41489806452027,
    "time": 11915.022216796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (fma (* PI angle) 0.005555555555555556 0.0))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.25536766350176,
    "avg_bits_err_output": 20.261797931330502,
    "avg_bits_err_improve": -0.006430267828740455,
    "time": 36578.729248046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* PI (/ angle 180.0))) (cos (* PI (/ angle 180.0)))))",
    "output_parens": 12,
    "avg_bits_err_input": 31.64041768746994,
    "avg_bits_err_output": 31.63965263485825,
    "avg_bits_err_improve": 0.0007650526116904643,
    "time": 42835.700439453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (if (!= (* angle (/ PI 180.0)) 0.0) (/ 1.0 (/ (/ 1.0 angle) (* PI 0.005555555555555556))) (* angle (/ PI 180.0))))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.034816628433592,
    "avg_bits_err_output": 20.055123726691473,
    "avg_bits_err_improve": -0.020307098257880796,
    "time": 42670.013671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.17814300435713698,
    "avg_bits_err_output": 0.18136236529490746,
    "avg_bits_err_improve": -0.003219360937770477,
    "time": 12877.18896484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.33644979461744556,
    "avg_bits_err_output": 0.3246097765696509,
    "avg_bits_err_improve": 0.011840018047794665,
    "time": 18437.43701171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13521936093777043,
    "avg_bits_err_output": 0.13586560156295072,
    "avg_bits_err_improve": -0.0006462406251802888,
    "time": 18918.511474609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.959706606356065,
    "avg_bits_err_output": 16.955021869545124,
    "avg_bits_err_improve": 0.004684736810940393,
    "time": 33639.864013671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (* -4.0 (/ c (+ b (sqrt (fma b b (* a (* c -4.0)))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.39074677848369,
    "avg_bits_err_output": 0.17268665469173666,
    "avg_bits_err_improve": 52.21806012379195,
    "time": 20614.119384765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -4.0)) (* b b))) (- b)) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* c a) (* b b)))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 28.434346419993858,
    "avg_bits_err_output": 0.34028872345003014,
    "avg_bits_err_improve": 28.09405769654383,
    "time": 26140.99755859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0)))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (+ (* c (* -4.0 a)) (* b b))))) a) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 43.21024841021872,
    "avg_bits_err_output": 0.24413515157160426,
    "avg_bits_err_improve": 42.96611325864711,
    "time": 22663.28759765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.03373881434307,
    "avg_bits_err_output": 34.03373881434307,
    "avg_bits_err_improve": 0,
    "time": 20137.1171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (fma (cos phi1) (cos phi1) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))) (cos phi1)) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.9227916492343113,
    "avg_bits_err_output": 0.9327768590127187,
    "avg_bits_err_improve": -0.009985209778407333,
    "time": 30620.375244140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0)))) 0.0) (/ (if (!= (+ 1.0 (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))) 0.0) (/ (- 1.0 (/ 256.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))))) (+ 1.0 (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))) (- 1.0 (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))) (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))) (- 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 122,
    "avg_bits_err_input": 29.48602237292531,
    "avg_bits_err_output": 29.444680350315995,
    "avg_bits_err_improve": 0.041342022609313744,
    "time": 29571.75927734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (- (exp (+ x x)) (exp (fma x -1.0 x))) (+ (exp (fma x -1.0 x)) (exp (+ x x))))",
    "output_parens": 11,
    "avg_bits_err_input": 58.31821049390211,
    "avg_bits_err_output": 57.8119391566856,
    "avg_bits_err_improve": 0.5062713372165106,
    "time": 19757.425048828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (- (+ (* (expm1 (* x -2.0)) (expm1 x)) (expm1 (* x -2.0)))) 2.0)",
    "output_parens": 9,
    "avg_bits_err_input": 58.194048431410835,
    "avg_bits_err_output": 0.1836385914939978,
    "avg_bits_err_improve": 58.01040983991684,
    "time": 9561.63134765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007948120312590144,
    "avg_bits_err_output": 0.007948120312590144,
    "avg_bits_err_improve": 0,
    "time": 3414.197265625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.8415,
    "avg_bits_err_output": 31.8415,
    "avg_bits_err_improve": 0,
    "time": 4889.866455078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (/ x (/ (- 1.0 x) 2.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.690047170071864,
    "avg_bits_err_output": 0.016453669577509954,
    "avg_bits_err_improve": 58.673593500494356,
    "time": 17468.809326171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ (+ (sqrt (- 1.0 (* x x))) 0.5) x) (/ 1.0 (+ x x))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.04382312031259015,
    "avg_bits_err_output": 0.04414624062518029,
    "avg_bits_err_improve": -0.0003231203125901444,
    "time": 4666.03466796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12657312031259016,
    "avg_bits_err_output": 0.12657312031259016,
    "avg_bits_err_improve": 0,
    "time": 12607.162841796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13507312031259017,
    "avg_bits_err_output": 0.13507312031259017,
    "avg_bits_err_improve": 0,
    "time": 23768.601318359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 38.737575955172545,
    "avg_bits_err_output": 3.5274832360267308,
    "avg_bits_err_improve": 35.21009271914581,
    "time": 25652.973388671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (/ (* (/ (fabs (+ a b)) a) (fabs (- b a))) a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.581460396180367,
    "avg_bits_err_output": 0.025875,
    "avg_bits_err_improve": 14.555585396180367,
    "time": 5487.982177734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (if (!= (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 0.0) (+ (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos theta) (cos phi1)))))))) (+ 0.0 (/ (fma (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos theta) (cos phi1)))))) (- (sin phi1))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos theta) (cos phi1))))))) (* (sin phi1) (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos theta) (cos phi1)))))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos theta) (cos phi1)))))))))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos theta) (cos phi1)))))))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 115,
    "avg_bits_err_input": 0.14823173516493837,
    "avg_bits_err_output": 0.1726854888305695,
    "avg_bits_err_improve": -0.02445375366563113,
    "time": 41590.130126953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.348724220987485,
    "avg_bits_err_output": 0.18381165469173663,
    "avg_bits_err_improve": 52.16491256629575,
    "time": 35051.999267578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 26,
    "avg_bits_err_input": 28.62054275743222,
    "avg_bits_err_output": 0.337682520324129,
    "avg_bits_err_improve": 28.28286023710809,
    "time": 20064.34765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* c (* a -3.0)) 0.0) (/ (fma (* c (* a -3.0)) (* c (* a -3.0)) (* (* b b) (* c (* a -3.0)))) (* c (* a -3.0))) (fma c (* a -3.0) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 40,
    "avg_bits_err_input": 43.33573691100468,
    "avg_bits_err_output": 0.25283082813311264,
    "avg_bits_err_improve": 43.08290608287157,
    "time": 26892.06298828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* -3.0 (* c a))))) 0.0) (* (/ c (+ b (sqrt (fma -3.0 (* c a) (* b b))))) (* -3.0 a)) (- (sqrt (fma b b (* -3.0 (* c a)))) b)) (* 3.0 a))",
    "output_parens": 22,
    "avg_bits_err_input": 34.085782308532885,
    "avg_bits_err_output": 21.697586909560556,
    "avg_bits_err_improve": 12.388195398972329,
    "time": 23565.30810546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (cos (- lambda1 lambda2))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.54259765526681,
    "avg_bits_err_output": 13.542595884045163,
    "avg_bits_err_improve": 1.7712216475729292e-06,
    "time": 36450.06396484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (- (+ (/ x (+ x 1.0)) (/ 1.0 (+ x -1.0))) (/ x (+ x -1.0))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.278962175140784,
    "avg_bits_err_output": 24.876557318318262,
    "avg_bits_err_improve": 4.402404856822521,
    "time": 20437.60546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (log (log1p (expm1 (exp (/ 1.0 (+ x -1.0)))))) (/ x (+ x 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.015219360937770434,
    "avg_bits_err_improve": -0.0034693609377704337,
    "time": 4178.03173828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(- (/ (- 1.0 (/ x (+ x -1.0))) (+ 1.0 x)) (/ 1.0 (fma x x -1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 14.511259199520136,
    "avg_bits_err_output": 12.590945762685058,
    "avg_bits_err_improve": 1.9203134368350785,
    "time": 16277.4208984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (- (pow B 2.0) (* C (* A 4.0))) (* (* 2.0 F) (- A (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C))))) (- (* C (* A 4.0)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.38712920987268,
    "avg_bits_err_output": 52.05493812799541,
    "avg_bits_err_improve": 0.3321910818772693,
    "time": 39977.24609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) PI))",
    "output_parens": 11,
    "avg_bits_err_input": 30.086011349813948,
    "avg_bits_err_output": 30.086136350636412,
    "avg_bits_err_improve": -0.00012500082246447164,
    "time": 28201.401611328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (pow (fma (fma 2.0 (pow B 2.0) (* A (* C -8.0))) (* F (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (* (fma 2.0 (pow B 2.0) (* A (* C -8.0))) (* F A))) 0.5) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 24,
    "avg_bits_err_input": 52.49758604289484,
    "avg_bits_err_output": 52.20373871042592,
    "avg_bits_err_improve": 0.29384733246892125,
    "time": 36165.696533203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ (/ (if (!= (* -2.0 (- (+ g (+ g g)) g)) 0.0) (* (* -2.0 (- (+ g (+ g g)) g)) (/ (* (- g (- g)) -2.0) (- (+ g (+ g g)) g))) (* (* (- g (- g)) -2.0) -2.0)) a) 16.0))",
    "output_parens": 25,
    "avg_bits_err_input": 15.747999065916055,
    "avg_bits_err_output": 15.87394003618055,
    "avg_bits_err_improve": -0.12594097026449447,
    "time": 14327.6005859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- g) 0.0) (* (/ -1.0 (- g)) (* g (- (sqrt (fma h (- h) (* g g))) g))) (- (sqrt (fma h (- h) (* g g))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 30,
    "avg_bits_err_input": 36.39747149191954,
    "avg_bits_err_output": 36.322691172492895,
    "avg_bits_err_improve": 0.07478031942664387,
    "time": 19154.926025390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (log (if (!= (exp (cos (+ (* (acos (/ g (- h))) 0.3333333333333333) (* PI 0.6666666666666666)))) 0.0) (/ 1.0 (/ 1.0 (exp (cos (* (fma 2.0 PI (acos (/ g (- h)))) 0.3333333333333333))))) (exp (cos (* (fma 2.0 PI (acos (/ g (- h)))) 0.3333333333333333))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.9896372187554094,
    "avg_bits_err_output": 0.046899467968703784,
    "avg_bits_err_improve": 0.9427377507867056,
    "time": 15096.807373046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log1p (expm1 (/ (exp a) (+ (exp a) (exp b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.8134481203125902,
    "avg_bits_err_output": 0.8173680453140325,
    "avg_bits_err_improve": -0.003919925001442337,
    "time": 5826.8642578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (* a1 (/ a2 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -4e-282) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ (* a1 (/ a2 b1)) b2) (if (<= (/ (* a1 a2) (* b1 b2)) 4e+302) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.2541952019844,
    "avg_bits_err_output": 2.7651668561326677,
    "avg_bits_err_improve": 8.489028345851732,
    "time": 8492.101318359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5053160970876119,
    "avg_bits_err_output": 0.44432312031259014,
    "avg_bits_err_improve": 0.0609929767750218,
    "time": 9844.49267578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -0.00029) (log (if (!= (- 1.0 (+ (+ x (hypot 1.0 x)) -1.0)) 0.0) (/ (- 1.0 (* (- x (- 1.0 (hypot 1.0 x))) (+ (+ x (hypot 1.0 x)) -1.0))) (- 1.0 (+ (+ x (hypot 1.0 x)) -1.0))) (+ x (hypot 1.0 x)))) (log1p (if (!= (+ (- (hypot 1.0 x) x) -1.0) 0.0) (* (+ 1.0 (- x (hypot 1.0 x))) (/ (+ x (+ (hypot 1.0 x) -1.0)) (+ 1.0 (- x (hypot 1.0 x))))) (+ x (+ (hypot 1.0 x) -1.0)))))",
    "output_parens": 44,
    "avg_bits_err_input": 53.08757398226754,
    "avg_bits_err_output": 13.972591137053595,
    "avg_bits_err_improve": 39.114982845213945,
    "time": 14627.597412109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.738474669718629,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.738474669718629,
    "time": 2450.008056640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.011875,
    "avg_bits_err_improve": 0,
    "time": 2788.761474609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1193.80419921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 13.043903285727616,
    "avg_bits_err_output": 0.6367630215194239,
    "avg_bits_err_improve": 12.407140264208191,
    "time": 18041.43017578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (+ (* (* x1 (/ (* (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) 4.0) (fma x1 x1 1.0))) x1) (* (* x1 -6.0) x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.511444133549421,
    "avg_bits_err_output": 0.27812032564986944,
    "avg_bits_err_improve": 0.23332380789955154,
    "time": 69934.2275390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= u -6e-109) (/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u)) (if (<= u 1.25e-65) (* (/ (/ t1 (+ t1 u)) (+ t1 u)) (- v)) (/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))))",
    "output_parens": 22,
    "avg_bits_err_input": 18.071336238946007,
    "avg_bits_err_output": 0.6257855530008993,
    "avg_bits_err_improve": 17.445550685945108,
    "time": 5921.47265625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2382406015629507,
    "avg_bits_err_output": 0.19248120312590142,
    "avg_bits_err_improve": 0.04575939843704929,
    "time": 4823.437255859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003875,
    "avg_bits_err_output": 0.003875,
    "avg_bits_err_improve": 0,
    "time": 2304.37890625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (- (/ (* PI 0.5) a) (* PI (/ 0.5 b))) (+ b a)) (- b a))",
    "output_parens": 9,
    "avg_bits_err_input": 14.060157334164336,
    "avg_bits_err_output": 0.2770595875079326,
    "avg_bits_err_improve": 13.783097746656402,
    "time": 16882.7646484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (+ (- (fma (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0))) -1.0) (/ (exp (* x (- -1.0 eps))) eps)) (- (/ -1.0 (exp (fma eps x x))))) 1.0) 2.0)",
    "output_parens": 18,
    "avg_bits_err_input": 29.404405551391168,
    "avg_bits_err_output": 1.13060458265896,
    "avg_bits_err_improve": 28.273800968732207,
    "time": 22064.535888671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (- 4.0 (+ (/ (- 4.0 (/ 4.0 (fma (/ 1.0 t) t t))) (fma (/ 1.0 t) t t)) (/ 4.0 (fma (/ 1.0 t) t t)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.034,
    "avg_bits_err_output": 0.01810375937481971,
    "avg_bits_err_improve": 0.015896240625180292,
    "time": 6946.17919921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(+ (/ 1.0 (+ 2.0 (+ 2.0 (* (- 2.0 (/ (/ 4.0 t) (+ (/ 2.0 t) 2.0))) (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))))))) (/ (+ 1.0 (* (- 2.0 (/ (/ 4.0 t) (+ (/ 2.0 t) 2.0))) (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))))) (+ 2.0 (+ 2.0 (* (- 2.0 (/ (/ 4.0 t) (+ (/ 2.0 t) 2.0))) (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))))))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.04125,
    "avg_bits_err_output": 0.081125,
    "avg_bits_err_improve": -0.039875,
    "time": 15790.286865234375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (* (/ t (+ t 1.0)) (* (/ t (+ t 1.0)) 4.0)) -1.0) (- (* (/ t (+ t 1.0)) (* (/ t (+ t 1.0)) 4.0)) -2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0395,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 0.032,
    "time": 15188.61279296875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3208.6630859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7344.29931640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2549.297607421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.83415294849226,
    "avg_bits_err_output": 0.242125,
    "avg_bits_err_improve": 7.592027948492261,
    "time": 36679.3193359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.251812304277228,
    "avg_bits_err_output": 7.251812304277228,
    "avg_bits_err_improve": 0,
    "time": 15034.643798828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 15.811674165106716,
    "avg_bits_err_output": 15.811674165106716,
    "avg_bits_err_improve": 0,
    "time": 15608.06201171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (fma (+ (cos x) 1.0) (expm1 (* 10.0 (* x x))) (+ (cos x) 1.0)) (exp (* 10.0 (* x x))))",
    "output_parens": 12,
    "avg_bits_err_input": 3.533808319946438,
    "avg_bits_err_output": 3.540710956795327,
    "avg_bits_err_improve": -0.006902636848889365,
    "time": 15823.23828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 14.969313845086171,
    "avg_bits_err_output": 14.969313845086171,
    "avg_bits_err_improve": 0,
    "time": 11661.113525390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.13321700459055,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.13321700459055,
    "time": 4841.813720703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.14235252904971,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.14160252904971,
    "time": 4478.980224609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.297375,
    "avg_bits_err_improve": 63.702625,
    "time": 19437.133544921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (* t 4e-32))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325748725749,
    "avg_bits_err_output": 0.40519812031259017,
    "avg_bits_err_improve": 61.4380593669449,
    "time": 8626.3046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.31682482700995,
    "avg_bits_err_output": 34.31682482700995,
    "avg_bits_err_improve": 0,
    "time": 25854.752197265625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.03373881434307,
    "avg_bits_err_output": 34.03373881434307,
    "avg_bits_err_improve": 0,
    "time": 22763.3701171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1841.41943359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.27328378007921,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 40.26315878007921,
    "time": 7073.238037109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(- (/ (* x x) (fma x x (* y y))) (/ (* y y) (fma x x (* y y))))",
    "output_parens": 9,
    "avg_bits_err_input": 20.603900004970843,
    "avg_bits_err_output": 20.602854738884897,
    "avg_bits_err_improve": 0.0010452660859456842,
    "time": 7365.82080078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.675466294662739,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.675466294662739,
    "time": 8762.6044921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ (+ b c) d))",
    "output_parens": 3,
    "avg_bits_err_input": 0.039,
    "avg_bits_err_output": 0.039,
    "avg_bits_err_improve": 0,
    "time": 4878.418212890625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02052124062518029,
    "avg_bits_err_output": 0.0115,
    "avg_bits_err_improve": 0.00902124062518029,
    "time": 3104.298583984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 0.0006250000000000006,
    "time": 2918.99658203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 1948.50732421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ d a) (+ e (+ c b)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39513477500432725,
    "avg_bits_err_output": 0.248125,
    "avg_bits_err_improve": 0.14700977500432724,
    "time": 5960.985595703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(- 1.0 (cos x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.82809672115579,
    "avg_bits_err_output": 29.82809672115579,
    "avg_bits_err_improve": 0,
    "time": 7060.455078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 25.156603882026246,
    "avg_bits_err_output": 0.29327124062518034,
    "avg_bits_err_improve": 24.863332641401065,
    "time": 9677.15283203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(- (expm1 (log1p (/ x (tan x)))) (/ (sin x) (tan x)))",
    "output_parens": 8,
    "avg_bits_err_input": 30.202534991187456,
    "avg_bits_err_output": 30.2230469831055,
    "avg_bits_err_improve": -0.020511991918045425,
    "time": 32294.576171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00475,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.00375,
    "time": 2178.5693359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 1e-270) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (!= (/ (- 100.0 (* 100.0 (pow (+ (/ i n) 1.0) n))) (/ i n)) 0.0) (/ 1.0 (/ 1.0 (/ (fma (pow (+ (/ i n) 1.0) n) 100.0 -100.0) (/ i n)))) (/ (fma (pow (+ (/ i n) 1.0) n) 100.0 -100.0) (/ i n))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.793414774631046,
    "avg_bits_err_output": 13.321919824172076,
    "avg_bits_err_improve": 34.47149495045897,
    "time": 27460.616455078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) -2e-58) (+ (* b (/ d (fma d d (* c c)))) (* a (/ c (fma d d (* c c))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 4e+87) (/ (fma d b (* a c)) (+ (* c c) (* d d))) (+ (* b (/ d (fma d d (* c c)))) (* a (/ c (fma d d (* c c)))))))",
    "output_parens": 42,
    "avg_bits_err_input": 26.54672000234614,
    "avg_bits_err_output": 22.741948329249965,
    "avg_bits_err_improve": 3.8047716730961767,
    "time": 14291.748291015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) -1e-240) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.919322503604423,
    "avg_bits_err_output": 24.57827572785116,
    "avg_bits_err_improve": 2.341046775753263,
    "time": 15260.9541015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.034625,
    "avg_bits_err_output": 0.02209512018848141,
    "avg_bits_err_improve": 0.012529879811518593,
    "time": 6562.101318359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (if (!= (* ux ux) 0.0) (/ (* (* ux ux) (- (fma (fma 2.0 (- 1.0 ux) (* ux maxCos)) (* ux maxCos) (- (* ux ux) ux)) ux)) (* ux ux)) (- (fma (fma 2.0 (- 1.0 ux) (* ux maxCos)) (* ux maxCos) (- (* ux ux) ux)) ux)) -1.0)))",
    "output_parens": 29,
    "avg_bits_err_input": 13.48019772248627,
    "avg_bits_err_output": 0.5519896012965821,
    "avg_bits_err_improve": 12.928208121189687,
    "time": 30480.90771484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (fma (- 1.0 ux) (- 1.0 ux) (- 1.0 (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))) 0.0) (/ (* (fma (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (- (* ux ux) (+ ux ux))) (+ (fma (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (* (- 1.0 ux) (+ ux -1.0))) -1.0)) (fma (- 1.0 ux) (- 1.0 ux) (- 1.0 (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))) (- (+ ux (- ux (* ux ux))) (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))))",
    "output_parens": 58,
    "avg_bits_err_input": 13.519301336611504,
    "avg_bits_err_output": 0.3498634647003926,
    "avg_bits_err_improve": 13.16943787191111,
    "time": 27112.45166015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (+ (log1p (expm1 (+ (cos (* 2.0 (* uy PI))) -1.0))) 1.0) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (fma (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) yi) (* (- 1.0 ux) (* (* ux maxCos) zi))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.3487379499286087,
    "avg_bits_err_output": 0.34932668192670363,
    "avg_bits_err_improve": -0.000588731998094949,
    "time": 43196.818359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.20178646459810826,
    "avg_bits_err_output": 0.20178646459810826,
    "avg_bits_err_improve": 0,
    "time": 21674.48193359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (pow (/ u1 (- 1.0 u1)) 0.5) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5406407732888537,
    "avg_bits_err_output": 0.5407657732888538,
    "avg_bits_err_improve": -0.00012500000000004174,
    "time": 19740.9736328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (pow (/ u1 (- 1.0 u1)) 0.5) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.33783987387645614,
    "avg_bits_err_output": 0.3377148738764561,
    "avg_bits_err_improve": 0.00012500000000004174,
    "time": 18135.537353515625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (/ (+ 1.0 (+ (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ (- PI) s))))) (/ -1.0 (+ 1.0 (exp (/ PI s)))))) (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 70,
    "avg_bits_err_input": 0.34373294970418733,
    "avg_bits_err_output": 0.31257827466972693,
    "avg_bits_err_improve": 0.0311546750344604,
    "time": 47665.041748046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.053398950078813255,
    "avg_bits_err_output": 0.03756563589897472,
    "avg_bits_err_improve": 0.015833314179838534,
    "time": 9396.61767578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (/ (- (fabs x)) s)) (+ (+ (* s (exp (/ (fabs x) (/ s -2.0)))) (* (exp (/ (fabs x) (- s))) (+ s s))) s))",
    "output_parens": 18,
    "avg_bits_err_input": 0.13206295199689416,
    "avg_bits_err_output": 0.11189077599026875,
    "avg_bits_err_improve": 0.02017217600662541,
    "time": 20931.40576171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641972797300889,
    "avg_bits_err_output": 0.6641972797300889,
    "avg_bits_err_improve": 0,
    "time": 21970.840087890625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.16187538088854972,
    "avg_bits_err_output": 0.15675208363220644,
    "avg_bits_err_improve": 0.005123297256343279,
    "time": 20146.119873046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O sinTheta_O) (- (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.549048912363797,
    "avg_bits_err_output": 2.5433323914355888,
    "avg_bits_err_improve": 0.00571652092820818,
    "time": 26500.3330078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ 0.5 v) (* (* cosTheta_i cosTheta_O) (/ (/ (exp (- (* sinTheta_i (/ sinTheta_O v)))) v) (sinh (/ 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4686063684886611,
    "avg_bits_err_output": 0.4278098095957578,
    "avg_bits_err_improve": 0.04079655889290329,
    "time": 23807.289794921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp 0.6931) (* (if (!= (exp (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v)) 0.0) (/ 1.0 (/ 1.0 (exp (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v)))) (exp (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v))) (/ 0.5 v)))",
    "output_parens": 23,
    "avg_bits_err_input": 0.11032161080318517,
    "avg_bits_err_output": 0.15016147843307606,
    "avg_bits_err_improve": -0.03983986762989089,
    "time": 21949.4736328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (- -1.0 (* alpha (- alpha))) (* (log (* alpha alpha)) PI)) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.47728999914480447,
    "avg_bits_err_output": 0.4807199540788685,
    "avg_bits_err_improve": -0.003429954934064061,
    "time": 25001.51416015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- (fma u -1.3333333333333333 0.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 14,
    "avg_bits_err_input": 1.2990784434495346,
    "avg_bits_err_output": 0.4404750015744897,
    "avg_bits_err_improve": 0.8586034418750449,
    "time": 28158.69677734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (expm1 (if (!= (log1p (log (/ 1.0 (fma u -4.0 1.0)))) 0.0) (/ 1.0 (/ 1.0 (log1p (log (/ 1.0 (fma u -4.0 1.0)))))) (log1p (log (/ 1.0 (fma u -4.0 1.0)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 12.58015451999077,
    "avg_bits_err_output": 12.589196413165824,
    "avg_bits_err_improve": -0.009041893175053772,
    "time": 23822.026123046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ 0.125 (* PI s))) (* 0.75 (/ (exp (/ r (* -3.0 s))) (* s (* PI 6.0))))) r)",
    "output_parens": 15,
    "avg_bits_err_input": 0.1470153545370418,
    "avg_bits_err_output": 0.14913475427769127,
    "avg_bits_err_improve": -0.0021193997406494802,
    "time": 25140.6416015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8823517852884531,
    "avg_bits_err_output": 0.7443515937158445,
    "avg_bits_err_improve": 0.13800019157260868,
    "time": 29798.2578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(log1p (expm1 (/ 1.0 (+ 1.0 (+ c (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (* cosTheta (sqrt PI)) (exp (* cosTheta cosTheta)))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6824175854522285,
    "avg_bits_err_output": 0.47050539842151823,
    "avg_bits_err_improve": 0.2119121870307103,
    "time": 21128.439697265625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(if (!= (+ (sin (/ 2.0 (/ 1.0 (* PI u2)))) (- (* (sin (* 2.0 (* PI u2))) (+ (sqrt (- (log (- 1.0 u1)))) -1.0)))) 0.0) (/ (+ (fma (* (sin (* 2.0 (* PI u2))) (+ (sqrt (- (log (- 1.0 u1)))) -1.0)) (* (sin (* 2.0 (* PI u2))) (- 1.0 (sqrt (- (log (- 1.0 u1)))))) (* (sin (/ 4.0 (/ (/ 2.0 PI) u2))) (sin (/ 4.0 (/ (/ 2.0 PI) u2))))) (fma (* (fabs (+ (sqrt (- (log (- 1.0 u1)))) -1.0)) (* (sin (* 2.0 (* PI u2))) (- (sin (* 2.0 (* PI u2)))))) (fabs (+ (sqrt (- (log (- 1.0 u1)))) -1.0)) (* (sin (* 2.0 (* PI u2))) (* (sin (* 2.0 (* PI u2))) (* (+ (sqrt (- (log (- 1.0 u1)))) -1.0) (+ (sqrt (- (log (- 1.0 u1)))) -1.0)))))) (+ (sin (/ 2.0 (/ 1.0 (* PI u2)))) (- (* (sin (* 2.0 (* PI u2))) (+ (sqrt (- (log (- 1.0 u1)))) -1.0))))) (+ (sin (/ 2.0 (/ 1.0 (* PI u2)))) (* (sin (* 2.0 (* PI u2))) (+ (sqrt (- (log (- 1.0 u1)))) -1.0))))",
    "output_parens": 117,
    "avg_bits_err_input": 13.323353505942526,
    "avg_bits_err_output": 13.133070774822393,
    "avg_bits_err_improve": 0.19028273112013316,
    "time": 33764.973876953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(log1p (- (+ (expm1 (* (sqrt (- (log (- 1.0 u1)))) (cos (* 2.0 (* PI u2))))) -1.0) -1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 13.368858134355358,
    "avg_bits_err_output": 13.38886001230596,
    "avg_bits_err_improve": -0.02000187795060171,
    "time": 23248.75634765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- (log (- 1.0 u0))) (if (!= (- (* alpha alpha) alpha) 0.0) (/ (* (* alpha alpha) (- (* alpha alpha) alpha)) (- (* alpha alpha) alpha)) (+ alpha (- (* alpha alpha) alpha))))",
    "output_parens": 18,
    "avg_bits_err_input": 14.121224912919445,
    "avg_bits_err_output": 14.12475952866058,
    "avg_bits_err_improve": -0.0035346157411346724,
    "time": 19393.7060546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (/ (/ cos2phi alphax) alphax) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.447327489928941,
    "avg_bits_err_output": 12.447453820833282,
    "avg_bits_err_improve": -0.00012633090434022165,
    "time": 17996.77978515625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (if (!= (* PI (- l)) 0.0) (/ 1.0 (/ (/ 1.0 l) PI)) (* PI l))) F) F))",
    "output_parens": 13,
    "avg_bits_err_input": 16.601878004565418,
    "avg_bits_err_output": 12.474622379436507,
    "avg_bits_err_improve": 4.12725562512891,
    "time": 26892.731689453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2144387218755409,
    "avg_bits_err_output": 0.15,
    "avg_bits_err_improve": 0.0644387218755409,
    "time": 13100.79736328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (* (/ (if (!= (pow (fma 2.0 x (fma F F 2.0)) -0.5) 0.0) (/ 1.0 (/ 1.0 (pow (fma 2.0 x (fma F F 2.0)) -0.5))) (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)) F))",
    "output_parens": 20,
    "avg_bits_err_input": 14.15189048950995,
    "avg_bits_err_output": 10.707910394902473,
    "avg_bits_err_improve": 3.4439800946074772,
    "time": 18034.613525390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(+ 1.0 (+ (/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.25)) -1.0))",
    "output_parens": 34,
    "avg_bits_err_input": 61.46676337592357,
    "avg_bits_err_output": 1.8995670820448922,
    "avg_bits_err_improve": 59.56719629387868,
    "time": 50971.282958984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (- (* l (* l (+ -1.0 (/ x (+ x -1.0))))) (/ (* l (- l)) (+ x -1.0)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 43.27858462668803,
    "avg_bits_err_output": 35.34378467920486,
    "avg_bits_err_improve": 7.934799947483171,
    "time": 22701.582763671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.821904746008287,
    "avg_bits_err_output": 3.821904746008287,
    "avg_bits_err_improve": 0,
    "time": 28016.29736328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (pow (- (* (pow (* 2.0 (/ l Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0) -0.5) 0.5)))",
    "output_parens": 14,
    "avg_bits_err_input": 0.9649431985483787,
    "avg_bits_err_output": 0.9643181985483787,
    "avg_bits_err_improve": 0.0006249999999999867,
    "time": 14727.613525390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- (+ 1.0 (pow (/ Om Omc) 2.0)) 2.0) (- -1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.122000677655011,
    "avg_bits_err_output": 10.12306861262298,
    "avg_bits_err_improve": -0.0010679349679687533,
    "time": 27345.268310546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 2e-102) (sqrt (- (* (* 2.0 (* n (+ t (* (/ (* l l) Om) -2.0)))) U) (* U (* (* n (- U U*)) (* (pow (/ l Om) 2.0) (* 2.0 n)))))) (if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 5e+146) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* (* 2.0 n) (* U (- t (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* l (* (/ l Om) 2.0)))))))))",
    "output_parens": 77,
    "avg_bits_err_input": 33.972974253867456,
    "avg_bits_err_output": 29.338041474989776,
    "avg_bits_err_improve": 4.63493277887768,
    "time": 38185.856689453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= k 1.6e-100) (/ 2.0 (* (/ (tan k) l) (* (pow (/ k t) 2.0) (* (pow t 3.0) (/ (sin k) l))))) (if (<= k 3.75e+34) (/ 2.0 (/ (/ (* (* (sin k) (exp (fma 3.0 (log t) (* 2.0 (log (/ k t)))))) (tan k)) l) l)) (/ 2.0 (/ (* (/ (pow (/ k t) 2.0) l) (* (pow t 3.0) (* (sin k) (tan k)))) l))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.131482056898776,
    "avg_bits_err_output": 35.95649025211467,
    "avg_bits_err_improve": 11.174991804784106,
    "time": 43431.311279296875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (pow t 3.0) (/ (sin k) l)) (* (tan k) (/ (+ 2.0 (pow (/ k t) 2.0)) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.47317359083393,
    "avg_bits_err_output": 26.685279622517548,
    "avg_bits_err_improve": 5.787893968316382,
    "time": 24665.284912109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (/ (* a2 a2) (sqrt 2.0)) (* a1 (/ a1 (sqrt 2.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5343601531460959,
    "avg_bits_err_output": 0.47263101720399786,
    "avg_bits_err_improve": 0.061729135942098,
    "time": 23485.75830078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (/ (pow (* PI (* n 2.0)) (* k -0.5)) (sqrt k)) (sqrt (* PI (* n 2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.49964689433809917,
    "avg_bits_err_output": 0.463266913511674,
    "avg_bits_err_improve": 0.036379980826425184,
    "time": 28017.220458984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (/ (* (cos (/ K 2.0)) J) (exp l)) (expm1 (+ l l))) U)",
    "output_parens": 9,
    "avg_bits_err_input": 17.01749178768661,
    "avg_bits_err_output": 0.07437744375108174,
    "avg_bits_err_improve": 16.943114343935527,
    "time": 19394.735595703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (+ (+ (* K (/ (+ m n) 2.0)) (* K (/ m 2.0))) (* K (/ n 2.0))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.429412809716103,
    "avg_bits_err_output": 15.425068217421785,
    "avg_bits_err_improve": 0.004344592294318161,
    "time": 16302.676513671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* -2.0 J) (* (cos (/ K 2.0)) (sqrt (+ 1.0 (pow (/ (/ U (+ J J)) (cos (/ K 2.0))) 2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.04782312031259,
    "avg_bits_err_output": 18.055179323438498,
    "avg_bits_err_improve": -0.007356203125908678,
    "time": 31203.03466796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) (- INFINITY)) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))) (if (<= (/ h l) -2e-74) (* w0 (sqrt (- 1.0 (* (pow (* (/ (/ D d) 2.0) M) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))))",
    "output_parens": 34,
    "avg_bits_err_input": 13.978490889181716,
    "avg_bits_err_output": 10.143472267066597,
    "avg_bits_err_improve": 3.8350186221151183,
    "time": 16871.807373046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 5e-324) (* c0 (sqrt (/ (* A (/ 2.0 l)) (+ V V)))) (if (<= (/ A (* V l)) 5e+266) (* c0 (sqrt (+ (/ (+ A (+ A A)) (* (+ l l) (+ V V))) (/ A (* (+ l l) (+ V V)))))) (* c0 (sqrt (/ (* A (/ 2.0 l)) (+ V V))))))",
    "output_parens": 33,
    "avg_bits_err_input": 18.650584142982236,
    "avg_bits_err_output": 14.799770323793934,
    "avg_bits_err_improve": 3.8508138191883017,
    "time": 17661.593505859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* D D) 5e-15) (* (/ c0 (* 2.0 w)) (+ (* d (/ (/ (* d (/ c0 h)) (* w D)) D)) (sqrt (* (fma d (/ (/ (* d (/ c0 h)) (* w D)) D) M) (fma d (/ (/ (* d (/ c0 h)) (* w D)) D) (- M)))))) (* (/ c0 (* 2.0 w)) (+ (* d (* c0 (/ (/ (/ d D) (* D h)) w))) (sqrt (fma (* d (* c0 (/ (/ (/ d D) (* D h)) w))) (* d (* c0 (/ (/ (/ d D) (* D h)) w))) (* M (- M)))))))",
    "output_parens": 54,
    "avg_bits_err_input": 59.53759391199181,
    "avg_bits_err_output": 53.134515463320895,
    "avg_bits_err_improve": 6.403078448670918,
    "time": 48134.69970703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (* (sqrt (/ d l)) (- (sqrt (/ d h)) (* (/ (pow (* D (/ M (* 2.0 d))) 2.0) l) (* (* 0.5 h) (sqrt (/ d h)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 0.0) (* (sqrt (/ d h)) (* (sqrt (/ d l)) (- 1.0 (* (pow (/ (* M (* D 0.5)) d) 2.0) (/ h (+ l l)))))) (* (sqrt (/ d l)) (- (sqrt (/ d h)) (* (/ (pow (* D (/ M (* 2.0 d))) 2.0) l) (* (* 0.5 h) (sqrt (/ d h))))))))",
    "output_parens": 79,
    "avg_bits_err_input": 25.561166891117207,
    "avg_bits_err_output": 23.35382435475017,
    "avg_bits_err_improve": 2.2073425363670367,
    "time": 44298.149658203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (/ (/ (- (/ 0.25 (hypot 1.0 x)) 0.25) (hypot 1.0 x)) (/ -0.5 (hypot 1.0 x))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 26,
    "avg_bits_err_input": 15.804121893032281,
    "avg_bits_err_output": 15.323942152670732,
    "avg_bits_err_improve": 0.48017974036154953,
    "time": 23460.40234375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9842712406251803,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 0.9732712406251803,
    "time": 3831.114501953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (+ 2.0 (* (* v v) -6.0)))) (* t (- 1.0 (* v v)))) (/ (* (/ 5.0 (* PI (* t (- 1.0 (* v v))))) (* v v)) (sqrt (+ 2.0 (* (* v v) -6.0)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.43664791206242864,
    "avg_bits_err_output": 0.12406947465304274,
    "avg_bits_err_improve": 0.3125784374093859,
    "time": 18060.941162109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* (* 3.0 v) v)))) (- 1.0 (* v v)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.01102124062518029,
    "avg_bits_err_output": 0.01102124062518029,
    "avg_bits_err_improve": 0,
    "time": 11541.68115234375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5026736243882015,
    "avg_bits_err_output": 0.5026736243882015,
    "avg_bits_err_improve": 0,
    "time": 10997.491943359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (- (- -1.0 (* k (- -10.0 k))) -1.0) -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 2.1803358968477475,
    "avg_bits_err_output": 2.1806071374729274,
    "avg_bits_err_improve": -0.00027124062517991376,
    "time": 14268.21142578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (- (- (/ (- (+ mu Vef) (- Ec EDonor)) KbT) -1.0) 1.0)) -1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.01842832603964897,
    "avg_bits_err_output": 0.018428326039648966,
    "avg_bits_err_improve": 3.469446951953614e-18,
    "time": 10998.110595703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (fma a a (* b b)) 2.0) (* b (* b 4.0))) -1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.18791059254041304,
    "avg_bits_err_output": 0.18744123160264262,
    "avg_bits_err_improve": 0.0004693609377704189,
    "time": 16891.9755859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (if (!= (fma 4.0 (fma a (fma a a a) (* b (+ b (* b (* a -3.0))))) (pow (fma a a (* b b)) 2.0)) 0.0) (/ 1.0 (/ 1.0 (fma 4.0 (fma a (fma a a a) (* b (+ b (* b (* a -3.0))))) (pow (fma a a (* b b)) 2.0)))) (fma 4.0 (fma a (fma a a a) (* b (+ b (* b (* a -3.0))))) (pow (fma a a (* b b)) 2.0))) (fma 4.0 (fma b (* (fma 3.0 a -1.0) (- b)) (* a (fma a a a))) (pow (fma a a (* b b)) 2.0))) 1.0)",
    "output_parens": 50,
    "avg_bits_err_input": 0.1883576957532427,
    "avg_bits_err_output": 0.205951653053726,
    "avg_bits_err_improve": -0.0175939573004833,
    "time": 29264.280517578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18364499700213033,
    "avg_bits_err_output": 0.18364499700213033,
    "avg_bits_err_improve": 0,
    "time": 26690.8876953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (+ (/ x (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0)) (/ (+ x (+ x x)) (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.064064303577362,
    "avg_bits_err_output": 13.168073381764538,
    "avg_bits_err_improve": -0.10400907818717542,
    "time": 19731.368896484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.81136276382824,
    "avg_bits_err_output": 0.048375,
    "avg_bits_err_improve": 40.76298776382824,
    "time": 5282.927734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (if (!= x 0.0) (/ (* x (- (tan x) x)) x) (- (tan x) x))) (/ x (- (tan x) x)))",
    "output_parens": 14,
    "avg_bits_err_input": 30.762234360860536,
    "avg_bits_err_output": 30.73457901071344,
    "avg_bits_err_improve": 0.027655350147096414,
    "time": 26192.106689453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) (- b_2)) 0.0) (* (/ c (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.928949676298444,
    "avg_bits_err_output": 22.012052279773755,
    "avg_bits_err_improve": 11.91689739652469,
    "time": 15577.027587890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (!= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (- (/ (/ (- (* a c) 0.0) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) 0.0) (/ (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) (- a)))",
    "output_parens": 25,
    "avg_bits_err_input": 34.00131642707157,
    "avg_bits_err_output": 22.29016412312265,
    "avg_bits_err_improve": 11.711152303948921,
    "time": 20708.20166015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (- 1.0 (cos x)) x) (/ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 31.479503745857624,
    "avg_bits_err_output": 30.712277300496005,
    "avg_bits_err_improve": 0.7672264453616187,
    "time": 18236.040283203125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.72777396419889,
    "avg_bits_err_output": 11.030458543518415,
    "avg_bits_err_improve": 21.697315420680475,
    "time": 31472.599609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (expm1 (- (if (!= (+ (log1p N) 2.0) 0.0) (/ (fma (+ (log1p N) 1.0) (+ (log1p N) 1.0) -1.0) (+ (log1p N) 2.0)) (log1p N)) (log N)))))",
    "output_parens": 18,
    "avg_bits_err_input": 29.78660663386939,
    "avg_bits_err_output": 29.802391886417823,
    "avg_bits_err_improve": -0.015785252548432993,
    "time": 12702.282958984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (+ (/ 1.0 (+ 1.0 x)) (/ -1.0 x)) (/ 1.0 (* (+ 1.0 x) (log (+ 1.0 (expm1 (/ 1.0 (+ 1.0 x))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 14.227968964086289,
    "avg_bits_err_output": 14.242989142744575,
    "avg_bits_err_improve": -0.015020178658286198,
    "time": 20165.5537109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (cos (+ x eps)) (cos x))",
    "output_parens": 4,
    "avg_bits_err_input": 39.80847367086928,
    "avg_bits_err_output": 39.80847367086928,
    "avg_bits_err_improve": 0,
    "time": 23594.9951171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (log1p (expm1 (if (!= (+ (cbrt x) 1.0) 0.0) (/ (- (* (cbrt (- x -1.0)) (+ (cbrt x) 1.0)) (* (+ (cbrt x) 1.0) (+ (cbrt x) 1.0))) (+ (cbrt x) 1.0)) (- (expm1 (* 0.3333333333333333 (log1p x))) (cbrt x))))) 1.0)",
    "output_parens": 26,
    "avg_bits_err_input": 29.97572181503202,
    "avg_bits_err_output": 29.594903204637834,
    "avg_bits_err_improve": 0.3808186103941864,
    "time": 13614.9111328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(log (exp (/ (- 1.0 (cos x)) (sin x))))",
    "output_parens": 6,
    "avg_bits_err_input": 30.441579290088793,
    "avg_bits_err_output": 30.500896650281355,
    "avg_bits_err_improve": -0.05931736019256206,
    "time": 23243.32080078125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* (/ c (+ b (sqrt (fma a (* c -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.157592644304245,
    "avg_bits_err_output": 21.914920904825276,
    "avg_bits_err_improve": 12.242671739478968,
    "time": 24263.513427734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 34.35626756182946,
    "avg_bits_err_output": 34.356165350965625,
    "avg_bits_err_improve": 0.00010221086383666034,
    "time": 23463.638427734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.43951174953297,
    "avg_bits_err_output": 0.7848302595954028,
    "avg_bits_err_improve": 60.654681489937566,
    "time": 24130.281982421875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log (+ n 1.0)) (log n)) n)) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 63.00671293506907,
    "avg_bits_err_output": 44.217691249522346,
    "avg_bits_err_improve": 18.78902168554672,
    "time": 15247.65478515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.7625527710156,
    "avg_bits_err_output": 58.7260410863843,
    "avg_bits_err_improve": 0.036511684631300056,
    "time": 18822.75439453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (+ (- 1.0 (/ (/ x (tan x)) 2.0)) (- (/ (/ x (tan x)) 2.0))) x)",
    "output_parens": 10,
    "avg_bits_err_input": 59.934265574616184,
    "avg_bits_err_output": 59.924079165129655,
    "avg_bits_err_improve": 0.010186409486529158,
    "time": 28987.151123046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* eps (/ (expm1 (* eps (+ a b))) (expm1 (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.224248678815805,
    "avg_bits_err_output": 28.918644250614495,
    "avg_bits_err_improve": 31.30560442820131,
    "time": 27703.942138671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(- (/ (+ (exp x) 1.0) (expm1 x)) (/ 1.0 (expm1 x)))",
    "output_parens": 7,
    "avg_bits_err_input": 41.09620958617261,
    "avg_bits_err_output": 0.5184289769542354,
    "avg_bits_err_improve": 40.57778060921838,
    "time": 6217.925048828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.8305333361147,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.8299083361147,
    "time": 4010.532470703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(if (!= (exp (* a x)) 0.0) (/ (* (exp (* a x)) (expm1 (* a x))) (exp (* a x))) (expm1 (* a x)))",
    "output_parens": 14,
    "avg_bits_err_input": 29.26460244412646,
    "avg_bits_err_output": 0.04617495803490815,
    "avg_bits_err_improve": 29.218427486091553,
    "time": 8067.2431640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (if (!= (expm1 (- x)) 0.0) (/ (* (expm1 (- x)) (+ (expm1 (- x)) (expm1 x))) (- (expm1 (- x)))) (- 2.0 (+ (exp x) (exp (- x))))))",
    "output_parens": 21,
    "avg_bits_err_input": 29.557129343382474,
    "avg_bits_err_output": 28.758850516540605,
    "avg_bits_err_improve": 0.7982788268418695,
    "time": 25765.041748046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (if (!= (/ -1.0 (* (+ x -1.0) (- 1.0 x))) 0.0) (/ (fma (/ -1.0 (* (+ x -1.0) (- 1.0 x))) (/ -1.0 (* (+ x -1.0) (- 1.0 x))) (* (/ (+ (- (/ -0.5 (+ 1.0 x)) (/ -1.0 x)) (- (/ -0.5 (+ 1.0 x)) (/ -1.0 x))) (- 1.0 x)) (/ -1.0 (* (+ x -1.0) (- 1.0 x))))) (/ -1.0 (* (+ x -1.0) (- 1.0 x)))) (/ (+ (- (/ -0.5 (+ 1.0 x)) (/ -1.0 x)) (+ (- (/ -0.5 (+ 1.0 x)) (/ -1.0 x)) (/ -1.0 (+ x -1.0)))) (- 1.0 x))) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 64,
    "avg_bits_err_input": 9.862247228978633,
    "avg_bits_err_output": 9.852174350031545,
    "avg_bits_err_improve": 0.010072878947088526,
    "time": 28170.96875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (tan x))",
    "output_parens": 4,
    "avg_bits_err_input": 37.14351349314595,
    "avg_bits_err_output": 37.14351349314595,
    "avg_bits_err_improve": 0,
    "time": 20444.978271484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.103093410625217,
    "avg_bits_err_output": 0.1642430453140325,
    "avg_bits_err_improve": 29.938850365311183,
    "time": 13762.2744140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 37.06058064168207,
    "avg_bits_err_output": 37.06058064168207,
    "avg_bits_err_improve": 0,
    "time": 20054.671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (/ 1.0 (sqrt x)) (if (!= (+ 1.0 (/ 1.0 (sqrt (- x -1.0)))) 0.0) (/ (+ 1.0 (/ 1.0 (sqrt (- x -1.0)))) (* (sqrt (- x -1.0)) (+ 1.0 (/ 1.0 (sqrt (- x -1.0)))))) (/ 1.0 (sqrt (- x -1.0)))))",
    "output_parens": 24,
    "avg_bits_err_input": 19.78679781097523,
    "avg_bits_err_output": 19.779897817314136,
    "avg_bits_err_improve": 0.0068999936610936174,
    "time": 16399.26806640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (- (+ 1.0 (- (+ (atan (+ 1.0 N)) -1.0) -1.0)) (atan N)) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 15.702685266654953,
    "avg_bits_err_output": 15.711797053454735,
    "avg_bits_err_improve": -0.00911178679978164,
    "time": 10788.06591796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.68373776830271,
    "avg_bits_err_output": 1.1927035824343493,
    "avg_bits_err_improve": 28.49103418586836,
    "time": 24920.498779296875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (* (- 1.0 m) (/ (- m (* m m)) v)) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07484680468885217,
    "avg_bits_err_output": 0.07791921918104967,
    "avg_bits_err_improve": -0.0030724144921975005,
    "time": 13132.8486328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (/ (- b) (/ 1.0 a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 16.554429015546823,
    "avg_bits_err_output": 0.2626110906280648,
    "avg_bits_err_improve": 16.291817924918757,
    "time": 10785.29931640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* (sin (* angle (/ PI 180.0))) b) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.127718495623387,
    "avg_bits_err_output": 20.101644816409127,
    "avg_bits_err_improve": 0.02607367921426018,
    "time": 37992.292724609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(fma (sin (* PI (/ angle 180.0))) (* (cos (* PI (/ angle 180.0))) (* -2.0 (- (pow a 2.0) (pow b 2.0)))) (fma (* (pow a 2.0) -2.0) (* (sin (* PI (/ angle 180.0))) (cos (* PI (/ angle 180.0)))) (* (sin (* PI (/ angle 180.0))) (* (* 2.0 (pow a 2.0)) (log (+ 1.0 (expm1 (cos (* PI (/ angle 180.0))))))))))",
    "output_parens": 35,
    "avg_bits_err_input": 31.189253402311895,
    "avg_bits_err_output": 31.205914695366523,
    "avg_bits_err_improve": -0.0166612930546286,
    "time": 43613.656005859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (+ angle (+ (* (* PI 0.005555555555555556) angle) (- angle))))) 2.0))",
    "output_parens": 14,
    "avg_bits_err_input": 20.250990098620672,
    "avg_bits_err_output": 20.304638560005582,
    "avg_bits_err_improve": -0.05364846138490975,
    "time": 42888.78369140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.174386842188131,
    "avg_bits_err_output": 0.174386842188131,
    "avg_bits_err_improve": 0,
    "time": 11958.429931640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (* (tan x) (tan x))) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.32787923409624165,
    "avg_bits_err_output": 0.3239575338647301,
    "avg_bits_err_improve": 0.00392170023151156,
    "time": 18897.955810546875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13361560156295077,
    "avg_bits_err_output": 0.13354248125036058,
    "avg_bits_err_improve": 7.312031259018581e-05,
    "time": 18463.1748046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (if (!= (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))) 0.0) (/ (* (cos phi1) (* (* (cos phi2) (cos (- lambda1 lambda2))) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))) R)",
    "output_parens": 39,
    "avg_bits_err_input": 16.553132762127607,
    "avg_bits_err_output": 16.57162527341184,
    "avg_bits_err_improve": -0.018492511284232904,
    "time": 33912.613037109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0)))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (+ (* c (* -4.0 a)) (* b b))))) a) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.54578696672873,
    "avg_bits_err_output": 0.16861373789172868,
    "avg_bits_err_improve": 52.377173228837,
    "time": 22414.20751953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.703022829959906,
    "avg_bits_err_output": 0.3447368437626204,
    "avg_bits_err_improve": 28.358285986197284,
    "time": 23755.471923828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 43.95278290847692,
    "avg_bits_err_output": 0.23630714375685077,
    "avg_bits_err_improve": 43.716475764720066,
    "time": 22989.899658203125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.16796812371057,
    "avg_bits_err_output": 34.16796812371057,
    "avg_bits_err_improve": 0,
    "time": 24007.271484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (* (cos (- lambda1 lambda2)) (cos phi2)) 0.0) (/ (* (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)) (* (cos (- lambda1 lambda2)) (cos phi2))) (* (cos (- lambda1 lambda2)) (cos phi2))) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.8658996775858595,
    "avg_bits_err_output": 0.8707864246849314,
    "avg_bits_err_improve": -0.004886747099071886,
    "time": 35220.315185546875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (+ 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0)))))) 0.0) (/ (if (!= (+ 1.0 (/ 16.0 (* (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) 0.0) (/ (if (!= (+ 1.0 (/ (/ 256.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))) 0.0) (/ (- 1.0 (/ (/ (/ 65536.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))))) (+ 1.0 (/ (/ 256.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))))) (- 1.0 (/ (/ 256.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))))) (+ 1.0 (/ 16.0 (* (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))))) (- 1.0 (/ 16.0 (* (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))))) (+ 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0))))))) (- 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0))))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 240,
    "avg_bits_err_input": 29.094274758241443,
    "avg_bits_err_output": 29.045563433705272,
    "avg_bits_err_improve": 0.04871132453617122,
    "time": 31396.42333984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ 1.0 (exp (+ x x))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.341430065011906,
    "avg_bits_err_output": 0.46238684218813103,
    "avg_bits_err_improve": 57.879043222823775,
    "time": 19035.96484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (expm1 (+ x x)) (exp (- x))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.420190970130484,
    "avg_bits_err_output": 0.05669812031259014,
    "avg_bits_err_improve": 58.363492849817895,
    "time": 9457.259033203125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (- (exp x) (/ -1.0 (exp x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007823120312590144,
    "avg_bits_err_output": 0.007823120312590144,
    "avg_bits_err_improve": 0,
    "time": 3885.08740234375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.969375,
    "avg_bits_err_output": 31.969375,
    "avg_bits_err_improve": 0,
    "time": 4100.6455078125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (if (!= (* (/ x (- 1.0 x)) (/ x (- 1.0 x))) 0.0) (/ (if (!= (/ (fma x x -1.0) (* (- 1.0 x) (/ (+ x -1.0) (/ x (- 1.0 x))))) 0.0) (/ (* (/ (fma x x -1.0) (* (- 1.0 x) (/ (+ x -1.0) (/ x (- 1.0 x))))) (/ (fma x x -1.0) (* (- 1.0 x) (/ (+ x -1.0) (/ x (- 1.0 x)))))) (/ (fma x x -1.0) (* (- 1.0 x) (/ (+ x -1.0) (/ x (- 1.0 x)))))) (/ (fma x x -1.0) (* (- 1.0 x) (/ (+ x -1.0) (/ x (- 1.0 x)))))) (/ x (- 1.0 x))) (/ (- -1.0 x) (+ x -1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 58.75718426350197,
    "avg_bits_err_output": 58.754872355130274,
    "avg_bits_err_improve": 0.0023119083716949262,
    "time": 20240.62060546875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.010875,
    "avg_bits_err_output": 0.010875,
    "avg_bits_err_improve": 0,
    "time": 3493.516357421875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12107312031259015,
    "avg_bits_err_output": 0.12107312031259015,
    "avg_bits_err_improve": 0,
    "time": 22044.95849609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (if (!= (* ew (cos t)) 0.0) (/ (* (cos t) (* (cos t) ew)) (cos t)) (* ew (cos t))) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 30,
    "avg_bits_err_input": 0.1320212406251803,
    "avg_bits_err_output": 0.1423798875021635,
    "avg_bits_err_improve": -0.01035864687698318,
    "time": 26306.438232421875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (cos (/ (+ phi1 phi2) 2.0)) (- lambda1 lambda2) (fma (- lambda2) (cos (/ (+ phi1 phi2) 2.0)) (* (cos (/ (+ phi1 phi2) 2.0)) lambda2))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.16164565647196,
    "avg_bits_err_output": 3.7749426851545427,
    "avg_bits_err_improve": 35.38670297131742,
    "time": 27894.443603515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (* (+ a b) (/ (- a b) a)) a)))",
    "output_parens": 7,
    "avg_bits_err_input": 15.001870432482269,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 14.989620432482269,
    "time": 8101.8193359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (+ (+ (+ (cos delta) -1.0) (- (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) 1.0)))",
    "output_parens": 24,
    "avg_bits_err_input": 0.15074603719722948,
    "avg_bits_err_output": 0.1743316210868682,
    "avg_bits_err_improve": -0.023585583889638717,
    "time": 32452.71142578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.54121187401281,
    "avg_bits_err_output": 0.17120545156583533,
    "avg_bits_err_improve": 52.37000642244698,
    "time": 25754.83349609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.833534575413424,
    "avg_bits_err_output": 0.3326800765730469,
    "avg_bits_err_improve": 28.500854498840376,
    "time": 19870.216552734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 44.071963725662876,
    "avg_bits_err_output": 0.2463827078205225,
    "avg_bits_err_improve": 43.82558101784235,
    "time": 26362.56689453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -3.0) (* b b)))) 0.0) (* (/ c (- (- b) (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma a (* c -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 34.19149044542867,
    "avg_bits_err_output": 21.883302746387105,
    "avg_bits_err_improve": 12.308187699041564,
    "time": 19899.70263671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (if (!= (* (sin (- lambda1 lambda2)) (cos phi2)) 0.0) (- (/ 1.0 (/ (/ 1.0 (sin (- lambda1 lambda2))) (cos phi2))) 0.0) (* (sin (- lambda1 lambda2)) (cos phi2))) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 28,
    "avg_bits_err_input": 13.244023484142858,
    "avg_bits_err_output": 13.26445541894863,
    "avg_bits_err_improve": -0.020431934805772656,
    "time": 36963.06103515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.478830136119743,
    "avg_bits_err_output": 0.5415885544994505,
    "avg_bits_err_improve": 28.93724158162029,
    "time": 21331.683837890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.012375,
    "avg_bits_err_output": 0.012375,
    "avg_bits_err_improve": 0,
    "time": 2083.8447265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (if (!= (/ (/ 2.0 (+ 1.0 x)) (+ 1.0 x)) 0.0) (/ (fma (/ (/ 2.0 (+ 1.0 x)) (+ 1.0 x)) (/ (/ 2.0 (+ 1.0 x)) (+ 1.0 x)) (* (/ (/ 2.0 (+ 1.0 x)) (+ 1.0 x)) (* (/ -1.0 (+ x -1.0)) (/ 2.0 (+ 1.0 x))))) (/ (/ 2.0 (+ 1.0 x)) (+ 1.0 x))) (/ (fma (/ -1.0 (+ x -1.0)) 2.0 (/ 2.0 (+ 1.0 x))) (+ 1.0 x))) (/ 2.0 (+ 1.0 x)))",
    "output_parens": 40,
    "avg_bits_err_input": 14.356729808407922,
    "avg_bits_err_output": 14.279447702951483,
    "avg_bits_err_improve": 0.07728210545643854,
    "time": 19229.842041015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (!= (/ (sqrt (* (- A (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C)) (* 2.0 (* F (- (pow B 2.0) (* A (* C 4.0))))))) (fma A (* C 8.0) (* (pow B 2.0) -2.0))) 0.0) (+ (/ 1.0 (/ 1.0 (/ (sqrt (* (- A (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C)) (* 2.0 (* F (- (pow B 2.0) (* A (* C 4.0))))))) (fma A (* C 8.0) (* (pow B 2.0) -2.0))))) (/ 1.0 (/ 1.0 (/ (sqrt (* 2.0 (* (- A (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C)) (* F (- (pow B 2.0) (* 4.0 (* A C))))))) (- (- (pow B 2.0)) (- (pow B 2.0) (* A (* C 8.0)))))))) (/ (sqrt (* 2.0 (* (- A (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C)) (* F (- (pow B 2.0) (* 4.0 (* A C))))))) (- (* 4.0 (* A C)) (pow B 2.0))))",
    "output_parens": 90,
    "avg_bits_err_input": 52.68465213343055,
    "avg_bits_err_output": 52.4047684789311,
    "avg_bits_err_improve": 0.2798836544994501,
    "time": 43175.1376953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 4.2e+156) (* 180.0 (/ (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) PI)) (* 180.0 (/ (atan (if (!= (fma (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (/ -1.0 B) (/ (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) B)) 0.0) 0.0 (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B))) PI)))",
    "output_parens": 39,
    "avg_bits_err_input": 28.799872016422874,
    "avg_bits_err_output": 27.03903357507389,
    "avg_bits_err_improve": 1.7608384413489837,
    "time": 28053.456298828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (fma 2.0 (pow B 2.0) (* A (* C -8.0))) (* F (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 52.626284500470604,
    "avg_bits_err_output": 52.36677823442092,
    "avg_bits_err_improve": 0.25950626604968363,
    "time": 33517.685302734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (* (+ (cbrt (/ g (+ a a))) 2.0) (/ (cbrt (/ g (+ a a))) (+ (cbrt (/ g (+ a a))) 2.0))) (cbrt (/ g (+ a a))))",
    "output_parens": 22,
    "avg_bits_err_input": 15.048649245902647,
    "avg_bits_err_output": 15.052132892779634,
    "avg_bits_err_improve": -0.003483646876986768,
    "time": 24665.072509765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- g) 0.0) (/ (* (- g) (- (sqrt (if (!= (* h h) 0.0) (- (* g g) (* h h)) (- (* g g) (* h h)))) g)) (- g)) (- (sqrt (if (!= (* h h) 0.0) (- (* g g) (* h h)) (- (* g g) (* h h)))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 42,
    "avg_bits_err_input": 36.04933893785269,
    "avg_bits_err_output": 35.981416382600564,
    "avg_bits_err_improve": 0.06792255525212454,
    "time": 18886.387451171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9915689859449832,
    "avg_bits_err_output": 0.9780874062518031,
    "avg_bits_err_improve": 0.01348157969318009,
    "time": 11853.19140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(+ (+ (/ (exp a) (+ (exp a) (exp b))) -1.0) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.6864481203125902,
    "avg_bits_err_output": 0.787795635477231,
    "avg_bits_err_improve": -0.1013475151646408,
    "time": 5636.859619140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (* b1 b2) -1e+272) (/ (* a2 (/ a1 b1)) b2) (if (<= (* b1 b2) -2e-249) (* a1 (/ a2 (* b1 b2))) (if (<= (* b1 b2) 5e-240) (/ (* a2 (/ a1 b1)) b2) (if (<= (* b1 b2) 2e+109) (* a1 (/ a2 (* b1 b2))) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 27,
    "avg_bits_err_input": 11.087774609214982,
    "avg_bits_err_output": 5.294452742964702,
    "avg_bits_err_improve": 5.79332186625028,
    "time": 9677.084228515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5410586298238309,
    "avg_bits_err_output": 0.459,
    "avg_bits_err_improve": 0.08205862982383089,
    "time": 7389.377685546875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(log1p (if (!= x 0.0) (* (/ (+ x (+ (hypot 1.0 x) -1.0)) x) x) (+ x (+ (hypot 1.0 x) -1.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 53.053144343062264,
    "avg_bits_err_output": 15.443368538161645,
    "avg_bits_err_improve": 37.60977580490062,
    "time": 14236.34814453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.661814674667153,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.661814674667153,
    "time": 1697.9677734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.014125,
    "avg_bits_err_output": 0.014125,
    "avg_bits_err_improve": 0,
    "time": 3437.370361328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1326.130126953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (- (+ (/ 0.5 (* r r)) (/ (/ 6.0 r) (+ (+ r r) (+ r r)))) 0.0)) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 20,
    "avg_bits_err_input": 12.904227775203816,
    "avg_bits_err_output": 0.5800997360951454,
    "avg_bits_err_improve": 12.324128039108672,
    "time": 19864.04736328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0) (* x1 x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 0.5144545917423572,
    "avg_bits_err_output": 0.2890222219023705,
    "avg_bits_err_improve": 0.2254323698399867,
    "time": 73710.595703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.37992929354394,
    "avg_bits_err_output": 1.3087197422870103,
    "avg_bits_err_improve": 17.071209551256928,
    "time": 10516.6904296875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (- (* x 0.954929658551372) (* x (* x (* x 0.25801227546559596)))) (* x (* x (* x -0.12900613773279798))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.2313942038992627,
    "avg_bits_err_output": 0.20225264726366377,
    "avg_bits_err_improve": 0.029141556635598947,
    "time": 8611.245849609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003875,
    "avg_bits_err_output": 0.003875,
    "avg_bits_err_improve": 0,
    "time": 3416.897216796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* (- (/ 0.5 a) (/ 0.5 b)) (/ PI (+ a b))) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.448593729422706,
    "avg_bits_err_output": 0.30409060313743985,
    "avg_bits_err_improve": 14.144503126285267,
    "time": 16268.47998046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (- (exp (- (fma eps x x))) (+ (- -1.0 (/ (exp (* x (+ eps -1.0))) eps)) (/ (exp (- (fma eps x x))) eps))) (- (expm1 (* x (+ eps -1.0))))) 2.0)",
    "output_parens": 20,
    "avg_bits_err_input": 29.068608974404512,
    "avg_bits_err_output": 24.44594150227332,
    "avg_bits_err_improve": 4.622667472131191,
    "time": 21620.013671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.00525,
    "avg_bits_err_output": 0.00525,
    "avg_bits_err_improve": 0,
    "time": 6830.387451171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (+ 1.0 (* (- (- (/ (/ 8.0 (+ 4.0 (/ 4.0 t))) t) 2.0)) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))))) (+ (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))) 4.0))",
    "output_parens": 27,
    "avg_bits_err_input": 0.008625,
    "avg_bits_err_output": 0.030125,
    "avg_bits_err_improve": -0.0215,
    "time": 15478.049560546875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))) (+ 2.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.047125,
    "avg_bits_err_output": 0.071125,
    "avg_bits_err_improve": -0.023999999999999994,
    "time": 13293.468017578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3301.89892578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7546.017333984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2255.90869140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.822439552994903,
    "avg_bits_err_output": 0.2555,
    "avg_bits_err_improve": 7.566939552994904,
    "time": 32494.240966796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.196932921991729,
    "avg_bits_err_output": 7.196932921991729,
    "avg_bits_err_improve": 0,
    "time": 14528.50537109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (expm1 (log1p (pow (+ x eps) 2.0))) (pow x 2.0))",
    "output_parens": 6,
    "avg_bits_err_input": 15.775917841363928,
    "avg_bits_err_output": 15.798000033262333,
    "avg_bits_err_improve": -0.022082191898405767,
    "time": 20166.765380859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (log (expm1 (log1p (exp (cos x))))) (if (!= (pow (exp (* x x)) 10.0) 0.0) (/ 1.0 (/ 1.0 (pow (exp (* x x)) 10.0))) (pow (exp (* x x)) 10.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 3.5279987713504624,
    "avg_bits_err_output": 3.045143278160339,
    "avg_bits_err_improve": 0.4828554931901232,
    "time": 18516.501220703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 15.238760082455856,
    "avg_bits_err_output": 15.238760082455856,
    "avg_bits_err_improve": 0,
    "time": 13446.46923828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.974329284874436,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.974329284874436,
    "time": 5109.267822265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.31492535642638,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.31417535642638,
    "time": 4573.36083984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.249375,
    "avg_bits_err_improve": 63.750625,
    "time": 19561.356689453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.843247791892665,
    "avg_bits_err_output": 0.39075,
    "avg_bits_err_improve": 61.45249779189267,
    "time": 7947.05029296875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 34.35626756182946,
    "avg_bits_err_output": 34.356165350965625,
    "avg_bits_err_improve": 0.00010221086383666034,
    "time": 23700.4814453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.16796812371057,
    "avg_bits_err_output": 34.16796812371057,
    "avg_bits_err_improve": 0,
    "time": 24115.0576171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2476.50341796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.96699280021474,
    "avg_bits_err_output": 0.0105,
    "avg_bits_err_improve": 39.95649280021474,
    "time": 6439.063720703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(* (- x y) (/ (+ x y) (fma y y (* x x))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.940154839816145,
    "avg_bits_err_output": 20.179825594639,
    "avg_bits_err_improve": -0.23967075482285338,
    "time": 4116.7978515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6135202606315286,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6135202606315286,
    "time": 8683.93212890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.032625,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.031875,
    "time": 7112.7197265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021542481250360578,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.011167481250360578,
    "time": 4628.06396484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.01225,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.011375,
    "time": 4683.039306640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00025,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0,
    "time": 1543.278076171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ c (+ b (+ a d))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4040592109406551,
    "avg_bits_err_output": 0.247,
    "avg_bits_err_improve": 0.15705921094065511,
    "time": 5674.16259765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (cos x) 0.0) (/ (- (cos x) (* (cos x) (cos x))) (cos x)) (- 1.0 (cos x)))",
    "output_parens": 12,
    "avg_bits_err_input": 30.534509587325942,
    "avg_bits_err_output": 30.534429330659265,
    "avg_bits_err_improve": 8.025666667776932e-05,
    "time": 12747.519287109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (fma x x (- eps))))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.624325936858042,
    "avg_bits_err_output": 0.29377124062518034,
    "avg_bits_err_improve": 24.330554696232863,
    "time": 12313.091552734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (- (tan x))) 0.0) (/ (/ (fma (/ x (- (tan x))) (sin x) (* (sin x) (/ (sin x) (tan x)))) (tan x)) (/ (sin x) (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 27,
    "avg_bits_err_input": 29.735580462747357,
    "avg_bits_err_output": 29.746725433231976,
    "avg_bits_err_improve": -0.01114497048461871,
    "time": 33636.67578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0055,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.004625,
    "time": 3368.540771484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 1e-239) (/ (* (expm1 (* n (log1p (/ i n)))) 100.0) (/ i n)) (/ (/ (- 200.0 (* 200.0 (pow (+ (/ i n) 1.0) n))) (/ 2.0 n)) (- i)))",
    "output_parens": 24,
    "avg_bits_err_input": 47.906857548174784,
    "avg_bits_err_output": 14.027374176119933,
    "avg_bits_err_improve": 33.87948337205485,
    "time": 25025.09765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 0.0) (fma b (/ d (fma c c (* d d))) (* a (/ c (fma c c (* d d))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 2e-19) (/ (+ (* (+ d d) (+ b b)) (* (+ c c) (+ a a))) (* (* (fma d d (* c c)) 2.0) 2.0)) (fma b (/ d (fma c c (* d d))) (* a (/ c (fma c c (* d d)))))))",
    "output_parens": 46,
    "avg_bits_err_input": 25.968229817912984,
    "avg_bits_err_output": 22.49468887824084,
    "avg_bits_err_improve": 3.4735409396721444,
    "time": 13201.4658203125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) -4e-210) (+ (* c (/ b (fma d d (* c c)))) (* a (/ d (- (fma d d (* c c)))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 5e+274) (fma b (/ c (fma c c (* d d))) (/ (* a (- d)) (fma c c (* d d)))) (fma b (/ c (fma c c (* d d))) (if (!= (* d (/ a (fma d d (* c c)))) 0.0) (/ 1.0 (/ (/ 1.0 d) (/ a (- (fma d d (* c c)))))) (* a (- (/ d (fma d d (* c c)))))))))",
    "output_parens": 59,
    "avg_bits_err_input": 26.133310396043644,
    "avg_bits_err_output": 23.97257130175183,
    "avg_bits_err_improve": 2.160739094291813,
    "time": 19453.829833984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.037625,
    "avg_bits_err_output": 0.02276184218813101,
    "avg_bits_err_improve": 0.014863157811868987,
    "time": 4957.502685546875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- (- (* ux (* maxCos (+ (* ux maxCos) (* (- 1.0 ux) 2.0)))) ux) (- ux (* ux ux))) -1.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 13.493586621741947,
    "avg_bits_err_output": 0.5507529067046847,
    "avg_bits_err_improve": 12.942833715037263,
    "time": 27430.176513671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (+ 1.0 (- ux (fma ux maxCos 1.0))) (* (- ux (* ux maxCos)) (- (- ux (fma ux maxCos 1.0)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.529781691518084,
    "avg_bits_err_output": 11.207787954390541,
    "avg_bits_err_improve": 2.321993737127542,
    "time": 30378.12890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (if (!= (* (* uy PI) -2.0) 0.0) (* (/ (* uy 2.0) PI) (* PI PI)) (* 2.0 (* uy PI)))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (fma (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) yi) (* (- 1.0 ux) (* (* ux maxCos) zi))))",
    "output_parens": 40,
    "avg_bits_err_input": 0.33362818424911234,
    "avg_bits_err_output": 0.33919772472241383,
    "avg_bits_err_improve": -0.005569540473301493,
    "time": 49272.11181640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.20030153685924734,
    "avg_bits_err_output": 0.20030153685924734,
    "avg_bits_err_improve": 0,
    "time": 21493.39013671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (log1p (expm1 (sin (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5431772925161444,
    "avg_bits_err_output": 0.5490075817939677,
    "avg_bits_err_improve": -0.005830289277823253,
    "time": 23362.7568359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (- (/ (* (/ u1 (- 1.0 u1)) u1) u1) 0.0) (/ u1 (- 1.0 u1)))) (cos (* 6.28318530718 u2)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.3217833431545981,
    "avg_bits_err_output": 0.3486987876790413,
    "avg_bits_err_improve": -0.026915444524443166,
    "time": 20125.74072265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.33924215969447646,
    "avg_bits_err_output": 0.3394921596944765,
    "avg_bits_err_improve": -0.000250000000000028,
    "time": 40603.628173828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06396203401129882,
    "avg_bits_err_output": 0.04765389245739274,
    "avg_bits_err_improve": 0.016308141553906086,
    "time": 14699.74609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.13358078798172698,
    "avg_bits_err_output": 0.1019292628011985,
    "avg_bits_err_improve": 0.03165152518052848,
    "time": 23084.279541015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641672695097591,
    "avg_bits_err_output": 0.6669021115332033,
    "avg_bits_err_improve": -0.002734842023444206,
    "time": 22300.267578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.1575425624589511,
    "avg_bits_err_output": 0.15136695170411923,
    "avg_bits_err_improve": 0.006175610754831862,
    "time": 17992.31103515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (+ (/ (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) -2.0) (- (* eta eta) (/ (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) 2.0))))))",
    "output_parens": 18,
    "avg_bits_err_input": 2.537795758433255,
    "avg_bits_err_output": 2.5496067099981685,
    "avg_bits_err_improve": -0.01181095156491363,
    "time": 29372.33251953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (* (/ 1.0 v) (/ cosTheta_i (sinh (/ 1.0 v)))) (/ 0.5 (* v (exp (* sinTheta_i (/ sinTheta_O v)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45374477729140716,
    "avg_bits_err_output": 0.3466485128816217,
    "avg_bits_err_improve": 0.10709626440978548,
    "time": 26618.189453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (+ (/ (- (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) 1.0) v) 0.6931)) (/ 0.5 v))",
    "output_parens": 9,
    "avg_bits_err_input": 0.1066016481684797,
    "avg_bits_err_output": 0.10842299507802326,
    "avg_bits_err_improve": -0.001821346909543567,
    "time": 23957.982177734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (+ (* alpha alpha) -1.0) (log (* alpha alpha))) PI) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.47146334320773836,
    "avg_bits_err_output": 0.48941868872424454,
    "avg_bits_err_improve": -0.017955345516506183,
    "time": 23281.40673828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* 3.0 (* s (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (fma u 1.3333333333333333 -0.3333333333333333) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 1.3238551415534026,
    "avg_bits_err_output": 0.4435627843935713,
    "avg_bits_err_improve": 0.8802923571598313,
    "time": 26063.199951171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (if (!= (- 2.0 (log (/ 1.0 (fma u -4.0 1.0)))) 0.0) (/ (- 1.0 (log (+ 1.0 (expm1 (* (+ (log (/ 1.0 (fma u -4.0 1.0))) -1.0) (+ (log (/ 1.0 (fma u -4.0 1.0))) -1.0)))))) (- 2.0 (log (/ 1.0 (fma u -4.0 1.0))))) (log (/ 1.0 (fma u -4.0 1.0)))))",
    "output_parens": 28,
    "avg_bits_err_input": 12.310275082294115,
    "avg_bits_err_output": 11.826411171219789,
    "avg_bits_err_improve": 0.4838639110743266,
    "time": 28675.098388671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (* (* (* 6.0 PI) s) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.15304794401725277,
    "avg_bits_err_output": 0.1444688190316338,
    "avg_bits_err_improve": 0.008579124985618969,
    "time": 22287.274658203125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (sin (- normAngle (* normAngle u))) (/ n0_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8490767472671129,
    "avg_bits_err_output": 0.7110075014067964,
    "avg_bits_err_improve": 0.13806924586031655,
    "time": 27455.484619140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (if (!= (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)) 0.0) (/ 1.0 (/ 1.0 (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta)))) (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) cosTheta))) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 28,
    "avg_bits_err_input": 0.7068688293326224,
    "avg_bits_err_output": 0.4836535056503096,
    "avg_bits_err_improve": 0.22321532368231278,
    "time": 21123.75927734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (if (!= (+ 1.0 (log (- 1.0 u1))) 0.0) (/ (+ (- -1.0 (log (- 1.0 u1))) (log (+ 1.0 (expm1 (* (- -1.0 (log (- 1.0 u1))) (- -1.0 (log (- 1.0 u1)))))))) (+ 1.0 (log (- 1.0 u1)))) (log (- 1.0 u1))))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 31,
    "avg_bits_err_input": 13.520307270022995,
    "avg_bits_err_output": 12.900931918868281,
    "avg_bits_err_improve": 0.619375351154714,
    "time": 28118.071044921875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (log (+ 1.0 (expm1 (* 2.0 (* PI u2)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 13.570601282770717,
    "avg_bits_err_output": 0.3029278013227041,
    "avg_bits_err_improve": 13.267673481448012,
    "time": 20318.36669921875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(- (* (- alpha) (* alpha (log (- 1.0 u0)))) (fma (- alpha) (fma alpha (log (- 1.0 u0)) alpha) (* alpha (fma alpha (log (- 1.0 u0)) alpha))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.978770255565019,
    "avg_bits_err_output": 13.901264125407124,
    "avg_bits_err_improve": 0.07750613015789476,
    "time": 22681.5322265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (- (+ (/ sin2phi (* alphay alphay)) (/ (/ cos2phi alphax) (+ alphax alphax))) (- (/ (/ cos2phi alphax) (+ alphax alphax)))))",
    "output_parens": 15,
    "avg_bits_err_input": 12.741572865133525,
    "avg_bits_err_output": 0.5225539842730232,
    "avg_bits_err_improve": 12.219018880860503,
    "time": 16374.609619140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.591322162193293,
    "avg_bits_err_output": 12.491818414355077,
    "avg_bits_err_improve": 4.099503747838217,
    "time": 31874.572265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2183977750432873,
    "avg_bits_err_output": 0.15408405316774643,
    "avg_bits_err_improve": 0.06431372187554088,
    "time": 13969.424072265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.678654866980793,
    "avg_bits_err_output": 10.901710655019425,
    "avg_bits_err_improve": 2.776944211961368,
    "time": 19972.89794921875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (expm1 (log1p (/ (+ (exp (* PI (/ f 4.0))) (exp (* f (/ PI -4.0)))) (if (!= (exp (* f (/ PI -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* f (/ PI -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* f (/ PI -4.0))))))))) (* PI -0.25))",
    "output_parens": 34,
    "avg_bits_err_input": 61.54165585945417,
    "avg_bits_err_output": 1.7712482462689239,
    "avg_bits_err_improve": 59.77040761318524,
    "time": 53818.72705078125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.32659585248511,
    "avg_bits_err_output": 34.05247603458801,
    "avg_bits_err_improve": 9.274119817897102,
    "time": 26100.15966796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 4.231344212828495,
    "avg_bits_err_output": 4.231344212828495,
    "avg_bits_err_improve": 0,
    "time": 30309.6650390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (log (+ 1.0 (expm1 (/ 1.0 (sqrt (- (* (pow (* 2.0 (/ l Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0)))))) 0.5)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.9556506569647484,
    "avg_bits_err_output": 0.9572756569647484,
    "avg_bits_err_improve": -0.0016249999999999876,
    "time": 13500.840087890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (- (+ 1.0 (pow (/ Om Omc) 2.0)) 1.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 9.879134065163266,
    "avg_bits_err_output": 9.879481038585118,
    "avg_bits_err_improve": -0.00034697342185197044,
    "time": 10607.985107421875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 5e-317) (sqrt (* (* 2.0 n) (* U (- t (fma n (* (pow (/ l Om) 2.0) (- U U*)) (* 2.0 (* l (/ l Om)))))))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 2e+253) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* U (* (* 2.0 n) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om))))))))))",
    "output_parens": 70,
    "avg_bits_err_input": 34.715856491886406,
    "avg_bits_err_output": 29.2211043885361,
    "avg_bits_err_improve": 5.494752103350304,
    "time": 33063.037353515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -2e-108) (/ 2.0 (/ (* (* (sin k) (tan k)) (* (pow (/ k t) 2.0) (/ (pow t 3.0) l))) l)) (if (<= t 4.7e-111) (/ 2.0 (* (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) l) (* (/ (sin k) l) (tan k)))) (/ 2.0 (* (/ (* (pow (/ k t) 2.0) (pow t 3.0)) l) (* (/ (sin k) l) (tan k))))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.454367195334584,
    "avg_bits_err_output": 34.451533006335204,
    "avg_bits_err_improve": 13.00283418899938,
    "time": 42613.04248046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (sin k) l) (* (pow t 3.0) (* (tan k) (/ (+ 2.0 (pow (/ k t) 2.0)) l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.29597966000656,
    "avg_bits_err_output": 26.798151216357372,
    "avg_bits_err_improve": 5.497828443649187,
    "time": 23967.04833984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (* (fma a2 a2 (* a1 a1)) (cos th)) (sqrt 2.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5231174843993409,
    "avg_bits_err_output": 0.4747609047061612,
    "avg_bits_err_improve": 0.04835657969317969,
    "time": 21703.95654296875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (+ 0.5 (/ k -2.0))) (pow k -0.5))",
    "output_parens": 7,
    "avg_bits_err_input": 0.4621902415054958,
    "avg_bits_err_output": 0.4193742351486757,
    "avg_bits_err_improve": 0.04281600635682009,
    "time": 17675.59130859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (if (!= (+ (exp (fma l -1.0 l)) (exp (* l -2.0))) 0.0) (/ (if (!= (+ (exp (+ l (- (fma l -1.0 l) l))) (exp (* l -4.0))) 0.0) (/ (if (!= (+ (exp (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l)))) (exp (* l -8.0))) 0.0) (/ (- (exp (+ (fma l -1.0 l) (+ (+ l (- (fma l -1.0 l) l)) (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l)))))) (exp (* l -16.0))) (+ (exp (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l)))) (exp (* l -8.0)))) (- (exp (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l)))) (exp (* l -8.0)))) (+ (exp (+ l (- (fma l -1.0 l) l))) (exp (* l -4.0)))) (- (exp (+ l (- (fma l -1.0 l) l))) (exp (* l -4.0)))) (+ (exp (fma l -1.0 l)) (exp (* l -2.0)))) (- (exp (fma l -1.0 l)) (exp (* l -2.0)))) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output_parens": 95,
    "avg_bits_err_input": 17.13823190441733,
    "avg_bits_err_output": 17.187045847429108,
    "avg_bits_err_improve": -0.04881394301177622,
    "time": 32758.672607421875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) 0.96) (* (cos (- (/ (if (!= (* K n) 0.0) (fma (* K (/ m 2.0)) (* K (/ (+ n n) (* K n))) (/ 1.0 (/ 1.0 (* K n)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K n) 0.0) (* (* n (/ (+ n m) (* K n))) (* K K)) (* K (+ n m))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))))",
    "output_parens": 72,
    "avg_bits_err_input": 15.457810561855487,
    "avg_bits_err_output": 13.397368141096166,
    "avg_bits_err_improve": 2.060442420759321,
    "time": 21161.848388671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (sqrt (+ 1.0 (pow (/ (/ U (* 2.0 J)) (cos (/ K 2.0))) 2.0))) (* (cos (/ K 2.0)) -2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 18.109875,
    "avg_bits_err_output": 18.117002443751083,
    "avg_bits_err_improve": -0.007127443751084428,
    "time": 28789.940673828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 2e-68) (* w0 (sqrt (- 1.0 (* (/ (pow (* D (/ (/ M 2.0) d)) 2.0) l) h)))) (if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 2e+292) (* w0 (sqrt (- 1.0 (if (!= (* (pow (/ (* M (/ D 2.0)) d) 2.0) (/ h l)) 0.0) (/ 1.0 (/ (/ 1.0 (pow (/ (* M (/ D 2.0)) d) 2.0)) (/ h l))) (* (pow (/ (* M (/ D 2.0)) d) 2.0) (/ h l)))))) (* w0 (sqrt (- 1.0 (* (/ (pow (* D (/ (/ M 2.0) d)) 2.0) l) h))))))",
    "output_parens": 55,
    "avg_bits_err_input": 14.03672484659555,
    "avg_bits_err_output": 9.945403444698728,
    "avg_bits_err_improve": 4.091321401896822,
    "time": 19896.703857421875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+257) (* c0 (sqrt (/ (* A (/ 2.0 V)) (+ l l)))) (if (<= (* V l) -1e-244) (* c0 (sqrt (* (/ 2.0 (* V (+ l l))) A))) (if (<= (* V l) 5e-311) (* c0 (sqrt (/ (* A (/ 2.0 V)) (+ l l)))) (if (<= (* V l) 5e+287) (* c0 (sqrt (* (/ 2.0 (* V (+ l l))) A))) (* c0 (sqrt (/ (* A (/ 2.0 V)) (+ l l))))))))",
    "output_parens": 42,
    "avg_bits_err_input": 20.075743097737565,
    "avg_bits_err_output": 15.137501077613233,
    "avg_bits_err_improve": 4.938242020124331,
    "time": 17747.423828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= M -3.6e-137) (* (/ c0 (* 2.0 w)) (+ (* c0 (* d (/ (/ d (* w D)) (* D h)))) (sqrt (* (fma d (* c0 (/ (/ d (* w D)) (* D h))) M) (- (* (/ (/ d (* w D)) (* D h)) (* c0 d)) M))))) (if (<= M 3.8e-202) (* c0 (/ (+ (* d (* (/ (/ d h) w) (/ (/ c0 D) D))) (sqrt (* (fma d (* (/ (/ d h) w) (/ (/ c0 D) D)) M) (- (* d (* (/ (/ d h) w) (/ (/ c0 D) D))) M)))) (+ w w))) (if (<= M 3.9e-85) (* (/ c0 (* 2.0 w)) (+ (* c0 (* d (/ (/ d (* w D)) (* D h)))) (sqrt (* (fma (/ (/ d (* w D)) (* D h)) (* c0 d) M) (fma c0 (* d (/ (/ d (* w D)) (* D h))) (- M)))))) (* c0 (/ (+ (* d (* (/ (/ d D) D) (/ c0 (* w h)))) (sqrt (* (fma d (/ (* (/ d (* D D)) c0) (* w h)) M) (fma d (* (/ (/ d D) D) (/ c0 (* w h))) (- M))))) (+ w w))))))",
    "output_parens": 106,
    "avg_bits_err_input": 59.4890401168143,
    "avg_bits_err_output": 56.13273230539306,
    "avg_bits_err_improve": 3.356307811421239,
    "time": 52539.39111328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (* (sqrt (/ d l)) (- (sqrt (/ d h)) (* (/ h (+ l l)) (* (pow (* D (/ M (+ d d))) 2.0) (sqrt (/ d h)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 5000000.0) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (* (- (sqrt (/ d l))) (* (fma 0.5 (* h (/ (pow (* (/ D 2.0) (/ M d)) 2.0) l)) -1.0) (sqrt (/ d h))))))",
    "output_parens": 77,
    "avg_bits_err_input": 26.57517247183802,
    "avg_bits_err_output": 24.95832854292773,
    "avg_bits_err_improve": 1.6168439289102885,
    "time": 41684.0244140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (/ (- (hypot 1.0 x) 1.0) (* (hypot 1.0 x) 2.0)) (+ 1.0 (log (+ 1.0 (expm1 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 26,
    "avg_bits_err_input": 15.268472142618139,
    "avg_bits_err_output": 14.777982983649327,
    "avg_bits_err_improve": 0.4904891589688116,
    "time": 12873.406005859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 (- 1.0 (* v v))) PI) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9855212406251803,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 0.9758962406251803,
    "time": 4819.936767578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* v (* v 5.0))) (sqrt (- 2.0 (* v (* v 6.0))))) PI) (* (fma v v -1.0) (- t)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.42904849037918835,
    "avg_bits_err_output": 0.10799080507553281,
    "avg_bits_err_improve": 0.3210576853036555,
    "time": 19299.080322265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.010948120312590145,
    "avg_bits_err_output": 0.010948120312590145,
    "avg_bits_err_improve": 0,
    "time": 6116.87353515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5439001819329498,
    "avg_bits_err_output": 0.5439001819329498,
    "avg_bits_err_improve": 0,
    "time": 11449.97802734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.9259301046592883,
    "avg_bits_err_output": 1.9084819843466982,
    "avg_bits_err_improve": 0.01744812031259002,
    "time": 18686.520263671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (- Vef (- Ec (+ mu EDonor))) KbT)) -1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.018231961784336958,
    "avg_bits_err_output": 0.018231961784336958,
    "avg_bits_err_improve": 0,
    "time": 11676.55517578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.19278029524739168,
    "avg_bits_err_output": 0.19278029524739168,
    "avg_bits_err_improve": 0,
    "time": 19441.25146484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (fma a (* 4.0 (fma a a a)) (+ (* (* b -12.0) (* a b)) (+ (* 4.0 (* b b)) (pow (fma a a (* b b)) 2.0)))) -1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.1859979328161958,
    "avg_bits_err_output": 0.1855285718784254,
    "avg_bits_err_improve": 0.0004693609377704189,
    "time": 21841.841796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (if (!= (pow (fma b b (* a a)) 2.0) 0.0) (* (pow (fma b b (* a a)) 2.0) (/ (fma 4.0 (fma b (* b (+ 3.0 a)) (* a (- a (* a a)))) (pow (fma b b (* a a)) 2.0)) (pow (fma b b (* a a)) 2.0))) (fma 4.0 (fma b (* b (+ 3.0 a)) (* a (- a (* a a)))) (pow (fma b b (* a a)) 2.0))) 1.0)",
    "output_parens": 34,
    "avg_bits_err_input": 0.19748326282425066,
    "avg_bits_err_output": 0.1997711148846472,
    "avg_bits_err_improve": -0.002287852060396528,
    "time": 28170.10791015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.033998074617855,
    "avg_bits_err_output": 13.033998074617855,
    "avg_bits_err_improve": 0,
    "time": 24024.166015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.25816847325312,
    "avg_bits_err_output": 0.04775,
    "avg_bits_err_improve": 41.21041847325312,
    "time": 4575.694580078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))",
    "output_parens": 8,
    "avg_bits_err_input": 31.461052173174245,
    "avg_bits_err_output": 31.429315610889542,
    "avg_bits_err_improve": 0.031736562284702785,
    "time": 18851.45458984375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 34.31137639132593,
    "avg_bits_err_output": 34.31137639132593,
    "avg_bits_err_improve": 0,
    "time": 15352.037353515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) 0.0 (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 2e+216) (/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c)))) 0.0) (* (sqrt (- (* b_2 b_2) (* a c))) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a) 0.0))",
    "output_parens": 49,
    "avg_bits_err_input": 33.67612592308911,
    "avg_bits_err_output": 30.603170323061104,
    "avg_bits_err_improve": 3.0729556000280063,
    "time": 17275.583740234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.736452024498952,
    "avg_bits_err_output": 30.95250076986972,
    "avg_bits_err_improve": 0.7839512546292333,
    "time": 17731.564453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 33.29715031191236,
    "avg_bits_err_output": 11.247162046511164,
    "avg_bits_err_improve": 22.049988265401197,
    "time": 28218.724609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (+ (log1p N) 1.0) 0.0) (/ (+ (- -1.0 (log1p N)) (* (+ (log1p N) 1.0) (- (+ (log1p N) 1.0) (log N)))) (+ (log1p N) 1.0)) (- (log1p N) (log N)))",
    "output_parens": 20,
    "avg_bits_err_input": 28.969261763196297,
    "avg_bits_err_output": 28.977419409698122,
    "avg_bits_err_improve": -0.008157646501825155,
    "time": 13718.04931640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(if (!= (/ (/ x x) (+ x 1.0)) 0.0) (/ (/ (/ 1.0 (- -1.0 x)) x) (* (+ x 1.0) (/ 1.0 (+ x 1.0)))) (/ (+ (/ x (+ x 1.0)) -1.0) x))",
    "output_parens": 17,
    "avg_bits_err_input": 14.50278024762384,
    "avg_bits_err_output": 0.075,
    "avg_bits_err_improve": 14.42778024762384,
    "time": 10864.863525390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (!= (cos x) 0.0) (/ (if (!= (* (cos x) (cos x)) 0.0) (/ (if (!= (* (cos x) (- (* (cos x) (* (cos x) (cos x))))) 0.0) (/ (+ (* (* (cos x) (cos x)) (* (* (cos x) (cos x)) (* (cos x) (* (cos x) (* (cos x) (cos x)))))) (* (* (cos x) (* (cos x) (* (cos x) (cos x)))) (- (* (cos (+ x eps)) (* (cos x) (* (cos x) (cos x))))))) (* (cos x) (- (* (cos x) (* (cos x) (cos x)))))) (fma (* (cos x) (cos x)) (* (cos x) (- (cos x))) (* (cos (+ x eps)) (* (cos x) (* (cos x) (cos x)))))) (* (cos x) (cos x))) (* (cos x) (- (cos (+ x eps)) (cos x)))) (cos x)) (- (cos (+ x eps)) (cos x)))",
    "output_parens": 92,
    "avg_bits_err_input": 39.86815598606264,
    "avg_bits_err_output": 39.8830837609075,
    "avg_bits_err_improve": -0.014927774844863961,
    "time": 25670.057373046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.348605674942352,
    "avg_bits_err_output": 29.049155451039177,
    "avg_bits_err_improve": 0.2994502239031753,
    "time": 16855.74267578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.28445121235955,
    "avg_bits_err_output": 30.28445121235955,
    "avg_bits_err_improve": 0,
    "time": 23081.481201171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (if (!= (* c (* a 4.0)) 0.0) (* (+ (* (- (/ c c) 0.0) (* b b)) (* (* c (* a -4.0)) (- (/ c c) 0.0))) (/ (* (* c a) 16.0) (* (+ c c) (* a 8.0)))) (+ (* (- (/ c c) 0.0) (* b b)) (* (* c (* a -4.0)) (- (/ c c) 0.0)))))) (* a 2.0))",
    "output_parens": 36,
    "avg_bits_err_input": 33.95559404567842,
    "avg_bits_err_output": 34.12632048975628,
    "avg_bits_err_improve": -0.17072644407786441,
    "time": 28480.398681640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (fma a (* c -4.0) (* b b)))) -2.0) a)",
    "output_parens": 7,
    "avg_bits_err_input": 33.66758794091285,
    "avg_bits_err_output": 33.6882009203981,
    "avg_bits_err_improve": -0.020612979485250094,
    "time": 26629.708740234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (+ (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ -1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.270619768826684,
    "avg_bits_err_output": 0.8816123892796293,
    "avg_bits_err_improve": 60.38900737954705,
    "time": 26361.3310546875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log (+ n 1.0)) (log n)) n)) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 62.99302958475544,
    "avg_bits_err_output": 44.230468405191445,
    "avg_bits_err_improve": 18.762561179563995,
    "time": 17583.231689453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (exp (log1p (log (- (/ 1.0 (- (+ eps eps) (- -1.0 (* eps eps)))) (* (/ eps (+ eps 1.0)) (/ eps (+ eps 1.0))))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 58.74642241238647,
    "avg_bits_err_output": 58.77644246082089,
    "avg_bits_err_improve": -0.03002004843441597,
    "time": 20743.615966796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ -1.0 (if (!= (- -1.0 (/ 1.0 x)) 0.0) (/ (if (!= (* (- -1.0 (/ 1.0 x)) (+ (- -1.0 (/ 1.0 x)) (/ 1.0 (tan x)))) 0.0) (/ 1.0 (/ 1.0 (* (- -1.0 (/ 1.0 x)) (+ 1.0 (- (/ -1.0 (tan x)) (/ -1.0 x)))))) (* (- -1.0 (/ 1.0 x)) (+ 1.0 (- (/ -1.0 (tan x)) (/ -1.0 x))))) (- -1.0 (/ 1.0 x))) (+ 1.0 (+ (/ -1.0 (tan x)) (/ 1.0 x)))))",
    "output_parens": 41,
    "avg_bits_err_input": 59.8838557877573,
    "avg_bits_err_output": 59.876424211269516,
    "avg_bits_err_improve": 0.007431576487782365,
    "time": 28239.603271484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(if (!= (* (/ eps (expm1 (* eps a))) (/ (expm1 (* eps (+ a b))) (expm1 (* eps b)))) 0.0) (/ 1.0 (+ (/ (/ 1.0 (/ (expm1 (* eps (+ a b))) (expm1 (* eps b)))) (/ (+ eps eps) (expm1 (* eps a)))) (/ (/ 1.0 (/ (expm1 (* eps (+ a b))) (expm1 (* eps b)))) (/ (+ eps eps) (expm1 (* eps a)))))) (* (/ eps (expm1 (* eps a))) (/ (expm1 (* eps (+ a b))) (expm1 (* eps b)))))",
    "output_parens": 48,
    "avg_bits_err_input": 60.345378136483426,
    "avg_bits_err_output": 29.478629879278007,
    "avg_bits_err_improve": 30.86674825720542,
    "time": 26874.480224609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.57759652460927,
    "avg_bits_err_output": 0.4115424812503606,
    "avg_bits_err_improve": 41.16605404335891,
    "time": 5300.47216796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.64956406296297,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.648939062962974,
    "time": 3009.037841796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.190555501613225,
    "avg_bits_err_output": 0.021933307961146224,
    "avg_bits_err_improve": 29.16862219365208,
    "time": 11058.9296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (+ (fma (- (exp x)) (exp x) (exp (+ x x))) (- (- (* 2.0 (exp x)) 1.0) (exp (+ x x)))) (- (exp x)))",
    "output_parens": 16,
    "avg_bits_err_input": 29.97122092094942,
    "avg_bits_err_output": 29.05923304561607,
    "avg_bits_err_improve": 0.9119878753333488,
    "time": 24528.456787109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (* (/ (/ 2.0 (+ 1.0 x)) (/ 4.0 x)) (/ 2.0 x)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 9.863463027586418,
    "avg_bits_err_output": 9.85969145387963,
    "avg_bits_err_improve": 0.003771573706787379,
    "time": 29003.2998046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (tan x))",
    "output_parens": 4,
    "avg_bits_err_input": 36.57062617300174,
    "avg_bits_err_output": 36.57062617300174,
    "avg_bits_err_improve": 0,
    "time": 22672.95751953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.19445551519674,
    "avg_bits_err_output": 0.16110864687698312,
    "avg_bits_err_improve": 29.033346868319757,
    "time": 21009.3671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (if (!= (+ (sin x) 1.0) 0.0) (/ (* (sin x) (log (+ 1.0 (expm1 (+ (sin x) 1.0))))) (+ (sin x) 1.0)) (sin x)))",
    "output_parens": 18,
    "avg_bits_err_input": 37.310897933782066,
    "avg_bits_err_output": 37.321565835518804,
    "avg_bits_err_improve": -0.010667901736738372,
    "time": 17942.22998046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 20.190462941858282,
    "avg_bits_err_output": 20.05089008409453,
    "avg_bits_err_improve": 0.13957285776375272,
    "time": 14428.061279296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (+ (fma (- (/ (atan N) (+ (atan (+ 1.0 N)) (atan N)))) (atan N) (* (atan N) (/ (atan N) (+ (atan (+ 1.0 N)) (atan N))))) (* (+ (atan (+ 1.0 N)) (atan N)) (/ (- (atan (+ 1.0 N)) (atan N)) (+ (atan (+ 1.0 N)) (atan N))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 42,
    "avg_bits_err_input": 15.352790914590928,
    "avg_bits_err_output": 15.355574783321343,
    "avg_bits_err_improve": -0.002783868730414696,
    "time": 9647.331787109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.13578993921866,
    "avg_bits_err_output": 1.2873016390653997,
    "avg_bits_err_improve": 27.84848830015326,
    "time": 27291.698974609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07544116562662259,
    "avg_bits_err_output": 0.08025488750216347,
    "avg_bits_err_improve": -0.004813721875540883,
    "time": 12023.5498046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(if (!= b 0.0) (* (/ a (/ -1.0 b)) (* a b)) (* b (* (* a a) (- b))))",
    "output_parens": 10,
    "avg_bits_err_input": 16.425196651887,
    "avg_bits_err_output": 0.26841541406655617,
    "avg_bits_err_improve": 16.156781237820443,
    "time": 13789.929443359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* (* PI angle) 0.005555555555555556))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.76230206679157,
    "avg_bits_err_output": 20.765945954384826,
    "avg_bits_err_improve": -0.0036438875932560677,
    "time": 36530.88818359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (* (- (pow b 2.0) (pow a 2.0)) (sin (* PI (/ angle 180.0)))) (log (+ 1.0 (expm1 (if (!= (cos (* PI (/ angle 180.0))) 0.0) (/ 1.0 (/ 1.0 (cos (* PI (/ angle 180.0))))) (cos (* PI (/ angle 180.0)))))))))",
    "output_parens": 25,
    "avg_bits_err_input": 31.402692556196307,
    "avg_bits_err_output": 31.388175766855323,
    "avg_bits_err_improve": 0.014516789340984104,
    "time": 37248.95654296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (* angle PI) 0.005555555555555556))) 2.0) (pow (* b (cos (* (* angle PI) 0.005555555555555556))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 21.01613996667177,
    "avg_bits_err_output": 21.0338109364059,
    "avg_bits_err_improve": -0.017670969734130182,
    "time": 43116.6083984375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (* (/ (- 1.0 m) v) m) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1709080828133113,
    "avg_bits_err_output": 0.2177220082014342,
    "avg_bits_err_improve": -0.0468139253881229,
    "time": 11163.520263671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(+ (fma (* (tan x) (/ (tan x) (- -1.0 (* (tan x) (tan x))))) (* (tan x) (/ (tan x) (fma (tan x) (tan x) 1.0))) (* (* (tan x) (/ (tan x) (fma (tan x) (tan x) 1.0))) (* (tan x) (/ (tan x) (fma (tan x) (tan x) 1.0))))) (/ (- 1.0 (* (tan x) (tan x))) (fma (tan x) (tan x) 1.0)))",
    "output_parens": 40,
    "avg_bits_err_input": 0.3192409679578293,
    "avg_bits_err_output": 0.3193762462686364,
    "avg_bits_err_improve": -0.00013527831080711872,
    "time": 18712.837890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (/ e (fma e (cos v) 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.13709436093777044,
    "avg_bits_err_output": 0.13659436093777044,
    "avg_bits_err_improve": 0.0005000000000000004,
    "time": 19078.38134765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (log1p (expm1 (* (sin phi1) (sin phi2)))) (* (* (cos (- lambda1 lambda2)) (cos phi1)) (cos phi2)))) R)",
    "output_parens": 14,
    "avg_bits_err_input": 17.26532266119347,
    "avg_bits_err_output": 17.268764736466167,
    "avg_bits_err_improve": -0.0034420752726980197,
    "time": 35764.930419921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.29929976882252,
    "avg_bits_err_output": 0.17300977500432688,
    "avg_bits_err_improve": 52.1262899938182,
    "time": 25883.157470703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (- (* b b) (* c (* a -4.0))) 0.0) (/ (- (* (* b b) (* b b)) (* a (* c (* (* c a) 16.0)))) (- (* b b) (* c (* a -4.0)))) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 41,
    "avg_bits_err_input": 28.574083879377984,
    "avg_bits_err_output": 0.3391968062633415,
    "avg_bits_err_improve": 28.234887073114642,
    "time": 22770.130615234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* -4.0 a) (* b b)))) 0.0) (* (/ c (+ b (sqrt (fma -4.0 (* c a) (* b b))))) (* -4.0 a)) (- (sqrt (fma c (* -4.0 a) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.86897274401046,
    "avg_bits_err_output": 0.2404464296960633,
    "avg_bits_err_improve": 43.6285263143144,
    "time": 24207.981201171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (if (!= (* 4.0 (* a c)) 0.0) (* (/ (* a c) (* a (* c 8.0))) (* 8.0 (fma (* a c) -4.0 (* b b)))) (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 33.9597819943698,
    "avg_bits_err_output": 34.12974185439422,
    "avg_bits_err_improve": -0.1699598600244201,
    "time": 21688.811279296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9338465601211272,
    "avg_bits_err_output": 0.9318885185781483,
    "avg_bits_err_improve": 0.001958041542978961,
    "time": 29757.357666015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (+ 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))) 0.0) (/ (if (!= (+ 1.0 (/ 16.0 (* (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))) 0.0) (/ (- 1.0 (/ (/ 256.0 (* (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))) (* (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))) (+ 1.0 (/ 16.0 (* (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))) (- 1.0 (/ 16.0 (* (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (- -1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))) (+ 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))) (- 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 122,
    "avg_bits_err_input": 28.86677195124757,
    "avg_bits_err_output": 28.82299048746924,
    "avg_bits_err_improve": 0.043781463778330476,
    "time": 28026.255126953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (fma (exp x) (exp x) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 58.21967768377833,
    "avg_bits_err_output": 0.6454812031259016,
    "avg_bits_err_improve": 57.574196480652425,
    "time": 18489.409912109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 57.86675641053981,
    "avg_bits_err_output": 0.06709436093777044,
    "avg_bits_err_improve": 57.799662049602034,
    "time": 7573.91845703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.010865601562950722,
    "avg_bits_err_output": 0.010865601562950722,
    "avg_bits_err_improve": 0,
    "time": 1596.851318359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.50683755496477,
    "avg_bits_err_output": 32.50683755496477,
    "avg_bits_err_improve": 0,
    "time": 6168.618896484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (/ x (/ (- 1.0 x) 2.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.73486940753129,
    "avg_bits_err_output": 0.015823120312590144,
    "avg_bits_err_improve": 58.7190462872187,
    "time": 17458.202392578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.098125,
    "avg_bits_err_output": 0.09819812031259015,
    "avg_bits_err_improve": -7.312031259014418e-05,
    "time": 2424.810791015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (* (log (+ 1.0 (expm1 (cos (atan (/ (/ eh ew) (tan t))))))) (sin t))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.130375,
    "avg_bits_err_output": 0.1326156015629507,
    "avg_bits_err_improve": -0.0022406015629507225,
    "time": 25599.726806640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (if (!= (cos (atan (* (tan t) (/ eh (- ew))))) 0.0) (/ 1.0 (/ 1.0 (cos (atan (* (tan t) (/ eh (- ew))))))) (cos (atan (* (tan t) (/ eh (- ew))))))) (* (sin t) (* eh (sin (atan (* (tan t) (/ (- eh) ew))))))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.1261462406251803,
    "avg_bits_err_output": 0.12784436093777043,
    "avg_bits_err_improve": -0.0016981203125901456,
    "time": 15757.27490234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 38.78113974327733,
    "avg_bits_err_output": 3.76039455618086,
    "avg_bits_err_improve": 35.020745187096466,
    "time": 24602.4638671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.835913914949252,
    "avg_bits_err_output": 0.010323120312590145,
    "avg_bits_err_improve": 14.825590794636662,
    "time": 7221.11572265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (if (!= (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos theta) (cos phi1))))))) 0.0) (/ 1.0 (/ 1.0 (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos theta) (cos phi1))))))))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos theta) (cos phi1)))))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 0.1495530779968154,
    "avg_bits_err_output": 0.15472375144815084,
    "avg_bits_err_improve": -0.005170673451335456,
    "time": 35220.357666015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.33902114744207,
    "avg_bits_err_output": 0.17196729375396627,
    "avg_bits_err_improve": 52.1670538536881,
    "time": 27096.05029296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (+ b (+ (sqrt (fma c (* a -3.0) (* b b))) (sqrt (fma b b (* a (* c -3.0)))))))) (* a 6.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 30,
    "avg_bits_err_input": 28.737962075875984,
    "avg_bits_err_output": 0.3529349640752107,
    "avg_bits_err_improve": 28.385027111800774,
    "time": 26847.608154296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.860597649161285,
    "avg_bits_err_output": 0.23987086563239157,
    "avg_bits_err_improve": 43.620726783528895,
    "time": 28342.258056640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.005469977839034,
    "avg_bits_err_output": 34.005469977839034,
    "avg_bits_err_improve": 0,
    "time": 21072.28759765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (cos (- lambda1 lambda2))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.731879525442293,
    "avg_bits_err_output": 13.732564670297686,
    "avg_bits_err_improve": -0.0006851448553923944,
    "time": 36399.595703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.29014617868307,
    "avg_bits_err_output": 0.5227213877362972,
    "avg_bits_err_improve": 28.767424790946773,
    "time": 20329.763671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (/ x (+ x (+ x 2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.010823120312590145,
    "avg_bits_err_output": 0.028520879839797203,
    "avg_bits_err_improve": -0.017697759527207056,
    "time": 4529.924072265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(- (/ (/ -1.0 (- 1.0 x)) (- -1.0 x)) (/ (+ 1.0 (/ x (- 1.0 x))) (- -1.0 x)))",
    "output_parens": 10,
    "avg_bits_err_input": 14.879906971499576,
    "avg_bits_err_output": 12.917384935723833,
    "avg_bits_err_improve": 1.9625220357757431,
    "time": 18487.456787109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (if (!= (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C)) 0.0) (/ (- (pow B 2.0) (- (* (+ A C) (+ A C)) (pow (- A C) 2.0))) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))) (* (+ (pow B 2.0) (* (* A C) -4.0)) (* F -2.0)))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 45,
    "avg_bits_err_input": 52.55267109565867,
    "avg_bits_err_output": 51.30246839336077,
    "avg_bits_err_improve": 1.2502027022978979,
    "time": 35684.272705078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -9e+153) 0.0 (* 180.0 (/ (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) PI)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.518849631088848,
    "avg_bits_err_output": 27.701116537045312,
    "avg_bits_err_improve": 1.8177330940435361,
    "time": 22274.103759765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (+ C (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A)) (* 2.0 (* (- (pow B 2.0) (* A (* C 4.0))) F)))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.65280475486105,
    "avg_bits_err_output": 52.359196648812365,
    "avg_bits_err_improve": 0.29360810604868703,
    "time": 35433.864501953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.675261129035539,
    "avg_bits_err_output": 15.675261129035539,
    "avg_bits_err_improve": 0,
    "time": 29577.056396484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 0.5 a) (if (!= g 0.0) (/ (* (- g) (+ g (sqrt (fma g g (- (* h h)))))) g) (- (- g) (sqrt (fma g g (* h (- h)))))))))",
    "output_parens": 29,
    "avg_bits_err_input": 36.258130008360105,
    "avg_bits_err_output": 36.16510232543446,
    "avg_bits_err_improve": 0.09302768292564423,
    "time": 18255.384521484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9892859031316716,
    "avg_bits_err_output": 0.9769718046888524,
    "avg_bits_err_improve": 0.012314098442819277,
    "time": 11828.552001953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(* (exp a) (/ 1.0 (+ (exp a) (exp b))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.7728231203125902,
    "avg_bits_err_output": 0.7779906015629509,
    "avg_bits_err_improve": -0.005167481250360706,
    "time": 4129.334716796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* a2 (/ (/ a1 b2) b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-293) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* a2 (/ (/ a1 b2) b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+307) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.033263149210494,
    "avg_bits_err_output": 2.694431746046325,
    "avg_bits_err_improve": 8.33883140316417,
    "time": 9815.667236328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5711422606473945,
    "avg_bits_err_output": 0.488,
    "avg_bits_err_improve": 0.0831422606473945,
    "time": 10532.413330078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.0) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 200000.0) (log1p (if (!= (hypot 1.0 x) 0.0) (/ (if (!= (* (hypot 1.0 x) (+ (- (hypot 1.0 x) x) 1.0)) 0.0) (* (hypot 1.0 x) (* (+ (- (hypot 1.0 x) x) 1.0) (* (+ x (+ -1.0 (hypot 1.0 x))) (/ (hypot 1.0 x) (* (hypot 1.0 x) (+ (- (hypot 1.0 x) x) 1.0)))))) (* (hypot 1.0 x) (+ x (+ -1.0 (hypot 1.0 x))))) (hypot 1.0 x)) (+ x (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 70,
    "avg_bits_err_input": 53.001803818880376,
    "avg_bits_err_output": 0.6298229834098207,
    "avg_bits_err_improve": 52.37198083547055,
    "time": 18160.259521484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.71631120409847,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.71631120409847,
    "time": 2270.295166015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (* (- 1.0 x) (/ 1.0 (+ 1.0 x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.01425,
    "avg_bits_err_output": 0.01425,
    "avg_bits_err_improve": 0,
    "time": 6380.56396484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1285.79345703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 13.234242980792,
    "avg_bits_err_output": 0.6793388601106028,
    "avg_bits_err_improve": 12.554904120681398,
    "time": 22367.14990234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* 3.0 (* x1 x1)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* (* x1 x1) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)))))) (+ x1 x1)))",
    "output_parens": 47,
    "avg_bits_err_input": 0.5027885008178629,
    "avg_bits_err_output": 0.2850948660026329,
    "avg_bits_err_improve": 0.21769363481522996,
    "time": 64030.5595703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.37980176535948,
    "avg_bits_err_output": 1.429727649296328,
    "avg_bits_err_improve": 16.950074116063153,
    "time": 8780.2314453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2082830828133113,
    "avg_bits_err_output": 0.196511842188131,
    "avg_bits_err_improve": 0.011771240625180285,
    "time": 7603.2021484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2374.720703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (- (* (/ (* PI 0.5) (+ b a)) (/ 1.0 a)) (/ (/ PI (+ b a)) (+ b b))) (- b a))",
    "output_parens": 12,
    "avg_bits_err_input": 14.499340347252387,
    "avg_bits_err_output": 0.26498646719534225,
    "avg_bits_err_improve": 14.234353880057045,
    "time": 16915.81591796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (+ (exp (* x (- -1.0 eps))) 1.0) (+ (/ (exp (* x (+ -1.0 eps))) eps) (- (+ -1.0 (exp (* x (+ -1.0 eps)))) (/ (exp (* x (- -1.0 eps))) eps)))) 2.0)",
    "output_parens": 20,
    "avg_bits_err_input": 29.538187497987234,
    "avg_bits_err_output": 0.9181189903827103,
    "avg_bits_err_improve": 28.620068507604525,
    "time": 22341.890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (expm1 (log1p (/ 1.0 (+ (- 4.0 (/ (+ 4.0 (- 4.0 (/ 4.0 (+ t (/ t t))))) (+ t (/ t t)))) 2.0)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.042,
    "avg_bits_err_output": 0.011865601562950722,
    "avg_bits_err_improve": 0.03013439843704928,
    "time": 9061.482421875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (/ (+ 2.0 (+ 2.0 (* (- 2.0 (/ (/ 4.0 t) (+ (/ 2.0 t) 2.0))) (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0)))))) 2.0))",
    "output_parens": 27,
    "avg_bits_err_input": 0.05,
    "avg_bits_err_output": 0.07137464743511719,
    "avg_bits_err_improve": -0.02137464743511719,
    "time": 12914.849853515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (* (* 8.0 (/ t (+ t 1.0))) (/ t (+ t 1.0))) -2.0) (+ 4.0 (* (/ t (+ t 1.0)) (* 8.0 (/ t (+ t 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.025875,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 0.016,
    "time": 13820.119140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3298.521728515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6920.27978515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2599.302734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.825802818610342,
    "avg_bits_err_output": 0.242625,
    "avg_bits_err_improve": 7.583177818610341,
    "time": 44946.34033203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (if (!= (+ (pow (+ x eps) 5.0) 1.0) 0.0) (* (pow (+ x eps) 5.0) (/ (/ 1.0 (/ 1.0 (+ (pow (+ x eps) 5.0) 1.0))) (+ (pow (+ x eps) 5.0) 1.0))) (pow (+ x eps) 5.0)) (pow x 5.0))",
    "output_parens": 21,
    "avg_bits_err_input": 7.313456544664289,
    "avg_bits_err_output": 7.317027193604187,
    "avg_bits_err_improve": -0.0035706489398981134,
    "time": 15124.994140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 16.09118304571128,
    "avg_bits_err_output": 16.09118304571128,
    "avg_bits_err_improve": 0,
    "time": 16250.837890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (exp (* 10.0 (* x x))) (if (!= (- -2.0 (cos x)) 0.0) (if (!= (/ (- 1.0 (* (+ (cos x) 1.0) (+ (cos x) 1.0))) (- -2.0 (cos x))) 0.0) (/ 1.0 (/ 1.0 (/ (expm1 (+ (log1p (cos x)) (log1p (cos x)))) (+ (cos x) 2.0)))) (/ (expm1 (+ (log1p (cos x)) (log1p (cos x)))) (+ (cos x) 2.0))) (cos x)))",
    "output_parens": 40,
    "avg_bits_err_input": 3.556954082220967,
    "avg_bits_err_output": 3.554495769212231,
    "avg_bits_err_improve": 0.0024583130087361127,
    "time": 16773.107421875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -5e-8) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 500000000.0) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 14.7099627821281,
    "avg_bits_err_output": 0.007469360937770434,
    "avg_bits_err_improve": 14.70249342119033,
    "time": 9480.67578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.3977754163026,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.3977754163026,
    "time": 5082.55712890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.535438043916855,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 39.534563043916854,
    "time": 3993.33203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.251,
    "avg_bits_err_improve": 63.749,
    "time": 13507.87939453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (* t 4e-32))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325919191947,
    "avg_bits_err_output": 0.408625,
    "avg_bits_err_improve": 61.43463419191947,
    "time": 8169.129150390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (fma a (* c -4.0) (* b b)))) -2.0) a)",
    "output_parens": 7,
    "avg_bits_err_input": 33.66758794091285,
    "avg_bits_err_output": 33.6882009203981,
    "avg_bits_err_improve": -0.020612979485250094,
    "time": 27321.927978515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (if (!= (* 4.0 (* a c)) 0.0) (* (/ (* a c) (* a (* c 8.0))) (* 8.0 (fma (* a c) -4.0 (* b b)))) (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 33.9597819943698,
    "avg_bits_err_output": 34.12974185439422,
    "avg_bits_err_improve": -0.1699598600244201,
    "time": 23575.25048828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2616.90283203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.2457102326979,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 39.2354602326979,
    "time": 4510.199462890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- (- x) y) (* (- x y) -4.0)) (+ (* (+ y y) (+ y y)) (* (+ x x) (+ x x))))",
    "output_parens": 13,
    "avg_bits_err_input": 20.59203578829052,
    "avg_bits_err_output": 20.590425369116627,
    "avg_bits_err_improve": 0.0016104191738932627,
    "time": 13668.37939453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.645317901549117,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.645317901549117,
    "time": 10050.143798828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03775,
    "avg_bits_err_output": 0.001375,
    "avg_bits_err_improve": 0.036375,
    "time": 5427.270263671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019969360937770436,
    "avg_bits_err_output": 0.00975,
    "avg_bits_err_improve": 0.010219360937770436,
    "time": 4942.737548828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.014875,
    "avg_bits_err_improve": 0,
    "time": 3255.33349609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000125,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 0,
    "time": 2215.3154296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3994178578176384,
    "avg_bits_err_output": 0.242875,
    "avg_bits_err_improve": 0.15654285781763838,
    "time": 4592.310302734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(+ (- (- (/ (cos x) -2.0) (* (cos x) 0.25)) -1.0) (- (* (cos x) 0.25)))",
    "output_parens": 10,
    "avg_bits_err_input": 30.245784507366725,
    "avg_bits_err_output": 30.253493691529588,
    "avg_bits_err_improve": -0.007709184162862925,
    "time": 14748.3271484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (sqrt (- (* x x) eps)))",
    "output_parens": 4,
    "avg_bits_err_input": 24.74729623413098,
    "avg_bits_err_output": 24.74729623413098,
    "avg_bits_err_improve": 0,
    "time": 12702.970703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (- (/ (- (sin x) x) (tan x)) -1.0) 0.0) (/ (- (- (/ (- (sin x) x) (tan x)) -1.0) (* (+ (/ (- x (sin x)) (tan x)) -1.0) (+ (/ (- x (sin x)) (tan x)) -1.0))) (- (/ (- (sin x) x) (tan x)) -1.0)) (/ (- x (sin x)) (tan x)))",
    "output_parens": 34,
    "avg_bits_err_input": 29.94598572055244,
    "avg_bits_err_output": 29.955472761251983,
    "avg_bits_err_improve": -0.009487040699543314,
    "time": 32895.7705078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007073120312590144,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.006698120312590144,
    "time": 2312.046142578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 5e-303) (/ (* (expm1 (* n (log1p (/ i n)))) 100.0) (/ i n)) (* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n))))",
    "output_parens": 22,
    "avg_bits_err_input": 47.892560485256006,
    "avg_bits_err_output": 14.345178260898876,
    "avg_bits_err_improve": 33.54738222435713,
    "time": 26869.743408203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (- INFINITY)) (+ (* (/ d (fma d d (* c c))) b) (* c (/ a (fma d d (* c c))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 1e+279) (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (+ (* (if (!= (/ d (fma d d (* c c))) 0.0) (/ (/ (* d d) (fma d d (* c c))) d) (/ d (fma d d (* c c)))) b) (* a (/ c (fma c c (* d d)))))))",
    "output_parens": 54,
    "avg_bits_err_input": 26.12211874181536,
    "avg_bits_err_output": 22.69368834802692,
    "avg_bits_err_improve": 3.428430393788439,
    "time": 14660.00341796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= d -8500000.0) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (+ (* d d) (* c c))))) (if (<= d 9.5e-47) (fma b (/ c (fma c c (* d d))) (/ (* a (- d)) (fma c c (* d d)))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (+ (* d d) (* c c)))))))",
    "output_parens": 33,
    "avg_bits_err_input": 26.308678419576303,
    "avg_bits_err_output": 22.7760210679187,
    "avg_bits_err_improve": 3.5326573516576047,
    "time": 15961.34912109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- 1.0 ux) (* ux maxCos))",
    "output_parens": 3,
    "avg_bits_err_input": 0.034,
    "avg_bits_err_output": 0.034,
    "avg_bits_err_improve": 0,
    "time": 5668.635986328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.438470364147909,
    "avg_bits_err_output": 12.293856822329646,
    "avg_bits_err_improve": 1.1446135418182628,
    "time": 28409.995361328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (- ux (+ (- ux) (* ux ux))) 0.0) (* (fma (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) (- ux) (+ ux (- ux (* ux ux)))) (/ (+ ux (- ux (* ux ux))) (+ ux (- ux (* ux ux))))) (- 1.0 (fma (- 1.0 ux) (- 1.0 ux) (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 39,
    "avg_bits_err_input": 13.469913441361573,
    "avg_bits_err_output": 0.33681769173741904,
    "avg_bits_err_improve": 13.133095749624154,
    "time": 26654.573974609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* (* (- 1.0 ux) maxCos) (* ux ux))))) xi) (fma (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* (* (- 1.0 ux) maxCos) (* ux ux))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (* (- 1.0 ux) maxCos) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.33065003407957066,
    "avg_bits_err_output": 0.31672370432344915,
    "avg_bits_err_improve": 0.013926329756121514,
    "time": 44922.660888671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (+ (+ 1.0 (cos (atan (* (/ alphay alphax) (tan (fma 2.0 (* PI u1) (* PI 0.5))))))) -1.0) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.20943728552988009,
    "avg_bits_err_output": 0.21005279841776892,
    "avg_bits_err_improve": -0.0006155128878888305,
    "time": 27714.06005859375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (+ (/ (if (!= (- 0.0 (* (/ u1 (- 2.0 (+ u1 u1))) (+ (/ u1 (- 2.0 (+ u1 u1))) (/ u1 (- 1.0 u1))))) 0.0) (/ (- 0.0 (* (* (/ u1 (- 2.0 (+ u1 u1))) (+ (/ u1 (- 2.0 (+ u1 u1))) (/ u1 (- 1.0 u1)))) (* (/ u1 (- 2.0 (+ u1 u1))) (+ (/ u1 (- 2.0 (+ u1 u1))) (/ u1 (- 1.0 u1)))))) (- 0.0 (* (/ u1 (- 2.0 (+ u1 u1))) (+ (/ u1 (- 2.0 (+ u1 u1))) (/ u1 (- 1.0 u1)))))) (* (/ u1 (- 2.0 (+ u1 u1))) (+ (/ u1 (- 2.0 (+ u1 u1))) (/ u1 (- 1.0 u1))))) (/ u1 (- 1.0 u1))) (/ (* (/ u1 (- 1.0 u1)) (/ u1 u1)) 4.0)) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 77,
    "avg_bits_err_input": 0.5440503140067406,
    "avg_bits_err_output": 0.5600722422001764,
    "avg_bits_err_improve": -0.01602192819343573,
    "time": 28871.6591796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.33463633674053544,
    "avg_bits_err_output": 0.33463633674053544,
    "avg_bits_err_improve": 0,
    "time": 20202.734619140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (expm1 (log1p (/ PI s)))))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.3268509457247941,
    "avg_bits_err_output": 0.3295515097884661,
    "avg_bits_err_improve": -0.002700564063671973,
    "time": 46590.6025390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.05719053371969949,
    "avg_bits_err_output": 0.05719053371969949,
    "avg_bits_err_improve": 0,
    "time": 6857.560791015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (+ (exp (/ (fabs x) (- s))) 1.0)) (fma s (exp (/ (fabs x) (- s))) s))",
    "output_parens": 16,
    "avg_bits_err_input": 0.1363717012863607,
    "avg_bits_err_output": 0.11792112645600542,
    "avg_bits_err_improve": 0.018450574830355282,
    "time": 7292.119384765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (expm1 (log1p (* x PI)))) (expm1 (log1p (* x PI)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.6721000649712545,
    "avg_bits_err_output": 0.6966673807066,
    "avg_bits_err_improve": -0.02456731573534543,
    "time": 21807.58740234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (log1p (expm1 (exp (/ -2.0 v)))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.1595977041511719,
    "avg_bits_err_output": 0.1648577528731995,
    "avg_bits_err_improve": -0.0052600487220276215,
    "time": 22804.154541015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.602624512973444,
    "avg_bits_err_output": 2.597886751420056,
    "avg_bits_err_improve": 0.004737761553388342,
    "time": 26444.98388671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (/ (* cosTheta_i (* (/ 0.5 v) (/ 2.0 v))) (* (+ (exp (* sinTheta_i (/ sinTheta_O v))) (exp (* sinTheta_i (/ sinTheta_O v)))) (sinh (/ 1.0 v)))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.4680016482563398,
    "avg_bits_err_output": 0.3634787535447024,
    "avg_bits_err_improve": 0.10452289471163739,
    "time": 28004.89794921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ (+ (- (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (/ 1.0 v)) 0.6931) (log (/ 0.5 v))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.13372623535774267,
    "avg_bits_err_output": 0.13372623535774267,
    "avg_bits_err_improve": 0,
    "time": 20018.186279296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (+ (* alpha alpha) -1.0) (log (* alpha alpha))) PI) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.47169524392017503,
    "avg_bits_err_output": 0.4723638753661346,
    "avg_bits_err_improve": -0.0006686314459595777,
    "time": 24963.396240234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- (fma u -1.3333333333333333 0.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 14,
    "avg_bits_err_input": 1.313558536097618,
    "avg_bits_err_output": 0.4210906031374409,
    "avg_bits_err_improve": 0.8924679329601772,
    "time": 29032.63134765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(/ (expm1 (log1p (+ (* (log (/ 1.0 (fma u -4.0 1.0))) (* s 4.0)) (* (* (log (log (+ 1.0 (expm1 (/ 1.0 (fma u -4.0 1.0)))))) s) -2.0)))) 2.0)",
    "output_parens": 17,
    "avg_bits_err_input": 12.496819115533375,
    "avg_bits_err_output": 12.10268376673301,
    "avg_bits_err_improve": 0.39413534880036494,
    "time": 19542.350341796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (- (/ (/ 0.125 PI) s) 0.0)) (* 0.75 (/ (* (exp (/ (/ r s) -6.0)) (exp (/ (/ r s) -6.0))) (* s (* PI 6.0))))) r)",
    "output_parens": 20,
    "avg_bits_err_input": 0.1393646669422509,
    "avg_bits_err_output": 0.14728348256815363,
    "avg_bits_err_improve": -0.007918815625902742,
    "time": 24634.497314453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (/ (+ (sin (- normAngle (* normAngle u))) (sin (- normAngle (* normAngle u)))) (/ (* (sin normAngle) 2.0) 4.0)) 4.0) n0_i) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 19,
    "avg_bits_err_input": 0.8787843934670551,
    "avg_bits_err_output": 0.7278158293451356,
    "avg_bits_err_improve": 0.1509685641219195,
    "time": 28961.63427734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (exp (* cosTheta cosTheta)) (* (sqrt PI) cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7050612200225589,
    "avg_bits_err_output": 0.4921496027150342,
    "avg_bits_err_improve": 0.21291161730752467,
    "time": 20091.1611328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (sin (if (!= (* -2.0 (* PI u2)) 0.0) (* (/ (* (* PI (+ u2 u2)) (/ (* PI u2) PI)) u2) (* u2 (+ 0.0 (/ 1.0 u2)))) (* 2.0 (* PI u2)))))",
    "output_parens": 22,
    "avg_bits_err_input": 13.64286270808231,
    "avg_bits_err_output": 13.66034238927107,
    "avg_bits_err_improve": -0.01747968118876031,
    "time": 27678.643798828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (cos (* 2.0 (log (+ 1.0 (expm1 (* PI u2)))))) (log (+ 1.0 (expm1 (- (* (cos (* 2.0 (* PI u2))) (+ (sqrt (- (log (- 1.0 u1)))) -1.0)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.68930644715885,
    "avg_bits_err_output": 13.277357535062555,
    "avg_bits_err_improve": 0.411948912096296,
    "time": 28440.08349609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (* (log1p (- u0)) (* alpha (- alpha))) (* (fma (- alpha) alpha (* alpha alpha)) (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 14.121078724752802,
    "avg_bits_err_output": 0.3065637218755409,
    "avg_bits_err_improve": 13.814515002877261,
    "time": 16395.17919921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (if (!= (/ cos2phi (* alphax (+ alphax alphax))) 0.0) (* (/ cos2phi (/ (/ cos2phi (* alphax alphax)) 2.0)) (+ (/ cos2phi (* (+ alphax alphax) (* (+ alphax alphax) (* alphax alphax)))) (/ cos2phi (* (+ alphax alphax) (* (+ alphax alphax) (* alphax alphax)))))) (/ cos2phi (* alphax alphax))) (/ sin2phi (* alphay alphay))))",
    "output_parens": 32,
    "avg_bits_err_input": 12.559770403455477,
    "avg_bits_err_output": 12.562119285091688,
    "avg_bits_err_improve": -0.00234888163621072,
    "time": 21285.590576171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.484532653509525,
    "avg_bits_err_output": 12.374160131594374,
    "avg_bits_err_improve": 4.110372521915151,
    "time": 24575.908447265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2216887218755409,
    "avg_bits_err_output": 0.15707312031259013,
    "avg_bits_err_improve": 0.06461560156295076,
    "time": 14727.483154296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.64980104240478,
    "avg_bits_err_output": 10.510295020058447,
    "avg_bits_err_improve": 3.1395060223463336,
    "time": 21258.941650390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f 4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) 4.0))) (exp (* PI (/ f 4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.25))",
    "output_parens": 31,
    "avg_bits_err_input": 61.462011496647925,
    "avg_bits_err_output": 1.928163797945621,
    "avg_bits_err_improve": 59.5338476987023,
    "time": 43382.448974609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= (* l l) 2e-24) (/ (* (sqrt 2.0) t) (sqrt (+ (+ (* l (- l)) (/ (* (+ x 1.0) (* l l)) (+ x -1.0))) (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t)))))) (if (<= (* l l) 1e+282) (* t (/ (sqrt 2.0) (sqrt (+ (* (+ x 1.0) (* 2.0 (/ (* t t) (+ x -1.0)))) (+ (* (+ x 1.0) (/ (* l l) (+ x -1.0))) (* l (- l))))))) (* t (/ (sqrt 2.0) (sqrt (fma l (- l) (* (/ (fma l l (* 2.0 (* t t))) (+ x -1.0)) (+ x 1.0))))))))",
    "output_parens": 57,
    "avg_bits_err_input": 42.925394382291636,
    "avg_bits_err_output": 37.27307320517417,
    "avg_bits_err_improve": 5.652321177117464,
    "time": 24391.11181640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.6964799854752193,
    "avg_bits_err_output": 3.6964799854752193,
    "avg_bits_err_improve": 0,
    "time": 27521.90185546875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 1.0654600485173984,
    "avg_bits_err_output": 1.0731369282048084,
    "avg_bits_err_improve": -0.007676879687410043,
    "time": 9259.34814453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.159801384007425,
    "avg_bits_err_output": 10.159801384007425,
    "avg_bits_err_improve": 0,
    "time": 11821.20703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 0.0) (sqrt (if (!= (* U (* t (* 2.0 n))) 0.0) (* (* n (* 2.0 t)) (* U (* (* U (- t (fma 2.0 (* l (/ l Om)) (* (- U U*) (* n (pow (/ l Om) 2.0)))))) (* 2.0 (/ n (* (* 2.0 n) (* U t))))))) (* (* n -2.0) (* U (- (fma 2.0 (* l (/ l Om)) (* (- U U*) (* n (pow (/ l Om) 2.0)))) t))))) (if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 1e+146) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* U (* (* 2.0 n) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om))))))))))",
    "output_parens": 97,
    "avg_bits_err_input": 34.57310368756563,
    "avg_bits_err_output": 29.014213078735892,
    "avg_bits_err_improve": 5.558890608829735,
    "time": 43491.715576171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -3.1e+99) 0.0 (if (<= t -5e-78) (+ (/ (/ 2.0 (* (pow t 3.0) (/ (pow (/ k t) 2.0) l))) (* (/ (tan k) l) (+ (sin k) (sin k)))) (/ (/ 2.0 (* (pow t 3.0) (/ (pow (/ k t) 2.0) l))) (* (/ (tan k) l) (+ (sin k) (sin k))))) (if (<= t 1.5e-208) 0.0 (if (<= t 1.45e-91) (/ 2.0 (* (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) l) (* (sin k) (/ (tan k) l)))) (/ (/ 2.0 (* (/ (sin k) l) (tan k))) (/ (* (pow t 3.0) (pow (/ k t) 2.0)) l))))))",
    "output_parens": 59,
    "avg_bits_err_input": 47.32513768766738,
    "avg_bits_err_output": 28.863318110820693,
    "avg_bits_err_improve": 18.461819576846686,
    "time": 49111.8125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (* (pow t 3.0) (* (+ 2.0 (pow (/ k t) 2.0)) (/ (tan k) l))) l) (sin k)))",
    "output_parens": 12,
    "avg_bits_err_input": 32.56549354709639,
    "avg_bits_err_output": 27.388466661101152,
    "avg_bits_err_improve": 5.177026885995236,
    "time": 23338.423828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* a2 (* a2 (cos th))) (* a1 (* a1 (cos th)))) (sqrt 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4966031984601277,
    "avg_bits_err_output": 0.4371453031432103,
    "avg_bits_err_improve": 0.059457895316917364,
    "time": 24992.0263671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (* k -0.5)) (/ (sqrt (* 2.0 (* PI n))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5202207130428028,
    "avg_bits_err_output": 0.3922103390679991,
    "avg_bits_err_improve": 0.1280103739748037,
    "time": 20115.25244140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (if (!= (- (expm1 (* l -2.0))) 0.0) (if (!= (/ 2.0 (/ 2.0 (expm1 (* l -2.0)))) 0.0) (/ 1.0 (/ 1.0 (/ 2.0 (/ 2.0 (expm1 (* l -2.0)))))) (/ 2.0 (/ 2.0 (expm1 (* l -2.0))))) (- (exp (* l -2.0)) (exp (fma l -1.0 l)))) (/ -1.0 (exp l)))) (cos (/ K 2.0))) U)",
    "output_parens": 34,
    "avg_bits_err_input": 17.5399525058927,
    "avg_bits_err_output": 0.13007349687986788,
    "avg_bits_err_improve": 17.409879009012833,
    "time": 29146.22021484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l))))",
    "output_parens": 15,
    "avg_bits_err_input": 14.777861285819132,
    "avg_bits_err_output": 14.777861285819132,
    "avg_bits_err_improve": 0,
    "time": 29218.729248046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.513615601562954,
    "avg_bits_err_output": 18.513615601562954,
    "avg_bits_err_improve": 0,
    "time": 17505.808349609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) -2e+241) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))) (if (<= (/ h l) 1e-175) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))))",
    "output_parens": 33,
    "avg_bits_err_input": 13.833042091093368,
    "avg_bits_err_output": 10.316277691333077,
    "avg_bits_err_improve": 3.516764399760291,
    "time": 11424.1201171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -2e+218) (* c0 (sqrt (/ (/ A l) V))) (if (<= (* V l) -2e-170) (* c0 (sqrt (* (/ (/ 2.0 (+ l l)) (+ V V)) (+ A A)))) (if (<= (* V l) 1e-282) (* c0 (sqrt (+ (/ (/ A V) (+ l l)) (/ (- (/ (+ A (/ A 2.0)) V) (/ A (* V 2.0))) (+ l l))))) (if (<= (* V l) 5e+208) (* c0 (sqrt (* (/ (/ 2.0 (+ l l)) (+ V V)) (+ A A)))) (* c0 (sqrt (/ (/ A V) l)))))))",
    "output_parens": 50,
    "avg_bits_err_input": 19.087414540911038,
    "avg_bits_err_output": 14.629575550352406,
    "avg_bits_err_improve": 4.457838990558631,
    "time": 16654.24169921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -1e-153) (* (/ c0 (* 2.0 w)) (+ (if (!= (* d (* d (/ c0 (* (* h (* D w)) (- D))))) 0.0) (- (/ 1.0 (/ -1.0 (* (* c0 (/ d (* h (* D w)))) (/ d D))))) (* (* c0 (/ d (* h (* D w)))) (/ d D))) (sqrt (fma (* (* c0 (/ d (* h (* D w)))) (/ d D)) (* (* c0 (/ d (* h (* D w)))) (/ d D)) (* M (- M)))))) (if (<= w 5e-23) (* (/ c0 (* 2.0 w)) (+ (if (!= (* d (* d (/ (/ (/ c0 w) (* h D)) (- D)))) 0.0) (/ -1.0 (/ -1.0 (* (* d (/ (/ c0 w) (* h D))) (/ d D)))) (* (* d (/ (/ c0 w) (* h D))) (/ d D))) (sqrt (fma (* d (/ (/ c0 w) (* h D))) (* (* d (/ (/ c0 w) (* h D))) (* (/ d D) (/ d D))) (* M (- M)))))) (/ (+ (* (sqrt (* (fma d (* c0 (/ d (* (* w D) (* D h)))) M) (- (* d (* c0 (/ d (* (* w D) (* D h))))) M))) (+ c0 c0)) (* c0 (* (* c0 (/ d (* (* w D) (* D h)))) (+ d d)))) (+ w (+ w (+ w w))))))",
    "output_parens": 121,
    "avg_bits_err_input": 59.588639698190775,
    "avg_bits_err_output": 54.116651401451186,
    "avg_bits_err_improve": 5.471988296739589,
    "time": 44493.178955078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (* (sqrt (/ d l)) (- (sqrt (/ d h)) (* (/ (pow (* (/ D 2.0) (/ M d)) 2.0) l) (* (* 0.5 h) (sqrt (/ d h)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 1e-149) (* (sqrt (/ d l)) (* (sqrt (/ d h)) (- 1.0 (* 0.5 (* (pow (/ (* D M) (+ d d)) 2.0) (/ h l)))))) (* (sqrt (/ d l)) (- (sqrt (/ d h)) (* (/ (pow (* (/ D 2.0) (/ M d)) 2.0) l) (* (* 0.5 h) (sqrt (/ d h))))))))",
    "output_parens": 79,
    "avg_bits_err_input": 25.877465678062265,
    "avg_bits_err_output": 23.84074203288128,
    "avg_bits_err_improve": 2.0367236451809845,
    "time": 42318.1533203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (- 1.0 (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 22,
    "avg_bits_err_input": 15.425813022918906,
    "avg_bits_err_output": 14.93808941198127,
    "avg_bits_err_improve": 0.4877236109376355,
    "time": 11970.77490234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9855943609377705,
    "avg_bits_err_output": 0.01202124062518029,
    "avg_bits_err_improve": 0.9735731203125902,
    "time": 3147.416748046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* v (* v 5.0))) PI) (sqrt (- 2.0 (* v (* v 6.0))))) (* (fma v v -1.0) (- t)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.43574238835900414,
    "avg_bits_err_output": 0.11573623934102967,
    "avg_bits_err_improve": 0.3200061490179745,
    "time": 21733.849609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(- (* (/ (sqrt 2.0) 4.0) (/ (* (- 1.0 (* v v)) (sqrt (+ 1.0 (* (* v v) -3.0)))) -1.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.010344360937770435,
    "avg_bits_err_output": 0.009646240625180288,
    "avg_bits_err_improve": 0.0006981203125901465,
    "time": 5308.041748046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5108302076528658,
    "avg_bits_err_output": 0.5108302076528658,
    "avg_bits_err_improve": 0,
    "time": 13977.708984375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (* (pow k m) (/ 1.0 (- (* k (+ k 10.0)) -1.0))))",
    "output_parens": 7,
    "avg_bits_err_input": 2.2294409504701145,
    "avg_bits_err_output": 2.2169305116988096,
    "avg_bits_err_improve": 0.012510438771304866,
    "time": 20323.7412109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (+ mu (- Vef (- Ec EDonor))) KbT)) -1.0)) (/ NaChar (+ 1.0 (exp (- (- (/ (+ EAccept (- (+ Vef Ev) mu)) KbT) -1.0) 1.0)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.025436822098208918,
    "avg_bits_err_output": 0.025113701785618774,
    "avg_bits_err_improve": 0.0003231203125901444,
    "time": 8427.640380859375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (fma a a (* b b)) 2.0) (* b (* b 4.0))) -1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.18291973225554356,
    "avg_bits_err_output": 0.18259661194295337,
    "avg_bits_err_improve": 0.00032312031259018603,
    "time": 17148.81396484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.1823065744436745,
    "avg_bits_err_output": 0.1823065744436745,
    "avg_bits_err_improve": 0,
    "time": 26590.91650390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.19048803207133594,
    "avg_bits_err_output": 0.19048803207133594,
    "avg_bits_err_improve": 0,
    "time": 21358.51416015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (+ (/ x (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0)) (log1p (expm1 (/ (+ x (+ x x)) (* 4.0 (sqrt (fma 4.0 (* p p) (* x x)))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.609559969502971,
    "avg_bits_err_output": 13.752869287759507,
    "avg_bits_err_improve": -0.14330931825653614,
    "time": 15981.418212890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.77464088323663,
    "avg_bits_err_output": 0.055875,
    "avg_bits_err_improve": 40.71876588323663,
    "time": 8102.613037109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (tan x)))",
    "output_parens": 5,
    "avg_bits_err_input": 31.428593048015863,
    "avg_bits_err_output": 31.428593048015863,
    "avg_bits_err_improve": 0,
    "time": 25364.54638671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 34.058381366922966,
    "avg_bits_err_output": 34.058381366922966,
    "avg_bits_err_improve": 0,
    "time": 15153.89111328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.03008086100492,
    "avg_bits_err_output": 34.03008086100492,
    "avg_bits_err_improve": 0,
    "time": 17328.95458984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 30.90666563524404,
    "avg_bits_err_output": 30.134149271143155,
    "avg_bits_err_improve": 0.7725163641008841,
    "time": 17551.316162109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (* (/ (+ (log x) (log x)) n) 0.5)))",
    "output_parens": 10,
    "avg_bits_err_input": 32.706754976689055,
    "avg_bits_err_output": 11.007187645731902,
    "avg_bits_err_improve": 21.69956733095715,
    "time": 31247.53125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (- (- (exp (log (+ (expm1 (- (log1p N) (log N))) 3.0))) 1.0) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 29.18356159511976,
    "avg_bits_err_output": 29.2102436684938,
    "avg_bits_err_improve": -0.02668207337404027,
    "time": 15191.3984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (+ (/ x (+ x 1.0)) -1.0) x)",
    "output_parens": 4,
    "avg_bits_err_input": 14.669926653435628,
    "avg_bits_err_output": 14.668779477536821,
    "avg_bits_err_improve": 0.0011471758988061964,
    "time": 17764.348388671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (if (!= (+ (cos (+ x eps)) 1.0) 0.0) (/ (* (cos (+ x eps)) (+ (cos (+ x eps)) 1.0)) (+ (cos (+ x eps)) 1.0)) (cos (+ x eps))) (cos x))",
    "output_parens": 19,
    "avg_bits_err_input": 39.62885796385204,
    "avg_bits_err_output": 39.63967789628176,
    "avg_bits_err_improve": -0.010819932429718904,
    "time": 22008.14892578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.672128719980382,
    "avg_bits_err_output": 29.373596897477864,
    "avg_bits_err_improve": 0.2985318225025182,
    "time": 13404.388427734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.002686708335755,
    "avg_bits_err_output": 30.002686708335755,
    "avg_bits_err_improve": 0,
    "time": 22342.5224609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma b b (* c (* a -4.0))))) 0.0) (* (/ c (+ b (sqrt (fma c (* a -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma b b (* c (* a -4.0)))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.234673131877436,
    "avg_bits_err_output": 21.775747093389228,
    "avg_bits_err_improve": 12.458926038488208,
    "time": 21992.883056640625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (sqrt (fma c (* a -4.0) (* b b))) b) (* a -2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 33.710277482896295,
    "avg_bits_err_output": 33.72186898635007,
    "avg_bits_err_improve": -0.011591503453772134,
    "time": 26122.010986328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.368384163634296,
    "avg_bits_err_output": 0.8390207927381815,
    "avg_bits_err_improve": 60.529363370896114,
    "time": 22239.188232421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (+ (+ (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))) 2.0) -2.0)) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 22,
    "avg_bits_err_input": 63.004861545587985,
    "avg_bits_err_output": 44.22279105056104,
    "avg_bits_err_improve": 18.782070495026943,
    "time": 14995.197509765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (if (!= (/ 1.0 (- -1.0 eps)) 0.0) (/ (- (/ (/ eps (- eps -1.0)) (- eps -1.0)) (/ 1.0 (* (- -1.0 eps) (- -1.0 eps)))) (/ 1.0 (- -1.0 eps))) (/ (- 1.0 eps) (- eps -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 58.55311717107745,
    "avg_bits_err_output": 58.57017800189994,
    "avg_bits_err_improve": -0.017060830822487105,
    "time": 17848.46923828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(if (!= (+ (/ 0.5 x) (/ -0.5 (tan x))) 0.0) (/ (* (if (!= (+ (/ 0.5 x) (/ 0.5 (tan x))) 0.0) (/ (if (!= (+ (/ 0.25 (* x x)) (/ 0.25 (* (tan x) (tan x)))) 0.0) (/ (- (/ 0.0625 (* (* x x) (* x x))) (/ 0.0625 (* (tan x) (* (tan x) (* (tan x) (tan x)))))) (+ (/ 0.25 (* x x)) (/ 0.25 (* (tan x) (tan x))))) (+ (/ 0.25 (* x x)) (/ -0.25 (* (tan x) (tan x))))) (+ (/ 0.5 x) (/ 0.5 (tan x)))) (+ (/ 0.5 x) (/ -0.5 (tan x)))) (+ (/ 0.5 x) (/ -0.5 (tan x)))) (/ (+ (/ (/ 1.0 (tan x)) (/ -2.0 x)) 0.5) (+ x x))) (+ (/ 1.0 x) (/ -1.0 (tan x))))",
    "output_parens": 75,
    "avg_bits_err_input": 59.86659524500726,
    "avg_bits_err_output": 59.85942638855422,
    "avg_bits_err_improve": 0.007168856453041883,
    "time": 29132.12060546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ (expm1 (* eps (+ a b))) (expm1 (* eps a))) (/ eps (expm1 (* eps b))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.52131561508944,
    "avg_bits_err_output": 29.255656039636563,
    "avg_bits_err_improve": 31.26565957545288,
    "time": 27720.835693359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.146003904474156,
    "avg_bits_err_output": 0.3975943609377705,
    "avg_bits_err_improve": 40.74840954353638,
    "time": 7644.953369140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.65758867147359,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 58.65721367147359,
    "time": 3571.277099609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.113551741286233,
    "avg_bits_err_output": 0.01916850310022949,
    "avg_bits_err_improve": 29.094383238186005,
    "time": 6695.17919921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(fma (exp x) (/ -2.0 (exp x)) (- (- (/ -1.0 (exp x)) (exp x))))",
    "output_parens": 9,
    "avg_bits_err_input": 29.460704682000475,
    "avg_bits_err_output": 29.345650047964273,
    "avg_bits_err_improve": 0.11505463403620197,
    "time": 24372.64990234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(fma (/ 2.0 (+ 1.0 x)) (- 0.5 (/ (/ 2.0 x) (/ 2.0 (+ 1.0 x)))) (/ 1.0 (+ x -1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 9.633505261051234,
    "avg_bits_err_output": 9.627404210498577,
    "avg_bits_err_improve": 0.006101050552656417,
    "time": 26259.990966796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (+ (/ (tan (+ x eps)) 2.0) (/ (tan (+ x eps)) 4.0)) (if (!= (- (/ (tan (+ x eps)) 4.0) (tan x)) 0.0) (/ 2.0 (/ 2.0 (- (tan x) (/ (tan (+ x eps)) 4.0)))) (- (tan x) (/ (tan (+ x eps)) 4.0))))",
    "output_parens": 27,
    "avg_bits_err_input": 36.7534910911402,
    "avg_bits_err_output": 36.79874996040806,
    "avg_bits_err_improve": -0.04525886926786171,
    "time": 21000.9345703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.591864212488453,
    "avg_bits_err_output": 0.16016052656439303,
    "avg_bits_err_improve": 29.43170368592406,
    "time": 11907.708251953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (if (!= (+ (sin (+ x eps)) 1.0) 0.0) (/ (* (sin (+ x eps)) (+ (sin (+ x eps)) 1.0)) (expm1 (log1p (+ (sin (+ x eps)) 1.0)))) (sin (+ x eps))) (sin x))",
    "output_parens": 21,
    "avg_bits_err_input": 37.01132265054853,
    "avg_bits_err_output": 37.09562635192327,
    "avg_bits_err_improve": -0.08430370137474341,
    "time": 19128.712646484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 20.256004051314022,
    "avg_bits_err_output": 20.115241279371475,
    "avg_bits_err_improve": 0.14076277194254772,
    "time": 13905.93310546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 14.178066987185467,
    "avg_bits_err_output": 14.178066987185467,
    "avg_bits_err_improve": 0,
    "time": 4894.4873046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.38078377963852,
    "avg_bits_err_output": 1.2293022381684982,
    "avg_bits_err_improve": 28.151481541470023,
    "time": 24473.776611328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07448514209423482,
    "avg_bits_err_output": 0.07448514209423482,
    "avg_bits_err_improve": 0,
    "time": 17595.919189453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a (* b -0.25)) (+ (* a b) (* a (+ (+ b b) b))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.029857741440058,
    "avg_bits_err_output": 0.3316135343791468,
    "avg_bits_err_improve": 15.698244207060911,
    "time": 11500.8515625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (log (expm1 (log1p (exp (cos (* PI (/ angle 180.0)))))))) 2.0) (pow (* b (sin (* (/ PI 180.0) angle))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 20.417983566486676,
    "avg_bits_err_output": 20.391497852269286,
    "avg_bits_err_improve": 0.02648571421739021,
    "time": 41424.084228515625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* PI (/ angle 180.0))) (cos (/ (* PI angle) 180.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 31.15099973059393,
    "avg_bits_err_output": 31.207697063986416,
    "avg_bits_err_improve": -0.05669733339248495,
    "time": 42926.769287109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (expm1 (log1p (sin (* angle (/ PI 180.0)))))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.207910606075902,
    "avg_bits_err_output": 20.173962982931357,
    "avg_bits_err_improve": 0.03394762314454525,
    "time": 41817.395751953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17090158869586775,
    "avg_bits_err_output": 0.17131034640495865,
    "avg_bits_err_improve": -0.0004087577090909067,
    "time": 16030.4501953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3234814492662428,
    "avg_bits_err_output": 0.3143218244774213,
    "avg_bits_err_improve": 0.009159624788821485,
    "time": 19584.435302734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (- (sin v)) (/ e (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13239624062518027,
    "avg_bits_err_output": 0.13429248125036058,
    "avg_bits_err_improve": -0.0018962406251803177,
    "time": 17087.878662109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi2) (* (cos phi1) (cos (- lambda1 lambda2))) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.053078116884766,
    "avg_bits_err_output": 17.05141220328939,
    "avg_bits_err_improve": 0.0016659135953744908,
    "time": 33147.779541015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.41960666705849,
    "avg_bits_err_output": 0.17676917344137622,
    "avg_bits_err_improve": 52.24283749361711,
    "time": 29085.590087890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.521127677284223,
    "avg_bits_err_output": 0.3350387234500304,
    "avg_bits_err_improve": 28.186088953834194,
    "time": 24347.981689453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* -4.0 (* (/ c (+ b (sqrt (fma -4.0 (* a c) (* b b))))) a)) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.933839051325805,
    "avg_bits_err_output": 0.239355174272131,
    "avg_bits_err_improve": 43.69448387705367,
    "time": 25419.985595703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.23904482868608,
    "avg_bits_err_output": 34.23904482868608,
    "avg_bits_err_improve": 0,
    "time": 20467.729248046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (* (cos (- lambda1 lambda2)) (cos phi2)) 0.0) (/ (+ (* (cos (- lambda1 lambda2)) (* (cos (- lambda1 lambda2)) (* (cos phi2) (cos phi2)))) (* (* (cos (- lambda1 lambda2)) (cos phi2)) (cos phi1))) (* (cos (- lambda1 lambda2)) (cos phi2))) (+ (* (cos (- lambda1 lambda2)) (cos phi2)) (cos phi1)))))",
    "output_parens": 39,
    "avg_bits_err_input": 0.9072351064400549,
    "avg_bits_err_output": 0.936856589709076,
    "avg_bits_err_improve": -0.029621483269021143,
    "time": 30499.78662109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (log (+ 1.0 (expm1 (if (!= (+ 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x)))))) 0.0) (/ (- 1.0 (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x))))))) (+ 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x))))))) (+ 1.0 (/ -4.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x)))))))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 63,
    "avg_bits_err_input": 29.07634473132597,
    "avg_bits_err_output": 29.043594613444338,
    "avg_bits_err_improve": 0.0327501178816334,
    "time": 27458.6953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ 1.0 (exp (+ x x))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.071940921935386,
    "avg_bits_err_output": 0.7396156015629508,
    "avg_bits_err_improve": 57.33232532037243,
    "time": 16456.810791015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (/ -1.0 (exp x))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 57.99240368509231,
    "avg_bits_err_output": 0.03504248125036058,
    "avg_bits_err_improve": 57.957361203841955,
    "time": 8515.6474609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.00789624062518029,
    "avg_bits_err_output": 0.00789624062518029,
    "avg_bits_err_improve": 0,
    "time": 3609.64990234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.369375,
    "avg_bits_err_output": 32.369375,
    "avg_bits_err_improve": 0,
    "time": 5751.840576171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (/ x (/ (- 1.0 x) 2.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.54309489220731,
    "avg_bits_err_output": 0.016094360937770436,
    "avg_bits_err_improve": 58.527000531269536,
    "time": 12673.887451171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.026573120312590147,
    "avg_bits_err_output": 0.026573120312590147,
    "avg_bits_err_improve": 0,
    "time": 2971.21044921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12382312031259014,
    "avg_bits_err_output": 0.12382312031259014,
    "avg_bits_err_improve": 0,
    "time": 22353.418701171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1261462406251803,
    "avg_bits_err_output": 0.1261462406251803,
    "avg_bits_err_improve": 0,
    "time": 25556.47509765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (cos (/ (+ phi1 phi2) 2.0)) (- lambda1 lambda2) (fma (- lambda2) (cos (/ (+ phi1 phi2) 2.0)) (* (cos (/ (+ phi1 phi2) 2.0)) lambda2))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.08669208283665,
    "avg_bits_err_output": 3.6927638902791835,
    "avg_bits_err_improve": 35.39392819255747,
    "time": 26316.974365234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.449749711339619,
    "avg_bits_err_output": 0.013247159990437492,
    "avg_bits_err_improve": 14.436502551349182,
    "time": 9611.193115234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (if (!= (- (cos delta) (if (!= (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 0.0) (/ 1.0 (/ 1.0 (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) 0.0) (/ (* (- (cos delta) (if (!= (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 0.0) (/ 1.0 (/ 1.0 (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (- (cos delta) (if (!= (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 0.0) (/ 1.0 (/ 1.0 (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))) (- (cos delta) (if (!= (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 0.0) (/ 1.0 (/ 1.0 (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))) (- (cos delta) (if (!= (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 0.0) (/ 1.0 (/ 1.0 (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))))))",
    "output_parens": 221,
    "avg_bits_err_input": 0.1635200668372493,
    "avg_bits_err_output": 0.16994324245491263,
    "avg_bits_err_improve": -0.00642317561766334,
    "time": 39625.34912109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.4813404162015,
    "avg_bits_err_output": 0.17539417344137612,
    "avg_bits_err_improve": 52.30594624276012,
    "time": 23079.37255859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.675928576812307,
    "avg_bits_err_output": 0.3446614832115305,
    "avg_bits_err_improve": 28.331267093600776,
    "time": 24774.178466796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* b b) 0.0) (/ (+ (* (* b b) (* b b)) (* (* b b) (* c (* a -3.0)))) (* b b)) (fma c (* a -3.0) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 37,
    "avg_bits_err_input": 44.010822380376474,
    "avg_bits_err_output": 0.24963007132354206,
    "avg_bits_err_improve": 43.76119230905293,
    "time": 26330.9609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.27727371167057,
    "avg_bits_err_output": 34.27727371167057,
    "avg_bits_err_improve": 0,
    "time": 19541.863037109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (cos (- lambda1 lambda2))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.235009709166363,
    "avg_bits_err_output": 13.23486895270317,
    "avg_bits_err_improve": 0.00014075646319255952,
    "time": 37430.107666015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (+ 1.0 x)) (- (+ x -1.0) (* x (/ x (+ 1.0 x))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.474627970452524,
    "avg_bits_err_output": 0.531199891393961,
    "avg_bits_err_improve": 28.943428079058563,
    "time": 16644.074951171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.010375,
    "avg_bits_err_output": 0.03602066434202206,
    "avg_bits_err_improve": -0.025645664342022055,
    "time": 3269.140380859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(* -2.0 (/ (- (/ 1.0 (- -1.0 x)) (+ (/ x (- -1.0 x)) 1.0)) (- (- (+ x x) 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 14.716908677052219,
    "avg_bits_err_output": 12.781538527402452,
    "avg_bits_err_improve": 1.935370149649767,
    "time": 21361.688720703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 4e+248) (/ (sqrt (* (* (fma (* A C) -4.0 (pow B 2.0)) (* F -2.0)) (- (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (fma A -1.0 C)) (+ A A)))) (- (- (pow B 2.0) (* A (* 4.0 C))))) 0.0)",
    "output_parens": 45,
    "avg_bits_err_input": 52.34570415851834,
    "avg_bits_err_output": 49.38193982546108,
    "avg_bits_err_improve": 2.963764333057256,
    "time": 36337.21142578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 4.4e+153) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI)) (* 180.0 (/ (atan (* (/ 1.0 B) (if (!= (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) 0.0) (if (!= (+ (- A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) 0.0) 0.0 (- C (+ A (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) PI)))",
    "output_parens": 49,
    "avg_bits_err_input": 29.768099971483018,
    "avg_bits_err_output": 27.53343724315118,
    "avg_bits_err_improve": 2.2346627283318377,
    "time": 28714.432861328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (* F (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.39194310070474,
    "avg_bits_err_output": 52.089173760287196,
    "avg_bits_err_improve": 0.3027693404175409,
    "time": 35495.46728515625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 16.164742181436335,
    "avg_bits_err_output": 16.164742181436335,
    "avg_bits_err_improve": 0,
    "time": 32710.913330078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- g) 0.0) (* (/ (- (if (!= 1.0 0.0) (sqrt (- (* g g) (* h h))) (sqrt (- (* g g) (* h h)))) g) g) (/ (* g g) g)) (- (sqrt (fma g g (* h (- h)))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 36,
    "avg_bits_err_input": 35.7464310882645,
    "avg_bits_err_output": 35.69887865070364,
    "avg_bits_err_improve": 0.04755243756086003,
    "time": 18562.531494140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (if (!= (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)) 0.0) (/ 1.0 (/ 1.0 (cos (/ (fma 2.0 PI (acos (/ g (- h)))) 3.0)))) (cos (/ (fma 2.0 PI (acos (/ g (- h)))) 3.0))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.9913639109464255,
    "avg_bits_err_output": 0.9822266921910161,
    "avg_bits_err_improve": 0.009137218755409404,
    "time": 14122.114013671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (+ (+ (exp a) 1.0) -1.0) (+ (exp a) (exp b)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.667125,
    "avg_bits_err_output": 0.7774866904772038,
    "avg_bits_err_improve": -0.11036169047720379,
    "time": 7708.08984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-295) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+257) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.423395897667953,
    "avg_bits_err_output": 2.5105537224188748,
    "avg_bits_err_improve": 8.912842175249079,
    "time": 9048.810302734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5129727632595006,
    "avg_bits_err_output": 0.4325,
    "avg_bits_err_improve": 0.08047276325950059,
    "time": 11310.04541015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -9e-9) (log1p (/ (+ -1.0 (+ (if (!= (+ x (hypot 1.0 x)) 0.0) (/ 1.0 (/ 1.0 (+ x (hypot 1.0 x)))) (+ x (hypot 1.0 x))) (+ x (+ (hypot 1.0 x) -1.0)))) 2.0)) (log1p (+ x (+ (hypot 1.0 x) -1.0))))",
    "output_parens": 23,
    "avg_bits_err_input": 52.89206785441452,
    "avg_bits_err_output": 14.035169022269276,
    "avg_bits_err_improve": 38.85689883214525,
    "time": 18255.097900390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.651442741400846,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.651442741400846,
    "time": 2632.030029296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- x (- 2.0 x)) (+ -2.0 (* x -2.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.017448120312590146,
    "avg_bits_err_improve": -0.004823120312590145,
    "time": 3752.798828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1307.893310546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (- (/ (+ (/ 1.0 r) (/ 6.0 (+ r r))) (+ r r)) 0.0)) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 18,
    "avg_bits_err_input": 12.357390301486214,
    "avg_bits_err_output": 0.5395067142246636,
    "avg_bits_err_improve": 11.817883587261552,
    "time": 23689.30029296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* (* x1 x1) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)))))) (+ x1 x1)))",
    "output_parens": 47,
    "avg_bits_err_input": 0.5166551153454957,
    "avg_bits_err_output": 0.29027447965027553,
    "avg_bits_err_improve": 0.22638063569522016,
    "time": 98444.341796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.23924039327486,
    "avg_bits_err_output": 1.2200588557399485,
    "avg_bits_err_improve": 17.01918153753491,
    "time": 8308.0263671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.21791748125036056,
    "avg_bits_err_output": 0.18373120312590144,
    "avg_bits_err_improve": 0.034186278124459124,
    "time": 7496.531982421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0026652410118609203,
    "avg_bits_err_output": 0.0026652410118609203,
    "avg_bits_err_improve": 0,
    "time": 3437.853271484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(- (/ (/ (/ PI (- b a)) (* a (+ a b))) 2.0) (* (* PI (/ 0.5 (- b a))) (/ 1.0 (* b (+ a b)))))",
    "output_parens": 14,
    "avg_bits_err_input": 14.487350327184277,
    "avg_bits_err_output": 0.29056447501009597,
    "avg_bits_err_improve": 14.19678585217418,
    "time": 16487.530029296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (- (exp (- (fma eps x x))) (+ (- -1.0 (/ (exp (* x (+ eps -1.0))) eps)) (/ (exp (- (fma eps x x))) eps))) (- (expm1 (* x (+ eps -1.0))))) 2.0)",
    "output_parens": 20,
    "avg_bits_err_input": 29.288659464539627,
    "avg_bits_err_output": 24.639551501040316,
    "avg_bits_err_improve": 4.649107963499311,
    "time": 20728.86865234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (+ (- 2.0 (/ (/ 2.0 t) (+ 2.0 (/ 2.0 t)))) (- (/ (/ 2.0 t) (+ 2.0 (/ 2.0 t)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.020375,
    "avg_bits_err_output": 0.021375,
    "avg_bits_err_improve": -0.0010000000000000009,
    "time": 7324.414794921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (/ (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t)) (/ (/ 4.0 t) (+ (/ 2.0 t) 2.0))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.025625,
    "avg_bits_err_output": 0.08163684218813101,
    "avg_bits_err_improve": -0.05601184218813102,
    "time": 15392.246337890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (* (* (/ t (+ t 1.0)) 4.0) (/ t (+ t 1.0))) -1.0) (+ 2.0 (/ (* t (* (/ t (+ t 1.0)) 4.0)) (+ t 1.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.035375,
    "avg_bits_err_output": 0.06278167301339763,
    "avg_bits_err_improve": -0.02740667301339763,
    "time": 8483.7236328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3391.4833984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7314.492919921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2997.754638671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.80911877941945,
    "avg_bits_err_output": 0.248875,
    "avg_bits_err_improve": 7.56024377941945,
    "time": 32126.118896484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(/ (- (if (!= (- -2.0 (pow x 5.0)) 0.0) (/ (* (pow x 5.0) (+ (pow x 5.0) 2.0)) (+ (pow x 5.0) 2.0)) (pow x 5.0)) (pow (+ x eps) 5.0)) -1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 7.568363101246445,
    "avg_bits_err_output": 7.569874593097253,
    "avg_bits_err_improve": -0.0015114918508079,
    "time": 13730.560791015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 16.151271773531636,
    "avg_bits_err_output": 16.151271773531636,
    "avg_bits_err_improve": 0,
    "time": 14343.34716796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (exp (* 10.0 (* x x))) (cos x)) 0.0) (/ (- 0.0 (* (cos x) (* (cos x) (exp (* (* x x) 20.0))))) (- (* (if (!= (+ 1.0 (exp (log1p (exp (* 10.0 (* x x)))))) 0.0) (/ (- (* (if (!= (pow (exp (* x x)) 10.0) 0.0) (/ (+ (pow (exp (* x x)) 10.0) (exp (* (* x x) 20.0))) (pow (exp (* x x)) 10.0)) (+ (pow (exp (* x x)) 10.0) 1.0)) (exp (log1p (exp (* 10.0 (* x x)))))) 1.0) (+ 1.0 (exp (log1p (exp (* 10.0 (* x x))))))) (exp (* 10.0 (* x x)))) (cos x)))) (* (exp (* 10.0 (* x x))) (cos x)))",
    "output_parens": 69,
    "avg_bits_err_input": 3.5337284328666234,
    "avg_bits_err_output": 3.052292075718328,
    "avg_bits_err_improve": 0.48143635714829536,
    "time": 21771.352294921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -5.0) (if (!= (* (/ (- -2.0 (* x (+ x x))) (* (fma x x 1.0) -2.0)) (/ x (fma x x 1.0))) 0.0) (* (/ x (+ x (/ 1.0 x))) (/ 1.0 x)) (/ x (fma x x 1.0))) (if (<= x 5e-50) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (- -2.0 (* x (+ x x))) (* (fma x x 1.0) -2.0)) (/ x (fma x x 1.0))) 0.0) (* (/ x (+ x (/ 1.0 x))) (/ 1.0 x)) (/ x (fma x x 1.0)))))",
    "output_parens": 43,
    "avg_bits_err_input": 14.775483775594797,
    "avg_bits_err_output": 0.013073120312590145,
    "avg_bits_err_improve": 14.762410655282206,
    "time": 7787.471923828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.41319217748289,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.41319217748289,
    "time": 4432.408203125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.72486944223623,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 38.723869442236236,
    "time": 4350.113037109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.25725,
    "avg_bits_err_improve": 63.74275,
    "time": 20934.617431640625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.843250776468324,
    "avg_bits_err_output": 0.392125,
    "avg_bits_err_improve": 61.451125776468324,
    "time": 7731.172119140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (sqrt (fma c (* a -4.0) (* b b))) b) (* a -2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 33.710277482896295,
    "avg_bits_err_output": 33.72186898635007,
    "avg_bits_err_improve": -0.011591503453772134,
    "time": 27603.34814453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.23904482868608,
    "avg_bits_err_output": 34.23904482868608,
    "avg_bits_err_improve": 0,
    "time": 23320.89501953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2401.262939453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.02464764542883,
    "avg_bits_err_output": 0.01975,
    "avg_bits_err_improve": 40.00489764542883,
    "time": 12622.96875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.27894301975897,
    "avg_bits_err_output": 20.27894301975897,
    "avg_bits_err_improve": 0,
    "time": 4964.86279296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ c (+ b (+ d a))) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.5764649048846247,
    "avg_bits_err_output": 0.021879107201957803,
    "avg_bits_err_improve": 3.554585797682667,
    "time": 9355.552734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0385,
    "avg_bits_err_output": 0.001375,
    "avg_bits_err_improve": 0.037125,
    "time": 9636.157470703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.016948120312590145,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": 0.005823120312590146,
    "time": 3760.189697265625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.014374999999999999,
    "time": 3436.05908203125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 1883.570068359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ e (+ c a)) (+ b d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4032691734413764,
    "avg_bits_err_output": 0.242,
    "avg_bits_err_improve": 0.16126917344137642,
    "time": 5901.0849609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (- 1.0 (cos x)) 0.0) (/ (+ (* (- 1.0 (cos x)) (+ (cos x) -1.0)) (* (- 1.0 (cos x)) (+ (cos x) -1.0))) (if (!= (+ (* (cos x) (/ (cos x) 2.0)) (/ (* (- 2.0 (cos x)) (- 2.0 (cos x))) 2.0)) 0.0) (/ (- (* (* (cos x) (/ (cos x) 2.0)) (* (cos x) (/ (cos x) 2.0))) (* (/ (* (- 2.0 (cos x)) (- 2.0 (cos x))) 2.0) (/ (* (- 2.0 (cos x)) (- 2.0 (cos x))) 2.0))) (+ (* (cos x) (/ (cos x) 2.0)) (/ (* (- 2.0 (cos x)) (- 2.0 (cos x))) 2.0))) (+ (* (cos x) 2.0) -2.0))) (- 1.0 (cos x)))",
    "output_parens": 69,
    "avg_bits_err_input": 29.500441905640464,
    "avg_bits_err_output": 29.506144068937463,
    "avg_bits_err_improve": -0.005702163296998464,
    "time": 15872.41796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (sqrt (if (!= (- (* x x) (- eps)) 0.0) (* (- (/ eps (fma x x eps)) (/ (* x x) (fma x x eps))) (- (fma x x eps))) (- (* x x) eps))))",
    "output_parens": 18,
    "avg_bits_err_input": 24.28423411580665,
    "avg_bits_err_output": 24.289045089217147,
    "avg_bits_err_improve": -0.004810973410496189,
    "time": 12547.2216796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(- (/ x (* (tan x) 2.0)) (- 1.0 (+ 1.0 (/ (- (/ x 2.0) (sin x)) (tan x)))))",
    "output_parens": 11,
    "avg_bits_err_input": 30.51516062313163,
    "avg_bits_err_output": 30.579744009497283,
    "avg_bits_err_improve": -0.06458338636565131,
    "time": 33056.710693359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006573120312590144,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.005823120312590144,
    "time": 2763.6162109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -100.0 (/ i n))))",
    "output_parens": 22,
    "avg_bits_err_input": 47.94557993578987,
    "avg_bits_err_output": 13.498827147421382,
    "avg_bits_err_improve": 34.44675278836849,
    "time": 27013.4404296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (- INFINITY)) (+ (* d (/ b (fma d d (* c c)))) (* c (/ a (fma d d (* c c))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 2e+284) (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (+ (* d (/ b (fma d d (* c c)))) (* c (/ a (fma d d (* c c)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.41803412600564,
    "avg_bits_err_output": 23.171959575746662,
    "avg_bits_err_improve": 3.246074550258978,
    "time": 14588.376220703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= c -2e+35) (fma b (/ c (fma c c (* d d))) (* (/ -1.0 (fma c c (* d d))) (* d a))) (if (<= c 1e-299) (- (/ (* b c) (fma c c (* d d))) (* a (/ d (fma c c (* d d))))) (- (* b (/ c (fma c c (* d d)))) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 31,
    "avg_bits_err_input": 26.36938487891704,
    "avg_bits_err_output": 23.374732688359895,
    "avg_bits_err_improve": 2.9946521905571437,
    "time": 16681.05859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.033375,
    "avg_bits_err_output": 0.01753053411825244,
    "avg_bits_err_improve": 0.015844465881747562,
    "time": 6034.97607421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (if (!= (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) 0.0) (/ (* (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux))) (+ (+ (- 1.0 (* ux (* maxCos (fma ux maxCos (- 1.0 ux))))) (- (fma ux maxCos (- 1.0 ux)))) (* ux (fma ux maxCos (- 1.0 ux))))) (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))) (- 1.0 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))",
    "output_parens": 40,
    "avg_bits_err_input": 13.604116756017186,
    "avg_bits_err_output": 11.32776733500613,
    "avg_bits_err_improve": 2.276349421011057,
    "time": 34368.256591796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- (+ ux (- ux (* ux ux))) (* ux (* maxCos (- 1.0 ux)))) (- (* ux (* maxCos (fma ux maxCos (- 1.0 ux))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.633105205358305,
    "avg_bits_err_output": 0.3554777211581319,
    "avg_bits_err_improve": 13.277627484200174,
    "time": 34569.642333984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (if (!= (fma (sin (* 2.0 (* uy PI))) (* (sqrt (- 1.0 (* (* ux maxCos) (* (* (- 1.0 ux) maxCos) (- ux (* ux ux)))))) yi) (- (* (- 1.0 ux) (* ux (* maxCos zi))))) 0.0) (* (fma (sin (* 2.0 (* uy PI))) (* (sqrt (- 1.0 (* (* ux maxCos) (* (* (- 1.0 ux) maxCos) (- ux (* ux ux)))))) yi) (- (* (- 1.0 ux) (* ux (* maxCos zi))))) (/ (fma (- 1.0 ux) (* ux (* maxCos zi)) (* (sin (* 2.0 (* uy PI))) (* (sqrt (- 1.0 (* (* ux maxCos) (* (* (- 1.0 ux) maxCos) (- ux (* ux ux)))))) yi))) (fma (sin (* 2.0 (* uy PI))) (* (sqrt (- 1.0 (* (* ux maxCos) (* (* (- 1.0 ux) maxCos) (- ux (* ux ux)))))) yi) (- (* (- 1.0 ux) (* ux (* maxCos zi))))))) (fma (- 1.0 ux) (* ux (* maxCos zi)) (* (sin (* 2.0 (* uy PI))) (* (sqrt (- 1.0 (* (* ux maxCos) (* (* (- 1.0 ux) maxCos) (- ux (* ux ux)))))) yi)))))",
    "output_parens": 111,
    "avg_bits_err_input": 0.3533256941859234,
    "avg_bits_err_output": 0.345189697224672,
    "avg_bits_err_improve": 0.00813599696125139,
    "time": 50337.111572265625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.21003759491720253,
    "avg_bits_err_output": 0.21003759491720253,
    "avg_bits_err_improve": 0,
    "time": 22801.0849609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5273052096597759,
    "avg_bits_err_output": 0.5273052096597759,
    "avg_bits_err_improve": 0,
    "time": 21432.4140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (if (!= (* u2 -6.28318530718) 0.0) (- (+ 1.0 (* u2 6.28318530718)) 1.0) (* 6.28318530718 u2))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.3268196327186358,
    "avg_bits_err_output": 0.3480386216482113,
    "avg_bits_err_improve": -0.021218988929575522,
    "time": 22179.328369140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.33150640204892723,
    "avg_bits_err_output": 0.33263613830957,
    "avg_bits_err_improve": -0.0011297362606427774,
    "time": 50196.879638671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05803104458225688,
    "avg_bits_err_output": 0.040230239571414854,
    "avg_bits_err_improve": 0.017800805010842025,
    "time": 10955.85302734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.13354197425442763,
    "avg_bits_err_output": 0.10204590033081357,
    "avg_bits_err_improve": 0.03149607392361406,
    "time": 18148.805419921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* PI (* x tau))) (* PI (* x tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6751124505807413,
    "avg_bits_err_output": 0.6787023715821615,
    "avg_bits_err_improve": -0.003589921001420193,
    "time": 24860.093017578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.15663811306823494,
    "avg_bits_err_output": 0.15281908933121355,
    "avg_bits_err_improve": 0.003819023737021393,
    "time": 18622.5068359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.561479138020748,
    "avg_bits_err_output": 2.5558232954459363,
    "avg_bits_err_improve": 0.005655842574811665,
    "time": 29710.788818359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (* cosTheta_O (/ 1.0 v)) (* cosTheta_i (/ (/ 0.5 v) (* (exp (* sinTheta_i (/ sinTheta_O v))) (sinh (/ 1.0 v))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.46465221439493026,
    "avg_bits_err_output": 0.35982695052157876,
    "avg_bits_err_improve": 0.1048252638733515,
    "time": 27657.60107421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (* (exp (/ (- (* cosTheta_i cosTheta_O) (+ 1.0 (* sinTheta_i sinTheta_O))) v)) (exp 0.6931)) 0.5) v)",
    "output_parens": 10,
    "avg_bits_err_input": 0.10215365043857581,
    "avg_bits_err_output": 0.08648002963360558,
    "avg_bits_err_improve": 0.01567362080497023,
    "time": 19655.828369140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (* (/ 1.0 (* PI (log (* alpha alpha)))) (- (- 1.0 (* alpha alpha)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4702707101683745,
    "avg_bits_err_output": 0.5259890117944894,
    "avg_bits_err_improve": -0.05571830162611491,
    "time": 24811.089111328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(- (- 0.0 (* (* (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) s) -1.5)) (* (* (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) s) -1.5))",
    "output_parens": 12,
    "avg_bits_err_input": 1.3115123199176546,
    "avg_bits_err_output": 1.218912423388394,
    "avg_bits_err_improve": 0.0925998965292607,
    "time": 29280.135986328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (if (!= (log (/ 1.0 (+ 1.0 (* u -4.0)))) 0.0) (/ 1.0 (/ 1.0 (/ (- (- 2.0 (log (/ 1.0 (fma u -4.0 1.0)))) (+ (log (/ 1.0 (fma u -4.0 1.0))) (* (+ 1.0 (log (/ 1.0 (fma u -4.0 1.0)))) 2.0))) -4.0))) (log (/ 1.0 (+ 1.0 (* u -4.0))))))",
    "output_parens": 28,
    "avg_bits_err_input": 12.513838276691208,
    "avg_bits_err_output": 12.523808919901938,
    "avg_bits_err_improve": -0.009970643210730046,
    "time": 28024.067626953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (/ (* 0.125 (/ (exp (/ r (- s))) s)) PI) (* 0.75 (* (/ (exp (/ r (* s -3.0))) (* PI 6.0)) (/ 1.0 s)))) r)",
    "output_parens": 16,
    "avg_bits_err_input": 0.13220703589264557,
    "avg_bits_err_output": 0.22462833989356012,
    "avg_bits_err_improve": -0.09242130400091456,
    "time": 23135.954345703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* n0_i (/ (sin (- normAngle (* normAngle u))) (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8584023282747201,
    "avg_bits_err_output": 0.7124695437383798,
    "avg_bits_err_improve": 0.1459327845363403,
    "time": 28418.6669921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (* (exp (* cosTheta (- cosTheta))) (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) (+ cosTheta cosTheta)))) (+ (* (exp (* cosTheta (- cosTheta))) (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) (+ cosTheta cosTheta)))) (+ 1.0 c))))",
    "output_parens": 26,
    "avg_bits_err_input": 0.6866850533746715,
    "avg_bits_err_output": 0.48004621881456,
    "avg_bits_err_improve": 0.20663883456011145,
    "time": 19994.934814453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (sin (if (!= (* -2.0 (* PI u2)) 0.0) (/ 1.0 (/ 0.5 (* (- PI) (/ (- (* PI (* u2 u2))) (* PI u2))))) (* 2.0 (* PI u2)))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.621533033039467,
    "avg_bits_err_output": 13.637683083748607,
    "avg_bits_err_improve": -0.016150050709139663,
    "time": 26649.2578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.670547721294065,
    "avg_bits_err_output": 0.30965822388564695,
    "avg_bits_err_improve": 13.360889497408419,
    "time": 19978.863525390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(if (!= (* alpha (* alpha (log (- 1.0 u0)))) 0.0) (* (* alpha (* (log (- 1.0 u0)) (* (* alpha alpha) alpha))) (/ (log (- 1.0 u0)) (* (- alpha) (* alpha (log (- 1.0 u0)))))) (* alpha (* (- alpha) (log (- 1.0 u0)))))",
    "output_parens": 26,
    "avg_bits_err_input": 14.035741003659682,
    "avg_bits_err_output": 14.0541444743534,
    "avg_bits_err_improve": -0.01840347069371795,
    "time": 19800.794189453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (/ -1.0 (+ (/ sin2phi (* alphay alphay)) (+ (/ sin2phi (* alphay alphay)) (/ (+ cos2phi cos2phi) (* alphax alphax))))) (+ (log (- 1.0 u0)) (log (- 1.0 u0))))",
    "output_parens": 16,
    "avg_bits_err_input": 12.619550375658925,
    "avg_bits_err_output": 12.646938131000569,
    "avg_bits_err_improve": -0.027387755341644393,
    "time": 18168.07666015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.926184191673947,
    "avg_bits_err_output": 12.695216133792437,
    "avg_bits_err_improve": 4.23096805788151,
    "time": 24672.64990234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21206372187554084,
    "avg_bits_err_output": 0.15119812031259017,
    "avg_bits_err_improve": 0.06086560156295068,
    "time": 13945.001708984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.320328265980981,
    "avg_bits_err_output": 10.155644659421528,
    "avg_bits_err_improve": 3.1646836065594535,
    "time": 19957.669921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (if (!= (+ 1.0 (exp (* PI (/ (+ f f) -4.0)))) 0.0) (/ (expm1 (* (/ (+ f f) -4.0) (* PI 2.0))) (- -1.0 (exp (* PI (/ (+ f f) -4.0))))) (- (expm1 (* PI (/ (+ f f) -4.0))))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.25))",
    "output_parens": 50,
    "avg_bits_err_input": 61.322369661325304,
    "avg_bits_err_output": 2.0229599354385424,
    "avg_bits_err_improve": 59.29940972588676,
    "time": 44696.133056640625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (- (* l (* l (+ -1.0 (/ x (+ x -1.0))))) (/ (* l (- l)) (+ x -1.0)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 42.89399472837731,
    "avg_bits_err_output": 35.1076874923679,
    "avg_bits_err_improve": 7.7863072360094066,
    "time": 26936.1279296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.9176017611745624,
    "avg_bits_err_output": 3.9176017611745624,
    "avg_bits_err_improve": 0,
    "time": 24520.2978515625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.8943742678845564,
    "avg_bits_err_output": 0.8943742678845564,
    "avg_bits_err_improve": 0,
    "time": 9754.53271484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (- (+ 1.0 (pow (/ Om Omc) 2.0)) 1.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.862531952428254,
    "avg_bits_err_output": 10.863580387019924,
    "avg_bits_err_improve": -0.0010484345916701443,
    "time": 10082.959716796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 5e-299) (sqrt (* (* 2.0 n) (* U (- t (+ (* (pow (/ l Om) 2.0) (* n (- U U*))) (* 2.0 (* l (/ l Om)))))))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 4e+284) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* U (* (* 2.0 n) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om))))))))))",
    "output_parens": 71,
    "avg_bits_err_input": 34.56024740422174,
    "avg_bits_err_output": 28.760894804311736,
    "avg_bits_err_improve": 5.799352599910005,
    "time": 37095.625244140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1e-107) (/ (/ 2.0 (* (tan k) (/ (sin k) l))) (* (pow t 3.0) (/ (pow (/ k t) 2.0) l))) (if (<= t 2.8e-78) (/ 2.0 (/ (* (exp (fma 3.0 (log t) (* 2.0 (if (!= (log (/ k t)) 0.0) (/ 1.0 (/ 1.0 (log (/ k t)))) (log (/ k t)))))) (* (sin k) (/ (tan k) l))) l)) (/ (/ (/ 2.0 (tan k)) (* (/ (pow t 3.0) l) (/ (sin k) l))) (pow (/ k t) 2.0))))",
    "output_parens": 47,
    "avg_bits_err_input": 47.23044222472221,
    "avg_bits_err_output": 34.30324584598101,
    "avg_bits_err_improve": 12.9271963787412,
    "time": 41315.827880859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (/ (* (pow t 3.0) (sin k)) l) l) (* (tan k) (+ (pow (/ k t) 2.0) 2.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.163229373401556,
    "avg_bits_err_output": 28.81579349618116,
    "avg_bits_err_improve": 3.347435877220395,
    "time": 21634.848388671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (/ (* a2 a2) (sqrt 2.0)) (* a1 (/ a1 (sqrt 2.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5397894765845872,
    "avg_bits_err_output": 0.4769635359536369,
    "avg_bits_err_improve": 0.06282594063095032,
    "time": 21747.504150390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (* k -0.5)) (/ (sqrt (* 2.0 (* PI n))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4818863233716547,
    "avg_bits_err_output": 0.4114899484451459,
    "avg_bits_err_improve": 0.0703963749265088,
    "time": 18088.550048828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (if (!= (exp (* l -2.0)) 0.0) (/ (- (exp (fma l -2.0 (+ l l))) (exp (* l -4.0))) (exp (* l -2.0))) (- (exp (+ l l)) (exp (* l -2.0)))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 38,
    "avg_bits_err_input": 17.829651954521946,
    "avg_bits_err_output": 17.810939660008902,
    "avg_bits_err_improve": 0.018712294513044014,
    "time": 30927.70849609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (if (!= (* (- n m) K) 0.0) (* (- n m) (* (+ K K) (* K (/ (+ n m) (* (- n m) (+ K K)))))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 30,
    "avg_bits_err_input": 15.418386189492933,
    "avg_bits_err_output": 1.4400967882531956,
    "avg_bits_err_improve": 13.978289401239739,
    "time": 22766.9501953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (cos (/ K 2.0)) (* J (sqrt (+ 1.0 (pow (+ (/ (/ U (cos (/ K 2.0))) (* 4.0 (+ J J))) (- (/ U (* J (* (cos (/ K 2.0)) 4.0))) (- (/ (/ U (cos (/ K 2.0))) (* J 8.0))))) 2.0))))) -2.0)",
    "output_parens": 27,
    "avg_bits_err_input": 17.46453308281331,
    "avg_bits_err_output": 17.48025244375108,
    "avg_bits_err_improve": -0.015719360937769267,
    "time": 25031.97412109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) -1e+147) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))) (if (<= (/ h l) 4e-149) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))))",
    "output_parens": 33,
    "avg_bits_err_input": 13.68570072456706,
    "avg_bits_err_output": 10.09297236838067,
    "avg_bits_err_improve": 3.59272835618639,
    "time": 12970.592529296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 0.0) (* c0 (sqrt (* (/ A l) (/ 1.0 V)))) (if (<= (/ A (* V l)) 1e+291) (* c0 (sqrt (+ (+ (/ (/ (/ A (* l (+ V V))) 2.0) 2.0) (/ (+ A (+ A (+ A (+ A A)))) (* (+ l l) (+ V (+ V (+ V V)))))) (/ A (* (+ l l) (+ V V)))))) (* c0 (sqrt (/ (/ A V) l)))))",
    "output_parens": 40,
    "avg_bits_err_input": 19.321031222129317,
    "avg_bits_err_output": 14.834228840345537,
    "avg_bits_err_improve": 4.4868023817837805,
    "time": 15050.485595703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 2e+294) (* (/ c0 (* 2.0 w)) (+ (* d (* c0 (/ (/ d D) (* D (* w h))))) (sqrt (* (fma d (* c0 (/ (/ d D) (* D (* w h)))) M) (fma d (* c0 (/ (/ d D) (* D (* w h)))) (- M)))))) (* (/ c0 (* 2.0 w)) (if (!= (sqrt (* (fma c0 (* (/ d (* h (* D D))) (/ d w)) M) (fma (* d (/ c0 D)) (/ (/ d h) (* w D)) (- M)))) 0.0) 0.0 (fma (* d c0) (/ d (* w (* h (* D D)))) (sqrt (* (fma c0 (* (/ d (* h (* D D))) (/ d w)) M) (fma (* d (/ c0 D)) (/ (/ d h) (* w D)) (- M))))))))",
    "output_parens": 94,
    "avg_bits_err_input": 59.72345062510315,
    "avg_bits_err_output": 34.23399489542314,
    "avg_bits_err_improve": 25.48945572968001,
    "time": 50289.642333984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* (* (pow (/ (* D M) (+ d d)) 2.0) h) (/ 1.0 (+ l l)))))",
    "output_parens": 15,
    "avg_bits_err_input": 26.54313077399435,
    "avg_bits_err_output": 25.69839702980695,
    "avg_bits_err_improve": 0.8447337441873977,
    "time": 39281.653564453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (- (/ -0.5 (hypot 1.0 x)) 0.5) 0.0) (/ (- 0.25 (expm1 (log1p (/ 0.25 (* (hypot 1.0 x) (hypot 1.0 x)))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 37,
    "avg_bits_err_input": 16.014168059511185,
    "avg_bits_err_output": 15.538452480035572,
    "avg_bits_err_improve": 0.4757155794756134,
    "time": 25129.763427734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9868656015629508,
    "avg_bits_err_output": 0.011698120312590146,
    "avg_bits_err_improve": 0.9751674812503607,
    "time": 4274.6513671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (+ 2.0 (* (* v v) -6.0)))) (* t (- 1.0 (* v v)))) (* (* v v) (/ (/ 5.0 (* PI (* t (- 1.0 (* v v))))) (sqrt (+ 2.0 (* (* v v) -6.0))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.42591781149169733,
    "avg_bits_err_output": 0.12096675175709026,
    "avg_bits_err_improve": 0.30495105973460707,
    "time": 20578.485107421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012707722262221501,
    "avg_bits_err_output": 0.012707722262221501,
    "avg_bits_err_improve": 0,
    "time": 6916.76416015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5507649356150287,
    "avg_bits_err_output": 0.5507649356150287,
    "avg_bits_err_improve": 0,
    "time": 10926.09423828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output_parens": 7,
    "avg_bits_err_input": 2.14736174471255,
    "avg_bits_err_output": 2.14736174471255,
    "avg_bits_err_improve": 0,
    "time": 9642.35400390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- mu (- (- Ec EDonor) Vef)) KbT)))) (/ NaChar (+ 1.0 (expm1 (log1p (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.022732716761480035,
    "avg_bits_err_output": 0.023732716761480036,
    "avg_bits_err_improve": -0.0010000000000000009,
    "time": 10087.828857421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (/ 1.0 (pow (fma a a (* b b)) -2.0)) (pow (fma a a (* b b)) 2.0)) (* 4.0 (* b b))) 1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 0.18781373264222415,
    "avg_bits_err_output": 0.2005280498794115,
    "avg_bits_err_improve": -0.012714317237187356,
    "time": 15898.26025390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* a (fma a a a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18910664275575975,
    "avg_bits_err_output": 0.1899551305756837,
    "avg_bits_err_improve": -0.0008484878199239432,
    "time": 22127.635986328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18459005351546667,
    "avg_bits_err_output": 0.18459005351546667,
    "avg_bits_err_improve": 0,
    "time": 28455.4794921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (- (/ (+ (/ x 8.0) (/ x 2.0)) (sqrt (fma x x (* 4.0 (* p p))))) (/ (+ x (+ x x)) (* (sqrt (fma x x (* 4.0 (* p p)))) -8.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.296697980081309,
    "avg_bits_err_output": 13.370319086242143,
    "avg_bits_err_improve": -0.07362110616083406,
    "time": 17554.511474609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.59271767812149,
    "avg_bits_err_output": 0.049125,
    "avg_bits_err_improve": 40.54359267812149,
    "time": 9553.5888671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(+ (/ x (- (tan x) x)) (+ (/ x (- x (tan x))) (/ (- (sin x) x) (- (tan x) x))))",
    "output_parens": 13,
    "avg_bits_err_input": 31.110674265336044,
    "avg_bits_err_output": 31.100476619587216,
    "avg_bits_err_improve": 0.010197645748828421,
    "time": 21801.640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 33.820198183972245,
    "avg_bits_err_output": 33.820198183972245,
    "avg_bits_err_improve": 0,
    "time": 14833.824951171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.05588322986994,
    "avg_bits_err_output": 34.05588322986994,
    "avg_bits_err_improve": 0,
    "time": 16328.9814453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.329167050767772,
    "avg_bits_err_output": 30.57454678980546,
    "avg_bits_err_improve": 0.7546202609623123,
    "time": 20905.22021484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (/ (if (!= (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n))) 0.0) (/ (if (!= (+ (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (log x) (+ (log x) (+ (log x) (log x)))) n))) 0.0) (/ (if (!= (+ (exp (/ (+ (+ (+ (log1p x) (log1p x)) (+ (+ (log1p x) (log1p x)) (log1p x))) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (+ (log x) (+ (log x) (+ (log x) (log x)))) (+ (log x) (+ (log x) (+ (log x) (log x))))) n))) 0.0) (/ (- (exp (/ (+ (+ (+ (+ (log1p x) (log1p x)) (+ (+ (log1p x) (log1p x)) (log1p x))) (+ (log1p x) (+ (log1p x) (log1p x)))) (+ (+ (+ (log1p x) (log1p x)) (+ (+ (log1p x) (log1p x)) (log1p x))) (+ (log1p x) (+ (log1p x) (log1p x))))) n)) (exp (/ (+ (log x) (+ (+ (+ (log x) (+ (log x) (+ (log x) (log x)))) (+ (log x) (+ (log x) (+ (log x) (log x))))) (+ (+ (+ (log x) (+ (log x) (+ (log x) (log x)))) (+ (log x) (log x))) (log x)))) n))) (+ (exp (/ (+ (+ (+ (log1p x) (log1p x)) (+ (+ (log1p x) (log1p x)) (log1p x))) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (+ (log x) (+ (log x) (+ (log x) (log x)))) (+ (log x) (+ (log x) (+ (log x) (log x))))) n)))) (- (exp (/ (+ (+ (+ (log1p x) (log1p x)) (+ (+ (log1p x) (log1p x)) (log1p x))) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (+ (log x) (+ (log x) (+ (log x) (log x)))) (+ (log x) (+ (log x) (+ (log x) (log x))))) n)))) (+ (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (log x) (+ (log x) (+ (log x) (log x)))) n)))) (- (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (log x) (+ (log x) (+ (log x) (log x)))) n)))) (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n)))) (- (exp (/ (+ (log1p x) (log1p x)) n)) (* (pow x (/ 1.0 n)) (pow x (/ 1.0 n))))) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 290,
    "avg_bits_err_input": 32.00250505090117,
    "avg_bits_err_output": 31.70786178185741,
    "avg_bits_err_improve": 0.29464326904376037,
    "time": 29990.571533203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (expm1 (- (if (!= (+ (log1p N) 2.0) 0.0) (/ (fma (+ (log1p N) 1.0) (+ (log1p N) 1.0) -1.0) (+ (log1p N) 2.0)) (log1p N)) (log N)))))",
    "output_parens": 18,
    "avg_bits_err_input": 29.40489672648931,
    "avg_bits_err_output": 29.43220964374626,
    "avg_bits_err_improve": -0.02731291725694973,
    "time": 13286.787109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(if (!= (/ 1.0 (+ 1.0 x)) 0.0) (/ (- (/ -1.0 x) (+ -1.0 (/ x x))) (+ 1.0 x)) (+ (/ 1.0 (+ 1.0 x)) (/ -1.0 x)))",
    "output_parens": 14,
    "avg_bits_err_input": 14.392850973268146,
    "avg_bits_err_output": 0.068125,
    "avg_bits_err_improve": 14.324725973268146,
    "time": 15620.015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (log (log (+ 1.0 (if (!= (+ 1.0 (exp (exp (cos (+ x eps))))) 0.0) (/ (fma (exp (exp (cos (+ x eps)))) (exp (exp (cos (+ x eps)))) -1.0) (+ 1.0 (exp (exp (cos (+ x eps)))))) (expm1 (exp (cos (+ x eps)))))))) (cos x))",
    "output_parens": 31,
    "avg_bits_err_input": 39.940981555116096,
    "avg_bits_err_output": 40.074604505573035,
    "avg_bits_err_improve": -0.13362295045693884,
    "time": 24241.192626953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ 1.0 (+ (cbrt (+ x 1.0)) (- -1.0 (cbrt x))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.536233998661956,
    "avg_bits_err_output": 29.238242633599217,
    "avg_bits_err_improve": 0.2979913650627388,
    "time": 11954.851806640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 29.938340772734886,
    "avg_bits_err_output": 29.938340772734886,
    "avg_bits_err_improve": 0,
    "time": 24757.955078125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma c (* -4.0 a) (* b b)))) 0.0) (* a (/ (* -4.0 c) (+ b (sqrt (fma c (* -4.0 a) (* b b)))))) (- (sqrt (fma c (* -4.0 a) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.148113047899024,
    "avg_bits_err_output": 21.73155687746027,
    "avg_bits_err_improve": 12.416556170438753,
    "time": 20769.7802734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.4079375625893,
    "avg_bits_err_output": 22.469940211677127,
    "avg_bits_err_improve": 11.93799735091217,
    "time": 23595.7841796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (if (!= (+ (log1p (- x)) 1.0) 0.0) (* (log1p (- x)) (/ (+ (log1p (- x)) 1.0) (+ (log1p (- x)) 1.0))) (log1p (- x))) (log1p x))",
    "output_parens": 19,
    "avg_bits_err_input": 61.41774068935821,
    "avg_bits_err_output": 0.022283082813311303,
    "avg_bits_err_improve": 61.3954576065449,
    "time": 23813.08154296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(+ (log1p n) (+ (* n (log1p n)) (- -1.0 (* n (log n)))))",
    "output_parens": 8,
    "avg_bits_err_input": 63.00128345677194,
    "avg_bits_err_output": 0.6159013302608417,
    "avg_bits_err_improve": 62.3853821265111,
    "time": 16118.254150390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(if (!= (log (/ (- 1.0 eps) (+ 1.0 eps))) 0.0) (/ 1.0 (/ 1.0 (log (/ (- 1.0 eps) (+ 1.0 eps))))) (log (/ (- 1.0 eps) (+ 1.0 eps))))",
    "output_parens": 16,
    "avg_bits_err_input": 58.5901143684253,
    "avg_bits_err_output": 58.59043830235902,
    "avg_bits_err_improve": -0.00032393393372132095,
    "time": 26809.694580078125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (log (+ 1.0 (expm1 (- 1.0 (/ x (tan x)))))) x)",
    "output_parens": 7,
    "avg_bits_err_input": 59.937304562023,
    "avg_bits_err_output": 59.947696507069594,
    "avg_bits_err_improve": -0.010391945046592355,
    "time": 28357.69775390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ b a))) (/ eps (expm1 (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.549631115990856,
    "avg_bits_err_output": 29.62271943318116,
    "avg_bits_err_improve": 30.926911682809695,
    "time": 28719.768310546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (/ 1.0 (exp (- x))) (expm1 x))",
    "output_parens": 5,
    "avg_bits_err_input": 41.02666931851472,
    "avg_bits_err_output": 0.46354248125036057,
    "avg_bits_err_improve": 40.56312683726436,
    "time": 6352.220703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.78338549412474,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 58.78263549412474,
    "time": 3080.15087890625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.372772749799932,
    "avg_bits_err_output": 0.017067347324700076,
    "avg_bits_err_improve": 29.35570540247523,
    "time": 5685.22119140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (if (!= (- (expm1 (- x)) (expm1 x)) 0.0) (/ (if (!= (* (expm1 (- x)) (expm1 (- x))) 0.0) (/ (* (* (expm1 (- x)) (expm1 (- x))) (fma (expm1 (- x)) (- (expm1 (- x))) (* (expm1 x) (expm1 x)))) (* (expm1 (- x)) (expm1 (- x)))) (fma (expm1 (- x)) (- (expm1 (- x))) (* (expm1 x) (expm1 x)))) (- (expm1 (- x)) (expm1 x))) (- (- (expm1 x)) (expm1 (- x)))))",
    "output_parens": 54,
    "avg_bits_err_input": 30.072393212563146,
    "avg_bits_err_output": 29.016385831307133,
    "avg_bits_err_improve": 1.0560073812560127,
    "time": 22866.0927734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ (- 1.0 (/ (/ 4.0 x) (/ 2.0 (+ 1.0 x)))) (+ 1.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 9.623785173793717,
    "avg_bits_err_output": 9.65220771169139,
    "avg_bits_err_improve": -0.02842253789767213,
    "time": 27471.91357421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (!= (+ (tan (+ x eps)) (tan x)) 0.0) (fma (tan (+ x eps)) (/ (tan (+ x eps)) (+ (tan (+ x eps)) (tan x))) (- (* (tan x) (/ (tan x) (+ (tan (+ x eps)) (tan x)))))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 29,
    "avg_bits_err_input": 36.96683802788382,
    "avg_bits_err_output": 36.97204128030034,
    "avg_bits_err_improve": -0.005203252416521309,
    "time": 23729.897216796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.598634197073682,
    "avg_bits_err_output": 0.16312048906511414,
    "avg_bits_err_improve": 29.435513708008568,
    "time": 14259.025634765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (log1p (expm1 (sin x))))",
    "output_parens": 6,
    "avg_bits_err_input": 37.26211806434747,
    "avg_bits_err_output": 37.27785566810136,
    "avg_bits_err_improve": -0.015737603753890994,
    "time": 21294.368408203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 20.01758811801997,
    "avg_bits_err_output": 19.87866921607185,
    "avg_bits_err_improve": 0.13891890194812007,
    "time": 14229.3203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ N 1.0)) (atan N)) 0.0) (/ (if (!= (- (* (atan N) (atan N)) (* (atan (+ 1.0 N)) (atan (+ 1.0 N)))) 0.0) (/ 1.0 (/ 1.0 (- (* (atan (+ 1.0 N)) (atan (+ 1.0 N))) (* (atan N) (atan N))))) (- (* (atan (+ 1.0 N)) (atan (+ 1.0 N))) (* (atan N) (atan N)))) (+ (atan (+ N 1.0)) (atan N))) (- (atan (+ N 1.0)) (atan N)))",
    "output_parens": 46,
    "avg_bits_err_input": 15.61891513363768,
    "avg_bits_err_output": 15.62493797166865,
    "avg_bits_err_improve": -0.00602283803097059,
    "time": 13853.849853515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.872719925704544,
    "avg_bits_err_output": 1.2385504134265952,
    "avg_bits_err_improve": 28.63416951227795,
    "time": 25188.8876953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (- m (* m m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.08473027599603312,
    "avg_bits_err_output": 0.08292072124054027,
    "avg_bits_err_improve": 0.0018095547554928537,
    "time": 11259.9619140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a (* b -0.25)) (+ (* a b) (if (!= (* a (- b)) 0.0) (* (* a (+ b (+ b b))) (* b (/ a (* a b)))) (* a (+ b (+ b b))))))",
    "output_parens": 19,
    "avg_bits_err_input": 16.04353006475563,
    "avg_bits_err_output": 0.3050268812618991,
    "avg_bits_err_improve": 15.73850318349373,
    "time": 11727.66845703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* (* PI angle) 0.005555555555555556))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.515547362137298,
    "avg_bits_err_output": 20.5257016094267,
    "avg_bits_err_improve": -0.010154247289403173,
    "time": 36294.270263671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (log (+ 1.0 (expm1 (- (exp (log1p (cos (* PI (/ angle 180.0))))) 1.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 32.063659563320776,
    "avg_bits_err_output": 32.06620500405124,
    "avg_bits_err_improve": -0.0025454407304650317,
    "time": 43095.2255859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (if (!= (* angle (/ PI 180.0)) 0.0) (/ 1.0 (/ 1.0 (* angle (/ PI 180.0)))) (* angle (/ PI 180.0))))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.54605131535058,
    "avg_bits_err_output": 20.559380040771295,
    "avg_bits_err_improve": -0.013328725420713283,
    "time": 41957.34716796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1838492043822976,
    "avg_bits_err_output": 0.17888367481976303,
    "avg_bits_err_improve": 0.004965529562534571,
    "time": 13598.223876953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (- (tan x)) 1.0) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3173243178783786,
    "avg_bits_err_output": 0.30371630887824425,
    "avg_bits_err_improve": 0.013608009000134369,
    "time": 18551.86083984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13806372187554086,
    "avg_bits_err_output": 0.13806372187554086,
    "avg_bits_err_improve": 0,
    "time": 18927.7236328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.69982691895783,
    "avg_bits_err_output": 16.697546309644128,
    "avg_bits_err_improve": 0.0022806093137006656,
    "time": 31369.01123046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma a (* c -4.0) (* b b))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 52.48820756036882,
    "avg_bits_err_output": 0.17306165469173673,
    "avg_bits_err_improve": 52.315145905677085,
    "time": 25420.03662109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* -4.0 (* a c))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.15600209448868,
    "avg_bits_err_output": 0.3376827238367109,
    "avg_bits_err_improve": 27.81831937065197,
    "time": 24312.4638671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* -4.0 (* a c))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 43.623192487426074,
    "avg_bits_err_output": 0.2288896625064902,
    "avg_bits_err_improve": 43.394302824919585,
    "time": 23383.439208984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma c (* -4.0 a) (* b b)))) 0.0) (* a (/ (* -4.0 c) (+ b (sqrt (fma c (* -4.0 a) (* b b)))))) (- (sqrt (fma c (* -4.0 a) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.15091079335884,
    "avg_bits_err_output": 21.73155687746027,
    "avg_bits_err_improve": 12.419353915898569,
    "time": 19347.59228515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (* (cos phi2) (cos (- lambda1 lambda2))) 0.0) (/ (+ (* (cos phi2) (* (cos (- lambda1 lambda2)) (cos phi1))) (* (cos phi2) (* (cos phi2) (* (cos (- lambda1 lambda2)) (cos (- lambda1 lambda2)))))) (* (cos phi2) (cos (- lambda1 lambda2)))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.8504595051628373,
    "avg_bits_err_output": 0.8737139279018545,
    "avg_bits_err_improve": -0.023254422739017233,
    "time": 32698.20703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output_parens": 5,
    "avg_bits_err_input": 29.14982067071498,
    "avg_bits_err_output": 29.14982067071498,
    "avg_bits_err_improve": 0,
    "time": 3560.9033203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(* (/ (exp x) (+ (exp x) (exp (- x)))) (- (expm1 (* x -2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.448047843824696,
    "avg_bits_err_output": 1.3415236843762623,
    "avg_bits_err_improve": 57.10652415944843,
    "time": 17845.56640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (- (exp (- x)))) 2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 58.18063737195172,
    "avg_bits_err_output": 0.03732312031259015,
    "avg_bits_err_improve": 58.143314251639126,
    "time": 11178.4501953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.009521240625180288,
    "avg_bits_err_output": 0.009521240625180288,
    "avg_bits_err_improve": 0,
    "time": 2195.1552734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.13066524101186,
    "avg_bits_err_output": 32.13066524101186,
    "avg_bits_err_improve": 0,
    "time": 4846.5380859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (if (!= (/ x (- 1.0 x)) 0.0) (/ (* (/ (- -1.0 x) (+ x -1.0)) (/ x (- 1.0 x))) (/ x (- 1.0 x))) (/ (- -1.0 x) (+ x -1.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 58.57730135833719,
    "avg_bits_err_output": 58.583991478371566,
    "avg_bits_err_improve": -0.0066901200343778555,
    "time": 21906.086669921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.026698120312590144,
    "avg_bits_err_output": 0.027323120312590144,
    "avg_bits_err_improve": -0.0006250000000000006,
    "time": 3088.186767578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.11932312031259014,
    "avg_bits_err_output": 0.11925,
    "avg_bits_err_improve": 7.312031259014418e-05,
    "time": 16389.45263671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (expm1 (log1p (cos (atan (* (- eh) (/ (tan t) ew))))))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.1252712406251803,
    "avg_bits_err_output": 0.12709436093777043,
    "avg_bits_err_improve": -0.0018231203125901319,
    "time": 26307.262451171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (cos (/ (+ phi1 phi2) 2.0)) (- lambda1 lambda2) (fma (- lambda2) (cos (/ (+ phi1 phi2) 2.0)) (* (cos (/ (+ phi1 phi2) 2.0)) lambda2))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 38.89351583101381,
    "avg_bits_err_output": 3.8097932490754105,
    "avg_bits_err_improve": 35.083722581938396,
    "time": 37492.588134765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.201469142944786,
    "avg_bits_err_output": 14.201469142944786,
    "avg_bits_err_improve": 0,
    "time": 3262.779296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (cos phi1) (* (sin delta) (cos theta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.15155727584531054,
    "avg_bits_err_output": 0.1462474676845626,
    "avg_bits_err_improve": 0.005309808160747942,
    "time": 39515.419189453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.52465316488392,
    "avg_bits_err_output": 0.1836466171924579,
    "avg_bits_err_improve": 52.341006547691464,
    "time": 22463.274658203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* c (* a -3.0)) 0.0) (/ (fma (* c (* a -3.0)) (* c (* a -3.0)) (* b (* b (* c (* a -3.0))))) (* c (* a -3.0))) (fma c (* a -3.0) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 40,
    "avg_bits_err_input": 28.28270455726747,
    "avg_bits_err_output": 0.35348852545462717,
    "avg_bits_err_improve": 27.929216031812842,
    "time": 30532.72509765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.671751270778614,
    "avg_bits_err_output": 0.2380665421939,
    "avg_bits_err_improve": 43.433684728584716,
    "time": 25054.71728515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* -3.0 (* c a))))) 0.0) (* (/ c (+ b (sqrt (fma -3.0 (* c a) (* b b))))) (* -3.0 a)) (- (sqrt (fma b b (* -3.0 (* c a)))) b)) (* 3.0 a))",
    "output_parens": 22,
    "avg_bits_err_input": 34.18203478559806,
    "avg_bits_err_output": 21.7720622860732,
    "avg_bits_err_improve": 12.409972499524862,
    "time": 24613.973388671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (expm1 (log1p (* (cos (- lambda1 lambda2)) (sin phi1)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.058333628631958,
    "avg_bits_err_output": 13.064501152231244,
    "avg_bits_err_improve": -0.006167523599286184,
    "time": 40345.429443359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 28.988357069377088,
    "avg_bits_err_output": 0.5123856984240773,
    "avg_bits_err_improve": 28.475971370953012,
    "time": 19821.39111328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (log1p (expm1 (/ 1.0 (+ x -1.0)))) (/ x (+ x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.021519226984736083,
    "avg_bits_err_improve": -0.009769226984736083,
    "time": 4525.484619140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (if (!= (+ 1.0 (/ x (+ x -1.0))) 0.0) (/ (- 1.0 (* (/ x (+ x -1.0)) (/ x (+ x -1.0)))) (+ 1.0 (/ x (+ x -1.0)))) (- 1.0 (/ x (+ x -1.0)))) (- (/ 1.0 (+ x -1.0)))) (+ 1.0 x))",
    "output_parens": 24,
    "avg_bits_err_input": 14.406561586031108,
    "avg_bits_err_output": 12.50327673730212,
    "avg_bits_err_improve": 1.9032848487289886,
    "time": 15738.99169921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 1e+260) (/ (sqrt (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C)) (* (* (- (pow B 2.0) (* A (* 4.0 C))) F) -2.0))) (- (- (pow B 2.0) (* A (* 4.0 C))))) 0.0)",
    "output_parens": 45,
    "avg_bits_err_input": 52.35448496416277,
    "avg_bits_err_output": 50.793280091644995,
    "avg_bits_err_improve": 1.5612048725177772,
    "time": 40118.93017578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output_parens": 12,
    "avg_bits_err_input": 29.9966691977714,
    "avg_bits_err_output": 29.9966691977714,
    "avg_bits_err_improve": 0,
    "time": 24110.430419921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(* (sqrt (* (+ C (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A)) (* 2.0 (+ (* (- (pow B 2.0) (* A (* C 4.0))) F) (fma (- (* A (* C 4.0))) F (* A (* (* C 4.0) F))))))) (/ -1.0 (- (pow B 2.0) (* A (* C 4.0)))))",
    "output_parens": 29,
    "avg_bits_err_input": 52.60273035188702,
    "avg_bits_err_output": 52.57236619124245,
    "avg_bits_err_improve": 0.030364160644566596,
    "time": 39962.1962890625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (* (+ (cbrt (/ g (+ a a))) 2.0) (/ (cbrt (/ g (+ a a))) (+ (cbrt (/ g (+ a a))) 2.0))) (cbrt (/ g (+ a a))))",
    "output_parens": 22,
    "avg_bits_err_input": 15.795443944367163,
    "avg_bits_err_output": 15.801217628743428,
    "avg_bits_err_improve": -0.005773684376265464,
    "time": 24882.956298828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- (sqrt (fma h (- h) (* g g))) g) 0.0) (/ 1.0 (/ 1.0 (- (sqrt (fma h (- h) (* g g))) g))) (- (sqrt (fma h (- h) (* g g))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 32,
    "avg_bits_err_input": 36.48752067575829,
    "avg_bits_err_output": 36.48163286542235,
    "avg_bits_err_improve": 0.005887810335941879,
    "time": 19207.815673828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (+ (* PI 0.6666666666666666) (/ (acos (/ (- g) h)) 3.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9910877828190814,
    "avg_bits_err_output": 0.9910877828190814,
    "avg_bits_err_improve": 0,
    "time": 6410.077392578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7174693609377705,
    "avg_bits_err_output": 0.7174693609377705,
    "avg_bits_err_improve": 0,
    "time": 2058.415771484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+299) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-272) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+282) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.130581512558171,
    "avg_bits_err_output": 2.705902979339105,
    "avg_bits_err_improve": 8.424678533219065,
    "time": 7606.498291015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.504616368894811,
    "avg_bits_err_output": 0.43307312031259015,
    "avg_bits_err_improve": 0.07154324858222083,
    "time": 12321.55810546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.0) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 500000.0) (log1p (if (!= (- (- 1.0 x) (hypot 1.0 x)) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ (- (hypot 1.0 x) x) -1.0) 0.0) (* (+ 1.0 (- x (hypot 1.0 x))) (/ (+ x (+ (hypot 1.0 x) -1.0)) (log (+ 1.0 (expm1 (- x (+ (hypot 1.0 x) -1.0))))))) (+ x (+ (hypot 1.0 x) -1.0))))) (+ x (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 65,
    "avg_bits_err_input": 53.246138133384655,
    "avg_bits_err_output": 0.759350358614234,
    "avg_bits_err_improve": 52.48678777477042,
    "time": 18653.0947265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.657056111221792,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.657056111221792,
    "time": 2702.96142578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (* (- 1.0 x) (/ 1.0 (+ 1.0 x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.01375,
    "avg_bits_err_improve": -0.0011249999999999993,
    "time": 4630.078125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1210.11181640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= (* w w) 4.8e-6) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (/ r (- 1.0 v)) (* w (* w r)))) 4.5)) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* w (* (* r (/ (* r w) (- 1.0 v))) (- 0.375 (* v 0.25)))) 4.5)))",
    "output_parens": 29,
    "avg_bits_err_input": 12.816982311973051,
    "avg_bits_err_output": 0.2944985128960555,
    "avg_bits_err_improve": 12.522483799076996,
    "time": 21210.612548828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (fma (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0) (* x1 x1) (* (* x1 x1) -6.0)))))) (+ x1 x1)))",
    "output_parens": 49,
    "avg_bits_err_input": 0.516347479053766,
    "avg_bits_err_output": 0.2868428830004122,
    "avg_bits_err_improve": 0.22950459605335377,
    "time": 60001.441650390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (+ t1 u)) (- v)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.34940208147552,
    "avg_bits_err_output": 1.2848367838350179,
    "avg_bits_err_improve": 17.064565297640502,
    "time": 6658.458251953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (+ (- 0.954929658551372 (* (* x x) 0.06450306886639899)) (- (* (* x x) 0.06450306886639899))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.25451515121455115,
    "avg_bits_err_output": 0.1955661656266226,
    "avg_bits_err_improve": 0.05894898558792855,
    "time": 10415.5908203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002875,
    "avg_bits_err_output": 0.002875,
    "avg_bits_err_improve": 0,
    "time": 4086.88818359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* (/ (/ PI (+ a b)) -2.0) (- (/ 1.0 (* b (- b a))) (/ 1.0 (* a (- b a)))))",
    "output_parens": 11,
    "avg_bits_err_input": 14.666970671311079,
    "avg_bits_err_output": 0.27942067813599736,
    "avg_bits_err_improve": 14.387549993175082,
    "time": 16094.346923828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(- (- (/ (+ 0.5 (/ 0.5 eps)) (exp (- x (* eps x)))) (/ (+ 0.5 (/ 0.5 eps)) (exp (fma eps x x)))) (/ -1.0 (exp (fma eps x x))))",
    "output_parens": 16,
    "avg_bits_err_input": 30.225742800812153,
    "avg_bits_err_output": 0.8761347420512988,
    "avg_bits_err_improve": 29.349608058760854,
    "time": 23303.403076171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.01925,
    "avg_bits_err_output": 0.01925,
    "avg_bits_err_improve": 0,
    "time": 4263.318603515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.025375,
    "avg_bits_err_output": 0.025375,
    "avg_bits_err_improve": 0,
    "time": 7543.6318359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))) (+ 2.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.057125,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 0.0485,
    "time": 10751.439453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3434.643310546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7044.310791015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2583.772216796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.816005798380656,
    "avg_bits_err_output": 0.251875,
    "avg_bits_err_improve": 7.564130798380656,
    "time": 35814.748046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.538505130238594,
    "avg_bits_err_output": 7.538505130238594,
    "avg_bits_err_improve": 0,
    "time": 17552.45458984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(/ (- (if (!= (- -2.0 (pow x 2.0)) 0.0) (/ (* (pow x 2.0) (+ 2.0 (pow x 2.0))) (+ 2.0 (pow x 2.0))) (pow x 2.0)) (pow (+ x eps) 2.0)) -1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 15.801908414872768,
    "avg_bits_err_output": 15.804528048608168,
    "avg_bits_err_improve": -0.002619633735399418,
    "time": 14948.04736328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (cos x) 0.0) (/ (* (exp (* 10.0 (* x x))) (- (exp (log1p (* (cos x) (cos x)))) 1.0)) (cos x)) (* (exp (* 10.0 (* x x))) (cos x)))",
    "output_parens": 20,
    "avg_bits_err_input": 3.5229290729726883,
    "avg_bits_err_output": 3.5319027843100583,
    "avg_bits_err_improve": -0.008973711337370016,
    "time": 17896.433837890625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 14.824278310572428,
    "avg_bits_err_output": 14.824278310572428,
    "avg_bits_err_improve": 0,
    "time": 13885.138916015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 46.07436253481996,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 46.07436253481996,
    "time": 5413.26708984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.92231583010681,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 38.92169083010681,
    "time": 4060.66259765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2985,
    "avg_bits_err_improve": 63.7015,
    "time": 18618.525634765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325161638259,
    "avg_bits_err_output": 0.38775,
    "avg_bits_err_improve": 61.45550161638259,
    "time": 8110.56005859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (* (/ c (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 4.0)) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.4079375625893,
    "avg_bits_err_output": 22.469940211677127,
    "avg_bits_err_improve": 11.93799735091217,
    "time": 26137.50146484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- b) (sqrt (fma c (* -4.0 a) (* b b)))) 0.0) (* a (/ (* -4.0 c) (+ b (sqrt (fma c (* -4.0 a) (* b b)))))) (- (sqrt (fma c (* -4.0 a) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.15091079335884,
    "avg_bits_err_output": 21.73155687746027,
    "avg_bits_err_improve": 12.419353915898569,
    "time": 22300.3828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2606.29541015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.913044624331306,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 39.902919624331304,
    "time": 7127.672119140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 19.96967203494729,
    "avg_bits_err_output": 19.96967203494729,
    "avg_bits_err_improve": 0,
    "time": 4484.92041015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6203335493770865,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6203335493770865,
    "time": 8883.75244140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ (+ b c) d))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037375,
    "avg_bits_err_output": 0.037375,
    "avg_bits_err_improve": 0,
    "time": 8469.996337890625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02189624062518029,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": 0.01077124062518029,
    "time": 4859.005126953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014375,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.014,
    "time": 4224.069091796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00025,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0,
    "time": 2088.345458984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ b (+ d a)) (+ c e))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40043665469173684,
    "avg_bits_err_output": 0.246,
    "avg_bits_err_improve": 0.15443665469173684,
    "time": 5819.068115234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (fma (cos x) (cos x) 1.0) 0.0) (/ (fma (cos x) (* (cos x) (* (cos x) (cos x))) -1.0) (fma (cos x) (cos x) 1.0)) (fma (cos x) (cos x) -1.0)) (- -1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 28,
    "avg_bits_err_input": 30.191106099795643,
    "avg_bits_err_output": 30.191056606226095,
    "avg_bits_err_improve": 4.9493569548531013e-05,
    "time": 15637.611572265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (fma x x (- eps)))) 0.0) (/ eps (+ x (sqrt (fma x x (- eps))))) (- x (sqrt (fma x x (- eps)))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.514198845606824,
    "avg_bits_err_output": 0.29407312031259014,
    "avg_bits_err_improve": 24.220125725294235,
    "time": 13183.709228515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (- (tan x))) 0.0) (/ (log (+ 1.0 (expm1 (* (/ (sin x) (- (tan x))) (+ (+ 1.0 (/ (- x (sin x)) (tan x))) -1.0))))) (/ (sin x) (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 29,
    "avg_bits_err_input": 30.620194048603626,
    "avg_bits_err_output": 30.63901478280884,
    "avg_bits_err_improve": -0.018820734205213796,
    "time": 34996.251220703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.008985521314888553,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.007860521314888553,
    "time": 2813.604248046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n)))",
    "output_parens": 7,
    "avg_bits_err_input": 47.51389797100418,
    "avg_bits_err_output": 16.196595087944466,
    "avg_bits_err_improve": 31.31730288305971,
    "time": 26612.341796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma d d (* c c)))) (fma (/ (+ c (+ c c)) (* (fma d d (* c c)) 4.0)) a (* (/ (/ c 4.0) (fma d d (* c c))) a)))",
    "output_parens": 17,
    "avg_bits_err_input": 26.23347368555568,
    "avg_bits_err_output": 23.259417164493662,
    "avg_bits_err_improve": 2.9740565210620176,
    "time": 15880.13427734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 1e+261) (/ (+ (- (* b c) (* a (+ d d))) (* a d)) (+ (* c c) (* d d))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 47,
    "avg_bits_err_input": 25.817283732166857,
    "avg_bits_err_output": 22.593442910354206,
    "avg_bits_err_improve": 3.223840821812651,
    "time": 16151.760986328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.035,
    "avg_bits_err_output": 0.021386842188131014,
    "avg_bits_err_improve": 0.01361315781186899,
    "time": 11520.431640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(/ (* (sin (if (!= (* PI (* -2.0 uy)) 0.0) (/ 2.0 (/ 1.0 (* uy PI))) (* uy (* PI 2.0)))) (sqrt (+ (- (- ux (- (* ux ux) ux)) (* (* ux maxCos) (+ (* ux maxCos) (- 1.0 ux)))) (* ux (- (* ux maxCos) maxCos))))) 1.0)",
    "output_parens": 26,
    "avg_bits_err_input": 13.477731247355846,
    "avg_bits_err_output": 0.5808134335765571,
    "avg_bits_err_improve": 12.89691781377929,
    "time": 31793.2119140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (+ (+ (- ux (* ux ux)) (* (+ ux -1.0) (* ux maxCos))) ux) (- (+ (* (- 1.0 ux) (* ux maxCos)) (* (* ux maxCos) (* ux maxCos)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.512545684136345,
    "avg_bits_err_output": 0.3293205465336585,
    "avg_bits_err_improve": 13.183225137602687,
    "time": 31854.182861328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (* ux (* (- 1.0 ux) maxCos)) zi (fma (* (cos (if (!= (* (* uy PI) -2.0) 0.0) (* (* 2.0 (* uy (* 2.0 (* uy PI)))) (/ PI (* 2.0 (* uy PI)))) (* 2.0 (* uy PI)))) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.335919802336988,
    "avg_bits_err_output": 0.33160481777019946,
    "avg_bits_err_improve": 0.004314984566788527,
    "time": 48912.89453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.2037270697866437,
    "avg_bits_err_output": 0.2037270697866437,
    "avg_bits_err_improve": 0,
    "time": 21993.658935546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (expm1 (log1p (/ u1 (- 1.0 u1))))) (sin (* 6.28318530718 u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5349836831455806,
    "avg_bits_err_output": 0.5397500058107113,
    "avg_bits_err_improve": -0.004766322665130662,
    "time": 20546.594970703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3227656436061535,
    "avg_bits_err_output": 0.3227656436061535,
    "avg_bits_err_improve": 0,
    "time": 27641.76318359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (* (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (/ -1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) 1.0)))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))))",
    "output_parens": 71,
    "avg_bits_err_input": 0.35156261527631183,
    "avg_bits_err_output": 0.33264184180574463,
    "avg_bits_err_improve": 0.018920773470567198,
    "time": 51269.874267578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06832913801329205,
    "avg_bits_err_output": 0.04972732115257504,
    "avg_bits_err_improve": 0.018601816860717005,
    "time": 13214.692626953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.16523170877488302,
    "avg_bits_err_output": 0.12009514109265775,
    "avg_bits_err_improve": 0.04513656768222528,
    "time": 21230.459228515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* PI (* x tau))) (* PI (* x tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.682310690196305,
    "avg_bits_err_output": 0.6833658585772157,
    "avg_bits_err_improve": -0.001055168380910687,
    "time": 22990.5556640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.15861638220756208,
    "avg_bits_err_output": 0.15347524502718632,
    "avg_bits_err_improve": 0.00514113718037576,
    "time": 19037.40185546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma (/ sinTheta_O (* -2.0 (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) (+ sinTheta_O sinTheta_O) (* eta eta)))))",
    "output_parens": 11,
    "avg_bits_err_input": 2.5935418963603016,
    "avg_bits_err_output": 2.5937473783840232,
    "avg_bits_err_improve": -0.00020548202372161484,
    "time": 31403.220947265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ (/ 1.0 v) (exp (* sinTheta_i (/ sinTheta_O v)))) (/ (- (* cosTheta_i (/ 2.0 v))) (* (- (- (sinh (/ 1.0 v))) (sinh (/ 1.0 v))) 2.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.4720714258862903,
    "avg_bits_err_output": 0.36613693588808915,
    "avg_bits_err_improve": 0.10593448999820115,
    "time": 26907.338623046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ 0.6931 (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (log (/ 0.5 v)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.10872540520199615,
    "avg_bits_err_output": 0.10833381685225331,
    "avg_bits_err_improve": 0.00039158834974284407,
    "time": 18670.40576171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (/ (fma alpha alpha -1.0) (log (* alpha alpha))) (/ (fma alpha alpha -1.0) (log (* alpha alpha)))) (* PI (* (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0) 2.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.4721451103973117,
    "avg_bits_err_output": 0.4989956570758508,
    "avg_bits_err_improve": -0.02685054667853909,
    "time": 23601.1689453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (+ 1.0 (/ 1.0 (- (* u -1.3333333333333333) -1.3333333333333333))) 0.0) (if (!= (/ 1.0 (* (fma u -1.3333333333333333 1.3333333333333333) (* (fma u -1.3333333333333333 1.3333333333333333) (+ 1.0 (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)))))) 0.0) (/ (+ (/ -2.0 (+ 2.0 (/ 2.0 (fma u -1.3333333333333333 1.3333333333333333)))) (/ 1.0 (* (fma u -1.3333333333333333 1.3333333333333333) (* (fma u -1.3333333333333333 1.3333333333333333) (+ 1.0 (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))))))) (* (* (fma u -1.3333333333333333 1.3333333333333333) (* (fma u -1.3333333333333333 1.3333333333333333) (+ 1.0 (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))))) (/ 1.0 (* (fma u -1.3333333333333333 1.3333333333333333) (* (fma u -1.3333333333333333 1.3333333333333333) (+ 1.0 (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)))))))) (/ (+ -2.0 (/ 2.0 (* (fma u -1.3333333333333333 1.3333333333333333) (fma u -1.3333333333333333 1.3333333333333333)))) (+ 2.0 (/ 2.0 (fma u -1.3333333333333333 1.3333333333333333))))) (+ (/ 1.0 (- (* u -1.3333333333333333) -1.3333333333333333)) -1.0))))",
    "output_parens": 62,
    "avg_bits_err_input": 1.316074137437004,
    "avg_bits_err_output": 1.1607606995958244,
    "avg_bits_err_improve": 0.15531343784117957,
    "time": 31133.760009765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (- (exp (log1p (log (* (/ 1.0 (* (fma u -4.0 1.0) (fma u -4.0 1.0))) (/ 1.0 (/ 1.0 (fma u -4.0 1.0))))))) 1.0) s) 2.0) (/ (* (log (/ 1.0 (+ 1.0 (* u -4.0)))) s) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 12.215416280237807,
    "avg_bits_err_output": 11.698186034416755,
    "avg_bits_err_improve": 0.517230245821052,
    "time": 19780.803466796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.14434114182003469,
    "avg_bits_err_output": 0.14434114182003469,
    "avg_bits_err_improve": 0,
    "time": 24982.81787109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma n0_i (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) (* (sin (* u normAngle)) (/ n1_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8396854338492937,
    "avg_bits_err_output": 0.7580982531545724,
    "avg_bits_err_improve": 0.08158718069472137,
    "time": 29360.3388671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6941100610671365,
    "avg_bits_err_output": 0.4743491955200352,
    "avg_bits_err_improve": 0.21976086554710128,
    "time": 21684.7861328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(- (sin (* 2.0 (if (!= (* PI u2) 0.0) (/ (* PI (* u2 (* PI u2))) (* PI u2)) (* PI u2)))) (- (sin (* 2.0 (* PI u2))) (* (sqrt (- (log (- 1.0 u1)))) (sin (* 2.0 (* PI u2))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.628203123889442,
    "avg_bits_err_output": 13.593570694600258,
    "avg_bits_err_improve": 0.034632429289183975,
    "time": 28041.705322265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (cos (* 2.0 (+ (fma PI u2 1.0) -1.0))) (log (+ 1.0 (expm1 (- (* (cos (* 2.0 (* PI u2))) (+ (sqrt (- (log (- 1.0 u1)))) -1.0)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.681134453204013,
    "avg_bits_err_output": 13.280825050349376,
    "avg_bits_err_improve": 0.4003094028546368,
    "time": 25231.417236328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(if (!= (* (log (- 1.0 u0)) (- (- alpha) (* alpha (- 1.0 alpha)))) 0.0) (* (* alpha (+ (* (log (- 1.0 u0)) (- 1.0 alpha)) (log (- 1.0 u0)))) (/ (- (* alpha (* (log (- 1.0 u0)) (- alpha)))) (* (log (- 1.0 u0)) (- (- alpha) (* alpha (- 1.0 alpha)))))) (* alpha (* (log (- 1.0 u0)) (- alpha))))",
    "output_parens": 37,
    "avg_bits_err_input": 14.204926261487806,
    "avg_bits_err_output": 14.221445442951605,
    "avg_bits_err_improve": -0.01651918146379927,
    "time": 20932.9248046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(+ (/ (/ (log (- 1.0 u0)) -2.0) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay)))) (/ (/ (log (- 1.0 u0)) -2.0) (+ (/ cos2phi (* alphax alphax)) (+ (/ sin2phi (* (+ alphay alphay) (+ alphay alphay))) (/ (+ sin2phi (+ sin2phi sin2phi)) (* (+ alphay alphay) (+ alphay alphay)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 12.649040992138502,
    "avg_bits_err_output": 12.65472267154673,
    "avg_bits_err_improve": -0.005681679408228391,
    "time": 19222.625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (* (/ (/ 2.0 PI) PI) (/ 0.5 (/ l PI)))) (* PI l))) F) F))",
    "output_parens": 15,
    "avg_bits_err_input": 17.075932214308526,
    "avg_bits_err_output": 12.504366259222259,
    "avg_bits_err_improve": 4.5715659550862675,
    "time": 24640.691650390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21093872187554086,
    "avg_bits_err_output": 0.1530212406251803,
    "avg_bits_err_improve": 0.05791748125036056,
    "time": 14536.8740234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 14.431978838362001,
    "avg_bits_err_output": 10.914386890074327,
    "avg_bits_err_improve": 3.5175919482876736,
    "time": 20342.819580078125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (- (expm1 (* PI (/ f 4.0))) (expm1 (* PI (/ f -4.0)))))) (* PI -0.25))",
    "output_parens": 18,
    "avg_bits_err_input": 61.47967505940285,
    "avg_bits_err_output": 1.8307437558872444,
    "avg_bits_err_improve": 59.64893130351561,
    "time": 57565.72216796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -3.6e-129) (* (/ (sqrt 2.0) (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (+ -1.0 (/ (+ x 1.0) (+ x -1.0)))))))) t) (if (<= t 4.4e-139) (* (/ (sqrt 2.0) (sqrt (fma l (- l) (/ (+ (* l (* l x)) (+ (* l l) (* (+ x 1.0) (* 2.0 (* t t))))) (+ x -1.0))))) t) (* (/ (sqrt 2.0) (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (+ -1.0 (/ (+ x 1.0) (+ x -1.0)))))))) t)))",
    "output_parens": 55,
    "avg_bits_err_input": 42.7656167302722,
    "avg_bits_err_output": 35.15985570827731,
    "avg_bits_err_improve": 7.605761021994887,
    "time": 26644.02392578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 4.0281374659385,
    "avg_bits_err_output": 4.0281374659385,
    "avg_bits_err_improve": 0,
    "time": 27744.78515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (- (- (sqrt (- (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0)) -1.0) 1.0)) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.9678373356809318,
    "avg_bits_err_output": 0.9662785320861577,
    "avg_bits_err_improve": 0.0015588035947741163,
    "time": 12982.896728515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (- (- (pow (/ t l) 2.0) -1.0) 1.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.220808766035601,
    "avg_bits_err_output": 10.233219418688812,
    "avg_bits_err_improve": -0.012410652653210619,
    "time": 27943.050537109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 5e-152) (sqrt (* (* 2.0 n) (* U (- t (+ (* (pow (/ l Om) 2.0) (* n (- U U*))) (* 2.0 (* l (/ l Om)))))))) (if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 5e+153) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (pow (- (* -2.0 (- (* (pow (/ l Om) 2.0) (* n (* (- U U*) (* n U)))) (* n (* U t)))) (* l (* (* (/ l Om) (* n U)) 4.0))) 0.5)))",
    "output_parens": 78,
    "avg_bits_err_input": 34.04677738193184,
    "avg_bits_err_output": 27.43231006984611,
    "avg_bits_err_improve": 6.614467312085729,
    "time": 32798.146240234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* (pow (/ k t) 2.0) (* (tan k) (* (pow t 3.0) (/ (sin k) l)))) l))",
    "output_parens": 11,
    "avg_bits_err_input": 47.5559019041451,
    "avg_bits_err_output": 36.84647794779412,
    "avg_bits_err_improve": 10.709423956350982,
    "time": 34834.99853515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (sin k) l) (* (* (+ 2.0 (pow (/ k t) 2.0)) (pow t 3.0)) (/ (tan k) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 31.979910067780295,
    "avg_bits_err_output": 26.62288195911338,
    "avg_bits_err_improve": 5.357028108666917,
    "time": 23176.778564453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(+ (/ (* a1 (/ (* (cos th) a1) (sqrt 2.0))) 1.0) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.5648131609608497,
    "avg_bits_err_output": 0.4898082734586855,
    "avg_bits_err_improve": 0.07500488750216416,
    "time": 22730.129638671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (/ 1.0 (sqrt k)) (pow (if (!= (* PI n) 0.0) (/ (* PI (* 2.0 (* n PI))) PI) (* 2.0 (* PI n))) (/ (- 1.0 k) 2.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.5456900857066218,
    "avg_bits_err_output": 0.594162513612045,
    "avg_bits_err_improve": -0.048472427905423165,
    "time": 20232.39306640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (if (!= (exp (* l -2.0)) 0.0) (/ (if (!= (+ (exp (fma l -2.0 (+ l l))) (exp (* l -4.0))) 0.0) (/ (if (!= (+ (exp (+ (fma l -2.0 (+ l l)) (fma l -2.0 (+ l l)))) (exp (* l -8.0))) 0.0) (/ (- (exp (+ (+ (fma l -2.0 (+ l l)) (fma l -2.0 (+ l l))) (+ (fma l -2.0 (+ l l)) (fma l -2.0 (+ l l))))) (exp (* l -16.0))) (+ (exp (+ (fma l -2.0 (+ l l)) (fma l -2.0 (+ l l)))) (exp (* l -8.0)))) (- (exp (+ (fma l -2.0 (+ l l)) (fma l -2.0 (+ l l)))) (exp (* l -8.0)))) (+ (exp (fma l -2.0 (+ l l))) (exp (* l -4.0)))) (- (exp (fma l -2.0 (+ l l))) (exp (* l -4.0)))) (exp (* l -2.0))) (- (exp (+ l l)) (exp (* l -2.0)))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 98,
    "avg_bits_err_input": 17.53336760725125,
    "avg_bits_err_output": 17.618271480102454,
    "avg_bits_err_improve": -0.08490387285120349,
    "time": 31699.75146484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (+ (* K n) (* K m)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 17,
    "avg_bits_err_input": 15.488595464350512,
    "avg_bits_err_output": 15.48859542763732,
    "avg_bits_err_improve": 3.671319248610416e-08,
    "time": 9134.760009765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.323688721875545,
    "avg_bits_err_output": 18.323688721875545,
    "avg_bits_err_improve": 0,
    "time": 24332.93017578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 200000000.0) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))) (if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 2e+285) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (* (pow (* D (/ (/ M 2.0) d)) 2.0) (/ h l)))))))",
    "output_parens": 39,
    "avg_bits_err_input": 13.83694474873081,
    "avg_bits_err_output": 9.455919635156228,
    "avg_bits_err_improve": 4.381025113574582,
    "time": 13909.660888671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 0.0) (* c0 (sqrt (/ (* A (/ 2.0 l)) (+ V V)))) (if (<= (/ A (* V l)) 5e+271) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (* (/ A V) (/ 1.0 l))))))",
    "output_parens": 23,
    "avg_bits_err_input": 19.374822214766585,
    "avg_bits_err_output": 15.006503709963157,
    "avg_bits_err_improve": 4.368318504803428,
    "time": 17802.13623046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(* (/ c0 (* 2.0 w)) (fma (* (/ d D) (/ (* (/ d D) c0) (* w h))) 1.0 (sqrt (fma (* (/ d D) (/ (* (/ d D) c0) (* w h))) (* (/ d D) (/ (* (/ d D) c0) (* w h))) (* M (- M))))))",
    "output_parens": 26,
    "avg_bits_err_input": 59.372895800855844,
    "avg_bits_err_output": 52.643428283653435,
    "avg_bits_err_improve": 6.7294675172024085,
    "time": 43835.347412109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (fma (sqrt (/ d l)) (sqrt (/ d h)) (* h (* (pow (/ (* D M) (+ d d)) 2.0) (* -0.5 (* (sqrt (/ d l)) (/ (sqrt (/ d h)) l)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 1e+193) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* (/ h l) (* (pow (/ (* M D) (+ d d)) 2.0) 0.5)))) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (/ (* (pow (- (* (+ (/ D (+ d d)) 1.0) M) M) 2.0) (* 0.5 h)) l)))))",
    "output_parens": 81,
    "avg_bits_err_input": 26.50709304258459,
    "avg_bits_err_output": 24.313258086884545,
    "avg_bits_err_improve": 2.1938349557000443,
    "time": 43005.343017578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (- (/ -0.5 (hypot 1.0 x)) 0.5) 0.0) (/ (- 0.25 (/ (/ 0.25 (hypot 1.0 x)) (hypot 1.0 x))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 15.410765365702012,
    "avg_bits_err_output": 14.922473762617408,
    "avg_bits_err_improve": 0.48829160308460473,
    "time": 25699.450439453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (sqrt (- 2.0 (* v (* v 6.0))))) (* PI (- 1.0 (* v v))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9845050362151283,
    "avg_bits_err_output": 0.010503488249571234,
    "avg_bits_err_improve": 0.974001547965557,
    "time": 4126.546630859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (+ 2.0 (* (* v v) -6.0)))) (* t (- 1.0 (* v v)))) (* (* v v) (/ (/ 5.0 (* PI (* t (- 1.0 (* v v))))) (sqrt (+ 2.0 (* (* v v) -6.0))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.4633783556607222,
    "avg_bits_err_output": 0.12141992500144233,
    "avg_bits_err_improve": 0.3419584306592799,
    "time": 23939.114990234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.011417481250360578,
    "avg_bits_err_output": 0.011417481250360578,
    "avg_bits_err_improve": 0,
    "time": 9512.2138671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5266227886698662,
    "avg_bits_err_output": 0.5266227886698662,
    "avg_bits_err_improve": 0,
    "time": 9929.95751953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.8686203510089219,
    "avg_bits_err_output": 1.8513703510089219,
    "avg_bits_err_improve": 0.017249999999999988,
    "time": 14484.45654296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- Vef (- Ec (+ mu EDonor))) KbT)))) (/ NaChar (- (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.01684419868296054,
    "avg_bits_err_output": 0.01684419868296054,
    "avg_bits_err_improve": 0,
    "time": 7996.982177734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.18172445195251588,
    "avg_bits_err_output": 0.18172445195251588,
    "avg_bits_err_improve": 0,
    "time": 21220.452392578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (+ (* a (* a a)) (* a a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 0.1894806141215219,
    "avg_bits_err_output": 0.19000398893587206,
    "avg_bits_err_improve": -0.0005233748143501638,
    "time": 27066.62158203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* b (* b (+ 3.0 a)))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.19098629414064683,
    "avg_bits_err_output": 0.19111129414064684,
    "avg_bits_err_improve": -0.000125000000000014,
    "time": 27408.54052734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (if (!= (/ x (sqrt (fma 4.0 (* p p) (* x x)))) 0.0) (/ (- (* (/ x (sqrt (fma 4.0 (* p p) (* x x)))) (/ x (sqrt (fma 4.0 (* p p) (* x x))))) (- (/ x (sqrt (fma 4.0 (* p p) (* x x)))))) (/ x (sqrt (fma 4.0 (* p p) (* x x))))) (+ 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x))))))))",
    "output_parens": 39,
    "avg_bits_err_input": 13.1530980595127,
    "avg_bits_err_output": 13.15502261273562,
    "avg_bits_err_improve": -0.0019245532229188456,
    "time": 20297.331787109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.69647215902946,
    "avg_bits_err_output": 0.031625,
    "avg_bits_err_improve": 40.66484715902946,
    "time": 4841.08251953125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (!= (/ x (- (tan x) x)) 0.0) (/ (fma (/ x (- (tan x) x)) (/ x (- x (tan x))) (* (/ x (- (tan x) x)) (+ (/ (sin x) (- (tan x) x)) (/ (fma x -1.0 x) (- (tan x) x))))) (/ x (- (tan x) x))) (/ (- x (sin x)) (- x (tan x))))",
    "output_parens": 34,
    "avg_bits_err_input": 31.956759432176327,
    "avg_bits_err_output": 32.04745702881401,
    "avg_bits_err_improve": -0.09069759663768195,
    "time": 22288.651123046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))) 0.0) (* (/ c (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a)",
    "output_parens": 21,
    "avg_bits_err_input": 34.406898499133696,
    "avg_bits_err_output": 21.81784932470795,
    "avg_bits_err_improve": 12.589049174425746,
    "time": 13786.69970703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.130214017463175,
    "avg_bits_err_output": 34.130214017463175,
    "avg_bits_err_improve": 0,
    "time": 18144.42333984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.26032868957306,
    "avg_bits_err_output": 30.539434941879733,
    "avg_bits_err_improve": 0.7208937476933279,
    "time": 15724.962890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.901508937959015,
    "avg_bits_err_output": 10.90621831988995,
    "avg_bits_err_improve": 21.995290618069063,
    "time": 32703.431884765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (- (log1p N) (- (log N))) 0.0) (fma (log1p N) (/ (log1p N) (+ (log1p N) (log N))) (* (- (log N)) (/ (log N) (+ (log1p N) (log N))))) (- (log1p N) (log N)))",
    "output_parens": 24,
    "avg_bits_err_input": 29.93056365801526,
    "avg_bits_err_output": 29.940982998512748,
    "avg_bits_err_improve": -0.010419340497488605,
    "time": 12675.916748046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.68472582155708,
    "avg_bits_err_output": 14.68472582155708,
    "avg_bits_err_improve": 0,
    "time": 20257.231689453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (!= (+ (cos (+ x eps)) 1.0) 0.0) (/ (fma (cos (+ x eps)) (+ (cos (+ x eps)) 1.0) (* (cos x) (- -1.0 (cos (+ x eps))))) (+ (cos (+ x eps)) 1.0)) (- (cos (+ x eps)) (cos x)))",
    "output_parens": 24,
    "avg_bits_err_input": 39.05257047549476,
    "avg_bits_err_output": 39.09763583525385,
    "avg_bits_err_improve": -0.045065359759085766,
    "time": 23756.6162109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ 1.0 (+ (cbrt (+ x 1.0)) (- -1.0 (cbrt x))))",
    "output_parens": 6,
    "avg_bits_err_input": 30.197480960898407,
    "avg_bits_err_output": 29.89421724859086,
    "avg_bits_err_improve": 0.30326371230754745,
    "time": 14043.500244140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.07695533708086,
    "avg_bits_err_output": 30.07695533708086,
    "avg_bits_err_improve": 0,
    "time": 24043.065673828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.3501025909059,
    "avg_bits_err_output": 34.3501025909059,
    "avg_bits_err_improve": 0,
    "time": 21988.474609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.77893227627691,
    "avg_bits_err_output": 33.77893227627691,
    "avg_bits_err_improve": 0,
    "time": 26268.098388671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(- (/ (+ 1.0 (log (- 1.0 x))) (log1p x)) (/ (/ 1.0 (log1p x)) (* (log1p x) (/ 1.0 (log1p x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 61.27502969496562,
    "avg_bits_err_output": 59.52710587498176,
    "avg_bits_err_improve": 1.7479238199838605,
    "time": 23719.000732421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))) 0.0) (if (!= (* (fma n (- (log1p n) (log n)) (log1p n)) (/ (fma n (- (log1p n) (log n)) (log1p n)) (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 0.0) (- (/ 1.0 (/ (- (exp (log1p (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 1.0) (/ (fma n (- (log1p n) (log n)) (log1p n)) (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) 0.0) (+ (fma n (- (log1p n) (log n)) (log1p n)) -1.0))",
    "output_parens": 58,
    "avg_bits_err_input": 63.00398418059162,
    "avg_bits_err_output": 44.213596999268155,
    "avg_bits_err_improve": 18.790387181323467,
    "time": 16549.784912109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(if (!= (- -1.0 (+ 1.0 (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0)))))) 0.0) (/ (if (!= (- (- (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0))))) (- (* (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0)))) (+ 1.0 (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0)))))))) 0.0) (/ (- (* (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0)))) (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0))))) (* (- (* (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0)))) (+ 1.0 (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0))))))) (- (* (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0)))) (+ 1.0 (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0))))))))) (- (- (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0))))) (- (* (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0)))) (+ 1.0 (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0))))))))) (- (fma (+ 1.0 (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0))))) (+ 1.0 (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0))))) -1.0))) (- -1.0 (+ 1.0 (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0))))))) (log (+ (/ eps (- -1.0 eps)) (/ 1.0 (+ eps 1.0)))))",
    "output_parens": 135,
    "avg_bits_err_input": 58.60424749611224,
    "avg_bits_err_output": 58.61278806702526,
    "avg_bits_err_improve": -0.008540570913019963,
    "time": 13972.82666015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (- 1.0 (/ 1.0 (/ (tan x) x))) x)",
    "output_parens": 5,
    "avg_bits_err_input": 59.92112891366323,
    "avg_bits_err_output": 59.914398191829235,
    "avg_bits_err_improve": 0.006730721833996256,
    "time": 25810.726318359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.140743792295865,
    "avg_bits_err_output": 28.721120210688692,
    "avg_bits_err_improve": 31.419623581607173,
    "time": 25287.87890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.01706065155699,
    "avg_bits_err_output": 0.3081462406251803,
    "avg_bits_err_improve": 40.70891441093181,
    "time": 3103.939697265625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.7997733144941,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.7991483144941,
    "time": 3045.750244140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.25061422360539,
    "avg_bits_err_output": 0.021366638851527356,
    "avg_bits_err_improve": 29.22924758475386,
    "time": 6768.143798828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (if (!= (- (- (exp x) -2.0) (exp (- x))) 0.0) (+ (/ (- (* (- 1.0 (expm1 (- x))) (- 1.0 (expm1 (- x)))) (exp (+ x x))) (+ (- (exp x) (exp (- x))) 2.0)) (/ (fma (- (exp x)) (exp x) (exp (+ x x))) (+ (- (exp x) (exp (- x))) 2.0))) (- (- 1.0 (expm1 (- x))) (exp x))))",
    "output_parens": 42,
    "avg_bits_err_input": 29.786134354770688,
    "avg_bits_err_output": 29.625698168804973,
    "avg_bits_err_improve": 0.16043618596571463,
    "time": 19714.295166015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ 0.0 (if (!= (/ 1.0 (+ x 1.0)) 0.0) (/ (if (!= (/ 1.0 (* (+ x 1.0) (+ x -1.0))) 0.0) (/ (fma (/ 1.0 (* (+ x 1.0) (+ x -1.0))) (/ 1.0 (* (+ x 1.0) (+ x -1.0))) (* (/ 1.0 (* (+ x 1.0) (+ x -1.0))) (/ (+ (/ -2.0 x) (/ 1.0 (+ x 1.0))) (+ x 1.0)))) (/ 1.0 (* (+ x 1.0) (+ x -1.0)))) (/ (+ (/ -2.0 x) (+ (/ 1.0 (+ x 1.0)) (/ 1.0 (+ x -1.0)))) (+ x 1.0))) (/ 1.0 (+ x 1.0))) (+ (/ 1.0 (+ x 1.0)) (+ (/ -2.0 x) (/ 1.0 (+ x -1.0))))))",
    "output_parens": 55,
    "avg_bits_err_input": 9.997585651399895,
    "avg_bits_err_output": 9.990949248174323,
    "avg_bits_err_improve": 0.0066364032255723515,
    "time": 29281.41845703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (- (/ (sin x) (+ (cos x) (cos x))) (/ (tan (+ x eps)) 2.0)) -2.0)",
    "output_parens": 10,
    "avg_bits_err_input": 36.81786670156528,
    "avg_bits_err_output": 36.83377630912717,
    "avg_bits_err_improve": -0.01590960756188764,
    "time": 21858.824951171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (if (!= (/ (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) 2.0) 0.0) (- (/ 0.75 (+ (sqrt (+ 1.0 x)) (sqrt x))) (/ -0.25 (+ (sqrt (+ 1.0 x)) (sqrt x)))) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x)))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 34,
    "avg_bits_err_input": 30.252629808651058,
    "avg_bits_err_output": 0.16875488750216344,
    "avg_bits_err_improve": 30.083874921148894,
    "time": 14681.8974609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (+ (sin (+ x eps)) 1.0) 0.0) (/ (fma (sin (+ x eps)) (+ (sin (+ x eps)) 1.0) (- (* (log (+ 1.0 (expm1 (+ (sin (+ x eps)) 1.0)))) (sin x)))) (+ (sin (+ x eps)) 1.0)) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 28,
    "avg_bits_err_input": 36.32264449718903,
    "avg_bits_err_output": 36.39252549688254,
    "avg_bits_err_improve": -0.0698809996935097,
    "time": 26256.790283203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.81417387830634,
    "avg_bits_err_output": 19.67585040133837,
    "avg_bits_err_improve": 0.13832347696797243,
    "time": 15912.059814453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (+ (/ (/ (if (!= (* (atan (+ N 1.0)) (+ (atan N) (atan (+ N 1.0)))) 0.0) (/ (- (* (* (atan (+ N 1.0)) (+ (atan N) (atan (+ N 1.0)))) (* (atan N) (+ (atan N) (atan (+ N 1.0))))) (* (* (atan (+ N 1.0)) (+ (atan N) (atan (+ N 1.0)))) (* (atan (+ N 1.0)) (+ (atan N) (atan (+ N 1.0)))))) (* (atan (+ N 1.0)) (+ (atan N) (atan (+ N 1.0))))) (- (* (atan N) (atan N)) (* (atan (+ N 1.0)) (atan (+ N 1.0))))) (+ (atan (- N -1.0)) (atan N))) -2.0) (+ (/ (* (atan N) (- (atan N))) (+ (atan (- N -1.0)) (+ (atan (- N -1.0)) (+ (atan N) (atan N))))) (* (/ (atan (- N -1.0)) 2.0) (/ (atan (- N -1.0)) (+ (atan (- N -1.0)) (atan N)))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 99,
    "avg_bits_err_input": 15.39863673234765,
    "avg_bits_err_output": 15.406503163468866,
    "avg_bits_err_improve": -0.0078664311212151,
    "time": 13447.507568359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.97896328006593,
    "avg_bits_err_output": 1.323217114623692,
    "avg_bits_err_improve": 28.65574616544224,
    "time": 23503.2978515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (* (/ m v) (* (- 1.0 m) (- 1.0 m))) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07897149133190084,
    "avg_bits_err_output": 0.07544085226967129,
    "avg_bits_err_improve": 0.003530639062229557,
    "time": 9183.963134765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (* (- b) a))",
    "output_parens": 4,
    "avg_bits_err_input": 15.903204116975754,
    "avg_bits_err_output": 0.3044578953169171,
    "avg_bits_err_improve": 15.598746221658837,
    "time": 10069.32861328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (* angle 0.005555555555555556)) 0.0) (/ 2.0 (/ -2.0 (* PI (* angle -0.005555555555555556)))) (* PI (* angle 0.005555555555555556))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.387206927066792,
    "avg_bits_err_output": 20.39054965560152,
    "avg_bits_err_improve": -0.003342728534729389,
    "time": 38897.9248046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(if (!= (* (* (cos (* PI (/ angle 180.0))) (* 2.0 (- (pow b 2.0) (pow a 2.0)))) (+ 2.0 (sin (* PI (/ angle 180.0))))) 0.0) (* (* (* (cos (* PI (/ angle 180.0))) (* 2.0 (- (pow b 2.0) (pow a 2.0)))) (+ 2.0 (sin (* PI (/ angle 180.0))))) (/ (* (- (pow a 2.0) (pow b 2.0)) (* (* -2.0 (cos (* PI (/ angle 180.0)))) (sin (* PI (/ angle 180.0))))) (* (* (cos (* PI (/ angle 180.0))) (* 2.0 (- (pow b 2.0) (pow a 2.0)))) (+ 2.0 (sin (* PI (/ angle 180.0))))))) (* (- (pow a 2.0) (pow b 2.0)) (* (* -2.0 (cos (* PI (/ angle 180.0)))) (sin (* PI (/ angle 180.0))))))",
    "output_parens": 67,
    "avg_bits_err_input": 30.9352262690336,
    "avg_bits_err_output": 30.93748741805013,
    "avg_bits_err_improve": -0.002261149016529629,
    "time": 43751.276611328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* angle (/ PI 180.0)))) 2.0) (pow (* b (cos (* angle (/ PI 180.0)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.48632514778673,
    "avg_bits_err_output": 20.471371914947706,
    "avg_bits_err_improve": 0.014953232839022945,
    "time": 39348.510498046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.18276502308887604,
    "avg_bits_err_output": 0.18223379506936926,
    "avg_bits_err_improve": 0.0005312280195067798,
    "time": 13806.12939453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3224571174867323,
    "avg_bits_err_output": 0.3125559392174768,
    "avg_bits_err_improve": 0.009901178269255462,
    "time": 16777.517333984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (/ (sin v) (+ 2.0 (* (* e (cos v)) 2.0))) (+ e e))",
    "output_parens": 8,
    "avg_bits_err_input": 0.13652124062518028,
    "avg_bits_err_output": 0.1335212406251803,
    "avg_bits_err_improve": 0.002999999999999975,
    "time": 17959.726318359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos (- lambda1 lambda2)) (* (cos phi1) (cos phi2)) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.75292398859684,
    "avg_bits_err_output": 16.75184946268735,
    "avg_bits_err_improve": 0.0010745259094910864,
    "time": 34573.368896484375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 52.74444090573376,
    "avg_bits_err_output": 0.1708941734413762,
    "avg_bits_err_improve": 52.573546732292385,
    "time": 22037.568359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (* a (* c -4.0)) 0.0) (/ (* (* a c) (+ (* a (* c 16.0)) (* -4.0 (* b b)))) (* a (* c -4.0))) (fma -4.0 (* a c) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 36,
    "avg_bits_err_input": 28.281940080108033,
    "avg_bits_err_output": 0.3412956781359978,
    "avg_bits_err_improve": 27.940644401972033,
    "time": 25366.553955078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 44.09986219561546,
    "avg_bits_err_output": 0.24141334688275207,
    "avg_bits_err_improve": 43.858448848732706,
    "time": 24540.198486328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (if (!= (- (* b b) (* (* a c) -4.0)) 0.0) (* (fma 4.0 (* a c) (* b b)) (/ (fma b b (* (* a c) -4.0)) (- (* b b) (* (* a c) -4.0)))) (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 26,
    "avg_bits_err_input": 34.37159669082678,
    "avg_bits_err_output": 34.351171673942666,
    "avg_bits_err_improve": 0.020425016884111358,
    "time": 19997.574462890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (* (cos phi2) (cos (- lambda1 lambda2))) 0.0) (/ (fma (* (cos phi2) (cos (- lambda1 lambda2))) (* (cos phi2) (cos (- lambda1 lambda2))) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))) (* (cos phi2) (cos (- lambda1 lambda2)))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 37,
    "avg_bits_err_input": 0.9558991854781022,
    "avg_bits_err_output": 0.9651877939805888,
    "avg_bits_err_improve": -0.009288608502486695,
    "time": 32282.40771484375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0)))) 0.0) (/ (if (!= (+ 1.0 (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))) 0.0) (/ (- 1.0 (/ (/ 256.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))) (+ 1.0 (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))) (+ 1.0 (/ -16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))) (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))) (- 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 122,
    "avg_bits_err_input": 30.090555670984433,
    "avg_bits_err_output": 30.042993707197287,
    "avg_bits_err_improve": 0.047561963787146055,
    "time": 33171.876220703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= x -40.0) (+ (/ -1.0 (+ 1.0 (exp (+ x x)))) (/ (exp x) (+ (exp x) (exp (- x))))) (* (/ (* (exp x) (expm1 (+ x x))) (+ (exp x) (exp (- x)))) (exp (* x -2.0))))",
    "output_parens": 25,
    "avg_bits_err_input": 58.27648372474449,
    "avg_bits_err_output": 0.6826392859392129,
    "avg_bits_err_improve": 57.59384443880528,
    "time": 17840.358642578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (exp x) (- (expm1 (* x -2.0)))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.126209404233144,
    "avg_bits_err_output": 0.049875,
    "avg_bits_err_improve": 58.076334404233144,
    "time": 9986.613525390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.015559970711631062,
    "avg_bits_err_output": 0.015559970711631062,
    "avg_bits_err_improve": 0,
    "time": 2566.06884765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.17,
    "avg_bits_err_output": 32.17,
    "avg_bits_err_improve": 0,
    "time": 4867.966552734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log (if (!= (/ x (- 1.0 x)) 0.0) (/ (* (/ (- -1.0 x) (+ x -1.0)) (/ x (- 1.0 x))) (/ x (- 1.0 x))) (/ (- -1.0 x) (+ x -1.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 58.59154683982613,
    "avg_bits_err_output": 58.5949883178833,
    "avg_bits_err_improve": -0.0034414780571694337,
    "time": 19489.98828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.027521240625180292,
    "avg_bits_err_output": 0.027521240625180292,
    "avg_bits_err_improve": 0,
    "time": 3214.832275390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (- (exp (log1p (cos (atan (/ eh (* ew (tan t))))))) 1.0)) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.12882312031259016,
    "avg_bits_err_output": 0.13076184218813103,
    "avg_bits_err_improve": -0.0019387218755408664,
    "time": 21447.007080078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (expm1 (log1p (cos (atan (* (- eh) (/ (tan t) ew))))))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.1260212406251803,
    "avg_bits_err_output": 0.12811560156295076,
    "avg_bits_err_improve": -0.002094360937770462,
    "time": 14123.85498046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 38.80015680612026,
    "avg_bits_err_output": 3.7637794875901585,
    "avg_bits_err_improve": 35.03637731853011,
    "time": 28379.7451171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.633290516393384,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 14.625415516393383,
    "time": 8574.067138671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (if (!= (- (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos phi1) (cos theta))))))) (cos delta)) 0.0) (/ 1.0 (/ 1.0 (- (cos delta) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos phi1) (cos theta)))))))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 53,
    "avg_bits_err_input": 0.1623259767667463,
    "avg_bits_err_output": 0.16577659612600287,
    "avg_bits_err_improve": -0.003450619359256585,
    "time": 39523.88134765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* -3.0 (* c a)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.72143720535621,
    "avg_bits_err_output": 0.1724248125036057,
    "avg_bits_err_improve": 52.5490123928526,
    "time": 26561.729248046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.434287850800708,
    "avg_bits_err_output": 0.3398218062633418,
    "avg_bits_err_improve": 28.094466044537366,
    "time": 29003.764892578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 44.163788074526806,
    "avg_bits_err_output": 0.23959982851979325,
    "avg_bits_err_improve": 43.92418824600701,
    "time": 27346.046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma a (* c -3.0) (* b b))))) (* a -3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.420186962105916,
    "avg_bits_err_output": 21.973361557980645,
    "avg_bits_err_improve": 12.44682540412527,
    "time": 20961.281982421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (expm1 (log1p (* (cos (- lambda1 lambda2)) (sin phi1)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.414988571793534,
    "avg_bits_err_output": 13.421327227224468,
    "avg_bits_err_improve": -0.006338655430933926,
    "time": 37314.041748046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (if (!= (+ (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0))) 0.0) (/ (- (* (/ x (+ x 1.0)) (/ x (+ x 1.0))) (/ (+ x -1.0) (+ x -1.0))) (+ (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0)))) (- (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0)))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 33,
    "avg_bits_err_input": 29.565583672812078,
    "avg_bits_err_output": 25.11810702283373,
    "avg_bits_err_improve": 4.4474766499783485,
    "time": 18605.435791015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (/ (+ (/ 1.0 (+ x -1.0)) (/ (+ x x) (+ x (+ x 2.0)))) (+ x -1.0)) (/ 1.0 (+ x -1.0))) (+ (/ 1.0 (+ x -1.0)) (/ (+ x x) (+ x (+ x 2.0)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.012125,
    "avg_bits_err_output": 0.031137194065081898,
    "avg_bits_err_improve": -0.019012194065081898,
    "time": 6668.403076171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(if (<= x -9.5e+153) (/ 0.0 (+ x (+ x 2.0))) (if (<= x 9.5e+153) (/ (- (+ (/ -2.0 (+ x (+ x 2.0))) (/ (+ x x) (* (+ x (+ x 2.0)) (+ x -1.0)))) (/ -2.0 (* (+ x (+ x 2.0)) (+ x -1.0)))) -1.0) (/ 0.0 (+ x (+ x 2.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 14.508512973173719,
    "avg_bits_err_output": 13.102495532217066,
    "avg_bits_err_improve": 1.4060174409566528,
    "time": 18510.629638671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) (- A)) (* (* (- (pow B 2.0) (* A (* 4.0 C))) F) -2.0))) (- (- (pow B 2.0) (* A (* 4.0 C)))))",
    "output_parens": 22,
    "avg_bits_err_input": 52.25923150834944,
    "avg_bits_err_output": 51.964667488691916,
    "avg_bits_err_improve": 0.2945640196575212,
    "time": 44551.3095703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -5.2e+156) 0.0 (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI)))",
    "output_parens": 14,
    "avg_bits_err_input": 28.93617685401632,
    "avg_bits_err_output": 26.94096583921899,
    "avg_bits_err_improve": 1.9952110147973308,
    "time": 26670.965576171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (!= (/ (sqrt (* (fma 2.0 (pow B 2.0) (* A (* C -8.0))) (* F (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (- (pow B 2.0)) (- (pow B 2.0) (* (* A C) 8.0)))) 0.0) (+ (/ 1.0 (/ 1.0 (/ (sqrt (* (fma 2.0 (pow B 2.0) (* A (* C -8.0))) (* F (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (- (pow B 2.0)) (- (pow B 2.0) (* (* A C) 8.0)))))) (/ 1.0 (/ 1.0 (/ (sqrt (* (fma 2.0 (pow B 2.0) (* A (* C -8.0))) (* F (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (- (pow B 2.0)) (- (pow B 2.0) (* (* A C) 8.0))))))) (/ (sqrt (* (fma 2.0 (pow B 2.0) (* A (* C -8.0))) (* F (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* A (* C 4.0)) (pow B 2.0))))",
    "output_parens": 92,
    "avg_bits_err_input": 52.02030090309533,
    "avg_bits_err_output": 51.73540306029826,
    "avg_bits_err_improve": 0.2848978427970721,
    "time": 45020.81640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.826817317709503,
    "avg_bits_err_output": 15.826817317709503,
    "avg_bits_err_improve": 0,
    "time": 28172.335205078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- g) 0.0) (/ (* g (- (sqrt (fma g g (* h (- h)))) g)) g) (- (sqrt (fma h (- h) (* g g))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 36.579882857277,
    "avg_bits_err_output": 36.47393949364051,
    "avg_bits_err_improve": 0.10594336363649148,
    "time": 17339.076171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9890996250072126,
    "avg_bits_err_output": 0.9754293234384918,
    "avg_bits_err_improve": 0.013670301568720844,
    "time": 10374.795654296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log (+ 1.0 (expm1 (/ (exp a) (+ (exp a) (exp b))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5879777323043995,
    "avg_bits_err_output": 0.683161113109899,
    "avg_bits_err_improve": -0.09518338080549948,
    "time": 3802.759033203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (* a1 (/ a2 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-302) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+303) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 10.981464548096051,
    "avg_bits_err_output": 2.154025120291962,
    "avg_bits_err_improve": 8.827439427804089,
    "time": 10919.254150390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4043473413791487,
    "avg_bits_err_output": 0.365875,
    "avg_bits_err_improve": 0.03847234137914868,
    "time": 10613.759765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -2e+22) (log1p (if (!= x 0.0) (+ (+ -0.5 (/ (+ x (hypot 1.0 x)) 2.0)) (* x (/ (+ x (+ (hypot 1.0 x) -1.0)) (+ x x)))) (+ x (+ (hypot 1.0 x) -1.0)))) (log1p (+ x (+ (hypot 1.0 x) -1.0))))",
    "output_parens": 23,
    "avg_bits_err_input": 53.552911619301796,
    "avg_bits_err_output": 13.781934179621176,
    "avg_bits_err_improve": 39.77097743968062,
    "time": 17287.937255859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.661859374034152,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.661859374034152,
    "time": 2152.923583984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- 1.0 (/ (+ x x) (+ 1.0 x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.01375,
    "avg_bits_err_output": 0.014674039677847346,
    "avg_bits_err_improve": -0.0009240396778473457,
    "time": 5209.40283203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1233.739990234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (- (+ 3.0 (/ 2.0 (* r r))) (* (fma (* r w) (* r w) 0.0) (/ (* 0.125 (- 3.0 (* 2.0 v))) (- 1.0 v)))) 4.5)",
    "output_parens": 14,
    "avg_bits_err_input": 12.788903629004727,
    "avg_bits_err_output": 0.3657531968856375,
    "avg_bits_err_improve": 12.423150432119089,
    "time": 19456.201904296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (* x1 -6.0)) (+ (* (* x1 x1) (* (/ (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) (* (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (/ (* x1 2.0) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0))))))) (+ x1 x1)))",
    "output_parens": 51,
    "avg_bits_err_input": 0.505693749776676,
    "avg_bits_err_output": 0.24888451237056503,
    "avg_bits_err_improve": 0.256809237406111,
    "time": 74179.5263671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) 0.0) (* (/ v (+ t1 u)) (/ (- t1) (+ t1 u))) (if (<= (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) 2e+249) (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) (* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))))",
    "output_parens": 34,
    "avg_bits_err_input": 18.173742226920712,
    "avg_bits_err_output": 1.1495708359096988,
    "avg_bits_err_improve": 17.024171391011013,
    "time": 6053.85400390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.262886842188131,
    "avg_bits_err_output": 0.262886842188131,
    "avg_bits_err_improve": 0,
    "time": 7785.88037109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0025,
    "avg_bits_err_output": 0.0025,
    "avg_bits_err_improve": 0,
    "time": 2718.357666015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* (- (/ 0.5 a) (/ 0.5 b)) PI) (- b a)) (+ a b))",
    "output_parens": 8,
    "avg_bits_err_input": 14.359633506226235,
    "avg_bits_err_output": 0.288373454949886,
    "avg_bits_err_improve": 14.071260051276349,
    "time": 16859.29296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (expm1 (log1p (+ (- (exp (- (* x eps) x)) (/ (- (exp (- (fma x eps x))) (exp (- (* x eps) x))) eps)) (- (/ -1.0 (exp (fma x eps x))))))) 2.0)",
    "output_parens": 20,
    "avg_bits_err_input": 29.37776484209796,
    "avg_bits_err_output": 2.041856000283787,
    "avg_bits_err_improve": 27.335908841814174,
    "time": 16098.348876953125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.020875,
    "avg_bits_err_output": 0.020875,
    "avg_bits_err_improve": 0,
    "time": 4645.47900390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (/ (+ 2.0 (+ 2.0 (* (- 2.0 (/ (/ 4.0 t) (+ (/ 2.0 t) 2.0))) (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0)))))) 2.0))",
    "output_parens": 27,
    "avg_bits_err_input": 0.022125,
    "avg_bits_err_output": 0.06849858974046881,
    "avg_bits_err_improve": -0.04637358974046881,
    "time": 8998.19091796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ (* 8.0 (* (/ t (+ 1.0 t)) (/ t (+ 1.0 t)))) 2.0) (+ 4.0 (- (+ 1.0 (* (* 8.0 (/ t (+ t 1.0))) (/ t (+ t 1.0)))) 1.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.02375,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 0.016125,
    "time": 15178.94140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3141.3017578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7034.19384765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2436.668212890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.825823433141715,
    "avg_bits_err_output": 0.244,
    "avg_bits_err_improve": 7.581823433141715,
    "time": 33119.263671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (if (!= (+ 4.0 (- (pow (+ x eps) 5.0))) 0.0) (/ (+ (- 0.0 (* (pow (+ x eps) 5.0) -2.0)) (- (* (pow (+ x eps) 5.0) (+ (pow (+ x eps) 5.0) -2.0)))) (+ 4.0 (- (pow (+ x eps) 5.0)))) (pow (+ x eps) 5.0)) (pow x 5.0))",
    "output_parens": 27,
    "avg_bits_err_input": 7.3515319460888335,
    "avg_bits_err_output": 7.364770212926746,
    "avg_bits_err_improve": -0.013238266837912072,
    "time": 14111.753173828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(/ (- (expm1 (log1p (pow x 2.0))) (pow (+ x eps) 2.0)) -1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 15.847349048417943,
    "avg_bits_err_output": 15.877303528025957,
    "avg_bits_err_improve": -0.029954479608013784,
    "time": 15709.563232421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (log (- (+ 1.0 (exp (cos x))) 1.0)) (exp (* x (* x 10.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 3.5123727756933536,
    "avg_bits_err_output": 3.5871135393915075,
    "avg_bits_err_improve": -0.07474076369815386,
    "time": 17449.789306640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 15.166612181515402,
    "avg_bits_err_output": 15.166612181515402,
    "avg_bits_err_improve": 0,
    "time": 13557.306884765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.42165213534209,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.42165213534209,
    "time": 4415.9130859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.114711767779134,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 39.114336767779136,
    "time": 3846.179443359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.245125,
    "avg_bits_err_improve": 63.754875,
    "time": 18720.189453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (* t 4e-32))",
    "output_parens": 2,
    "avg_bits_err_input": 61.843254462246236,
    "avg_bits_err_output": 0.403,
    "avg_bits_err_improve": 61.44025446224624,
    "time": 7420.642333984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.77893227627691,
    "avg_bits_err_output": 33.77893227627691,
    "avg_bits_err_improve": 0,
    "time": 29897.988037109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (if (!= (- (* b b) (* (* a c) -4.0)) 0.0) (* (fma 4.0 (* a c) (* b b)) (/ (fma b b (* (* a c) -4.0)) (- (* b b) (* (* a c) -4.0)))) (fma b b (* (* a c) -4.0))))) (* a 2.0))",
    "output_parens": 26,
    "avg_bits_err_input": 34.37159669082678,
    "avg_bits_err_output": 34.351171673942666,
    "avg_bits_err_improve": 0.020425016884111358,
    "time": 23308.816650390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2674.461181640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.22072273549194,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 40.21109773549194,
    "time": 4862.86376953125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- (* x x) (* y y)) (fma x x (* y y)))",
    "output_parens": 6,
    "avg_bits_err_input": 20.40656451780972,
    "avg_bits_err_output": 20.409472600623033,
    "avg_bits_err_improve": -0.0029080828133132286,
    "time": 6660.502685546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ c (+ d a))) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.671258470053417,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.671258470053417,
    "time": 10289.287109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04025,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.03925,
    "time": 8443.606689453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ a b)) (* a (+ a b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021219360937770434,
    "avg_bits_err_output": 0.0145,
    "avg_bits_err_improve": 0.006719360937770433,
    "time": 5370.290283203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x (* x x) (* x x))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.01475,
    "avg_bits_err_improve": -0.0002499999999999985,
    "time": 2557.02001953125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0,
    "time": 1389.29248046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39365357187842565,
    "avg_bits_err_output": 0.245875,
    "avg_bits_err_improve": 0.14777857187842564,
    "time": 4878.42138671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (- 1.0 (cos x)) 0.0) (/ 1.0 (/ 1.0 (- 1.0 (cos x)))) (- 1.0 (cos x)))",
    "output_parens": 10,
    "avg_bits_err_input": 30.024454308598948,
    "avg_bits_err_output": 30.02445430995901,
    "avg_bits_err_improve": -1.360064061373123e-09,
    "time": 10125.265869140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (sqrt (if (!= eps 0.0) (- (* x (* (/ x eps) eps)) eps) (- (* x x) eps))))",
    "output_parens": 10,
    "avg_bits_err_input": 24.370254713542884,
    "avg_bits_err_output": 24.402639297497846,
    "avg_bits_err_improve": -0.032384583954961244,
    "time": 11880.836181640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(+ (+ 1.0 (/ (- x (sin x)) (tan x))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.915080730161787,
    "avg_bits_err_output": 29.929772717473128,
    "avg_bits_err_improve": -0.014691987311341137,
    "time": 33075.00732421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007875,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.007375,
    "time": 2466.662353515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 5e-271) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (!= (/ 100.0 (/ i n)) 0.0) (- (/ (* (* (pow (+ (/ i n) 1.0) n) (/ 100.0 (/ i n))) (* 100.0 (/ i i))) 100.0) (/ (/ 10000.0 (/ i n)) 100.0)) 0.0))",
    "output_parens": 33,
    "avg_bits_err_input": 48.219958908061635,
    "avg_bits_err_output": 11.191793682895366,
    "avg_bits_err_improve": 37.02816522516627,
    "time": 28848.884033203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma d d (* c c)))) (* a (/ c (fma d d (* c c)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.993224218479938,
    "avg_bits_err_output": 22.63184986297462,
    "avg_bits_err_improve": 3.361374355505319,
    "time": 12220.465576171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* b (/ c (fma c c (* d d)))) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.82646100911031,
    "avg_bits_err_output": 22.884517428713156,
    "avg_bits_err_improve": 2.9419435803971545,
    "time": 16879.8564453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.037375,
    "avg_bits_err_output": 0.02080641359472751,
    "avg_bits_err_improve": 0.01656858640527249,
    "time": 5261.897705078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.446977237234336,
    "avg_bits_err_output": 12.281338247854622,
    "avg_bits_err_improve": 1.1656389893797137,
    "time": 33900.281494140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (+ ux (- ux (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))) (* ux (- ux)))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.488496597821669,
    "avg_bits_err_output": 0.31524797709408414,
    "avg_bits_err_improve": 13.173248620727584,
    "time": 28937.33935546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (+ (* (- 1.0 ux) (* ux (* maxCos zi))) (* (sin (* PI (* uy 2.0))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* (* maxCos maxCos) (* ux (- ux (* ux ux))))))) yi))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.33099399119083023,
    "avg_bits_err_output": 0.31784516090996745,
    "avg_bits_err_improve": 0.013148830280862778,
    "time": 48723.9443359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.20555927976382687,
    "avg_bits_err_output": 0.20555927976382687,
    "avg_bits_err_improve": 0,
    "time": 22338.2451171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (+ (/ (- (* u1 (/ (/ u1 (- 1.0 u1)) (- 1.0 u1))) (/ (* u1 (/ u1 (- 1.0 u1))) (* (- 1.0 u1) 4.0))) (/ u1 (- 1.0 u1))) (/ (* (/ u1 (- 1.0 u1)) (/ u1 u1)) 4.0)) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 32,
    "avg_bits_err_input": 0.5456668669841892,
    "avg_bits_err_output": 0.5625075848763947,
    "avg_bits_err_improve": -0.016840717892205537,
    "time": 22583.654296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(+ (sqrt (/ u1 (- 1.0 u1))) (fma (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)) (- (sqrt (/ u1 (- 1.0 u1))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.3175356435446397,
    "avg_bits_err_output": 0.3251213017792766,
    "avg_bits_err_improve": -0.007585658234636916,
    "time": 19703.478515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (/ (/ (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0) (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s)))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))))",
    "output_parens": 88,
    "avg_bits_err_input": 0.3393021149501038,
    "avg_bits_err_output": 0.3398731298194365,
    "avg_bits_err_improve": -0.0005710148693326977,
    "time": 64829.12158203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(expm1 (log1p (/ 1.0 (+ (exp (/ x (- s))) 1.0))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.06095025814003622,
    "avg_bits_err_output": 0.06608014564219965,
    "avg_bits_err_improve": -0.0051298875021634285,
    "time": 15203.0166015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (+ (exp (/ (fabs x) (- s))) 1.0)) (fma s (exp (/ (fabs x) (- s))) s))",
    "output_parens": 16,
    "avg_bits_err_input": 0.13555194388532374,
    "avg_bits_err_output": 0.11540209042482251,
    "avg_bits_err_improve": 0.02014985346050123,
    "time": 21758.421142578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6725417830419382,
    "avg_bits_err_output": 0.6725417830419382,
    "avg_bits_err_improve": 0,
    "time": 23414.798095703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (/ (if (!= (- (* (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 2.0) -2.0) 0.0) (/ (- 1.0 (* (+ 1.0 (* (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 2.0)) (+ 1.0 (* (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 2.0)))) (- (* (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 2.0) -2.0)) (- 0.0 (* (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 2.0))) -2.0)))",
    "output_parens": 43,
    "avg_bits_err_input": 0.1565655748760634,
    "avg_bits_err_output": 0.17106391636363433,
    "avg_bits_err_improve": -0.014498341487570926,
    "time": 23574.260986328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (+ (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) (+ (fma (/ (- sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) sinTheta_O (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) (fma (/ (- sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) sinTheta_O (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))))",
    "output_parens": 34,
    "avg_bits_err_input": 2.5370615514369237,
    "avg_bits_err_output": 2.5354193634964544,
    "avg_bits_err_improve": 0.0016421879404693307,
    "time": 31268.369140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* (* cosTheta_i cosTheta_O) (* (/ 0.5 v) (/ (/ 1.0 v) (sinh (/ 1.0 v))))) (exp (* sinTheta_i (/ sinTheta_O v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4635854936640751,
    "avg_bits_err_output": 0.3711718287812723,
    "avg_bits_err_improve": 0.09241366488280278,
    "time": 25459.69287109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (- (* cosTheta_i cosTheta_O) (+ 1.0 (* sinTheta_i sinTheta_O))) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.12413746575755602,
    "avg_bits_err_output": 0.0908829164659922,
    "avg_bits_err_improve": 0.03325454929156382,
    "time": 21723.81640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (+ (* alpha alpha) -1.0) (log (* alpha alpha))) PI) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.45308520440294736,
    "avg_bits_err_output": 0.4699264112222977,
    "avg_bits_err_improve": -0.016841206819350363,
    "time": 23724.033203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) s)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3284716984949052,
    "avg_bits_err_output": 1.212350115783391,
    "avg_bits_err_improve": 0.11612158271151429,
    "time": 25956.054931640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(/ (* (* (if (!= (+ (log (/ 1.0 (fma u -4.0 1.0))) 2.0) 0.0) (/ (+ -1.0 (exp (* (log1p (log (/ 1.0 (fma u -4.0 1.0)))) 2.0))) (+ (- (+ 1.0 (log (/ 1.0 (fma u -4.0 1.0)))) 1.0) 2.0)) (log (/ 1.0 (fma u -4.0 1.0)))) 2.0) s) 2.0)",
    "output_parens": 26,
    "avg_bits_err_input": 12.48234462060713,
    "avg_bits_err_output": 12.52449332916753,
    "avg_bits_err_improve": -0.04214870856040065,
    "time": 29595.12744140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ 0.125 (* PI s))) (* 0.75 (/ (exp (/ r (* -3.0 s))) (* s (* PI 6.0))))) r)",
    "output_parens": 15,
    "avg_bits_err_input": 0.14111506861303263,
    "avg_bits_err_output": 0.14740718626936186,
    "avg_bits_err_improve": -0.006292117656329227,
    "time": 23668.0849609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (sin (- normAngle (* normAngle u))) (/ n0_i (sin normAngle))) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.9105841127247802,
    "avg_bits_err_output": 0.7799591111827823,
    "avg_bits_err_improve": 0.13062500154199796,
    "time": 28999.49853515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6943907046587724,
    "avg_bits_err_output": 0.4689383628127147,
    "avg_bits_err_improve": 0.22545234184605767,
    "time": 20690.435791015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(- (sin (* 2.0 (if (!= (* PI u2) 0.0) (* (* u2 u2) (* PI (/ PI (* PI u2)))) (* PI u2)))) (- (sin (* 2.0 (* PI u2))) (* (sqrt (- (log (- 1.0 u1)))) (sin (* 2.0 (* PI u2))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.523444399449476,
    "avg_bits_err_output": 13.476259238020871,
    "avg_bits_err_improve": 0.047185161428604516,
    "time": 32053.488525390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (cos (* 2.0 (* PI u2))) (log (+ 1.0 (expm1 (* (cos (* 2.0 (* PI u2))) (- 1.0 (sqrt (- (log (- 1.0 u1))))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.569321538697196,
    "avg_bits_err_output": 13.153743564700356,
    "avg_bits_err_improve": 0.4155779739968395,
    "time": 28454.5234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(- (* (* alpha (log (- 1.0 u0))) (- alpha)) (fma (- alpha) (fma alpha (log (- 1.0 u0)) alpha) (* alpha (fma alpha (log (- 1.0 u0)) alpha))))",
    "output_parens": 15,
    "avg_bits_err_input": 14.36378234277145,
    "avg_bits_err_output": 14.299064146236026,
    "avg_bits_err_improve": 0.06471819653542532,
    "time": 19524.91259765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ (/ cos2phi alphax) alphax) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.555894410737363,
    "avg_bits_err_output": 0.517972693097874,
    "avg_bits_err_improve": 12.037921717639488,
    "time": 17197.980224609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (* (/ (tan (* PI l)) F) (/ 1.0 F)))",
    "output_parens": 7,
    "avg_bits_err_input": 15.773801323529252,
    "avg_bits_err_output": 11.728831722392187,
    "avg_bits_err_improve": 4.0449696011370655,
    "time": 22163.606689453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21324615082787057,
    "avg_bits_err_output": 0.15438054926491981,
    "avg_bits_err_improve": 0.05886560156295076,
    "time": 14309.026611328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.305414975164256,
    "avg_bits_err_output": 10.04198722875009,
    "avg_bits_err_improve": 3.263427746414166,
    "time": 18798.466552734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (expm1 (log1p (/ (+ (exp (* PI (/ f 4.0))) (exp (* f (/ PI -4.0)))) (if (!= (exp (* f (/ PI -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* f (/ PI -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* f (/ PI -4.0))))))))) (* PI -0.25))",
    "output_parens": 34,
    "avg_bits_err_input": 61.495448534344035,
    "avg_bits_err_output": 1.8730521617390652,
    "avg_bits_err_improve": 59.62239637260497,
    "time": 51770.453857421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= (* l l) 1e+279) (/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (- x -1.0) (+ x -1.0)) (* 2.0 (* t t))) (* (* l l) (+ (/ (- -1.0 x) (- 1.0 x)) -1.0))))) (* (/ t (sqrt (fma l (- l) (/ (* (+ x 1.0) (fma 2.0 (* t t) (* l l))) (+ x -1.0))))) (sqrt 2.0)))",
    "output_parens": 33,
    "avg_bits_err_input": 43.08167959874521,
    "avg_bits_err_output": 36.36158629840434,
    "avg_bits_err_improve": 6.720093300340871,
    "time": 29539.884033203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.7811349724727923,
    "avg_bits_err_output": 3.7811349724727923,
    "avg_bits_err_improve": 0,
    "time": 27643.105712890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.9849839384753238,
    "avg_bits_err_output": 0.9785803826382192,
    "avg_bits_err_improve": 0.006403555837104613,
    "time": 9247.843017578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.04127081872016,
    "avg_bits_err_output": 10.04127081872016,
    "avg_bits_err_improve": 0,
    "time": 14707.455810546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 1e-283) (sqrt (* (* 2.0 n) (* U (- t (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* 2.0 (* l (/ l Om)))))))) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))))",
    "output_parens": 43,
    "avg_bits_err_input": 34.158295003873945,
    "avg_bits_err_output": 29.055202852633823,
    "avg_bits_err_improve": 5.103092151240123,
    "time": 40243.90576171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1e-108) (/ (/ (/ 2.0 (pow (/ k t) 2.0)) (* (pow t 3.0) (/ (sin k) l))) (/ (tan k) l)) (if (<= t 1.8e-99) (/ 2.0 (* (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) l) (* (sin k) (/ (tan k) l)))) (/ 2.0 (/ (* (pow (/ k t) 2.0) (* (tan k) (* (pow t 3.0) (/ (sin k) l)))) l))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.94815009988665,
    "avg_bits_err_output": 34.18519525633504,
    "avg_bits_err_improve": 13.762954843551604,
    "time": 44188.570068359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (* (+ 2.0 (pow (/ k t) 2.0)) (* (tan k) (pow t 3.0))) l) (/ (sin k) l)))",
    "output_parens": 12,
    "avg_bits_err_input": 33.04164693993361,
    "avg_bits_err_output": 28.720915139229273,
    "avg_bits_err_improve": 4.320731800704333,
    "time": 20600.7900390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (fma a1 a1 (* a2 a2)) (sqrt 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5554900406482592,
    "avg_bits_err_output": 0.5059283859565222,
    "avg_bits_err_improve": 0.04956165469173701,
    "time": 26305.66796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (/ (sqrt (* 2.0 (* PI n))) (sqrt k)) (/ (pow (* 2.0 (* PI n)) (* k -0.5)) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.5035408448820499,
    "avg_bits_err_output": 0.41233533906799913,
    "avg_bits_err_improve": 0.09120550581405074,
    "time": 19345.158203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (- (* J (* (exp l) (cos (/ K 2.0)))) (* J (/ (cos (/ K 2.0)) (exp l)))) U)",
    "output_parens": 12,
    "avg_bits_err_input": 17.975882678524336,
    "avg_bits_err_output": 18.004195444011977,
    "avg_bits_err_improve": -0.028312765487640945,
    "time": 27785.492919921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (if (!= M 0.0) (/ (if (!= (- (- (* M M)) (* (/ (+ m n) 2.0) (* M K))) 0.0) (* (fma K (/ (+ m n) -2.0) M) (* M (* M (/ (fma (/ (+ m n) 2.0) K M) (- (* M (fma (/ (+ m n) 2.0) K M))))))) (* M (fma (/ (+ m n) 2.0) K (- M)))) M) (- (* K (/ (+ m n) 2.0)) M))) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 48,
    "avg_bits_err_input": 15.11939821613272,
    "avg_bits_err_output": 15.089746474158051,
    "avg_bits_err_improve": 0.0296517419746678,
    "time": 23248.719970703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (* -2.0 (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* 2.0 (* J (cos (/ K 2.0))))) 2.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.053417481250364,
    "avg_bits_err_output": 18.082566165626623,
    "avg_bits_err_improve": -0.029148684376259837,
    "time": 32222.08740234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) (- INFINITY)) (* w0 (sqrt (- 1.0 (/ (* (pow (/ (if (!= (* (/ D d) (/ M 2.0)) 0.0) (/ (/ (* M (* M (* (/ D d) (/ D d)))) 4.0) (* (/ D d) (/ M 4.0))) (* D (/ M d))) 2.0) 2.0) h) l)))) (if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) 2e-54) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (/ (* (pow (if (!= (/ (* D M) (* d 4.0)) 0.0) (* D (/ (/ (* M M) (+ d d)) M)) (* M (/ D (* d 2.0)))) 2.0) h) l))))))",
    "output_parens": 69,
    "avg_bits_err_input": 14.461150724602188,
    "avg_bits_err_output": 10.621966085121713,
    "avg_bits_err_improve": 3.839184639480475,
    "time": 29873.001220703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* c0 (sqrt (/ A (* V l)))) -5e+257) (* c0 (sqrt (/ (* A (/ 2.0 l)) (+ V V)))) (if (<= (* c0 (sqrt (/ A (* V l)))) -4e-258) (* c0 (sqrt (* (* A (/ l l)) (/ 1.0 (* l V))))) (if (<= (* c0 (sqrt (/ A (* V l)))) 5e-119) (* c0 (sqrt (/ (/ A V) l))) (if (<= (* c0 (sqrt (/ A (* V l)))) 1e+247) (* c0 (sqrt (* (* A (/ l l)) (/ 1.0 (* l V))))) (* c0 (sqrt (* (/ A V) (/ 1.0 l))))))))",
    "output_parens": 53,
    "avg_bits_err_input": 18.365234728141775,
    "avg_bits_err_output": 14.657278666731324,
    "avg_bits_err_improve": 3.707956061410451,
    "time": 17005.42041015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 2e-192) (* (/ c0 (* 2.0 w)) (+ (* c0 (* d (/ (/ d (* w D)) (* D h)))) (sqrt (* (fma d (* c0 (/ (/ d (* w D)) (* D h))) M) (fma c0 (* d (/ (/ d (* w D)) (* D h))) (- M)))))) (/ (/ (* c0 (if (!= (sqrt (* (fma (/ d (* w h)) (* (/ c0 D) (/ d D)) M) (fma (/ d D) (/ (* d c0) (* (* w h) D)) (- M)))) 0.0) 0.0 (fma (/ d (* w h)) (* (/ c0 D) (/ d D)) (sqrt (* (fma (/ d (* w h)) (* (/ c0 D) (/ d D)) M) (fma (/ d D) (/ (* d c0) (* (* w h) D)) (- M))))))) w) 2.0))",
    "output_parens": 94,
    "avg_bits_err_input": 59.66478830287663,
    "avg_bits_err_output": 31.213499220601236,
    "avg_bits_err_improve": 28.451289082275395,
    "time": 47892.89453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) -5e+72) (- (* (sqrt (/ d h)) (sqrt (/ d l))) (* (* (pow (* M (/ D (* 2.0 d))) 2.0) 0.5) (* (sqrt (/ d h)) (* (/ h l) (sqrt (/ d l)))))) (* (fma 0.5 (* h (/ (pow (* D (/ M (+ d d))) 2.0) l)) -1.0) (* (sqrt (/ d h)) (- (sqrt (/ d l))))))",
    "output_parens": 49,
    "avg_bits_err_input": 26.39968467194701,
    "avg_bits_err_output": 25.730948956219603,
    "avg_bits_err_improve": 0.6687357157274079,
    "time": 38272.6396484375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (/ (- (- 0.5 (/ -0.5 (hypot 1.0 x))) (+ (/ -0.5 (hypot 1.0 x)) 1.5)) -2.0) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 26,
    "avg_bits_err_input": 15.823127177455826,
    "avg_bits_err_output": 15.34179120085508,
    "avg_bits_err_improve": 0.4813359766007448,
    "time": 10472.115478515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ 1.3333333333333333 (* (sqrt (- 2.0 (* v (* v 6.0)))) (* PI (- 1.0 (* v v)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9849481203125902,
    "avg_bits_err_output": 0.013344360937770436,
    "avg_bits_err_improve": 0.9716037593748197,
    "time": 4064.561279296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (+ 2.0 (* (* v v) -6.0)))) (* t (- 1.0 (* v v)))) (* (* v v) (/ (/ 5.0 (* PI (* t (- 1.0 (* v v))))) (sqrt (+ 2.0 (* (* v v) -6.0))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.45465630542840224,
    "avg_bits_err_output": 0.11726015733916433,
    "avg_bits_err_improve": 0.3373961480892379,
    "time": 18563.168701171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(- (* (* v v) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (/ (sqrt 2.0) -4.0))) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (/ (sqrt 2.0) -4.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.011594360937770434,
    "avg_bits_err_output": 0.010469360937770433,
    "avg_bits_err_improve": 0.001125000000000001,
    "time": 8472.483642578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.540316684964843,
    "avg_bits_err_output": 0.540316684964843,
    "avg_bits_err_improve": 0,
    "time": 15023.166748046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.1102546721326263,
    "avg_bits_err_output": 2.0755353111948556,
    "avg_bits_err_improve": 0.03471936093777073,
    "time": 14604.592041015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ (exp (/ (+ mu (- Vef (- Ec EDonor))) KbT)) 1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.01231245750865524,
    "avg_bits_err_output": 0.01231245750865524,
    "avg_bits_err_improve": 0,
    "time": 11525.495849609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (/ 1.0 (pow (fma a a (* b b)) -2.0)) (pow (fma a a (* b b)) 2.0)) (* 4.0 (* b b))) 1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 0.17756308742908467,
    "avg_bits_err_output": 0.19442211087334524,
    "avg_bits_err_improve": -0.016859023444260574,
    "time": 17308.247802734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.18674727088642265,
    "avg_bits_err_output": 0.18674727088642265,
    "avg_bits_err_improve": 0,
    "time": 13146.93359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (if (!= (* b (* b (+ 3.0 a))) 0.0) (/ 1.0 (/ (/ 1.0 (* b b)) (+ 3.0 a))) (* b (* b (+ 3.0 a))))))) 1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 0.19231989481123013,
    "avg_bits_err_output": 0.19319489481123014,
    "avg_bits_err_improve": -0.0008750000000000147,
    "time": 20421.56298828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (if (!= (- 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x))))) 0.0) (/ (log (+ 1.0 (expm1 (- 1.0 (/ (* x x) (fma x x (* 4.0 (* p p)))))))) (- 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x)))))) (+ 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x))))))))",
    "output_parens": 32,
    "avg_bits_err_input": 12.608469703750725,
    "avg_bits_err_output": 12.73295938277293,
    "avg_bits_err_improve": -0.12448967902220609,
    "time": 15892.3671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.431867444974664,
    "avg_bits_err_output": 0.040875,
    "avg_bits_err_improve": 41.390992444974664,
    "time": 8171.74560546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))",
    "output_parens": 8,
    "avg_bits_err_input": 32.18348031684792,
    "avg_bits_err_output": 32.16341684879651,
    "avg_bits_err_improve": 0.02006346805141135,
    "time": 17304.364501953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) (- b_2)) 0.0) (* (/ c (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.63248713143524,
    "avg_bits_err_output": 21.266388546882112,
    "avg_bits_err_improve": 12.366098584553129,
    "time": 13819.3662109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (+ (/ (sqrt (- (* b_2 b_2) (* a c))) -2.0) (- (/ (sqrt (- (* b_2 b_2) (* a c))) -2.0) b_2)) a)",
    "output_parens": 13,
    "avg_bits_err_input": 33.83693593573938,
    "avg_bits_err_output": 33.83947841698975,
    "avg_bits_err_improve": -0.0025424812503658245,
    "time": 15054.93017578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 30.972926340166577,
    "avg_bits_err_output": 30.19597706644041,
    "avg_bits_err_improve": 0.7769492737261672,
    "time": 15943.0751953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (- (/ (exp (/ (+ (log1p x) (log1p x)) n)) (+ (pow x (/ 1.0 n)) (exp (/ (log1p x) n)))) (* (pow x (/ 1.0 n)) (/ (pow x (/ 1.0 n)) (+ (pow x (/ 1.0 n)) (exp (/ (log1p x) n)))))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 39,
    "avg_bits_err_input": 32.80354560491808,
    "avg_bits_err_output": 32.56134397968494,
    "avg_bits_err_improve": 0.24220162523313604,
    "time": 29480.373291015625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (if (!= (+ (log1p N) -2.0) 0.0) (/ (+ (* (+ (log1p N) -1.0) (+ (log1p N) -1.0)) -1.0) (+ (log1p N) -2.0)) (log1p N)) (log N))",
    "output_parens": 16,
    "avg_bits_err_input": 29.60636451278117,
    "avg_bits_err_output": 29.62303485319741,
    "avg_bits_err_improve": -0.016670340416240492,
    "time": 12778.582275390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (+ (/ -0.5 x) (/ 0.5 (+ x 1.0))) (/ (+ 1.0 (/ (- x) (+ x 1.0))) (+ x x)))",
    "output_parens": 11,
    "avg_bits_err_input": 14.483121854825036,
    "avg_bits_err_output": 14.464070092168917,
    "avg_bits_err_improve": 0.019051762656118854,
    "time": 15984.5009765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (!= (cos x) 0.0) (/ (if (!= (* (cos x) (cos x)) 0.0) (/ (fma (if (!= (* (cos x) (cos x)) 0.0) (/ (* (cos x) (* (cos x) (log (+ 1.0 (expm1 (* (cos x) (cos x))))))) (* (cos x) (cos x))) (* (cos x) (cos x))) (* (cos x) (cos (+ x eps))) (* (* (cos x) (cos x)) (* (cos x) (- (cos x))))) (* (cos x) (cos x))) (* (cos x) (- (cos (+ x eps)) (cos x)))) (cos x)) (- (cos (+ x eps)) (cos x)))",
    "output_parens": 59,
    "avg_bits_err_input": 39.31030765211852,
    "avg_bits_err_output": 39.346644266174664,
    "avg_bits_err_improve": -0.03633661405614674,
    "time": 30789.1064453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (if (!= (cbrt x) 0.0) (/ (- (* (cbrt x) (if (!= (+ 1.0 (cbrt (+ x 1.0))) 0.0) (/ (fma (cbrt (+ x 1.0)) (cbrt (+ x 1.0)) -1.0) (+ 1.0 (cbrt (+ x 1.0)))) (expm1 (* 0.3333333333333333 (log1p x))))) (* (cbrt x) (cbrt x))) (cbrt x)) (- (expm1 (* 0.3333333333333333 (log1p x))) (cbrt x))) 1.0)",
    "output_parens": 34,
    "avg_bits_err_input": 29.89126835068925,
    "avg_bits_err_output": 29.480230563693514,
    "avg_bits_err_improve": 0.4110377869957347,
    "time": 13564.208740234375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.11700333397715,
    "avg_bits_err_output": 30.11700333397715,
    "avg_bits_err_improve": 0,
    "time": 24310.06103515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* c (* a 4.0))))) (* a 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 34.32765323271245,
    "avg_bits_err_output": 34.33352993524726,
    "avg_bits_err_improve": -0.005876702534813205,
    "time": 20052.50537109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a -4.0)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.79028626161961,
    "avg_bits_err_output": 21.693468349960572,
    "avg_bits_err_improve": 12.096817911659041,
    "time": 20634.17138671875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(- (/ (+ 1.0 (log (- 1.0 x))) (log1p x)) (/ (/ 1.0 (log1p x)) (* (log1p x) (/ 1.0 (log1p x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 61.43207225054348,
    "avg_bits_err_output": 59.68018480753247,
    "avg_bits_err_improve": 1.7518874430110074,
    "time": 23003.78662109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00466487177278,
    "avg_bits_err_output": 44.22976739736848,
    "avg_bits_err_improve": 18.774897474404305,
    "time": 11570.4931640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log1p (- (/ eps (- -1.0 eps)) (if (!= (+ 1.0 (/ -1.0 (- -1.0 eps))) 0.0) (/ (- 1.0 (/ 1.0 (* (- -1.0 eps) (- -1.0 eps)))) (+ 1.0 (/ -1.0 (- -1.0 eps)))) (+ 1.0 (/ 1.0 (- -1.0 eps))))))",
    "output_parens": 21,
    "avg_bits_err_input": 58.596153017157654,
    "avg_bits_err_output": 50.52236041550028,
    "avg_bits_err_improve": 8.073792601657374,
    "time": 21069.79296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ (+ (/ 0.5 x) (/ -0.5 (tan x))) (/ (* (- 1.0 (/ x (tan x))) 0.5) x))",
    "output_parens": 10,
    "avg_bits_err_input": 59.85900928057009,
    "avg_bits_err_output": 59.848735964139856,
    "avg_bits_err_improve": 0.010273316430236434,
    "time": 29257.097900390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (if (!= (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) 0.0) (/ 1.0 (/ 1.0 (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))))) (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b))))) (expm1 (* eps a)))",
    "output_parens": 28,
    "avg_bits_err_input": 60.058192328871215,
    "avg_bits_err_output": 28.659519649991328,
    "avg_bits_err_improve": 31.398672678879887,
    "time": 27997.985595703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.789398730570014,
    "avg_bits_err_output": 0.3798443609377704,
    "avg_bits_err_improve": 41.40955436963225,
    "time": 7691.65869140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.5733929586296,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.5727679586296,
    "time": 5175.4453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.440749570452372,
    "avg_bits_err_output": 0.01680195072789178,
    "avg_bits_err_improve": 29.42394761972448,
    "time": 4968.314697265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (if (!= (- 1.0 (exp x)) 0.0) (+ (* (- (- (expm1 x)) (expm1 (- x))) (/ (expm1 x) (expm1 x))) (/ (fma (- (expm1 x)) (expm1 x) (* (expm1 x) (expm1 x))) (expm1 x))) (- 1.0 (+ (expm1 (- x)) (exp x)))))",
    "output_parens": 29,
    "avg_bits_err_input": 29.261318308666194,
    "avg_bits_err_output": 28.344768970651458,
    "avg_bits_err_improve": 0.916549338014736,
    "time": 23887.528564453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.8563395808831,
    "avg_bits_err_output": 9.8563395808831,
    "avg_bits_err_improve": 0,
    "time": 30294.992919921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (- (/ (sin x) (+ (cos x) (cos x))) (/ (tan (+ x eps)) 2.0)) -2.0)",
    "output_parens": 10,
    "avg_bits_err_input": 37.53202988348641,
    "avg_bits_err_output": 37.53369031476486,
    "avg_bits_err_improve": -0.001660431278452279,
    "time": 20752.41845703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.986196283008077,
    "avg_bits_err_output": 0.16758740625180288,
    "avg_bits_err_improve": 29.818608876756276,
    "time": 15282.7734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (+ (sin x) 1.0) 0.0) (/ (+ (- (sin (+ x eps)) (sin x)) (* (sin x) (- (sin (+ x eps)) (sin x)))) (+ (sin x) 1.0)) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 22,
    "avg_bits_err_input": 36.6590889673482,
    "avg_bits_err_output": 36.66068851339224,
    "avg_bits_err_improve": -0.0015995460440407783,
    "time": 20131.681396484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.679766766756835,
    "avg_bits_err_output": 19.540559772999647,
    "avg_bits_err_improve": 0.13920699375718826,
    "time": 14096.425537109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 14.616473437918307,
    "avg_bits_err_output": 14.616473437918307,
    "avg_bits_err_improve": 0,
    "time": 3590.470947265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.030601608617232,
    "avg_bits_err_output": 1.4594250270877889,
    "avg_bits_err_improve": 28.571176581529443,
    "time": 26454.43505859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(+ -1.0 (+ (* (/ m v) (- (- (* m m) m) (+ m -1.0))) m))",
    "output_parens": 8,
    "avg_bits_err_input": 0.07089868437626201,
    "avg_bits_err_output": 0.08664343629957882,
    "avg_bits_err_improve": -0.015744751923316813,
    "time": 13341.387939453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a (* b -0.25)) (+ (* a b) (* a (+ (+ b b) b))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.222949566939832,
    "avg_bits_err_output": 0.3039909781302283,
    "avg_bits_err_improve": 15.918958588809604,
    "time": 11651.803466796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (if (!= (* PI (* angle 0.002777777777777778)) 0.0) (/ 4.0 (/ (/ 720.0 angle) PI)) (* PI (* angle 0.005555555555555556))))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.63888738572131,
    "avg_bits_err_output": 20.703794375676996,
    "avg_bits_err_improve": -0.06490698995568422,
    "time": 38078.217529296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (- (pow b 2.0) (pow a 2.0)) (expm1 (log1p (cos (* PI (/ angle 180.0)))))) (* (sin (* PI (/ angle 180.0))) 2.0))",
    "output_parens": 14,
    "avg_bits_err_input": 31.005119747765104,
    "avg_bits_err_output": 30.964085365389394,
    "avg_bits_err_improve": 0.041034382375709555,
    "time": 42253.33935546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* angle (/ PI 180.0)))) 2.0) (pow (* b (cos (* angle (/ PI 180.0)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.73157717929106,
    "avg_bits_err_output": 20.691460096962917,
    "avg_bits_err_improve": 0.040117082328144704,
    "time": 43118.735107421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- m (* m m)) (/ m v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1753656015629507,
    "avg_bits_err_output": 0.1767926847629426,
    "avg_bits_err_improve": -0.0014270831999919076,
    "time": 14724.26171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (- (tan x)) 1.0) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.337931329582567,
    "avg_bits_err_output": 0.321403294084734,
    "avg_bits_err_improve": 0.016528035497832994,
    "time": 18845.1796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (/ (sin v) (+ 1.0 (* e (cos v)))) e)",
    "output_parens": 6,
    "avg_bits_err_input": 0.13375,
    "avg_bits_err_output": 0.13636560156295074,
    "avg_bits_err_improve": -0.0026156015629507368,
    "time": 18328.20068359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(/ (* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) (+ R R)) 2.0)",
    "output_parens": 13,
    "avg_bits_err_input": 17.303448346569223,
    "avg_bits_err_output": 17.30763768855054,
    "avg_bits_err_improve": -0.004189341981316375,
    "time": 31992.3994140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* -4.0 (* a c)))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.41704766489184,
    "avg_bits_err_output": 0.17093421094065497,
    "avg_bits_err_improve": 52.24611345395118,
    "time": 22565.859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ (sqrt (fma -4.0 (* a c) (* b b))) b) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.070033190974513,
    "avg_bits_err_output": 0.3457864832115306,
    "avg_bits_err_improve": 27.724246707762983,
    "time": 24427.27490234375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* -4.0 (* a c))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 44.1178578555359,
    "avg_bits_err_output": 0.23493214375685068,
    "avg_bits_err_improve": 43.88292571177905,
    "time": 21929.547607421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.33352993524726,
    "avg_bits_err_output": 34.33352993524726,
    "avg_bits_err_improve": 0,
    "time": 22562.697509765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (- (* (cos (- lambda1 lambda2)) (cos phi2)) (cos phi1)) 0.0) (* (- (cos phi1) (* (cos (- lambda1 lambda2)) (cos phi2))) (/ (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)) (- (cos phi1) (* (cos (- lambda1 lambda2)) (cos phi2))))) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.8863062573141274,
    "avg_bits_err_output": 0.8942017085677845,
    "avg_bits_err_improve": -0.007895451253657093,
    "time": 30929.681640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (log (+ 1.0 (expm1 (- 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 29,
    "avg_bits_err_input": 29.548493054417236,
    "avg_bits_err_output": 29.51749826209831,
    "avg_bits_err_improve": 0.03099479231892488,
    "time": 22341.40380859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ 1.0 (exp (+ x x))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.16080974381946,
    "avg_bits_err_output": 0.6789080828133115,
    "avg_bits_err_improve": 57.481901661006155,
    "time": 19185.140869140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 57.911683130642594,
    "avg_bits_err_output": 0.05082312031259015,
    "avg_bits_err_improve": 57.86086001033,
    "time": 8385.2998046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.00827124062518029,
    "avg_bits_err_output": 0.00827124062518029,
    "avg_bits_err_improve": 0,
    "time": 1846.7021484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.5055,
    "avg_bits_err_output": 31.5055,
    "avg_bits_err_improve": 0,
    "time": 4755.3701171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (/ x (/ (- 1.0 x) 2.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.581499101870136,
    "avg_bits_err_output": 0.018740601562950723,
    "avg_bits_err_improve": 58.56275850030718,
    "time": 21435.70703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0595,
    "avg_bits_err_output": 0.05907312031259015,
    "avg_bits_err_improve": 0.00042687968740984933,
    "time": 3601.96875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (/ (* ew (sin t)) (cos t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.13082312031259016,
    "avg_bits_err_output": 0.12882312031259016,
    "avg_bits_err_improve": 0.0020000000000000018,
    "time": 18668.712890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (* (tan t) (/ (- eh) ew))))) (* (sin t) (* eh (sin (atan (* (tan t) (/ (- eh) ew))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13344812031259015,
    "avg_bits_err_output": 0.13419812031259015,
    "avg_bits_err_improve": -0.0007500000000000007,
    "time": 14946.1005859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.331420605937446,
    "avg_bits_err_output": 3.889548600518053,
    "avg_bits_err_improve": 35.44187200541939,
    "time": 31234.262939453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* b (/ b a)) a) a)))",
    "output_parens": 6,
    "avg_bits_err_input": 13.897197625531357,
    "avg_bits_err_output": 0.014969360937770433,
    "avg_bits_err_improve": 13.882228264593586,
    "time": 7333.63818359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.15194354739338634,
    "avg_bits_err_output": 0.14974256349171874,
    "avg_bits_err_improve": 0.0022009839016675914,
    "time": 38267.65087890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.43019930029488,
    "avg_bits_err_output": 0.17350977500432688,
    "avg_bits_err_improve": 52.256689525290554,
    "time": 22508.2568359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.225461096610402,
    "avg_bits_err_output": 0.3500836484514728,
    "avg_bits_err_improve": 27.87537744815893,
    "time": 22291.4140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (* (* a 6.0) (/ c (- (- (- b) (+ (sqrt (fma b b (* a (* c -3.0)))) (sqrt (fma b b (* a (* c -3.0)))))) b))) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 30,
    "avg_bits_err_input": 44.135650546231574,
    "avg_bits_err_output": 0.24545582813311265,
    "avg_bits_err_improve": 43.89019471809846,
    "time": 33428.90185546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (- (sqrt (fma c (* a -3.0) (* b b))) b) a) 3.0)",
    "output_parens": 7,
    "avg_bits_err_input": 34.36338207535971,
    "avg_bits_err_output": 34.382926059206774,
    "avg_bits_err_improve": -0.019543983847064794,
    "time": 21215.307861328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (sin phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 15,
    "avg_bits_err_input": 12.574238166279743,
    "avg_bits_err_output": 12.574697616736092,
    "avg_bits_err_improve": -0.0004594504563488755,
    "time": 37409.524658203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 28.480170105057223,
    "avg_bits_err_output": 0.5084651304555159,
    "avg_bits_err_improve": 27.971704974601707,
    "time": 19434.92431640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (/ x (+ x (+ x 2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.0584472178141021,
    "avg_bits_err_improve": -0.0444472178141021,
    "time": 4104.893310546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (- 1.0 (/ x (+ -1.0 x))) (/ -1.0 (+ -1.0 x))) (+ 1.0 x))",
    "output_parens": 8,
    "avg_bits_err_input": 14.24985535555293,
    "avg_bits_err_output": 12.378409067052562,
    "avg_bits_err_improve": 1.8714462885003673,
    "time": 16200.8447265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* 2.0 (* (- (pow B 2.0) (* A (* C 4.0))) (* F (+ (- A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) C))))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.29320011853661,
    "avg_bits_err_output": 51.97656323572918,
    "avg_bits_err_improve": 0.31663688280742974,
    "time": 35271.507568359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* (atan (* (- (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI))",
    "output_parens": 12,
    "avg_bits_err_input": 29.835945267164455,
    "avg_bits_err_output": 29.835098066073115,
    "avg_bits_err_improve": 0.0008472010913394001,
    "time": 23113.199462890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 5e+294) (/ (sqrt (* 2.0 (* (* (- (pow B 2.0) (* (* 4.0 A) C)) F) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (- (pow B 2.0) (* (* 4.0 A) C)))) 0.0)",
    "output_parens": 44,
    "avg_bits_err_input": 52.51048112459206,
    "avg_bits_err_output": 50.90205290970585,
    "avg_bits_err_improve": 1.6084282148862101,
    "time": 38566.17822265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (/ (* (+ (cbrt (/ g (+ a a))) 2.0) (cbrt (/ g (+ a a)))) (+ (if (!= (+ 1.0 (cbrt (/ g (+ a a)))) 0.0) (/ (if (!= (+ (cbrt (/ g (+ a a))) 1.0) 0.0) (/ (* (cbrt (/ g (+ a a))) (* (- -1.0 (cbrt (/ g (+ a a)))) (- -1.0 (cbrt (/ g (+ a a)))))) (+ (cbrt (/ g (+ a a))) 1.0)) (* (cbrt (/ g (+ a a))) (+ (cbrt (/ g (+ a a))) 1.0))) (+ 1.0 (cbrt (/ g (+ a a))))) (cbrt (/ g (+ a a)))) 2.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 65,
    "avg_bits_err_input": 15.627804421622432,
    "avg_bits_err_output": 15.651427881042961,
    "avg_bits_err_improve": -0.023623459420528903,
    "time": 33451.271484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (+ g (sqrt (if (!= (* h h) 0.0) (fma h (- h) (* g g)) (fma h (- h) (* g g))))) 0.0) (/ (- (* (sqrt (if (!= (* h h) 0.0) (fma h (- h) (* g g)) (fma h (- h) (* g g)))) (sqrt (if (!= (* h h) 0.0) (fma h (- h) (* g g)) (fma h (- h) (* g g))))) (* g g)) (+ g (sqrt (if (!= (* h h) 0.0) (fma h (- h) (* g g)) (fma h (- h) (* g g)))))) (- (sqrt (if (!= (* h h) 0.0) (fma h (- h) (* g g)) (fma h (- h) (* g g)))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 72,
    "avg_bits_err_input": 36.08011519144055,
    "avg_bits_err_output": 36.040282014283605,
    "avg_bits_err_improve": 0.03983317715694312,
    "time": 19943.29833984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9912152265701634,
    "avg_bits_err_output": 0.9770968046888523,
    "avg_bits_err_improve": 0.014118421881311072,
    "time": 9155.58349609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(+ (/ (exp a) (* (+ (exp a) (exp b)) 4.0)) (/ (* (exp a) 0.75) (+ (exp a) (exp b))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6922712406251803,
    "avg_bits_err_output": 0.6938962406251803,
    "avg_bits_err_improve": -0.0016249999999999876,
    "time": 4956.263671875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (* a1 (/ a2 b1)) b2) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-283) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 4e+292) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.372823166249141,
    "avg_bits_err_output": 2.695288113610451,
    "avg_bits_err_improve": 8.67753505263869,
    "time": 8144.0419921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4780040635518175,
    "avg_bits_err_output": 0.442625,
    "avg_bits_err_improve": 0.035379063551817524,
    "time": 10600.45703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -5e+16) (log (if (!= (- 1.0 (+ (+ x (hypot 1.0 x)) -1.0)) 0.0) (/ (- 1.0 (* (if (!= (- x (+ (hypot 1.0 x) -1.0)) 0.0) (/ (fma (+ x (+ (hypot 1.0 x) -1.0)) (- x -1.0) (* (hypot 1.0 x) (- 1.0 (+ x (hypot 1.0 x))))) (- x (+ (hypot 1.0 x) -1.0))) (+ x (+ (hypot 1.0 x) -1.0))) (+ (+ x (hypot 1.0 x)) -1.0))) (- 1.0 (+ (+ x (hypot 1.0 x)) -1.0))) (+ x (hypot 1.0 x)))) (log1p (if (!= (- (- 1.0 x) (hypot 1.0 x)) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ (- (hypot 1.0 x) x) -1.0) 0.0) (* (+ 1.0 (- x (hypot 1.0 x))) (/ (+ x (+ (hypot 1.0 x) -1.0)) (+ 1.0 (- x (hypot 1.0 x))))) (+ x (+ (hypot 1.0 x) -1.0))))) (+ x (+ (hypot 1.0 x) -1.0)))))",
    "output_parens": 73,
    "avg_bits_err_input": 52.93568994831417,
    "avg_bits_err_output": 13.753151872828173,
    "avg_bits_err_improve": 39.18253807548599,
    "time": 19118.5771484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.77550359204577,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.77550359204577,
    "time": 2213.532958984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.013875,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 0,
    "time": 3023.105224609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1319.2412109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (fma (- 0.375 (* v 0.25)) (/ (* (* w r) (* w r)) (- 1.0 v)) 4.5))",
    "output_parens": 12,
    "avg_bits_err_input": 12.285871629202978,
    "avg_bits_err_output": 0.36795825219299233,
    "avg_bits_err_improve": 11.917913377009986,
    "time": 22255.415283203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (* x1 -6.0)) (+ (* (* x1 x1) (* (/ (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) (* (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (/ (* x1 2.0) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0))))))) (+ x1 x1)))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5128226024455851,
    "avg_bits_err_output": 0.2510476815709618,
    "avg_bits_err_improve": 0.2617749208746233,
    "time": 66868.23095703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.10776151392575,
    "avg_bits_err_output": 1.3643686092939336,
    "avg_bits_err_improve": 16.74339290463182,
    "time": 5823.234619140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2234789628874018,
    "avg_bits_err_output": 0.2234789628874018,
    "avg_bits_err_improve": 0,
    "time": 8961.3896484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0026981203125901448,
    "avg_bits_err_output": 0.0026981203125901448,
    "avg_bits_err_improve": 0,
    "time": 3435.591796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* PI (/ (- (/ 0.5 a) (/ 0.5 b)) (- b a))) (+ a b))",
    "output_parens": 8,
    "avg_bits_err_input": 14.28120578385956,
    "avg_bits_err_output": 0.27555996407521,
    "avg_bits_err_improve": 14.00564581978435,
    "time": 16212.753662109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (/ (+ 1.0 (/ 1.0 eps)) (exp (* (- 1.0 eps) x))) (/ (/ 1.0 eps) (exp (* x (+ 1.0 eps))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.59160663785604,
    "avg_bits_err_output": 24.879178023507894,
    "avg_bits_err_improve": 4.712428614348145,
    "time": 23869.616455078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.013625,
    "avg_bits_err_improve": 0,
    "time": 3910.173095703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.016375,
    "avg_bits_err_output": 0.016375,
    "avg_bits_err_improve": 0,
    "time": 10189.384033203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (+ (* (* (/ t (+ t 1.0)) (/ t (+ t 1.0))) 16.0) 3.0)) (+ 8.0 (* (* (/ t (+ t 1.0)) (/ t (+ t 1.0))) 16.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.048375,
    "avg_bits_err_output": 0.006125,
    "avg_bits_err_improve": 0.04225,
    "time": 11193.4599609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3080.086669921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7176.84521484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2725.91357421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8035933305167395,
    "avg_bits_err_output": 0.245375,
    "avg_bits_err_improve": 7.558218330516739,
    "time": 36943.251220703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(expm1 (expm1 (log1p (log1p (- (pow (+ x eps) 5.0) (pow x 5.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 7.0989590952705415,
    "avg_bits_err_output": 7.125674744144543,
    "avg_bits_err_improve": -0.026715648874001907,
    "time": 17639.323486328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(if (!= (+ (pow (+ x eps) 2.0) (pow x 2.0)) 0.0) (* (/ (/ (- (pow (+ x eps) 2.0) (pow x 2.0)) (+ (pow (+ x eps) 2.0) (pow x 2.0))) 2.0) (+ (pow (+ x eps) 2.0) (+ (pow (+ x eps) 2.0) (+ (pow x 2.0) (pow x 2.0))))) (- (pow (+ x eps) 2.0) (pow x 2.0)))",
    "output_parens": 30,
    "avg_bits_err_input": 15.626894356708267,
    "avg_bits_err_output": 15.628011419435394,
    "avg_bits_err_improve": -0.0011170627271273048,
    "time": 17165.6484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (exp (* 10.0 (* x x))) (- (if (!= (+ 1.0 (exp (log1p (exp (* 10.0 (* x x)))))) 0.0) (/ (- (if (!= (* (+ (exp (* 10.0 (* x x))) 1.0) (+ (exp (* 10.0 (* x x))) 1.0)) 0.0) (/ 1.0 (/ 1.0 (* (+ (exp (* 10.0 (* x x))) 1.0) (+ (exp (* 10.0 (* x x))) 1.0)))) (* (+ (exp (* 10.0 (* x x))) 1.0) (+ (exp (* 10.0 (* x x))) 1.0))) 1.0) (+ 1.0 (exp (log1p (exp (* 10.0 (* x x))))))) (exp (* 10.0 (* x x)))) (* (expm1 (log1p (exp (* 10.0 (* x x))))) (cos x))))",
    "output_parens": 62,
    "avg_bits_err_input": 3.555339469037401,
    "avg_bits_err_output": 3.5602781014068343,
    "avg_bits_err_improve": -0.004938632369433371,
    "time": 25820.103759765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 14.8233887960941,
    "avg_bits_err_output": 14.8233887960941,
    "avg_bits_err_improve": 0,
    "time": 12066.91357421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.17150046941011,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.17150046941011,
    "time": 5524.173095703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.086585328122624,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.08633532812262,
    "time": 4452.2158203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.24675,
    "avg_bits_err_improve": 63.75325,
    "time": 18789.351806640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325163339247,
    "avg_bits_err_output": 0.3945,
    "avg_bits_err_improve": 61.44875163339247,
    "time": 8419.126953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (if (!= (- (sqrt (fma c (* a -4.0) (* b b))) b) 0.0) (* (/ c (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a -4.0)) (+ b (sqrt (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.79028626161961,
    "avg_bits_err_output": 21.693468349960572,
    "avg_bits_err_improve": 12.096817911659041,
    "time": 21621.622802734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.33352993524726,
    "avg_bits_err_output": 34.33352993524726,
    "avg_bits_err_improve": 0,
    "time": 23853.260986328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2356.089111328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.379538544695365,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 39.369913544695365,
    "time": 3668.611328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(* (- x y) (/ (+ x y) (fma y y (* x x))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.832435837777357,
    "avg_bits_err_output": 20.063194656088438,
    "avg_bits_err_improve": -0.23075881831108092,
    "time": 4170.525634765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (if (!= b 0.0) (+ (+ (+ b c) (+ d a)) (/ 0.0 b)) (+ a (+ b (+ c d)))) 2.0)",
    "output_parens": 11,
    "avg_bits_err_input": 3.7066968622617615,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.7066968622617615,
    "time": 13642.74462890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.039,
    "time": 7411.298583984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (+ (* b b) (* b a)) (* a (+ a b)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.020844360937770434,
    "avg_bits_err_output": 0.017125,
    "avg_bits_err_improve": 0.003719360937770432,
    "time": 6399.732177734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.016625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.016,
    "time": 3414.162109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.000375,
    "time": 1941.185302734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ b (+ d a)) (+ c e))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4018659781302286,
    "avg_bits_err_output": 0.24675,
    "avg_bits_err_improve": 0.15511597813022862,
    "time": 6412.82861328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(- 1.0 (cos x))",
    "output_parens": 2,
    "avg_bits_err_input": 30.15436374729859,
    "avg_bits_err_output": 30.15436374729859,
    "avg_bits_err_improve": 0,
    "time": 6945.965576171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (sqrt (- (* x x) eps)))",
    "output_parens": 4,
    "avg_bits_err_input": 24.62497337338717,
    "avg_bits_err_output": 24.62497337338717,
    "avg_bits_err_improve": 0,
    "time": 3024.275634765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (- (tan x))) 0.0) (/ (/ (/ (- (* (sin x) (+ x x)) (* x (+ x x))) (- (tan x))) (* (tan x) -2.0)) (log1p (expm1 (/ (- x) (tan x))))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 27,
    "avg_bits_err_input": 29.982081294775853,
    "avg_bits_err_output": 30.00146230427232,
    "avg_bits_err_improve": -0.019381009496466817,
    "time": 29908.764404296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00725,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.006625000000000001,
    "time": 1949.982666015625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= i 1.65e+99) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -100.0 (/ i n))))",
    "output_parens": 16,
    "avg_bits_err_input": 47.579275910185075,
    "avg_bits_err_output": 14.610994557696756,
    "avg_bits_err_improve": 32.96828135248832,
    "time": 23998.4755859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) -1e+287) (+ (* c (/ a (fma d d (* c c)))) (* b (/ d (fma d d (* c c))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 1e+237) (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (+ (* (/ b (fma d d (* c c))) d) (* a (/ c (fma c c (* d d)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 26.56655196064843,
    "avg_bits_err_output": 23.588445799376498,
    "avg_bits_err_improve": 2.9781061612719313,
    "time": 13007.352294921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d))))) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))))",
    "output_parens": 26,
    "avg_bits_err_input": 25.48909648430748,
    "avg_bits_err_output": 24.072471484307492,
    "avg_bits_err_improve": 1.4166249999999891,
    "time": 11875.14599609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.037875,
    "avg_bits_err_output": 0.020860521314888556,
    "avg_bits_err_improve": 0.017014478685111443,
    "time": 9148.091552734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (log1p (expm1 (* (* uy 2.0) PI)))) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.770385221272825,
    "avg_bits_err_output": 12.570778093277873,
    "avg_bits_err_improve": 1.1996071279949518,
    "time": 31484.360107421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.808443394040077,
    "avg_bits_err_output": 12.596362490219526,
    "avg_bits_err_improve": 1.2120809038205511,
    "time": 33858.846435546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* ux (- maxCos (* ux maxCos))) zi))",
    "output_parens": 34,
    "avg_bits_err_input": 0.33048018785438493,
    "avg_bits_err_output": 0.33093819888669235,
    "avg_bits_err_improve": -0.0004580110323074149,
    "time": 52744.450439453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (log (+ 1.0 (expm1 (cos (atan (* (/ alphay alphax) (tan (fma 2.0 (* PI u1) (* PI 0.5))))))))) (log (+ 1.0 (expm1 (cos (atan (* (/ alphay alphax) (tan (fma 2.0 (* PI u1) (* PI 0.5)))))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 54,
    "avg_bits_err_input": 0.19787968083262134,
    "avg_bits_err_output": 0.1988928610231905,
    "avg_bits_err_improve": -0.001013180190569174,
    "time": 45460.490966796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (/ (/ u1 u1) (- (/ 1.0 u1) (/ u1 u1))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.5395669897023756,
    "avg_bits_err_output": 0.5571212956877973,
    "avg_bits_err_improve": -0.017554305985421736,
    "time": 22321.99755859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (log (+ 1.0 (expm1 (* 6.28318530718 u2))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.3182523052562121,
    "avg_bits_err_output": 0.3221298361744132,
    "avg_bits_err_improve": -0.0038775309182010886,
    "time": 19950.221435546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (- (+ (/ PI s) 1.0) 1.0)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.3291006081264169,
    "avg_bits_err_output": 0.33051478035035736,
    "avg_bits_err_improve": -0.0014141722239404686,
    "time": 40767.039794921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.06253090445323171,
    "avg_bits_err_output": 0.06253090445323171,
    "avg_bits_err_improve": 0,
    "time": 10863.315185546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (/ (- (fabs x)) s)) (* (+ (exp (/ (- (fabs x)) s)) 1.0) (+ (* s (exp (/ (fabs x) (- s)))) s)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.1602904943487237,
    "avg_bits_err_output": 0.1475920522684732,
    "avg_bits_err_improve": 0.012698442080250505,
    "time": 12066.1083984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (if (!= (/ (sin (* x PI)) (* PI (+ x x))) 0.0) (/ (+ (* (/ (sin (* x PI)) (* PI (+ x x))) (/ (sin (* x PI)) (* PI (+ x x)))) (* (/ (sin (* x PI)) (* PI (+ x x))) (/ (sin (* x PI)) (* PI (+ x x))))) (/ (sin (* x PI)) (* PI (+ x x)))) (/ (sin (* x PI)) (* x PI))))",
    "output_parens": 47,
    "avg_bits_err_input": 0.6678888130575138,
    "avg_bits_err_output": 0.669513413801962,
    "avg_bits_err_improve": -0.0016246007444482569,
    "time": 21510.404052734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.151137259172071,
    "avg_bits_err_output": 0.1448124751468385,
    "avg_bits_err_improve": 0.006324784025232483,
    "time": 16536.246826171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (+ (fma (/ (- sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) sinTheta_O (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 2.5843473848796834,
    "avg_bits_err_output": 2.581149061054511,
    "avg_bits_err_improve": 0.0031983238251722668,
    "time": 27186.1025390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ 1.0 v) (* (/ (/ 0.5 v) (exp (* sinTheta_O (/ sinTheta_i v)))) (/ cosTheta_i (sinh (/ 1.0 v))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45646508831999544,
    "avg_bits_err_output": 0.35514865701277765,
    "avg_bits_err_improve": 0.10131643130721779,
    "time": 27358.658935546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (* (exp (+ (/ (- -1.0 (* sinTheta_i sinTheta_O)) v) (* cosTheta_i (/ cosTheta_O v)))) (exp 0.6931)) (/ 0.5 v))",
    "output_parens": 11,
    "avg_bits_err_input": 0.1017916211995896,
    "avg_bits_err_output": 0.09881438715535655,
    "avg_bits_err_improve": 0.002977234044233043,
    "time": 11678.787353515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (- 2.0 (* alpha (+ alpha alpha))) (- 2.0 (* alpha (+ alpha alpha)))) (- (* PI (* (* 4.0 (log (* alpha alpha))) (fma cosTheta (- (* alpha (* alpha cosTheta)) cosTheta) 1.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.47458210654791216,
    "avg_bits_err_output": 0.47459150498496144,
    "avg_bits_err_improve": -9.398437049279451e-06,
    "time": 25416.555419921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* 3.0 (* s (/ (- (- 1.0 (log (/ 1.0 (if (!= 1.3333333333333333 0.0) (/ (+ 1.7777777777777777 (* u -1.7777777777777777)) 1.3333333333333333) (fma u -1.3333333333333333 1.3333333333333333))))) (+ 1.0 (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))))) -2.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.3262383922843086,
    "avg_bits_err_output": 1.2606898505435682,
    "avg_bits_err_improve": 0.06554854174074043,
    "time": 25172.126708984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (if (!= (log (/ 1.0 (+ 1.0 (* u -4.0)))) 0.0) (/ 1.0 (/ (/ (/ 2.0 (log (/ 1.0 (fma u -4.0 1.0)))) (log (/ 1.0 (fma u -4.0 1.0)))) (/ 2.0 (log (/ 1.0 (fma u -4.0 1.0)))))) (log (/ 1.0 (+ 1.0 (* u -4.0))))))",
    "output_parens": 25,
    "avg_bits_err_input": 12.264057598280885,
    "avg_bits_err_output": 12.274265592163887,
    "avg_bits_err_improve": -0.010207993883001976,
    "time": 28143.942626953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ 0.125 (* PI s))) (* 0.75 (* (exp (/ (/ r -6.0) s)) (/ (exp (/ r (* -6.0 s))) (* s (* PI 6.0)))))) r)",
    "output_parens": 19,
    "avg_bits_err_input": 0.1294345796303651,
    "avg_bits_err_output": 0.11952043233949554,
    "avg_bits_err_improve": 0.009914147290869549,
    "time": 22746.677001953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma n0_i (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) (* (sin (* u normAngle)) (/ n1_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.946681081244515,
    "avg_bits_err_output": 0.820749088473781,
    "avg_bits_err_improve": 0.12593199277073397,
    "time": 28931.231201171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (- (+ c (/ (* (exp (* cosTheta (- cosTheta))) (sqrt (- 1.0 (+ cosTheta cosTheta)))) (* cosTheta (sqrt PI)))) -1.0))",
    "output_parens": 13,
    "avg_bits_err_input": 0.7156405514643401,
    "avg_bits_err_output": 0.4958217746738127,
    "avg_bits_err_improve": 0.21981877679052741,
    "time": 21384.396484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (if (!= (sin (* 2.0 (* PI u2))) 0.0) (/ 1.0 (/ 1.0 (sin (* 2.0 (* PI u2))))) (sin (* 2.0 (* PI u2)))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.541846383590148,
    "avg_bits_err_output": 13.545051616283839,
    "avg_bits_err_improve": -0.003205232693691329,
    "time": 24189.182861328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (pow (- (log1p (- u1))) 0.5) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.591794425307109,
    "avg_bits_err_output": 0.295643160843486,
    "avg_bits_err_improve": 13.296151264463623,
    "time": 21466.11962890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- (log1p (- u0))) (* alpha alpha))",
    "output_parens": 5,
    "avg_bits_err_input": 14.192672930035418,
    "avg_bits_err_output": 0.32731616562662263,
    "avg_bits_err_improve": 13.865356764408794,
    "time": 18988.11376953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (if (!= (/ cos2phi (* alphax (+ alphax alphax))) 0.0) (* (/ (+ cos2phi cos2phi) (/ cos2phi alphax)) (/ cos2phi (* (* alphax alphax) (+ alphax alphax)))) (/ cos2phi (* alphax alphax))) (/ sin2phi (* alphay alphay))))",
    "output_parens": 22,
    "avg_bits_err_input": 12.561665502677593,
    "avg_bits_err_output": 12.563904200936618,
    "avg_bits_err_improve": -0.002238698259024119,
    "time": 16613.41796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.87330777360657,
    "avg_bits_err_output": 12.626290315381038,
    "avg_bits_err_improve": 4.247017458225532,
    "time": 22316.455810546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.22167019050571782,
    "avg_bits_err_output": 0.15668797821724945,
    "avg_bits_err_improve": 0.06498221228846837,
    "time": 14587.62158203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 14.174091690595713,
    "avg_bits_err_output": 11.00226566246667,
    "avg_bits_err_improve": 3.1718260281290434,
    "time": 20176.585205078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f 4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) 4.0))) (exp (* PI (/ f 4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.25))",
    "output_parens": 31,
    "avg_bits_err_input": 61.491432612763994,
    "avg_bits_err_output": 2.093518170184712,
    "avg_bits_err_improve": 59.39791444257928,
    "time": 53221.0263671875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* (sqrt 2.0) t) (sqrt (+ (* (/ (- x -1.0) (+ x -1.0)) (* 2.0 (* t t))) (- (* l (- (/ (* x l) (+ -1.0 x)) l)) (* l (/ (- l) (+ -1.0 x)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 42.840952807663975,
    "avg_bits_err_output": 37.09146505657874,
    "avg_bits_err_improve": 5.749487751085233,
    "time": 33905.959716796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.980989365904106,
    "avg_bits_err_output": 3.980989365904106,
    "avg_bits_err_improve": 0,
    "time": 29511.04736328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (- (exp (log1p (sqrt (- (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0)))) 1.0)) 0.5)))",
    "output_parens": 18,
    "avg_bits_err_input": 1.094125,
    "avg_bits_err_output": 1.097,
    "avg_bits_err_improve": -0.002874999999999961,
    "time": 11900.405029296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (if (!= (pow (/ t l) 2.0) 0.0) (/ 1.0 (/ 1.0 (pow (/ t l) 2.0))) (pow (/ t l) 2.0)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 10.622328598079049,
    "avg_bits_err_output": 10.622255477766458,
    "avg_bits_err_improve": 7.312031259054663e-05,
    "time": 13858.476318359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 0.0) (sqrt (* (* 2.0 n) (* U (- t (+ (* (pow (/ l Om) 2.0) (* n (- U U*))) (* 2.0 (* l (/ l Om)))))))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 2e+302) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) INFINITY) (sqrt (- (* (* n (* 2.0 U)) (- t (* (/ l Om) (* 2.0 l)))) (* (pow (/ l Om) 2.0) (* n (* (- U U*) (* U (* n 2.0))))))) (sqrt (* (* 2.0 n) (if (!= (* U (- t (* (pow (/ l Om) 2.0) (* n (- U U*))))) 0.0) (+ (/ 1.0 (/ 1.0 (* U (- t (* (pow (/ l Om) 2.0) (* n (- U U*))))))) (* (- t (* n (* (pow (/ l Om) 2.0) (- U U*)))) (/ (* (/ l Om) (* l (* U -2.0))) (- t (* n (* (pow (/ l Om) 2.0) (- U U*))))))) (* U (- t (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (* l (/ l Om))))))))))))",
    "output_parens": 140,
    "avg_bits_err_input": 34.67842107000908,
    "avg_bits_err_output": 27.99305196334235,
    "avg_bits_err_improve": 6.68536910666673,
    "time": 43533.093017578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (sin k) l) (* (pow (/ k t) 2.0) (* (tan k) (/ (pow t 3.0) l)))))",
    "output_parens": 11,
    "avg_bits_err_input": 47.336429510506825,
    "avg_bits_err_output": 36.41316417155506,
    "avg_bits_err_improve": 10.923265338951765,
    "time": 42660.340576171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* (* (pow t 3.0) (tan k)) (* (sin k) (/ (+ 2.0 (pow (/ k t) 2.0)) l))) l))",
    "output_parens": 12,
    "avg_bits_err_input": 32.277784931514574,
    "avg_bits_err_output": 27.32037625870077,
    "avg_bits_err_improve": 4.957408672813806,
    "time": 18880.98486328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (* (cos th) (fma a1 a1 (* a2 a2))) (exp (- (* 0.5 (log 2.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5807400406482597,
    "avg_bits_err_output": 0.5155578968914079,
    "avg_bits_err_improve": 0.06518214375685183,
    "time": 22321.940185546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(+ (/ (* (pow (* 2.0 (* PI n)) (fma k -0.5 0.5)) 0.25) (sqrt k)) (/ (* (- (/ (- (pow (* 2.0 (* PI n)) (fma k -0.5 0.5))) 0.16666666666666666)) 0.5) (* 2.0 (* 2.0 (sqrt k)))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.5224056608305663,
    "avg_bits_err_output": 0.5011035955772128,
    "avg_bits_err_improve": 0.02130206525335343,
    "time": 22539.28173828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (- (exp (+ l l)) (exp (* l -2.0))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 25,
    "avg_bits_err_input": 17.31369576187562,
    "avg_bits_err_output": 17.36100127496401,
    "avg_bits_err_improve": -0.04730551308838926,
    "time": 28804.242431640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (if (!= (* K (/ (+ m n) 2.0)) 0.0) (/ 1.0 (/ 1.0 (* K (/ (+ m n) 2.0)))) (* K (/ (+ m n) 2.0))) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 26,
    "avg_bits_err_input": 15.274467448716402,
    "avg_bits_err_output": 15.247803485865886,
    "avg_bits_err_improve": 0.026663962850516754,
    "time": 23737.9580078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.00421936093777,
    "avg_bits_err_output": 18.00421936093777,
    "avg_bits_err_improve": 0,
    "time": 28126.37255859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (* (/ (pow (* D (/ (/ M 2.0) d)) 2.0) l) h))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.127842899506629,
    "avg_bits_err_output": 10.687511784471342,
    "avg_bits_err_improve": 3.4403311150352867,
    "time": 26583.255859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+186) (* c0 (sqrt (/ (/ A l) V))) (if (<= (* V l) -5e-98) (* (sqrt (* A (/ (/ 2.0 V) (+ l l)))) c0) (if (<= (* V l) 1e-318) (* c0 (sqrt (* (/ A V) (/ 1.0 l)))) (if (<= (* V l) 2e+247) (* c0 (sqrt (if (!= (/ A (* l V)) 0.0) (/ 1.0 (/ 1.0 (/ A (* l V)))) (/ A (* l V))))) (* c0 (sqrt (/ (* A (/ 2.0 V)) (+ l l))))))))",
    "output_parens": 45,
    "avg_bits_err_input": 19.331082942441245,
    "avg_bits_err_output": 15.096920025232986,
    "avg_bits_err_improve": 4.234162917208259,
    "time": 19294.482666015625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= h -4e-233) (* c0 (/ (+ (* d (* c0 (/ (/ d D) (* D (* h w))))) (sqrt (* (fma d (* c0 (/ (/ d D) (* D (* h w)))) M) (- (* d (* c0 (/ (/ d D) (* D (* h w))))) M)))) (+ w w))) (if (<= h 9.5e+55) (+ (* (/ (* d (* (/ c0 D) (/ d (* w D)))) h) (/ c0 (* w 2.0))) (* (sqrt (* (fma d (/ (* c0 (/ (/ d h) D)) (* w D)) M) (- (/ (* d (* (/ c0 D) (/ d (* w D)))) h) M))) (/ c0 (* w 2.0)))) (* c0 (/ (+ (* d (* c0 (/ (/ d D) (* D (* h w))))) (sqrt (* (fma d (* c0 (/ (/ d D) (* D (* h w)))) M) (- (* d (* c0 (/ (/ d D) (* D (* h w))))) M)))) (+ w w)))))",
    "output_parens": 82,
    "avg_bits_err_input": 59.43901740849568,
    "avg_bits_err_output": 55.25759070832483,
    "avg_bits_err_improve": 4.181426700170853,
    "time": 42087.8076171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(* (sqrt (/ d l)) (- (sqrt (/ d h)) (/ (* (- (pow (/ (* D M) (+ d d)) 2.0)) (* (* 0.5 h) (sqrt (/ d h)))) (- l))))",
    "output_parens": 18,
    "avg_bits_err_input": 26.404284773602452,
    "avg_bits_err_output": 24.606333399101228,
    "avg_bits_err_improve": 1.797951374501224,
    "time": 40116.349365234375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (+ (/ -0.25 (hypot 1.0 x)) (+ (/ -0.25 (hypot 1.0 x)) 0.5)) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 24,
    "avg_bits_err_input": 15.707598007090736,
    "avg_bits_err_output": 15.219400626217542,
    "avg_bits_err_improve": 0.48819738087319386,
    "time": 17403.79248046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9818340531677464,
    "avg_bits_err_output": 0.01064624062518029,
    "avg_bits_err_improve": 0.9711878125425661,
    "time": 3727.3076171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* v (* v 5.0))) PI) (sqrt (- 2.0 (* v (* v 6.0))))) (* (fma v v -1.0) (- t)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.44198733279738894,
    "avg_bits_err_output": 0.11134456445035253,
    "avg_bits_err_improve": 0.33064276834703643,
    "time": 12003.677490234375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(fma (/ (sqrt 2.0) 4.0) (- (sqrt (+ 1.0 (* (* v v) -3.0))) (* (* v v) (sqrt (+ 1.0 (* (* v v) -3.0))))) 0.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.01320366957750995,
    "avg_bits_err_output": 0.01189624062518029,
    "avg_bits_err_improve": 0.0013074289523296607,
    "time": 8825.083984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5152070115660735,
    "avg_bits_err_output": 0.5152070115660735,
    "avg_bits_err_improve": 0,
    "time": 10978.6591796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* (pow k m) (/ a (- (* k (+ k 10.0)) -1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 1.9546565265742808,
    "avg_bits_err_output": 1.9519065265742808,
    "avg_bits_err_improve": 0.00275000000000003,
    "time": 20446.2216796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ EDonor (+ Vef mu)) Ec) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.021912583770241124,
    "avg_bits_err_output": 0.021912583770241124,
    "avg_bits_err_improve": 0,
    "time": 8714.558837890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (fma a a (* b b)) 2.0) (* b (* b 4.0))) -1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.18203655590132128,
    "avg_bits_err_output": 0.18176531527614098,
    "avg_bits_err_improve": 0.00027124062518030234,
    "time": 15868.326171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.18997040104138205,
    "avg_bits_err_output": 0.18997040104138205,
    "avg_bits_err_improve": 0,
    "time": 21857.2470703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18842033202660644,
    "avg_bits_err_output": 0.18842033202660644,
    "avg_bits_err_improve": 0,
    "time": 4820.76708984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (if (!= (* 4.0 (* p p)) 0.0) (+ (* (* x x) (/ (/ 1.0 (/ 1.0 p)) p)) (+ (* (* p p) (* 4.0 (/ (/ 1.0 (/ 1.0 p)) p))) 0.0)) (fma 4.0 (* p p) (* x x))))))))",
    "output_parens": 25,
    "avg_bits_err_input": 13.208008860755024,
    "avg_bits_err_output": 13.214552492748707,
    "avg_bits_err_improve": -0.006543631993682908,
    "time": 16507.5009765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.59321119733226,
    "avg_bits_err_output": 0.056875,
    "avg_bits_err_improve": 40.53633619733226,
    "time": 10455.020263671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (tan x)))",
    "output_parens": 5,
    "avg_bits_err_input": 31.68612750779363,
    "avg_bits_err_output": 31.68612750779363,
    "avg_bits_err_improve": 0,
    "time": 16105.9736328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (fma b_2 b_2 (* a (- c)))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 33.730158327203675,
    "avg_bits_err_output": 33.731047360449196,
    "avg_bits_err_improve": -0.0008890332455209204,
    "time": 13586.0810546875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 33.53854291580848,
    "avg_bits_err_output": 33.53854291580848,
    "avg_bits_err_improve": 0,
    "time": 14130.16845703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.106342939284794,
    "avg_bits_err_output": 30.2972682547755,
    "avg_bits_err_improve": 0.8090746845092944,
    "time": 16211.20263671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (<= x 1.0) (if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (/ (- 0.0 (expm1 (* (/ 1.0 n) (+ (log x) (log x))))) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (/ (if (!= (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n))) 0.0) (/ (if (!= (+ (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (log x) (+ (log x) (+ (log x) (log x)))) n))) 0.0) (/ (fma (exp (/ (+ (+ (log1p x) (log1p x)) (+ (log1p x) (log1p x))) n)) (exp (/ (+ (+ (log1p x) (log1p x)) (+ (log1p x) (log1p x))) n)) (- (exp (/ (+ (+ (+ (log x) (log x)) (+ (log x) (log x))) (+ (+ (log x) (log x)) (+ (log x) (log x)))) n)))) (+ (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (log x) (+ (log x) (+ (log x) (log x)))) n)))) (- (exp (/ (+ (log1p x) (+ (log1p x) (+ (log1p x) (log1p x)))) n)) (exp (/ (+ (log x) (+ (log x) (+ (log x) (log x)))) n)))) (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n)))) (- (exp (/ (+ (log1p x) (log1p x)) n)) (* (pow x (/ 1.0 n)) (pow x (/ 1.0 n))))) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))))",
    "output_parens": 182,
    "avg_bits_err_input": 32.4629577493785,
    "avg_bits_err_output": 12.068524754066868,
    "avg_bits_err_improve": 20.394432995311636,
    "time": 27737.280029296875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (- (log1p N) (- (log N))) 0.0) (fma (/ (log N) (- (- (log N)) (log1p N))) (log N) (/ (* (log1p N) (log1p N)) (+ (log N) (log1p N)))) (- (log1p N) (log N)))",
    "output_parens": 24,
    "avg_bits_err_input": 29.500741789756933,
    "avg_bits_err_output": 29.513878357504613,
    "avg_bits_err_improve": -0.01313656774767935,
    "time": 12907.546630859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (/ (/ -1.0 x) (- -1.0 x)))",
    "output_parens": 4,
    "avg_bits_err_input": 14.328016796907551,
    "avg_bits_err_output": 0.070125,
    "avg_bits_err_improve": 14.25789179690755,
    "time": 13060.605712890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (!= (cos x) 0.0) (/ (if (!= (* (cos x) (cos x)) 0.0) (/ (fma (* (cos x) (cos x)) (* (cos (+ x eps)) (cos x)) (* (* (cos x) (log (+ 1.0 (if (!= (- (exp (* (cos x) (cos x))) -1.0) 0.0) (/ (fma (exp (* (cos x) (cos x))) (exp (* (cos x) (cos x))) -1.0) (- (exp (* (cos x) (cos x))) -1.0)) (expm1 (* (cos x) (cos x))))))) (- (cos x)))) (* (cos x) (cos x))) (* (cos x) (- (cos (+ x eps)) (cos x)))) (cos x)) (- (cos (+ x eps)) (cos x)))",
    "output_parens": 65,
    "avg_bits_err_input": 39.60068821796507,
    "avg_bits_err_output": 39.649430822625064,
    "avg_bits_err_improve": -0.04874260465999214,
    "time": 27678.48974609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.750049245808967,
    "avg_bits_err_output": 29.460877007382127,
    "avg_bits_err_improve": 0.2891722384268398,
    "time": 10492.9873046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 29.96797140621094,
    "avg_bits_err_output": 29.96797140621094,
    "avg_bits_err_improve": 0,
    "time": 25203.73681640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.70671116528833,
    "avg_bits_err_output": 33.70671116528833,
    "avg_bits_err_improve": 0,
    "time": 23053.759033203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (if (!= (- (* c (* a -4.0)) (* b b)) 0.0) (fma b (* b (* b (/ b (fma b b (* c (* a 4.0)))))) (* c (* a (* a (/ (* c -16.0) (fma c (* a 4.0) (* b b))))))) (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 28,
    "avg_bits_err_input": 33.13804826137772,
    "avg_bits_err_output": 31.857177407820203,
    "avg_bits_err_improve": 1.2808708535575164,
    "time": 23197.21923828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(if (!= (/ (if (!= (+ 1.0 (log1p (- x))) 0.0) (* (log1p (- x)) (/ (+ 1.0 (log1p (- x))) (+ 1.0 (log1p (- x))))) (log1p (- x))) (log1p x)) 0.0) (/ 1.0 (/ 1.0 (/ (if (!= (+ 1.0 (log1p (- x))) 0.0) (* (log1p (- x)) (/ (+ 1.0 (log1p (- x))) (+ 1.0 (log1p (- x))))) (log1p (- x))) (log1p x)))) (/ (if (!= (+ 1.0 (log1p (- x))) 0.0) (* (log1p (- x)) (/ (+ 1.0 (log1p (- x))) (+ 1.0 (log1p (- x))))) (log1p (- x))) (log1p x)))",
    "output_parens": 61,
    "avg_bits_err_input": 61.182643001630375,
    "avg_bits_err_output": 0.02927857187842551,
    "avg_bits_err_improve": 61.153364429751946,
    "time": 24111.515625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log1p n) (log n)) n)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 63.01021685974004,
    "avg_bits_err_output": 44.18695966562837,
    "avg_bits_err_improve": 18.82325719411167,
    "time": 15486.517822265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (exp (log1p (log (if (!= (/ -1.0 (+ 1.0 eps)) 0.0) (+ (/ (+ eps eps) (- -1.0 eps)) 1.0) (/ (- 1.0 eps) (+ 1.0 eps)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 58.60315345304578,
    "avg_bits_err_output": 58.58343757334008,
    "avg_bits_err_improve": 0.01971587970569999,
    "time": 14803.4873046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(if (!= (+ (/ 1.0 (tan x)) (/ -1.0 x)) 0.0) (/ 1.0 (/ 1.0 (if (!= (/ 1.0 x) 0.0) (/ (if (!= (/ -1.0 (/ (tan x) x)) 0.0) (/ (- (/ (/ 1.0 (/ (tan x) x)) (/ (tan x) x)) (/ 1.0 (/ (tan x) x))) (/ -1.0 (/ (tan x) x))) (+ 1.0 (/ -1.0 (/ (tan x) x)))) x) (+ (/ 1.0 x) (/ -1.0 (tan x)))))) (+ (/ 1.0 x) (/ -1.0 (tan x))))",
    "output_parens": 43,
    "avg_bits_err_input": 59.887347463261065,
    "avg_bits_err_output": 59.88150848602467,
    "avg_bits_err_improve": 0.005838977236393816,
    "time": 32555.53271484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.538691125731525,
    "avg_bits_err_output": 28.937452537852884,
    "avg_bits_err_improve": 31.60123858787864,
    "time": 26710.325439453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 40.86726586985108,
    "avg_bits_err_output": 0.5421156015629508,
    "avg_bits_err_improve": 40.325150268288134,
    "time": 6401.62841796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.64070708086842,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.639832080868416,
    "time": 3200.462890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.486760751671497,
    "avg_bits_err_output": 0.022180644893423293,
    "avg_bits_err_improve": 29.464580106778072,
    "time": 4828.8916015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (- (if (!= (+ 1.0 (exp x)) 0.0) (/ (expm1 (+ x x)) (- -1.0 (exp x))) (- (expm1 x))) (expm1 (- x))))",
    "output_parens": 15,
    "avg_bits_err_input": 29.683117156777303,
    "avg_bits_err_output": 28.7823596231056,
    "avg_bits_err_improve": 0.9007575336717046,
    "time": 20790.442626953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (+ (- -2.0 (* (- (/ 2.0 x) (/ 1.0 (+ x 1.0))) (- 1.0 x))) (- (/ 2.0 (/ x (+ x -1.0))) (/ (+ x -1.0) (+ x 1.0)))) (+ 2.0 (* -2.0 x))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 29,
    "avg_bits_err_input": 9.791196462515073,
    "avg_bits_err_output": 9.822918876078882,
    "avg_bits_err_improve": -0.031722413563809226,
    "time": 30374.414306640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(+ (/ (tan (+ x eps)) 2.0) (+ (/ (tan (+ x eps)) 4.0) (+ (/ (tan (+ x eps)) 8.0) (- (/ (tan (+ x eps)) 8.0) (tan x)))))",
    "output_parens": 17,
    "avg_bits_err_input": 37.32211213782556,
    "avg_bits_err_output": 37.43939277488692,
    "avg_bits_err_improve": -0.11728063706135572,
    "time": 20542.348876953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (if (!= (/ (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) 2.0) 0.0) (+ (/ (/ (+ (/ 0.5 (+ (sqrt (+ 1.0 x)) (sqrt x))) (/ 0.25 (+ (sqrt (+ 1.0 x)) (sqrt x)))) (+ (sqrt (+ 1.0 x)) (sqrt x))) (/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))) (/ 0.25 (+ (sqrt (+ 1.0 x)) (sqrt x)))) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x)))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 51,
    "avg_bits_err_input": 29.89520388300476,
    "avg_bits_err_output": 0.19503061937102628,
    "avg_bits_err_improve": 29.700173263633737,
    "time": 16717.017578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (if (!= (sin x) 0.0) (/ 1.0 (/ 1.0 (sin x))) (sin x)))",
    "output_parens": 10,
    "avg_bits_err_input": 37.076021656316286,
    "avg_bits_err_output": 37.10601285808738,
    "avg_bits_err_improve": -0.0299912017710966,
    "time": 20222.167724609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (+ 0.5 (/ (+ (/ -1.0 (sqrt x)) (/ 2.0 (sqrt (- x -1.0)))) (/ -2.0 (sqrt x)))) (sqrt x))",
    "output_parens": 12,
    "avg_bits_err_input": 19.768123257986957,
    "avg_bits_err_output": 19.770105158443926,
    "avg_bits_err_improve": -0.001981900456968333,
    "time": 13239.319091796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (- (atan (+ N 1.0)) (+ 1.0 (atan N))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 14.990133460485552,
    "avg_bits_err_output": 14.996060527837022,
    "avg_bits_err_improve": -0.005927067351469972,
    "time": 7296.712646484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.77134824367137,
    "avg_bits_err_output": 1.4313300565131444,
    "avg_bits_err_improve": 28.340018187158226,
    "time": 22706.57666015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07404492500144229,
    "avg_bits_err_output": 0.07404492500144229,
    "avg_bits_err_improve": 0,
    "time": 10888.36083984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a (* b -0.25)) (fma (+ b (+ b b)) a (* a b)))",
    "output_parens": 7,
    "avg_bits_err_input": 16.724698021241284,
    "avg_bits_err_output": 0.2901748125036056,
    "avg_bits_err_improve": 16.43452320873768,
    "time": 9915.28125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (/ angle 180.0)) 0.0) (* (/ PI (* PI (* (/ angle 180.0) (/ (/ 1.0 (/ angle 180.0)) PI)))) (/ angle 180.0)) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 20.318325708829597,
    "avg_bits_err_output": 20.32073789798344,
    "avg_bits_err_improve": -0.002412189153844224,
    "time": 37257.20361328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (fma (sin (* PI (/ angle 180.0))) (fma (pow a 2.0) -2.0 (* 2.0 (- (pow b 2.0) (pow a 2.0)))) (* (sin (* PI (/ angle 180.0))) (* 2.0 (pow a 2.0)))) (cos (* PI (/ angle 180.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 31.073264448467892,
    "avg_bits_err_output": 31.088968292498983,
    "avg_bits_err_improve": -0.015703844031090597,
    "time": 46051.155029296875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.21627943539432,
    "avg_bits_err_output": 20.21627943539432,
    "avg_bits_err_improve": 0,
    "time": 45146.094970703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17499060156295074,
    "avg_bits_err_output": 0.17353308281331128,
    "avg_bits_err_improve": 0.0014575187496394526,
    "time": 17803.31591796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.32144531176572927,
    "avg_bits_err_output": 0.31217223772641384,
    "avg_bits_err_improve": 0.009273074039315432,
    "time": 19675.1611328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (+ (/ (+ 1.0 (* (* e (cos v)) 2.0)) 2.0) -0.5)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.13386560156295074,
    "avg_bits_err_output": 0.13850244375108173,
    "avg_bits_err_improve": -0.004636842188130985,
    "time": 17726.058349609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2)))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.50614705770733,
    "avg_bits_err_output": 16.5045181690646,
    "avg_bits_err_improve": 0.001628888642731141,
    "time": 30762.270263671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.60920530351322,
    "avg_bits_err_output": 0.1655073312532451,
    "avg_bits_err_improve": 52.443697972259976,
    "time": 22948.4501953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 28.32917868863751,
    "avg_bits_err_output": 0.3457887234500303,
    "avg_bits_err_improve": 27.983389965187477,
    "time": 20690.605712890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* -4.0 (* a c))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 43.78874762707837,
    "avg_bits_err_output": 0.24211146719534216,
    "avg_bits_err_improve": 43.54663615988303,
    "time": 20283.069091796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.70310996181358,
    "avg_bits_err_output": 21.43010820029259,
    "avg_bits_err_improve": 12.273001761520991,
    "time": 21849.095947265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (* (cos phi2) (cos (- lambda1 lambda2))) 0.0) (/ (+ (* (cos phi2) (* (cos (- lambda1 lambda2)) (cos phi1))) (* (cos phi2) (* (cos phi2) (* (cos (- lambda1 lambda2)) (cos (- lambda1 lambda2)))))) (* (cos phi2) (cos (- lambda1 lambda2)))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1)))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.8872506754157247,
    "avg_bits_err_output": 0.9228709139004875,
    "avg_bits_err_improve": -0.03562023848476281,
    "time": 32751.495849609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (+ (/ (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))) (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0)))))) (/ -1.0 (+ 1.0 (/ -2.0 (- -1.0 (exp (* x -2.0))))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 32,
    "avg_bits_err_input": 29.361745493776258,
    "avg_bits_err_output": 29.330455696426405,
    "avg_bits_err_improve": 0.03128979734985293,
    "time": 22568.718017578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(if (<= (/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x)))) 0.01) (/ (- (expm1 x) (expm1 (- x))) (+ (exp x) (exp (- x)))) (- (/ (exp x) (+ (exp x) (exp (- x)))) (/ 1.0 (+ 1.0 (exp (+ x x))))))",
    "output_parens": 31,
    "avg_bits_err_input": 58.118687058443555,
    "avg_bits_err_output": 0.5960108786861461,
    "avg_bits_err_improve": 57.52267617975741,
    "time": 17737.541748046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.0167606326519,
    "avg_bits_err_output": 0.026698120312590144,
    "avg_bits_err_improve": 57.990062512339314,
    "time": 8186.984130859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007469360937770434,
    "avg_bits_err_output": 0.007469360937770434,
    "avg_bits_err_improve": 0,
    "time": 2566.571533203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.55375,
    "avg_bits_err_output": 31.55375,
    "avg_bits_err_improve": 0,
    "time": 5130.60302734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (* (/ 2.0 (- 1.0 x)) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 58.59061824405141,
    "avg_bits_err_output": 0.025636842188131018,
    "avg_bits_err_improve": 58.564981401863285,
    "time": 14806.297607421875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (* (+ 1.0 (sqrt (- 1.0 (* x x)))) (/ 1.0 x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.020625,
    "avg_bits_err_output": 0.020698120312590145,
    "avg_bits_err_improve": -7.312031259014418e-05,
    "time": 3612.478515625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13032312031259013,
    "avg_bits_err_output": 0.12921936093777042,
    "avg_bits_err_improve": 0.0011037593748197128,
    "time": 23747.184814453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (if (!= (cos (atan (* (tan t) (/ eh (- ew))))) 0.0) (/ 1.0 (/ 1.0 (cos (atan (* (tan t) (/ eh (- ew))))))) (cos (atan (* (tan t) (/ eh (- ew))))))) (* (sin t) (* eh (sin (atan (* (tan t) (/ (- eh) ew))))))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.12325,
    "avg_bits_err_output": 0.12481372187554088,
    "avg_bits_err_improve": -0.00156372187554088,
    "time": 21656.187255859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.03542395506298,
    "avg_bits_err_output": 3.6185957387935366,
    "avg_bits_err_improve": 35.416828216269444,
    "time": 25805.628173828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.14076196427245,
    "avg_bits_err_output": 0.009948120312590146,
    "avg_bits_err_improve": 14.13081384395986,
    "time": 7469.823974609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (if (!= (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) 0.0) (/ (/ 1.0 (/ 1.0 (sin phi1))) (/ 1.0 (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.15376049262704158,
    "avg_bits_err_output": 0.16901837428056948,
    "avg_bits_err_improve": -0.0152578816535279,
    "time": 37660.16552734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.643515077095074,
    "avg_bits_err_output": 0.17165601562950716,
    "avg_bits_err_improve": 52.471859061465565,
    "time": 23664.571533203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 28.449788997139287,
    "avg_bits_err_output": 0.3353684021901071,
    "avg_bits_err_improve": 28.11442059494918,
    "time": 24183.05126953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.86024444686531,
    "avg_bits_err_output": 0.2434185866104623,
    "avg_bits_err_improve": 43.61682586025485,
    "time": 21467.78662109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.75598930418483,
    "avg_bits_err_output": 33.75598930418483,
    "avg_bits_err_improve": 0,
    "time": 21714.830810546875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (sin phi1) (* (- (+ (cos (- lambda1 lambda2)) 1.0) 1.0) (cos phi2)))))",
    "output_parens": 17,
    "avg_bits_err_input": 12.83495008420797,
    "avg_bits_err_output": 12.840527848374268,
    "avg_bits_err_improve": -0.005577764166298849,
    "time": 35770.802490234375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.214774936467396,
    "avg_bits_err_output": 0.49859642205199795,
    "avg_bits_err_improve": 28.716178514415397,
    "time": 19847.450439453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01325,
    "avg_bits_err_output": 0.01325,
    "avg_bits_err_improve": 0,
    "time": 3536.513427734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (- 1.0 (/ x (+ x -1.0))) (- (/ 1.0 (+ x -1.0)))) (+ 1.0 x))",
    "output_parens": 9,
    "avg_bits_err_input": 14.2279152119211,
    "avg_bits_err_output": 12.375512878890982,
    "avg_bits_err_improve": 1.8524023330301187,
    "time": 18930.930908203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (- (pow B 2.0) (* 4.0 (* A C))) (* (* 2.0 F) (- A (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C))))) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.022102674683836,
    "avg_bits_err_output": 51.72809645661863,
    "avg_bits_err_improve": 0.2940062180652063,
    "time": 38602.3017578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 5.5e+155) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI)) 0.0)",
    "output_parens": 14,
    "avg_bits_err_input": 29.622284869091633,
    "avg_bits_err_output": 27.477120355032895,
    "avg_bits_err_improve": 2.145164514058738,
    "time": 25814.96630859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* 2.0 (* (- (pow B 2.0) (* A (* C 4.0))) (* F (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.20052644554488,
    "avg_bits_err_output": 51.88778535618678,
    "avg_bits_err_improve": 0.31274108935809863,
    "time": 40336.29443359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (* (cbrt (/ g (+ a a))) (+ (/ 2.0 (+ 4.0 (* (cbrt (/ g (+ a a))) 2.0))) (if (!= (* (/ (fma 2.0 (cbrt (/ g (+ a a))) 2.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0)) (/ (fma 2.0 (cbrt (/ g (+ a a))) 2.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0))) 0.0) (/ (fma (* (/ (fma 2.0 (cbrt (/ g (+ a a))) 2.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0)) (/ (fma 2.0 (cbrt (/ g (+ a a))) 2.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0))) (* (/ (fma 2.0 (cbrt (/ g (+ a a))) 2.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0)) (/ (fma 2.0 (cbrt (/ g (+ a a))) 2.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0))) (* (* (/ (fma 2.0 (cbrt (/ g (+ a a))) 2.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0)) (/ (fma 2.0 (cbrt (/ g (+ a a))) 2.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0))) (/ (/ (fma (cbrt (/ g (+ a a))) 4.0 4.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0)) (fma 2.0 (cbrt (/ g (+ a a))) 4.0)))) (* (/ (fma 2.0 (cbrt (/ g (+ a a))) 2.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0)) (/ (fma 2.0 (cbrt (/ g (+ a a))) 2.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0)))) (/ (fma 2.0 (cbrt (/ g (+ a a))) 2.0) (fma 2.0 (cbrt (/ g (+ a a))) 4.0))))) (cbrt (/ g (+ a a))))",
    "output_parens": 143,
    "avg_bits_err_input": 16.173155062949267,
    "avg_bits_err_output": 16.193113772316522,
    "avg_bits_err_improve": -0.019958709367255523,
    "time": 27316.577392578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 0.5 a) (if (!= g 0.0) (/ (* g (- g (- (sqrt (fma g g (* h (- h))))))) (- g)) (- (- g) (sqrt (fma g g (* h (- h)))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 36.10844214362376,
    "avg_bits_err_output": 36.00620809726551,
    "avg_bits_err_improve": 0.10223404635825517,
    "time": 19381.64111328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (log (if (!= (exp (cos (+ (/ (acos (/ (- g) h)) 3.0) (* PI 0.6666666666666666)))) 0.0) (/ 1.0 (/ 1.0 (exp (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))) (exp (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.990130264069442,
    "avg_bits_err_output": 0.03603858085322101,
    "avg_bits_err_improve": 0.9540916832162211,
    "time": 23444.4921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.6863101077719279,
    "avg_bits_err_output": 0.6863101077719279,
    "avg_bits_err_improve": 0,
    "time": 7450.35498046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-253) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+306) (/ (* a1 a2) (* b1 b2)) (/ (* a2 (/ a1 b2)) b1)))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.756077792918333,
    "avg_bits_err_output": 3.2266840985712935,
    "avg_bits_err_improve": 8.52939369434704,
    "time": 9978.929931640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4106678932626421,
    "avg_bits_err_output": 0.3514693609377705,
    "avg_bits_err_improve": 0.0591985323248716,
    "time": 9600.8701171875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -6.8e-9) (log1p (if (!= (hypot 1.0 x) 0.0) (- (* (+ (hypot 1.0 x) (+ x -1.0)) 0.5) (/ (- 1.0 (+ x (hypot 1.0 x))) 2.0)) (+ x (+ (hypot 1.0 x) -1.0)))) (log1p (+ x (+ (hypot 1.0 x) -1.0))))",
    "output_parens": 22,
    "avg_bits_err_input": 53.188717752877125,
    "avg_bits_err_output": 13.913463036277035,
    "avg_bits_err_improve": 39.27525471660009,
    "time": 15179.186767578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.688435062155849,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.688435062155849,
    "time": 2636.7783203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- (/ x (- -1.0 x)) (/ 1.0 (- -1.0 x))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.01525,
    "avg_bits_err_output": 0.015665241011860922,
    "avg_bits_err_improve": -0.0004152410118609222,
    "time": 3447.552734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1231.4638671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* r w) (* (/ (* r w) (- 1.0 v)) (- 0.375 (* v 0.25)))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 13.409354168210111,
    "avg_bits_err_output": 0.3157985289122435,
    "avg_bits_err_improve": 13.093555639297868,
    "time": 22720.460693359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0) (* x1 x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 0.5119075524366935,
    "avg_bits_err_output": 0.288585456933342,
    "avg_bits_err_improve": 0.22332209550335153,
    "time": 65837.27197265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= u -2e-19) (/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u)) (if (<= u 6.8e-62) (* (/ (/ t1 (+ t1 u)) (+ t1 u)) (- v)) (/ (* (/ v (+ t1 u)) (- t1)) (+ t1 u))))",
    "output_parens": 22,
    "avg_bits_err_input": 18.199758453382344,
    "avg_bits_err_output": 0.2998105221849815,
    "avg_bits_err_improve": 17.899947931197364,
    "time": 7290.681640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (/ (* x x) 7.751569170074954)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.24974869440854447,
    "avg_bits_err_output": 0.20294396125465514,
    "avg_bits_err_improve": 0.04680473315388933,
    "time": 7564.859619140625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002625,
    "avg_bits_err_output": 0.002625,
    "avg_bits_err_improve": 0,
    "time": 3077.96240234375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* (- (/ 0.5 (* b (- b a))) (/ 0.5 (* a (- b a)))) (- PI)) (+ a b))",
    "output_parens": 11,
    "avg_bits_err_input": 14.513709106071017,
    "avg_bits_err_output": 0.2847956781359976,
    "avg_bits_err_improve": 14.22891342793502,
    "time": 14838.640380859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (exp (- (fma eps x x))) (+ (/ (- -1.0 (/ 1.0 eps)) (exp (- x (* eps x)))) (/ (/ 1.0 eps) (exp (fma eps x x))))) 2.0)",
    "output_parens": 16,
    "avg_bits_err_input": 29.52543822715212,
    "avg_bits_err_output": 24.79575477210389,
    "avg_bits_err_improve": 4.729683455048228,
    "time": 24304.065673828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 0,
    "time": 3991.585205078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.017875,
    "avg_bits_err_output": 0.017875,
    "avg_bits_err_improve": 0,
    "time": 13888.1728515625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (* (* (/ t (+ t 1.0)) 4.0) (/ t (+ t 1.0))) -1.0) (+ 2.0 (* (/ t (+ t 1.0)) (* (/ t (+ t 1.0)) 4.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.047625,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 0.04,
    "time": 8702.9345703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3485.45751953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7386.9033203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2730.5751953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.856874630548388,
    "avg_bits_err_output": 0.2415,
    "avg_bits_err_improve": 7.615374630548388,
    "time": 35688.15087890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(if (!= (pow (+ x eps) 5.0) 0.0) (* (pow (+ x eps) 5.0) (if (!= (/ (pow x 5.0) (- (pow (+ x eps) 5.0))) 0.0) (/ (- (* (/ (pow x 5.0) (- (pow (+ x eps) 5.0))) (/ (pow x 5.0) (- (pow (+ x eps) 5.0)))) (* (/ (pow x 5.0) (- (pow (+ x eps) 5.0))) (/ (pow (+ x eps) 5.0) (- (pow (+ x eps) 5.0))))) (/ (pow x 5.0) (- (pow (+ x eps) 5.0)))) (/ (- (pow (+ x eps) 5.0) (pow x 5.0)) (pow (+ x eps) 5.0)))) (- (pow (+ x eps) 5.0) (pow x 5.0)))",
    "output_parens": 55,
    "avg_bits_err_input": 7.5660326112087155,
    "avg_bits_err_output": 7.566269212693917,
    "avg_bits_err_improve": -0.0002366014852013265,
    "time": 17410.697265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (if (!= (+ (pow x 2.0) 1.0) 0.0) (/ (* (pow x 2.0) (+ (pow x 2.0) 1.0)) (+ (pow x 2.0) 1.0)) (pow x 2.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 15.333745352421747,
    "avg_bits_err_output": 15.335033833881868,
    "avg_bits_err_improve": -0.0012884814601203942,
    "time": 15356.363037109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(fma (if (!= (exp (* 10.0 (* x x))) 0.0) (/ 1.0 (/ 1.0 (exp (* 10.0 (* x x))))) (exp (* 10.0 (* x x)))) (* 2.0 (cos x)) (if (!= (+ (exp (* 10.0 (* x x))) (/ (- 1.0 (cos x)) (exp (* x (* x -10.0))))) 0.0) (* (* (exp (* 10.0 (* x x))) (cos x)) (/ (- (* (exp (* 10.0 (* x x))) (+ (cos x) -1.0)) (exp (* 10.0 (* x x)))) (+ (exp (* 10.0 (* x x))) (/ (- 1.0 (cos x)) (exp (* x (* x -10.0))))))) (/ (- (cos x)) (exp (* x (* x -10.0))))))",
    "output_parens": 61,
    "avg_bits_err_input": 3.5732909029815776,
    "avg_bits_err_output": 3.152262529656161,
    "avg_bits_err_improve": 0.42102837332541654,
    "time": 18895.0126953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (/ (- x 0.0) x) (+ x (/ 1.0 x))) 0.0) (/ x (fma x x 1.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 14.903628770797948,
    "avg_bits_err_output": 0.09152124062518029,
    "avg_bits_err_improve": 14.812107530172767,
    "time": 8129.6552734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.26257073515229,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.26257073515229,
    "time": 4983.138427734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.62585231336359,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 38.625352313363585,
    "time": 4217.52587890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.295125,
    "avg_bits_err_improve": 63.704875,
    "time": 21416.493896484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.843251581151,
    "avg_bits_err_output": 0.3935,
    "avg_bits_err_improve": 61.449751581151,
    "time": 8266.016845703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (if (!= (- (* c (* a -4.0)) (* b b)) 0.0) (fma b (* b (* b (/ b (fma b b (* c (* a 4.0)))))) (* c (* a (* a (/ (* c -16.0) (fma c (* a 4.0) (* b b))))))) (fma c (* a -4.0) (* b b))))) -2.0) a)",
    "output_parens": 28,
    "avg_bits_err_input": 33.13804826137772,
    "avg_bits_err_output": 31.857177407820203,
    "avg_bits_err_improve": 1.2808708535575164,
    "time": 25645.975341796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.70310996181358,
    "avg_bits_err_output": 21.43010820029259,
    "avg_bits_err_improve": 12.273001761520991,
    "time": 24440.241943359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2289.214599609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.778903636442365,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 39.76665363644236,
    "time": 3989.005859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(- (/ (* x (+ x y)) (fma y y (* x x))) (* (/ (+ y x) (fma y y (* x x))) y))",
    "output_parens": 11,
    "avg_bits_err_input": 20.43269442652045,
    "avg_bits_err_output": 20.386496452484796,
    "avg_bits_err_improve": 0.04619797403565329,
    "time": 7914.939697265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6682673616342902,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6682673616342902,
    "time": 9955.341796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(+ (* a (+ b c)) (* a d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.038,
    "avg_bits_err_output": 0.040125,
    "avg_bits_err_improve": -0.002125000000000002,
    "time": 6256.8828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(* (+ a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.02454248125036058,
    "avg_bits_err_output": 0.02454248125036058,
    "avg_bits_err_improve": 0,
    "time": 4173.7666015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0.013375,
    "time": 2963.3359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 1579.055908203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ b (+ c a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40139417344137657,
    "avg_bits_err_output": 0.235625,
    "avg_bits_err_improve": 0.16576917344137657,
    "time": 4952.337646484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (log (+ 1.0 (expm1 (if (!= (* (cos x) (cos x)) 0.0) (+ (/ 1.0 (/ 1.0 (* (cos x) (cos x)))) (/ (/ 1.0 (/ -1.0 (cos x))) (cos x))) (fma (cos x) (cos x) -1.0))))) (- -1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 31,
    "avg_bits_err_input": 30.175013497041636,
    "avg_bits_err_output": 30.18954564411203,
    "avg_bits_err_improve": -0.014532147070394075,
    "time": 13825.23876953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.807716904491198,
    "avg_bits_err_output": 0.2938962406251803,
    "avg_bits_err_improve": 24.513820663866017,
    "time": 11419.098388671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (- (tan x))) 0.0) (/ (+ (fma (- (fabs (/ x (tan x)))) (fabs (/ x (tan x))) (* (/ x (tan x)) (/ x (tan x)))) (* (/ x (tan x)) (/ (- x (sin x)) (- (tan x))))) (if (!= (/ x (tan x)) 0.0) (/ 1.0 (/ 1.0 (/ (- x) (tan x)))) (/ (- x) (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 44,
    "avg_bits_err_input": 30.112599360710764,
    "avg_bits_err_output": 30.111144016003905,
    "avg_bits_err_improve": 0.0014553447068585967,
    "time": 34206.009033203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005875,
    "avg_bits_err_output": 0.005875,
    "avg_bits_err_improve": 0,
    "time": 1757.732666015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (* 100.0 (/ (pow (+ (/ i n) 1.0) n) (/ i n))) (/ 100.0 (/ i n))))",
    "output_parens": 24,
    "avg_bits_err_input": 47.77211882117193,
    "avg_bits_err_output": 13.948016892505029,
    "avg_bits_err_improve": 33.8241019286669,
    "time": 26444.1337890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 0.0) (+ (* (/ b (fma d d (* c c))) d) (* a (/ c (fma c c (* d d))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 5e+264) (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (+ (* (/ b (fma d d (* c c))) d) (* a (/ c (fma c c (* d d)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 25.981051375107914,
    "avg_bits_err_output": 23.589080399470816,
    "avg_bits_err_improve": 2.391970975637097,
    "time": 15453.161376953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* b (/ c (fma c c (* d d)))) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.025556527964095,
    "avg_bits_err_output": 23.136015032351725,
    "avg_bits_err_improve": 2.88954149561237,
    "time": 16792.227783203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.036,
    "avg_bits_err_output": 0.022500203512582077,
    "avg_bits_err_improve": 0.01349979648741792,
    "time": 6496.530517578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (if (!= (exp (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))) 0.0) (/ (* (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))) (exp (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux))))) (exp (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux))))) (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux))))))))))",
    "output_parens": 42,
    "avg_bits_err_input": 13.628666110642111,
    "avg_bits_err_output": 12.59248182403689,
    "avg_bits_err_improve": 1.0361842866052218,
    "time": 34055.668701171875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- (+ ux ux) (* ux ux)) (- (* (* ux maxCos) (+ (fma ux maxCos (- 1.0 ux)) (- 1.0 ux)))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.67249297037591,
    "avg_bits_err_output": 0.3198989796971644,
    "avg_bits_err_improve": 13.352593990678745,
    "time": 24453.9794921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (if (!= (* PI (* uy -2.0)) 0.0) (/ 2.0 (* (/ 2.0 uy) (/ 0.5 PI))) (* PI (+ uy uy)))) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output_parens": 42,
    "avg_bits_err_input": 0.33726015310460555,
    "avg_bits_err_output": 0.3548450153017921,
    "avg_bits_err_improve": -0.017584862197186524,
    "time": 49628.79248046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.20730650370629405,
    "avg_bits_err_output": 0.20730650370629405,
    "avg_bits_err_improve": 0,
    "time": 22874.510498046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (+ (/ (- (* u1 (/ u1 (* (- 1.0 u1) (- 1.0 u1)))) (/ (* u1 (/ u1 (- 1.0 u1))) (* (- 1.0 u1) 4.0))) (/ u1 (- 1.0 u1))) (/ (* (/ u1 (- 1.0 u1)) (/ u1 u1)) 4.0)) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 32,
    "avg_bits_err_input": 0.5367695534358211,
    "avg_bits_err_output": 0.5680530535592406,
    "avg_bits_err_improve": -0.031283500123419516,
    "time": 25635.468994140625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ (+ (- (/ (+ u1 (* u1 0.5)) (- 1.0 u1))) (- (/ (* u1 0.5) (- 1.0 u1)))) -2.0)) (cos (* 6.28318530718 u2)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.3323867862721689,
    "avg_bits_err_output": 0.3482194600911634,
    "avg_bits_err_improve": -0.015832673818994503,
    "time": 20313.2041015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.3336518788743524,
    "avg_bits_err_output": 0.3335221328930775,
    "avg_bits_err_improve": 0.0001297459812748536,
    "time": 45557.978271484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06429548788115326,
    "avg_bits_err_output": 0.044359101830411404,
    "avg_bits_err_improve": 0.019936386050741856,
    "time": 15824.402099609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (+ (exp (/ (fabs x) (- s))) 1.0)) (fma s (exp (/ (fabs x) (- s))) s))",
    "output_parens": 16,
    "avg_bits_err_input": 0.14993301787864208,
    "avg_bits_err_output": 0.1287506813758924,
    "avg_bits_err_improve": 0.02118233650274967,
    "time": 21589.151611328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6669101577778684,
    "avg_bits_err_output": 0.6669101577778684,
    "avg_bits_err_improve": 0,
    "time": 21668.255859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(- (- (+ (* v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))) v) v) -1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.15813005669845615,
    "avg_bits_err_output": 0.1700689679394885,
    "avg_bits_err_improve": -0.011938911241032357,
    "time": 18991.981201171875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.4823853075992357,
    "avg_bits_err_output": 2.4797694026941106,
    "avg_bits_err_improve": 0.0026159049051250882,
    "time": 38783.60107421875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ cosTheta_i (sinh (/ 1.0 v))) (* (/ (exp (* sinTheta_O (/ sinTheta_i (- v)))) v) (/ 0.5 v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.46618866059225506,
    "avg_bits_err_output": 0.3774844335638276,
    "avg_bits_err_improve": 0.08870422702842745,
    "time": 26138.459716796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (* (exp (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) (+ v v))) (exp (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) (+ v v)))) (expm1 (log1p (* (/ 0.5 v) (exp 0.6931)))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.11093281078861096,
    "avg_bits_err_output": 0.15282138213925994,
    "avg_bits_err_improve": -0.04188857135064898,
    "time": 25707.53271484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (* alpha alpha) 1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.466228432430596,
    "avg_bits_err_output": 0.4182181896361626,
    "avg_bits_err_improve": 0.04801024279443339,
    "time": 24002.28564453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(fma s (log1p (+ (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0) -1.0)) 0.0)",
    "output_parens": 6,
    "avg_bits_err_input": 1.3193486567454937,
    "avg_bits_err_output": 1.2066528827861773,
    "avg_bits_err_improve": 0.1126957739593164,
    "time": 25350.629638671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (if (!= (+ (log (/ 1.0 (fma u -4.0 1.0))) 2.0) 0.0) (/ (log (+ 1.0 (- (exp (expm1 (* (log1p (log (/ 1.0 (fma u -4.0 1.0)))) 2.0))) 1.0))) (+ (log (/ 1.0 (fma u -4.0 1.0))) 2.0)) (log (/ 1.0 (fma u -4.0 1.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 12.206946242590604,
    "avg_bits_err_output": 12.244480812345612,
    "avg_bits_err_improve": -0.03753456975500846,
    "time": 40855.515869140625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ r (* s -3.0)))) (/ (* PI (* s r)) 0.16666666666666666)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12661813465590116,
    "avg_bits_err_output": 0.12991615001655246,
    "avg_bits_err_improve": -0.003298015360651302,
    "time": 53821.6787109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8848375306681342,
    "avg_bits_err_output": 0.6833279153654704,
    "avg_bits_err_improve": 0.20150961530266376,
    "time": 32247.824462890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (- c (- -1.0 (* (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* cosTheta (sqrt PI))) (exp (* cosTheta (- cosTheta)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6889490988543148,
    "avg_bits_err_output": 0.47522706925076574,
    "avg_bits_err_improve": 0.21372202960354902,
    "time": 20290.00927734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (log1p (expm1 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.639527819892129,
    "avg_bits_err_output": 0.5349807795414396,
    "avg_bits_err_improve": 13.104547040350688,
    "time": 19463.034423828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (cos (* 2.0 (* PI u2))) (log (+ 1.0 (if (!= (- (exp (* (cos (* 2.0 (* PI u2))) (- 1.0 (sqrt (- (log (- 1.0 u1))))))) -1.0) 0.0) (/ (+ (exp (* (* (cos (* 2.0 (* PI u2))) (+ (sqrt (- (log (- 1.0 u1)))) -1.0)) -2.0)) -1.0) (- (exp (* (cos (* 2.0 (* PI u2))) (- 1.0 (sqrt (- (log (- 1.0 u1))))))) -1.0)) (expm1 (* (cos (* 2.0 (* PI u2))) (- 1.0 (sqrt (- (log (- 1.0 u1)))))))))))",
    "output_parens": 53,
    "avg_bits_err_input": 13.688588634235135,
    "avg_bits_err_output": 13.247413824357851,
    "avg_bits_err_improve": 0.44117480987728364,
    "time": 21711.831787109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (fma (- alpha) (fma (log (- 1.0 u0)) alpha alpha) (* alpha (fma (log (- 1.0 u0)) alpha alpha))) (* (* alpha (log (- 1.0 u0))) (- alpha)))",
    "output_parens": 15,
    "avg_bits_err_input": 14.112642639836032,
    "avg_bits_err_output": 14.039432984833995,
    "avg_bits_err_improve": 0.07320965500203691,
    "time": 21009.478515625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (if (!= (/ (/ cos2phi alphax) alphax) 0.0) (* (/ cos2phi alphax) (/ (/ cos2phi alphax) cos2phi)) (/ (/ cos2phi alphax) alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 17,
    "avg_bits_err_input": 12.548936959150813,
    "avg_bits_err_output": 12.552068839769333,
    "avg_bits_err_improve": -0.0031318806185201,
    "time": 16091.528564453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.827125798040637,
    "avg_bits_err_output": 12.657361447783256,
    "avg_bits_err_improve": 4.169764350257381,
    "time": 24383.894287109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21240808281331133,
    "avg_bits_err_output": 0.1566462406251803,
    "avg_bits_err_improve": 0.055761842188131044,
    "time": 14192.231689453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.72987245158614,
    "avg_bits_err_output": 10.531957499136015,
    "avg_bits_err_improve": 3.197914952450125,
    "time": 18990.84765625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0))) (if (!= (exp (/ (* PI f) -4.0)) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (/ (* PI f) -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0)))))) (* PI -0.25))",
    "output_parens": 32,
    "avg_bits_err_input": 61.54822637419554,
    "avg_bits_err_output": 1.9553369668401557,
    "avg_bits_err_improve": 59.592889407355386,
    "time": 40820.16015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t 1.45e-155) (/ (* (sqrt 2.0) t) (sqrt (fma (- l) l (* (fma 2.0 (* t t) (* l l)) (/ (+ 1.0 x) (+ x -1.0)))))) (if (<= t 3e-19) (/ (* (sqrt 2.0) t) (sqrt (+ (/ (* (+ x 1.0) (* 2.0 (* t t))) (+ x -1.0)) (+ (* (/ (+ x 1.0) (+ x -1.0)) (* l l)) (* l (- l)))))) (/ (* (sqrt 2.0) t) (sqrt (fma (- l) l (* (fma 2.0 (* t t) (* l l)) (/ (+ 1.0 x) (+ x -1.0))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 43.43996276536648,
    "avg_bits_err_output": 39.008912487630816,
    "avg_bits_err_improve": 4.431050277735665,
    "time": 24379.896484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.8436816310052255,
    "avg_bits_err_output": 3.8436816310052255,
    "avg_bits_err_improve": 0,
    "time": 26049.89111328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (log (+ 1.0 (expm1 (/ 1.0 (sqrt (- (* (pow (* 2.0 (/ l Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0)))))) 0.5)))",
    "output_parens": 18,
    "avg_bits_err_input": 1.0800849081295463,
    "avg_bits_err_output": 1.0809599081295462,
    "avg_bits_err_improve": -0.0008749999999999591,
    "time": 12429.87255859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (- (+ 1.0 (pow (/ Om Omc) 2.0)) 1.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.384251990995761,
    "avg_bits_err_output": 10.384655121214958,
    "avg_bits_err_improve": -0.0004031302191975783,
    "time": 14736.978271484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -5e+18) (sqrt (- (+ (* (/ l Om) (* (* l (* U n)) -4.0)) (* t (* 2.0 (* U n)))) (* U (* (* 2.0 n) (* (pow (/ l Om) 2.0) (* n (- U U*))))))) (if (<= U -1.7e-244) (sqrt (- (* (* 2.0 n) (- (* n (* (pow (/ l Om) 2.0) (* U (- U U*)))) (* U (- t (* (/ l Om) (* l 2.0)))))))) (if (<= U 1.65e-297) (sqrt (- (+ (* (/ l Om) (* (* n (* U l)) -4.0)) (* U (* 2.0 (* n t)))) (* (* U (* 2.0 n)) (* n (* (pow (/ l Om) 2.0) (- U U*)))))) (if (<= U 7.1e-84) (sqrt (- (* (* 2.0 n) (- (* n (* (pow (/ l Om) 2.0) (* U (- U U*)))) (* U (- t (* (/ l Om) (* l 2.0)))))))) (sqrt (- (+ (* (/ l Om) (* (* l (* U n)) -4.0)) (* t (* 2.0 (* U n)))) (* U (* (* 2.0 n) (* (pow (/ l Om) 2.0) (* n (- U U*)))))))))))",
    "output_parens": 97,
    "avg_bits_err_input": 34.65783381182702,
    "avg_bits_err_output": 29.319205432148244,
    "avg_bits_err_improve": 5.338628379678774,
    "time": 39810.5458984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ (/ 2.0 (tan k)) (/ (sin k) l)) (* (pow (/ k t) 2.0) (/ (pow t 3.0) l)))",
    "output_parens": 11,
    "avg_bits_err_input": 47.600965719084996,
    "avg_bits_err_output": 36.526445258234055,
    "avg_bits_err_improve": 11.074520460850941,
    "time": 36845.550048828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (sin k) l) (* (+ 2.0 (pow (/ k t) 2.0)) (* (tan k) (/ (pow t 3.0) l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.70258891534153,
    "avg_bits_err_output": 27.544226842983083,
    "avg_bits_err_improve": 5.158362072358447,
    "time": 21219.58349609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* (* a2 a2) (cos th)) (* a1 (* a1 (cos th)))) (sqrt 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5150255672126525,
    "avg_bits_err_output": 0.46649210783206274,
    "avg_bits_err_improve": 0.04853345938058973,
    "time": 24472.73486328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (/ (sqrt (* PI (* n 2.0))) (sqrt k)) (- (- (pow (* PI (* n 2.0)) (* k -0.5)) -1.0) 1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 0.5365099251197049,
    "avg_bits_err_output": 0.5052524175608152,
    "avg_bits_err_improve": 0.031257507558889674,
    "time": 18036.794921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (- (expm1 l) (expm1 (- l))) (* (cos (/ K 2.0)) J)) U)",
    "output_parens": 9,
    "avg_bits_err_input": 17.293928584652306,
    "avg_bits_err_output": 0.07358496250072115,
    "avg_bits_err_improve": 17.220343622151585,
    "time": 24699.3955078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (fma n K (* K m)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 16,
    "avg_bits_err_input": 15.446249203110485,
    "avg_bits_err_output": 15.446483370395667,
    "avg_bits_err_improve": -0.00023416728518199648,
    "time": 19841.49462890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.973542481250362,
    "avg_bits_err_output": 17.973542481250362,
    "avg_bits_err_improve": 0,
    "time": 18321.559814453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (* (/ (pow (* (/ D d) (/ M 2.0)) 2.0) l) h))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.15935888795238,
    "avg_bits_err_output": 10.891950653331756,
    "avg_bits_err_improve": 3.267408234620623,
    "time": 21447.68994140625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+276) (* c0 (sqrt (/ (/ A l) V))) (if (<= (* V l) -5e-71) (* c0 (sqrt (/ A (* V l)))) (if (<= (* V l) 1e-271) (* c0 (sqrt (* (/ A V) (/ 1.0 l)))) (if (<= (* V l) 4e+78) (if (!= (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (/ A (* (* l V) (sqrt (/ A (* l V))))) (sqrt (/ A (* l V))))) 0.0) (/ 1.0 (/ 1.0 (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (/ A (* (* l V) (sqrt (/ A (* l V))))) (sqrt (/ A (* l V))))))) (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (/ A (* (* l V) (sqrt (/ A (* l V))))) (sqrt (/ A (* l V)))))) (* c0 (sqrt (/ (/ A l) V)))))))",
    "output_parens": 78,
    "avg_bits_err_input": 19.553756028197697,
    "avg_bits_err_output": 15.55204219560553,
    "avg_bits_err_improve": 4.001713832592166,
    "time": 16013.996826171875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(* (/ c0 (+ w w)) (+ (* d (* (/ (/ d D) w) (/ (/ c0 D) h))) (sqrt (* (- (* d (* (/ (/ d D) w) (/ (/ c0 D) h))) M) (fma d (* (/ (/ d D) w) (/ (/ c0 D) h)) M)))))",
    "output_parens": 25,
    "avg_bits_err_input": 59.488770402858144,
    "avg_bits_err_output": 53.626606643985035,
    "avg_bits_err_improve": 5.862163758873109,
    "time": 42565.856689453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(- (* (sqrt (/ d l)) (sqrt (/ d h))) (/ (* (sqrt (/ d l)) (* (* (pow (/ (* M D) (* 2.0 d)) 2.0) 0.5) (* (sqrt (/ d h)) (+ h h)))) (+ l l)))",
    "output_parens": 21,
    "avg_bits_err_input": 26.928219754942614,
    "avg_bits_err_output": 25.108797876843184,
    "avg_bits_err_improve": 1.8194218780994298,
    "time": 42381.016357421875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (- 0.5 (/ 0.5 (hypot 1.0 x))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 21,
    "avg_bits_err_input": 15.2251660647968,
    "avg_bits_err_output": 14.726542785833198,
    "avg_bits_err_improve": 0.4986232789636027,
    "time": 16980.50244140625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ 1.3333333333333333 (* (* PI (- 1.0 (* v v))) (sqrt (- 2.0 (* (* v v) 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9836462406251804,
    "avg_bits_err_output": 0.01329248125036058,
    "avg_bits_err_improve": 0.9703537593748198,
    "time": 5077.00244140625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (fma 5.0 (* v v) -1.0) (* (sqrt (- 2.0 (* v (* v 6.0)))) PI)) (- t (* v (* v t)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.44761267390050846,
    "avg_bits_err_output": 0.10736429597149524,
    "avg_bits_err_improve": 0.3402483779290132,
    "time": 20996.538330078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (- 1.0 (* 3.0 (* v v)))) (* (/ (sqrt 2.0) 4.0) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012719360937770433,
    "avg_bits_err_output": 0.01341748125036058,
    "avg_bits_err_improve": -0.0006981203125901465,
    "time": 4737.91015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5217996194694392,
    "avg_bits_err_output": 0.5217996194694392,
    "avg_bits_err_improve": 0,
    "time": 11578.305908203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (/ (pow k m) (- (* k (+ k 10.0)) -1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 2.06863836397435,
    "avg_bits_err_output": 2.019546685187866,
    "avg_bits_err_improve": 0.04909167878648413,
    "time": 8845.9599609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (* (exp (/ (- mu (- Ec (+ EDonor Vef))) (+ KbT KbT))) (exp (/ (- mu (- Ec (+ EDonor Vef))) (+ KbT KbT)))))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.017803982015155383,
    "avg_bits_err_output": 0.018133660755232293,
    "avg_bits_err_improve": -0.0003296787400769094,
    "time": 11483.30712890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (pow (fma a a (* b b)) 2.0) (+ (* b (* b 4.0)) -1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.1843212018417508,
    "avg_bits_err_output": 0.18529996121657047,
    "avg_bits_err_improve": -0.000978759374819671,
    "time": 16062.83349609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (+ (if (!= (/ 6.0 (/ 8.0 (pow (fma b b (* a a)) 2.0))) 0.0) (/ (/ 18.0 (/ 8.0 (pow (fma b b (* a a)) 2.0))) 3.0) (/ 6.0 (/ 8.0 (pow (fma b b (* a a)) 2.0)))) (* (pow (fma a a (* b b)) 2.0) 0.25)) (pow (fma a a (* b b)) 2.0)) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 42,
    "avg_bits_err_input": 0.1849417761643687,
    "avg_bits_err_output": 0.22970888242194037,
    "avg_bits_err_improve": -0.04476710625757169,
    "time": 25807.097900390625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (if (!= (* (* b b) (* (+ 3.0 a) 4.0)) 0.0) (* (fma b (* b (fma a 4.0 12.0)) (fma 4.0 (* a (- a (* a a))) (pow (fma b b (* a a)) 2.0))) (* (- (/ (* b b) b) (/ 0.0 (fma a 4.0 12.0))) (/ b (* b b)))) (fma 4.0 (fma b (* b (+ 3.0 a)) (* a (- a (* a a)))) (pow (fma b b (* a a)) 2.0))) 1.0)",
    "output_parens": 36,
    "avg_bits_err_input": 0.18395327522396127,
    "avg_bits_err_output": 0.20741874981993902,
    "avg_bits_err_improve": -0.023465474595977753,
    "time": 23390.223388671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (log (exp (+ (/ x (sqrt (fma x x (* p (* 4.0 p))))) 1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.511156673774472,
    "avg_bits_err_output": 13.514025263642404,
    "avg_bits_err_improve": -0.0028685898679317035,
    "time": 17196.31201171875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.110354816562136,
    "avg_bits_err_output": 0.063,
    "avg_bits_err_improve": 41.047354816562134,
    "time": 5055.286376953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(log1p (log1p (expm1 (expm1 (- (if (!= (/ (sin x) (- (tan x) x)) 0.0) (/ 1.0 (/ 1.0 (/ (sin x) (- (tan x) x)))) (/ (sin x) (- (tan x) x))) (/ x (- (tan x) x)))))))",
    "output_parens": 24,
    "avg_bits_err_input": 31.762109247225116,
    "avg_bits_err_output": 31.75295131687698,
    "avg_bits_err_improve": 0.009157930348134613,
    "time": 19773.63525390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 34.13426978784239,
    "avg_bits_err_output": 34.13426978784239,
    "avg_bits_err_improve": 0,
    "time": 14677.69580078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (* b_2 -0.5) (+ (sqrt (- (* b_2 b_2) (* a c))) (/ b_2 2.0))) a)",
    "output_parens": 9,
    "avg_bits_err_input": 34.2973491957779,
    "avg_bits_err_output": 34.29994355671567,
    "avg_bits_err_improve": -0.0025943609377705457,
    "time": 16455.365234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.54762944792096,
    "avg_bits_err_output": 30.758613942105768,
    "avg_bits_err_improve": 0.7890155058151933,
    "time": 16483.0341796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (<= x 1.0) (- (expm1 (/ (log x) n))) (- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.52726198764511,
    "avg_bits_err_output": 11.826368759414608,
    "avg_bits_err_improve": 20.700893228230505,
    "time": 29813.978515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (- (+ (expm1 (- (log1p N) (log N))) -1.0) -1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 29.188278670226154,
    "avg_bits_err_output": 29.19032657171458,
    "avg_bits_err_improve": -0.002047901488424486,
    "time": 13487.041748046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (/ (/ x x) (+ x (+ x 2.0))) (/ (+ (/ x (+ x (+ x 2.0))) -1.0) x))",
    "output_parens": 10,
    "avg_bits_err_input": 14.899962691339875,
    "avg_bits_err_output": 14.901416160906606,
    "avg_bits_err_improve": -0.0014534695667318687,
    "time": 16897.863525390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (!= (cos x) 0.0) (if (!= (/ 1.0 (/ 1.0 (cos x))) 0.0) (/ (fma (cos x) (cos (+ x eps)) (/ -2.0 (/ (/ 2.0 (cos x)) (cos x)))) (/ 1.0 (/ 1.0 (cos x)))) (+ (- (cos (+ x eps)) (cos x)) (/ 0.0 (cos x)))) (- (cos (+ x eps)) (cos x)))",
    "output_parens": 32,
    "avg_bits_err_input": 39.72788865800732,
    "avg_bits_err_output": 39.76199689077635,
    "avg_bits_err_improve": -0.034108232769028746,
    "time": 25349.018310546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.449209773693745,
    "avg_bits_err_output": 29.161348394598217,
    "avg_bits_err_improve": 0.2878613790955278,
    "time": 14982.876220703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (/ (- 1.0 (cos x)) (* (sin x) 2.0)) 0.0) (/ (+ (* (/ (- 1.0 (cos x)) (* (sin x) 2.0)) (/ (- 1.0 (cos x)) (* (sin x) 2.0))) (* (* (+ (cos x) -1.0) (/ -0.5 (sin x))) (- (/ 0.5 (sin x)) (* (cos x) (/ 0.5 (sin x)))))) (/ (- 1.0 (cos x)) (* (sin x) 2.0))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 42,
    "avg_bits_err_input": 29.38121018738277,
    "avg_bits_err_output": 29.45034172278375,
    "avg_bits_err_improve": -0.06913153540098094,
    "time": 26079.793212890625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.09578963633692,
    "avg_bits_err_output": 22.177467408009896,
    "avg_bits_err_improve": 11.918322228327021,
    "time": 22984.881591796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(* (if (!= (- (sqrt (fma -4.0 (* c a) (* b b))) b) 0.0) (* (/ (* c -4.0) (- (sqrt (fma a (* c -4.0) (* b b))) b)) a) (+ b (sqrt (fma -4.0 (* c a) (* b b))))) (/ -0.5 a))",
    "output_parens": 22,
    "avg_bits_err_input": 33.85652725117812,
    "avg_bits_err_output": 22.02032485589742,
    "avg_bits_err_improve": 11.8362023952807,
    "time": 24069.235595703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (if (!= (exp (log1p (log (- 1.0 x)))) 0.0) (+ (+ 0.0 (/ (log1p (- x)) 2.0)) (+ 0.0 (/ (log1p (- x)) 2.0))) (log (- 1.0 x))) (log1p x))",
    "output_parens": 19,
    "avg_bits_err_input": 61.26492470872319,
    "avg_bits_err_output": 0.02312744375108174,
    "avg_bits_err_improve": 61.241797264972114,
    "time": 26895.96728515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log (+ n 1.0)) (log n)) n)) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 63.00460421687091,
    "avg_bits_err_output": 44.199417924430115,
    "avg_bits_err_improve": 18.805186292440794,
    "time": 16876.538818359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(+ (+ (log (- (/ eps (- -1.0 eps)) (/ 1.0 (- -1.0 eps)))) -1.0) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 58.61421781599877,
    "avg_bits_err_output": 58.634652986427916,
    "avg_bits_err_improve": -0.020435170429145444,
    "time": 17452.810546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (+ (/ (+ -1.0 (/ (+ x x) (tan x))) (+ x x)) (/ -1.0 (+ x x))) x) (/ -1.0 x))",
    "output_parens": 12,
    "avg_bits_err_input": 59.95428283110227,
    "avg_bits_err_output": 59.95322937263688,
    "avg_bits_err_improve": 0.001053458465385404,
    "time": 31060.00146484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.32324488120562,
    "avg_bits_err_output": 29.0244882744018,
    "avg_bits_err_improve": 31.298756606803817,
    "time": 25602.52392578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.37114770170423,
    "avg_bits_err_output": 0.39732312031259015,
    "avg_bits_err_improve": 40.97382458139164,
    "time": 10701.85888671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.694040926597964,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.693415926597964,
    "time": 3454.121826171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.25158828609527,
    "avg_bits_err_output": 0.01600607606577124,
    "avg_bits_err_improve": 29.2355822100295,
    "time": 4657.267822265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (if (!= (- (- (exp x) -2.0) (exp (- x))) 0.0) (/ (fma (expm1 (- x)) (+ (expm1 (- x)) -1.0) (- (- (expm1 (+ x x))) (expm1 (- x)))) (- (- (exp x) -2.0) (exp (- x)))) (- (- 1.0 (expm1 (- x))) (exp x))))",
    "output_parens": 31,
    "avg_bits_err_input": 29.636062920659565,
    "avg_bits_err_output": 28.707247030413136,
    "avg_bits_err_improve": 0.9288158902464296,
    "time": 21567.58544921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ 0.0 (+ (/ -2.0 x) (if (!= (/ 1.0 (+ 1.0 x)) 0.0) (/ (+ 1.0 (/ 1.0 (/ (+ x -1.0) (+ 1.0 x)))) (+ 1.0 x)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))))))",
    "output_parens": 19,
    "avg_bits_err_input": 10.084907377362468,
    "avg_bits_err_output": 10.097874045672611,
    "avg_bits_err_improve": -0.012966668310143703,
    "time": 30552.050048828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (- (/ (sin x) (+ (cos x) (cos x))) (* (tan (+ x eps)) 0.5)) -2.0)",
    "output_parens": 10,
    "avg_bits_err_input": 37.269582755506676,
    "avg_bits_err_output": 37.27241840283232,
    "avg_bits_err_improve": -0.002835647325646562,
    "time": 24145.502685546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.50086927330795,
    "avg_bits_err_output": 0.15801672969029448,
    "avg_bits_err_improve": 29.342852543617653,
    "time": 12889.583251953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 37.201022185864595,
    "avg_bits_err_output": 37.201022185864595,
    "avg_bits_err_improve": 0,
    "time": 19131.71337890625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 20.403880175719536,
    "avg_bits_err_output": 20.267225549351533,
    "avg_bits_err_improve": 0.13665462636800285,
    "time": 15685.256103515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 14.088187256374939,
    "avg_bits_err_output": 14.088187256374939,
    "avg_bits_err_improve": 0,
    "time": 3528.381591796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.37658192425628,
    "avg_bits_err_output": 1.2947736393344336,
    "avg_bits_err_improve": 28.081808284921845,
    "time": 24174.69091796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (* (- m (* m m)) (- 1.0 m)) v) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.0742920849918798,
    "avg_bits_err_output": 0.07679580340980405,
    "avg_bits_err_improve": -0.0025037184179242528,
    "time": 11537.51611328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(fma (* a b) (* a (/ b -4.0)) (* (* b (+ a (+ a a))) (* a (/ b -4.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 16.21046847030235,
    "avg_bits_err_output": 0.29945827188419494,
    "avg_bits_err_improve": 15.911010198418154,
    "time": 11812.388427734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (/ angle 180.0)) 0.0) (* (/ angle 180.0) (* (/ (* angle (* PI PI)) 180.0) (/ (/ 1.0 PI) (/ angle 180.0)))) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 20.38239609746375,
    "avg_bits_err_output": 20.571754595060842,
    "avg_bits_err_improve": -0.189358497597091,
    "time": 41997.695068359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (- (exp (log1p (cos (* PI (/ angle 180.0))))) 1.0))",
    "output_parens": 15,
    "avg_bits_err_input": 31.088215511093885,
    "avg_bits_err_output": 31.089340099862472,
    "avg_bits_err_improve": -0.0011245887685866762,
    "time": 39891.65234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (if (!= (* (* angle PI) -0.005555555555555556) 0.0) (/ 1.0 (* (/ (/ 1.0 PI) angle) 180.0)) (* angle (* PI 0.005555555555555556))))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.56853517139335,
    "avg_bits_err_output": 20.596968100857687,
    "avg_bits_err_improve": -0.028432929464337064,
    "time": 42077.28955078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17595056406367185,
    "avg_bits_err_output": 0.17411908981252194,
    "avg_bits_err_improve": 0.001831474251149906,
    "time": 15936.063232421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(+ (fma (* (tan x) (/ (tan x) (- -1.0 (* (tan x) (tan x))))) (* (tan x) (/ (tan x) (fma (tan x) (tan x) 1.0))) (* (* (tan x) (/ (tan x) (fma (tan x) (tan x) 1.0))) (* (tan x) (/ (tan x) (fma (tan x) (tan x) 1.0))))) (/ (- 1.0 (* (tan x) (tan x))) (fma (tan x) (tan x) 1.0)))",
    "output_parens": 40,
    "avg_bits_err_input": 0.3189410841024603,
    "avg_bits_err_output": 0.32185314778701185,
    "avg_bits_err_improve": -0.002912063684551547,
    "time": 18125.5068359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.14049060156295073,
    "avg_bits_err_output": 0.14049060156295073,
    "avg_bits_err_improve": 0,
    "time": 17895.5107421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (if (!= (* (cos phi2) (cos (- lambda1 lambda2))) 0.0) (/ (* (cos phi2) (* (cos (- lambda1 lambda2)) (* (cos phi2) (cos (- lambda1 lambda2))))) (* (cos phi2) (cos (- lambda1 lambda2)))) (* (cos phi2) (cos (- lambda1 lambda2))))))) R)",
    "output_parens": 31,
    "avg_bits_err_input": 16.351595573944635,
    "avg_bits_err_output": 16.36586570941251,
    "avg_bits_err_improve": -0.014270135467874923,
    "time": 34187.993408203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0)))) (- b)) 0.0) (* (* (/ c (+ b (+ b (+ (sqrt (fma c (* -4.0 a) (* b b))) (sqrt (fma c (* -4.0 a) (* b b))))))) -8.0) a) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 29,
    "avg_bits_err_input": 52.37542226341931,
    "avg_bits_err_output": 0.16874569257769628,
    "avg_bits_err_improve": 52.206676570841616,
    "time": 29492.957763671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.841902841350603,
    "avg_bits_err_output": 0.34527404125233685,
    "avg_bits_err_improve": 28.496628800098264,
    "time": 24219.861572265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 43.7664966882125,
    "avg_bits_err_output": 0.24688270782052257,
    "avg_bits_err_improve": 43.51961398039197,
    "time": 23833.846923828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.09730309892419,
    "avg_bits_err_output": 22.177467408009896,
    "avg_bits_err_improve": 11.919835690914297,
    "time": 23059.981689453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (if (!= (cos (- lambda1 lambda2)) 0.0) (/ (* (cos (- lambda1 lambda2)) (cos (- lambda1 lambda2))) (cos (- lambda1 lambda2))) (cos (- lambda1 lambda2)))))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.9115798475594101,
    "avg_bits_err_output": 0.9130038872372574,
    "avg_bits_err_improve": -0.0014240396778473219,
    "time": 28956.299560546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (- 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))) 0.0) (/ (if (!= (+ 1.0 (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x))))))) 0.0) (/ (- 1.0 (/ (/ 256.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x)))))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x))))))) (+ 1.0 (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x)))))))) (- 1.0 (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* -4.0 x)))))))) (- 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) (+ 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 122,
    "avg_bits_err_input": 28.889383349182452,
    "avg_bits_err_output": 28.84108668763089,
    "avg_bits_err_improve": 0.04829666155156076,
    "time": 30650.059814453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (* x -2.0)) (- -1.0 (exp (* x -2.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.0612262879322,
    "avg_bits_err_output": 0.6936580828133113,
    "avg_bits_err_improve": 57.367568205118886,
    "time": 16203.889892578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (- (expm1 (* x -2.0))) (exp (- x))) 2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 57.71578129667867,
    "avg_bits_err_output": 0.05396936093777043,
    "avg_bits_err_improve": 57.6618119357409,
    "time": 8589.40234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(- (+ (/ 2.0 (+ (exp x) (exp (- x)))) 1.0) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.007719360937770434,
    "avg_bits_err_output": 0.09378928621442392,
    "avg_bits_err_improve": -0.08606992527665348,
    "time": 4733.93505859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.89775,
    "avg_bits_err_output": 31.89775,
    "avg_bits_err_improve": 0,
    "time": 4355.4013671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (/ x (/ (- 1.0 x) 2.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.60761187666961,
    "avg_bits_err_output": 0.01839624062518029,
    "avg_bits_err_improve": 58.58921563604443,
    "time": 12818.107421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (- (+ (/ (sqrt (- 1.0 (* x x))) x) (/ 1.0 (+ x x))) (/ -1.0 (+ x x))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.05141524101186092,
    "avg_bits_err_output": 0.05154024101186092,
    "avg_bits_err_improve": -0.0001250000000000001,
    "time": 5760.697998046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* (* eh (cos t)) (sin (atan (/ eh (* ew (tan t))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12225,
    "avg_bits_err_output": 0.121625,
    "avg_bits_err_improve": 0.0006250000000000006,
    "time": 25133.364013671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (if (!= (cos (atan (* (- eh) (/ (tan t) ew)))) 0.0) (/ 1.0 (/ 1.0 (cos (atan (* (- eh) (/ (tan t) ew)))))) (cos (atan (* (- eh) (/ (tan t) ew)))))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.1295,
    "avg_bits_err_output": 0.1327099625007212,
    "avg_bits_err_improve": -0.0032099625007211974,
    "time": 24501.96044921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 40.385934374038776,
    "avg_bits_err_output": 3.778640136639726,
    "avg_bits_err_improve": 36.60729423739905,
    "time": 24360.908935546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.264119382402065,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 14.254744382402064,
    "time": 6847.206298828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (* (sin delta) (cos phi1)) (cos theta)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1612182612364986,
    "avg_bits_err_output": 0.1612099107258086,
    "avg_bits_err_improve": 8.350510690008361e-06,
    "time": 40313.726318359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.381283108553,
    "avg_bits_err_output": 0.17077857187842538,
    "avg_bits_err_improve": 52.21050453667458,
    "time": 24761.142822265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* b b) 0.0) (/ (+ (* (* b b) (* b b)) (* (* b b) (* c (* a -3.0)))) (* b b)) (fma c (* a -3.0) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 37,
    "avg_bits_err_input": 29.000176910769337,
    "avg_bits_err_output": 0.3574282129018252,
    "avg_bits_err_improve": 28.64274869786751,
    "time": 27989.840576171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.800473786413896,
    "avg_bits_err_output": 0.245328384382031,
    "avg_bits_err_improve": 43.55514540203186,
    "time": 25867.310791015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (!= (/ (- (- b) (sqrt (fma b b (* a (* c -3.0))))) (* a 3.0)) 0.0) (- (/ (/ (+ 0.0 (- (* a (* c -3.0)))) (* a 3.0)) (- (- b) (sqrt (fma b b (* a (* c -3.0)))))) 0.0) (/ (- (sqrt (fma b b (* a (* c -3.0)))) b) (* a 3.0)))",
    "output_parens": 31,
    "avg_bits_err_input": 34.136680201286005,
    "avg_bits_err_output": 22.63923672064811,
    "avg_bits_err_improve": 11.497443480637894,
    "time": 23857.443359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (sin phi1) (* (cos phi2) (+ (+ (cos (- lambda1 lambda2)) 2.0) -2.0)))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.090280293143818,
    "avg_bits_err_output": 13.12164989152689,
    "avg_bits_err_improve": -0.03136959838307085,
    "time": 38217.422119140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (if (!= (+ (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0))) 0.0) (/ (- (* (/ x (+ x 1.0)) (/ x (+ x 1.0))) (/ (+ x -1.0) (+ x -1.0))) (+ (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0)))) (- (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0)))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 33,
    "avg_bits_err_input": 29.57652331232844,
    "avg_bits_err_output": 25.141181743828806,
    "avg_bits_err_improve": 4.435341568499634,
    "time": 24087.109619140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(if (!= (/ x (+ 1.0 x)) 0.0) (+ (/ x (+ x 1.0)) (/ x (- (* x x) x))) (+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.0132259193652572,
    "avg_bits_err_improve": -0.0017259193652572006,
    "time": 8829.238037109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (- 1.0 (/ x (+ x -1.0))) (- (/ 1.0 (+ x -1.0)))) (+ 1.0 x))",
    "output_parens": 9,
    "avg_bits_err_input": 14.87853005323882,
    "avg_bits_err_output": 12.917384746632278,
    "avg_bits_err_improve": 1.9611453066065412,
    "time": 20228.7275390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 1e+269) (/ (sqrt (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C)) (* (* (- (pow B 2.0) (* A (* 4.0 C))) F) -2.0))) (- (- (pow B 2.0) (* A (* 4.0 C))))) 0.0)",
    "output_parens": 45,
    "avg_bits_err_input": 52.28084410863378,
    "avg_bits_err_output": 50.67201777470837,
    "avg_bits_err_improve": 1.608826333925407,
    "time": 39403.48876953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output_parens": 12,
    "avg_bits_err_input": 29.631214795776373,
    "avg_bits_err_output": 29.631214795776373,
    "avg_bits_err_improve": 0,
    "time": 23484.931640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (* F (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.13494609591828,
    "avg_bits_err_output": 51.853085183077745,
    "avg_bits_err_improve": 0.2818609128405356,
    "time": 35868.087158203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (/ (+ (* (cbrt (/ g (+ a a))) (+ (cbrt (/ g (+ a a))) 1.0)) (cbrt (/ g (+ a a)))) (+ (cbrt (/ g (+ a a))) 2.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 26,
    "avg_bits_err_input": 15.375658357687337,
    "avg_bits_err_output": 15.399180351447079,
    "avg_bits_err_improve": -0.023521993759741733,
    "time": 24730.048828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- g) 0.0) (/ (if (!= (* g (- g (sqrt (fma g g (* h (- h)))))) 0.0) (/ 1.0 (/ 1.0 (* g (- g (sqrt (fma g g (* h (- h)))))))) (* g (- g (sqrt (fma g g (* h (- h))))))) (- g)) (- (sqrt (fma g g (* h (- h)))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 45,
    "avg_bits_err_input": 36.11006560959621,
    "avg_bits_err_output": 36.07271769439129,
    "avg_bits_err_improve": 0.03734791520492564,
    "time": 19800.9736328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (log (if (!= (exp (cos (- (/ (acos (/ (- g) h)) 3.0) (* PI -0.6666666666666666)))) 0.0) (/ 1.0 (/ 1.0 (exp (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))) (exp (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.9898921062575732,
    "avg_bits_err_output": 0.043274264456121724,
    "avg_bits_err_improve": 0.9466178418014515,
    "time": 16031.576171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.5634481203125902,
    "avg_bits_err_output": 0.5634481203125902,
    "avg_bits_err_improve": 0,
    "time": 8908.309814453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-291) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ (/ a1 (+ b1 b1)) b2) (+ a2 a2)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+276) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 38,
    "avg_bits_err_input": 11.160701667980266,
    "avg_bits_err_output": 2.832395895763912,
    "avg_bits_err_improve": 8.328305772216353,
    "time": 8774.18017578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.49714040828653017,
    "avg_bits_err_output": 0.44719812031259015,
    "avg_bits_err_improve": 0.049942287973940014,
    "time": 10369.555908203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -4e-7) (log1p (if (!= x 0.0) (+ (/ (- x (* x (+ x (hypot 1.0 x)))) (* x -2.0)) (* (/ x (+ x x)) (+ x (+ (hypot 1.0 x) -1.0)))) (+ x (+ (hypot 1.0 x) -1.0)))) (log1p (- x (- 1.0 (hypot 1.0 x)))))",
    "output_parens": 25,
    "avg_bits_err_input": 53.115667577270706,
    "avg_bits_err_output": 13.734470572874839,
    "avg_bits_err_improve": 39.381197004395865,
    "time": 14197.525390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.680914404955915,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.680914404955915,
    "time": 2647.955322265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (expm1 (log1p (/ (- 1.0 x) (+ 1.0 x)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.002999999999999999,
    "time": 7867.08447265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1262.463623046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 13.229562452244346,
    "avg_bits_err_output": 0.7082169273587804,
    "avg_bits_err_improve": 12.521345524885566,
    "time": 22224.53271484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma x1 (* x1 (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)) (* (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* x1 2.0))))))) (+ x1 x1)))",
    "output_parens": 47,
    "avg_bits_err_input": 0.5125338784601732,
    "avg_bits_err_output": 0.2678869460988504,
    "avg_bits_err_improve": 0.2446469323613228,
    "time": 69377.73291015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* -2.0 (* v (/ t1 (+ t1 (+ t1 (+ u u)))))) (+ t1 u))",
    "output_parens": 8,
    "avg_bits_err_input": 17.856409227374165,
    "avg_bits_err_output": 1.257897050947513,
    "avg_bits_err_improve": 16.598512176426652,
    "time": 6063.537109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.22539340061561777,
    "avg_bits_err_output": 0.18787673793068907,
    "avg_bits_err_improve": 0.0375166626849287,
    "time": 7818.25341796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2392.15283203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* (- (/ 0.5 a) (/ 0.5 b)) PI) (- b a)) (+ a b))",
    "output_parens": 8,
    "avg_bits_err_input": 13.761072592660604,
    "avg_bits_err_output": 0.2784112796989482,
    "avg_bits_err_improve": 13.482661312961655,
    "time": 17451.733154296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (exp (- (* x eps) x)) 1.0 (+ (/ (exp (- (* x eps) x)) eps) (/ (- 1.0 (/ 1.0 eps)) (exp (fma x eps x))))) 2.0)",
    "output_parens": 15,
    "avg_bits_err_input": 29.204602081864202,
    "avg_bits_err_output": 24.638828279329335,
    "avg_bits_err_improve": 4.565773802534867,
    "time": 20227.40380859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (- 4.0 (+ (/ 4.0 (+ t (/ t t))) (/ (/ (- 4.0 (/ 4.0 (+ t (/ t t)))) t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.019375,
    "avg_bits_err_output": 0.00325,
    "avg_bits_err_improve": 0.016125,
    "time": 12504.232666015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (+ 1.0 (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))))) (+ (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))) 4.0))",
    "output_parens": 26,
    "avg_bits_err_input": 0.023,
    "avg_bits_err_output": 0.030375,
    "avg_bits_err_improve": -0.007375,
    "time": 13394.952880859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- -2.0 (* (* (/ t (+ t 1.0)) (/ t (+ t 1.0))) 8.0)) (+ (* (* (/ t (+ t 1.0)) (/ t (+ t 1.0))) -8.0) -4.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.040125,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 0.032,
    "time": 16987.3896484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3130.740966796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6920.767578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2851.2509765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.859650380151461,
    "avg_bits_err_output": 0.24875,
    "avg_bits_err_improve": 7.6109003801514605,
    "time": 37585.16748046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(if (!= (pow (+ x eps) 5.0) 0.0) (* (pow (+ x eps) 5.0) (/ (- (pow (+ x eps) 5.0) (pow x 5.0)) (pow (+ x eps) 5.0))) (- (pow (+ x eps) 5.0) (pow x 5.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 7.644378882563689,
    "avg_bits_err_output": 7.644458265688102,
    "avg_bits_err_improve": -7.938312441257978e-05,
    "time": 15955.074951171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 16.52739149729937,
    "avg_bits_err_output": 16.52739149729937,
    "avg_bits_err_improve": 0,
    "time": 15743.0888671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(if (!= (* (+ 2.0 (expm1 (* 10.0 (* x x)))) (cos x)) 0.0) (/ (* (+ 2.0 (expm1 (* 10.0 (* x x)))) (* (exp (* 10.0 (* x x))) (* (cos x) (cos x)))) (* (+ 2.0 (if (!= (+ (exp (* 10.0 (* x x))) 1.0) 0.0) (/ (+ -1.0 (exp (+ (* 10.0 (* x x)) (* 10.0 (* x x))))) (+ (exp (* 10.0 (* x x))) 1.0)) (expm1 (* 10.0 (* x x))))) (cos x))) (* (exp (* 10.0 (* x x))) (cos x)))",
    "output_parens": 50,
    "avg_bits_err_input": 3.5098863314918933,
    "avg_bits_err_output": 3.515042278743105,
    "avg_bits_err_improve": -0.00515594725121149,
    "time": 23211.72705078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 14.731017406151821,
    "avg_bits_err_output": 14.731017406151821,
    "avg_bits_err_improve": 0,
    "time": 12345.2109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.124525152334634,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.124525152334634,
    "time": 5370.62841796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.42814559085069,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.42789559085069,
    "time": 5145.640869140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (/ (* -1.7e+308 (- 1.7e+308 (* 1.7e+308 t))) -1.7e+308) -1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.3040212406251803,
    "avg_bits_err_improve": 63.69597875937482,
    "time": 17985.199462890625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.843251666115286,
    "avg_bits_err_output": 0.412009775004327,
    "avg_bits_err_improve": 61.43124189111096,
    "time": 8753.47900390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(* (if (!= (- (sqrt (fma -4.0 (* c a) (* b b))) b) 0.0) (* (/ (* c -4.0) (- (sqrt (fma a (* c -4.0) (* b b))) b)) a) (+ b (sqrt (fma -4.0 (* c a) (* b b))))) (/ -0.5 a))",
    "output_parens": 22,
    "avg_bits_err_input": 33.85652725117812,
    "avg_bits_err_output": 22.02032485589742,
    "avg_bits_err_improve": 11.8362023952807,
    "time": 24334.414306640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.09730309892419,
    "avg_bits_err_output": 22.177467408009896,
    "avg_bits_err_improve": 11.919835690914297,
    "time": 23642.47998046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2015.480712890625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.957346973747235,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 39.949221973747235,
    "time": 4193.106201171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.07051112173985,
    "avg_bits_err_output": 20.07051112173985,
    "avg_bits_err_improve": 0,
    "time": 10902.0517578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6618832283851797,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6618832283851797,
    "time": 9579.4228515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.035375,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.034874999999999996,
    "time": 6519.03564453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.023698120312590144,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.013323120312590144,
    "time": 4432.393310546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.01325,
    "time": 3244.487548828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0,
    "time": 1288.86767578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ c a) (+ b d)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40413477500432715,
    "avg_bits_err_output": 0.241,
    "avg_bits_err_improve": 0.16313477500432716,
    "time": 5366.43701171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (fma (cos x) (cos x) 1.0) 0.0) (/ (if (!= (* (cos x) (* (cos x) (* (cos x) (cos x)))) 0.0) (/ (- (* (* (cos x) (* (cos x) (* (cos x) (cos x)))) (* (cos x) (* (cos x) (* (cos x) (cos x))))) (* (cos x) (* (cos x) (* (cos x) (cos x))))) (* (cos x) (* (cos x) (* (cos x) (cos x))))) (fma (* (cos x) (cos x)) (* (cos x) (cos x)) -1.0)) (fma (cos x) (cos x) 1.0)) (fma (cos x) (cos x) -1.0)) (- -1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 68,
    "avg_bits_err_input": 29.33689209056337,
    "avg_bits_err_output": 29.336427848193075,
    "avg_bits_err_improve": 0.00046424237029540905,
    "time": 27409.017578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.32207227533444,
    "avg_bits_err_output": 0.2955212406251803,
    "avg_bits_err_improve": 24.026551034709257,
    "time": 11664.035888671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (- (tan x))) 0.0) (/ (log (+ 1.0 (expm1 (/ (- (* (sin x) (/ (sin x) (tan x))) (* x (/ (sin x) (tan x)))) (tan x))))) (/ (sin x) (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 30,
    "avg_bits_err_input": 29.891511944556225,
    "avg_bits_err_output": 29.900884738801828,
    "avg_bits_err_improve": -0.009372794245603444,
    "time": 32645.880859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.008719360937770431,
    "avg_bits_err_output": 0.008719360937770431,
    "avg_bits_err_improve": 0,
    "time": 2260.546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(/ (if (!= (* 100.0 (pow (+ (/ i n) 1.0) n)) 0.0) (/ (* (expm1 (* n (log1p (/ i n)))) (* (pow (+ (/ i n) 1.0) n) 10000.0)) (* 100.0 (pow (+ (/ i n) 1.0) n))) (fma (pow (+ (/ i n) 1.0) n) 100.0 -100.0)) (/ i n))",
    "output_parens": 26,
    "avg_bits_err_input": 47.55933602860441,
    "avg_bits_err_output": 13.888896147647076,
    "avg_bits_err_improve": 33.67043988095734,
    "time": 25762.45263671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(fma b (/ d (fma c c (* d d))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 8,
    "avg_bits_err_input": 26.282295503603127,
    "avg_bits_err_output": 23.162956859551347,
    "avg_bits_err_improve": 3.11933864405178,
    "time": 12606.153076171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 2e+279) (/ (fma a (- d) (- (* b c) (+ (* a (- d)) (* a d)))) (+ (* c c) (* d d))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 49,
    "avg_bits_err_input": 25.908890223171973,
    "avg_bits_err_output": 22.640451967061264,
    "avg_bits_err_improve": 3.2684382561107093,
    "time": 13909.43798828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.03425,
    "avg_bits_err_output": 0.024210878354688034,
    "avg_bits_err_improve": 0.010039121645311969,
    "time": 10206.155517578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* uy (* 2.0 PI))) (sqrt (- (fma (fma ux maxCos (- 1.0 ux)) (* ux maxCos) (- (- (fma ux maxCos (- 1.0 ux)) 1.0) (* ux (fma ux maxCos (- 1.0 ux))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.532161296898241,
    "avg_bits_err_output": 11.237917534107202,
    "avg_bits_err_improve": 2.294243762791039,
    "time": 32520.142333984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (- (+ ux (- ux (* ux ux))) (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.571100165100978,
    "avg_bits_err_output": 0.3373251944836311,
    "avg_bits_err_improve": 13.233774970617347,
    "time": 25021.5341796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (+ (* (- 1.0 ux) (* ux (* maxCos zi))) (* (sin (* PI (* uy 2.0))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* (* maxCos maxCos) (* ux (- ux (* ux ux))))))) yi))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.33834245490952625,
    "avg_bits_err_output": 0.3259990489406099,
    "avg_bits_err_improve": 0.012343405968916366,
    "time": 41826.45458984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (+ (+ 1.0 (cos (atan (* (/ alphay alphax) (tan (fma 2.0 (* PI u1) (* PI 0.5))))))) -1.0) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.20443398826188036,
    "avg_bits_err_output": 0.20579815415628666,
    "avg_bits_err_improve": -0.0013641658944062995,
    "time": 28313.20068359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(/ (/ (* (sqrt (/ u1 (- 1.0 u1))) 8.0) (/ -4.0 (sin (* 6.28318530718 u2)))) -2.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.5322783060501183,
    "avg_bits_err_output": 0.584408991606833,
    "avg_bits_err_improve": -0.05213068555671474,
    "time": 22260.690673828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(- (sqrt (/ u1 (- 1.0 u1))) (- (sqrt (/ u1 (- 1.0 u1))) (* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.32006129259685334,
    "avg_bits_err_output": 0.32691592944998216,
    "avg_bits_err_improve": -0.006854636853128815,
    "time": 18989.858642578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.3359695363788537,
    "avg_bits_err_output": 0.3361409007471095,
    "avg_bits_err_improve": -0.0001713643682558219,
    "time": 37361.8564453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05602140916728211,
    "avg_bits_err_output": 0.041313299846034435,
    "avg_bits_err_improve": 0.014708109321247678,
    "time": 13069.902587890625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (/ (exp (/ (fabs x) (- s))) (+ (exp (/ (fabs x) (- s))) 1.0)) (/ 1.0 (fma s (exp (/ (fabs x) (- s))) s)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13045220970122418,
    "avg_bits_err_output": 0.18113972173089088,
    "avg_bits_err_improve": -0.050687512029666704,
    "time": 21945.878173828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* PI (* x tau))) (* PI (* x tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6725636303603195,
    "avg_bits_err_output": 0.6763994120276566,
    "avg_bits_err_improve": -0.0038357816673371126,
    "time": 22585.292236328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.15501197676078995,
    "avg_bits_err_output": 0.15042157656993405,
    "avg_bits_err_improve": 0.004590400190855909,
    "time": 22713.26025390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.6561803163408895,
    "avg_bits_err_output": 2.65427467727866,
    "avg_bits_err_improve": 0.0019056390622296249,
    "time": 30315.53271484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (* (* cosTheta_i cosTheta_O) (/ 1.0 v)) (* (/ (exp (* sinTheta_O (/ sinTheta_i (- v)))) v) (/ 0.5 (sinh (/ 1.0 v)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4647366230633134,
    "avg_bits_err_output": 0.38466351226516715,
    "avg_bits_err_improve": 0.08007311079814627,
    "time": 26467.9140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v)) (exp (fma 0.6931 (* (log (/ 0.5 v)) 1.4427932477276006) 0.6931)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.13299457682521126,
    "avg_bits_err_output": 0.15354905575356428,
    "avg_bits_err_improve": -0.02055447892835302,
    "time": 26262.077392578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (/ (/ (- 1.0 (* alpha alpha)) (log (* alpha alpha))) PI)) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4683460707194643,
    "avg_bits_err_output": 0.47125866446766135,
    "avg_bits_err_improve": -0.002912593748197023,
    "time": 25619.975341796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- (fma u -1.3333333333333333 0.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 14,
    "avg_bits_err_input": 1.3189906511052305,
    "avg_bits_err_output": 0.4338781968856377,
    "avg_bits_err_improve": 0.8851124542195927,
    "time": 26436.386474609375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(expm1 (log1p (if (!= (+ s (* (log (/ 1.0 (fma u -4.0 1.0))) s)) 0.0) (* (* s (- -1.0 (log (/ 1.0 (fma u -4.0 1.0))))) (/ (- 0.0 (* (log (/ 1.0 (fma u -4.0 1.0))) s)) (+ s (* (log (/ 1.0 (fma u -4.0 1.0))) s)))) (- (- 0.0 (* (log (/ 1.0 (fma u -4.0 1.0))) s))))))",
    "output_parens": 32,
    "avg_bits_err_input": 12.41898949309484,
    "avg_bits_err_output": 12.43349040176605,
    "avg_bits_err_improve": -0.014500908671211121,
    "time": 23705.717041015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (/ (* (exp (* r (/ -0.3333333333333333 s))) 1.5) (* r (* PI 6.0))) (+ s s)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1354666053125164,
    "avg_bits_err_output": 0.14488058872525106,
    "avg_bits_err_improve": -0.009413983412734667,
    "time": 23142.543212890625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (- normAngle (* u normAngle))) (sin normAngle)) n0_i) (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8720949351974231,
    "avg_bits_err_output": 0.7007654661149811,
    "avg_bits_err_improve": 0.17132946908244195,
    "time": 28467.201171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) cosTheta) (sqrt PI)) (exp (* (- cosTheta) cosTheta)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.7015683320417706,
    "avg_bits_err_output": 0.5476861851359371,
    "avg_bits_err_improve": 0.15388214690583346,
    "time": 21252.709716796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(- (sin (* 2.0 (/ (/ (* PI (* PI (* u2 u2))) u2) PI))) (if (!= (* (sin (* 2.0 (* PI u2))) (- (sqrt (- (log (- 1.0 u1)))) 1.0)) 0.0) (/ 1.0 (/ 1.0 (- (* (sin (* 2.0 (* PI u2))) (- (sqrt (- (log (- 1.0 u1)))) 1.0))))) (- (* (sin (* 2.0 (* PI u2))) (- (sqrt (- (log (- 1.0 u1)))) 1.0)))))",
    "output_parens": 41,
    "avg_bits_err_input": 13.702145640368503,
    "avg_bits_err_output": 13.669900023103807,
    "avg_bits_err_improve": 0.03224561726469588,
    "time": 32063.875244140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(fma (* (fma (sqrt (- (log (- 1.0 u1)))) (cos (* 2.0 (* PI u2))) 1.0) (exp 2.0)) (exp -2.0) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 13.752268772711531,
    "avg_bits_err_output": 13.222699879093705,
    "avg_bits_err_improve": 0.5295688936178262,
    "time": 24106.247802734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(fma alpha alpha (fma alpha (- alpha) (* alpha (* (- alpha) (log (- 1.0 u0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 14.252310686522181,
    "avg_bits_err_output": 14.14968548340651,
    "avg_bits_err_improve": 0.10262520311567158,
    "time": 19126.12158203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (expm1 (log1p (/ cos2phi (* alphax alphax)))) (/ sin2phi (* alphay alphay))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.511917658031727,
    "avg_bits_err_output": 12.516724958269606,
    "avg_bits_err_improve": -0.0048073002378785645,
    "time": 16886.8984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (sin (* PI l)) F) (* (cos (* PI l)) F)))",
    "output_parens": 9,
    "avg_bits_err_input": 16.467013265433167,
    "avg_bits_err_output": 12.438822764987863,
    "avg_bits_err_improve": 4.028190500445303,
    "time": 24661.867431640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.213636842188131,
    "avg_bits_err_output": 0.15509436093777043,
    "avg_bits_err_improve": 0.05854248125036057,
    "time": 13268.9150390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (expm1 (log1p (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 14.485261577706648,
    "avg_bits_err_output": 11.108831976227503,
    "avg_bits_err_improve": 3.3764296014791455,
    "time": 19970.32568359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (expm1 (log1p (/ (+ (exp (* PI (/ f -4.0))) (exp (* PI (/ f 4.0)))) (- (expm1 (* PI (/ f 4.0))) (expm1 (* PI (/ f -4.0)))))))) (* PI -0.25))",
    "output_parens": 20,
    "avg_bits_err_input": 61.58862009234665,
    "avg_bits_err_output": 1.9521395608677168,
    "avg_bits_err_improve": 59.63648053147894,
    "time": 41113.166015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= l -3.8e+108) (/ (* (sqrt 2.0) t) (pow (fma l (- l) (* (/ (+ x 1.0) (+ x -1.0)) (+ (* l l) (* 2.0 (* t t))))) 0.5)) (if (<= l 2.2e+80) (/ (* (sqrt 2.0) t) (sqrt (+ (* (* l l) (+ (/ (+ x 1.0) (+ x -1.0)) -1.0)) (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t)))))) (* t 0.0)))",
    "output_parens": 36,
    "avg_bits_err_input": 42.7452470102987,
    "avg_bits_err_output": 37.254309851086056,
    "avg_bits_err_improve": 5.490937159212642,
    "time": 22345.69873046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin th) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin ky))",
    "output_parens": 10,
    "avg_bits_err_input": 3.9675895151539873,
    "avg_bits_err_output": 4.02064260226912,
    "avg_bits_err_improve": -0.053053087115133124,
    "time": 26796.399169921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.967667200391513,
    "avg_bits_err_output": 0.967667200391513,
    "avg_bits_err_improve": 0,
    "time": 10135.40966796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (+ (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 2.0 (* (pow (/ t l) 2.0) 4.0))) (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 2.0 (* (pow (/ t l) 2.0) 4.0))))))",
    "output_parens": 19,
    "avg_bits_err_input": 10.54989865402811,
    "avg_bits_err_output": 10.565023130594861,
    "avg_bits_err_improve": -0.015124476566750644,
    "time": 15440.208984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 5e-118) (sqrt (fma U (* (* 2.0 n) (- t (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (/ (* l l) Om))))) (* U (fma (- (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (/ (* l l) Om)))) (* 2.0 n) (* 2.0 (* n (fma (pow (/ l Om) 2.0) (* n (- U U*)) (* 2.0 (/ (* l l) Om))))))))) (if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 1e+153) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* (* 2.0 n) (* U (- t (fma n (* (pow (/ l Om) 2.0) (- U U*)) (* 2.0 (* l (/ l Om))))))))))",
    "output_parens": 94,
    "avg_bits_err_input": 34.772395436123226,
    "avg_bits_err_output": 29.357747698050154,
    "avg_bits_err_improve": 5.4146477380730715,
    "time": 39217.1318359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -2e-108) (/ 2.0 (* (/ (tan k) l) (* (pow (/ k t) 2.0) (* (pow t 3.0) (/ (sin k) l))))) (if (<= t 1.02e-108) (/ 2.0 (/ (* (exp (fma 3.0 (log t) (* 2.0 (log (/ k t))))) (* (sin k) (/ (tan k) l))) l)) (/ 2.0 (* (/ (tan k) l) (* (pow (/ k t) 2.0) (* (pow t 3.0) (/ (sin k) l)))))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.968548489729244,
    "avg_bits_err_output": 34.51151626371526,
    "avg_bits_err_improve": 13.457032226013986,
    "time": 40250.468017578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (pow t 3.0) (/ (sin k) l)) (* (tan k) (/ (+ 2.0 (pow (/ k t) 2.0)) l))))",
    "output_parens": 12,
    "avg_bits_err_input": 33.357204472368096,
    "avg_bits_err_output": 27.779270967913845,
    "avg_bits_err_improve": 5.577933504454251,
    "time": 21694.793701171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (* (fma a1 a1 (* a2 a2)) (exp (* (log 2.0) -0.5))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5120276343964563,
    "avg_bits_err_output": 0.4621334609550793,
    "avg_bits_err_improve": 0.04989417344137698,
    "time": 23360.962158203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (+ 0.5 (* k -0.5))) (pow k -0.5))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5343900507637622,
    "avg_bits_err_output": 0.500510622670347,
    "avg_bits_err_improve": 0.033879428093415265,
    "time": 19084.24755859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (if (!= (+ (exp (+ l l)) (exp (* l -2.0))) 0.0) (/ (if (!= (exp (* l -4.0)) 0.0) (/ (if (!= (+ (exp (fma l -4.0 (+ (+ l l) (+ l l)))) (exp (* l -8.0))) 0.0) (/ (- (exp (+ (fma l -4.0 (+ (+ l l) (+ l l))) (fma l -4.0 (+ (+ l l) (+ l l))))) (exp (* l -16.0))) (+ (exp (fma l -4.0 (+ (+ l l) (+ l l)))) (exp (* l -8.0)))) (- (exp (fma l -4.0 (+ (+ l l) (+ l l)))) (exp (* l -8.0)))) (exp (* l -4.0))) (- (exp (+ (+ l l) (+ l l))) (exp (* l -4.0)))) (+ (exp (+ l l)) (exp (* l -2.0)))) (- (exp (+ l l)) (exp (* l -2.0)))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 92,
    "avg_bits_err_input": 17.52382925669616,
    "avg_bits_err_output": 17.541836342448683,
    "avg_bits_err_improve": -0.0180070857525223,
    "time": 32569.031005859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= n 1e-11) (* (cos (- (/ (if (!= (* K n) 0.0) (* K (* (+ n m) (/ (/ K (/ K n)) n))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K n) 0.0) (* K (* (+ n m) (* n (- (exp (log1p (/ K (* K n)))) 1.0)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))))",
    "output_parens": 55,
    "avg_bits_err_input": 15.372463040371839,
    "avg_bits_err_output": 4.880483103336593,
    "avg_bits_err_improve": 10.491979937035246,
    "time": 20525.88720703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.87244812031259,
    "avg_bits_err_output": 18.87244812031259,
    "avg_bits_err_improve": 0,
    "time": 31308.519287109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (* (/ (pow (* D (/ M (+ d d))) 2.0) l) h))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.208183454186809,
    "avg_bits_err_output": 10.622245783965738,
    "avg_bits_err_improve": 3.585937670221071,
    "time": 15294.80419921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (* c0 (sqrt (+ (/ (/ A V) (+ l l)) (+ (/ (/ (/ A V) (+ l l)) 2.0) (/ (+ (- (/ (/ A l) (* V 4.0))) (/ (- (/ A (+ l l)) (/ A (* l -4.0))) V)) 2.0))))) (if (<= (* V l) -5.0) (* c0 (sqrt (/ A (* V l)))) (if (<= (* V l) 5e-42) (* c0 (sqrt (/ (/ A l) V))) (if (<= (* V l) 2e+145) (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (/ 1.0 (/ 1.0 (sqrt (/ A (* l V))))) (sqrt (/ A (* l V))))) (* c0 (sqrt (/ (* A (/ 2.0 V)) (+ l l))))))))",
    "output_parens": 64,
    "avg_bits_err_input": 19.039959213284444,
    "avg_bits_err_output": 16.793609517823935,
    "avg_bits_err_improve": 2.246349695460509,
    "time": 17029.771484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* d d) 5e-181) (* (/ c0 (* 2.0 w)) (- (+ (/ (* d (/ (* d (/ c0 D)) D)) (* w (+ h h))) (sqrt (* (fma (/ d (* w h)) (/ (* d (/ c0 D)) D) M) (fma (/ d (* w h)) (/ (* d (/ c0 D)) D) (- M))))) (- 0.0 (/ (* d (/ (* d (/ c0 D)) D)) (* w (+ h h)))))) (if (<= (* d d) 2e+180) (* (/ c0 (* 2.0 w)) (+ (* (/ (/ c0 (* w D)) (* D h)) (* d d)) (sqrt (* (fma (/ (/ c0 (* w D)) (* D h)) (* d d) M) (- (* (/ (/ c0 (* w D)) (* D h)) (* d d)) M))))) (* (/ c0 (* w 2.0)) (+ (* d (* (/ (/ d D) w) (/ (/ c0 D) h))) (sqrt (* (- (* d (* (/ (/ d D) w) (/ (/ c0 D) h))) M) (fma d (* (/ (/ d D) w) (/ (/ c0 D) h)) M)))))))",
    "output_parens": 91,
    "avg_bits_err_input": 59.97466461697975,
    "avg_bits_err_output": 54.17272754681912,
    "avg_bits_err_improve": 5.801937070160633,
    "time": 44726.55810546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d 30000.0) (* (sqrt (/ d l)) (- (sqrt (/ d h)) (/ (* (pow (/ (* D M) (+ d d)) 2.0) (* 0.5 (* h (sqrt (/ d h))))) l))) (* (sqrt (/ d l)) (- (sqrt (/ d h)) (* (* 0.5 h) (* (/ (pow (* D (/ M (* 2.0 d))) 2.0) l) (sqrt (/ d h)))))))",
    "output_parens": 34,
    "avg_bits_err_input": 27.179215347818232,
    "avg_bits_err_output": 25.257352417878696,
    "avg_bits_err_improve": 1.921862929939536,
    "time": 43613.057373046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (/ 0.5 (hypot 1.0 x)) 0.0) (/ (/ (- 0.25 (/ 0.25 (hypot 1.0 x))) (hypot 1.0 x)) (/ 0.5 (hypot 1.0 x))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 33,
    "avg_bits_err_input": 16.0976448010201,
    "avg_bits_err_output": 15.62482314857699,
    "avg_bits_err_improve": 0.47282165244310903,
    "time": 16041.42431640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ 1.3333333333333333 (* (- 1.0 (* v v)) (* PI (sqrt (- 2.0 (* v (* v 6.0)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9851981203125901,
    "avg_bits_err_output": 0.012344360937770433,
    "avg_bits_err_improve": 0.9728537593748197,
    "time": 4954.137451171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (- 2.0 (* v (* v 6.0))))) (* t (- 1.0 (* v v)))) (* (* v v) (/ 5.0 (* PI (* (sqrt (- 2.0 (* v (* v 6.0)))) (* t (- 1.0 (* v v))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.4699651755792754,
    "avg_bits_err_output": 0.11319116562662265,
    "avg_bits_err_improve": 0.35677400995265274,
    "time": 21396.95654296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (- (sqrt 2.0)) -4.0) (* (- 1.0 (* v v)) (sqrt (+ 1.0 (* (* v v) -3.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.011448120312590146,
    "avg_bits_err_output": 0.009698120312590146,
    "avg_bits_err_improve": 0.0017499999999999998,
    "time": 13257.3857421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5498065734829228,
    "avg_bits_err_output": 0.5498065734829228,
    "avg_bits_err_improve": 0,
    "time": 9197.66748046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output_parens": 7,
    "avg_bits_err_input": 1.8855198915566997,
    "avg_bits_err_output": 1.8855198915566997,
    "avg_bits_err_improve": 0,
    "time": 15688.35693359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (- (+ Vef (+ EDonor mu)) Ec) KbT)) -1.0)) (/ NaChar (- (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.023025757404635052,
    "avg_bits_err_output": 0.023025757404635052,
    "avg_bits_err_improve": 0,
    "time": 8487.376220703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (/ 1.0 (pow (fma a a (* b b)) -2.0)) (pow (fma a a (* b b)) 2.0)) (* 4.0 (* b b))) 1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 0.18252857187842536,
    "avg_bits_err_output": 0.19573195626045642,
    "avg_bits_err_improve": -0.013203384382031058,
    "time": 17144.986328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (fma a a (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18674133035577506,
    "avg_bits_err_output": 0.1865432100431849,
    "avg_bits_err_improve": 0.00019812031259017204,
    "time": 24449.438232421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (fma a a (* b b)) 2.0) (* 4.0 (+ (* (* b b) (+ a 3.0)) (* (* a a) (- 1.0 a))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18881329892135118,
    "avg_bits_err_output": 0.18863641923394134,
    "avg_bits_err_improve": 0.00017687968740984217,
    "time": 19459.760498046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(pow (fma (/ (+ (/ x (sqrt (fma x x (* 4.0 (* p p))))) (/ (+ x (+ x x)) (sqrt (fma x x (* 4.0 (* p p)))))) 4.0) 0.5 0.5) 0.5)",
    "output_parens": 16,
    "avg_bits_err_input": 13.46761535571047,
    "avg_bits_err_output": 13.596793002720329,
    "avg_bits_err_improve": -0.12917764700985934,
    "time": 15844.7001953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.82770324993401,
    "avg_bits_err_output": 0.073375,
    "avg_bits_err_improve": 40.75432824993401,
    "time": 6298.590087890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (if (!= (tan x) 0.0) (- (/ (* x (tan x)) (tan x)) (tan x)) (- x (tan x))))",
    "output_parens": 14,
    "avg_bits_err_input": 31.2218692274709,
    "avg_bits_err_output": 30.785956495244736,
    "avg_bits_err_improve": 0.4359127322261642,
    "time": 25196.5556640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) (- b_2)) 0.0) (* (/ c (- (- b_2) (sqrt (fma b_2 b_2 (* a (- c)))))) a) (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.3586201905314,
    "avg_bits_err_output": 22.077109058404197,
    "avg_bits_err_improve": 11.2815111321272,
    "time": 14343.51904296875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.39088452413298,
    "avg_bits_err_output": 34.39088452413298,
    "avg_bits_err_improve": 0,
    "time": 17509.235595703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (- 1.0 (cos x)) x) (/ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 31.249751031140796,
    "avg_bits_err_output": 30.52600246301496,
    "avg_bits_err_improve": 0.7237485681258349,
    "time": 17356.95654296875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (<= x 0.92) (- (expm1 (/ (log x) n))) (- (pow (+ x 1.0) (/ 1.0 n)) (- (exp (log1p (pow x (/ 1.0 n)))) 1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 32.315236178028606,
    "avg_bits_err_output": 11.735131178149645,
    "avg_bits_err_improve": 20.580104999878962,
    "time": 33553.200927734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (+ (log1p N) 1.0) 0.0) (/ (- (* (+ (log1p N) 1.0) (+ (log1p N) 1.0)) (* (+ (log1p N) 1.0) (+ (log N) 1.0))) (+ (log1p N) 1.0)) (- (log1p N) (log N)))",
    "output_parens": 21,
    "avg_bits_err_input": 29.67818123973979,
    "avg_bits_err_output": 29.70334917697821,
    "avg_bits_err_improve": -0.0251679372384217,
    "time": 14784.983642578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (+ (/ x (+ x 1.0)) -1.0) x)",
    "output_parens": 4,
    "avg_bits_err_input": 14.62474502994269,
    "avg_bits_err_output": 14.612460995887764,
    "avg_bits_err_improve": 0.012284034054927062,
    "time": 15202.426513671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (log (if (!= (- 1.0 (expm1 (cos (+ x eps)))) 0.0) (/ (fma (expm1 (cos (+ x eps))) (expm1 (cos (+ x eps))) -1.0) (+ (expm1 (cos (+ x eps))) -1.0)) (exp (cos (+ x eps))))) (cos x))",
    "output_parens": 24,
    "avg_bits_err_input": 39.42344523042765,
    "avg_bits_err_output": 39.539608743205584,
    "avg_bits_err_improve": -0.11616351277793058,
    "time": 25746.027099609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.974136662457955,
    "avg_bits_err_output": 29.68144855773604,
    "avg_bits_err_improve": 0.29268810472191475,
    "time": 15892.083740234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.415523609635727,
    "avg_bits_err_output": 30.415523609635727,
    "avg_bits_err_improve": 0,
    "time": 22620.92919921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (+ b (sqrt (fma a (* c -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.67674917748502,
    "avg_bits_err_output": 21.71263835955364,
    "avg_bits_err_improve": 11.964110817931381,
    "time": 24272.724609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (fma b b (* c (* a -4.0))))) -2.0) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.2952012372741,
    "avg_bits_err_output": 34.30547932682798,
    "avg_bits_err_improve": -0.010278089553878544,
    "time": 24412.60400390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (+ (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ -1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.48234358383173,
    "avg_bits_err_output": 0.821415199487455,
    "avg_bits_err_improve": 60.660928384344274,
    "time": 27658.94287109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (+ (log1p n) (* (- (log (+ n 1.0)) (log n)) n)) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 63.003586208812294,
    "avg_bits_err_output": 44.22176888048834,
    "avg_bits_err_improve": 18.781817328323953,
    "time": 21827.0234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(if (!= (log (/ (- 1.0 eps) (+ 1.0 eps))) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ 1.0 (log (/ (- 1.0 eps) (+ 1.0 eps)))) 0.0) (/ (if (!= (+ (log (/ (- 1.0 eps) (- eps -1.0))) (fma (+ 1.0 (log (/ (- 1.0 eps) (- eps -1.0)))) (+ 1.0 (log (/ (- 1.0 eps) (- eps -1.0)))) -1.0)) 0.0) (* (* (log (/ (- 1.0 eps) (- eps -1.0))) (+ 1.0 (log (/ (- 1.0 eps) (- eps -1.0))))) (/ (- (log (/ (- 1.0 eps) (- eps -1.0))) (- 1.0 (* (- -1.0 (log (/ (- 1.0 eps) (- eps -1.0)))) (- -1.0 (log (/ (- 1.0 eps) (- eps -1.0))))))) (+ (log (/ (- 1.0 eps) (- eps -1.0))) (fma (+ 1.0 (log (/ (- 1.0 eps) (- eps -1.0)))) (+ 1.0 (log (/ (- 1.0 eps) (- eps -1.0)))) -1.0)))) (* (log (/ (- 1.0 eps) (- eps -1.0))) (+ 1.0 (log (/ (- 1.0 eps) (- eps -1.0)))))) (+ 1.0 (log (/ (- 1.0 eps) (+ 1.0 eps))))) (log (/ (- 1.0 eps) (+ 1.0 eps)))))) (log (/ (- 1.0 eps) (+ 1.0 eps))))",
    "output_parens": 102,
    "avg_bits_err_input": 58.50507453227207,
    "avg_bits_err_output": 58.50940051765248,
    "avg_bits_err_improve": -0.004325985380411623,
    "time": 16779.26806640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(- (/ 1.0 x) (/ (/ 1.0 x) (/ (tan x) x)))",
    "output_parens": 6,
    "avg_bits_err_input": 59.88408315217295,
    "avg_bits_err_output": 59.88871700122716,
    "avg_bits_err_improve": -0.004633849054208383,
    "time": 28285.4287109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ a b)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.029807782035185,
    "avg_bits_err_output": 29.01615188013082,
    "avg_bits_err_improve": 31.013655901904364,
    "time": 27015.77490234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.20346794511585,
    "avg_bits_err_output": 0.46777124062518033,
    "avg_bits_err_improve": 40.735696704490664,
    "time": 7072.700439453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.72378344594542,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 58.723033445945426,
    "time": 4488.1591796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.601623270563962,
    "avg_bits_err_output": 0.02071736561972104,
    "avg_bits_err_improve": 29.58090590494424,
    "time": 5222.269287109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (exp x) (- (fma (exp x) 2.0 -1.0))) (exp x))",
    "output_parens": 8,
    "avg_bits_err_input": 29.934927720364247,
    "avg_bits_err_output": 29.052203325659132,
    "avg_bits_err_improve": 0.8827243947051144,
    "time": 27418.686767578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.74829177130195,
    "avg_bits_err_output": 9.74829177130195,
    "avg_bits_err_improve": 0,
    "time": 29323.114990234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(+ (/ (/ (sin (+ x eps)) (cos (+ x eps))) 2.0) (- (/ (tan (+ x eps)) 2.0) (tan x)))",
    "output_parens": 12,
    "avg_bits_err_input": 36.43921113191494,
    "avg_bits_err_output": 36.487594626604654,
    "avg_bits_err_improve": -0.048383494689716144,
    "time": 22583.845458984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.0311619115621,
    "avg_bits_err_output": 0.1656298875021634,
    "avg_bits_err_improve": 29.865532024059938,
    "time": 12972.80078125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (if (!= (+ (sin (+ x eps)) 1.0) 0.0) (/ (expm1 (log1p (* (sin (+ x eps)) (+ (sin (+ x eps)) 1.0)))) (+ (sin (+ x eps)) 1.0)) (sin (+ x eps))) (sin x))",
    "output_parens": 21,
    "avg_bits_err_input": 36.6909443846718,
    "avg_bits_err_output": 36.78143784995636,
    "avg_bits_err_improve": -0.0904934652845597,
    "time": 19524.933837890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(* (+ -1.0 (/ (sqrt x) (sqrt (- x -1.0)))) (/ -1.0 (sqrt x)))",
    "output_parens": 8,
    "avg_bits_err_input": 19.65787767276261,
    "avg_bits_err_output": 19.651566175256924,
    "avg_bits_err_improve": 0.006311497505684827,
    "time": 13505.48193359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 14.706098295422246,
    "avg_bits_err_output": 14.706098295422246,
    "avg_bits_err_improve": 0,
    "time": 4449.717529296875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.49036338333371,
    "avg_bits_err_output": 1.2922767898901002,
    "avg_bits_err_improve": 28.198086593443612,
    "time": 26997.693115234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (* (- 1.0 m) (- m (* m m))) v) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07734252772443494,
    "avg_bits_err_output": 0.07575472521415125,
    "avg_bits_err_improve": 0.0015878025102836896,
    "time": 8637.934814453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (/ (- b) (/ 1.0 a)))",
    "output_parens": 5,
    "avg_bits_err_input": 16.02900281559095,
    "avg_bits_err_output": 0.2665167296902944,
    "avg_bits_err_improve": 15.762486085900655,
    "time": 12106.296875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (/ angle 180.0)) 0.0) (/ 1.0 (/ 1.0 (* PI (/ angle 180.0)))) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.213355120457617,
    "avg_bits_err_output": 20.224365434025454,
    "avg_bits_err_improve": -0.011010313567837215,
    "time": 37897.6171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (expm1 (log1p (cos (* PI (/ angle 180.0))))))",
    "output_parens": 14,
    "avg_bits_err_input": 31.50825619267726,
    "avg_bits_err_output": 31.508780950104597,
    "avg_bits_err_improve": -0.0005247574273390399,
    "time": 34684.074462890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (if (!= (* PI (/ angle -180.0)) 0.0) (/ 1.0 (/ (/ 180.0 PI) angle)) (* angle (* PI 0.005555555555555556))))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.177170824327334,
    "avg_bits_err_output": 20.183468330355787,
    "avg_bits_err_improve": -0.006297506028452915,
    "time": 39514.222412109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17100804548200058,
    "avg_bits_err_output": 0.17100804548200058,
    "avg_bits_err_improve": 0,
    "time": 15513.9453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (* (tan x) (tan x))) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.33175743549675557,
    "avg_bits_err_output": 0.3332832874467403,
    "avg_bits_err_improve": -0.0015258519499847245,
    "time": 17029.390869140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (+ (+ (* e (cos v)) -1.0) 1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.1347193609377704,
    "avg_bits_err_output": 0.13826184218813103,
    "avg_bits_err_improve": -0.003542481250360635,
    "time": 17641.343017578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.104720361712022,
    "avg_bits_err_output": 17.098447668484702,
    "avg_bits_err_improve": 0.0062726932273200475,
    "time": 35083.3642578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0)))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (+ (* b b) (* a (* c -4.0)))))) a) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.76154780897245,
    "avg_bits_err_output": 0.17395505530735447,
    "avg_bits_err_improve": 52.5875927536651,
    "time": 23280.27490234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (* b b) 0.0) (/ (+ (* (* b b) (* b b)) (* (* c a) (* -4.0 (* b b)))) (* b b)) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 35,
    "avg_bits_err_input": 28.529744901384003,
    "avg_bits_err_output": 0.3464255656381613,
    "avg_bits_err_improve": 28.183319335745843,
    "time": 29530.564453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (* b b) 0.0) (/ (+ (* (* b b) (* b b)) (* a (* (* c -4.0) (* b b)))) (* b b)) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 35,
    "avg_bits_err_input": 43.742041672974686,
    "avg_bits_err_output": 0.26109022657016195,
    "avg_bits_err_improve": 43.480951446404525,
    "time": 28885.851806640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (+ b (sqrt (fma a (* c -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.678949773148155,
    "avg_bits_err_output": 21.71263835955364,
    "avg_bits_err_improve": 11.966311413594514,
    "time": 21407.04638671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (expm1 (log1p (sin (- lambda1 lambda2))))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.8554353573512197,
    "avg_bits_err_output": 0.8663791153331781,
    "avg_bits_err_improve": -0.010943757981958457,
    "time": 29682.408935546875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (log (exp (+ 1.0 (/ -4.0 (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0)))))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 28,
    "avg_bits_err_input": 29.589158234542733,
    "avg_bits_err_output": 29.565916726419758,
    "avg_bits_err_improve": 0.02324150812297532,
    "time": 21841.630859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (- (- -1.0 (exp (+ x x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 58.12261903136475,
    "avg_bits_err_output": 0.646261842188131,
    "avg_bits_err_improve": 57.47635718917662,
    "time": 19382.732177734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (- (exp (- x)))) 2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 58.055986656383155,
    "avg_bits_err_output": 0.07739624062518029,
    "avg_bits_err_improve": 57.97859041575798,
    "time": 9868.55517578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008448120312590145,
    "avg_bits_err_output": 0.008448120312590145,
    "avg_bits_err_improve": 0,
    "time": 1922.5244140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.881625,
    "avg_bits_err_output": 31.881625,
    "avg_bits_err_improve": 0,
    "time": 4064.60693359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (/ x (/ (+ x -1.0) -2.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.4959460051333,
    "avg_bits_err_output": 0.01854248125036058,
    "avg_bits_err_improve": 58.477403523882934,
    "time": 16003.548095703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.026875,
    "avg_bits_err_output": 0.027125,
    "avg_bits_err_improve": -0.0002500000000000002,
    "time": 4119.12158203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* (* eh (cos t)) (sin (atan (/ eh (* ew (tan t))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12744812031259015,
    "avg_bits_err_output": 0.126125,
    "avg_bits_err_improve": 0.0013231203125901592,
    "time": 22979,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.129,
    "avg_bits_err_output": 0.129,
    "avg_bits_err_improve": 0,
    "time": 29014.263671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.20791525352395,
    "avg_bits_err_output": 3.7676012769625267,
    "avg_bits_err_improve": 35.44031397656143,
    "time": 27231.000732421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (+ (/ (- (* b (/ b a)) a) (+ a a)) (/ (- (* b (/ b a)) a) (+ a a)))))",
    "output_parens": 13,
    "avg_bits_err_input": 14.227114489635877,
    "avg_bits_err_output": 0.013625,
    "avg_bits_err_improve": 14.213489489635878,
    "time": 6855.631591796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (cos phi1) (* (sin delta) (cos theta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1485108369463292,
    "avg_bits_err_output": 0.1475664335479909,
    "avg_bits_err_improve": 0.0009444033983382893,
    "time": 38058.794677734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.79820351486748,
    "avg_bits_err_output": 0.1700922937539663,
    "avg_bits_err_improve": 52.628111221113514,
    "time": 22906.7109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.675115352585333,
    "avg_bits_err_output": 0.33806691876117806,
    "avg_bits_err_improve": 28.337048433824155,
    "time": 24614.73828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.717116949100095,
    "avg_bits_err_output": 0.24173891094642383,
    "avg_bits_err_improve": 43.47537803815367,
    "time": 25286.775390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (/ (- (* a (* c -3.0))) (- (- b) (sqrt (fma b b (* a (* c -3.0)))))) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 33.73140712667356,
    "avg_bits_err_output": 22.67428509747769,
    "avg_bits_err_improve": 11.05712202919587,
    "time": 23485.54248046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (- (exp (log1p (cos (- lambda1 lambda2)))) 1.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 12.970295589353583,
    "avg_bits_err_output": 12.978804391263067,
    "avg_bits_err_improve": -0.008508801909483665,
    "time": 39219.125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (- (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 28.870565557947803,
    "avg_bits_err_output": 24.537717727525347,
    "avg_bits_err_improve": 4.332847830422455,
    "time": 15723.401611328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(if (!= (/ x (+ 1.0 x)) 0.0) (+ (/ (/ x (+ x -1.0)) (+ x x)) (/ (+ (/ x (+ x -1.0)) (* x (/ (+ x x) (+ x 1.0)))) (+ x x))) (+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.01325,
    "avg_bits_err_output": 0.04816748125036058,
    "avg_bits_err_improve": -0.03491748125036058,
    "time": 4974.79150390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (- 0.0 (/ 2.0 (+ x -1.0))) (+ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.062164864266142,
    "avg_bits_err_output": 0.071,
    "avg_bits_err_improve": 13.991164864266143,
    "time": 17864.677490234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (+ C (- A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (* F (- (* 2.0 (pow B 2.0)) (* A (* C 8.0)))))) (- (* C (* A 4.0)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.255105281448856,
    "avg_bits_err_output": 51.966259998084986,
    "avg_bits_err_improve": 0.2888452833638695,
    "time": 33215.618896484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* (atan (* (- (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))) (- C A)) (/ -1.0 B))) (/ 180.0 PI))",
    "output_parens": 12,
    "avg_bits_err_input": 29.818121364011493,
    "avg_bits_err_output": 29.81590233670875,
    "avg_bits_err_improve": 0.0022190273027433705,
    "time": 24569.0263671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (+ (sqrt (* (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (* F (fma 2.0 (pow B 2.0) (* A (* C -8.0)))))) (sqrt (* (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (* F (fma 2.0 (pow B 2.0) (* A (* C -8.0))))))) (- (* A (* C 8.0)) (- (pow B 2.0) (- (pow B 2.0)))))",
    "output_parens": 37,
    "avg_bits_err_input": 52.1401115349008,
    "avg_bits_err_output": 51.831512352712565,
    "avg_bits_err_improve": 0.3085991821882317,
    "time": 42157.918701171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (* (+ (cbrt (/ g (+ a a))) 2.0) (* (cbrt (/ g (+ a a))) (/ 1.0 (+ (cbrt (/ g (+ a a))) 2.0)))) (cbrt (/ g (+ a a))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.846903408451233,
    "avg_bits_err_output": 15.864811867831829,
    "avg_bits_err_improve": -0.017908459380596042,
    "time": 28186.1044921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- (sqrt (- (* g g) (* h h))) (- g)) 0.0) (* (/ h (- (- g) (sqrt (- (* g g) (* h h))))) h) (- (sqrt (- (* g g) (* h h))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 34,
    "avg_bits_err_input": 36.34708362534482,
    "avg_bits_err_output": 36.095276230402746,
    "avg_bits_err_improve": 0.2518073949420767,
    "time": 19211.64453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9905714296960648,
    "avg_bits_err_output": 0.9749718046888525,
    "avg_bits_err_improve": 0.015599625007212348,
    "time": 7855.858154296875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log1p (expm1 (/ (exp a) (+ (exp a) (exp b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.804125,
    "avg_bits_err_output": 0.8073562031259016,
    "avg_bits_err_improve": -0.0032312031259016383,
    "time": 4542.390869140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+268) (/ (* a1 (/ a2 b1)) b2) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-308) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+265) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 10.711597641688524,
    "avg_bits_err_output": 2.937712097290087,
    "avg_bits_err_improve": 7.773885544398437,
    "time": 9708.294189453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(+ (* x y) (- (log1p (exp x)) (* y (+ x x))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.49916476114975633,
    "avg_bits_err_output": 0.49125,
    "avg_bits_err_improve": 0.00791476114975631,
    "time": 11346.541015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(log1p (- x (- 1.0 (hypot 1.0 x))))",
    "output_parens": 4,
    "avg_bits_err_input": 52.9795181675399,
    "avg_bits_err_output": 15.983159899625294,
    "avg_bits_err_improve": 36.99635826791461,
    "time": 9485.092529296875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.681446684364617,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.681446684364617,
    "time": 2590.47998046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 2.0 (* x 2.0)) (+ x (+ x 2.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.01825,
    "avg_bits_err_improve": -0.004874999999999999,
    "time": 3745.900146484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1332.697509765625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (/ (* w r) (- 1.0 v)))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.774235722855092,
    "avg_bits_err_output": 0.3431742573564724,
    "avg_bits_err_improve": 12.43106146549862,
    "time": 20626.3251953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0) (* x1 x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 0.5159809249647487,
    "avg_bits_err_output": 0.2888797570446495,
    "avg_bits_err_improve": 0.22710116792009916,
    "time": 68348.26171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (+ t1 u)) (- v)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.44557671619713,
    "avg_bits_err_output": 1.0171531638130082,
    "avg_bits_err_improve": 17.42842355238412,
    "time": 7057.729248046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2291156015629507,
    "avg_bits_err_output": 0.2291156015629507,
    "avg_bits_err_improve": 0,
    "time": 5188.44921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0019481203125901445,
    "avg_bits_err_output": 0.0019481203125901445,
    "avg_bits_err_improve": 0,
    "time": 3003.383544921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* (/ (- (/ 1.0 b) (/ 1.0 a)) (+ a b)) (/ PI -2.0)) (- b a))",
    "output_parens": 9,
    "avg_bits_err_input": 14.481456735071005,
    "avg_bits_err_output": 0.29440188126189887,
    "avg_bits_err_improve": 14.187054853809105,
    "time": 15884.81787109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (exp (- (- x (* eps x)))) (+ (/ (exp (- (* x eps) x)) eps) (- (exp (- (fma x eps x))) (/ (exp (- (fma x eps x))) eps)))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.81263627458951,
    "avg_bits_err_output": 25.03612748408849,
    "avg_bits_err_improve": 4.776508790501023,
    "time": 24204.5205078125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.00425,
    "avg_bits_err_output": 0.00425,
    "avg_bits_err_improve": 0,
    "time": 4463.72705078125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (/ (+ 2.0 (+ 2.0 (* (- 2.0 (/ (/ 4.0 t) (+ (/ 2.0 t) 2.0))) (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0)))))) 2.0))",
    "output_parens": 27,
    "avg_bits_err_input": 0.007375,
    "avg_bits_err_output": 0.0369996474351172,
    "avg_bits_err_improve": -0.029624647435117203,
    "time": 15322.71044921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (- (* (* (/ t (+ t 1.0)) 4.0) (/ t (+ t 1.0))) -1.0) (+ 2.0 (* (/ t (+ t 1.0)) (* (/ t (+ t 1.0)) 4.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0335,
    "avg_bits_err_output": 0.0095,
    "avg_bits_err_improve": 0.024,
    "time": 8599.455322265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3385.857421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6331.994140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2359.392822265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.824276137616425,
    "avg_bits_err_output": 0.253125,
    "avg_bits_err_improve": 7.571151137616425,
    "time": 32788.865478515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(expm1 (log1p (- (pow (+ x eps) 5.0) (pow x 5.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 7.796183698191227,
    "avg_bits_err_output": 7.811471594147508,
    "avg_bits_err_improve": -0.015287895956281439,
    "time": 14272.1064453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(if (!= (+ (pow (+ x eps) 2.0) 1.0) 0.0) (/ (+ (* (pow (+ x eps) 2.0) (+ (pow (+ x eps) 2.0) 1.0)) (* (- (pow x 2.0)) (+ (pow (+ x eps) 2.0) 1.0))) (+ (if (!= (pow (+ x eps) 2.0) 0.0) (/ 1.0 (/ 1.0 (pow (+ x eps) 2.0))) (pow (+ x eps) 2.0)) 1.0)) (- (pow (+ x eps) 2.0) (pow x 2.0)))",
    "output_parens": 34,
    "avg_bits_err_input": 15.942217949882018,
    "avg_bits_err_output": 15.94286004969933,
    "avg_bits_err_improve": -0.0006420998173126691,
    "time": 17791.2421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (exp (* x (* x 10.0))) (+ (- (exp (* x (* x 10.0)))) (+ (exp (* x (* x 10.0))) (- (if (!= (- (exp (* x (* x 10.0))) (* (exp (* x (* x 10.0))) (- (cos x) 2.0))) 0.0) (* (* (exp (* x (* x 10.0))) (+ (+ (cos x) -1.0) -2.0)) (/ (* (expm1 (log1p (exp (* x (* x 10.0))))) (- 1.0 (cos x))) (- (exp (* x (* x 10.0))) (* (exp (* x (* x 10.0))) (- (cos x) 2.0))))) (* (exp (* x (* x 10.0))) (+ (cos x) -1.0)))))))",
    "output_parens": 59,
    "avg_bits_err_input": 3.5227591036483363,
    "avg_bits_err_output": 3.587291797734295,
    "avg_bits_err_improve": -0.06453269408595874,
    "time": 23041.553466796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -2e+18) (if (!= (* (/ (- -2.0 (* x (+ x x))) (* (fma x x 1.0) -2.0)) (/ x (fma x x 1.0))) 0.0) (/ (* (* x (/ (/ x (+ x (/ 1.0 x))) (+ x (/ 1.0 x)))) (/ 1.0 (/ x (+ x (/ 1.0 x))))) x) (/ x (fma x x 1.0))) (if (<= x 50000000.0) (/ x (fma x x 1.0)) (if (!= (* (/ (- -2.0 (* x (+ x x))) (* (fma x x 1.0) -2.0)) (/ x (fma x x 1.0))) 0.0) (/ (* (* x (/ (/ x (+ x (/ 1.0 x))) (+ x (/ 1.0 x)))) (/ 1.0 (/ x (+ x (/ 1.0 x))))) x) (/ x (fma x x 1.0)))))",
    "output_parens": 58,
    "avg_bits_err_input": 14.88172632941671,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 14.87385132941671,
    "time": 8557.25341796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.74881219898697,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.74881219898697,
    "time": 4779.04931640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.073055117603154,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.07280511760315,
    "time": 4307.057861328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.29375,
    "avg_bits_err_improve": 63.70625,
    "time": 18209.6005859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* 4e-32 (* t t))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325134047954,
    "avg_bits_err_output": 0.410012218755409,
    "avg_bits_err_improve": 61.43323912172413,
    "time": 8210.61083984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (fma b b (* c (* a -4.0))))) -2.0) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.2952012372741,
    "avg_bits_err_output": 34.30547932682798,
    "avg_bits_err_improve": -0.010278089553878544,
    "time": 26697.33203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* (* a c) -4.0)))) 0.0) (* (/ c (+ b (sqrt (fma a (* c -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 33.678949773148155,
    "avg_bits_err_output": 21.71263835955364,
    "avg_bits_err_improve": 11.966311413594514,
    "time": 25428.504150390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2465.921630859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.22878109257118,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 40.219406092571184,
    "time": 3627.97607421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.4468839462664,
    "avg_bits_err_output": 20.4468839462664,
    "avg_bits_err_improve": 0,
    "time": 5531.88427734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6851025900384813,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6851025900384813,
    "time": 9502.30419921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.038125,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.03725,
    "time": 9080.039306640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(* (+ a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.023719360937770433,
    "avg_bits_err_output": 0.023719360937770433,
    "avg_bits_err_improve": 0,
    "time": 5067.3232421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.015625,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.014875,
    "time": 3086.261962890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.000875,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.000875,
    "time": 1579.84326171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40499793281619606,
    "avg_bits_err_output": 0.235,
    "avg_bits_err_improve": 0.16999793281619607,
    "time": 4656.457275390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (- 1.0 (cos x)) 0.0) (* (- (- 1.0 (cos x)) (* (cos x) (- 1.0 (cos x)))) (/ 1.0 (log (+ 1.0 (expm1 (- 1.0 (cos x))))))) (- 1.0 (cos x)))",
    "output_parens": 20,
    "avg_bits_err_input": 30.082026384833778,
    "avg_bits_err_output": 30.107952578045442,
    "avg_bits_err_improve": -0.025926193211663673,
    "time": 14876.953857421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.184016653323592,
    "avg_bits_err_output": 0.2976462406251803,
    "avg_bits_err_improve": 23.88637041269841,
    "time": 11773.04931640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (sin x) 0.0) (/ (if (!= (* (sin x) (- (sin x))) 0.0) (/ (fma (* (sin x) (sin x)) (* (sin x) (sin x)) (* (* (sin x) (sin x)) (* (sin x) (- x)))) (* (sin x) (- (sin x)))) (* (sin x) (+ x (- (sin x))))) (sin x)) (- x (sin x))) (tan x))",
    "output_parens": 39,
    "avg_bits_err_input": 30.419596007039722,
    "avg_bits_err_output": 30.344005841389542,
    "avg_bits_err_improve": 0.07559016565017984,
    "time": 34184.478515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00575,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.005375,
    "time": 2162.602783203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (/ (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -200.0 (/ i n))) (* i (/ 2.0 i))))",
    "output_parens": 25,
    "avg_bits_err_input": 47.8415147810946,
    "avg_bits_err_output": 14.170887195250701,
    "avg_bits_err_improve": 33.6706275858439,
    "time": 27382.197265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* (/ d (fma d d (* c c))) b) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.609066136059518,
    "avg_bits_err_output": 22.911122102909594,
    "avg_bits_err_improve": 2.6979440331499234,
    "time": 16657.47314453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.982753069101992,
    "avg_bits_err_output": 23.06828250315598,
    "avg_bits_err_improve": 2.9144705659460115,
    "time": 16579.646728515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.037625,
    "avg_bits_err_output": 0.021926748933204645,
    "avg_bits_err_improve": 0.015698251066795354,
    "time": 5342.503173828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (if (!= (* -2.0 (* uy PI)) 0.0) (/ 1.0 (/ (/ 1.0 uy) (* 2.0 PI))) (* uy (* 2.0 PI)))) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 13.570782447418955,
    "avg_bits_err_output": 12.414847870206515,
    "avg_bits_err_improve": 1.1559345772124399,
    "time": 27984.614013671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (if (!= (- (* ux ux) ux) 0.0) (/ (- (* (- (* ux ux) ux) (- ux (* ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))) (* (- (* ux ux) ux) (- (* ux ux) ux))) (- (* ux ux) ux)) (- (+ ux ux) (* ux (+ ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))))))",
    "output_parens": 37,
    "avg_bits_err_input": 13.613212439241869,
    "avg_bits_err_output": 0.3781874287566743,
    "avg_bits_err_improve": 13.235025010485193,
    "time": 29865.84228515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (fma (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) yi) (* (- 1.0 ux) (* (* ux maxCos) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.33857795013352554,
    "avg_bits_err_output": 0.3287207641513304,
    "avg_bits_err_improve": 0.009857185982195149,
    "time": 42706.0712890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.2018069536215519,
    "avg_bits_err_output": 0.2018069536215519,
    "avg_bits_err_improve": 0,
    "time": 22966.148681640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (* u1 (* (/ u1 (if (!= (- (* u1 u1) u1) 0.0) (/ (- (* u1 (* (+ u1 -1.0) (- (* u1 u1) u1))) (* (+ u1 -1.0) (- (* u1 u1) u1))) (- (* u1 u1) u1)) (* (- 1.0 u1) (- 1.0 u1)))) (/ 1.0 (/ u1 (- 1.0 u1))))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 36,
    "avg_bits_err_input": 0.5326200048436213,
    "avg_bits_err_output": 0.5913964727594877,
    "avg_bits_err_improve": -0.05877646791586644,
    "time": 30469.84814453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3063428212477156,
    "avg_bits_err_output": 0.3063428212477156,
    "avg_bits_err_improve": 0,
    "time": 22860.027587890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.33003870797885915,
    "avg_bits_err_output": 0.3301637079788592,
    "avg_bits_err_improve": -0.00012500000000004174,
    "time": 50703.203369140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.059045489586960445,
    "avg_bits_err_output": 0.04249266654841896,
    "avg_bits_err_improve": 0.016552823038541484,
    "time": 13620.32861328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) s)) (+ (+ (exp (/ (fabs x) (/ s -2.0))) (* (exp (/ (fabs x) (- s))) 2.0)) 1.0))",
    "output_parens": 22,
    "avg_bits_err_input": 0.15872914394076296,
    "avg_bits_err_output": 0.10341531979442978,
    "avg_bits_err_improve": 0.05531382414633318,
    "time": 24020.0673828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6646417569147469,
    "avg_bits_err_output": 0.671383895373748,
    "avg_bits_err_improve": -0.006742138459001068,
    "time": 21472.166748046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.17133664783748395,
    "avg_bits_err_output": 0.16523923275447755,
    "avg_bits_err_improve": 0.006097415083006402,
    "time": 19125.903564453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (- (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) (* sinTheta_O (/ (+ sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 2.499164735521869,
    "avg_bits_err_output": 2.4990370173677423,
    "avg_bits_err_improve": 0.0001277181541268213,
    "time": 28113.90625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (sinh (/ 1.0 v))) (* (* (/ 0.5 v) (/ cosTheta_i (exp (* sinTheta_O (/ sinTheta_i v))))) (/ 1.0 v)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4724252346420962,
    "avg_bits_err_output": 0.3676383801673667,
    "avg_bits_err_improve": 0.10478685447472946,
    "time": 26870.420166015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (- (* cosTheta_i cosTheta_O) (+ 1.0 (* sinTheta_i sinTheta_O))) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.152237279469318,
    "avg_bits_err_output": 0.0928356502197444,
    "avg_bits_err_improve": 0.05940162924957361,
    "time": 11656.644287109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (* alpha alpha) 1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.47341459829872734,
    "avg_bits_err_output": 0.42795002935355086,
    "avg_bits_err_improve": 0.045464568945176476,
    "time": 23327.2275390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- (fma u -1.3333333333333333 0.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 14,
    "avg_bits_err_input": 1.3315633394986508,
    "avg_bits_err_output": 0.4309349640752108,
    "avg_bits_err_improve": 0.90062837542344,
    "time": 28002.675048828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(fma (log (sqrt (* (/ 1.0 (* (fma u -4.0 1.0) (fma u -4.0 1.0))) (/ 1.0 (/ 1.0 (fma u -4.0 1.0)))))) s (* (log (/ 1.0 (fma u -4.0 1.0))) (* 0.5 s)))",
    "output_parens": 16,
    "avg_bits_err_input": 12.384435603547642,
    "avg_bits_err_output": 12.4526537656832,
    "avg_bits_err_improve": -0.0682181621355582,
    "time": 26252.264892578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ 0.125 (* PI s))) (* 0.75 (/ (exp (/ r (* s -3.0))) (* s (* PI 6.0))))) r)",
    "output_parens": 15,
    "avg_bits_err_input": 0.14616035262140678,
    "avg_bits_err_output": 0.15252725359994404,
    "avg_bits_err_improve": -0.00636690097853726,
    "time": 28258.099609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9163473813057331,
    "avg_bits_err_output": 0.7107310999372732,
    "avg_bits_err_improve": 0.20561628136845989,
    "time": 28547.572998046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7136843510275821,
    "avg_bits_err_output": 0.47425739110826776,
    "avg_bits_err_improve": 0.23942695991931434,
    "time": 21427.490234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (sin (if (!= (+ -2.0 (* (* PI u2) -2.0)) 0.0) (* (fma PI (* 2.0 u2) 2.0) (/ (* PI (* 2.0 u2)) (fma PI (* 2.0 u2) 2.0))) (* PI (* 2.0 u2)))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.477390005953321,
    "avg_bits_err_output": 13.478529159481697,
    "avg_bits_err_improve": -0.0011391535283760135,
    "time": 30667.82958984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (fma (sqrt (- (log (- 1.0 u1)))) (cos (* PI (* u2 2.0))) -1.0) -1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 13.526408367458307,
    "avg_bits_err_output": 13.543048609918948,
    "avg_bits_err_improve": -0.016640242460640664,
    "time": 25535.513916015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* (- alpha) alpha) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.343850610989191,
    "avg_bits_err_output": 0.3283680453140324,
    "avg_bits_err_improve": 14.015482565675159,
    "time": 16935.823486328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (if (!= (/ cos2phi (* alphax alphax)) 0.0) (/ 1.0 (/ 1.0 (/ cos2phi (* alphax alphax)))) (/ cos2phi (* alphax alphax))) (/ sin2phi (* alphay alphay))))",
    "output_parens": 17,
    "avg_bits_err_input": 12.578819480856613,
    "avg_bits_err_output": 12.57878495666825,
    "avg_bits_err_improve": 3.4524188363249664e-05,
    "time": 21042.151123046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.444907328151956,
    "avg_bits_err_output": 12.30527665433613,
    "avg_bits_err_improve": 4.139630673815827,
    "time": 23937.6796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21333116579459072,
    "avg_bits_err_output": 0.15601744391904987,
    "avg_bits_err_improve": 0.057313721875540846,
    "time": 15212.383544921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.883072798316967,
    "avg_bits_err_output": 10.618202428838172,
    "avg_bits_err_improve": 3.2648703694787944,
    "time": 21477.016357421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* f (* PI -0.5)))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.25))",
    "output_parens": 31,
    "avg_bits_err_input": 61.58871014308897,
    "avg_bits_err_output": 1.9025146214032504,
    "avg_bits_err_improve": 59.68619552168572,
    "time": 45391.594970703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* (* l l) (- (- (/ (/ (+ (- x) (- x)) (+ x -1.0)) -2.0) 1.0) (/ -1.0 (+ x -1.0))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 42.99137361713371,
    "avg_bits_err_output": 35.060415260588854,
    "avg_bits_err_improve": 7.930958356544856,
    "time": 23531.07568359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 4.085453883550879,
    "avg_bits_err_output": 4.085453883550879,
    "avg_bits_err_improve": 0,
    "time": 27535.9755859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (expm1 (log1p (sqrt (- (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0))))) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 1.1194553301976353,
    "avg_bits_err_output": 1.1195803301976353,
    "avg_bits_err_improve": -0.00012499999999993072,
    "time": 13423.95654296875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.450937440019898,
    "avg_bits_err_output": 10.450937440019898,
    "avg_bits_err_improve": 0,
    "time": 9437.52197265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 0.0) (sqrt (if (!= (* U (* 2.0 (* n t))) 0.0) (* (* U (- (fma 2.0 (* l (/ l Om)) (* n (* (- U U*) (pow (/ l Om) 2.0)))) t)) (* (* 2.0 n) (/ (/ (* (* n (* U t)) -1.0) (* n t)) U))) (* U (* (- (fma 2.0 (* l (/ l Om)) (* (- U U*) (* n (pow (/ l Om) 2.0)))) t) (* n -2.0))))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 2e+305) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (- (* (pow (/ l Om) 2.0) (* (* n U*) (* 2.0 (* n U)))) (* 2.0 (+ (* (/ l Om) (* (* l 2.0) (* n U))) (* (- (* (pow (/ l Om) 2.0) (* n U)) t) (* n U))))))))",
    "output_parens": 104,
    "avg_bits_err_input": 34.54947140814998,
    "avg_bits_err_output": 27.818222764550644,
    "avg_bits_err_improve": 6.731248643599333,
    "time": 35001.82958984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= k -4.5e-125) (/ 2.0 (/ (* (pow (/ k t) 2.0) (* (tan k) (* (pow t 3.0) (/ (sin k) l)))) l)) (if (<= k 1.7e+126) (/ 2.0 (/ (/ (* (* (sin k) (exp (fma 3.0 (log t) (* 2.0 (log (/ k t)))))) (tan k)) l) l)) (/ (/ 2.0 (tan k)) (* (/ (* (sin k) (/ (pow t 3.0) l)) l) (pow (/ k t) 2.0)))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.70343549375484,
    "avg_bits_err_output": 37.35609289166919,
    "avg_bits_err_improve": 10.347342602085646,
    "time": 37613.697998046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (/ (* (pow t 3.0) (sin k)) l) l) (* (tan k) (+ (pow (/ k t) 2.0) 2.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.342430985604025,
    "avg_bits_err_output": 28.69069945794281,
    "avg_bits_err_improve": 3.651731527661216,
    "time": 20483.207763671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(+ (/ (* (+ (* (cos th) a1) (* (cos th) a1)) a1) (* 2.0 (sqrt 2.0))) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.5184238750216361,
    "avg_bits_err_output": 0.5178315812676697,
    "avg_bits_err_improve": 0.0005922937539664108,
    "time": 22075.537841796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (+ 0.5 (/ k -2.0))) (pow k -0.5))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5140279260500398,
    "avg_bits_err_output": 0.47662547204409883,
    "avg_bits_err_improve": 0.037402454005940944,
    "time": 18017.0146484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (if (!= (+ (exp (+ l l)) (exp (* l -2.0))) 0.0) (/ (if (!= (exp (* l -4.0)) 0.0) (/ (if (!= (+ (exp (fma l -4.0 (+ (+ l l) (+ l l)))) (exp (* l -8.0))) 0.0) (/ (- (exp (+ (fma l -4.0 (+ (+ l l) (+ l l))) (fma l -4.0 (+ (+ l l) (+ l l))))) (exp (* l -16.0))) (+ (exp (fma l -4.0 (+ (+ l l) (+ l l)))) (exp (* l -8.0)))) (- (exp (fma l -4.0 (+ (+ l l) (+ l l)))) (exp (* l -8.0)))) (exp (* l -4.0))) (- (exp (+ (+ l l) (+ l l))) (exp (* l -4.0)))) (+ (exp (+ l l)) (exp (* l -2.0)))) (- (exp (+ l l)) (exp (* l -2.0)))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 92,
    "avg_bits_err_input": 17.213703918742553,
    "avg_bits_err_output": 17.225388690887485,
    "avg_bits_err_improve": -0.011684772144931799,
    "time": 32254.73779296875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (if (!= (* K (+ m n)) 0.0) (/ 1.0 (/ 1.0 (* K (+ m n)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 24,
    "avg_bits_err_input": 15.008031903246641,
    "avg_bits_err_output": 15.005036996890055,
    "avg_bits_err_improve": 0.0029949063565855027,
    "time": 29320.0302734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.203969360937773,
    "avg_bits_err_output": 18.203969360937773,
    "avg_bits_err_improve": 0,
    "time": 26649.402099609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.624542998972204,
    "avg_bits_err_output": 11.424732148326889,
    "avg_bits_err_improve": 3.1998108506453153,
    "time": 16118.112548828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (* c0 (sqrt (/ (/ A V) l))) (if (<= (* V l) -4e-189) (* c0 (sqrt (+ (/ (+ A (+ A A)) (* (+ l l) (+ V V))) (/ A (* (+ l l) (+ V V)))))) (if (<= (* V l) 4e-149) (* c0 (sqrt (/ (/ A V) l))) (if (<= (* V l) 2e+129) (* c0 (sqrt (if (!= (- (* (/ A (* V l)) 0.25) (/ (/ A (* V l)) -4.0)) 0.0) (* (/ A (* V l)) (/ A (* (* 2.0 (* V l)) (- (* (/ A (* V l)) 0.25) (/ (/ A (* V l)) -4.0))))) (/ A (* V l))))) (* c0 (if (!= (sqrt (/ (/ A l) V)) 0.0) (/ (* (sqrt (/ (/ A l) V)) (sqrt (/ (/ A l) V))) (sqrt (/ (/ A l) V))) (sqrt (/ (/ A l) V))))))))",
    "output_parens": 81,
    "avg_bits_err_input": 19.18210017194593,
    "avg_bits_err_output": 15.14447974825075,
    "avg_bits_err_improve": 4.037620423695179,
    "time": 17168.09912109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 2e+86) (/ (/ (* c0 (+ (* (/ (/ d w) h) (* (/ c0 D) (/ d D))) (sqrt (* (fma (/ (/ d w) h) (* (/ c0 D) (/ d D)) M) (fma (/ (/ d w) h) (* (/ c0 D) (/ d D)) (- M)))))) w) 2.0) (/ (/ (* c0 (if (!= (sqrt (* (fma (/ d (* w h)) (/ (* d (/ c0 D)) D) M) (fma (/ d (* w h)) (/ (* d (/ c0 D)) D) (- M)))) 0.0) 0.0 (fma c0 (/ (* d d) (* (* w D) (* D h))) (sqrt (* (+ (* (/ d (* w h)) (* c0 (/ d (* D D)))) M) (fma (/ d (* w h)) (/ (* d (/ c0 D)) D) (- M))))))) w) 2.0))",
    "output_parens": 95,
    "avg_bits_err_input": 59.74169802210378,
    "avg_bits_err_output": 31.045562818299093,
    "avg_bits_err_improve": 28.69613520380469,
    "time": 47221.84228515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) -2e+135) (- (* (sqrt (/ d h)) (sqrt (/ d l))) (fma (* (sqrt (/ d h)) (/ h l)) (* 0.5 (* (pow (* M (/ D (+ d d))) 2.0) (sqrt (/ d l)))) 0.0)) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* (/ (pow (/ (* D M) (+ d d)) 2.0) (+ l l)) h))))",
    "output_parens": 49,
    "avg_bits_err_input": 27.016522333590924,
    "avg_bits_err_output": 25.403052526651933,
    "avg_bits_err_improve": 1.6134698069389906,
    "time": 44149.468505859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (+ 0.5 (log (exp (/ -0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.448066746173776,
    "avg_bits_err_output": 14.96633679190362,
    "avg_bits_err_improve": 0.48172995427015586,
    "time": 32717.5224609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9822924812503606,
    "avg_bits_err_output": 0.013782173480336583,
    "avg_bits_err_improve": 0.968510307770024,
    "time": 2893.619140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (- 2.0 (* v (* v 6.0))))) (* t (- 1.0 (* v v)))) (* (* v v) (/ 5.0 (* PI (* (sqrt (- 2.0 (* v (* v 6.0)))) (* t (- 1.0 (* v v))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.40754667459338745,
    "avg_bits_err_output": 0.1145543234384916,
    "avg_bits_err_improve": 0.29299235115489586,
    "time": 23064.91015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(- (* (/ (sqrt 2.0) 4.0) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (fma v v -1.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.015026789890100095,
    "avg_bits_err_output": 0.013005549264919807,
    "avg_bits_err_improve": 0.0020212406251802883,
    "time": 5312.34521484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.586107011897837,
    "avg_bits_err_output": 0.586107011897837,
    "avg_bits_err_improve": 0,
    "time": 9939.064208984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.06915416049006,
    "avg_bits_err_output": 2.0355079198648798,
    "avg_bits_err_improve": 0.03364624062518029,
    "time": 15559.758544921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- Vef (- Ec (+ mu EDonor))) KbT)))) (/ NaChar (- (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02500558392515775,
    "avg_bits_err_output": 0.02500558392515775,
    "avg_bits_err_improve": 0,
    "time": 10196.303466796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (/ 1.0 (pow (fma a a (* b b)) -2.0)) (pow (fma a a (* b b)) 2.0)) (* 4.0 (* b b))) 1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 0.1824013316399258,
    "avg_bits_err_output": 0.20052199375973545,
    "avg_bits_err_improve": -0.018120662119809644,
    "time": 15847.581787109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (fma a a (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.1823637998834221,
    "avg_bits_err_output": 0.1811231983204714,
    "avg_bits_err_improve": 0.001240601562950694,
    "time": 17672.22314453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18817552734808446,
    "avg_bits_err_output": 0.18817552734808446,
    "avg_bits_err_improve": 0,
    "time": 4089.27490234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (+ (/ x (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0)) (+ (/ (+ x (+ (+ x x) (+ x x))) (* 4.0 (* (sqrt (fma 4.0 (* p p) (* x x))) 2.0))) (/ x (* 4.0 (* (sqrt (fma 4.0 (* p p) (* x x))) 2.0))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 13.050855588987446,
    "avg_bits_err_output": 13.096428257470187,
    "avg_bits_err_improve": -0.04557266848274111,
    "time": 15497.4013671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (if (!= (+ 1.0 (+ (/ (expm1 (* 2.0 x)) (expm1 x)) 1.0)) 0.0) (/ (- (* (+ (/ (expm1 (* 2.0 x)) (expm1 x)) 1.0) (+ (/ (expm1 (* 2.0 x)) (expm1 x)) 1.0)) 1.0) (+ 1.0 (+ (/ (expm1 (* 2.0 x)) (expm1 x)) 1.0))) (/ (expm1 (* 2.0 x)) (expm1 x))))",
    "output_parens": 32,
    "avg_bits_err_input": 40.95910217272023,
    "avg_bits_err_output": 0.068875,
    "avg_bits_err_improve": 40.89022717272023,
    "time": 8554.295166015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (/ (+ (sin x) (- (sin x) (+ x x))) (- (tan x) x)) 2.0)",
    "output_parens": 9,
    "avg_bits_err_input": 31.1622441417708,
    "avg_bits_err_output": 31.238988910453802,
    "avg_bits_err_improve": -0.07674476868300317,
    "time": 20399.8447265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- b_2) 0.0) (if (!= (/ (* b_2 b_2) b_2) 0.0) (/ (/ (fma (sqrt (- (* b_2 b_2) (* a c))) (* b_2 (/ 1.0 b_2)) (/ 1.0 (/ -1.0 b_2))) (/ 1.0 b_2)) (/ (* b_2 b_2) b_2)) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a)",
    "output_parens": 32,
    "avg_bits_err_input": 33.58034283479927,
    "avg_bits_err_output": 34.153087687034606,
    "avg_bits_err_improve": -0.5727448522353384,
    "time": 13723.654296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (if (!= (- (* b_2 b_2) (* a c)) 0.0) (/ 1.0 (/ 1.0 (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 17,
    "avg_bits_err_input": 34.07013790512233,
    "avg_bits_err_output": 34.302229573864565,
    "avg_bits_err_improve": -0.2320916687422354,
    "time": 15180.80712890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.809175377527488,
    "avg_bits_err_output": 31.054778701911584,
    "avg_bits_err_improve": 0.7543966756159044,
    "time": 17158.06640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.28090906370833,
    "avg_bits_err_output": 10.825041998956458,
    "avg_bits_err_improve": 21.45586706475187,
    "time": 31176.48486328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (- (log1p N) (log N)) 0.0) (/ (* (- (log N) (log1p N)) (- (fma -1.0 (log N) (log N)) (- (log N) (log1p N)))) (if (!= (+ (- (log1p N)) (- (log N))) 0.0) (/ (fma (log N) (- (log N)) (* (log1p N) (log1p N))) (+ (- (log1p N)) (- (log N)))) (- (log N) (log1p N)))) (- (log1p N) (log N)))",
    "output_parens": 43,
    "avg_bits_err_input": 29.299182087719696,
    "avg_bits_err_output": 29.304955609122114,
    "avg_bits_err_improve": -0.005773521402417714,
    "time": 14821.396484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (- (/ (+ (/ -1.0 x) (/ (/ x x) (+ 1.0 x))) 2.0) (- (/ (/ -1.0 (/ (+ x 1.0) x)) (+ (+ x x) (+ x x))) (/ (+ -2.0 (/ 1.0 (/ (+ x 1.0) x))) (+ (+ x x) (+ x x))))) 0.0)",
    "output_parens": 24,
    "avg_bits_err_input": 14.731404307233335,
    "avg_bits_err_output": 14.721604036649824,
    "avg_bits_err_improve": 0.009800270583511406,
    "time": 17580.64501953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (log1p (expm1 (cos (+ x eps)))) (+ 1.0 (+ (cos x) -1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.3162565886154,
    "avg_bits_err_output": 39.350152108982876,
    "avg_bits_err_improve": -0.0338955203674729,
    "time": 24280.97998046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.61538023469967,
    "avg_bits_err_output": 29.327193382933473,
    "avg_bits_err_improve": 0.2881868517661985,
    "time": 14948.747802734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.256443566921956,
    "avg_bits_err_output": 30.256443566921956,
    "avg_bits_err_improve": 0,
    "time": 22392.31005859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.98275498666728,
    "avg_bits_err_output": 33.98275498666728,
    "avg_bits_err_improve": 0,
    "time": 23996.12548828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.42168904118794,
    "avg_bits_err_output": 34.42168904118794,
    "avg_bits_err_improve": 0,
    "time": 23933.963134765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.33684103380118,
    "avg_bits_err_output": 0.8779766977415902,
    "avg_bits_err_improve": 60.45886433605959,
    "time": 25708.103271484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))) 0.0) (- (* (fma n (- (log1p n) (log n)) (log1p n)) (/ (fma n (- (log1p n) (log n)) (log1p n)) (- -1.0 (if (!= (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0)) 0.0) (/ (+ (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0)) (* (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0)) (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0)))) (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0))) (fma n (- (log1p n) (log n)) (log1p n))))))) (+ (fma n (- (log1p n) (log n)) (log1p n)) -1.0))",
    "output_parens": 68,
    "avg_bits_err_input": 63.0083649550288,
    "avg_bits_err_output": 44.207468317961606,
    "avg_bits_err_improve": 18.800896637067197,
    "time": 19154.733642578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.53179012753429,
    "avg_bits_err_output": 58.492612005702235,
    "avg_bits_err_improve": 0.03917812183205882,
    "time": 16219.856689453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(* (/ 2.0 x) (/ (log (+ 1.0 (expm1 (/ (- 1.0 (/ x (tan x))) x)))) (/ 2.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 59.87089322200644,
    "avg_bits_err_output": 59.861463951566876,
    "avg_bits_err_improve": 0.009429270439561321,
    "time": 28270.01171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (if (!= (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a)))) 0.0) (/ 1.0 (/ 1.0 (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a)))))) (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a))))) (expm1 (* eps b)))",
    "output_parens": 28,
    "avg_bits_err_input": 60.37253754349297,
    "avg_bits_err_output": 29.596792352123757,
    "avg_bits_err_improve": 30.77574519136921,
    "time": 27043.34130859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.26232657018524,
    "avg_bits_err_output": 0.39649060156295074,
    "avg_bits_err_improve": 40.865835968622285,
    "time": 8012.33544921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.71435071468072,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.71347571468072,
    "time": 3507.417236328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.3258058584518,
    "avg_bits_err_output": 0.01681923215775668,
    "avg_bits_err_improve": 29.308986626294043,
    "time": 4870.547607421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(+ (expm1 (- x)) (expm1 x))",
    "output_parens": 4,
    "avg_bits_err_input": 29.413189572216908,
    "avg_bits_err_output": 28.563202208849727,
    "avg_bits_err_improve": 0.8499873633671804,
    "time": 27803.076904296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.814365027234135,
    "avg_bits_err_output": 9.814365027234135,
    "avg_bits_err_improve": 0,
    "time": 34378.445068359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (/ (* (cos (+ x eps)) (tan (+ x eps))) (cos (+ x eps))) (tan x))",
    "output_parens": 10,
    "avg_bits_err_input": 37.270815854716275,
    "avg_bits_err_output": 37.28086150432733,
    "avg_bits_err_improve": -0.010045649611058138,
    "time": 22258.437255859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (if (!= (/ (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) 2.0) 0.0) (- (/ 0.75 (+ (sqrt (+ 1.0 x)) (sqrt x))) (/ -0.25 (+ (sqrt (+ 1.0 x)) (sqrt x)))) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x)))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 34,
    "avg_bits_err_input": 29.537471904759915,
    "avg_bits_err_output": 0.1614624062518029,
    "avg_bits_err_improve": 29.37600949850811,
    "time": 17563.827392578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 36.47468880428797,
    "avg_bits_err_output": 36.47468880428797,
    "avg_bits_err_improve": 0,
    "time": 19271.404541015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.69575315252571,
    "avg_bits_err_output": 19.552476563626602,
    "avg_bits_err_improve": 0.14327658889910921,
    "time": 15831.3076171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ N 1.0)) (atan N)) 0.0) (* (+ (atan (+ N 1.0)) (atan N)) (if (!= (/ (atan (+ N 1.0)) (- (- (atan N)) (atan (+ N 1.0)))) 0.0) (/ (fma (/ (atan (+ N 1.0)) (- (- (atan N)) (atan (+ N 1.0)))) (/ (atan (+ N 1.0)) (- (- (atan N)) (atan (+ N 1.0)))) (fma (/ (atan (+ N 1.0)) (- (- (atan N)) (atan (+ N 1.0)))) (/ (- (atan N) (atan (+ N 1.0))) (- (- (atan N)) (atan (+ N 1.0)))) (* (/ (atan (+ N 1.0)) (- (- (atan N)) (atan (+ N 1.0)))) (/ (- (atan (+ N 1.0))) (- (- (atan N)) (atan (+ N 1.0))))))) (/ (atan (+ N 1.0)) (- (- (atan N)) (atan (+ N 1.0))))) (/ (- (atan (+ N 1.0)) (atan N)) (+ (atan (+ N 1.0)) (atan N))))) (- (atan (+ N 1.0)) (atan N)))",
    "output_parens": 97,
    "avg_bits_err_input": 15.167809408758213,
    "avg_bits_err_output": 15.188320198736179,
    "avg_bits_err_improve": -0.020510789977965516,
    "time": 19287.010986328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.719850736957508,
    "avg_bits_err_output": 1.2385090535832974,
    "avg_bits_err_improve": 28.48134168337421,
    "time": 25640.92919921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (* (/ m v) (* (- 1.0 m) (- 1.0 m))) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.08232272405410936,
    "avg_bits_err_output": 0.0733627615533882,
    "avg_bits_err_improve": 0.00895996250072116,
    "time": 15592.115966796875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(+ (* (* a b) (* a (/ b -4.0))) (/ (* (* a b) (* b (+ a (+ a a)))) -4.0))",
    "output_parens": 11,
    "avg_bits_err_input": 16.03783142545891,
    "avg_bits_err_output": 0.30166785781763816,
    "avg_bits_err_improve": 15.736163567641274,
    "time": 10859.292724609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (log1p (expm1 (sin (* PI (* angle 0.005555555555555556)))))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.389233911526752,
    "avg_bits_err_output": 20.386409578106132,
    "avg_bits_err_improve": 0.002824333420619496,
    "time": 40457.11572265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (sin (* PI (/ angle 180.0))) (* (- (pow b 2.0) (pow a 2.0)) (cos (* PI (/ angle 180.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 31.27805907037909,
    "avg_bits_err_output": 31.23991980437855,
    "avg_bits_err_improve": 0.038139266000538186,
    "time": 39606.988525390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* angle (/ PI 180.0)))) 2.0) (pow (* b (cos (* angle (/ PI 180.0)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.15324652601649,
    "avg_bits_err_output": 20.112361681241357,
    "avg_bits_err_improve": 0.04088484477513177,
    "time": 42419.367919921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1864505640636719,
    "avg_bits_err_output": 0.1800153547271332,
    "avg_bits_err_improve": 0.006435209336538683,
    "time": 14601.14501953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (* (tan x) (tan x))) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.31238967449275823,
    "avg_bits_err_output": 0.3154109398231021,
    "avg_bits_err_improve": -0.0030212653303438586,
    "time": 18782.665771484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (/ e (+ 1.0 (* e (cos v)))) (sin v))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1309387218755409,
    "avg_bits_err_output": 0.1299174812503606,
    "avg_bits_err_improve": 0.001021240625180303,
    "time": 19712.350830078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.032407256751274,
    "avg_bits_err_output": 17.024819025085606,
    "avg_bits_err_improve": 0.0075882316656681326,
    "time": 34761.783935546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (if (!= (+ b (sqrt (fma b b (* -4.0 (* c a))))) 0.0) (* -4.0 (* a (/ c (+ b (sqrt (fma b b (* -4.0 (* c a)))))))) (- (sqrt (fma b b (* -4.0 (* c a)))) b)) a) 0.5)",
    "output_parens": 22,
    "avg_bits_err_input": 52.75275759132865,
    "avg_bits_err_output": 0.16716297031547472,
    "avg_bits_err_improve": 52.58559462101318,
    "time": 24446.52490234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* -4.0 (* a c)))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (if (!= (- (* b b) (* a (* -4.0 c))) 0.0) (/ (- (* (* a c) (* (* a c) 16.0)) (* b (* b (* b b)))) (- (* a (* -4.0 c)) (* b b))) (fma a (* -4.0 c) (* b b)))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 43,
    "avg_bits_err_input": 28.499638671508404,
    "avg_bits_err_output": 0.3561735289122441,
    "avg_bits_err_improve": 28.14346514259616,
    "time": 24948.4287109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (* b b) 0.0) (+ (/ (+ (* (* b b) (* c (* a -4.0))) (* b (* (+ b b) (* b b)))) (* b (+ b b))) (/ (* (* b b) (* c (* a -4.0))) (* b (+ b b)))) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 45,
    "avg_bits_err_input": 43.40407546852819,
    "avg_bits_err_output": 0.25522011407232537,
    "avg_bits_err_improve": 43.14885535445587,
    "time": 23773.60498046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.004483310277834,
    "avg_bits_err_output": 34.004483310277834,
    "avg_bits_err_improve": 0,
    "time": 22819.121337890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8421704250420191,
    "avg_bits_err_output": 0.8392374263551654,
    "avg_bits_err_improve": 0.002932998686853705,
    "time": 30092.756591796875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (- 1.0 (/ 4.0 (+ (* 2.0 (exp (* -2.0 x))) (+ 1.0 (exp (* x -4.0)))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 27,
    "avg_bits_err_input": 29.67968941526113,
    "avg_bits_err_output": 29.649686294586015,
    "avg_bits_err_improve": 0.030003120675115014,
    "time": 13415.184326171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ 1.0 (exp (+ x x))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.03530237781477,
    "avg_bits_err_output": 0.6360849625007212,
    "avg_bits_err_improve": 57.399217415314055,
    "time": 18595.182373046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (- (- (- (* (expm1 x) (exp (* x -2.0))) (expm1 x)) (- (expm1 (* x -2.0))))) 2.0)",
    "output_parens": 12,
    "avg_bits_err_input": 58.10137886102345,
    "avg_bits_err_output": 0.14259776617342565,
    "avg_bits_err_improve": 57.958781094850025,
    "time": 11946.033203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.0072712406251802895,
    "avg_bits_err_output": 0.0072712406251802895,
    "avg_bits_err_improve": 0,
    "time": 3363.436279296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.2495,
    "avg_bits_err_output": 32.2495,
    "avg_bits_err_improve": 0,
    "time": 5013.477783203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (+ (/ x (* (- 1.0 x) 2.0)) (/ (+ x (+ x x)) (* (- 1.0 x) 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 58.52155357422325,
    "avg_bits_err_output": 0.020634805462213437,
    "avg_bits_err_improve": 58.50091876876103,
    "time": 14079.94775390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.02789624062518029,
    "avg_bits_err_output": 0.02789624062518029,
    "avg_bits_err_improve": 0,
    "time": 4173.93212890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (* (cos (atan (/ eh (* ew (tan t))))) (sin t))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12275,
    "avg_bits_err_output": 0.12344812031259014,
    "avg_bits_err_improve": -0.0006981203125901447,
    "time": 22222.180419921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* ew (* (cos t) (cos (atan (* (- eh) (/ (tan t) ew)))))) (* (sin t) (* eh (sin (atan (* (- eh) (/ (tan t) ew))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13019812031259012,
    "avg_bits_err_output": 0.12971936093777042,
    "avg_bits_err_improve": 0.0004787593748196983,
    "time": 16698.46142578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.42654678543464,
    "avg_bits_err_output": 3.9756621258913993,
    "avg_bits_err_improve": 35.45088465954324,
    "time": 26713.412353515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.341059708464464,
    "avg_bits_err_output": 0.011686481637041212,
    "avg_bits_err_improve": 14.329373226827423,
    "time": 6668.537353515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (sin delta) (* (cos phi1) (cos theta))))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.13565926880974163,
    "avg_bits_err_output": 0.13627122707948489,
    "avg_bits_err_improve": -0.0006119582697432513,
    "time": 37705.7109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.7435470852624,
    "avg_bits_err_output": 0.1713823312532451,
    "avg_bits_err_improve": 52.57216475400915,
    "time": 23546.666015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* -3.0 (* c a)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.642582371706403,
    "avg_bits_err_output": 0.3482556406367188,
    "avg_bits_err_improve": 28.294326731069685,
    "time": 30655.07373046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.44111972458669,
    "avg_bits_err_output": 0.24281654219389998,
    "avg_bits_err_improve": 43.19830318239279,
    "time": 26774.098388671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.06653552731876,
    "avg_bits_err_output": 34.06653552731876,
    "avg_bits_err_improve": 0,
    "time": 21642.5595703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (if (!= (* (cos (- lambda1 lambda2)) (* (sin phi1) (cos phi2))) 0.0) (/ (* (cos (- lambda1 lambda2)) (* (* (cos (- lambda1 lambda2)) (* (sin phi1) (cos phi2))) (* (sin phi1) (cos phi2)))) (* (cos (- lambda1 lambda2)) (* (sin phi1) (cos phi2)))) (* (cos (- lambda1 lambda2)) (* (sin phi1) (cos phi2))))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.991207689749464,
    "avg_bits_err_output": 13.032198439537694,
    "avg_bits_err_improve": -0.040990749788230474,
    "time": 38369.515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.167248913616987,
    "avg_bits_err_output": 0.5423790721199043,
    "avg_bits_err_improve": 28.624869841497084,
    "time": 19813.349853515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.011625,
    "avg_bits_err_output": 0.045124287053355215,
    "avg_bits_err_improve": -0.03349928705335521,
    "time": 3120.63525390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (- 1.0 (/ x (+ x -1.0))) (- (/ 1.0 (+ x -1.0)))) (+ 1.0 x))",
    "output_parens": 9,
    "avg_bits_err_input": 14.508728574786986,
    "avg_bits_err_output": 12.616183079645788,
    "avg_bits_err_improve": 1.8925454951411975,
    "time": 15548.512451171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 1e+222) (/ (sqrt (* 2.0 (* (- (* A (* C 4.0)) (pow B 2.0)) (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) (- A)) F)))) (- (* A (* C 4.0)) (pow B 2.0))) 0.0)",
    "output_parens": 44,
    "avg_bits_err_input": 52.501496761601125,
    "avg_bits_err_output": 50.85443799309165,
    "avg_bits_err_improve": 1.6470587685094742,
    "time": 39061.052001953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -7.5e+154) 0.0 (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI)))",
    "output_parens": 14,
    "avg_bits_err_input": 29.037128243422124,
    "avg_bits_err_output": 27.01784052791435,
    "avg_bits_err_improve": 2.019287715507776,
    "time": 22584.65771484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (* F (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.11395969337423,
    "avg_bits_err_output": 51.84482670425426,
    "avg_bits_err_improve": 0.2691329891199672,
    "time": 36422.78125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.500727153718927,
    "avg_bits_err_output": 15.500727153718927,
    "avg_bits_err_improve": 0,
    "time": 27732.997802734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- g) 0.0) (/ (* (- g) (- (sqrt (fma h (- h) (* g g))) g)) (- g)) (- (sqrt (fma h (- h) (* g g))) g)))) (cbrt (* (/ 0.5 a) (+ (/ g -2.0) (+ (/ g -2.0) (- (sqrt (fma g g (* h (- h))))))))))",
    "output_parens": 33,
    "avg_bits_err_input": 36.32984600865366,
    "avg_bits_err_output": 36.247282389213744,
    "avg_bits_err_improve": 0.08256361943991664,
    "time": 18274.58154296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.990142106257573,
    "avg_bits_err_output": 0.9762005640636722,
    "avg_bits_err_improve": 0.013941542193900869,
    "time": 8974.93798828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.6680212406251803,
    "avg_bits_err_output": 0.6680212406251803,
    "avg_bits_err_improve": 0,
    "time": 3033.46435546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-285) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (fma (/ a2 b2) (* (/ a1 b1) 2.0) (* (/ a1 b1) (/ a2 (- b2)))) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+269) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 41,
    "avg_bits_err_input": 11.383478930627295,
    "avg_bits_err_output": 2.397728933043441,
    "avg_bits_err_improve": 8.985749997583854,
    "time": 7502.562744140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5811207016134862,
    "avg_bits_err_output": 0.527125,
    "avg_bits_err_improve": 0.05399570161348621,
    "time": 11399.446044921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -4000.0) (log1p (/ (+ -1.0 (+ (+ x (hypot 1.0 x)) (+ x (+ (hypot 1.0 x) -1.0)))) 2.0)) (log1p (if (!= (- (- 1.0 x) (hypot 1.0 x)) 0.0) (/ 1.0 (/ 1.0 (+ x (+ (hypot 1.0 x) -1.0)))) (+ x (+ (hypot 1.0 x) -1.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 53.312481655785085,
    "avg_bits_err_output": 14.271333092370245,
    "avg_bits_err_improve": 39.041148563414836,
    "time": 14164.81689453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.658665575112182,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.658665575112182,
    "time": 2634.564453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- (/ (- 2.0 x) (+ x 1.0)) (/ x (+ x 1.0))) 2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012875,
    "avg_bits_err_output": 0.01675,
    "avg_bits_err_improve": -0.0038750000000000017,
    "time": 5721.71142578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1270.335205078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (- (/ 2.0 (* r r)) 1.5) (- (* (* (* r w) (* r w)) (/ (fma v 0.25 -0.375) (- (- 1.0 v))))))",
    "output_parens": 13,
    "avg_bits_err_input": 12.663979549339475,
    "avg_bits_err_output": 0.3740665421939006,
    "avg_bits_err_improve": 12.289913007145573,
    "time": 22445.2861328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (+ (* (* x1 (/ (* (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) 4.0) (fma x1 x1 1.0))) x1) (* (* x1 -6.0) x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.5179001533525124,
    "avg_bits_err_output": 0.282162235245416,
    "avg_bits_err_improve": 0.23573791810709638,
    "time": 67198.10131835938,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 17.868495681068495,
    "avg_bits_err_output": 1.376179898679323,
    "avg_bits_err_improve": 16.492315782389174,
    "time": 6591.915771484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2253233238251722,
    "avg_bits_err_output": 0.2253233238251722,
    "avg_bits_err_improve": 0,
    "time": 10827.174560546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.004,
    "avg_bits_err_output": 0.004,
    "avg_bits_err_improve": 0,
    "time": 3633.239501953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* (/ (/ PI (+ a b)) -2.0) (/ (- (/ 1.0 b) (/ 1.0 a)) (- b a)))",
    "output_parens": 9,
    "avg_bits_err_input": 14.7775402722595,
    "avg_bits_err_output": 0.30591127969894844,
    "avg_bits_err_improve": 14.471628992560552,
    "time": 16027.646240234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (exp (- (fma eps x x))) (+ (/ (- (exp (- (fma eps x x)))) eps) (* (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x))))) 2.0)",
    "output_parens": 17,
    "avg_bits_err_input": 30.29231448085851,
    "avg_bits_err_output": 25.525059522577898,
    "avg_bits_err_improve": 4.767254958280613,
    "time": 19402.8173828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (- 4.0 (/ (+ (/ -4.0 (+ t (/ t t))) 8.0) (+ t (/ t t)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.01464624062518029,
    "avg_bits_err_improve": -0.00202124062518029,
    "time": 8631.668701171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.019,
    "avg_bits_err_output": 0.019,
    "avg_bits_err_improve": 0,
    "time": 14085.2021484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))) (+ 2.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017,
    "avg_bits_err_output": 0.009,
    "avg_bits_err_improve": 0.008000000000000002,
    "time": 14363.027587890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3836.437255859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6709.077392578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2483.848388671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.824674060686979,
    "avg_bits_err_output": 0.250875,
    "avg_bits_err_improve": 7.573799060686979,
    "time": 39176.6533203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.094733465421128,
    "avg_bits_err_output": 7.094733465421128,
    "avg_bits_err_improve": 0,
    "time": 15584.596923828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (- (if (!= (+ -1.0 (pow x 2.0)) 0.0) (/ (* (+ -1.0 (pow x 2.0)) (pow x 2.0)) (+ -1.0 (pow x 2.0))) (pow x 2.0)) (pow (+ x eps) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 15.474514949881973,
    "avg_bits_err_output": 15.47710974035792,
    "avg_bits_err_improve": -0.0025947904759462403,
    "time": 18631.03564453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (if (!= (exp (* 10.0 (* x x))) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ (exp (* 10.0 (* x x))) 1.0) 0.0) (/ (exp (+ (* 10.0 (* x x)) (log1p (exp (* 10.0 (* x x)))))) (+ (exp (* 10.0 (* x x))) 1.0)) (exp (* 10.0 (* x x)))))) (exp (* 10.0 (* x x)))) (- (exp (* 10.0 (* x x))) (* (exp (* 10.0 (* x x))) (cos x))))",
    "output_parens": 42,
    "avg_bits_err_input": 3.555566318981618,
    "avg_bits_err_output": 3.5522068325760845,
    "avg_bits_err_improve": 0.0033594864055332962,
    "time": 19057.298828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -4e-6) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (* (/ (/ x (+ x (/ 1.0 x))) (+ x (/ 1.0 x))) (/ x (/ x (+ x (/ 1.0 x))))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 0.002) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (* (/ (/ x (+ x (/ 1.0 x))) (+ x (/ 1.0 x))) (/ x (/ x (+ x (/ 1.0 x))))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 57,
    "avg_bits_err_input": 15.186054409420443,
    "avg_bits_err_output": 0.011396240625180288,
    "avg_bits_err_improve": 15.174658168795263,
    "time": 15803.818115234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.03636601724201,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.03636601724201,
    "time": 5132.838134765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.05344387228909,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 39.05306887228909,
    "time": 4145.453857421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (/ (* -1.7e+308 (- 1.7e+308 (* 1.7e+308 t))) -1.7e+308) -1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2984174812503606,
    "avg_bits_err_improve": 63.70158251874964,
    "time": 15407.10400390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325111880238,
    "avg_bits_err_output": 0.399875,
    "avg_bits_err_improve": 61.44337611880238,
    "time": 8890.715087890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.42168904118794,
    "avg_bits_err_output": 34.42168904118794,
    "avg_bits_err_improve": 0,
    "time": 26361.013916015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.004483310277834,
    "avg_bits_err_output": 34.004483310277834,
    "avg_bits_err_improve": 0,
    "time": 25554.53857421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2333.982666015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.857741367063106,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 39.84599136706311,
    "time": 4841.642333984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (+ (* y (- x y)) (* x (- x y))) (+ (* y y) (* x x)))",
    "output_parens": 9,
    "avg_bits_err_input": 20.0666625807642,
    "avg_bits_err_output": 20.077562852109637,
    "avg_bits_err_improve": -0.010900271345438028,
    "time": 9001.54443359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6503057926418863,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6503057926418863,
    "time": 10010.226806640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.040125,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.039125,
    "time": 5431.098388671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021073120312590145,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0.010823120312590145,
    "time": 3253.3505859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0.012375,
    "time": 2406.674560546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0,
    "time": 1185.61767578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3976960531287862,
    "avg_bits_err_output": 0.2415,
    "avg_bits_err_improve": 0.1561960531287862,
    "time": 5426.670166015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (log (+ 1.0 (expm1 (- (* (cos x) (cos x)) 1.0)))) (- -1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 16,
    "avg_bits_err_input": 30.717366939253317,
    "avg_bits_err_output": 30.716791158579106,
    "avg_bits_err_improve": 0.0005757806742110461,
    "time": 14340.421630859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.38325999275463,
    "avg_bits_err_output": 0.28821936093777045,
    "avg_bits_err_improve": 24.09504063181686,
    "time": 11803.22802734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (- (tan x))) 0.0) (/ (log (+ 1.0 (expm1 (* (/ (sin x) (- (tan x))) (/ (- x (sin x)) (tan x)))))) (log1p (expm1 (/ (sin x) (- (tan x)))))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 29,
    "avg_bits_err_input": 29.847906859935847,
    "avg_bits_err_output": 29.853034924266076,
    "avg_bits_err_improve": -0.005128064330229165,
    "time": 32296.60205078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00699715999043749,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.00612215999043749,
    "time": 2588.333251953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 1e-301) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -100.0 (/ i n))))",
    "output_parens": 22,
    "avg_bits_err_input": 47.7425151892976,
    "avg_bits_err_output": 13.888341308795676,
    "avg_bits_err_improve": 33.854173880501925,
    "time": 25288.910888671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= c -7.5e+85) (fma (+ a a) (/ (+ c c) (* 4.0 (+ (* c c) (* d d)))) (/ (* (+ d d) (+ b b)) (* 4.0 (+ (* c c) (* d d))))) (if (<= c 1e+17) (fma (+ b b) (/ (+ d d) (* 4.0 (+ (* c c) (* d d)))) (/ (* (+ c c) (+ a a)) (* 4.0 (+ (* c c) (* d d))))) (fma (+ a a) (/ (+ c c) (* 4.0 (+ (* c c) (* d d)))) (/ (* (+ d d) (+ b b)) (* 4.0 (+ (* c c) (* d d)))))))",
    "output_parens": 52,
    "avg_bits_err_input": 25.84041357473784,
    "avg_bits_err_output": 22.8527837439697,
    "avg_bits_err_improve": 2.9876298307681424,
    "time": 15395.092041015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* b (/ c (fma c c (* d d)))) (* a (if (!= (/ d (fma c c (* d d))) 0.0) (/ 1.0 (/ 1.0 (/ d (fma c c (* d d))))) (/ d (fma c c (* d d))))))",
    "output_parens": 19,
    "avg_bits_err_input": 25.61856440548663,
    "avg_bits_err_output": 22.513758372364926,
    "avg_bits_err_improve": 3.1048060331217044,
    "time": 15820.72607421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.037,
    "avg_bits_err_output": 0.020833600670583246,
    "avg_bits_err_improve": 0.016166399329416752,
    "time": 7297.9970703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (if (!= (* -2.0 (* uy PI)) 0.0) (/ 1.0 (- (/ (+ (/ 0.5 uy) 1.0) PI) (/ 1.0 PI))) (* PI (+ uy uy)))) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.68308928991072,
    "avg_bits_err_output": 12.453138203261245,
    "avg_bits_err_improve": 1.229951086649475,
    "time": 33722.4501953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (+ ux (- ux (* (* ux maxCos) (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))) (* ux (- ux)))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.72367366635082,
    "avg_bits_err_output": 0.31505176374439253,
    "avg_bits_err_improve": 13.408621902606427,
    "time": 25225.809326171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* (* (- 1.0 ux) maxCos) (* ux ux))))) xi) (fma (sqrt (- 1.0 (* (* (- 1.0 ux) maxCos) (* (* (- 1.0 ux) maxCos) (* ux ux))))) (* (sin (* uy (* 2.0 PI))) yi) (* ux (* (* (- 1.0 ux) maxCos) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.33072118587336513,
    "avg_bits_err_output": 0.32154002168103135,
    "avg_bits_err_improve": 0.00918116419233378,
    "time": 49547.120849609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (+ (+ 2.0 (cos (atan (* (/ alphay alphax) (tan (fma 2.0 (* PI u1) (* PI 0.5))))))) -2.0) (log (+ 1.0 (expm1 (cos (atan (* (/ alphay alphax) (tan (fma 2.0 (* PI u1) (* PI 0.5)))))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 53,
    "avg_bits_err_input": 0.20541054573943912,
    "avg_bits_err_output": 0.2057215405047568,
    "avg_bits_err_improve": -0.0003109947653176792,
    "time": 36289.673583984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (fma (/ u1 (* (- 1.0 u1) (* (- 1.0 u1) 2.0))) (/ u1 (/ u1 (- 1.0 u1))) (/ 1.0 (/ 1.0 (* u1 (/ 0.5 (- 1.0 u1)))))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 25,
    "avg_bits_err_input": 0.5447692852279641,
    "avg_bits_err_output": 0.5695638401248375,
    "avg_bits_err_improve": -0.024794554896873433,
    "time": 24031.352294921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (log (exp (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3203414002753925,
    "avg_bits_err_output": 0.32165512215093334,
    "avg_bits_err_improve": -0.001313721875540852,
    "time": 19912.746826171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (/ (+ 1.0 (+ (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ (- PI) s))))) (/ -1.0 (+ 1.0 (exp (/ PI s)))))) (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 70,
    "avg_bits_err_input": 0.3458643325518788,
    "avg_bits_err_output": 0.31646474256230306,
    "avg_bits_err_improve": 0.02939958998957576,
    "time": 47299.94482421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06266176980599433,
    "avg_bits_err_output": 0.046157923000204826,
    "avg_bits_err_improve": 0.016503846805789507,
    "time": 12068.861572265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (/ (fabs x) (* s -2.0))) (/ (exp (/ (fabs x) (* s -2.0))) (* (+ (exp (/ (fabs x) (- s))) 1.0) (fma s (exp (/ (fabs x) (- s))) s))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1694443566847406,
    "avg_bits_err_output": 0.11628814436934125,
    "avg_bits_err_improve": 0.05315621231539934,
    "time": 18074.59130859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6614285520357847,
    "avg_bits_err_output": 0.6614285520357847,
    "avg_bits_err_improve": 0,
    "time": 21634.627197265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(- (* v (/ (+ (- (+ 1.0 (* (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 2.0))) 1.0) -2.0)) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.15195905975788243,
    "avg_bits_err_output": 0.15667528096220507,
    "avg_bits_err_improve": -0.004716221204322635,
    "time": 18842.994140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.527076019302284,
    "avg_bits_err_output": 2.527076019302284,
    "avg_bits_err_improve": 0,
    "time": 26097.345458984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ (/ 1.0 v) (exp (* sinTheta_i (/ sinTheta_O v)))) (* cosTheta_i (/ (/ 0.5 v) (sinh (/ 1.0 v))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4683893808914111,
    "avg_bits_err_output": 0.3679249474281335,
    "avg_bits_err_improve": 0.1004644334632776,
    "time": 25254.629638671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ (+ (- (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (/ 1.0 v)) 0.6931) (log (/ 0.5 v))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.11109494293788265,
    "avg_bits_err_output": 0.11109494293788265,
    "avg_bits_err_improve": 0,
    "time": 10697.859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (fma alpha alpha -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (- (* alpha (* alpha cosTheta)) cosTheta)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4714024399079597,
    "avg_bits_err_output": 0.446025371336789,
    "avg_bits_err_improve": 0.025377068571170724,
    "time": 25149.596923828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (- (+ 1.0 (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) 1.0)) s)",
    "output_parens": 7,
    "avg_bits_err_input": 1.3257919615366902,
    "avg_bits_err_output": 1.2327098108722452,
    "avg_bits_err_improve": 0.09308215066444503,
    "time": 28901.09716796875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (- (+ (log (/ 1.0 (fma u -4.0 1.0))) -1.0) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 12.431461885444705,
    "avg_bits_err_output": 12.442227446627962,
    "avg_bits_err_improve": -0.010765561183257333,
    "time": 23561.355712890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ 0.125 (* PI s))) (* 0.75 (/ (* (exp (/ r (* s -6.0))) (exp (- (/ (/ r s) 6.0)))) (* s (* PI 6.0))))) r)",
    "output_parens": 20,
    "avg_bits_err_input": 0.14141178160890722,
    "avg_bits_err_output": 0.13074895646790602,
    "avg_bits_err_improve": 0.010662825141001198,
    "time": 26824.138916015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.884920688474437,
    "avg_bits_err_output": 0.7075223498405646,
    "avg_bits_err_improve": 0.17739833863387233,
    "time": 28062.260986328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ 1.0 (+ c (/ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (exp (* cosTheta cosTheta))) (* cosTheta (sqrt PI))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7058440506065694,
    "avg_bits_err_output": 0.4884264917286799,
    "avg_bits_err_improve": 0.2174175588778895,
    "time": 21215.06982421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(if (!= (+ (sqrt (- (log (- 1.0 u1)))) (* (sqrt (- (log (- 1.0 u1)))) (+ 1.0 (sin (* 2.0 (* PI u2)))))) 0.0) (/ (* (+ (sqrt (- (log (- 1.0 u1)))) (* (sqrt (- (log (- 1.0 u1)))) (+ 1.0 (sin (* 2.0 (* PI u2)))))) (* (sqrt (- (log (- 1.0 u1)))) (sin (* 2.0 (* PI u2))))) (+ (sqrt (- (log (- 1.0 u1)))) (log (+ 1.0 (expm1 (* (sqrt (- (log (- 1.0 u1)))) (+ 1.0 (sin (* 2.0 (* PI u2)))))))))) (* (sqrt (- (log (- 1.0 u1)))) (sin (* 2.0 (* PI u2)))))",
    "output_parens": 65,
    "avg_bits_err_input": 13.577721959130951,
    "avg_bits_err_output": 13.586134379700328,
    "avg_bits_err_improve": -0.008412420569376522,
    "time": 32485.99365234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (if (!= (* PI u2) 0.0) (* (/ 2.0 PI) (* (* u2 (/ u2 u2)) (* PI PI))) (* 2.0 (* PI u2)))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.624678750244207,
    "avg_bits_err_output": 0.310032825190121,
    "avg_bits_err_improve": 13.314645925054087,
    "time": 20996.42529296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (fma (- alpha) alpha (* alpha alpha)) (- (* (log (- 1.0 u0)) (* alpha alpha))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.950693271702217,
    "avg_bits_err_output": 13.902540785925424,
    "avg_bits_err_improve": 0.048152485776792986,
    "time": 17770.25537109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (- (+ (/ cos2phi (* alphax alphax)) (/ (/ sin2phi alphay) (+ alphay alphay))) (- (/ (/ sin2phi alphay) (+ alphay alphay)))))",
    "output_parens": 15,
    "avg_bits_err_input": 12.67562021340418,
    "avg_bits_err_output": 0.554009131052401,
    "avg_bits_err_improve": 12.121611082351778,
    "time": 16300.478759765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) 5000000000.0) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (- (* PI l) (/ (- (- (* (tan (* PI l)) (+ F (+ F (+ F F)))) -1.0) 1.0) (* (* (+ F F) (+ F F)) F))))",
    "output_parens": 24,
    "avg_bits_err_input": 16.631047126414845,
    "avg_bits_err_output": 11.739672726636403,
    "avg_bits_err_improve": 4.891374399778442,
    "time": 27029.50390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21008496250072115,
    "avg_bits_err_output": 0.1472712406251803,
    "avg_bits_err_improve": 0.06281372187554085,
    "time": 14363.489501953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.269348627273855,
    "avg_bits_err_output": 10.150257486263355,
    "avg_bits_err_improve": 3.1190911410105002,
    "time": 19351.987060546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(if (<= (* (/ PI 4.0) f) 1.0) (/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (* -0.5 f))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.25)) (/ (if (!= (+ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* PI (/ (+ f f) -4.0)))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) 2.0) 0.0) 0.0 (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (- (expm1 (* PI (/ (+ f f) -4.0)))) (exp (* PI (/ f -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))))))) (* PI -0.25)))",
    "output_parens": 100,
    "avg_bits_err_input": 61.37488063878209,
    "avg_bits_err_output": 0.7192194454907809,
    "avg_bits_err_improve": 60.65566119329131,
    "time": 69285.81982421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* t (/ (sqrt 2.0) (sqrt (+ (* (/ (- x -1.0) (+ x -1.0)) (* t (* t 2.0))) (* l (* l (- (/ -1.0 (- 1.0 x)) (+ 1.0 (/ x (- 1.0 x))))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.048819249214226,
    "avg_bits_err_output": 34.31385657797584,
    "avg_bits_err_improve": 8.734962671238385,
    "time": 26653.39404296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.9409121748217673,
    "avg_bits_err_output": 3.9409121748217673,
    "avg_bits_err_improve": 0,
    "time": 31254.549560546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (pow (- (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0) -0.5) 0.5)))",
    "output_parens": 14,
    "avg_bits_err_input": 1.1116693791695658,
    "avg_bits_err_output": 1.1068800828701166,
    "avg_bits_err_improve": 0.004789296299449131,
    "time": 16534.695556640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (- (- (pow (/ t l) 2.0) -1.0) 1.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.46811091450147,
    "avg_bits_err_output": 10.47596015991176,
    "avg_bits_err_improve": -0.007849245410291417,
    "time": 15819.911865234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 0.0) (sqrt (* (* 2.0 n) (* U (- (- (- (* 2.0 (/ (* l l) Om)) t)) (* (pow (/ l Om) 2.0) (* n (- U U*))))))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 1e+302) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* (* 2.0 n) (* U (- t (+ (/ (* (* (pow (/ l Om) 2.0) (- U U*)) (+ n n)) 2.0) (* 2.0 (* l (/ l Om))))))))))",
    "output_parens": 75,
    "avg_bits_err_input": 34.93906984707936,
    "avg_bits_err_output": 29.628904901648646,
    "avg_bits_err_improve": 5.310164945430714,
    "time": 36586.31787109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1e-108) (/ 2.0 (/ (* (pow (/ k t) 2.0) (* (sin k) (* (tan k) (/ (pow t 3.0) l)))) l)) (if (<= t 1.35e-108) (/ 2.0 (* (/ (* (sin k) (tan k)) l) (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) l))) (- (/ (/ 2.0 (tan k)) (* (/ (pow t 3.0) l) (* (/ (sin k) l) (pow (/ k t) 2.0)))) 0.0)))",
    "output_parens": 40,
    "avg_bits_err_input": 47.464270556938324,
    "avg_bits_err_output": 34.13126513356853,
    "avg_bits_err_improve": 13.33300542336979,
    "time": 47138.781005859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (tan k) l) (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ (pow t 3.0) l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.09885611619477,
    "avg_bits_err_output": 27.271973879708167,
    "avg_bits_err_improve": 4.8268822364866,
    "time": 21262.923583984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (/ (* a2 a2) (sqrt 2.0)) (* a1 (/ a1 (sqrt 2.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5102094015860297,
    "avg_bits_err_output": 0.45373722032989894,
    "avg_bits_err_improve": 0.05647218125613074,
    "time": 24425.645263671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (sqrt (* 2.0 (* PI n))) (pow (* 2.0 (* PI n)) (* k -0.5))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5278220424144104,
    "avg_bits_err_output": 0.4473214601539507,
    "avg_bits_err_improve": 0.08050058226045975,
    "time": 19987.770263671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (- (exp (+ l l)) (exp (* l -2.0))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 25,
    "avg_bits_err_input": 17.524502448964775,
    "avg_bits_err_output": 17.509819458050963,
    "avg_bits_err_improve": 0.014682990913811977,
    "time": 27114.95458984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) 2.0) (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K m) 0.0) (* K (* (+ m n) (* K (- (exp (log1p (/ m (* K m)))) 1.0)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))))",
    "output_parens": 62,
    "avg_bits_err_input": 15.238814040605956,
    "avg_bits_err_output": 1.2628140406059518,
    "avg_bits_err_improve": 13.976000000000004,
    "time": 25430.66357421875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (sqrt (+ 1.0 (pow (/ (/ U (* 2.0 J)) (cos (/ K 2.0))) 2.0))) (* (cos (/ K 2.0)) -2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 18.24563684218813,
    "avg_bits_err_output": 18.24426184218813,
    "avg_bits_err_improve": 0.00137499999999946,
    "time": 24584.953369140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (/ (/ (* D M) d) 2.0) 2.0) h) l))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.99973424969177,
    "avg_bits_err_output": 10.824865913835074,
    "avg_bits_err_improve": 3.1748683358566954,
    "time": 19618.16064453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* c0 (sqrt (/ A (* V l)))) (- INFINITY)) (* c0 (sqrt (/ (/ A V) l))) (if (<= (* c0 (sqrt (/ A (* V l)))) -2e-245) (* c0 (sqrt (/ A (* V l)))) (if (<= (* c0 (sqrt (/ A (* V l)))) 0.0) (* c0 (sqrt (/ (* A (/ 2.0 V)) (+ l l)))) (if (<= (* c0 (sqrt (/ A (* V l)))) 5e+133) (* c0 (sqrt (if (!= (/ A (* l V)) 0.0) (/ 1.0 (/ 1.0 (/ A (* l V)))) (/ A (* l V))))) (* c0 (sqrt (- (/ (+ (/ A l) (/ A (+ l l))) (+ V V)) (/ (- (/ A (+ l l))) (+ V V)))))))))",
    "output_parens": 65,
    "avg_bits_err_input": 19.127674924208797,
    "avg_bits_err_output": 15.292943076844619,
    "avg_bits_err_improve": 3.8347318473641785,
    "time": 20040.966552734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(/ (* (/ c0 w) (+ (* (* d c0) (/ (/ (/ d D) h) (* w D))) (sqrt (* (fma (/ (/ (/ d D) h) (* w D)) (* d c0) M) (- (* (* d c0) (/ (/ (/ d D) h) (* w D))) M))))) 2.0)",
    "output_parens": 25,
    "avg_bits_err_input": 59.578335426410895,
    "avg_bits_err_output": 53.83452120766086,
    "avg_bits_err_improve": 5.743814218750032,
    "time": 41887.70263671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d -9.5e-107) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* h (/ (pow (/ (/ (* M D) 2.0) d) 2.0) (+ l l))))) (if (<= d 3.8e-122) (- (* (sqrt (/ d h)) (sqrt (/ d l))) (* (* 0.5 (pow (/ (/ (* D M) 2.0) d) 2.0)) (* (sqrt (/ d h)) (* (sqrt (/ d l)) (/ h l))))) (fma (sqrt (/ d h)) (sqrt (/ d l)) (* (* (* h (/ (pow (* D (/ (/ M 2.0) d)) 2.0) l)) -0.5) (* (sqrt (/ d h)) (sqrt (/ d l)))))))",
    "output_parens": 55,
    "avg_bits_err_input": 26.63086244926833,
    "avg_bits_err_output": 24.96964864831713,
    "avg_bits_err_improve": 1.6612138009512023,
    "time": 46659.709228515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (+ 0.5 (log1p (expm1 (/ -0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.009825039194446,
    "avg_bits_err_output": 14.503274644823573,
    "avg_bits_err_improve": 0.5065503943708727,
    "time": 17428.334228515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ 1.3333333333333333 (* (* PI (- 1.0 (* v v))) (sqrt (- 2.0 (* (* v v) 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9824693609377705,
    "avg_bits_err_output": 0.01227124062518029,
    "avg_bits_err_improve": 0.9701981203125902,
    "time": 6164.5849609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- (* 5.0 (* v v)) (- 2.0 (* 5.0 (* v v)))) (* (fma v v -1.0) (* 2.0 PI))) (sqrt (- 2.0 (* 6.0 (* v v))))) t)",
    "output_parens": 16,
    "avg_bits_err_input": 0.450863597056105,
    "avg_bits_err_output": 0.11051922698473608,
    "avg_bits_err_improve": 0.3403443700713689,
    "time": 21650.132568359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (- 1.0 (* 3.0 (* v v)))) (/ (- (* (* v v) (sqrt 2.0)) (sqrt 2.0)) -4.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.013219360937770434,
    "avg_bits_err_output": 0.01189624062518029,
    "avg_bits_err_improve": 0.0013231203125901436,
    "time": 10122.4462890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5547808128388627,
    "avg_bits_err_output": 0.5547808128388627,
    "avg_bits_err_improve": 0,
    "time": 10798.352294921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.044204896471663,
    "avg_bits_err_output": 2.0353086558464826,
    "avg_bits_err_improve": 0.00889624062518024,
    "time": 19739.2392578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ mu (+ Vef EDonor)) Ec) KbT)))) (/ NaChar (- (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.01445373388755319,
    "avg_bits_err_output": 0.01445373388755319,
    "avg_bits_err_improve": 0,
    "time": 7965.195556640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (pow (fma a a (* b b)) 2.0) (fma b (* b 4.0) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1838846127163147,
    "avg_bits_err_output": 0.18309924843993386,
    "avg_bits_err_improve": 0.0007853642763808455,
    "time": 15879.263671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.18600154215544593,
    "avg_bits_err_output": 0.18600154215544593,
    "avg_bits_err_improve": 0,
    "time": 4513.59814453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.1849129259339448,
    "avg_bits_err_output": 0.1849129259339448,
    "avg_bits_err_improve": 0,
    "time": 19646.861328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (log (+ 1.0 (expm1 (+ 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x))))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 13.183217069403334,
    "avg_bits_err_output": 13.186382511568672,
    "avg_bits_err_improve": -0.003165442165338206,
    "time": 15233.762451171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (if (!= (/ (expm1 (* 2.0 x)) (expm1 x)) 0.0) (/ 1.0 (/ 1.0 (/ (expm1 (* 2.0 x)) (expm1 x)))) (/ (expm1 (* 2.0 x)) (expm1 x))))",
    "output_parens": 17,
    "avg_bits_err_input": 40.80101797391755,
    "avg_bits_err_output": 0.065375,
    "avg_bits_err_improve": 40.73564297391755,
    "time": 5381.758544921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -1.75e-8) (if (!= (/ x (- x (tan x))) 0.0) (/ (/ (fma (/ x (- x (tan x))) (sin x) (- (* x (/ x (- x (tan x)))))) (- (tan x) x)) (/ x (- x (tan x)))) (/ (- x (sin x)) (- x (tan x)))) (if (<= x 1e-13) (if (!= (/ (sin x) (- (tan x) x)) 0.0) (/ 0.0 (/ (sin x) (- (tan x) x))) (/ (- x (sin x)) (- x (tan x)))) (if (!= (/ x (- x (tan x))) 0.0) (/ (/ (- (* (/ x (- x (tan x))) (sin x)) (* x (/ x (- x (tan x))))) (- (tan x) x)) (/ x (- x (tan x)))) (/ (- x (sin x)) (- x (tan x))))))",
    "output_parens": 74,
    "avg_bits_err_input": 31.001298892878165,
    "avg_bits_err_output": 30.116145488570808,
    "avg_bits_err_improve": 0.8851534043073563,
    "time": 27041.326171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) (- b_2)) 0.0) (* (/ c (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.59610348022696,
    "avg_bits_err_output": 21.693483626418413,
    "avg_bits_err_improve": 11.902619853808545,
    "time": 14883.423095703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (/ (- (* a c)) (- b_2 (sqrt (- (* b_2 b_2) (* a c))))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 22,
    "avg_bits_err_input": 34.083170787186184,
    "avg_bits_err_output": 22.711255791264758,
    "avg_bits_err_improve": 11.371914995921426,
    "time": 15952.166015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.4356699051609,
    "avg_bits_err_output": 30.693899901281718,
    "avg_bits_err_improve": 0.7417700038791821,
    "time": 18238.4697265625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.65638854650896,
    "avg_bits_err_output": 10.755792452999374,
    "avg_bits_err_improve": 21.900596093509584,
    "time": 28732.18896484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (- (log1p N) (- (log N))) 0.0) (fma (log1p N) (- (exp (log1p (/ (log1p N) (+ (log1p N) (log N))))) 1.0) (* (- (log N)) (/ (log N) (+ (log1p N) (log N))))) (- (log1p N) (log N)))",
    "output_parens": 27,
    "avg_bits_err_input": 29.519028777784158,
    "avg_bits_err_output": 29.551288514785252,
    "avg_bits_err_improve": -0.032259737001094635,
    "time": 13585.454833984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (/ (+ -1.0 (* 2.0 (/ x (+ 1.0 x)))) (+ x x)) (/ -0.5 x))",
    "output_parens": 8,
    "avg_bits_err_input": 14.775579121337277,
    "avg_bits_err_output": 14.821231218524398,
    "avg_bits_err_improve": -0.045652097187121043,
    "time": 15919.56005859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (log (if (!= (- 1.0 (expm1 (cos (+ x eps)))) 0.0) (/ (fma (expm1 (if (!= (cos (+ x eps)) 0.0) (/ 1.0 (/ 1.0 (cos (+ x eps)))) (cos (+ x eps)))) (expm1 (if (!= (cos (+ x eps)) 0.0) (/ 1.0 (/ 1.0 (cos (+ x eps)))) (cos (+ x eps)))) -1.0) (+ (expm1 (cos (+ x eps))) -1.0)) (exp (cos (+ x eps))))) (cos x))",
    "output_parens": 40,
    "avg_bits_err_input": 39.53444158006489,
    "avg_bits_err_output": 39.75008440354157,
    "avg_bits_err_improve": -0.21564282347667785,
    "time": 25418.608154296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ 1.0 (+ (cbrt (+ x 1.0)) (- -1.0 (cbrt x))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.87015529724748,
    "avg_bits_err_output": 29.57361629658565,
    "avg_bits_err_improve": 0.29653900066182715,
    "time": 14437.150390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(- (/ 0.5 (sin x)) (- (/ 0.5 (sin x)) (/ (- 1.0 (cos x)) (sin x))))",
    "output_parens": 10,
    "avg_bits_err_input": 30.325512253725027,
    "avg_bits_err_output": 30.34792666701568,
    "avg_bits_err_improve": -0.022414413290654522,
    "time": 24046.171142578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) -4e-69) (/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (/ (- 0.0 (* -4.0 (* a c))) (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a)) 5e-152) (/ (if (!= (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) 0.0) (/ 1.0 (/ 1.0 (- (sqrt (fma b b (* (* a c) -4.0))) b))) (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (* a -4.0) (/ c (+ b (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma a (* c -4.0) (* b b))) b))) (* a 2.0)) (/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (/ (- 0.0 (* -4.0 (* a c))) (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))))",
    "output_parens": 135,
    "avg_bits_err_input": 33.76671665607642,
    "avg_bits_err_output": 22.373116376000254,
    "avg_bits_err_improve": 11.393600280076164,
    "time": 23646.618896484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0))))) 0.0) (+ (/ (- (* a (* c -4.0))) (+ (sqrt (fma a (* c -4.0) (* b b))) (sqrt (fma a (* c -4.0) (* b b))))) (+ (* (/ (/ b (sqrt (fma -4.0 (* a c) (* b b)))) -2.0) (+ (sqrt (fma -4.0 (* a c) (* b b))) b)) (/ (/ (- (* (sqrt (fma a (* c -4.0) (* b b))) (- b)) (fma a (* c -4.0) (* b b))) (sqrt (fma a (* c -4.0) (* b b)))) 2.0))) (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 2.0))",
    "output_parens": 58,
    "avg_bits_err_input": 33.90217231269888,
    "avg_bits_err_output": 27.173614281267366,
    "avg_bits_err_improve": 6.728558031431515,
    "time": 27060.35498046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.44332515996419,
    "avg_bits_err_output": 0.8442833862055202,
    "avg_bits_err_improve": 60.59904177375867,
    "time": 27094.130126953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.009547988953926,
    "avg_bits_err_output": 44.24174513374905,
    "avg_bits_err_improve": 18.767802855204877,
    "time": 12763.322265625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (+ (/ (- eps -1.0) (- eps -1.0)) (- (/ (+ eps eps) (- eps -1.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 58.534877072668486,
    "avg_bits_err_output": 58.50491709642635,
    "avg_bits_err_improve": 0.02995997624213942,
    "time": 16903.930419921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(if (!= (+ (/ -1.0 (tan x)) (+ (/ 1.0 x) -1.0)) 0.0) (/ (+ (if (!= (+ 1.0 (/ 1.0 (tan x))) 0.0) (/ (if (!= (* (+ 1.0 (/ 1.0 (tan x))) (+ (+ 1.0 (/ 1.0 (tan x))) (/ 1.0 x))) 0.0) (* (* (+ 1.0 (/ 1.0 (tan x))) (+ -1.0 (- (/ 1.0 x) (/ 1.0 (tan x))))) (* (+ (+ 1.0 (/ 1.0 (tan x))) (/ 1.0 x)) (/ (+ 1.0 (/ 1.0 (tan x))) (* (+ 1.0 (/ 1.0 (tan x))) (+ (+ 1.0 (/ 1.0 (tan x))) (/ 1.0 x)))))) (* (+ 1.0 (/ 1.0 (tan x))) (+ -1.0 (- (/ 1.0 x) (/ 1.0 (tan x)))))) (+ 1.0 (/ 1.0 (tan x)))) (+ -1.0 (- (/ 1.0 x) (/ 1.0 (tan x))))) (* (+ 1.0 (- (/ -1.0 x) (/ -1.0 (tan x)))) (+ 1.0 (- (/ -1.0 x) (/ -1.0 (tan x)))))) (+ (/ -1.0 (tan x)) (+ (/ 1.0 x) -1.0))) (+ (/ 1.0 x) (/ -1.0 (tan x))))",
    "output_parens": 92,
    "avg_bits_err_input": 59.796361490079846,
    "avg_bits_err_output": 59.77280714299638,
    "avg_bits_err_improve": 0.023554347083468485,
    "time": 35356.529052734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ eps (expm1 (* eps b))) (- (+ (/ (expm1 (* eps (+ b a))) (expm1 (* eps a))) 1.0) 1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 60.24005956845239,
    "avg_bits_err_output": 29.067924422222383,
    "avg_bits_err_improve": 31.172135146230005,
    "time": 26525.07470703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.20429917238173,
    "avg_bits_err_output": 0.5166462406251803,
    "avg_bits_err_improve": 40.68765293175655,
    "time": 4607.2958984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.54128667628145,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.54066167628145,
    "time": 2565.190673828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.21804364908251,
    "avg_bits_err_output": 0.017365861892522247,
    "avg_bits_err_improve": 29.20067778718999,
    "time": 6308.89306640625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (exp x) (- (fma (exp x) 2.0 -1.0))) (exp x))",
    "output_parens": 8,
    "avg_bits_err_input": 29.494713068448025,
    "avg_bits_err_output": 28.58680049536203,
    "avg_bits_err_improve": 0.9079125730859943,
    "time": 22565.65283203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (if (!= (/ 1.0 (* (+ x -1.0) (+ x -1.0))) 0.0) (/ (fma (/ 1.0 (* (+ x -1.0) (+ x -1.0))) (/ 1.0 (* (+ x -1.0) (+ x -1.0))) (* (/ 1.0 (* (+ x -1.0) (+ x -1.0))) (/ (- (/ 2.0 x) (/ 1.0 (+ 1.0 x))) (- 1.0 x)))) (/ 1.0 (* (+ x -1.0) (+ x -1.0)))) (/ (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) (+ x -1.0))) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 54,
    "avg_bits_err_input": 10.551911233420748,
    "avg_bits_err_output": 10.541848163970185,
    "avg_bits_err_improve": 0.010063069450563233,
    "time": 28452.208984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (- (/ (sin x) (+ (- (exp (log1p (cos x))) 1.0) (cos x))) (* (tan (+ x eps)) 0.5)) -2.0)",
    "output_parens": 13,
    "avg_bits_err_input": 36.82284035546564,
    "avg_bits_err_output": 36.836830122831444,
    "avg_bits_err_improve": -0.013989767365806927,
    "time": 21873.83740234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.07898519023648,
    "avg_bits_err_output": 0.16171240625180291,
    "avg_bits_err_improve": 29.91727278398468,
    "time": 15035.54150390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (+ (sin (+ x eps)) 1.0) 0.0) (/ (+ (fma (- -1.0 (sin (+ x eps))) (sin x) (* (sin x) (+ (sin (+ x eps)) 1.0))) (* (+ (sin (+ x eps)) 1.0) (- (sin (+ x eps)) (sin x)))) (+ (sin (+ x eps)) 1.0)) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 32,
    "avg_bits_err_input": 36.994920403285256,
    "avg_bits_err_output": 37.06949976729962,
    "avg_bits_err_improve": -0.07457936401436172,
    "time": 28485.964599609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (+ (/ 1.0 (sqrt (+ 1.0 x))) (/ -1.0 (sqrt x))) (* (sqrt (+ 1.0 x)) (/ -1.0 (sqrt (+ 1.0 x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 19.89772360002084,
    "avg_bits_err_output": 19.89761895103454,
    "avg_bits_err_improve": 0.00010464898629791719,
    "time": 14961.9580078125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 15.240620254415086,
    "avg_bits_err_output": 15.240620254415086,
    "avg_bits_err_improve": 0,
    "time": 7446.782470703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.45688257295531,
    "avg_bits_err_output": 1.3066603380651296,
    "avg_bits_err_improve": 28.15022223489018,
    "time": 27869.19580078125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07492952695107366,
    "avg_bits_err_output": 0.08042952695107367,
    "avg_bits_err_improve": -0.005500000000000005,
    "time": 12431.586669921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (* (- b) a))",
    "output_parens": 4,
    "avg_bits_err_input": 16.207636134846265,
    "avg_bits_err_output": 0.30016541406655656,
    "avg_bits_err_improve": 15.907470720779708,
    "time": 12023.11083984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (if (!= (* PI (/ angle 180.0)) 0.0) (/ 1.0 (/ 1.0 (* PI (/ angle 180.0)))) (* PI (/ angle 180.0))))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.41193543653165,
    "avg_bits_err_output": 20.43684184195929,
    "avg_bits_err_improve": -0.024906405427639555,
    "time": 35573.367919921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(fma (sin (* PI (/ angle 180.0))) (* (cos (* PI (/ angle 180.0))) (* -2.0 (- (pow a 2.0) (pow b 2.0)))) (fma (* (pow a 2.0) -2.0) (* (sin (* PI (/ angle 180.0))) (cos (* PI (/ angle 180.0)))) (* (sin (* PI (/ angle 180.0))) (* (* 2.0 (pow a 2.0)) (cos (* PI (/ angle 180.0)))))))",
    "output_parens": 32,
    "avg_bits_err_input": 30.96692917185439,
    "avg_bits_err_output": 30.979224728651552,
    "avg_bits_err_improve": -0.012295556797162988,
    "time": 45839.629150390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* angle (/ PI 180.0)))) 2.0) (pow (* b (cos (* angle (/ PI 180.0)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.225061056929945,
    "avg_bits_err_output": 20.189419431285096,
    "avg_bits_err_improve": 0.03564162564484974,
    "time": 41333.42626953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17904492500144228,
    "avg_bits_err_output": 0.17904492500144228,
    "avg_bits_err_improve": 0,
    "time": 16544.219482421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (+ (+ (+ (* (tan x) (/ (tan x) 4.0)) (- (* (tan x) (tan x)))) 1.0) (- (* (tan x) (/ (tan x) 4.0)))) (+ 1.0 (* (tan x) (tan x))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.324533471101042,
    "avg_bits_err_output": 0.3316928538729783,
    "avg_bits_err_improve": -0.007159382771936285,
    "time": 19514.49951171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (- (sin v)) (/ e (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13295996250072117,
    "avg_bits_err_output": 0.13321936093777043,
    "avg_bits_err_improve": -0.0002593984370492519,
    "time": 16962.825927734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos (- lambda1 lambda2)) (cos phi1)) (cos phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.953097082217212,
    "avg_bits_err_output": 16.948844070425853,
    "avg_bits_err_improve": 0.004253011791359285,
    "time": 34212.429443359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.821499066727064,
    "avg_bits_err_output": 0.17047445195251587,
    "avg_bits_err_improve": 52.65102461477455,
    "time": 22065.537841796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.60818091170491,
    "avg_bits_err_output": 0.3492793250129812,
    "avg_bits_err_improve": 28.258901586691927,
    "time": 23306.55419921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* -4.0 (* a c))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 43.89645211831586,
    "avg_bits_err_output": 0.2264415421939,
    "avg_bits_err_improve": 43.67001057612195,
    "time": 22410.615966796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) -4e-69) (/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (/ (- 0.0 (* -4.0 (* a c))) (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) 5e-152) (/ (if (!= (- (sqrt (+ (* c (* a -4.0)) (* b b))) b) 0.0) (/ 1.0 (/ 1.0 (- (sqrt (fma b b (* (* a c) -4.0))) b))) (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (* a -4.0) (/ c (+ b (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma a (* c -4.0) (* b b))) b))) (* a 2.0)) (/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (/ (- 0.0 (* -4.0 (* a c))) (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))))",
    "output_parens": 135,
    "avg_bits_err_input": 33.76344596353321,
    "avg_bits_err_output": 22.37250895679674,
    "avg_bits_err_improve": 11.390937006736468,
    "time": 21876.244140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8691847769019289,
    "avg_bits_err_output": 0.8691847769019289,
    "avg_bits_err_improve": 0,
    "time": 30896.327880859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (- 1.0 (/ 4.0 (+ (* 2.0 (exp (* -2.0 x))) (+ 1.0 (exp (* x -4.0)))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 27,
    "avg_bits_err_input": 29.46947039949891,
    "avg_bits_err_output": 29.43905944757689,
    "avg_bits_err_improve": 0.03041095192201837,
    "time": 21518.396484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ 1.0 (exp (+ x x))))",
    "output_parens": 6,
    "avg_bits_err_input": 58.01768685983989,
    "avg_bits_err_output": 0.630313721875541,
    "avg_bits_err_improve": 57.38737313796435,
    "time": 18229.025390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (- (exp (- x)))) 2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 58.026838844259885,
    "avg_bits_err_output": 0.06659436093777044,
    "avg_bits_err_improve": 57.960244483322114,
    "time": 10857.875244140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008813721875540867,
    "avg_bits_err_output": 0.008813721875540867,
    "avg_bits_err_improve": 0,
    "time": 3417.160400390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.345,
    "avg_bits_err_output": 32.345,
    "avg_bits_err_improve": 0,
    "time": 5303.191162109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (if (!= (- -2.0 (log (/ (- -1.0 x) (- x 1.0)))) 0.0) (/ (expm1 (+ (log1p (log (if (!= (/ x (+ -1.0 x)) 0.0) (/ (/ (- (/ (/ x (- 1.0 x)) x) (/ 4.0 (/ 4.0 (/ x (+ x -1.0))))) (/ 1.0 (/ x (+ x -1.0)))) (/ 4.0 (/ 4.0 (/ x (+ x -1.0))))) (/ (- -1.0 x) (+ -1.0 x))))) (log1p (log (/ (- -1.0 x) (- x 1.0)))))) (+ (log (/ (- -1.0 x) (- x 1.0))) 2.0)) (log (/ (- -1.0 x) (- x 1.0)))))",
    "output_parens": 51,
    "avg_bits_err_input": 58.52256983069233,
    "avg_bits_err_output": 58.606925665389134,
    "avg_bits_err_improve": -0.08435583469680097,
    "time": 26229.408203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (- (+ (sqrt (- 1.0 (* x x))) 2.0) 1.0) x))",
    "output_parens": 7,
    "avg_bits_err_input": 0.019625,
    "avg_bits_err_output": 0.01975,
    "avg_bits_err_improve": -0.0001250000000000001,
    "time": 4443.58251953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (sin t) (* ew (cos (atan (/ eh (* ew (tan t))))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.131125,
    "avg_bits_err_output": 0.130625,
    "avg_bits_err_improve": 0.0005000000000000004,
    "time": 24565.57373046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* ew (* (cos t) (log (+ 1.0 (expm1 (cos (atan (* eh (- (/ (tan t) ew)))))))))) (* (* eh (sin t)) (sin (atan (* (- eh) (/ (tan t) ew)))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.13334436093777044,
    "avg_bits_err_output": 0.13511560156295072,
    "avg_bits_err_improve": -0.001771240625180276,
    "time": 24536.37451171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (cos (/ (+ phi1 phi2) 2.0)) (+ lambda2 (- lambda1 (+ lambda2 lambda2)))) (- phi1 phi2)))",
    "output_parens": 10,
    "avg_bits_err_input": 39.19432324589845,
    "avg_bits_err_output": 3.7212777024848043,
    "avg_bits_err_improve": 35.47304554341365,
    "time": 27441.05615234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (* (- a b) (/ (+ a b) a)) a)))",
    "output_parens": 7,
    "avg_bits_err_input": 14.326517097683741,
    "avg_bits_err_output": 0.023,
    "avg_bits_err_improve": 14.303517097683741,
    "time": 4489.901123046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (cos phi1) (* (sin delta) (cos theta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1540273748569362,
    "avg_bits_err_output": 0.15489387214492897,
    "avg_bits_err_improve": -0.0008664972879927624,
    "time": 38445.981201171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.85289051060008,
    "avg_bits_err_output": 0.17393665469173672,
    "avg_bits_err_improve": 52.67895385590835,
    "time": 24983.688720703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.721469969936166,
    "avg_bits_err_output": 0.3372983253996615,
    "avg_bits_err_improve": 28.384171644536504,
    "time": 24839.34423828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.99996235999059,
    "avg_bits_err_output": 0.24225282031835907,
    "avg_bits_err_improve": 43.757709539672234,
    "time": 22863.46240234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* a (* c -3.0)))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma a (* c -3.0) (* b b))))) (* a -3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 33.8056581876436,
    "avg_bits_err_output": 22.033858401219273,
    "avg_bits_err_improve": 11.771799786424328,
    "time": 20600.578857421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (expm1 (log1p (sin (- lambda1 lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (sin phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.121493596458414,
    "avg_bits_err_output": 13.13122305780545,
    "avg_bits_err_improve": -0.00972946134703534,
    "time": 38381.208984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.050979948618203,
    "avg_bits_err_output": 0.5593055330150896,
    "avg_bits_err_improve": 28.491674415603114,
    "time": 23517.40185546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 2.0 (/ (+ (+ x x) (+ x (+ x -4.0))) 2.0)) (/ x (+ x 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.018240601562950723,
    "avg_bits_err_improve": -0.006740601562950723,
    "time": 12545.25341796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (if (!= (- (/ -1.0 (* (- 1.0 x) (- 1.0 x))) (/ 1.0 (fma x x -1.0))) 0.0) (/ (fma (/ -1.0 (* (+ x -1.0) (+ x -1.0))) (/ -1.0 (* (+ x -1.0) (+ x -1.0))) (- (/ (/ 1.0 (fma x x -1.0)) (fma x x -1.0)))) (+ (- (/ 1.0 (fma x x -1.0))) (/ -1.0 (* (+ x -1.0) (+ x -1.0))))) (/ (- (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0))) (+ x -1.0))) (/ 1.0 (+ x -1.0))) (/ (- 2.0 (/ 2.0 (/ (+ 1.0 x) (+ x -1.0)))) (- 2.0 (+ x x))))",
    "output_parens": 54,
    "avg_bits_err_input": 14.261181778937402,
    "avg_bits_err_output": 14.191157980097591,
    "avg_bits_err_improve": 0.07002379883981114,
    "time": 24166.9658203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 5e+260) (/ (sqrt (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C)) (* (+ (pow B 2.0) (* (* A C) -4.0)) (* F -2.0)))) (- (* A (* C 4.0)) (pow B 2.0))) 0.0)",
    "output_parens": 44,
    "avg_bits_err_input": 52.75869241148732,
    "avg_bits_err_output": 51.145095198011695,
    "avg_bits_err_improve": 1.6135972134756216,
    "time": 36090.89208984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 1.55e+188) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI)) (/ (* (atan (/ 0.0 B)) 180.0) PI))",
    "output_parens": 18,
    "avg_bits_err_input": 29.234304135622732,
    "avg_bits_err_output": 27.196447099379448,
    "avg_bits_err_improve": 2.0378570362432846,
    "time": 30611.122802734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (pow (* (* F (- (* 2.0 (pow B 2.0)) (* 8.0 (* C A)))) (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) 0.5) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.28914102363238,
    "avg_bits_err_output": 51.98882464634948,
    "avg_bits_err_improve": 0.30031637728290406,
    "time": 36163.038818359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (* (+ (cbrt (/ g (+ a a))) 2.0) (* (cbrt (/ g (+ a a))) (/ 1.0 (+ (cbrt (/ g (+ a a))) 2.0)))) (cbrt (/ g (+ a a))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.839933858978108,
    "avg_bits_err_output": 15.86273876249646,
    "avg_bits_err_improve": -0.022804903518352404,
    "time": 23426.899169921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (+ g (sqrt (fma h (- h) (* g g)))) 0.0) (* (/ (- h) (+ g (sqrt (fma g g (* h (- h)))))) h) (- (sqrt (fma h (- h) (* g g))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 33,
    "avg_bits_err_input": 36.19173754887036,
    "avg_bits_err_output": 35.88349293411657,
    "avg_bits_err_improve": 0.3082446147537894,
    "time": 18505.281982421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9905926703212454,
    "avg_bits_err_output": 0.9764011281273443,
    "avg_bits_err_improve": 0.014191542193901174,
    "time": 5882.806884765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7236981203125902,
    "avg_bits_err_output": 0.7236981203125902,
    "avg_bits_err_improve": 0,
    "time": 3195.94775390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-303) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+184) (/ (* a1 a2) (* b1 b2)) (* a2 (/ (/ a1 b2) b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.187339252153905,
    "avg_bits_err_output": 3.601363253766862,
    "avg_bits_err_improve": 7.585975998387043,
    "time": 8573.33984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output_parens": 5,
    "avg_bits_err_input": 0.38977469366336176,
    "avg_bits_err_output": 0.38977469366336176,
    "avg_bits_err_improve": 0,
    "time": 9125.35107421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -1.32e+154) (log1p (/ (+ -1.0 (+ (+ x (hypot 1.0 x)) (+ x (+ (hypot 1.0 x) -1.0)))) 2.0)) (if (<= x -7.2e-9) (log (if (!= (- (sqrt (fma x x 1.0)) x) 0.0) (/ 1.0 (- (sqrt (fma x x 1.0)) x)) (+ x (sqrt (fma x x 1.0))))) (log1p (if (!= (- (- 1.0 x) (hypot 1.0 x)) 0.0) (/ 1.0 (/ 1.0 (+ x (+ (hypot 1.0 x) -1.0)))) (+ x (+ (hypot 1.0 x) -1.0))))))",
    "output_parens": 40,
    "avg_bits_err_input": 53.11471906277841,
    "avg_bits_err_output": 6.828083125663897,
    "avg_bits_err_improve": 46.28663593711452,
    "time": 11343.663818359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.696461706896871,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.696461706896871,
    "time": 1716.0361328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- (/ (/ 1.0 (+ 1.0 x)) (+ 1.0 x)) (* (/ x (+ 1.0 x)) (/ x (+ 1.0 x)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.012375,
    "avg_bits_err_improve": 0.0002500000000000002,
    "time": 4486.521728515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1271.576904296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= w -1e+149) (- (- (+ 3.0 (/ 2.0 (* r r))) (* (/ (- 0.375 (* v 0.25)) (- 1.0 v)) (* w (* r (* r w))))) 4.5) (if (<= w 2000000000000.0) (- (- (+ 3.0 (/ 2.0 (* r r))) (* (- 0.375 (* v 0.25)) (/ (* r (* w (* w r))) (- 1.0 v)))) 4.5) (- (- (+ 3.0 (/ 2.0 (* r r))) (* (/ (- 0.375 (* v 0.25)) (- 1.0 v)) (* w (* r (* r w))))) 4.5)))",
    "output_parens": 43,
    "avg_bits_err_input": 12.764505436557108,
    "avg_bits_err_output": 0.30548157969317924,
    "avg_bits_err_improve": 12.45902385686393,
    "time": 26854.368408203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma x1 (* x1 -6.0) (/ (+ (* (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* (* x1 (- x1 (fma x1 (* x1 3.0) (* 2.0 x2)))) -2.0)) (* (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (* x1 (* x1 -4.0)))) (fma x1 x1 1.0)))))) (+ x1 x1)))",
    "output_parens": 48,
    "avg_bits_err_input": 0.5078143109829513,
    "avg_bits_err_output": 0.2582533628598366,
    "avg_bits_err_improve": 0.2495609481231147,
    "time": 67553.13500976562,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (+ t1 u)) (- v)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.078678852635576,
    "avg_bits_err_output": 1.2665935635899448,
    "avg_bits_err_improve": 16.812085289045633,
    "time": 9919.894775390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.25050960194963134,
    "avg_bits_err_output": 0.25050960194963134,
    "avg_bits_err_improve": 0,
    "time": 8327.36962890625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00404024101186092,
    "avg_bits_err_output": 0.00404024101186092,
    "avg_bits_err_improve": 0,
    "time": 2265.30126953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* (/ (- (/ 0.5 a) (/ 0.5 b)) (- b a)) (/ PI (+ a b)))",
    "output_parens": 8,
    "avg_bits_err_input": 14.816422851129083,
    "avg_bits_err_output": 0.28702443751081724,
    "avg_bits_err_improve": 14.529398413618265,
    "time": 17305.177001953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (exp (- (* eps x) x)) (+ (* (/ 1.0 eps) (exp (- (* eps x) x))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) 2.0)",
    "output_parens": 16,
    "avg_bits_err_input": 29.61187939349448,
    "avg_bits_err_output": 24.99612087521565,
    "avg_bits_err_improve": 4.615758518278831,
    "time": 18258.61962890625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- (+ 2.0 (/ (/ -2.0 t) (+ 2.0 (/ 2.0 t)))) (/ (/ 2.0 t) (+ 2.0 (/ 2.0 t))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.018625,
    "avg_bits_err_output": 0.0205,
    "avg_bits_err_improve": -0.0018750000000000017,
    "time": 37431.1162109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (+ 1.0 (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))))) (+ (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))) 4.0))",
    "output_parens": 26,
    "avg_bits_err_input": 0.023375,
    "avg_bits_err_output": 0.03675,
    "avg_bits_err_improve": -0.013374999999999998,
    "time": 19752.706787109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))) (+ 2.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.049625,
    "avg_bits_err_output": 0.00875,
    "avg_bits_err_improve": 0.040875,
    "time": 10508.331298828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3251.105224609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7523.76513671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2630.599853515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8048787719210315,
    "avg_bits_err_output": 0.24625,
    "avg_bits_err_improve": 7.558628771921032,
    "time": 31785.44384765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.176543722603144,
    "avg_bits_err_output": 7.176543722603144,
    "avg_bits_err_improve": 0,
    "time": 16119.998779296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 15.948025801308923,
    "avg_bits_err_output": 15.948025801308923,
    "avg_bits_err_improve": 0,
    "time": 16256.44873046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (- (- (pow (exp (* x 10.0)) x) 1.0) -1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 3.543833777534675,
    "avg_bits_err_output": 3.188482666318789,
    "avg_bits_err_improve": 0.35535111121588603,
    "time": 25457.445556640625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -5e+17) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 5e-7) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 14.918746765158422,
    "avg_bits_err_output": 0.010698120312590145,
    "avg_bits_err_improve": 14.908048644845833,
    "time": 10394.275390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.13048641923284,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.13048641923284,
    "time": 3665.582275390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.37399185609116,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.37374185609116,
    "time": 3771.11767578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.307125,
    "avg_bits_err_improve": 63.692875,
    "time": 18805.90283203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325371826954,
    "avg_bits_err_output": 0.389875,
    "avg_bits_err_improve": 61.45337871826953,
    "time": 7783.9541015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0))))) 0.0) (+ (/ (- (* a (* c -4.0))) (+ (sqrt (fma a (* c -4.0) (* b b))) (sqrt (fma a (* c -4.0) (* b b))))) (+ (* (/ (/ b (sqrt (fma -4.0 (* a c) (* b b)))) -2.0) (+ (sqrt (fma -4.0 (* a c) (* b b))) b)) (/ (/ (- (* (sqrt (fma a (* c -4.0) (* b b))) (- b)) (fma a (* c -4.0) (* b b))) (sqrt (fma a (* c -4.0) (* b b)))) 2.0))) (- (- b) (sqrt (fma b b (* a (* c -4.0)))))) (* a 2.0))",
    "output_parens": 58,
    "avg_bits_err_input": 33.90217231269888,
    "avg_bits_err_output": 27.173614281267366,
    "avg_bits_err_improve": 6.728558031431515,
    "time": 30058.599853515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) -4e-69) (/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (/ (- 0.0 (* -4.0 (* a c))) (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0)) (if (<= (/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a)) 5e-152) (/ (if (!= (- (sqrt (+ (* c (* a -4.0)) (* b b))) b) 0.0) (/ 1.0 (/ 1.0 (- (sqrt (fma b b (* (* a c) -4.0))) b))) (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (* a -4.0) (/ c (+ b (sqrt (fma a (* c -4.0) (* b b)))))) (- (sqrt (fma a (* c -4.0) (* b b))) b))) (* a 2.0)) (/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) b) 0.0) (/ 1.0 (/ 1.0 (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (/ (- 0.0 (* -4.0 (* a c))) (- (- b) (sqrt (fma a (* c -4.0) (* b b))))) (- (sqrt (fma a (* c -4.0) (* b b))) b)))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))))",
    "output_parens": 135,
    "avg_bits_err_input": 33.76344596353321,
    "avg_bits_err_output": 22.37250895679674,
    "avg_bits_err_improve": 11.390937006736468,
    "time": 23697.316162109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2483.723876953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.674689452994,
    "avg_bits_err_output": 0.00925,
    "avg_bits_err_improve": 39.665439452994,
    "time": 5172.69775390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(* (- x y) (if (!= (/ (- x y) (- (fma x x (* y y)))) 0.0) (- (/ (/ (* (+ x y) (- x y)) (fma x x (* y y))) (- x y)) 0.0) (/ (+ x y) (fma x x (* y y)))))",
    "output_parens": 22,
    "avg_bits_err_input": 20.329775514485313,
    "avg_bits_err_output": 20.09075945419409,
    "avg_bits_err_improve": 0.2390160602912239,
    "time": 10893.43310546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ c (+ d a))) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.665714915995972,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.665714915995972,
    "time": 10323.276611328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(+ (* a (+ b d)) (* a c))",
    "output_parens": 4,
    "avg_bits_err_input": 0.037625,
    "avg_bits_err_output": 0.03825,
    "avg_bits_err_improve": -0.0006250000000000006,
    "time": 4110.03076171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019344360937770436,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 0.008344360937770436,
    "time": 2599.634033203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.016625,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.015875,
    "time": 3838.927734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0,
    "time": 1406.036865234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ (+ c b) (+ e a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40403101562950744,
    "avg_bits_err_output": 0.2647712406251803,
    "avg_bits_err_improve": 0.13925977500432712,
    "time": 5936.5205078125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(fma (+ 1.0 (/ (cos x) -2.0)) (+ 1.0 (/ (cos x) -2.0)) (* (cos x) (* (cos x) -0.25)))",
    "output_parens": 11,
    "avg_bits_err_input": 30.19763256285712,
    "avg_bits_err_output": 30.206069651075417,
    "avg_bits_err_improve": -0.008437088218297362,
    "time": 14804.78076171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (sqrt (- (* x x) eps)))",
    "output_parens": 4,
    "avg_bits_err_input": 24.89990283792306,
    "avg_bits_err_output": 24.89990283792306,
    "avg_bits_err_improve": 0,
    "time": 13160.673095703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (tan x)) 0.0) (if (!= (+ (- (* x (/ (sin x) (* (sin x) (tan x))))) (/ -1.0 (/ 1.0 (/ (sin x) (tan x))))) 0.0) (/ (+ (/ (* x (- (- (/ x (tan x)) (/ 0.0 (sin x))))) (tan x)) (/ 1.0 (/ (/ 1.0 (/ (sin x) (tan x))) (/ (sin x) (tan x))))) (+ (- (* x (/ (sin x) (* (sin x) (tan x))))) (/ -1.0 (/ 1.0 (/ (sin x) (tan x)))))) (- (* x (/ (sin x) (* (sin x) (tan x)))) (/ 4.0 (/ 4.0 (/ (sin x) (tan x)))))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 69,
    "avg_bits_err_input": 29.992117789079575,
    "avg_bits_err_output": 30.00952894755809,
    "avg_bits_err_improve": -0.017411158478513045,
    "time": 37122.154296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007337554964767636,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.006212554964767636,
    "time": 2541.316650390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -100.0 (/ i n))))",
    "output_parens": 22,
    "avg_bits_err_input": 47.798963025806536,
    "avg_bits_err_output": 13.920914707986169,
    "avg_bits_err_improve": 33.878048317820365,
    "time": 24656.77294921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) -1e-101) (+ (* (/ d (fma d d (* c c))) b) (* a (/ c (+ (* d d) (* c c))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 1e+153) (/ (+ (* a c) (* b d)) (fma d d (* c c))) (+ (* (/ d (fma d d (* c c))) b) (* a (/ c (+ (* d d) (* c c)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.035564446303326,
    "avg_bits_err_output": 22.763776397833787,
    "avg_bits_err_improve": 3.2717880484695385,
    "time": 12788.3115234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* (/ c (fma d d (* c c))) b) (* a (/ d (+ (* d d) (* c c)))))",
    "output_parens": 10,
    "avg_bits_err_input": 25.95546451676505,
    "avg_bits_err_output": 22.9613900622652,
    "avg_bits_err_improve": 2.9940744544998523,
    "time": 15652.0947265625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.03225,
    "avg_bits_err_output": 0.023324960075102284,
    "avg_bits_err_improve": 0.008925039924897717,
    "time": 6385.977783203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (expm1 (+ (- (- 1.0 (- ux (* ux ux))) ux) (+ (* maxCos (- ux (* ux ux))) (* ux (* maxCos (fma ux maxCos (- 1.0 ux))))))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 13.686136210332535,
    "avg_bits_err_output": 12.351445373451865,
    "avg_bits_err_improve": 1.3346908368806698,
    "time": 32366.41552734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (+ 1.0 (- ux (fma ux maxCos 1.0))) (* (- ux (* ux maxCos)) (- (- ux (fma ux maxCos 1.0)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.72487156003154,
    "avg_bits_err_output": 11.38672855976101,
    "avg_bits_err_improve": 2.338143000270529,
    "time": 35452.699951171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (+ (* (- 1.0 ux) (* ux (* maxCos zi))) (* (sin (if (!= (* (* PI uy) -2.0) 0.0) (/ (* (/ (- (* uy PI)) 0.5) (* uy (/ PI (* uy PI)))) -1.0) (* PI (* uy 2.0)))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* (* maxCos maxCos) (* ux (- ux (* ux ux))))))) yi))))",
    "output_parens": 45,
    "avg_bits_err_input": 0.34560481299364165,
    "avg_bits_err_output": 0.3420437034033722,
    "avg_bits_err_improve": 0.003561109590269451,
    "time": 44225.475341796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (log (+ 1.0 (expm1 (cos (atan (* (/ alphay alphax) (tan (fma 2.0 (* PI u1) (* PI 0.5))))))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.2039093460579787,
    "avg_bits_err_output": 0.20408585305124105,
    "avg_bits_err_improve": -0.0001765069932623542,
    "time": 26657.469482421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (/ 1.0 (/ 1.0 (/ u1 (- 1.0 u1)))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 14,
    "avg_bits_err_input": 0.5239761466028169,
    "avg_bits_err_output": 0.5398045587056167,
    "avg_bits_err_improve": -0.015828412102799838,
    "time": 22714.595703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(- (sqrt (/ u1 (- 1.0 u1))) (- (sqrt (/ u1 (- 1.0 u1))) (* (cos (* 6.28318530718 u2)) (sqrt (/ u1 (- 1.0 u1))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.33648332060704467,
    "avg_bits_err_output": 0.34785649255220064,
    "avg_bits_err_improve": -0.011373171945155969,
    "time": 22555.96533203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (* PI (/ 2.0 (+ s s)))))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.33416850618637534,
    "avg_bits_err_output": 0.3372822953031142,
    "avg_bits_err_improve": -0.0031137891167388743,
    "time": 45562.030029296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.05882812611399042,
    "avg_bits_err_output": 0.05882812611399042,
    "avg_bits_err_improve": 0,
    "time": 19777.45849609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (/ (- (fabs x)) s)) (* (- (exp (log1p (exp (/ (fabs x) (- s))))) 0.0) (* s (+ (exp (/ (- (fabs x)) s)) 1.0))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.13424615967520595,
    "avg_bits_err_output": 0.12449127217304246,
    "avg_bits_err_improve": 0.009754887502163495,
    "time": 22195.656005859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6724961202122393,
    "avg_bits_err_output": 0.6782623000482958,
    "avg_bits_err_improve": -0.00576617983605654,
    "time": 22324.226318359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (* (- 1.0 u) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.15205500933767416,
    "avg_bits_err_output": 0.1454621762088687,
    "avg_bits_err_improve": 0.006592833128805459,
    "time": 18294.204345703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.579439253100349,
    "avg_bits_err_output": 2.579439253100349,
    "avg_bits_err_improve": 0,
    "time": 29425.968017578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ cosTheta_i (sinh (/ 1.0 v))) (* (/ -0.5 (* v (exp (/ (* sinTheta_O sinTheta_i) v)))) (/ -1.0 v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4524569086763729,
    "avg_bits_err_output": 0.345241343582964,
    "avg_bits_err_improve": 0.1072155650934089,
    "time": 25245.495361328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (- (* cosTheta_i cosTheta_O) (+ 1.0 (* sinTheta_i sinTheta_O))) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.133655879990983,
    "avg_bits_err_output": 0.07169722569320798,
    "avg_bits_err_improve": 0.061958654297775015,
    "time": 22570.708740234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (- 2.0 (* alpha (+ alpha alpha))) (- 2.0 (* alpha (+ alpha alpha)))) (- (* PI (* (* 4.0 (log (* alpha alpha))) (fma cosTheta (- (* alpha (* alpha cosTheta)) cosTheta) 1.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.4727386216274613,
    "avg_bits_err_output": 0.47326106418580954,
    "avg_bits_err_improve": -0.0005224425583482684,
    "time": 23977.62744140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* 3.0 (* (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))) s))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3366678960400442,
    "avg_bits_err_output": 1.2507090529585654,
    "avg_bits_err_improve": 0.08595884308147883,
    "time": 23930.27978515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (log1p (if (!= (- -1.0 (/ 1.0 (fma u -4.0 1.0))) 0.0) (/ (- 1.0 (/ 1.0 (+ 1.0 (+ (* u -4.0) (* (fma u -4.0 1.0) (* u -4.0)))))) (- -1.0 (/ 1.0 (fma u -4.0 1.0)))) (+ (/ 1.0 (fma u -4.0 1.0)) -1.0))))",
    "output_parens": 22,
    "avg_bits_err_input": 12.261449949987062,
    "avg_bits_err_output": 11.483104714676047,
    "avg_bits_err_improve": 0.778345235311015,
    "time": 26281.968505859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (* (* (* 6.0 PI) s) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13820640067753484,
    "avg_bits_err_output": 0.1375623275707575,
    "avg_bits_err_improve": 0.000644073106777332,
    "time": 23289.957763671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma n1_i (/ (sin (* u normAngle)) (sin normAngle)) (* (sin (* (- 1.0 u) normAngle)) (/ n0_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8725186000838073,
    "avg_bits_err_output": 0.725537859494969,
    "avg_bits_err_improve": 0.14698074058883837,
    "time": 31078.21875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (exp (* cosTheta cosTheta))) (if (!= (* cosTheta (sqrt PI)) 0.0) (* (/ (/ cosTheta cosTheta) (sqrt PI)) (* cosTheta (* (sqrt PI) (sqrt PI)))) (* cosTheta (sqrt PI))))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.6713088026669302,
    "avg_bits_err_output": 0.4618606753565791,
    "avg_bits_err_improve": 0.20944812731035106,
    "time": 20833.22021484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(expm1 (log1p (* (sqrt (- (log (- 1.0 u1)))) (sin (* 2.0 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.367400261435419,
    "avg_bits_err_output": 13.384886864811925,
    "avg_bits_err_improve": -0.017486603376505983,
    "time": 22207.74365234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (sqrt (- (log1p (- u1)))) (- (sqrt (- (log1p (- u1)))) (* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (* PI u2))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.414906258828818,
    "avg_bits_err_output": 0.3263078226313102,
    "avg_bits_err_improve": 13.088598436197508,
    "time": 21905.442138671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(fma alpha (fma alpha (log (- 1.0 u0)) alpha) (fma alpha (- (fma alpha (log (- 1.0 u0)) alpha)) (* (log (- 1.0 u0)) (* alpha (- alpha)))))",
    "output_parens": 14,
    "avg_bits_err_input": 14.056376922310076,
    "avg_bits_err_output": 13.982814199066533,
    "avg_bits_err_improve": 0.0735627232435423,
    "time": 20248.765380859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (if (!= (log (- 1.0 u0)) 0.0) (/ 1.0 (/ 1.0 (log (- 1.0 u0)))) (log (- 1.0 u0)))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 17,
    "avg_bits_err_input": 12.66285528476113,
    "avg_bits_err_output": 12.664190366576092,
    "avg_bits_err_improve": -0.0013350818149611143,
    "time": 17692.116943359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -5e+39) (- (* PI l) (/ (/ (/ (tan (* PI l)) (* F F)) (log1p (expm1 (/ (/ F F) F)))) F)) (if (<= (* PI l) 50000000.0) (- (* PI l) (/ (* (/ 1.0 F) (tan (* PI l))) F)) (- (* PI l) (/ (/ (/ (tan (* PI l)) (* F F)) (log1p (expm1 (/ (/ F F) F)))) F))))",
    "output_parens": 37,
    "avg_bits_err_input": 16.691843987733897,
    "avg_bits_err_output": 9.014211871949149,
    "avg_bits_err_improve": 7.677632115784748,
    "time": 25039.1796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21904248125036055,
    "avg_bits_err_output": 0.15432312031259016,
    "avg_bits_err_improve": 0.06471936093777039,
    "time": 14148.678466796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.969781206720246,
    "avg_bits_err_output": 10.784918310963297,
    "avg_bits_err_improve": 3.1848628957569485,
    "time": 19440.9814453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (- (expm1 (* PI (/ f 4.0))) (expm1 (* PI (/ f -4.0)))))) (* PI -0.25))",
    "output_parens": 18,
    "avg_bits_err_input": 61.33326911280274,
    "avg_bits_err_output": 1.798212580993688,
    "avg_bits_err_improve": 59.535056531809055,
    "time": 43279.68017578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.37771968794223,
    "avg_bits_err_output": 33.50065111458902,
    "avg_bits_err_improve": 8.877068573353213,
    "time": 25413.35546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.860575818610361,
    "avg_bits_err_output": 3.860575818610361,
    "avg_bits_err_improve": 0,
    "time": 28087.580078125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 1.0458010014493448,
    "avg_bits_err_output": 1.0458010014493448,
    "avg_bits_err_improve": 0,
    "time": 9971.558349609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.044448814120882,
    "avg_bits_err_output": 10.044448814120882,
    "avg_bits_err_improve": 0,
    "time": 10725.07421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -5e-157) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (if (<= n 1.2e-82) (sqrt (* U (* (* 2.0 n) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt (* (* 2.0 n) (* U (- t (+ (/ (* (* (pow (/ l Om) 2.0) (- U U*)) (+ n n)) 2.0) (* 2.0 (* l (/ l Om))))))))))",
    "output_parens": 47,
    "avg_bits_err_input": 35.1978862865177,
    "avg_bits_err_output": 30.819699028670694,
    "avg_bits_err_improve": 4.3781872578470065,
    "time": 36124.33056640625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= k -7e-51) (/ 2.0 (/ (* (tan k) (* (/ (* (pow (/ k t) 2.0) (pow t 3.0)) l) (sin k))) l)) (if (<= k 3.6e-73) (/ 2.0 (* (/ (sin k) l) (* (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) (/ (tan k) l)))) (if (<= k 7.5e-10) (/ 2.0 (* (/ (sin k) l) (* (* (pow (/ k t) 2.0) (pow t 3.0)) (/ (tan k) l)))) (if (<= k 2.1e+64) (/ 2.0 (* (/ (sin k) l) (* (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) (/ (tan k) l)))) (/ 2.0 (* (* (tan k) (/ (pow t 3.0) l)) (* (sin k) (/ (pow (/ k t) 2.0) l))))))))",
    "output_parens": 67,
    "avg_bits_err_input": 47.38494465601513,
    "avg_bits_err_output": 36.90287393881594,
    "avg_bits_err_improve": 10.482070717199193,
    "time": 46165.054931640625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= (* l l) 2e-273) (/ 2.0 (* (pow t 3.0) (* (/ (sin k) l) (* (tan k) (/ (+ 2.0 (pow (/ k t) 2.0)) l))))) (if (<= (* l l) 5e+61) (/ 2.0 (* (* (/ (pow t 3.0) (* l l)) (sin k)) (* (tan k) (+ (pow (/ k t) 2.0) 2.0)))) (/ 2.0 (/ (* (* (tan k) (+ 2.0 (pow (/ k t) 2.0))) (* (sin k) (/ (pow t 3.0) l))) l))))",
    "output_parens": 42,
    "avg_bits_err_input": 32.22962081645923,
    "avg_bits_err_output": 27.366511777757214,
    "avg_bits_err_improve": 4.863109038702017,
    "time": 21760.575439453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (fma a1 (/ a1 (sqrt 2.0)) (* a2 (/ a2 (sqrt 2.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5215889125209148,
    "avg_bits_err_output": 0.4693009422054399,
    "avg_bits_err_improve": 0.052287970315474885,
    "time": 22625.346923828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (+ 0.5 (/ k -2.0))) (pow k -0.5))",
    "output_parens": 7,
    "avg_bits_err_input": 0.49177474195505366,
    "avg_bits_err_output": 0.448793686342028,
    "avg_bits_err_improve": 0.042981055613025676,
    "time": 21714.3125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (if (!= (+ (exp (fma l -1.0 l)) (exp (* l -2.0))) 0.0) (/ (if (!= (+ (exp (+ l (- (fma l -1.0 l) l))) (exp (* l -4.0))) 0.0) (/ (if (!= (+ (exp (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l)))) (exp (* l -8.0))) 0.0) (/ (- (exp (+ (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l))) (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l))))) (exp (* l -16.0))) (+ (exp (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l)))) (exp (* l -8.0)))) (- (exp (+ (fma l -1.0 l) (+ l (- (fma l -1.0 l) l)))) (exp (* l -8.0)))) (+ (exp (+ l (- (fma l -1.0 l) l))) (exp (* l -4.0)))) (- (exp (+ l (- (fma l -1.0 l) l))) (exp (* l -4.0)))) (+ (exp (fma l -1.0 l)) (exp (* l -2.0)))) (- (exp (fma l -1.0 l)) (exp (* l -2.0)))) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output_parens": 95,
    "avg_bits_err_input": 17.508431442493627,
    "avg_bits_err_output": 17.51969637855122,
    "avg_bits_err_improve": -0.011264936057592934,
    "time": 29886.501953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l))))",
    "output_parens": 15,
    "avg_bits_err_input": 15.561705301890038,
    "avg_bits_err_output": 15.561705301890038,
    "avg_bits_err_improve": 0,
    "time": 10806.2802734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.464323120312592,
    "avg_bits_err_output": 17.464323120312592,
    "avg_bits_err_improve": 0,
    "time": 28209.251220703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.651517897889446,
    "avg_bits_err_output": 11.157945201287138,
    "avg_bits_err_improve": 3.4935726966023086,
    "time": 19577.232421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1.2e+41) (* (sqrt (* (/ A V) (/ 1.0 l))) c0) (if (<= (* V l) -2e-304) (if (!= (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (/ A (* (* l V) (sqrt (/ A (* l V))))) (sqrt (/ A (* l V))))) 0.0) (/ 1.0 (/ 1.0 (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (/ A (* (* l V) (sqrt (/ A (* l V))))) (sqrt (/ A (* l V))))))) (* c0 (if (!= (sqrt (/ A (* l V))) 0.0) (/ A (* (* l V) (sqrt (/ A (* l V))))) (sqrt (/ A (* l V)))))) (if (<= (* V l) 5e-293) (* c0 (sqrt (+ (/ (/ A V) (+ l l)) (/ (- (/ (+ A (/ A 2.0)) V) (/ A (* V 2.0))) (+ l l))))) (if (<= (* V l) 1e+294) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (* (/ A l) (/ 1.0 V))))))))",
    "output_parens": 89,
    "avg_bits_err_input": 19.103543663613543,
    "avg_bits_err_output": 15.279203424614773,
    "avg_bits_err_improve": 3.8243402389987704,
    "time": 20194.174560546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= c0 4.6e-28) (* (/ c0 (* 2.0 w)) (fma (* (/ d (* w h)) (/ (* d (/ c0 D)) D)) 1.0 (sqrt (* (fma (/ d (* w h)) (/ (* d (/ c0 D)) D) M) (fma (/ d (* w h)) (/ (* d (/ c0 D)) D) (- M)))))) (* (/ c0 (* 2.0 w)) (+ (* c0 (* d (/ (/ d (* w D)) (* D h)))) (sqrt (* (fma (/ (/ d (* w D)) (* D h)) (* c0 d) M) (fma c0 (* d (/ (/ d (* w D)) (* D h))) (- M)))))))",
    "output_parens": 52,
    "avg_bits_err_input": 59.690435362156144,
    "avg_bits_err_output": 54.65653313373838,
    "avg_bits_err_improve": 5.033902228417766,
    "time": 47643.6904296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* h (/ (pow (/ (* M D) (+ d d)) 2.0) (+ l l)))))",
    "output_parens": 14,
    "avg_bits_err_input": 26.882942619124844,
    "avg_bits_err_output": 25.83811074431181,
    "avg_bits_err_improve": 1.0448318748130347,
    "time": 38395.572998046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (- (+ (/ 0.5 (fma 2.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0)) (/ (/ (+ 0.5 (/ -1.0 (hypot 1.0 x))) (fma 2.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0)) 2.0)) (- (/ (/ (+ 0.5 (/ -1.0 (hypot 1.0 x))) (fma 2.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) 2.0)) 2.0))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 41,
    "avg_bits_err_input": 15.55160651413115,
    "avg_bits_err_output": 15.05802057126207,
    "avg_bits_err_improve": 0.4935859428690801,
    "time": 23946.127685546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9842924812503606,
    "avg_bits_err_output": 0.010323120312590145,
    "avg_bits_err_improve": 0.9739693609377704,
    "time": 3775.120849609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* v (* v 5.0))) PI) (sqrt (- 2.0 (* v (* v 6.0))))) (* (fma v v -1.0) (- t)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.42143915857060477,
    "avg_bits_err_output": 0.11671976796293461,
    "avg_bits_err_improve": 0.30471939060767017,
    "time": 20570.4453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(- (* (/ (sqrt 2.0) 4.0) (/ (* (- 1.0 (* v v)) (sqrt (+ 1.0 (* (* v v) -3.0)))) -1.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.01252124062518029,
    "avg_bits_err_output": 0.01002124062518029,
    "avg_bits_err_improve": 0.0025000000000000005,
    "time": 7124.91650390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5478636605581666,
    "avg_bits_err_output": 0.5478636605581666,
    "avg_bits_err_improve": 0,
    "time": 7993.852783203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (if (!= (* k (- -10.0 k)) 0.0) (/ 1.0 (/ (/ 1.0 k) (+ k 10.0))) (* k (+ k 10.0))) -1.0))",
    "output_parens": 14,
    "avg_bits_err_input": 1.9274456531526651,
    "avg_bits_err_output": 1.9076674578415176,
    "avg_bits_err_improve": 0.01977819531114755,
    "time": 15536.218994140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- mu (- Ec (+ Vef EDonor))) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02812955818689803,
    "avg_bits_err_output": 0.02812955818689803,
    "avg_bits_err_improve": 0,
    "time": 9455.5185546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (if (!= (* (* b b) 4.0) 0.0) (if (!= 0.0 0.0) 0.0 (fma b (* b 4.0) (pow (fma b b (* a a)) 2.0))) (fma b (* b 4.0) (/ 8.0 (/ 8.0 (pow (fma a a (* b b)) 2.0))))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.18284945195251592,
    "avg_bits_err_output": 0.18549813632877787,
    "avg_bits_err_improve": -0.0026486843762619505,
    "time": 15566.328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.19612962650265922,
    "avg_bits_err_output": 0.19612962650265922,
    "avg_bits_err_improve": 0,
    "time": 18031.275146484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.1943640478111961,
    "avg_bits_err_output": 0.1943640478111961,
    "avg_bits_err_improve": 0,
    "time": 25730.107421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.472645032385683,
    "avg_bits_err_output": 13.472645032385683,
    "avg_bits_err_improve": 0,
    "time": 16813.537841796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.566345583290996,
    "avg_bits_err_output": 0.015125,
    "avg_bits_err_improve": 40.551220583291,
    "time": 6349.177490234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -5e-7) (- (exp (log1p (/ (if (!= (- x (sin x)) 0.0) (/ 1.0 (/ 1.0 (- x (sin x)))) (- x (sin x))) (- x (tan x))))) 1.0) (if (<= x 4.4e-8) (/ (- x (sin x)) (- x (- (exp (log1p (tan x))) 1.0))) (/ (+ (/ (- (sin x) (+ x x)) (- (tan x) x)) (- (exp (log1p (/ (sin x) (- (tan x) x)))) 1.0)) 2.0)))",
    "output_parens": 43,
    "avg_bits_err_input": 31.668470336410316,
    "avg_bits_err_output": 30.822330508388788,
    "avg_bits_err_improve": 0.8461398280215278,
    "time": 24371.51025390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) (- b_2)) 0.0) (* (/ c (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a)",
    "output_parens": 22,
    "avg_bits_err_input": 33.71794520895431,
    "avg_bits_err_output": 21.79390214089027,
    "avg_bits_err_improve": 11.92404306806404,
    "time": 13937.54541015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(- (/ (sqrt (- (* b_2 b_2) (* a c))) (- a)) (/ b_2 a))",
    "output_parens": 8,
    "avg_bits_err_input": 33.97385611769561,
    "avg_bits_err_output": 34.174581096820305,
    "avg_bits_err_improve": -0.20072497912469345,
    "time": 15493.70654296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.376303852537593,
    "avg_bits_err_output": 30.584198881593714,
    "avg_bits_err_improve": 0.7921049709438783,
    "time": 17549.5556640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.469962662104635,
    "avg_bits_err_output": 10.79411801755392,
    "avg_bits_err_improve": 21.675844644550715,
    "time": 32240.857666015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (- (log1p N) (- (log N))) 0.0) (fma (log1p N) (/ (log1p N) (+ (log N) (log1p N))) (/ (* (log N) (log N)) (- (- (log N)) (log1p N)))) (- (log1p N) (log N)))",
    "output_parens": 24,
    "avg_bits_err_input": 29.552227315224616,
    "avg_bits_err_output": 29.591555258443737,
    "avg_bits_err_improve": -0.0393279432191207,
    "time": 12238.5068359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (/ (/ (- (/ x (/ (+ 1.0 x) x)) x) x) x) 0.0)",
    "output_parens": 7,
    "avg_bits_err_input": 14.553174895831383,
    "avg_bits_err_output": 14.295669130783187,
    "avg_bits_err_improve": 0.25750576504819556,
    "time": 15953.333740234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (if (!= (+ (cos (+ x eps)) 2.0) 0.0) (/ (log (+ 1.0 (expm1 (fma (+ (cos (+ x eps)) 1.0) (+ (cos (+ x eps)) 1.0) -1.0)))) (+ (cos (+ x eps)) 2.0)) (cos (+ x eps))) (cos x))",
    "output_parens": 23,
    "avg_bits_err_input": 39.93567122901428,
    "avg_bits_err_output": 40.091008839163244,
    "avg_bits_err_improve": -0.15533761014896186,
    "time": 25723.897216796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (!= (- (cbrt x)) 0.0) (/ (+ (+ (* (cbrt x) (- 1.0 (cbrt (+ x 1.0)))) (* (cbrt x) (cbrt x))) (- (cbrt x))) (- (cbrt x))) (- (cbrt (+ x 1.0)) (cbrt x)))",
    "output_parens": 23,
    "avg_bits_err_input": 29.896581344258788,
    "avg_bits_err_output": 29.499145242725646,
    "avg_bits_err_improve": 0.3974361015331418,
    "time": 14175.2470703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(- (/ 0.5 (sin x)) (- (/ 0.5 (sin x)) (/ (- 1.0 (cos x)) (sin x))))",
    "output_parens": 10,
    "avg_bits_err_input": 30.55151258194374,
    "avg_bits_err_output": 30.57430460480936,
    "avg_bits_err_improve": -0.022792022865619543,
    "time": 23462.5498046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.851531813868164,
    "avg_bits_err_output": 33.851531813868164,
    "avg_bits_err_improve": 0,
    "time": 22141.57421875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (/ b -2.0) (if (!= (- (/ b -2.0) (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (/ 1.0 (/ 1.0 (- (/ b -2.0) (sqrt (fma a (* c -4.0) (* b b)))))) (- (/ b -2.0) (sqrt (fma a (* c -4.0) (* b b)))))) (* a 2.0))",
    "output_parens": 26,
    "avg_bits_err_input": 34.081361275863955,
    "avg_bits_err_output": 34.37175365352697,
    "avg_bits_err_improve": -0.29039237766301795,
    "time": 21153.7646484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(if (!= (/ -1.0 (log1p x)) 0.0) (if (!= (/ (+ 1.0 (log (- 1.0 x))) (log1p x)) 0.0) (/ (/ (+ (/ (- -1.0 (log (- 1.0 x))) (log1p x)) (* (+ 1.0 (log (- 1.0 x))) (/ (+ 1.0 (log (- 1.0 x))) (log1p x)))) (log1p x)) (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (- (/ (log (- 1.0 x)) (log1p x)) 0.0)) (/ (log (- 1.0 x)) (log1p x)))",
    "output_parens": 43,
    "avg_bits_err_input": 61.06916301485907,
    "avg_bits_err_output": 58.732475947589535,
    "avg_bits_err_improve": 2.336687067269537,
    "time": 24480.13720703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (log1p n) 0.0) (/ (+ (* (log1p n) (log1p n)) (* (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n))))) (log1p n)) (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0)))",
    "output_parens": 23,
    "avg_bits_err_input": 63.0130033641234,
    "avg_bits_err_output": 0.8152567656821182,
    "avg_bits_err_improve": 62.197746598441285,
    "time": 17999.746337890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.599320036676964,
    "avg_bits_err_output": 58.5513491808772,
    "avg_bits_err_improve": 0.047970855799761125,
    "time": 18587.64111328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (+ 1.0 (- (/ x (tan x)))) x)",
    "output_parens": 5,
    "avg_bits_err_input": 59.906298302052484,
    "avg_bits_err_output": 59.89670942263237,
    "avg_bits_err_improve": 0.009588879420114438,
    "time": 27300.409423828125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ a b)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.420969460268275,
    "avg_bits_err_output": 29.394843857678367,
    "avg_bits_err_improve": 31.026125602589907,
    "time": 26159.8701171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 40.9553766315833,
    "avg_bits_err_output": 0.4383231203125902,
    "avg_bits_err_improve": 40.51705351127071,
    "time": 4529.258056640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.792896419761746,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.792396419761744,
    "time": 3750.7314453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.531069950251908,
    "avg_bits_err_output": 0.016973793617776685,
    "avg_bits_err_improve": 29.51409615663413,
    "time": 4828.54638671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (+ (exp x) (- 2.0 (exp (- x)))) 0.0) (/ (fma (exp x) (exp x) (- (* (- (exp (- x)) 2.0) (- (exp (- x)) 2.0)))) (+ (exp x) (- 2.0 (exp (- x))))) (- (exp (- x)) (- 2.0 (exp x))))",
    "output_parens": 29,
    "avg_bits_err_input": 29.62849430006962,
    "avg_bits_err_output": 29.51945331866686,
    "avg_bits_err_improve": 0.1090409814027602,
    "time": 20997.235595703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (* (/ (/ 2.0 (+ 1.0 x)) (/ 4.0 x)) (/ 2.0 x)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 10.130581383432595,
    "avg_bits_err_output": 10.127609560835285,
    "avg_bits_err_improve": 0.002971822597309881,
    "time": 24480.541015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(+ (/ (tan (+ x eps)) 2.0) (log1p (expm1 (- (/ (tan (+ x eps)) 2.0) (tan x)))))",
    "output_parens": 11,
    "avg_bits_err_input": 37.61544432487748,
    "avg_bits_err_output": 37.83416174627597,
    "avg_bits_err_improve": -0.2187174213984875,
    "time": 22053.3046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.010578261194585,
    "avg_bits_err_output": 0.16937048906511415,
    "avg_bits_err_improve": 29.841207772129472,
    "time": 13080.221435546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (if (!= (+ (sin (+ x eps)) 2.0) 0.0) (/ (expm1 (+ (log1p (sin (+ x eps))) (log1p (sin (+ x eps))))) (+ (if (!= (sin (+ x eps)) 0.0) (/ 1.0 (/ 1.0 (sin (+ x eps)))) (sin (+ x eps))) 2.0)) (sin (+ x eps))) (sin x))",
    "output_parens": 29,
    "avg_bits_err_input": 37.46693857426891,
    "avg_bits_err_output": 37.59515763539087,
    "avg_bits_err_improve": -0.12821906112196046,
    "time": 21199.75537109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.90763185922271,
    "avg_bits_err_output": 19.770308290935308,
    "avg_bits_err_improve": 0.13732356828740322,
    "time": 14918.109130859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ N 1.0)) (atan N)) 0.0) (- (* (+ (atan (+ N 1.0)) (atan N)) (/ (atan (+ N 1.0)) (+ (atan (+ N 1.0)) (atan N)))) (/ (* (atan N) (+ (atan (+ N 1.0)) (atan N))) (+ (atan (+ N 1.0)) (atan N)))) (- (atan (+ N 1.0)) (atan N)))",
    "output_parens": 34,
    "avg_bits_err_input": 15.003709080553007,
    "avg_bits_err_output": 15.012329162793055,
    "avg_bits_err_improve": -0.008620082240048177,
    "time": 17039.14208984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.503171876792933,
    "avg_bits_err_output": 1.2498186336119579,
    "avg_bits_err_improve": 28.253353243180975,
    "time": 25010.330322265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (- m (* m m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0776488878888441,
    "avg_bits_err_output": 0.07525264726366379,
    "avg_bits_err_improve": 0.0023962406251803042,
    "time": 8118.691162109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (* (- b) a))",
    "output_parens": 4,
    "avg_bits_err_input": 15.812565061129124,
    "avg_bits_err_output": 0.30685657969317903,
    "avg_bits_err_improve": 15.505708481435946,
    "time": 11295.844482421875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (/ angle 180.0)) 0.0) (/ 1.0 (/ 1.0 (* PI (/ angle 180.0)))) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.608705022628236,
    "avg_bits_err_output": 20.611988411445918,
    "avg_bits_err_improve": -0.003283388817681754,
    "time": 38859.62451171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (log (+ 1.0 (expm1 (- (exp (log1p (log (+ 1.0 (expm1 (cos (* PI (/ angle 180.0)))))))) 1.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 31.438873971055294,
    "avg_bits_err_output": 31.43997237327082,
    "avg_bits_err_improve": -0.0010984022155255957,
    "time": 34905.10693359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (if (!= (* PI (* angle 0.005555555555555556)) 0.0) (/ 1.0 (/ 1.0 (* PI (/ (- angle) -180.0)))) (* PI (* angle 0.005555555555555556))))) 2.0) (pow (* b (cos (/ (* angle PI) 180.0))) 2.0))",
    "output_parens": 20,
    "avg_bits_err_input": 20.29283692702173,
    "avg_bits_err_output": 20.33555917134677,
    "avg_bits_err_improve": -0.042722244325037906,
    "time": 40505.7197265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17735620312590142,
    "avg_bits_err_output": 0.17320996250072113,
    "avg_bits_err_improve": 0.004146240625180292,
    "time": 16102.287841796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(+ (fma (* (tan x) (/ (tan x) (- -1.0 (* (tan x) (tan x))))) (* (tan x) (/ (tan x) (fma (tan x) (tan x) 1.0))) (* (* (tan x) (/ (tan x) (fma (tan x) (tan x) 1.0))) (* (tan x) (/ (tan x) (fma (tan x) (tan x) 1.0))))) (/ (- 1.0 (* (tan x) (tan x))) (fma (tan x) (tan x) 1.0)))",
    "output_parens": 40,
    "avg_bits_err_input": 0.31963946681700633,
    "avg_bits_err_output": 0.3184047359798803,
    "avg_bits_err_improve": 0.0012347308371260524,
    "time": 17515.154541015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13694812031259015,
    "avg_bits_err_output": 0.13694812031259015,
    "avg_bits_err_improve": 0,
    "time": 16573.534912109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 12,
    "avg_bits_err_input": 17.270826726077534,
    "avg_bits_err_output": 17.270826726077534,
    "avg_bits_err_improve": 0,
    "time": 34636.618408203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0)))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b))))) a) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 52.308047170860114,
    "avg_bits_err_output": 0.17158289531691698,
    "avg_bits_err_improve": 52.1364642755432,
    "time": 27521.43408203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.219183359608415,
    "avg_bits_err_output": 0.3413565600019762,
    "avg_bits_err_improve": 27.87782679960644,
    "time": 21982.8818359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.44645167037662,
    "avg_bits_err_output": 0.2369770687582929,
    "avg_bits_err_improve": 43.209474601618325,
    "time": 22570.562255859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.861446536139766,
    "avg_bits_err_output": 33.861446536139766,
    "avg_bits_err_improve": 0,
    "time": 21333.105224609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8077925542400564,
    "avg_bits_err_output": 0.807415012635698,
    "avg_bits_err_improve": 0.0003775416043583224,
    "time": 29476.271240234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0)))) 0.0) (/ (if (!= (+ 1.0 (/ 16.0 (* (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) 0.0) (/ (- 1.0 (/ (/ (/ 256.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))) (* (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) (+ 1.0 (/ 16.0 (* (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))))) (- 1.0 (/ 16.0 (* (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))))) (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))) (- 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 122,
    "avg_bits_err_input": 29.0979440931814,
    "avg_bits_err_output": 29.058849711585836,
    "avg_bits_err_improve": 0.03909438159556444,
    "time": 31089.70166015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (- (expm1 x) (expm1 (- x))) (+ (exp x) (exp (- x))))",
    "output_parens": 9,
    "avg_bits_err_input": 58.04622256576127,
    "avg_bits_err_output": 1.3625236843762623,
    "avg_bits_err_improve": 56.683698881385006,
    "time": 18922.401123046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (+ x x)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 58.06032060631522,
    "avg_bits_err_output": 0.04569812031259015,
    "avg_bits_err_improve": 58.01462248600263,
    "time": 6838.01806640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008875,
    "avg_bits_err_output": 0.008875,
    "avg_bits_err_improve": 0,
    "time": 2095.47021484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.873125,
    "avg_bits_err_output": 31.873125,
    "avg_bits_err_improve": 0,
    "time": 5081.7724609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (if (!= (- 4.0 (log (/ (- -1.0 x) (- x 1.0)))) 0.0) (/ (if (!= (* (log (/ (- -1.0 x) (+ -1.0 x))) (+ (log (/ (- -1.0 x) (+ -1.0 x))) -2.0)) 0.0) (/ (* (* (log (/ (- -1.0 x) (+ -1.0 x))) (+ (log (/ (- -1.0 x) (+ -1.0 x))) -2.0)) (- (/ (log (/ (- -1.0 x) (+ -1.0 x))) 0.5) (* (log (/ (- -1.0 x) (+ -1.0 x))) (+ (log (/ (- -1.0 x) (+ -1.0 x))) -2.0)))) (* (log (/ (- -1.0 x) (+ -1.0 x))) (+ (log (/ (- -1.0 x) (+ -1.0 x))) -2.0))) (- (fma (+ (log (/ (- -1.0 x) (+ -1.0 x))) -2.0) (+ (log (/ (- -1.0 x) (+ -1.0 x))) -2.0) -4.0))) (- 4.0 (log (/ (- -1.0 x) (- x 1.0))))) (log (/ (- -1.0 x) (- x 1.0)))))",
    "output_parens": 80,
    "avg_bits_err_input": 58.59448913333511,
    "avg_bits_err_output": 58.59513621137463,
    "avg_bits_err_improve": -0.0006470780395204656,
    "time": 25753.447998046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.003448120312590144,
    "avg_bits_err_output": 0.0036652410118609203,
    "avg_bits_err_improve": -0.00021712069927077617,
    "time": 2201.843994140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma ew (* (sin t) (cos (atan (/ eh (* ew (tan t)))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12686560156295074,
    "avg_bits_err_output": 0.1245212406251803,
    "avg_bits_err_improve": 0.0023443609377704344,
    "time": 26198.39794921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (* (tan t) (/ (- eh) ew))))) (* (sin t) (* eh (sin (atan (* (tan t) (/ (- eh) ew))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.11644812031259014,
    "avg_bits_err_output": 0.12147692783763284,
    "avg_bits_err_improve": -0.0050288075250427,
    "time": 16083.022705078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.12043562712222,
    "avg_bits_err_output": 3.8016556487787714,
    "avg_bits_err_improve": 35.31877997834345,
    "time": 26362.31005859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.33800257757965,
    "avg_bits_err_output": 14.33800257757965,
    "avg_bits_err_improve": 0,
    "time": 3739.54736328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1580655913209612,
    "avg_bits_err_output": 0.15902119898942887,
    "avg_bits_err_improve": -0.0009556076684676673,
    "time": 39377.1552734375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.311331709905836,
    "avg_bits_err_output": 0.17748853437914647,
    "avg_bits_err_improve": 52.13384317552669,
    "time": 21822.277587890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* -3.0 (* c a)))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.321092932950116,
    "avg_bits_err_output": 0.335416167201112,
    "avg_bits_err_improve": 27.985676765749005,
    "time": 23255.61865234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.46908362541463,
    "avg_bits_err_output": 0.23593458750793245,
    "avg_bits_err_improve": 43.2331490379067,
    "time": 23203.974609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (* b -0.3333333333333333) (* (sqrt (fma (* a c) -3.0 (* b b))) 0.3333333333333333)) a)",
    "output_parens": 8,
    "avg_bits_err_input": 33.8970234565059,
    "avg_bits_err_output": 33.926515342463524,
    "avg_bits_err_improve": -0.02949188595762564,
    "time": 21431.077392578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (if (!= (* (sin (- lambda1 lambda2)) (cos phi2)) 0.0) (/ 1.0 (/ (/ 1.0 (cos phi2)) (sin (- lambda1 lambda2)))) (* (sin (- lambda1 lambda2)) (cos phi2))) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.522863158103593,
    "avg_bits_err_output": 13.546236189555094,
    "avg_bits_err_improve": -0.02337303145150038,
    "time": 38063.00927734375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (if (!= (+ (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0))) 0.0) (/ (- (* (/ x (+ x 1.0)) (/ x (+ x 1.0))) (/ (+ x -1.0) (+ x -1.0))) (+ (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0)))) (- (/ x (+ x 1.0)) (/ (+ x -1.0) (+ x -1.0)))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 33,
    "avg_bits_err_input": 29.065162798802888,
    "avg_bits_err_output": 24.700708494003997,
    "avg_bits_err_improve": 4.36445430479889,
    "time": 37221.727783203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.07612386241940919,
    "avg_bits_err_improve": -0.06274886241940919,
    "time": 4071.15673828125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (if (!= (/ (+ (/ 1.0 (+ x -1.0)) (/ -1.0 (+ 1.0 x))) (+ x -1.0)) 0.0) (/ 1.0 (/ 1.0 (/ (+ (/ 1.0 (+ x -1.0)) (/ -1.0 (+ 1.0 x))) (+ x -1.0)))) (/ (+ (/ 1.0 (+ x -1.0)) (/ -1.0 (+ 1.0 x))) (+ x -1.0))) (/ -1.0 (+ x -1.0)))",
    "output_parens": 28,
    "avg_bits_err_input": 14.859461299622096,
    "avg_bits_err_output": 14.860273887216804,
    "avg_bits_err_improve": -0.0008125875947087025,
    "time": 19093.228271484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 2e+184) (/ (sqrt (* (- C (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A)) (* 2.0 (* F (- (pow B 2.0) (* 4.0 (* A C))))))) (- (* 4.0 (* A C)) (pow B 2.0))) 0.0)",
    "output_parens": 43,
    "avg_bits_err_input": 51.983211803226446,
    "avg_bits_err_output": 50.81112676575282,
    "avg_bits_err_improve": 1.1720850374736287,
    "time": 33953.349853515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 1.35e+157) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI)) (* (atan 0.0) (/ 180.0 PI)))",
    "output_parens": 17,
    "avg_bits_err_input": 30.035061182282806,
    "avg_bits_err_output": 28.148805903904385,
    "avg_bits_err_improve": 1.886255278378421,
    "time": 22948.185791015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (pow (* (* F (- (* 2.0 (pow B 2.0)) (* 8.0 (* C A)))) (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) 0.5) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 51.99893718574888,
    "avg_bits_err_output": 51.706172727261055,
    "avg_bits_err_improve": 0.29276445848782373,
    "time": 37060.8779296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 1.0) 0.0) (/ (* (+ (cbrt (/ g (+ a a))) 1.0) (cbrt (/ g (+ a a)))) (+ (if (!= (+ 1.0 (cbrt (/ g (+ a a)))) 0.0) (/ (- (* (+ 1.0 (cbrt (/ g (+ a a)))) (+ 1.0 (cbrt (/ g (+ a a))))) (+ 1.0 (cbrt (/ g (+ a a))))) (+ 1.0 (cbrt (/ g (+ a a))))) (cbrt (/ g (+ a a)))) 1.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 47,
    "avg_bits_err_input": 15.240815313840924,
    "avg_bits_err_output": 15.247311006418625,
    "avg_bits_err_improve": -0.0064956925777011065,
    "time": 34460.13330078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (/ (cbrt (* (/ 0.5 a) (- (sqrt (- (* g g) (* h h))) g))) 1.0) (cbrt (* (/ -0.5 a) (if (!= g 0.0) (/ (* g (+ g (sqrt (- (* g g) (* h h))))) g) (+ g (sqrt (- (* g g) (* h h))))))))",
    "output_parens": 27,
    "avg_bits_err_input": 36.37509049241928,
    "avg_bits_err_output": 36.310094013728346,
    "avg_bits_err_improve": 0.0649964786909365,
    "time": 18281.146484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9902601515716059,
    "avg_bits_err_output": 0.9751817671895736,
    "avg_bits_err_improve": 0.01507838438203224,
    "time": 12474.490966796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7168231203125902,
    "avg_bits_err_output": 0.7168231203125902,
    "avg_bits_err_improve": 0,
    "time": 2507.16943359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-292) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+284) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 10.990635441032403,
    "avg_bits_err_output": 2.416242722455524,
    "avg_bits_err_improve": 8.57439271857688,
    "time": 7575.365478515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5058062020706864,
    "avg_bits_err_output": 0.44275,
    "avg_bits_err_improve": 0.0630562020706864,
    "time": 11142.64892578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -2e+19) (log1p (if (!= x 0.0) (+ (+ -0.5 (/ (+ x (hypot 1.0 x)) 2.0)) (* x (/ (+ x (+ (hypot 1.0 x) -1.0)) (+ x x)))) (+ x (+ (hypot 1.0 x) -1.0)))) (log1p (+ x (if (!= (- 1.0 (hypot 1.0 x)) 0.0) (/ 1.0 (/ 1.0 (+ (hypot 1.0 x) -1.0))) (+ (hypot 1.0 x) -1.0)))))",
    "output_parens": 31,
    "avg_bits_err_input": 53.09023147039252,
    "avg_bits_err_output": 14.053025929367754,
    "avg_bits_err_improve": 39.03720554102476,
    "time": 12820.39794921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.677473653900648,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.677473653900648,
    "time": 3492.72216796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (if (!= (+ (/ x (- -1.0 x)) (/ 1.0 (- -1.0 x))) 0.0) (/ (/ (- 1.0 x) (- -1.0 x)) (+ (/ x (- -1.0 x)) (/ 1.0 (- -1.0 x)))) (/ (- 1.0 x) (- x -1.0))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0.0014999999999999996,
    "time": 9051.173095703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1204.37255859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.89513380956406,
    "avg_bits_err_output": 0.657736781721079,
    "avg_bits_err_improve": 12.237397027842981,
    "time": 22735.15576171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0) (* x1 x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 0.5029244838468105,
    "avg_bits_err_output": 0.2863792763039112,
    "avg_bits_err_improve": 0.21654520754289935,
    "time": 63401.03271484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.21487455932854,
    "avg_bits_err_output": 1.4936878984196205,
    "avg_bits_err_improve": 16.72118666090892,
    "time": 7239.74853515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.24785620312590143,
    "avg_bits_err_output": 0.24785620312590143,
    "avg_bits_err_improve": 0,
    "time": 9348.224853515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0025,
    "avg_bits_err_output": 0.0025,
    "avg_bits_err_improve": 0,
    "time": 11187.783447265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* (+ (/ (/ 0.5 a) (- b a)) (/ -0.5 (* b (- b a)))) (/ PI (+ b a)))",
    "output_parens": 10,
    "avg_bits_err_input": 14.088246987263581,
    "avg_bits_err_output": 0.28785940001153837,
    "avg_bits_err_improve": 13.800387587252043,
    "time": 14938.103515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (- (/ (exp (- (* eps x) x)) eps) (+ (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))) (exp (- (* eps x) x)))) 0.0) (/ (* (- (/ (exp (- (* eps x) x)) eps) (+ (exp (- (* eps x) x)) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) (+ (exp (- (* eps x) x)) (+ (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))) (/ (exp (- (* eps x) x)) eps)))) (- (/ (exp (- (* eps x) x)) eps) (+ (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))) (exp (- (* eps x) x))))) (+ (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* eps x)))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) 2.0)",
    "output_parens": 73,
    "avg_bits_err_input": 29.22088656098563,
    "avg_bits_err_output": 24.74029422684284,
    "avg_bits_err_improve": 4.480592334142791,
    "time": 27915.449462890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.020625,
    "avg_bits_err_output": 0.020625,
    "avg_bits_err_improve": 0,
    "time": 16336.66845703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (+ 1.0 (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))))) (+ (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))) 4.0))",
    "output_parens": 26,
    "avg_bits_err_input": 0.024875,
    "avg_bits_err_output": 0.0305,
    "avg_bits_err_improve": -0.005624999999999998,
    "time": 16123.6865234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))) (+ 2.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.056875,
    "avg_bits_err_output": 0.009,
    "avg_bits_err_improve": 0.047875,
    "time": 12570.20751953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3445.908447265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7041.974365234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 3169.670654296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.82853340489227,
    "avg_bits_err_output": 0.259375,
    "avg_bits_err_improve": 7.56915840489227,
    "time": 31062.870849609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.541647976561522,
    "avg_bits_err_output": 7.541647976561522,
    "avg_bits_err_improve": 0,
    "time": 16196.998779296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 16.250982329742293,
    "avg_bits_err_output": 16.250982329742293,
    "avg_bits_err_improve": 0,
    "time": 16181.003662109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(fma (exp (* 10.0 (* x x))) (* 2.0 (cos x)) (- (- (exp (* 10.0 (* x x))) (* (exp (* 10.0 (* x x))) (cos x))) (- (expm1 (* 10.0 (* x x))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 3.5421382670536876,
    "avg_bits_err_output": 3.547201957777406,
    "avg_bits_err_improve": -0.005063690723718484,
    "time": 20812.708740234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -3e+26) (if (!= (* (* (+ 2.0 (* x (+ x x))) (/ 1.0 (+ 2.0 (* x (+ x x))))) (/ x (fma x x 1.0))) 0.0) (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) (/ x (fma x x 1.0))) (if (<= x 1.0) (/ x (fma x x 1.0)) (if (!= (* (* (+ 2.0 (* x (+ x x))) (/ 1.0 (+ 2.0 (* x (+ x x))))) (/ x (fma x x 1.0))) 0.0) (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) (/ x (fma x x 1.0)))))",
    "output_parens": 62,
    "avg_bits_err_input": 15.06790785240537,
    "avg_bits_err_output": 0.014625,
    "avg_bits_err_improve": 15.053282852405369,
    "time": 6922.8388671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.4131633067091,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.4131633067091,
    "time": 4702.58837890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.657742036475284,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 38.65761703647529,
    "time": 4090.771728515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.25275,
    "avg_bits_err_improve": 63.74725,
    "time": 12960.949462890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325490773342,
    "avg_bits_err_output": 0.3935,
    "avg_bits_err_improve": 61.449754907733414,
    "time": 7676.48876953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (/ b -2.0) (if (!= (- (/ b -2.0) (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (/ 1.0 (/ 1.0 (- (/ b -2.0) (sqrt (fma a (* c -4.0) (* b b)))))) (- (/ b -2.0) (sqrt (fma a (* c -4.0) (* b b)))))) (* a 2.0))",
    "output_parens": 26,
    "avg_bits_err_input": 34.081361275863955,
    "avg_bits_err_output": 34.37175365352697,
    "avg_bits_err_improve": -0.29039237766301795,
    "time": 24506.285400390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.861446536139766,
    "avg_bits_err_output": 33.861446536139766,
    "avg_bits_err_improve": 0,
    "time": 24127.946044921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2504.908935546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.144719079365316,
    "avg_bits_err_output": 0.00875,
    "avg_bits_err_improve": 40.13596907936532,
    "time": 6105.652099609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- (* y x) (- (* x (+ y x)) (* y y))) (- (fma y y (* x x))))",
    "output_parens": 10,
    "avg_bits_err_input": 20.2896927656655,
    "avg_bits_err_output": 20.29523545042845,
    "avg_bits_err_improve": -0.0055426847629505005,
    "time": 6186.26123046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ c (+ d a))) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6723747271657574,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6723747271657574,
    "time": 11604.7236328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.039625,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0.039375,
    "time": 6691.68310546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.022615601562950727,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.012240601562950726,
    "time": 4030.924560546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.015625,
    "avg_bits_err_output": 0.01375,
    "avg_bits_err_improve": 0.001875,
    "time": 2677.36083984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 1636.28466796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ b (+ d a)) (+ c e))",
    "output_parens": 4,
    "avg_bits_err_input": 0.38537537656727777,
    "avg_bits_err_output": 0.241625,
    "avg_bits_err_improve": 0.14375037656727777,
    "time": 5339.138671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(/ (+ (cos x) (if (!= (+ (cos x) 2.0) 0.0) (/ (fma (cos x) (cos x) -4.0) (+ (cos x) 2.0)) (- (cos x) 2.0))) -2.0)",
    "output_parens": 15,
    "avg_bits_err_input": 30.096737201696023,
    "avg_bits_err_output": 30.106916178872936,
    "avg_bits_err_improve": -0.010178977176913406,
    "time": 13166.33447265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (sqrt (if (!= eps 0.0) (if (!= (/ (* eps (fma x x eps)) eps) 0.0) (/ (* (/ (* eps (fma x x eps)) eps) (fma x x (- eps))) (/ (* eps (fma x x eps)) eps)) (fma x x (- eps))) (- (* x x) eps))))",
    "output_parens": 23,
    "avg_bits_err_input": 24.78045917770206,
    "avg_bits_err_output": 24.804454179344688,
    "avg_bits_err_improve": -0.023995001642628466,
    "time": 13126.944580078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (- (tan x))) 0.0) (/ (if (!= (* (/ x (- (tan x))) (/ x (tan x))) 0.0) (/ (fma (* (/ x (tan x)) (/ x (tan x))) (* (/ x (tan x)) (/ x (tan x))) (* (* (/ x (- (tan x))) (/ (- (sin x)) (tan x))) (* (/ x (- (tan x))) (/ x (tan x))))) (* (/ x (- (tan x))) (/ x (tan x)))) (fma (/ (- (sin x)) (tan x)) (/ x (- (tan x))) (* (/ x (- (tan x))) (/ x (tan x))))) (/ x (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 68,
    "avg_bits_err_input": 30.113208890120433,
    "avg_bits_err_output": 30.12739562489532,
    "avg_bits_err_improve": -0.01418673477488852,
    "time": 32664.293701171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006698120312590144,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.006198120312590144,
    "time": 3733.018798828125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n))))",
    "output_parens": 22,
    "avg_bits_err_input": 47.41160314990244,
    "avg_bits_err_output": 13.656201745395654,
    "avg_bits_err_improve": 33.755401404506785,
    "time": 25123.863525390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma d d (* c c)))) (* a (/ c (fma d d (* c c)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.908789764300582,
    "avg_bits_err_output": 23.772160737019252,
    "avg_bits_err_improve": 3.13662902728133,
    "time": 13368.852294921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 5e+269) (/ (fma c b (* a (- d))) (+ (* c c) (* d d))) (- (* (/ b (fma c c (* d d))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.270625993114052,
    "avg_bits_err_output": 23.196952947705157,
    "avg_bits_err_improve": 3.0736730454088956,
    "time": 13539.228515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.035625,
    "avg_bits_err_output": 0.02137394680449909,
    "avg_bits_err_improve": 0.014251053195500907,
    "time": 4707.845947265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- (- (* ux ux) (- ux (- (* ux (* maxCos (+ (* ux maxCos) (- 2.0 (+ ux ux))))) ux))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.462975043700663,
    "avg_bits_err_output": 0.5526325694542622,
    "avg_bits_err_improve": 12.9103424742464,
    "time": 29379.929931640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- (+ ux ux) (* ux ux)) (- (* (* ux maxCos) (+ (fma ux maxCos (- 1.0 ux)) (- 1.0 ux)))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.507328469036898,
    "avg_bits_err_output": 0.32450089185384856,
    "avg_bits_err_improve": 13.18282757718305,
    "time": 30977.573974609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (if (!= (* PI uy) 0.0) (/ 2.0 (/ (/ 1.0 uy) PI)) (* PI (+ uy uy)))) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output_parens": 40,
    "avg_bits_err_input": 0.328177297868859,
    "avg_bits_err_output": 0.33942598238805066,
    "avg_bits_err_improve": -0.011248684519191643,
    "time": 44115.886962890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.21051020992672873,
    "avg_bits_err_output": 0.21051020992672873,
    "avg_bits_err_improve": 0,
    "time": 24496.858642578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(log1p (expm1 (* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5418959333010298,
    "avg_bits_err_output": 0.5428850979091258,
    "avg_bits_err_improve": -0.0009891646080959493,
    "time": 25991.142333984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(- (sqrt (/ u1 (- 1.0 u1))) (- (sqrt (/ u1 (- 1.0 u1))) (* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.31916516594789673,
    "avg_bits_err_output": 0.32851060427288886,
    "avg_bits_err_improve": -0.009345438324992128,
    "time": 22358.889404296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ (/ 1.0 (fma u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.3321276630050384,
    "avg_bits_err_output": 0.3319295426924482,
    "avg_bits_err_improve": 0.0001981203125901998,
    "time": 64300.5712890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.058452828504809935,
    "avg_bits_err_output": 0.058452828504809935,
    "avg_bits_err_improve": 0,
    "time": 18436.243408203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (/ (/ (exp (* (/ (fabs x) s) -0.5)) (+ (exp (/ (fabs x) (- s))) 1.0)) (+ (exp (/ (fabs x) (- s))) 1.0)) (/ (exp (* (fabs x) (/ -0.5 s))) s))",
    "output_parens": 22,
    "avg_bits_err_input": 0.15271362191927917,
    "avg_bits_err_output": 0.11035490123558823,
    "avg_bits_err_improve": 0.04235872068369094,
    "time": 21962.77880859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* PI (* tau x))) (* PI (* tau x))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6767807164693598,
    "avg_bits_err_output": 0.6802871005567529,
    "avg_bits_err_improve": -0.003506384087393122,
    "time": 19623.6015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.167893458786857,
    "avg_bits_err_output": 0.167893458786857,
    "avg_bits_err_improve": 0,
    "time": 24205.78515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.6794854329685642,
    "avg_bits_err_output": 2.6753367485923016,
    "avg_bits_err_improve": 0.00414868437626259,
    "time": 28596.43115234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (* (/ 1.0 v) (/ cosTheta_i (sinh (/ 1.0 v)))) (/ 0.5 (* v (exp (* sinTheta_i (/ sinTheta_O v)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4523562980781001,
    "avg_bits_err_output": 0.3477139673645016,
    "avg_bits_err_improve": 0.10464233071359852,
    "time": 23378.694091796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (if (!= 0.6931 0.0) (+ 0.6931 (/ (* 0.6931 (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (log (/ 0.5 v)))) 0.6931)) (+ (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v) (+ 0.6931 (log (/ 0.5 v))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.09521814623317311,
    "avg_bits_err_output": 0.09967892366341574,
    "avg_bits_err_improve": -0.004460777430242632,
    "time": 28410.217529296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (+ (* alpha alpha) -1.0) (log (* alpha alpha))) PI) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4769048987141803,
    "avg_bits_err_output": 0.4749255296569761,
    "avg_bits_err_improve": 0.0019793690572041944,
    "time": 25003.99169921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(+ (fma (- (- 3.0 (* 3.0 (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)))))) s (* s (- 3.0 (* 3.0 (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))))))) (* s (* 3.0 (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 19,
    "avg_bits_err_input": 1.3117305707750366,
    "avg_bits_err_output": 1.285766216663345,
    "avg_bits_err_improve": 0.025964354111691623,
    "time": 26694.83447265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (log1p (if (!= (- -1.0 (/ 1.0 (fma u -4.0 1.0))) 0.0) (/ (/ (/ (- (/ (/ 1.0 (fma u -4.0 1.0)) (* (fma u -4.0 1.0) (fma u -4.0 1.0))) (/ 1.0 (fma u -4.0 1.0))) (/ -1.0 (* (fma u -4.0 1.0) (fma u -4.0 1.0)))) (fma u -4.0 1.0)) (- -1.0 (/ 1.0 (fma u -4.0 1.0)))) (+ (/ 1.0 (fma u -4.0 1.0)) -1.0))))",
    "output_parens": 30,
    "avg_bits_err_input": 12.23917750314314,
    "avg_bits_err_output": 11.60104638188386,
    "avg_bits_err_improve": 0.6381311212592795,
    "time": 28291.8916015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (* (- PI) (/ (* r s) -0.16666666666666666))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12330796069031025,
    "avg_bits_err_output": 0.12373901570203516,
    "avg_bits_err_improve": -0.00043105501172491234,
    "time": 28950.06396484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.9352968279169397,
    "avg_bits_err_output": 0.7823371904251006,
    "avg_bits_err_improve": 0.15295963749183905,
    "time": 28740.03564453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6754996208738828,
    "avg_bits_err_output": 0.4747606432420835,
    "avg_bits_err_improve": 0.20073897763179932,
    "time": 22121.195556640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (- (log1p (- u1))) 0.5) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.541353183554238,
    "avg_bits_err_output": 0.5276212806749014,
    "avg_bits_err_improve": 13.013731902879336,
    "time": 23916.7470703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (sqrt (- (log1p (- u1)))) (- (sqrt (- (log1p (- u1)))) (* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (* PI u2))))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.585095345600042,
    "avg_bits_err_output": 0.3053670352532034,
    "avg_bits_err_improve": 13.279728310346838,
    "time": 23643.04638671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (fma (- alpha) alpha (* alpha alpha)) (* (- alpha) (* alpha (log (- 1.0 u0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.020426091044692,
    "avg_bits_err_output": 13.969466392879344,
    "avg_bits_err_improve": 0.0509596981653484,
    "time": 22454.11669921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (expm1 (log1p (/ cos2phi (* alphax alphax)))) (/ sin2phi (* alphay alphay))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.522760797044796,
    "avg_bits_err_output": 12.525638140532878,
    "avg_bits_err_improve": -0.002877343488082218,
    "time": 21454.1123046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -2e+156) (- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (/ 1.0 (* l (* (* PI l) (/ 1.0 l))))) (* PI l))) F) F)) (if (<= (* PI l) -2e+23) (- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (- (/ 4.0 (/ 4.0 (* (* l l) (* PI PI)))) (- (/ 4.0 (/ 4.0 (* (* l l) (* PI PI)))) (/ (/ 4.0 (* PI l)) (/ 4.0 (* (* l l) (* PI PI)))))) (* PI l))) F) F)) (if (<= (* PI l) 100000000000.0) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (if (<= (* PI l) 1e+130) (- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (- (/ 4.0 (/ 4.0 (* (* l l) (* PI PI)))) (- (/ 4.0 (/ 4.0 (* (* l l) (* PI PI)))) (/ (/ 4.0 (* PI l)) (/ 4.0 (* (* l l) (* PI PI)))))) (* PI l))) F) F)) (- (if (!= (* PI l) 0.0) (- (/ 4.0 (/ (/ 4.0 l) PI)) 0.0) (* PI l)) (/ (/ (tan (* PI l)) F) F))))))",
    "output_parens": 102,
    "avg_bits_err_input": 17.292468979213908,
    "avg_bits_err_output": 6.764652126139107,
    "avg_bits_err_improve": 10.5278168530748,
    "time": 26326.385009765625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.216625203512582,
    "avg_bits_err_output": 0.15286560156295073,
    "avg_bits_err_improve": 0.06375960194963126,
    "time": 14494.6630859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.636061481042615,
    "avg_bits_err_output": 10.349249890681094,
    "avg_bits_err_improve": 3.2868115903615216,
    "time": 18829.0283203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (+ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) 1.0) 1.0) (* PI -0.25))",
    "output_parens": 34,
    "avg_bits_err_input": 61.47469298687306,
    "avg_bits_err_output": 2.055563397303156,
    "avg_bits_err_improve": 59.419129589569906,
    "time": 44229.359619140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= (* l l) 5e+303) (* t (/ (sqrt 2.0) (sqrt (+ (+ (- (* l l)) (* (/ (- x -1.0) (+ x -1.0)) (* l l))) (* (* 2.0 (* t t)) (/ (- x -1.0) (+ x -1.0))))))) (/ (* (sqrt 2.0) t) (pow (fma l (- l) (/ (* (+ 1.0 x) (fma 2.0 (* t t) (* l l))) (+ -1.0 x))) 0.5)))",
    "output_parens": 35,
    "avg_bits_err_input": 43.17700125312591,
    "avg_bits_err_output": 36.67204595208172,
    "avg_bits_err_improve": 6.504955301044191,
    "time": 26524.58349609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin th) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin ky))",
    "output_parens": 10,
    "avg_bits_err_input": 4.067728561313607,
    "avg_bits_err_output": 4.119333567345931,
    "avg_bits_err_improve": -0.05160500603232432,
    "time": 25872.925048828125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.96675,
    "avg_bits_err_output": 0.96675,
    "avg_bits_err_improve": 0,
    "time": 17496.597412109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 9.789597222722069,
    "avg_bits_err_output": 9.789597222722069,
    "avg_bits_err_improve": 0,
    "time": 7072.30078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 1e-301) (sqrt (* U (* (* 2.0 n) (- t (+ (* (pow (/ l Om) 2.0) (* n (- U U*))) (* 2.0 (* l (/ l Om)))))))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 1e+304) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* U (if (!= (* 2.0 (* n (+ t (* (/ (* l l) Om) -2.0)))) 0.0) (* (* 2.0 n) (* (- (* n (* (pow (/ l Om) 2.0) (- U U*))) (fma (* l (/ l Om)) -2.0 t)) (* (* 2.0 (fma (* l (/ l Om)) -2.0 t)) (/ n (* (fma (* l (/ l Om)) -2.0 t) (* n -2.0)))))) (* (* 2.0 n) (- t (fma n (* (pow (/ l Om) 2.0) (- U U*)) (* 2.0 (/ (* l l) Om))))))))))",
    "output_parens": 102,
    "avg_bits_err_input": 34.475201905767605,
    "avg_bits_err_output": 28.553133908761705,
    "avg_bits_err_improve": 5.9220679970059,
    "time": 35292.999267578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* (tan k) (* (pow (/ k t) 2.0) (* (pow t 3.0) (/ (sin k) l)))) l))",
    "output_parens": 11,
    "avg_bits_err_input": 47.61331606667237,
    "avg_bits_err_output": 36.90866490740338,
    "avg_bits_err_improve": 10.704651159268991,
    "time": 39608.4423828125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (pow t 3.0) (/ (* (+ 2.0 (pow (/ k t) 2.0)) (tan k)) l)) (/ (sin k) l)))",
    "output_parens": 12,
    "avg_bits_err_input": 32.67543674537656,
    "avg_bits_err_output": 27.019918619171367,
    "avg_bits_err_improve": 5.655518126205191,
    "time": 20360.402099609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* (cos th) (* a2 a2)) (/ (* (* (cos th) a1) (+ a1 a1)) 2.0)) (sqrt 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.49869022814465336,
    "avg_bits_err_output": 0.46981973907953856,
    "avg_bits_err_improve": 0.0288704890651148,
    "time": 23165.449951171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* 2.0 (* PI n)) (* k -0.5)) (/ (sqrt (* 2.0 (* PI n))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.49524191574408905,
    "avg_bits_err_output": 0.37177609306379555,
    "avg_bits_err_improve": 0.12346582268029349,
    "time": 19031.53369140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (if (!= (+ (exp l) (exp (- l))) 0.0) (/ (if (!= (+ (exp (+ l l)) (exp (* l -2.0))) 0.0) (/ (if (!= (+ (exp (+ (+ l l) (+ l l))) (exp (* l -4.0))) 0.0) (/ (if (!= (+ (exp (* (+ l l) 4.0)) (exp (* l -8.0))) 0.0) (/ (- (exp (* (* (+ l l) -2.0) -4.0)) (exp (* l -16.0))) (+ (exp (* (+ l l) 4.0)) (exp (* l -8.0)))) (- (exp (* (+ l l) 4.0)) (exp (* l -8.0)))) (+ (exp (+ (+ l l) (+ l l))) (exp (* l -4.0)))) (- (exp (+ (+ l l) (+ l l))) (exp (* l -4.0)))) (+ (exp (+ l l)) (exp (* l -2.0)))) (- (exp (+ l l)) (exp (* l -2.0)))) (+ (exp l) (exp (- l)))) (- (exp l) (exp (- l))))) (cos (/ K 2.0))) U)",
    "output_parens": 90,
    "avg_bits_err_input": 17.094342382592135,
    "avg_bits_err_output": 17.13903735010681,
    "avg_bits_err_improve": -0.044694967514676165,
    "time": 31884.72900390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (if (!= (* K (/ (+ m n) 2.0)) 0.0) (* (- (* K (/ (+ m n) 2.0)) M) (/ (/ (/ K K) (log1p (expm1 (/ K (* K (+ m n)))))) (+ m n))) (- (* K (/ (+ m n) 2.0)) M))) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 35,
    "avg_bits_err_input": 14.829365840309114,
    "avg_bits_err_output": 14.920582727576628,
    "avg_bits_err_improve": -0.09121688726751387,
    "time": 21364.388671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.953490601562955,
    "avg_bits_err_output": 17.953490601562955,
    "avg_bits_err_improve": 0,
    "time": 18979.233154296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.144391989015354,
    "avg_bits_err_output": 10.747353227060149,
    "avg_bits_err_improve": 3.397038761955205,
    "time": 15774.32763671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* c0 (sqrt (/ A (* V l)))) (- INFINITY)) (* c0 (sqrt (/ (/ A V) l))) (if (<= (* c0 (sqrt (/ A (* V l)))) -5e-260) (* c0 (sqrt (+ (/ (- A (/ A -2.0)) (* V (+ l l))) (/ A (* (+ l l) (+ V V)))))) (if (<= (* c0 (sqrt (/ A (* V l)))) 1e-315) (* c0 (sqrt (/ (/ A l) V))) (if (<= (* c0 (sqrt (/ A (* V l)))) 5e+210) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (/ (/ A V) l)))))))",
    "output_parens": 53,
    "avg_bits_err_input": 19.57038228438656,
    "avg_bits_err_output": 15.105672803337693,
    "avg_bits_err_improve": 4.4647094810488674,
    "time": 15002.484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -4.5e-204) (/ (/ (+ (* (* (/ (/ (/ d D) w) (* D h)) (* d c0)) (+ c0 c0)) (* (sqrt (* (fma (/ (/ (/ d D) w) (* D h)) (* d c0) M) (- (* (/ (/ (/ d D) w) (* D h)) (* d c0)) M))) (+ c0 c0))) (+ w w)) 2.0) (if (<= w 2e-191) (/ (/ (* c0 (fma c0 (* d (/ d (* w (* h (* D D))))) (sqrt (* (fma c0 (* d (/ d (* w (* h (* D D))))) M) (- (* d (* d (/ c0 (* w (* h (* D D)))))) M))))) w) 2.0) (/ (* (/ c0 w) (+ (* (* d c0) (/ (/ (/ d D) h) (* w D))) (sqrt (* (fma (/ (/ (/ d D) h) (* w D)) (* d c0) M) (- (* (* d c0) (/ (/ (/ d D) h) (* w D))) M))))) 2.0)))",
    "output_parens": 82,
    "avg_bits_err_input": 59.65366311255262,
    "avg_bits_err_output": 54.27056331364861,
    "avg_bits_err_improve": 5.383099798904013,
    "time": 42459.44677734375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(* (sqrt (/ d l)) (- (sqrt (/ d h)) (* 0.5 (* (* h (sqrt (/ d h))) (/ (pow (* M (/ D (* d 2.0))) 2.0) l)))))",
    "output_parens": 16,
    "avg_bits_err_input": 26.1102377170222,
    "avg_bits_err_output": 24.887752096121165,
    "avg_bits_err_improve": 1.2224856209010362,
    "time": 39458.43701171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (+ 0.5 (log1p (expm1 (/ -0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.198639124086169,
    "avg_bits_err_output": 14.710196656121706,
    "avg_bits_err_improve": 0.4884424679644628,
    "time": 29027.122314453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 4.0 (fma v v -1.0)) (- (* 3.0 PI))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.9842712406251803,
    "avg_bits_err_output": 0.014834962500721157,
    "avg_bits_err_improve": 0.9694362781244592,
    "time": 3951.724365234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* v (* v 5.0))) PI) (sqrt (- 2.0 (* v (* v 6.0))))) (+ (* t (- (* v v))) t))",
    "output_parens": 14,
    "avg_bits_err_input": 0.4232660806086218,
    "avg_bits_err_output": 0.10758496250072117,
    "avg_bits_err_improve": 0.31568111810790067,
    "time": 22964.83544921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (expm1 (log1p (sqrt (- 1.0 (* v (* 3.0 v)))))) (* (/ (sqrt 2.0) 4.0) (- 1.0 (* v v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.011240601562950724,
    "avg_bits_err_output": 0.016493045314032465,
    "avg_bits_err_improve": -0.005252443751081741,
    "time": 5753.784423828125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5689749779216494,
    "avg_bits_err_output": 0.5689749779216494,
    "avg_bits_err_improve": 0,
    "time": 17123.954833984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (/ (- (pow k m)) (- -1.0 (* k (+ k 10.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 2.057504563148923,
    "avg_bits_err_output": 2.049762911718058,
    "avg_bits_err_improve": 0.007741651430865026,
    "time": 14244.028564453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (expm1 (log1p (exp (/ (+ mu (- Vef (- Ec EDonor))) KbT)))))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.024045067776892925,
    "avg_bits_err_output": 0.024276459853653613,
    "avg_bits_err_improve": -0.0002313920767606885,
    "time": 10508.7861328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.18088233125324507,
    "avg_bits_err_output": 0.18088233125324507,
    "avg_bits_err_improve": 0,
    "time": 18935.1123046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.1909003037584943,
    "avg_bits_err_output": 0.1909003037584943,
    "avg_bits_err_improve": 0,
    "time": 3999.779296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18768732722117645,
    "avg_bits_err_output": 0.18768732722117645,
    "avg_bits_err_improve": 0,
    "time": 19403.12548828125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (if (!= (/ x (sqrt (fma 4.0 (* p p) (* x x)))) 0.0) (/ (- (* (/ x (sqrt (fma 4.0 (* p p) (* x x)))) (/ x (sqrt (fma 4.0 (* p p) (* x x))))) (- (/ x (sqrt (fma 4.0 (* p p) (* x x)))))) (/ x (sqrt (fma 4.0 (* p p) (* x x))))) (+ 1.0 (/ x (sqrt (fma 4.0 (* p p) (* x x))))))))",
    "output_parens": 39,
    "avg_bits_err_input": 13.275076765494285,
    "avg_bits_err_output": 13.277150224389294,
    "avg_bits_err_improve": -0.0020734588950084287,
    "time": 16649.555908203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.51736058791459,
    "avg_bits_err_output": 0.03325,
    "avg_bits_err_improve": 40.484110587914586,
    "time": 4716.743896484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (tan x)))",
    "output_parens": 5,
    "avg_bits_err_input": 30.93712721710075,
    "avg_bits_err_output": 30.93712721710075,
    "avg_bits_err_improve": 0,
    "time": 15229.89599609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (fma b_2 b_2 (* a (- c)))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 34.61760259231339,
    "avg_bits_err_output": 34.61753293475177,
    "avg_bits_err_improve": 6.96575616174755e-05,
    "time": 14647.05908203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (fma b_2 b_2 (* a (- c))))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 35.00094369766507,
    "avg_bits_err_output": 35.00116813449342,
    "avg_bits_err_improve": -0.00022443682834705214,
    "time": 15159.812744140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.632038646688006,
    "avg_bits_err_output": 30.86518080829755,
    "avg_bits_err_improve": 0.7668578383904574,
    "time": 16763.75927734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (<= x 0.98) (- (expm1 (/ (log x) n))) (- (pow (+ x 1.0) (/ 1.0 n)) (log1p (expm1 (pow x (/ 1.0 n))))))",
    "output_parens": 14,
    "avg_bits_err_input": 33.07206991980063,
    "avg_bits_err_output": 12.429994578713792,
    "avg_bits_err_improve": 20.64207534108684,
    "time": 30959.2783203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (- (log1p N) (- (log N))) 0.0) (+ (* (/ (log N) (+ (log N) (log1p N))) (/ (log N) -2.0)) (/ (+ (* (log N) (- (log N))) (* (log1p N) (+ (log1p N) (log1p N)))) (+ (log N) (+ (log N) (+ (log1p N) (log1p N)))))) (- (log1p N) (log N)))",
    "output_parens": 36,
    "avg_bits_err_input": 29.804529152916196,
    "avg_bits_err_output": 29.841543822276172,
    "avg_bits_err_improve": -0.03701466935997644,
    "time": 11728.98095703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (/ (+ -1.0 (/ (+ x x) (+ x 1.0))) (+ x x)) (/ -1.0 (+ x x)))",
    "output_parens": 9,
    "avg_bits_err_input": 14.2273226190291,
    "avg_bits_err_output": 14.26036450874143,
    "avg_bits_err_improve": -0.03304188971233124,
    "time": 17157.148193359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (cos (+ x eps)) (log (+ 1.0 (log1p (expm1 (expm1 (cos x)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 39.638216277975815,
    "avg_bits_err_output": 39.6640590711072,
    "avg_bits_err_improve": -0.025842793131381825,
    "time": 22038.9970703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.188358436767803,
    "avg_bits_err_output": 29.903709288546548,
    "avg_bits_err_improve": 0.28464914822125564,
    "time": 14892.9794921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(- (/ 0.5 (sin x)) (- (/ 0.5 (sin x)) (/ (- 1.0 (cos x)) (sin x))))",
    "output_parens": 10,
    "avg_bits_err_input": 30.579054011345196,
    "avg_bits_err_output": 30.589174762878738,
    "avg_bits_err_improve": -0.01012075153354175,
    "time": 22437.711669921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.93445466301425,
    "avg_bits_err_output": 34.93445466301425,
    "avg_bits_err_improve": 0,
    "time": 31614.2958984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b 1.32e+154) (/ (/ (+ b (sqrt (fma b b (* c (* a -4.0))))) -2.0) a) (if (!= (/ (/ b a) 2.0) 0.0) (if (!= (/ 2.0 (/ 4.0 (- (/ b a)))) 0.0) (+ (/ 2.0 (/ 4.0 (- (/ b a)))) (/ 0.0 (/ 4.0 (/ 4.0 (- (/ b a)))))) (+ 0.0 (/ 2.0 (/ 4.0 (- (/ b a)))))) (/ (+ b (sqrt (fma b b (* (* a c) -4.0)))) (* a -2.0))))",
    "output_parens": 41,
    "avg_bits_err_input": 34.44126964576185,
    "avg_bits_err_output": 33.14812652641362,
    "avg_bits_err_improve": 1.2931431193482297,
    "time": 27451.289794921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.38891185717953,
    "avg_bits_err_output": 0.8275233196376369,
    "avg_bits_err_improve": 60.561388537541895,
    "time": 26757.559326171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (- 1.0 (fma n (- (log1p n) (log n)) (log1p n))) 0.0) (/ 1.0 (- (exp (log1p (/ 1.0 (+ (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n))))))) 1.0)) (+ (fma n (- (log1p n) (log n)) (log1p n)) -1.0))",
    "output_parens": 27,
    "avg_bits_err_input": 62.99888327154557,
    "avg_bits_err_output": 7.073223705272593,
    "avg_bits_err_improve": 55.925659566272984,
    "time": 18441.85546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (exp (log1p (log (/ (- 1.0 eps) (+ 1.0 eps))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 58.35341066314982,
    "avg_bits_err_output": 58.386904848475496,
    "avg_bits_err_improve": -0.03349418532567228,
    "time": 13264.075927734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ (+ (/ 0.5 x) (/ -0.5 (tan x))) (/ (+ 1.0 (/ (/ 4.0 (tan x)) (/ -4.0 x))) (+ x x)))",
    "output_parens": 12,
    "avg_bits_err_input": 59.79855468872009,
    "avg_bits_err_output": 59.81702746657773,
    "avg_bits_err_improve": -0.01847277785763879,
    "time": 27760.6435546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* eps (/ (expm1 (* eps (+ a b))) (expm1 (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.394072675873275,
    "avg_bits_err_output": 29.27607945053609,
    "avg_bits_err_improve": 31.117993225337184,
    "time": 26724.27587890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 40.941937859467174,
    "avg_bits_err_output": 0.4216156015629508,
    "avg_bits_err_improve": 40.520322257904226,
    "time": 5171.30517578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.52065401188685,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 58.51965401188685,
    "time": 3486.286865234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 28.826777816347242,
    "avg_bits_err_output": 0.017604374069748012,
    "avg_bits_err_improve": 28.809173442277494,
    "time": 3098.373291015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (exp x) (- (- (* (exp x) 2.0) 1.0))) (exp x))",
    "output_parens": 9,
    "avg_bits_err_input": 29.476469818524706,
    "avg_bits_err_output": 28.637856062420557,
    "avg_bits_err_improve": 0.8386137561041487,
    "time": 19589.69921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ -2.0 x) (if (!= (/ 1.0 (+ 1.0 x)) 0.0) (/ (+ 1.0 (/ 1.0 (/ (+ x -1.0) (+ 1.0 x)))) (+ 1.0 x)) (+ (/ 1.0 (+ 1.0 x)) (/ 1.0 (+ x -1.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 9.453149699537779,
    "avg_bits_err_output": 9.46854769676762,
    "avg_bits_err_improve": -0.01539799722984192,
    "time": 33926.005126953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (/ (sin x) (cos x)))",
    "output_parens": 6,
    "avg_bits_err_input": 36.94908442066489,
    "avg_bits_err_output": 36.947167580473845,
    "avg_bits_err_improve": 0.001916840191043434,
    "time": 21247.631591796875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (if (!= (/ (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) 2.0) 0.0) (- (/ 0.75 (+ (sqrt (+ 1.0 x)) (sqrt x))) (/ -0.25 (+ (sqrt (+ 1.0 x)) (sqrt x)))) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x)))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 34,
    "avg_bits_err_input": 29.873995510961144,
    "avg_bits_err_output": 0.16841052656439293,
    "avg_bits_err_improve": 29.70558498439675,
    "time": 16275.218505859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (+ (sin x) 1.0) 0.0) (/ (- (fma (sin (+ x eps)) (+ 1.0 (sin x)) (* (sin x) (- (sin x)))) (sin x)) (- (exp (log1p (+ 1.0 (sin x)))) 1.0)) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 25,
    "avg_bits_err_input": 36.83406834362443,
    "avg_bits_err_output": 36.85174990937186,
    "avg_bits_err_improve": -0.01768156574743074,
    "time": 24613.333251953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.60310164925825,
    "avg_bits_err_output": 19.45525305662966,
    "avg_bits_err_improve": 0.14784859262858774,
    "time": 12471.42333984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 15.286482994686681,
    "avg_bits_err_output": 15.286482994686681,
    "avg_bits_err_improve": 0,
    "time": 3801.1728515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (expm1 b) (exp a)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.306553821776255,
    "avg_bits_err_output": 1.2552371300526501,
    "avg_bits_err_improve": 28.051316691723606,
    "time": 28335.649169921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07549304531403245,
    "avg_bits_err_output": 0.07549304531403245,
    "avg_bits_err_improve": 0,
    "time": 9588.1396484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b (- a)) (* a b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.49007435411809,
    "avg_bits_err_output": 0.3038941734413762,
    "avg_bits_err_improve": 16.186180180676715,
    "time": 9231.26025390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (* angle 0.005555555555555556)) 0.0) (/ 4.0 (/ 720.0 (* PI angle))) (* PI (* angle 0.005555555555555556))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.819323155759186,
    "avg_bits_err_output": 20.820399960443417,
    "avg_bits_err_improve": -0.001076804684231547,
    "time": 35443.231201171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* PI (/ angle 180.0))) (* (expm1 (log1p (cos (* PI (/ angle 180.0))))) (- (pow a 2.0) (pow b 2.0)))) -2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 31.789190770607956,
    "avg_bits_err_output": 31.7829603382987,
    "avg_bits_err_improve": 0.0062304323092554625,
    "time": 31736.292236328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (log1p (log (+ 1.0 (expm1 (expm1 (cos (if (!= (* angle (* PI -0.005555555555555556)) 0.0) (/ 2.0 (/ 360.0 (* angle PI))) (* angle (* PI 0.005555555555555556)))))))))) 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 20.727941041465197,
    "avg_bits_err_output": 20.75033411447897,
    "avg_bits_err_improve": -0.0223930730137738,
    "time": 42389.197998046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1719505640636719,
    "avg_bits_err_output": 0.1719505640636719,
    "avg_bits_err_improve": 0,
    "time": 14214.169921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (if (!= (* (tan x) (tan x)) 0.0) (/ 1.0 (/ 1.0 (* (tan x) (tan x)))) (* (tan x) (tan x)))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.3035934497084736,
    "avg_bits_err_output": 0.32098400590321957,
    "avg_bits_err_improve": -0.017390556194746,
    "time": 18021.243896484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1374174812503606,
    "avg_bits_err_output": 0.1374174812503606,
    "avg_bits_err_improve": 0,
    "time": 21308.40625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (fma (cos phi2) (* (cos phi1) (cos (- lambda1 lambda2))) 0.0))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 15.907197124315086,
    "avg_bits_err_output": 15.905628881385553,
    "avg_bits_err_improve": 0.0015682429295331701,
    "time": 35917.989013671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -4.0 (* a c) (* b b)))) 0.0) (* -4.0 (* (/ c (+ b (sqrt (fma -4.0 (* a c) (* b b))))) a)) (- (sqrt (fma -4.0 (* a c) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.231235217471315,
    "avg_bits_err_output": 0.17431409844281842,
    "avg_bits_err_improve": 52.056921119028495,
    "time": 21032.62890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* -4.0 (* a c))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.56767270190151,
    "avg_bits_err_output": 0.33420376094930904,
    "avg_bits_err_improve": 28.233468940952203,
    "time": 24607.99365234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (* b b) 0.0) (/ (+ (* (* b b) (* b b)) (* (* c a) (* -4.0 (* b b)))) (* b b)) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 35,
    "avg_bits_err_input": 43.57419296955966,
    "avg_bits_err_output": 0.24752691171978514,
    "avg_bits_err_improve": 43.32666605783987,
    "time": 25529.05029296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.93790387716921,
    "avg_bits_err_output": 34.93790387716921,
    "avg_bits_err_improve": 0,
    "time": 29921.59375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (log1p (expm1 (+ (* (cos (- lambda1 lambda2)) (cos phi2)) (cos phi1))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.8057784476292126,
    "avg_bits_err_output": 0.8086403604568793,
    "avg_bits_err_improve": -0.0028619128276666794,
    "time": 34150.219482421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (log (log1p (expm1 (exp (+ 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 30,
    "avg_bits_err_input": 29.634759879073194,
    "avg_bits_err_output": 29.60582343570669,
    "avg_bits_err_improve": 0.02893644336650425,
    "time": 20099.10888671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(- (/ (expm1 (+ x x)) (- (+ (exp (+ x x)) 2.0) 1.0)) 0.0)",
    "output_parens": 8,
    "avg_bits_err_input": 58.27129468449465,
    "avg_bits_err_output": 0.7258774437510818,
    "avg_bits_err_improve": 57.54541724074357,
    "time": 20442.126708984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (+ x x)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 57.984881001746615,
    "avg_bits_err_output": 0.05244812031259015,
    "avg_bits_err_improve": 57.932432881434025,
    "time": 11619.111328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(expm1 (log1p (/ 2.0 (+ (exp x) (exp (- x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.008042481250360577,
    "avg_bits_err_output": 0.00955432343849159,
    "avg_bits_err_improve": -0.0015118421881310136,
    "time": 5891.688720703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.009,
    "avg_bits_err_output": 32.009,
    "avg_bits_err_improve": 0,
    "time": 4663.548583984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (* (/ 2.0 (- 1.0 x)) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 58.344897269166175,
    "avg_bits_err_output": 0.02623120312590145,
    "avg_bits_err_improve": 58.31866606604027,
    "time": 12767.57421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.050896240625180285,
    "avg_bits_err_output": 0.05119812031259014,
    "avg_bits_err_improve": -0.00030187968740985616,
    "time": 3306.481689453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma ew (* (sin t) (cos (atan (/ eh (* ew (tan t)))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12784436093777043,
    "avg_bits_err_output": 0.12682312031259016,
    "avg_bits_err_improve": 0.0010212406251802753,
    "time": 25705.154052734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12421936093777045,
    "avg_bits_err_output": 0.12421936093777045,
    "avg_bits_err_improve": 0,
    "time": 15008.04248046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* lambda1 (cos (/ (+ phi1 phi2) 2.0))) (* lambda2 (cos (/ (+ phi1 phi2) 2.0)))) (- phi1 phi2)))",
    "output_parens": 12,
    "avg_bits_err_input": 39.155730002212515,
    "avg_bits_err_output": 3.744273391573867,
    "avg_bits_err_improve": 35.411456610638645,
    "time": 26096.389892578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.54596624557503,
    "avg_bits_err_output": 0.010698120312590145,
    "avg_bits_err_improve": 14.53526812526244,
    "time": 8535.1904296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (* (sin delta) (cos phi1)) (cos theta)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.15138822062361698,
    "avg_bits_err_output": 0.14956394320163782,
    "avg_bits_err_improve": 0.001824277421979159,
    "time": 35911.502685546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.30746546370878,
    "avg_bits_err_output": 0.17938233125324515,
    "avg_bits_err_improve": 52.12808313245554,
    "time": 30051.025146484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.70276479473836,
    "avg_bits_err_output": 0.34239737032701345,
    "avg_bits_err_improve": 28.360367424411347,
    "time": 23644.904296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.607102224862125,
    "avg_bits_err_output": 0.23471522657016192,
    "avg_bits_err_improve": 43.372386998291965,
    "time": 25282.197998046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* -3.0 (* c a)))) (- b)) 0.0) (* (/ c (+ b (sqrt (fma -3.0 (* c a) (* b b))))) (* -3.0 a)) (- (sqrt (fma b b (* -3.0 (* c a)))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 34.976433453952566,
    "avg_bits_err_output": 23.196738214340478,
    "avg_bits_err_improve": 11.779695239612089,
    "time": 21873.641845703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.031895371367533,
    "avg_bits_err_output": 13.031895371367533,
    "avg_bits_err_improve": 0,
    "time": 32951.610107421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.449825090040896,
    "avg_bits_err_output": 0.4675450624657182,
    "avg_bits_err_improve": 28.98228002757518,
    "time": 15834.115478515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01025,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0,
    "time": 4134.489501953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(- (+ (/ 1.0 (* (+ x -1.0) (+ 1.0 x))) (+ (/ (/ x (+ x -1.0)) (+ 1.0 x)) (/ -1.0 (+ 1.0 x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 14.314104877727425,
    "avg_bits_err_output": 12.454091789667245,
    "avg_bits_err_improve": 1.86001308806018,
    "time": 20249.949462890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 1e+210) (/ (sqrt (* (- A (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C)) (* (* 2.0 F) (- (pow B 2.0) (* C (* A 4.0)))))) (- (* C (* A 4.0)) (pow B 2.0))) 0.0)",
    "output_parens": 43,
    "avg_bits_err_input": 52.13415897560496,
    "avg_bits_err_output": 50.75875087261669,
    "avg_bits_err_improve": 1.375408102988274,
    "time": 36668.19921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(/ (* (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) 180.0) PI)",
    "output_parens": 11,
    "avg_bits_err_input": 29.800572726157856,
    "avg_bits_err_output": 29.80038423486636,
    "avg_bits_err_improve": 0.00018849129149600685,
    "time": 24830.34814453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (* F (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.04447761826772,
    "avg_bits_err_output": 51.75636283330778,
    "avg_bits_err_improve": 0.28811478495993725,
    "time": 37629.955078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 2.0) 0.0) (/ (fma (cbrt (/ g (+ a a))) (cbrt (/ g (+ a a))) (* (cbrt (/ g (+ a a))) 2.0)) (+ (- (+ 1.0 (cbrt (/ g (+ a a)))) 1.0) 2.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 27,
    "avg_bits_err_input": 15.521582783470016,
    "avg_bits_err_output": 15.541119093626856,
    "avg_bits_err_improve": -0.01953631015683932,
    "time": 24838.0888671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (+ (- g) (sqrt (- (* g g) (* h h)))))) (if (!= (cbrt (* (/ -0.5 a) (+ g (sqrt (fma g g (- (* h h))))))) 0.0) (/ (* (cbrt (* (/ -0.5 a) (+ g (sqrt (fma g g (- (* h h))))))) (cbrt (* (/ -0.5 a) (if (!= (- (sqrt (- (* g g) (* h h))) g) 0.0) (/ (* h h) (- g (sqrt (- (* g g) (* h h))))) (+ g (sqrt (- (* g g) (* h h)))))))) (cbrt (* (/ -0.5 a) (+ g (sqrt (fma g g (- (* h h)))))))) (cbrt (* (/ -0.5 a) (+ g (sqrt (fma g g (- (* h h)))))))))",
    "output_parens": 68,
    "avg_bits_err_input": 35.659372981148096,
    "avg_bits_err_output": 35.610968589661795,
    "avg_bits_err_improve": 0.048404391486300824,
    "time": 20772.91064453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (log (if (!= (exp (cos (- (/ (acos (/ (- g) h)) 3.0) (* PI -0.6666666666666666)))) 0.0) (/ 1.0 (/ 1.0 (exp (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))) (exp (cos (fma PI 0.6666666666666666 (/ (acos (/ g (- h))) 3.0)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.989068985944983,
    "avg_bits_err_output": 0.04128634061472133,
    "avg_bits_err_improve": 0.9477826453302617,
    "time": 15316.477294921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(log (exp (/ (exp a) (+ (exp a) (exp b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.6440212406251803,
    "avg_bits_err_output": 0.76903645545781,
    "avg_bits_err_improve": -0.12501521483262967,
    "time": 17139.677001953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+297) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-319) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e-294) (* a2 (/ (/ a1 b2) b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+296) (/ (* a1 a2) (* b1 b2)) (* a2 (/ (/ a1 b2) b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.476061622241211,
    "avg_bits_err_output": 3.0318526935096477,
    "avg_bits_err_improve": 8.444208928731562,
    "time": 7875.08447265625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5304528334220815,
    "avg_bits_err_output": 0.4775,
    "avg_bits_err_improve": 0.05295283342208151,
    "time": 7840.738037109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.1) (log (if (!= (- (sqrt (fma x x 1.0)) x) 0.0) (/ 1.0 (- (sqrt (fma x x 1.0)) x)) (+ x (sqrt (fma x x 1.0))))) (log1p (if (!= (- (- 1.0 x) (hypot 1.0 x)) 0.0) (/ 1.0 (/ 1.0 (if (!= (- (hypot 1.0 x) (+ 1.0 x)) 0.0) (* (- (+ 1.0 x) (hypot 1.0 x)) (/ (+ x (+ (hypot 1.0 x) -1.0)) (- (+ 1.0 x) (hypot 1.0 x)))) (+ x (+ (hypot 1.0 x) -1.0))))) (+ x (+ (hypot 1.0 x) -1.0)))))",
    "output_parens": 49,
    "avg_bits_err_input": 53.16835519210999,
    "avg_bits_err_output": 8.281633553805033,
    "avg_bits_err_improve": 44.88672163830496,
    "time": 12913.931396484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.657870842628769,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.657870842628769,
    "time": 2170.734130859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (expm1 (log1p (/ (- 1.0 x) (- x -1.0)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.015375,
    "avg_bits_err_output": 0.014125,
    "avg_bits_err_improve": 0.0012499999999999994,
    "time": 3679.649658203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1213.818603515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (/ (* w r) (- 1.0 v)))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 13.311068669748659,
    "avg_bits_err_output": 0.3426592125151444,
    "avg_bits_err_improve": 12.968409457233514,
    "time": 24574.154296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (* (* x1 x1) (+ -6.0 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0))))))) (+ x1 x1)))",
    "output_parens": 48,
    "avg_bits_err_input": 0.5085803715304767,
    "avg_bits_err_output": 0.2692561104198191,
    "avg_bits_err_improve": 0.23932426111065763,
    "time": 68113.06860351562,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) 0.0) (* (/ v (+ t1 u)) (/ (- t1) (+ t1 u))) (if (<= (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) 5e+304) (/ (* (- t1) v) (* (+ t1 u) (+ t1 u))) (* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))))",
    "output_parens": 34,
    "avg_bits_err_input": 18.47505220014807,
    "avg_bits_err_output": 1.151101121521497,
    "avg_bits_err_improve": 17.323951078626575,
    "time": 7286.800048828125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2332692038992627,
    "avg_bits_err_output": 0.18062744375108172,
    "avg_bits_err_improve": 0.05264176014818098,
    "time": 6465.96337890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002948120312590144,
    "avg_bits_err_output": 0.002948120312590144,
    "avg_bits_err_improve": 0,
    "time": 2174.686767578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* (- (/ 0.5 a) (/ 0.5 b)) (/ PI (+ b a))) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 15.187446997227202,
    "avg_bits_err_output": 0.2878830843878004,
    "avg_bits_err_improve": 14.899563912839401,
    "time": 15464.2607421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (exp (- (fma eps x x))) 0.0) (/ (+ (/ (exp (- (fma eps x x))) (exp (fma eps x x))) (* (exp (- (fma eps x x))) (+ (/ (+ 1.0 (/ 1.0 eps)) (exp (* (- 1.0 eps) x))) (/ (/ -1.0 eps) (exp (fma eps x x)))))) (exp (- (fma eps x x)))) (+ (/ (+ 1.0 (/ 1.0 eps)) (exp (* (- 1.0 eps) x))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) 2.0)",
    "output_parens": 44,
    "avg_bits_err_input": 29.39176485935185,
    "avg_bits_err_output": 24.71752849137686,
    "avg_bits_err_improve": 4.674236367974988,
    "time": 23088.044677734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (log1p (expm1 (/ 1.0 (+ (* (- (/ 2.0 (+ t (/ t t))) 2.0) (- (/ 2.0 (+ t (/ t t))) 2.0)) 2.0)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.02175,
    "avg_bits_err_output": 0.005625,
    "avg_bits_err_improve": 0.016125,
    "time": 6694.659912109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- (- 4.0 (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (+ (/ t t) t))) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0)))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.026875,
    "avg_bits_err_output": 0.0927336468769832,
    "avg_bits_err_improve": -0.0658586468769832,
    "time": 17441.153564453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))) (+ 2.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017625,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 0.008249999999999999,
    "time": 9898.968017578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3835.677001953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6477.4951171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2649.625244140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.794267633753049,
    "avg_bits_err_output": 0.253875,
    "avg_bits_err_improve": 7.540392633753049,
    "time": 28276.98193359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(if (!= (+ 1.0 (+ -1.0 (pow x 5.0))) 0.0) (/ (- (* (pow (+ x eps) 5.0) (+ 1.0 (+ -1.0 (pow x 5.0)))) (* (+ 1.0 (+ -1.0 (pow x 5.0))) (+ 1.0 (+ -1.0 (pow x 5.0))))) (+ 1.0 (+ -1.0 (pow x 5.0)))) (- (pow (+ x eps) 5.0) (pow x 5.0)))",
    "output_parens": 27,
    "avg_bits_err_input": 6.871553505483716,
    "avg_bits_err_output": 6.898825838211855,
    "avg_bits_err_improve": -0.027272332728139226,
    "time": 17618.900634765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 15.11161327536692,
    "avg_bits_err_output": 15.11161327536692,
    "avg_bits_err_improve": 0,
    "time": 15227.635009765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(fma (exp (* 10.0 (* x x))) (* 2.0 (cos x)) (* (- (expm1 (* 10.0 (* x x))) -1.0) (- (cos x))))",
    "output_parens": 13,
    "avg_bits_err_input": 3.5214174414767743,
    "avg_bits_err_output": 3.5211728504479307,
    "avg_bits_err_improve": 0.0002445910288435549,
    "time": 17519.587158203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 15.937445964149477,
    "avg_bits_err_output": 15.937445964149477,
    "avg_bits_err_improve": 0,
    "time": 11064.545166015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.9555078319992,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.9555078319992,
    "time": 5087.44677734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.389331828656594,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.38883182865659,
    "time": 4357.56494140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (/ (* -1.7e+308 (- 1.7e+308 (* 1.7e+308 t))) -1.7e+308) -1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.3063868421881309,
    "avg_bits_err_improve": 63.69361315781187,
    "time": 19761.942138671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* 4e-32 (* t t))",
    "output_parens": 2,
    "avg_bits_err_input": 61.843251523038745,
    "avg_bits_err_output": 0.4263778203183597,
    "avg_bits_err_improve": 61.41687370272039,
    "time": 7795.3544921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b 1.32e+154) (/ (/ (+ b (sqrt (fma b b (* c (* a -4.0))))) -2.0) a) (if (!= (/ (/ b a) 2.0) 0.0) (if (!= (/ 2.0 (/ 4.0 (- (/ b a)))) 0.0) (+ (/ 2.0 (/ 4.0 (- (/ b a)))) (/ 0.0 (/ 4.0 (/ 4.0 (- (/ b a)))))) (+ 0.0 (/ 2.0 (/ 4.0 (- (/ b a)))))) (/ (+ b (sqrt (fma b b (* (* a c) -4.0)))) (* a -2.0))))",
    "output_parens": 41,
    "avg_bits_err_input": 34.44126964576185,
    "avg_bits_err_output": 33.14812652641362,
    "avg_bits_err_improve": 1.2931431193482297,
    "time": 26666.357177734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.93790387716921,
    "avg_bits_err_output": 34.93790387716921,
    "avg_bits_err_improve": 0,
    "time": 32113.363525390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2757.762939453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.5427603283314,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 39.532385328331394,
    "time": 6566.877685546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 19.992478467082034,
    "avg_bits_err_output": 19.992478467082034,
    "avg_bits_err_improve": 0,
    "time": 4934.695068359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6715485494078313,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6715485494078313,
    "time": 9060.843017578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.039375,
    "time": 6210.7734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.020844360937770437,
    "avg_bits_err_output": 0.01075,
    "avg_bits_err_improve": 0.010094360937770438,
    "time": 7861.005126953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0135,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.0125,
    "time": 4429.231201171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0,
    "time": 1765.62451171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40375977500432714,
    "avg_bits_err_output": 0.2465,
    "avg_bits_err_improve": 0.15725977500432714,
    "time": 7547.171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (if (!= (* (* (cos x) (cos x)) (* (cos x) (/ (cos x) 2.0))) 0.0) (/ (+ (* (* (cos x) (* (cos x) (* (cos x) (cos x)))) (+ (* (cos x) (cos x)) -1.0)) (fma (* (* (cos x) (* (fma (cos x) (cos x) -2.0) (/ (cos x) 2.0))) (/ (fma (cos x) (cos x) -2.0) -2.0)) (* (cos x) (cos x)) (* (cos x) (* (/ (cos x) 2.0) (* (* (cos x) (cos x)) (/ (* (fma (cos x) (cos x) -2.0) (fma (cos x) (cos x) -2.0)) 2.0)))))) (* (* (cos x) (cos x)) (* (cos x) (/ (cos x) 2.0)))) (+ -2.0 (* (cos x) (+ (cos x) (cos x))))) (* 2.0 (- -1.0 (cos x)))) (- 1.0 (cos x)))",
    "output_parens": 82,
    "avg_bits_err_input": 30.43870851392195,
    "avg_bits_err_output": 30.44027103680274,
    "avg_bits_err_improve": -0.0015625228807927272,
    "time": 19238.041748046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.75693699231205,
    "avg_bits_err_output": 0.28694812031259015,
    "avg_bits_err_improve": 24.46998887199946,
    "time": 12663.974609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (- (tan x))) 0.0) (/ (/ (fma (/ x (tan x)) (- x) (* x (/ (sin x) (tan x)))) (tan x)) (/ x (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 23,
    "avg_bits_err_input": 28.788777767944996,
    "avg_bits_err_output": 28.79552935751815,
    "avg_bits_err_improve": -0.006751589573152472,
    "time": 33799.595458984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007363361324451065,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 0.006113361324451064,
    "time": 2357.042724609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= i 4.1e+76) (/ (* (expm1 (* n (log1p (/ i n)))) 100.0) (/ i n)) (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -100.0 (/ i n))))",
    "output_parens": 16,
    "avg_bits_err_input": 47.50174955065749,
    "avg_bits_err_output": 14.262905574085874,
    "avg_bits_err_improve": 33.238843976571616,
    "time": 26165.611328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* (/ c (fma d d (* c c))) a) (* b (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.069959384915816,
    "avg_bits_err_output": 23.242979475934504,
    "avg_bits_err_improve": 2.8269799089813112,
    "time": 13911.80712890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.65854345701529,
    "avg_bits_err_output": 23.414331613916954,
    "avg_bits_err_improve": 3.2442118430983378,
    "time": 15815.873291015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.03875,
    "avg_bits_err_output": 0.023939600283902615,
    "avg_bits_err_improve": 0.014810399716097385,
    "time": 11666.155029296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (- (exp (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))) 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.497687227091795,
    "avg_bits_err_output": 12.318104167672361,
    "avg_bits_err_improve": 1.1795830594194339,
    "time": 30252.282470703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (if (!= (* (* uy PI) -2.0) 0.0) (/ 1.0 (/ 0.5 (* uy PI))) (* uy (* 2.0 PI)))) (sqrt (+ (- (- ux (* ux ux)) (- ux)) (- (* (* ux maxCos) (+ (fma ux maxCos (- 1.0 ux)) (- 1.0 ux)))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.540722880457121,
    "avg_bits_err_output": 0.34154866958769203,
    "avg_bits_err_improve": 13.19917421086943,
    "time": 26435.06787109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (fma (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) yi) (* (- 1.0 ux) (* (* ux maxCos) zi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.3376173847165654,
    "avg_bits_err_output": 0.32560642265198103,
    "avg_bits_err_improve": 0.012010962064584352,
    "time": 47836.33203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.20115376181596006,
    "avg_bits_err_output": 0.20115376181596006,
    "avg_bits_err_improve": 0,
    "time": 22001.508544921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (* (* 0.25 (/ u1 (- 1.0 u1))) (* (+ u1 u1) (/ (/ (- 1.0 u1) (- 1.0 u1)) (* u1 0.5)))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 22,
    "avg_bits_err_input": 0.5381628816039323,
    "avg_bits_err_output": 0.5289422837015817,
    "avg_bits_err_improve": 0.009220597902350636,
    "time": 23344.650146484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (log1p (expm1 (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3323814637931077,
    "avg_bits_err_output": 0.332891065742739,
    "avg_bits_err_improve": -0.0005096019496313442,
    "time": 20232.091064453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.3375540656001496,
    "avg_bits_err_output": 0.3377309452875594,
    "avg_bits_err_improve": -0.0001768796874098144,
    "time": 47967.721435546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ (expm1 (/ x (- s))) 2.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.07039997381152756,
    "avg_bits_err_output": 0.0716271852207903,
    "avg_bits_err_improve": -0.0012272114092627406,
    "time": 18083.31640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (+ (exp (/ (fabs x) (- s))) 1.0)) (fma s (exp (/ (fabs x) (- s))) s))",
    "output_parens": 16,
    "avg_bits_err_input": 0.16534426588581133,
    "avg_bits_err_output": 0.14723428954236828,
    "avg_bits_err_improve": 0.01810997634344305,
    "time": 15523.85693359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641135874740226,
    "avg_bits_err_output": 0.6727942602193283,
    "avg_bits_err_improve": -0.008680672745305706,
    "time": 19411.594970703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.15567642670288123,
    "avg_bits_err_output": 0.15168587417774718,
    "avg_bits_err_improve": 0.003990552525134056,
    "time": 25673.563232421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (+ (fma (/ (- sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) sinTheta_O (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 2.5574870978969493,
    "avg_bits_err_output": 2.5542983760214084,
    "avg_bits_err_improve": 0.0031887218755408675,
    "time": 29652.92236328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (* cosTheta_i (/ (/ 0.5 v) (exp (* sinTheta_i (/ sinTheta_O v))))) (/ (/ 1.0 v) (sinh (/ 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.44788030619839286,
    "avg_bits_err_output": 0.3494360653394987,
    "avg_bits_err_improve": 0.09844424085889414,
    "time": 26207.87158203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (/ (- (fma cosTheta_i cosTheta_O -1.0) (* sinTheta_i sinTheta_O)) v)) (exp (if (!= (+ 0.6931 (log (/ 0.5 v))) 0.0) (/ 1.0 (if (!= (+ 1.0 (exp (log1p (/ 1.0 (+ 0.6931 (log (/ 0.5 v))))))) 0.0) (/ (- (log1p (expm1 (* (+ 1.0 (/ 1.0 (+ 0.6931 (log (/ 0.5 v))))) (+ 1.0 (/ 1.0 (+ 0.6931 (log (/ 0.5 v)))))))) 1.0) (+ 1.0 (exp (log1p (/ 1.0 (+ 0.6931 (log (/ 0.5 v)))))))) (/ 1.0 (+ 0.6931 (log (/ 0.5 v)))))) (+ 0.6931 (log (/ 0.5 v))))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.11342486894409184,
    "avg_bits_err_output": 0.14612746990847003,
    "avg_bits_err_improve": -0.03270260096437819,
    "time": 30300.39111328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (/ (/ (+ (* alpha alpha) -1.0) (log (* alpha alpha))) PI) 0.0) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4767753941579562,
    "avg_bits_err_output": 0.4710817847802518,
    "avg_bits_err_improve": 0.005693609377704412,
    "time": 26357.6748046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)))) s)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3345746971356445,
    "avg_bits_err_output": 1.2420187206462003,
    "avg_bits_err_improve": 0.09255597648944414,
    "time": 24084.043701171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(if (!= (* (+ (log (/ 1.0 (fma u -4.0 1.0))) -2.0) s) 0.0) (/ (* (+ (log (/ 1.0 (fma u -4.0 1.0))) -2.0) (* s (* s (/ (+ (log (/ 1.0 (fma u -4.0 1.0))) (log (/ 1.0 (fma u -4.0 1.0)))) s)))) (+ -4.0 (+ (log (/ 1.0 (fma u -4.0 1.0))) (log (/ 1.0 (fma u -4.0 1.0)))))) (* (log (/ 1.0 (fma u -4.0 1.0))) s))",
    "output_parens": 35,
    "avg_bits_err_input": 12.339410347436003,
    "avg_bits_err_output": 12.363270040848022,
    "avg_bits_err_improve": -0.02385969341201921,
    "time": 23556.194580078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ (/ 0.125 s) PI)) (* 0.75 (/ (exp (/ (/ r -3.0) s)) (* s (* PI 6.0))))) r)",
    "output_parens": 15,
    "avg_bits_err_input": 0.1434555200460597,
    "avg_bits_err_output": 0.15657885278365388,
    "avg_bits_err_improve": -0.013123332737594195,
    "time": 25031.807373046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* n0_i (/ (sin (- normAngle (* normAngle u))) (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9247303301421024,
    "avg_bits_err_output": 0.7336448312354265,
    "avg_bits_err_improve": 0.19108549890667592,
    "time": 31637.484130859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (fma (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (sqrt PI) cosTheta)) (exp (* cosTheta (- cosTheta))) (+ 1.0 c)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6900439519084594,
    "avg_bits_err_output": 0.4780180070746041,
    "avg_bits_err_improve": 0.21202594483385523,
    "time": 20636.2041015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (sin (log1p (if (!= (expm1 (* PI (* u2 2.0))) 0.0) (/ 1.0 (/ 1.0 (expm1 (* PI (* u2 2.0))))) (expm1 (* PI (* u2 2.0)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.513070364833133,
    "avg_bits_err_output": 13.517097512134413,
    "avg_bits_err_improve": -0.004027147301279399,
    "time": 28147.34375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (cos (* 2.0 (* PI u2))) (log (+ 1.0 (expm1 (* (cos (* 2.0 (* PI u2))) (- 1.0 (sqrt (- (log (- 1.0 u1))))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.566173037343615,
    "avg_bits_err_output": 13.146885946631068,
    "avg_bits_err_improve": 0.41928709071254744,
    "time": 25337.74072265625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (fma alpha (- alpha (* alpha (log (- 1.0 u0)))) (* alpha (- (* alpha (log (- 1.0 u0))) alpha))) (* (log (- 1.0 u0)) (* alpha (- alpha))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.967857744198856,
    "avg_bits_err_output": 13.958558094961695,
    "avg_bits_err_improve": 0.009299649237160423,
    "time": 18548.69384765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (if (!= (log (- 1.0 u0)) 0.0) (/ 1.0 (/ 1.0 (log (- 1.0 u0)))) (log (- 1.0 u0)))) (+ (if (!= (/ cos2phi (* alphax alphax)) 0.0) (* (/ cos2phi alphax) (- (exp (log1p (/ (/ cos2phi alphax) cos2phi))) 1.0)) (/ cos2phi (* alphax alphax))) (/ sin2phi (* alphay alphay))))",
    "output_parens": 28,
    "avg_bits_err_input": 12.735171715335717,
    "avg_bits_err_output": 12.752311416121659,
    "avg_bits_err_improve": -0.017139700785941514,
    "time": 19223.622802734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (* (/ (tan (* PI l)) F) (/ 1.0 F)))",
    "output_parens": 7,
    "avg_bits_err_input": 16.49249338287027,
    "avg_bits_err_output": 12.23817663387899,
    "avg_bits_err_improve": 4.254316748991279,
    "time": 23119.827880859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2236497379540208,
    "avg_bits_err_output": 0.15527229420293912,
    "avg_bits_err_improve": 0.06837744375108168,
    "time": 15022.663818359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.457914018303216,
    "avg_bits_err_output": 10.439313136889016,
    "avg_bits_err_improve": 3.0186008814141996,
    "time": 24071.8330078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (- (expm1 (* PI (/ f 4.0))) (expm1 (/ (* PI f) -4.0))))) (* PI -0.25))",
    "output_parens": 18,
    "avg_bits_err_input": 61.43982144920934,
    "avg_bits_err_output": 1.8602778097631523,
    "avg_bits_err_improve": 59.579543639446186,
    "time": 45603.486328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.329198102684785,
    "avg_bits_err_output": 33.97133585222982,
    "avg_bits_err_improve": 9.357862250454964,
    "time": 23912.8955078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin th) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin ky))",
    "output_parens": 10,
    "avg_bits_err_input": 3.853514213811086,
    "avg_bits_err_output": 3.904720384228569,
    "avg_bits_err_improve": -0.05120617041748332,
    "time": 26527.39501953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 1.0863747861547797,
    "avg_bits_err_output": 1.0863747861547797,
    "avg_bits_err_improve": 0,
    "time": 10349.6181640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (expm1 (log1p (/ (- 1.0 (pow (/ Om Omc) 2.0)) (fma 2.0 (pow (/ t l) 2.0) 1.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 9.724483127932366,
    "avg_bits_err_output": 9.729895233517723,
    "avg_bits_err_improve": -0.0054121055853570965,
    "time": 15487.69384765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 5e-298) (sqrt (* U (* (* 2.0 n) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) INFINITY) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (* (/ l Om) l))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (pow (fma U (* n (* -2.0 (- (fma l (* l (/ 2.0 Om)) (* (pow (/ l Om) 2.0) (* n (- U U*)))) t))) 0.0) 0.5)))",
    "output_parens": 70,
    "avg_bits_err_input": 34.46157878550961,
    "avg_bits_err_output": 28.84722020183732,
    "avg_bits_err_improve": 5.6143585836722885,
    "time": 36797.0029296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (pow t 3.0) (/ (pow (/ k t) 2.0) l)) (* (tan k) (/ (sin k) l))))",
    "output_parens": 11,
    "avg_bits_err_input": 47.83210195031423,
    "avg_bits_err_output": 36.488101588953754,
    "avg_bits_err_improve": 11.344000361360479,
    "time": 36884.8388671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* (* (tan k) (+ 2.0 (pow (/ k t) 2.0))) (/ (* (sin k) (pow t 3.0)) l)) l))",
    "output_parens": 12,
    "avg_bits_err_input": 32.43845866339954,
    "avg_bits_err_output": 27.917656954413072,
    "avg_bits_err_improve": 4.520801708986465,
    "time": 22968.821533203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(fma (/ (cos th) (sqrt 2.0)) (* a2 a2) (* a1 (/ (* (cos th) a1) (sqrt 2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5028838375223573,
    "avg_bits_err_output": 0.4708176718957344,
    "avg_bits_err_improve": 0.0320661656266229,
    "time": 25805.878173828125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* PI (+ n n)) (* k -0.5)) (/ (sqrt (* PI (+ n n))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.472565155812468,
    "avg_bits_err_output": 0.348649722706296,
    "avg_bits_err_improve": 0.12391543310617198,
    "time": 18313.91943359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(fma (/ (- (exp (fma l -1.0 l)) (exp (* l -2.0))) (exp (- l))) (* J (cos (/ K 2.0))) U)",
    "output_parens": 12,
    "avg_bits_err_input": 17.272637600033196,
    "avg_bits_err_output": 17.26562207884685,
    "avg_bits_err_improve": 0.007015521186346518,
    "time": 30858.288330078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l))))",
    "output_parens": 15,
    "avg_bits_err_input": 15.458969763343148,
    "avg_bits_err_output": 15.458969763343148,
    "avg_bits_err_improve": 0,
    "time": 18913.7646484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (sqrt (+ 1.0 (pow (/ (/ U (* 2.0 J)) (cos (/ K 2.0))) 2.0))) (* (cos (/ K 2.0)) -2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 18.28489624062518,
    "avg_bits_err_output": 18.276438721875543,
    "avg_bits_err_improve": 0.00845751874963696,
    "time": 31805.83642578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (/ (* (/ D d) M) 2.0) 2.0) h) l))))",
    "output_parens": 9,
    "avg_bits_err_input": 14.059530863966984,
    "avg_bits_err_output": 10.853036618080406,
    "avg_bits_err_improve": 3.206494245886578,
    "time": 19342.900390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 0.0) (* c0 (sqrt (/ (/ A V) l))) (if (<= (/ A (* V l)) 1e+304) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (- (/ (+ (/ A l) (/ A (+ l l))) (+ V V)) (/ (- (/ A (+ l l))) (+ V V)))))))",
    "output_parens": 30,
    "avg_bits_err_input": 18.9747755837963,
    "avg_bits_err_output": 14.329416604534673,
    "avg_bits_err_improve": 4.645358979261628,
    "time": 18153.264404296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(* (/ c0 (* w 2.0)) (+ (/ (* d (/ (* c0 (/ d (* w D))) D)) h) (sqrt (* (fma d (/ (/ (* c0 (/ (+ d d) (* w D))) h) (+ D D)) M) (- (/ (* d (/ (* c0 (/ d (* w D))) D)) h) M)))))",
    "output_parens": 27,
    "avg_bits_err_input": 59.67273215480821,
    "avg_bits_err_output": 54.25450615161034,
    "avg_bits_err_improve": 5.418226003197866,
    "time": 40136.458740234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(* (sqrt (/ d l)) (- (sqrt (/ d h)) (/ (* (pow (* (/ (* D M) d) 0.5) 2.0) (* h (sqrt (/ d h)))) (+ l l))))",
    "output_parens": 16,
    "avg_bits_err_input": 26.44617227584965,
    "avg_bits_err_output": 24.472320702867748,
    "avg_bits_err_improve": 1.9738515729819035,
    "time": 40006.52685546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (if (!= (/ 0.5 (* (hypot 1.0 x) (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))) 0.0) (/ (- (* (/ 0.5 (* (hypot 1.0 x) (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))) (/ 0.5 (* (hypot 1.0 x) (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))) (* (/ 0.5 (* (hypot 1.0 x) (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))) (/ 0.5 (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))) (/ 0.5 (* (hypot 1.0 x) (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))) (/ (+ 0.5 (/ -0.5 (hypot 1.0 x))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 73,
    "avg_bits_err_input": 14.971667081376712,
    "avg_bits_err_output": 14.487893116775693,
    "avg_bits_err_improve": 0.48377396460101885,
    "time": 13212.6416015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9823868421881311,
    "avg_bits_err_output": 0.012948120312590145,
    "avg_bits_err_improve": 0.9694387218755409,
    "time": 6137.1533203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* v (* v 5.0))) PI) (sqrt (- 2.0 (* v (* v 6.0))))) (- t (* v (* v t))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4803071376397249,
    "avg_bits_err_output": 0.11349756701560165,
    "avg_bits_err_improve": 0.3668095706241232,
    "time": 12733.58984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt 2.0) -4.0) (* (fma v v -1.0) (sqrt (- 1.0 (* v (* v 3.0))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.014917481250360578,
    "avg_bits_err_output": 0.012375,
    "avg_bits_err_improve": 0.002542481250360577,
    "time": 8392.599853515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (- -1.0 (+ (* (* v v) -5.0) -1.0))) (- (* v v) 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.534914697257525,
    "avg_bits_err_output": 0.5535178879287848,
    "avg_bits_err_improve": -0.018603190671259706,
    "time": 12221.328369140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (fma k (+ k 10.0) 1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.9187119986384435,
    "avg_bits_err_output": 1.869065758013263,
    "avg_bits_err_improve": 0.04964624062518053,
    "time": 15078.971435546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (expm1 (log1p (exp (/ (+ mu (- Vef (- Ec EDonor))) KbT)))))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.01902135833709117,
    "avg_bits_err_output": 0.01971947864968131,
    "avg_bits_err_improve": -0.0006981203125901413,
    "time": 10458.119140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (- (- (* b (* b 4.0)) -1.0) 1.0)) 1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 0.18189417344137612,
    "avg_bits_err_output": 0.1910404140665564,
    "avg_bits_err_improve": -0.009146240625180269,
    "time": 18314.36474609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (- (* a (+ (* a a) (/ a 2.0))) (/ (* a a) -2.0)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.1894956925776963,
    "avg_bits_err_output": 0.18916013030591228,
    "avg_bits_err_improve": 0.0003355622717840234,
    "time": 27948.58056640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (pow (fma b b (* a a)) 2.0) (+ (* 4.0 (+ (* (* a a) (- 1.0 a)) (* b (* b (+ a 3.0))))) -1.0))",
    "output_parens": 13,
    "avg_bits_err_input": 0.18585903185262348,
    "avg_bits_err_output": 0.18826467091485305,
    "avg_bits_err_improve": -0.00240563906222957,
    "time": 25052.84033203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (+ (/ x (* (* (sqrt (fma 4.0 (* p p) (* x x))) 2.0) 2.0)) (/ (+ x (+ x x)) (* (* (sqrt (fma 4.0 (* p p) (* x x))) 2.0) 2.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.501493261825829,
    "avg_bits_err_output": 13.578529090048049,
    "avg_bits_err_improve": -0.0770358282222201,
    "time": 17549.722412109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.83161298072334,
    "avg_bits_err_output": 0.0475,
    "avg_bits_err_improve": 40.78411298072334,
    "time": 7897.48095703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))",
    "output_parens": 8,
    "avg_bits_err_input": 30.978015531159368,
    "avg_bits_err_output": 30.92763469600267,
    "avg_bits_err_improve": 0.05038083515669811,
    "time": 18747.8525390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 34.729145063819495,
    "avg_bits_err_output": 34.729145063819495,
    "avg_bits_err_improve": 0,
    "time": 14053.098388671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) 0.0 (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 2e+261) (/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c)))) 0.0) (* (sqrt (- (* b_2 b_2) (* a c))) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) (sqrt (- (* b_2 b_2) (* a c))))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a) 0.0))",
    "output_parens": 49,
    "avg_bits_err_input": 34.436573743810996,
    "avg_bits_err_output": 30.479979007205323,
    "avg_bits_err_improve": 3.9565947366056733,
    "time": 19308.189208984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.216202271379384,
    "avg_bits_err_output": 30.453889728565898,
    "avg_bits_err_improve": 0.7623125428134863,
    "time": 16621.00537109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (/ (if (!= (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n))) 0.0) (/ (if (!= (+ (exp (/ (+ (+ (log x) (log x)) (+ (log x) (log x))) n)) (exp (* (/ (+ (log1p x) (log1p x)) n) 2.0))) 0.0) (/ (if (!= (+ (exp (* (/ (+ (log1p x) (log1p x)) n) 4.0)) (exp (/ (+ (+ (log x) (+ (log x) (+ (log x) (log x)))) (+ (log x) (+ (log x) (+ (log x) (log x))))) n))) 0.0) (/ (- (exp (* (/ (+ (log1p x) (log1p x)) n) 8.0)) (exp (/ (+ (+ (+ (log x) (+ (log x) (+ (log x) (log x)))) (+ (log x) (+ (log x) (+ (log x) (log x))))) (+ (+ (log x) (+ (log x) (+ (log x) (log x)))) (+ (log x) (+ (log x) (+ (log x) (log x)))))) n))) (+ (exp (* (/ (+ (log1p x) (log1p x)) n) 4.0)) (exp (/ (+ (+ (log x) (+ (log x) (+ (log x) (log x)))) (+ (log x) (+ (log x) (+ (log x) (log x))))) n)))) (- (exp (* (/ (+ (log1p x) (log1p x)) n) 4.0)) (exp (/ (+ (+ (log x) (+ (log x) (+ (log x) (log x)))) (+ (log x) (+ (log x) (+ (log x) (log x))))) n)))) (+ (exp (/ (+ (+ (log x) (log x)) (+ (log x) (log x))) n)) (exp (* (/ (+ (log1p x) (log1p x)) n) 2.0)))) (- (exp (* (/ (+ (log1p x) (log1p x)) n) 2.0)) (exp (/ (+ (+ (log x) (log x)) (+ (log x) (log x))) n)))) (fma (pow x (/ 1.0 n)) (pow x (/ 1.0 n)) (exp (/ (+ (log1p x) (log1p x)) n)))) (- (exp (/ (+ (log1p x) (log1p x)) n)) (* (pow x (/ 1.0 n)) (pow x (/ 1.0 n))))) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 221,
    "avg_bits_err_input": 33.38967272288387,
    "avg_bits_err_output": 33.05324096357817,
    "avg_bits_err_improve": 0.3364317593057038,
    "time": 31008.950927734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (- (exp (- (log1p N) (log N))) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 29.44133110348553,
    "avg_bits_err_output": 29.44051563727335,
    "avg_bits_err_improve": 0.0008154662121810929,
    "time": 9931.255615234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (/ (+ -1.0 (/ (+ x x) (+ x 1.0))) (+ x x)) (/ -1.0 (+ x x)))",
    "output_parens": 9,
    "avg_bits_err_input": 14.751710394678788,
    "avg_bits_err_output": 14.767631713191244,
    "avg_bits_err_improve": -0.01592131851245604,
    "time": 15340.972900390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (!= (+ (cos (+ x eps)) (cos x)) 0.0) (/ (+ (if (!= (* (cos x) (+ (cos (+ x eps)) (cos x))) 0.0) (/ (- (* (+ (cos (+ x eps)) (cos x)) (* (+ (cos (+ x eps)) (cos x)) (* (cos (+ x eps)) (cos x)))) (* (+ (cos (+ x eps)) (cos x)) (* (+ (cos (+ x eps)) (cos x)) (* (cos x) (cos x))))) (* (cos x) (+ (cos (+ x eps)) (cos x)))) (- (* (cos (+ x eps)) (cos (+ x eps))) (* (cos x) (cos x)))) (fma (- (cos x)) (+ (cos (+ x eps)) (cos x)) (* (cos x) (+ (cos (+ x eps)) (cos x))))) (+ (cos (+ x eps)) (cos x))) (- (cos (+ x eps)) (cos x)))",
    "output_parens": 81,
    "avg_bits_err_input": 39.33306555243677,
    "avg_bits_err_output": 39.454373662473785,
    "avg_bits_err_improve": -0.12130811003701325,
    "time": 25530.017333984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ 1.0 x)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.742797241848077,
    "avg_bits_err_output": 29.445801822127077,
    "avg_bits_err_improve": 0.2969954197210001,
    "time": 12755.302734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (/ (- 1.0 (cos x)) (* (sin x) 2.0)) 0.0) (/ (+ (if (!= (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ (* (cos x) 0.5) (sin x))) 0.0) (/ (- (* (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ 0.5 (sin x))) (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ (* (cos x) 0.5) (sin x)))) (* (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ (* (cos x) 0.5) (sin x))) (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ (* (cos x) 0.5) (sin x))))) (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ (* (cos x) 0.5) (sin x)))) (/ (* (/ (- 1.0 (cos x)) (sin x)) (/ (- 1.0 (cos x)) (sin x))) 4.0)) (* (/ (- 1.0 (cos x)) (* (sin x) 2.0)) (/ (- 1.0 (cos x)) (* (sin x) 2.0)))) (/ (- 1.0 (cos x)) (* (sin x) 2.0))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 103,
    "avg_bits_err_input": 30.43307979460694,
    "avg_bits_err_output": 30.538400594671515,
    "avg_bits_err_improve": -0.10532080006457534,
    "time": 33261.28857421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- b) 0.0) (* (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (/ b b)) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 32,
    "avg_bits_err_input": 34.490826374729586,
    "avg_bits_err_output": 22.196539379986415,
    "avg_bits_err_improve": 12.294286994743171,
    "time": 22330.410400390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* -4.0 a)))) b) 0.0) (/ (- (* c (* -4.0 a))) (- (sqrt (fma b b (* c (* -4.0 a)))) b)) (- (- b) (sqrt (fma b b (* c (* -4.0 a)))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.731654172625774,
    "avg_bits_err_output": 23.60693603309643,
    "avg_bits_err_improve": 11.124718139529342,
    "time": 20856.256103515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (+ (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ -1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.25592938520995,
    "avg_bits_err_output": 0.9699295711141972,
    "avg_bits_err_improve": 60.28599981409575,
    "time": 21456.77880859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (- (* n (log1p n)) (+ 1.0 (* n (log n)))) (- (log1p n)))",
    "output_parens": 9,
    "avg_bits_err_input": 63.0043646566278,
    "avg_bits_err_output": 0.5837067265978517,
    "avg_bits_err_improve": 62.42065793002995,
    "time": 13117.97509765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.71929061624231,
    "avg_bits_err_output": 58.67689434246819,
    "avg_bits_err_improve": 0.04239627377412347,
    "time": 16914.94677734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(- (+ (/ (- 1.0 (/ x (tan x))) x) -1.0) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 59.86949778009672,
    "avg_bits_err_output": 59.8515684209921,
    "avg_bits_err_improve": 0.017929359104620346,
    "time": 28105.23486328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (if (!= (/ eps (expm1 (* eps b))) 0.0) (/ 1.0 (/ 1.0 (/ eps (expm1 (* eps b))))) (/ eps (expm1 (* eps b))))) (expm1 (* eps a)))",
    "output_parens": 20,
    "avg_bits_err_input": 60.4660750040529,
    "avg_bits_err_output": 29.195243722435702,
    "avg_bits_err_improve": 31.270831281617195,
    "time": 27768.64599609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.16859861326628,
    "avg_bits_err_output": 0.4348656015629507,
    "avg_bits_err_improve": 40.733733011703336,
    "time": 8312.547119140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.76375708417609,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 58.763382084176094,
    "time": 3876.638671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.016698955664374,
    "avg_bits_err_output": 0.021512548747768777,
    "avg_bits_err_improve": 28.995186406916606,
    "time": 5124.329833984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(if (!= (exp (- x)) 0.0) (/ (fma (exp (- x)) (exp (- x)) (+ 1.0 (- (- (exp (- x))) (exp (- x))))) (exp (- x))) (+ (- (exp x) 2.0) (exp (- x))))",
    "output_parens": 24,
    "avg_bits_err_input": 29.54982648154794,
    "avg_bits_err_output": 28.740127991302394,
    "avg_bits_err_improve": 0.8096984902455446,
    "time": 22614.704833984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ (- 1.0 (/ 2.0 (/ x (+ 1.0 x)))) (+ 1.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 10.06042986287164,
    "avg_bits_err_output": 10.082196560823213,
    "avg_bits_err_improve": -0.021766697951573377,
    "time": 29022.461181640625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (tan (+ x eps)) (tan x))",
    "output_parens": 4,
    "avg_bits_err_input": 36.80678994756066,
    "avg_bits_err_output": 36.80678994756066,
    "avg_bits_err_improve": 0,
    "time": 20603.540771484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.92762824474874,
    "avg_bits_err_output": 0.16098364687698313,
    "avg_bits_err_improve": 29.766644597871757,
    "time": 14842.996826171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (expm1 (log1p (sin (+ x eps)))) (sin x))",
    "output_parens": 6,
    "avg_bits_err_input": 36.96172508371131,
    "avg_bits_err_output": 37.01482045400098,
    "avg_bits_err_improve": -0.05309537028967526,
    "time": 19257.047119140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.97093036205265,
    "avg_bits_err_output": 19.830462029447336,
    "avg_bits_err_improve": 0.14046833260531244,
    "time": 13808.9931640625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(- (atan (+ N 1.0)) (atan N))",
    "output_parens": 4,
    "avg_bits_err_input": 15.0705599578238,
    "avg_bits_err_output": 15.0705599578238,
    "avg_bits_err_improve": 0,
    "time": 4313.32568359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.806541770153874,
    "avg_bits_err_output": 1.21246057057931,
    "avg_bits_err_improve": 28.594081199574564,
    "time": 23963.359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0707195644503525,
    "avg_bits_err_output": 0.0707195644503525,
    "avg_bits_err_improve": 0,
    "time": 8530.861328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* a b) (/ (/ -1.0 a) b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.197419942770384,
    "avg_bits_err_output": 0.2568565796931788,
    "avg_bits_err_improve": 15.940563363077205,
    "time": 11251.78369140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (if (!= (/ angle 180.0) 0.0) (/ 1.0 (/ 1.0 (/ angle 180.0))) (/ angle 180.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 17,
    "avg_bits_err_input": 20.247295279560415,
    "avg_bits_err_output": 20.25137965248955,
    "avg_bits_err_improve": -0.004084372929135327,
    "time": 38042.87451171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (if (!= (- (sin (* PI (/ angle 180.0)))) 0.0) (/ 1.0 (/ 1.0 (sin (* PI (/ angle 180.0))))) (sin (* PI (/ angle 180.0))))) (- (exp (log1p (cos (* PI (/ angle 180.0))))) 1.0))",
    "output_parens": 26,
    "avg_bits_err_input": 31.860737409601708,
    "avg_bits_err_output": 31.940621078623774,
    "avg_bits_err_improve": -0.07988366902206678,
    "time": 35501.318603515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (if (!= (* (* angle PI) -0.005555555555555556) 0.0) (* angle (* (* angle (* PI (* PI 0.005555555555555556))) (/ 1.0 (* PI angle)))) (* angle (* PI 0.005555555555555556))))) 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 20.41262782178542,
    "avg_bits_err_output": 20.444823711896486,
    "avg_bits_err_improve": -0.032195890111065495,
    "time": 44040.1962890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17216748125036058,
    "avg_bits_err_output": 0.17216748125036058,
    "avg_bits_err_improve": 0,
    "time": 14258.777587890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(expm1 (log1p (/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.31242730941468716,
    "avg_bits_err_output": 0.34438154646571084,
    "avg_bits_err_improve": -0.03195423705102368,
    "time": 18053.775634765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13759436093777044,
    "avg_bits_err_output": 0.13759436093777044,
    "avg_bits_err_improve": 0,
    "time": 20202.92041015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))) (if (!= (* (sin phi1) (sin phi2)) 0.0) (* (* (sin phi2) (/ (/ (sin phi1) (sin phi1)) (sin phi2))) (* (sin phi1) (sin phi2))) (* (sin phi1) (sin phi2))))) R)",
    "output_parens": 27,
    "avg_bits_err_input": 16.86179442777483,
    "avg_bits_err_output": 16.863179691758685,
    "avg_bits_err_improve": -0.0013852639838560776,
    "time": 35842.70849609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* -4.0 (* a c))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 52.54893871942147,
    "avg_bits_err_output": 0.17142481250360564,
    "avg_bits_err_improve": 52.37751390691787,
    "time": 22950.31640625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -8.0) (+ b (+ b (+ (sqrt (fma b b (* a (* -4.0 c)))) (sqrt (fma b b (* a (* -4.0 c))))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 28,
    "avg_bits_err_input": 28.93968600050526,
    "avg_bits_err_output": 0.35381691876117816,
    "avg_bits_err_improve": 28.585869081744082,
    "time": 24684.5048828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.79672286925443,
    "avg_bits_err_output": 0.24770582813311265,
    "avg_bits_err_improve": 43.54901704112132,
    "time": 23120.649658203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.50892151664608,
    "avg_bits_err_output": 34.50892151664608,
    "avg_bits_err_improve": 0,
    "time": 23268.7314453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (expm1 (log1p (cos (- lambda1 lambda2)))) (cos phi1))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.8488395665463114,
    "avg_bits_err_output": 0.8548631632359707,
    "avg_bits_err_improve": -0.0060235966896592386,
    "time": 30451.82861328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (+ 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0)))))) 0.0) (/ (- 1.0 (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0))))))) (+ 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0))))))) (- 1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* -2.0 x)) (exp (* x -4.0))))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 60,
    "avg_bits_err_input": 29.374745308290716,
    "avg_bits_err_output": 29.32130992450407,
    "avg_bits_err_improve": 0.053435383786645474,
    "time": 25418.710205078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (fma (exp x) (exp x) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 58.278366926252225,
    "avg_bits_err_output": 0.5567406015629507,
    "avg_bits_err_improve": 57.721626324689275,
    "time": 20405.288818359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.27560170097852,
    "avg_bits_err_output": 0.057125,
    "avg_bits_err_improve": 58.21847670097852,
    "time": 7426.926513671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.007823120312590146,
    "avg_bits_err_output": 0.007823120312590146,
    "avg_bits_err_improve": 0,
    "time": 4465.771240234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.705625,
    "avg_bits_err_output": 31.705625,
    "avg_bits_err_improve": 0,
    "time": 4160.178955078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (/ x (/ (+ x -1.0) -2.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.70600775417713,
    "avg_bits_err_output": 0.016625,
    "avg_bits_err_improve": 58.68938275417713,
    "time": 14347.84130859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04294812031259015,
    "avg_bits_err_output": 0.04289624062518029,
    "avg_bits_err_improve": 5.1879687409855935e-05,
    "time": 2728.252685546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12507312031259016,
    "avg_bits_err_output": 0.12507312031259016,
    "avg_bits_err_improve": 0,
    "time": 23478.03515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (* (tan t) (/ (- eh) ew))))) (* (sin t) (* eh (sin (atan (* (tan t) (/ (- eh) ew))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.129125,
    "avg_bits_err_output": 0.13521212475256825,
    "avg_bits_err_improve": -0.006087124752568257,
    "time": 15880.305419921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* (cos (/ (+ phi1 phi2) 2.0)) lambda1) (* (cos (/ (+ phi1 phi2) 2.0)) lambda2)) (- phi1 phi2)))",
    "output_parens": 12,
    "avg_bits_err_input": 38.75888818465462,
    "avg_bits_err_output": 3.833443564715602,
    "avg_bits_err_improve": 34.92544461993902,
    "time": 26956.809814453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.35516522605636,
    "avg_bits_err_output": 0.01164624062518029,
    "avg_bits_err_improve": 14.34351898543118,
    "time": 8061.794921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (if (!= (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos phi1) (cos theta))))))) 0.0) (+ (/ 0.0 (sin phi1)) (* (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos theta) (cos phi1)))))) (/ (- (cos delta) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos theta) (cos phi1)))))))) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos theta) (cos phi1))))))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (sin phi1) (cos delta) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 74,
    "avg_bits_err_input": 0.16115112925084202,
    "avg_bits_err_output": 0.16345393133912015,
    "avg_bits_err_improve": -0.0023028020882781275,
    "time": 45170.609130859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.56052898958039,
    "avg_bits_err_output": 0.18084229375396627,
    "avg_bits_err_improve": 52.37968669582642,
    "time": 24391.73583984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 29.074130093987623,
    "avg_bits_err_output": 0.3443430468885217,
    "avg_bits_err_improve": 28.7297870470991,
    "time": 28164.4150390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* b b) 0.0) (/ (+ (* (* b b) (* b b)) (* (* b b) (* c (* a -3.0)))) (* b b)) (fma c (* a -3.0) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 37,
    "avg_bits_err_input": 43.86880553911625,
    "avg_bits_err_output": 0.25555018907088306,
    "avg_bits_err_improve": 43.61325535004537,
    "time": 26442.989501953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.5228111051199,
    "avg_bits_err_output": 34.5228111051199,
    "avg_bits_err_improve": 0,
    "time": 22736.349853515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.159819173272345,
    "avg_bits_err_output": 13.159819173272345,
    "avg_bits_err_improve": 0,
    "time": 37287.601318359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.148772293790792,
    "avg_bits_err_output": 0.5115680320225462,
    "avg_bits_err_improve": 28.637204261768247,
    "time": 24160.125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ (/ 1.0 (+ x -1.0)) (+ (/ x (+ 1.0 x)) (+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x))))) 2.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.013948120312590144,
    "avg_bits_err_improve": -0.0026981203125901448,
    "time": 5346.438232421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(if (<= x -1.25e+146) (- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0))) (if (<= x 1.32e+154) (- (- (+ (/ -1.0 (+ x 1.0)) (/ x (fma x x -1.0))) (/ -1.0 (fma x x -1.0)))) (- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))))",
    "output_parens": 23,
    "avg_bits_err_input": 14.52866119350035,
    "avg_bits_err_output": 13.17658373280438,
    "avg_bits_err_improve": 1.3520774606959698,
    "time": 22701.26123046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* 2.0 (* (- (pow B 2.0) (* A (* C 4.0))) (* F (+ (- A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) C))))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.332486803990264,
    "avg_bits_err_output": 52.026299283426596,
    "avg_bits_err_improve": 0.30618752056366816,
    "time": 37994.204345703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output_parens": 12,
    "avg_bits_err_input": 29.94791697115608,
    "avg_bits_err_output": 29.94791697115608,
    "avg_bits_err_improve": 0,
    "time": 23620.82421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(* (sqrt (* (+ C (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A)) (* 2.0 (* (- (pow B 2.0) (* A (* C 4.0))) F)))) (/ -1.0 (- (pow B 2.0) (* A (* C 4.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 52.377085075342315,
    "avg_bits_err_output": 52.15079327499236,
    "avg_bits_err_improve": 0.226291800349955,
    "time": 38992.052001953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ (/ g a) 2.0)) 2.0) 0.0) (/ (fma (cbrt (/ g (+ a a))) (cbrt (/ g (+ a a))) (* 2.0 (cbrt (/ g (+ a a))))) (+ (cbrt (/ (/ g a) 2.0)) 2.0)) (cbrt (/ (/ g a) 2.0)))",
    "output_parens": 25,
    "avg_bits_err_input": 15.04371613288221,
    "avg_bits_err_output": 15.0768368734384,
    "avg_bits_err_improve": -0.03312074055619085,
    "time": 24170.058837890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (+ g (sqrt (fma h (- h) (* g g)))) 0.0) (* (/ (- h) (+ g (sqrt (fma g g (* h (- h)))))) h) (- (sqrt (fma h (- h) (* g g))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 33,
    "avg_bits_err_input": 36.91913143472072,
    "avg_bits_err_output": 36.65674583683315,
    "avg_bits_err_improve": 0.2623855978875653,
    "time": 17613.73193359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9918708656323929,
    "avg_bits_err_output": 0.9794105265643932,
    "avg_bits_err_improve": 0.012460339067999704,
    "time": 6131.068115234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.6469693609377705,
    "avg_bits_err_output": 0.6469693609377705,
    "avg_bits_err_improve": 0,
    "time": 2597.54052734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-318) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e-267) (* (/ (/ a2 b1) b2) a1) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+301) (/ (* a1 a2) (* b1 b2)) (/ (* a2 (/ a1 b1)) b2)))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.986655253484908,
    "avg_bits_err_output": 3.581393837346994,
    "avg_bits_err_improve": 8.405261416137915,
    "time": 7988.03173828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5623637626021017,
    "avg_bits_err_output": 0.513625,
    "avg_bits_err_improve": 0.04873876260210175,
    "time": 10778.0068359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.2) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 2000000.0) (log1p (if (!= (- (- 1.0 x) (hypot 1.0 x)) 0.0) (/ 1.0 (/ 1.0 (+ x (+ (hypot 1.0 x) -1.0)))) (+ x (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 46,
    "avg_bits_err_input": 52.79582136742435,
    "avg_bits_err_output": 0.38885941841195143,
    "avg_bits_err_improve": 52.4069619490124,
    "time": 10347.99658203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.71919993055985,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.71919993055985,
    "time": 2487.092529296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 0,
    "time": 4162.66015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1257.712158203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= (* w w) 5e-8) (- (- (+ 3.0 (/ 2.0 (* r r))) (* (- 0.375 (* v 0.25)) (/ (* r (* w (* w r))) (- 1.0 v)))) 4.5) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* r w) (* (* r (/ w (- 1.0 v))) (- 0.375 (* v 0.25)))) 4.5)))",
    "output_parens": 29,
    "avg_bits_err_input": 13.24002046550635,
    "avg_bits_err_output": 0.2894840234442607,
    "avg_bits_err_improve": 12.950536442062088,
    "time": 24033.681396484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (+ (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) x1) (* (* x1 -6.0) x1)) (* (* x1 (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -2.0)) (- (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0)))))))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.5127421811457701,
    "avg_bits_err_output": 0.2814490053848688,
    "avg_bits_err_improve": 0.2312931757609013,
    "time": 66978.31665039062,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 19.29623075170551,
    "avg_bits_err_output": 1.3886787140474544,
    "avg_bits_err_improve": 17.907552037658057,
    "time": 4567.419189453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2240614816370412,
    "avg_bits_err_output": 0.17868892538812292,
    "avg_bits_err_improve": 0.04537255624891828,
    "time": 8734.782958984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003919694000577261,
    "avg_bits_err_output": 0.003919694000577261,
    "avg_bits_err_improve": 0,
    "time": 2890.472412109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* (/ PI (+ b a)) (/ (- (/ 0.5 b) (/ 0.5 a)) (- (- b a))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.938247422578925,
    "avg_bits_err_output": 0.28784304688852125,
    "avg_bits_err_improve": 13.650404375690403,
    "time": 15801.74560546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (exp (- (* x eps) x)) 1.0 (+ (/ (exp (- (* x eps) x)) eps) (- (exp (- (fma x eps x))) (/ (exp (- (fma x eps x))) eps)))) 2.0)",
    "output_parens": 18,
    "avg_bits_err_input": 29.087406643723906,
    "avg_bits_err_output": 24.44695026505604,
    "avg_bits_err_improve": 4.640456378667867,
    "time": 24901.316162109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.017125,
    "avg_bits_err_output": 0.017125,
    "avg_bits_err_improve": 0,
    "time": 4435.564697265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (+ 1.0 (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))))) (+ (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))) 4.0))",
    "output_parens": 26,
    "avg_bits_err_input": 0.024125,
    "avg_bits_err_output": 0.030125,
    "avg_bits_err_improve": -0.005999999999999998,
    "time": 15145.321533203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (* (/ t (+ t 1.0)) (/ 4.0 (+ t 1.0))))) (+ 2.0 (* t (* (/ t (+ t 1.0)) (/ 4.0 (+ t 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.023125,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 0.01575,
    "time": 14096.52783203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3344.778076171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6954.1337890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2604.021728515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.818228497284723,
    "avg_bits_err_output": 0.240375,
    "avg_bits_err_improve": 7.577853497284723,
    "time": 41409.384765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(/ (- (if (!= (- -2.0 (pow x 5.0)) 0.0) (* (+ (pow x 5.0) 2.0) (/ (pow x 5.0) (+ (pow x 5.0) 2.0))) (pow x 5.0)) (pow (+ x eps) 5.0)) -1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 7.771673768895418,
    "avg_bits_err_output": 7.774992610801169,
    "avg_bits_err_improve": -0.0033188419057506025,
    "time": 17131.727294921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 16.29147747013905,
    "avg_bits_err_output": 16.29147747013905,
    "avg_bits_err_improve": 0,
    "time": 16359.525390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (- (exp (log1p (cos x))) 1.0) (exp (* 10.0 (* x x))))",
    "output_parens": 8,
    "avg_bits_err_input": 3.5597346939920094,
    "avg_bits_err_output": 3.556325138179433,
    "avg_bits_err_improve": 0.0034095558125764036,
    "time": 16497.57373046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (<= x -20000000.0) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0))) (if (<= x 2e-5) (/ x (+ (* x x) 1.0)) (if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (if (!= (/ (/ x (+ x (/ 1.0 x))) 2.0) 0.0) (/ x (+ x (/ 1.0 x))) (/ x (+ x (/ 1.0 x)))) x) 0.0) (/ x (fma x x 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 14.862961151971179,
    "avg_bits_err_output": 0.01,
    "avg_bits_err_improve": 14.85296115197118,
    "time": 4878.078857421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.58276838073367,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.58276838073367,
    "time": 4678.1787109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.14358561573015,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.14308561573015,
    "time": 5417.783203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.306625,
    "avg_bits_err_improve": 63.693375,
    "time": 18296.463134765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (* t 4e-32))",
    "output_parens": 2,
    "avg_bits_err_input": 61.843253347501275,
    "avg_bits_err_output": 0.401125,
    "avg_bits_err_improve": 61.442128347501274,
    "time": 7593.839111328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* c (* -4.0 a)))) b) 0.0) (/ (- (* c (* -4.0 a))) (- (sqrt (fma b b (* c (* -4.0 a)))) b)) (- (- b) (sqrt (fma b b (* c (* -4.0 a)))))) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 34.731654172625774,
    "avg_bits_err_output": 23.60693603309643,
    "avg_bits_err_improve": 11.124718139529342,
    "time": 21024.38330078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 34.50892151664608,
    "avg_bits_err_output": 34.50892151664608,
    "avg_bits_err_improve": 0,
    "time": 25902.029541015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2421.716796875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.411440673098795,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 39.401565673098794,
    "time": 5656.197509765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(* (/ (- x y) (fma x x (* y y))) (+ x y))",
    "output_parens": 6,
    "avg_bits_err_input": 19.68575504741409,
    "avg_bits_err_output": 19.970558808132104,
    "avg_bits_err_improve": -0.28480376071801317,
    "time": 4816.79248046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6721265540007746,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6721265540007746,
    "time": 9369.568115234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03875,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.037625,
    "time": 7361.671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01856372187554087,
    "avg_bits_err_output": 0.008375,
    "avg_bits_err_improve": 0.01018872187554087,
    "time": 7388.238037109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.012875,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.012499999999999999,
    "time": 3583.830078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 1849.948974609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ b (+ d a)) (+ c e))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4000428578176385,
    "avg_bits_err_output": 0.246125,
    "avg_bits_err_improve": 0.15391785781763848,
    "time": 5278.13916015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(- 1.0 (cos x))",
    "output_parens": 2,
    "avg_bits_err_input": 30.01115789529748,
    "avg_bits_err_output": 30.01115789529748,
    "avg_bits_err_improve": 0,
    "time": 7542.9033203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.556461837877784,
    "avg_bits_err_output": 0.2931981203125902,
    "avg_bits_err_improve": 24.263263717565195,
    "time": 11718.9345703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ (sin x) (- (tan x))) 0.0) (/ (log (+ 1.0 (expm1 (* (/ (sin x) (tan x)) (/ (- (sin x) x) (tan x)))))) (log1p (expm1 (/ (sin x) (- (tan x)))))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 28,
    "avg_bits_err_input": 29.68532795172709,
    "avg_bits_err_output": 29.687997204039515,
    "avg_bits_err_improve": -0.002669252312426096,
    "time": 32539.15234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005625,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.004875,
    "time": 2566.970947265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 5e-252) (/ (* (expm1 (* n (log1p (/ i n)))) 100.0) (/ i n)) (+ (* (pow (+ (/ i n) 1.0) n) (/ 100.0 (/ i n))) (/ -200.0 (* i (/ 2.0 n)))))",
    "output_parens": 25,
    "avg_bits_err_input": 47.3425093859414,
    "avg_bits_err_output": 13.054512651762199,
    "avg_bits_err_improve": 34.2879967341792,
    "time": 23979.486572265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(fma b (/ d (fma c c (* d d))) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 8,
    "avg_bits_err_input": 25.980188192230877,
    "avg_bits_err_output": 22.951571307389234,
    "avg_bits_err_improve": 3.028616884841643,
    "time": 13034.136962890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* b (/ c (fma c c (* d d)))) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.083827027080257,
    "avg_bits_err_output": 23.35857945751212,
    "avg_bits_err_improve": 2.725247569568136,
    "time": 16046.343017578125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.035625,
    "avg_bits_err_output": 0.02065776945635998,
    "avg_bits_err_improve": 0.014967230543640016,
    "time": 5107.2578125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.44394324418557,
    "avg_bits_err_output": 12.279339768175296,
    "avg_bits_err_improve": 1.1646034760102744,
    "time": 28450.784423828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- 1.0 (log (+ 1.0 (expm1 (* (- 1.0 ux) (fma ux maxCos (- 1.0 ux))))))) (- (* (* ux maxCos) (fma ux maxCos (- 1.0 ux)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 13.495645621433516,
    "avg_bits_err_output": 12.297144097977531,
    "avg_bits_err_improve": 1.1985015234559846,
    "time": 30088.011474609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (sin (* (* uy 2.0) PI))) yi)) (* (* ux (* (- 1.0 ux) maxCos)) zi))",
    "output_parens": 33,
    "avg_bits_err_input": 0.32794533011683163,
    "avg_bits_err_output": 0.3236992226651708,
    "avg_bits_err_improve": 0.004246107451660819,
    "time": 40092.36962890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.19663710765478196,
    "avg_bits_err_output": 0.19663710765478196,
    "avg_bits_err_improve": 0,
    "time": 21649.629150390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ (/ u1 (- 1.0 u1)) 2.0) 0.0) (/ (+ (/ (* (+ u1 u1) (* u1 0.5)) (* (- 1.0 u1) (* (- 1.0 u1) 4.0))) (* (/ (/ u1 (- 1.0 u1)) 2.0) (/ (/ u1 (- 1.0 u1)) 2.0))) (/ (/ u1 (- 1.0 u1)) 2.0)) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 31,
    "avg_bits_err_input": 0.5584054131264333,
    "avg_bits_err_output": 0.5682955758052319,
    "avg_bits_err_improve": -0.009890162678798609,
    "time": 25160.4921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(+ (* (sqrt (/ u1 (- 1.0 u1))) (+ (cos (* 6.28318530718 u2)) -1.0)) (sqrt (/ u1 (- 1.0 u1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.3288798706505123,
    "avg_bits_err_output": 0.3433964855655813,
    "avg_bits_err_improve": -0.014516614915069004,
    "time": 21602.35546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (/ (+ (- 1.0 (/ 1.0 (+ 1.0 (exp (/ PI s))))) (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ PI (- s))))))) (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 70,
    "avg_bits_err_input": 0.34622139490544057,
    "avg_bits_err_output": 0.3156888209452481,
    "avg_bits_err_improve": 0.03053257396019249,
    "time": 47801.597412109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.0604678217642843,
    "avg_bits_err_output": 0.0604678217642843,
    "avg_bits_err_improve": 0,
    "time": 13578.81298828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (- (fabs x)) s)) (+ (exp (/ (- (fabs x)) s)) 1.0)) (+ (* s (exp (/ (fabs x) (- s)))) s))",
    "output_parens": 17,
    "avg_bits_err_input": 0.14691469672015062,
    "avg_bits_err_output": 0.13421576235723232,
    "avg_bits_err_improve": 0.012698934362918302,
    "time": 15268.997802734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6377393741706877,
    "avg_bits_err_output": 0.6403502679299644,
    "avg_bits_err_improve": -0.0026108937592767,
    "time": 21040.993896484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.16001236850351017,
    "avg_bits_err_output": 0.15965373301264021,
    "avg_bits_err_improve": 0.00035863549086995183,
    "time": 20068.5361328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.5661096639661056,
    "avg_bits_err_output": 2.5661096639661056,
    "avg_bits_err_improve": 0,
    "time": 33321.08837890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ 1.0 v) (* (/ (/ 0.5 v) (exp (* sinTheta_O (/ sinTheta_i v)))) (/ cosTheta_i (sinh (/ 1.0 v))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45987599673795104,
    "avg_bits_err_output": 0.35483785498567155,
    "avg_bits_err_improve": 0.10503814175227949,
    "time": 28038.119140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (/ (exp (+ (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v) 0.6931)) v) 0.5)",
    "output_parens": 8,
    "avg_bits_err_input": 0.11523247469693938,
    "avg_bits_err_output": 0.07511662564390106,
    "avg_bits_err_improve": 0.04011584905303832,
    "time": 12085.35546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (- 2.0 (* alpha (+ alpha alpha))) (- 2.0 (* alpha (+ alpha alpha)))) (- (* (* 4.0 (log (* alpha alpha))) (* PI (fma cosTheta (- (* alpha (* alpha cosTheta)) cosTheta) 1.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.4714917115735817,
    "avg_bits_err_output": 0.4707861235005302,
    "avg_bits_err_improve": 0.000705588073051544,
    "time": 26012.326416015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(+ (fma (- (- 3.0 (* 3.0 (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)))))) s (* s (- 3.0 (* 3.0 (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))))))) (* s (* 3.0 (log (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 19,
    "avg_bits_err_input": 1.3181925752395882,
    "avg_bits_err_output": 1.2946060984236385,
    "avg_bits_err_improve": 0.02358647681594972,
    "time": 30082.596435546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (fma (- s) (- 1.0 (log (/ 1.0 (fma u -4.0 1.0)))) (- s (* (- (+ (log (/ 1.0 (fma u -4.0 1.0))) -1.0) -1.0) s))) (* (- s) (- (log (/ 1.0 (fma u -4.0 1.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 12.398654350062245,
    "avg_bits_err_output": 12.515713604307713,
    "avg_bits_err_improve": -0.11705925424546848,
    "time": 22216.5927734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (/ 1.0 (exp (/ r s))) (/ (/ 0.125 s) PI)) (* 0.75 (/ (exp (/ (/ r -3.0) s)) (* s (* PI 6.0))))) r)",
    "output_parens": 15,
    "avg_bits_err_input": 0.14816826612545544,
    "avg_bits_err_output": 0.1622172999064177,
    "avg_bits_err_improve": -0.014049033780962256,
    "time": 26367.635009765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8504139139318614,
    "avg_bits_err_output": 0.6707863880381181,
    "avg_bits_err_improve": 0.1796275258937433,
    "time": 27810.594482421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ c (+ 1.0 (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* (sqrt PI) (* cosTheta (exp (* cosTheta cosTheta))))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6964411828804143,
    "avg_bits_err_output": 0.4930168467921999,
    "avg_bits_err_improve": 0.20342433608821442,
    "time": 21369.23095703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(- (sin (* PI (+ u2 u2))) (if (!= (* (sin (* PI (+ u2 u2))) (- (sqrt (- (log (- 1.0 u1)))) 1.0)) 0.0) (/ 1.0 (/ 1.0 (- 0.0 (* (sin (* PI (+ u2 u2))) (- (sqrt (- (log (- 1.0 u1)))) 1.0))))) (- 0.0 (* (sin (* PI (+ u2 u2))) (- (sqrt (- (log (- 1.0 u1)))) 1.0)))))",
    "output_parens": 37,
    "avg_bits_err_input": 13.626070382870543,
    "avg_bits_err_output": 13.61418534352794,
    "avg_bits_err_improve": 0.01188503934260332,
    "time": 34348.01953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (cos (* PI (* u2 2.0))) (log (+ 1.0 (if (!= (exp (* (cos (* PI (* u2 2.0))) (- 1.0 (sqrt (- (log (- 1.0 u1))))))) 0.0) (/ (* (expm1 (* (cos (* PI (* u2 2.0))) (- 1.0 (sqrt (- (log (- 1.0 u1))))))) (exp (* (cos (* PI (* u2 2.0))) (- 1.0 (sqrt (- (log (- 1.0 u1)))))))) (exp (* (cos (* PI (* u2 2.0))) (- 1.0 (sqrt (- (log (- 1.0 u1)))))))) (expm1 (* (cos (* PI (* u2 2.0))) (- 1.0 (sqrt (- (log (- 1.0 u1)))))))))))",
    "output_parens": 60,
    "avg_bits_err_input": 13.667632846796424,
    "avg_bits_err_output": 13.239365623527803,
    "avg_bits_err_improve": 0.4282672232686213,
    "time": 29367.37451171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(if (!= (* (log (- 1.0 u0)) (* alpha (- alpha))) 0.0) (/ (* (* (log (- 1.0 u0)) (+ (* alpha alpha) (* -2.0 (* alpha alpha)))) (* (log (- 1.0 u0)) (* alpha alpha))) (* (log (- 1.0 u0)) (* alpha alpha))) (* (log (- 1.0 u0)) (* alpha (- alpha))))",
    "output_parens": 29,
    "avg_bits_err_input": 14.226162936136163,
    "avg_bits_err_output": 14.22869087814565,
    "avg_bits_err_improve": -0.0025279420094879157,
    "time": 26665.80615234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (if (!= (log (- 1.0 u0)) 0.0) (/ 1.0 (/ 1.0 (if (!= (- -1.0 (log (- 1.0 u0))) 0.0) (/ (- 0.25 (* (+ (log (- 1.0 u0)) 0.5) (+ (log (- 1.0 u0)) 0.5))) (- -1.0 (log (- 1.0 u0)))) (log (- 1.0 u0))))) (log (- 1.0 u0)))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 34,
    "avg_bits_err_input": 12.584607537057988,
    "avg_bits_err_output": 12.620726343175948,
    "avg_bits_err_improve": -0.036118806117960034,
    "time": 21845.9052734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -1e+127) (- (if (!= (* PI l) 0.0) (/ (/ (* PI (* PI l)) l) (/ PI l)) (* PI l)) (/ (/ (tan (* PI l)) F) F)) (if (<= (* PI l) -5e+19) (- (* PI l) (/ (tan (if (!= (* PI l) 0.0) (* (- (exp (log1p (/ 1.0 (* PI l)))) 1.0) (* (* PI l) (* PI l))) (* PI l))) (* F F))) (if (<= (* PI l) 1e-11) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (if (<= (* PI l) 2e+155) (- (* PI l) (/ (tan (if (!= (* PI l) 0.0) (* (- (exp (log1p (/ 1.0 (* PI l)))) 1.0) (* (* PI l) (* PI l))) (* PI l))) (* F F))) (- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (/ 1.0 (expm1 (log1p (* PI l))))) (* PI l))) F) F))))))",
    "output_parens": 82,
    "avg_bits_err_input": 16.646005884411142,
    "avg_bits_err_output": 10.207400219375806,
    "avg_bits_err_improve": 6.438605665035336,
    "time": 24691.6064453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2149387218755409,
    "avg_bits_err_output": 0.15225,
    "avg_bits_err_improve": 0.06268872187554089,
    "time": 13806.844970703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.858444100164588,
    "avg_bits_err_output": 10.771293920432264,
    "avg_bits_err_improve": 3.0871501797323244,
    "time": 20199.381103515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (- (- (+ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) 2.0) -1.0) 2.0) 1.0) (* PI -0.25))",
    "output_parens": 36,
    "avg_bits_err_input": 61.69862389366804,
    "avg_bits_err_output": 1.7380246354763453,
    "avg_bits_err_improve": 59.9605992581917,
    "time": 53539.45654296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -1.25e-162) (/ (* (sqrt 2.0) t) (sqrt (+ (* (* 2.0 t) (* t (/ (+ x 1.0) (+ x -1.0)))) (* l (+ (* (/ (+ x 1.0) (+ x -1.0)) l) (- l)))))) (if (<= t 1.2e-134) (/ (* (sqrt 2.0) t) (sqrt (+ (/ (* (+ x 1.0) (* 2.0 (* t t))) (+ x -1.0)) (fma (- l) l (/ (* (+ x 1.0) (* l l)) (+ x -1.0)))))) (/ (* (sqrt 2.0) t) (sqrt (+ (* (* 2.0 t) (* t (/ (+ x 1.0) (+ x -1.0)))) (* l (+ (* (/ (+ x 1.0) (+ x -1.0)) l) (- l))))))))",
    "output_parens": 58,
    "avg_bits_err_input": 43.0165951562062,
    "avg_bits_err_output": 35.884517318365106,
    "avg_bits_err_improve": 7.132077837841095,
    "time": 25116.493896484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.802986425580912,
    "avg_bits_err_output": 3.802986425580912,
    "avg_bits_err_improve": 0,
    "time": 29602.654052734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (- (- (sqrt (- (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0)) -1.0) 1.0)) 0.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.9689041181878356,
    "avg_bits_err_output": 0.9706541181878356,
    "avg_bits_err_improve": -0.0017500000000000293,
    "time": 15026.9873046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.004405037257653,
    "avg_bits_err_output": 10.004405037257653,
    "avg_bits_err_improve": 0,
    "time": 14311.84228515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 5e-289) (sqrt (* U (* (* 2.0 n) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 5e+307) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (if (!= (* n (pow (/ l Om) 2.0)) 0.0) (/ 1.0 (/ 1.0 (* n (pow (/ l Om) 2.0)))) (* n (pow (/ l Om) 2.0))) (- U U*))))) (sqrt (fma U (* n (* 2.0 (- t (* n (* (- U U*) (pow (/ l Om) 2.0)))))) (* l (fma (* n (* 2.0 (/ l Om))) (* U -2.0) 0.0))))))",
    "output_parens": 83,
    "avg_bits_err_input": 34.3563435188631,
    "avg_bits_err_output": 27.997842163766794,
    "avg_bits_err_improve": 6.358501355096305,
    "time": 38337.36279296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1e-105) (/ 2.0 (* (/ (tan k) l) (* (pow (/ k t) 2.0) (* (pow t 3.0) (/ (sin k) l))))) (if (<= t 5.5e-99) (/ 2.0 (* (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) l) (* (sin k) (/ (tan k) l)))) (/ 2.0 (* (/ (tan k) l) (* (pow (/ k t) 2.0) (* (pow t 3.0) (/ (sin k) l)))))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.70244897910644,
    "avg_bits_err_output": 34.229897797984385,
    "avg_bits_err_improve": 13.472551181122057,
    "time": 44580.489013671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (tan k) l) (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ (pow t 3.0) l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.00405801311554,
    "avg_bits_err_output": 27.392468969992134,
    "avg_bits_err_improve": 4.611589043123406,
    "time": 31814.02099609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(fma (/ (* (cos th) a1) (sqrt 2.0)) a1 (* a2 (/ (* (cos th) a2) (sqrt 2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.530235153146095,
    "avg_bits_err_output": 0.43260282189284976,
    "avg_bits_err_improve": 0.09763233125324527,
    "time": 24765.157958984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* PI (* n 2.0)) (* k -0.5)) (/ (sqrt (* PI (* n 2.0))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4558140234749733,
    "avg_bits_err_output": 0.33086379988342224,
    "avg_bits_err_improve": 0.12495022359155106,
    "time": 20274.496826171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (+ (/ (fma (/ -1.0 (exp l)) (exp l) (exp (fma l -1.0 l))) (exp l)) (+ (* (- (exp l) (exp (- l))) 0.5) (/ (+ (expm1 (* l -2.0)) (expm1 (* l -2.0))) (/ -4.0 (exp l))))) (* J (cos (/ K 2.0)))) U)",
    "output_parens": 28,
    "avg_bits_err_input": 17.295902563258757,
    "avg_bits_err_output": 14.806467435795728,
    "avg_bits_err_improve": 2.489435127463029,
    "time": 39757.58544921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l))))",
    "output_parens": 15,
    "avg_bits_err_input": 15.259977517909437,
    "avg_bits_err_output": 15.259977517909437,
    "avg_bits_err_improve": 0,
    "time": 15569.032470703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(- (* (* J (* (cos (/ K 2.0)) -2.0)) (+ 1.0 (sqrt (+ 1.0 (pow (/ U (* (cos (/ K 2.0)) (* 2.0 J))) 2.0))))) (* J (* (cos (/ K 2.0)) -2.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 18.33732312031259,
    "avg_bits_err_output": 18.370078007814758,
    "avg_bits_err_improve": -0.03275488750216837,
    "time": 28436.964599609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.991339047435492,
    "avg_bits_err_output": 11.017988871032996,
    "avg_bits_err_improve": 2.973350176402496,
    "time": 29627.538330078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e+135) (* c0 (sqrt (* (/ A l) (/ 1.0 V)))) (if (<= (* V l) -5e-127) (* c0 (sqrt (* (/ (/ 2.0 (+ l l)) (+ V V)) (+ A A)))) (if (<= (* V l) 1e-133) (* c0 (sqrt (/ (/ A l) V))) (if (<= (* V l) 1e+179) (* c0 (sqrt (+ (/ (+ A (+ A A)) (* (+ l l) (+ V V))) (/ A (* (+ l l) (+ V V)))))) (* c0 (sqrt (/ (/ A l) V)))))))",
    "output_parens": 46,
    "avg_bits_err_input": 19.489491733666977,
    "avg_bits_err_output": 15.786937434591241,
    "avg_bits_err_improve": 3.702554299075736,
    "time": 19548.979736328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* D D) 0.0) (* (/ c0 (* 2.0 w)) (+ (* (/ (/ c0 w) (* h D)) (* d (/ d D))) (sqrt (fma (* (/ (/ c0 w) (* h D)) (* d (/ d D))) (* (/ (/ c0 w) (* h D)) (* d (/ d D))) (* M (- M)))))) (if (<= (* D D) 4e+47) (* (/ c0 (* 2.0 w)) (+ (* (/ c0 w) (/ (* d (/ d h)) (* D D))) (- (sqrt (fma (* (/ c0 w) (/ (* d (/ d h)) (* D D))) (* (/ c0 w) (/ (* d (/ d h)) (* D D))) (* M (- M)))) 0.0))) (* (/ c0 (* 2.0 w)) (fma (/ (/ d D) (* w h)) (* d (/ c0 D)) (sqrt (* (fma d (* (/ c0 D) (/ (/ d D) (* w h))) M) (fma d (* (/ c0 D) (/ (/ d D) (* w h))) (- M))))))))",
    "output_parens": 83,
    "avg_bits_err_input": 59.53181243466636,
    "avg_bits_err_output": 55.08999844662181,
    "avg_bits_err_improve": 4.441813988044544,
    "time": 46385.739990234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* h (/ (pow (/ (* M (/ D 2.0)) d) 2.0) (+ l l)))))",
    "output_parens": 14,
    "avg_bits_err_input": 26.41690728909107,
    "avg_bits_err_output": 25.43699901442641,
    "avg_bits_err_improve": 0.9799082746646626,
    "time": 34550.51708984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (- 0.5 (/ 0.5 (hypot 1.0 x))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 21,
    "avg_bits_err_input": 15.39205824064325,
    "avg_bits_err_output": 14.90151194904753,
    "avg_bits_err_improve": 0.49054629159572016,
    "time": 4855.5625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- (fma v (* v 6.0) -2.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9870637218755409,
    "avg_bits_err_output": 0.01129248125036058,
    "avg_bits_err_improve": 0.9757712406251804,
    "time": 3734.564697265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (+ 2.0 (* (* v v) -6.0)))) (* t (- 1.0 (* v v)))) (* (* v v) (/ (/ 5.0 (* PI (* t (- 1.0 (* v v))))) (sqrt (+ 2.0 (* (* v v) -6.0))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.45553459325646145,
    "avg_bits_err_output": 0.12206947465304277,
    "avg_bits_err_improve": 0.33346511860341865,
    "time": 21635.9912109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt 2.0) 4.0) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.011167481250360578,
    "avg_bits_err_output": 0.01027124062518029,
    "avg_bits_err_improve": 0.0008962406251802873,
    "time": 12668.942626953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5285635298177244,
    "avg_bits_err_output": 0.5285635298177244,
    "avg_bits_err_improve": 0,
    "time": 10998.240234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 2.0529347922808627,
    "avg_bits_err_output": 2.026913551655683,
    "avg_bits_err_improve": 0.026021240625179853,
    "time": 24901.595458984375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- mu (- (- Ec Vef) EDonor)) KbT)))) (/ NaChar (+ 1.0 (* (exp (/ (+ EAccept (- (+ Vef Ev) mu)) (+ KbT KbT))) (exp (/ (+ EAccept (- (+ Vef Ev) mu)) (+ KbT KbT)))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.024823660533951273,
    "avg_bits_err_output": 0.025101459586618326,
    "avg_bits_err_improve": -0.00027779905266705346,
    "time": 11566.41943359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.18200977500432683,
    "avg_bits_err_output": 0.18200977500432683,
    "avg_bits_err_improve": 0,
    "time": 17484.756103515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 15,
    "avg_bits_err_input": 0.18484082587449863,
    "avg_bits_err_output": 0.18484082587449863,
    "avg_bits_err_improve": 0,
    "time": 13857.812744140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18622876449628095,
    "avg_bits_err_output": 0.18622876449628095,
    "avg_bits_err_improve": 0,
    "time": 12657.886962890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (/ (+ (/ (/ x 2.0) (sqrt (fma x x (* 4.0 (* p p))))) (+ (+ 1.0 (/ (/ x 2.0) (sqrt (fma x x (* 4.0 (* p p)))))) (+ 1.0 (/ x (sqrt (fma x x (* 4.0 (* p p)))))))) 2.0)))",
    "output_parens": 24,
    "avg_bits_err_input": 13.036152592432723,
    "avg_bits_err_output": 13.038002625837542,
    "avg_bits_err_improve": -0.0018500334048194844,
    "time": 16313.732666015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.89204784365195,
    "avg_bits_err_output": 0.064875,
    "avg_bits_err_improve": 40.82717284365195,
    "time": 5565.17724609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (tan x)))",
    "output_parens": 5,
    "avg_bits_err_input": 31.55902957880205,
    "avg_bits_err_output": 31.55902957880205,
    "avg_bits_err_improve": 0,
    "time": 18037.78271484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (/ (+ (sqrt (- (* b_2 b_2) (* a c))) (+ (sqrt (- (* b_2 b_2) (* a c))) (* b_2 -2.0))) 2.0) a)",
    "output_parens": 13,
    "avg_bits_err_input": 33.250716627551554,
    "avg_bits_err_output": 33.25341474786415,
    "avg_bits_err_improve": -0.002698120312594199,
    "time": 19043.87548828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.11813922100866,
    "avg_bits_err_output": 34.11813922100866,
    "avg_bits_err_improve": 0,
    "time": 18794.668212890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 31.86615493825549,
    "avg_bits_err_output": 31.104519833951805,
    "avg_bits_err_improve": 0.7616351043036858,
    "time": 15498.979248046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (!= (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 0.0) (/ (if (!= (+ (exp (/ (+ (log1p x) (log1p x)) n)) (exp (/ (+ (log x) (log x)) n))) 0.0) (/ (if (!= (+ (exp (/ (* (* (log1p x) -2.0) -2.0) n)) (exp (/ (* (- (- (log x)) (log x)) -2.0) n))) 0.0) (/ (- (exp (/ (* (* (+ (log1p x) (log1p x)) -2.0) -2.0) n)) (exp (/ (* (- (- (log x)) (+ (log x) (+ (log x) (log x)))) -2.0) n))) (+ (exp (/ (* (* (log1p x) -2.0) -2.0) n)) (exp (/ (* (- (- (log x)) (log x)) -2.0) n)))) (- (exp (/ (* (* (log1p x) -2.0) -2.0) n)) (exp (/ (* (- (- (log x)) (log x)) -2.0) n)))) (+ (exp (/ (+ (log1p x) (log1p x)) n)) (exp (/ (+ (log x) (log x)) n)))) (- (exp (/ (+ (log1p x) (log1p x)) n)) (exp (/ (+ (log x) (log x)) n)))) (+ (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))) (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))",
    "output_parens": 118,
    "avg_bits_err_input": 32.852489982194086,
    "avg_bits_err_output": 32.50563633523501,
    "avg_bits_err_improve": 0.34685364695907595,
    "time": 33026.176513671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (- (- (exp (log (+ (exp (- (log1p N) (log N))) 2.0))) 1.0) 2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.80565365569737,
    "avg_bits_err_output": 29.83568213219907,
    "avg_bits_err_improve": -0.030028476501701817,
    "time": 13498.458251953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(+ (/ (- -0.5 (/ 0.5 (/ x (- -1.0 x)))) (- -1.0 x)) (+ (/ 0.5 (* (/ x (- -1.0 x)) (+ 1.0 x))) (/ 1.0 (+ x (+ x 2.0)))))",
    "output_parens": 16,
    "avg_bits_err_input": 14.266997377295024,
    "avg_bits_err_output": 14.293314852413388,
    "avg_bits_err_improve": -0.026317475118364797,
    "time": 20728.03857421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (log1p (if (!= (+ (expm1 (cos (+ x eps))) 2.0) 0.0) (/ (+ -1.0 (exp (+ (cos (+ x eps)) (cos (+ x eps))))) (if (!= (+ (expm1 (cos (+ x eps))) 4.0) 0.0) (/ (fma (+ (expm1 (cos (+ x eps))) 3.0) (+ (expm1 (cos (+ x eps))) 3.0) -1.0) (+ (expm1 (cos (+ x eps))) 4.0)) (+ (expm1 (cos (+ x eps))) 2.0))) (expm1 (cos (+ x eps))))) (cos x))",
    "output_parens": 44,
    "avg_bits_err_input": 40.063134977209515,
    "avg_bits_err_output": 40.187804076594595,
    "avg_bits_err_improve": -0.12466909938508053,
    "time": 25121.664794921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.287079827296214,
    "avg_bits_err_output": 29.98137038087552,
    "avg_bits_err_improve": 0.30570944642069264,
    "time": 13323.99755859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(- (/ 0.5 (sin x)) (- (/ 0.5 (sin x)) (/ (- 1.0 (cos x)) (sin x))))",
    "output_parens": 10,
    "avg_bits_err_input": 29.820413235775288,
    "avg_bits_err_output": 29.83594826660974,
    "avg_bits_err_improve": -0.015535030834453067,
    "time": 23283.858154296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.497212251970524,
    "avg_bits_err_output": 21.773695436151467,
    "avg_bits_err_improve": 11.723516815819057,
    "time": 22305.491455078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.777319510496454,
    "avg_bits_err_output": 33.777319510496454,
    "avg_bits_err_improve": 0,
    "time": 25579.85546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (/ (+ 1.0 (log (- 1.0 x))) (log1p x)) (- -1.0 (/ -1.0 (log1p x)))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.249397783302264,
    "avg_bits_err_output": 0.862326645723658,
    "avg_bits_err_improve": 60.38707113757861,
    "time": 24054.985107421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))))) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.0038189906172,
    "avg_bits_err_output": 44.226674620399905,
    "avg_bits_err_improve": 18.777144370217293,
    "time": 16353.475341796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.505118567529436,
    "avg_bits_err_output": 58.46225117975003,
    "avg_bits_err_improve": 0.04286738777940968,
    "time": 18554.875732421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (if (!= (+ (/ x (tan x)) 1.0) 0.0) (/ (- 1.0 (* (/ x (tan x)) (/ x (tan x)))) (+ (/ x (tan x)) 1.0)) (- 1.0 (/ x (tan x)))) x)",
    "output_parens": 19,
    "avg_bits_err_input": 59.799133600510245,
    "avg_bits_err_output": 59.78337646508167,
    "avg_bits_err_improve": 0.015757135428572155,
    "time": 29397.8876953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.26191170306846,
    "avg_bits_err_output": 29.067845303928998,
    "avg_bits_err_improve": 31.194066399139466,
    "time": 25687.126708984375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(- (/ (expm1 x) (expm1 x)) (/ -1.0 (expm1 x)))",
    "output_parens": 6,
    "avg_bits_err_input": 41.198204675298605,
    "avg_bits_err_output": 0.4935760287027845,
    "avg_bits_err_improve": 40.70462864659582,
    "time": 6904.83056640625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.61771282688367,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.61746282688367,
    "time": 3394.7294921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.76068083760891,
    "avg_bits_err_output": 0.014410952987381808,
    "avg_bits_err_improve": 29.746269884621526,
    "time": 7169.7333984375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (* (+ (expm1 x) (expm1 (- x))) (/ (- 1.0 (exp (- x))) (expm1 (- x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 30.009672811185897,
    "avg_bits_err_output": 28.99794947294523,
    "avg_bits_err_improve": 1.0117233382406674,
    "time": 22994.457763671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (/ (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) (+ x -1.0)) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 23,
    "avg_bits_err_input": 9.253645595574053,
    "avg_bits_err_output": 9.25759276870547,
    "avg_bits_err_improve": -0.003947173131416903,
    "time": 43387.81982421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(+ (/ (tan (+ x eps)) 2.0) (- (/ (tan (+ x eps)) 2.0) (tan x)))",
    "output_parens": 9,
    "avg_bits_err_input": 37.19322870327347,
    "avg_bits_err_output": 37.19665522588937,
    "avg_bits_err_improve": -0.0034265226159035933,
    "time": 20775.554443359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.267771417149046,
    "avg_bits_err_output": 0.1703067671895733,
    "avg_bits_err_improve": 30.097464649959473,
    "time": 15823.19482421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (log1p (log1p (expm1 (expm1 (sin x))))))",
    "output_parens": 8,
    "avg_bits_err_input": 37.32740431185747,
    "avg_bits_err_output": 37.34167504801749,
    "avg_bits_err_improve": -0.014270736160021613,
    "time": 20551.35009765625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (* (/ (/ -1.0 (sqrt x)) (/ -1.0 (sqrt (+ 1.0 x)))) (/ 1.0 (sqrt (+ 1.0 x)))) (/ 1.0 (sqrt (+ x 1.0))))",
    "output_parens": 14,
    "avg_bits_err_input": 19.91670907442092,
    "avg_bits_err_output": 19.919427484568534,
    "avg_bits_err_improve": -0.0027184101476152023,
    "time": 16994.9345703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (atan N) 0.0) (- (/ 1.0 (/ -1.0 (atan N))) (+ (- (atan (+ N 1.0))) 0.0)) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 15,
    "avg_bits_err_input": 14.767982564178892,
    "avg_bits_err_output": 14.76778749107768,
    "avg_bits_err_improve": 0.0001950731012119178,
    "time": 12266.721435546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.397892207208027,
    "avg_bits_err_output": 1.1879858716004401,
    "avg_bits_err_improve": 28.209906335607588,
    "time": 24731.3896484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07326204570071307,
    "avg_bits_err_output": 0.07326204570071307,
    "avg_bits_err_improve": 0,
    "time": 18892.863525390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b (- a)) (* a b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.437323458131658,
    "avg_bits_err_output": 0.31009718125612984,
    "avg_bits_err_improve": 16.12722627687553,
    "time": 10706.572265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (/ angle -180.0)) 0.0) (/ 1.0 (/ 180.0 (* PI angle))) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.821060747476913,
    "avg_bits_err_output": 20.86779961047753,
    "avg_bits_err_improve": -0.04673886300061625,
    "time": 34372.881103515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (* (sin (* PI (/ angle 180.0))) (- (exp (log1p (cos (* PI (/ angle 180.0))))) 1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.81752120710567,
    "avg_bits_err_output": 30.819793513002846,
    "avg_bits_err_improve": -0.0022723058971756416,
    "time": 38136.234619140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (* angle (- (exp (log1p (* PI 0.005555555555555556))) 1.0)))) 2.0))",
    "output_parens": 14,
    "avg_bits_err_input": 20.12189732157665,
    "avg_bits_err_output": 20.182777441675654,
    "avg_bits_err_improve": -0.060880120099003676,
    "time": 41939.287353515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17863684218813097,
    "avg_bits_err_output": 0.17853375534275098,
    "avg_bits_err_improve": 0.00010308684537999047,
    "time": 12736.221435546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (* (tan x) (tan x))) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3155272590284995,
    "avg_bits_err_output": 0.3158602412056423,
    "avg_bits_err_improve": -0.0003329821771428376,
    "time": 18540.901611328125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (/ e (fma e (cos v) 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.13592403967784733,
    "avg_bits_err_output": 0.13619812031259015,
    "avg_bits_err_improve": -0.00027408063474282374,
    "time": 20491.5830078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.456186758291835,
    "avg_bits_err_output": 16.45197347502879,
    "avg_bits_err_improve": 0.004213283263045042,
    "time": 35889.822265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.120791713719925,
    "avg_bits_err_output": 0.18108045156583524,
    "avg_bits_err_improve": 51.93971126215409,
    "time": 23791.43115234375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (- (* b b) (* a (* c -4.0))) 0.0) (/ (- (* b (* b (* b b))) (* c (* a (* 16.0 (* a c))))) (- (* b b) (* a (* c -4.0)))) (fma -4.0 (* a c) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 42,
    "avg_bits_err_input": 28.605496859858842,
    "avg_bits_err_output": 0.36089248282485,
    "avg_bits_err_improve": 28.244604377033994,
    "time": 25998.855712890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.99124497118306,
    "avg_bits_err_output": 0.23640150469462118,
    "avg_bits_err_improve": 43.75484346648844,
    "time": 27412.428955078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.50072855114043,
    "avg_bits_err_output": 21.773695436151467,
    "avg_bits_err_improve": 11.727033114988966,
    "time": 19589.687255859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (fma (cos phi1) (cos phi1) (* (cos (- lambda1 lambda2)) (* (cos phi1) (cos phi2)))) (cos phi1)) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.8208514187129492,
    "avg_bits_err_output": 0.8296413423293896,
    "avg_bits_err_improve": -0.008789923616440376,
    "time": 30550.388427734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0)))) 0.0) (- (/ (/ 16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))) (- -1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))) (/ 1.0 (- -1.0 (/ 4.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))) (- 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 69,
    "avg_bits_err_input": 29.025259517857783,
    "avg_bits_err_output": 28.991977406013923,
    "avg_bits_err_improve": 0.03328211184386021,
    "time": 29879.80615234375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (/ (- (expm1 (* x -2.0))) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output_parens": 11,
    "avg_bits_err_input": 58.14127252826874,
    "avg_bits_err_output": 1.1266511281273441,
    "avg_bits_err_improve": 57.0146214001414,
    "time": 20095.082763671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.0175177741536,
    "avg_bits_err_output": 0.05232312031259015,
    "avg_bits_err_improve": 57.96519465384101,
    "time": 10060.5361328125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(expm1 (log1p (/ 2.0 (+ (exp x) (exp (- x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.008563721875540865,
    "avg_bits_err_output": 0.00867932343849159,
    "avg_bits_err_improve": -0.00011560156295072413,
    "time": 2079.592529296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (/ (+ x (+ (sqrt (fma x x -1.0)) (+ x (sqrt (fma x x -1.0))))) 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 32.345625,
    "avg_bits_err_output": 32.346125,
    "avg_bits_err_improve": -0.0005000000000023874,
    "time": 6266.995361328125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (/ x (/ (+ x -1.0) -2.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.49709355993969,
    "avg_bits_err_output": 0.01814624062518029,
    "avg_bits_err_improve": 58.478947319314514,
    "time": 15518.8896484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.06044812031259014,
    "avg_bits_err_output": 0.06044812031259014,
    "avg_bits_err_improve": 0,
    "time": 3198.988525390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma ew (* (sin t) (cos (atan (/ eh (* ew (tan t)))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12719812031259015,
    "avg_bits_err_output": 0.1265212406251803,
    "avg_bits_err_improve": 0.0006768796874098426,
    "time": 25505.907470703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12925,
    "avg_bits_err_output": 0.12925,
    "avg_bits_err_improve": 0,
    "time": 12402.0234375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 38.41878921237882,
    "avg_bits_err_output": 3.776400656937925,
    "avg_bits_err_improve": 34.642388555440895,
    "time": 25510.327880859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.75590394101239,
    "avg_bits_err_output": 0.011280990939180448,
    "avg_bits_err_improve": 14.744622950073209,
    "time": 8795.00927734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.15402250659705077,
    "avg_bits_err_output": 0.1506382414334477,
    "avg_bits_err_improve": 0.003384265163603073,
    "time": 38151.318603515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.16219721394157,
    "avg_bits_err_output": 0.17910413594209731,
    "avg_bits_err_improve": 51.98309307799947,
    "time": 30252.868408203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.741924115096033,
    "avg_bits_err_output": 0.3418173257863423,
    "avg_bits_err_improve": 28.400106789309692,
    "time": 24414.69140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (+ b (+ (sqrt (fma c (* a -3.0) (* b b))) (sqrt (fma c (* a -3.0) (* b b))))))) (* a 6.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 30,
    "avg_bits_err_input": 44.026525042560394,
    "avg_bits_err_output": 0.24499830938347325,
    "avg_bits_err_improve": 43.78152673317692,
    "time": 29016.515380859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma -3.0 (* c a) (* b b)))) 0.0) (* (/ c (- (- b) (sqrt (fma c (* -3.0 a) (* b b))))) (* a 3.0)) (- (sqrt (fma -3.0 (* c a) (* b b))) b)) (* 3.0 a))",
    "output_parens": 23,
    "avg_bits_err_input": 33.5403086642602,
    "avg_bits_err_output": 21.75632364760269,
    "avg_bits_err_improve": 11.78398501665751,
    "time": 22392.848876953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (if (!= (sin (- lambda1 lambda2)) 0.0) (/ 1.0 (/ 1.0 (sin (- lambda1 lambda2)))) (sin (- lambda1 lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 23,
    "avg_bits_err_input": 13.392803135743739,
    "avg_bits_err_output": 13.408601892827734,
    "avg_bits_err_improve": -0.015798757083995696,
    "time": 37046.704345703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (+ (/ (- (+ x -1.0) (* x (/ x (+ x 1.0)))) (- 1.0 x)) (/ (/ x (+ x 1.0)) (- 1.0 x))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.25925549259497,
    "avg_bits_err_output": 0.4431942437171937,
    "avg_bits_err_improve": 28.816061248877777,
    "time": 21241.6767578125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (+ (/ 1.0 (+ x -1.0)) (/ x (+ 2.0 (+ x x)))) (/ x (+ 2.0 (+ x x))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.06474896725995868,
    "avg_bits_err_improve": -0.05349896725995869,
    "time": 6114.427734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ (/ -1.0 (+ x 1.0)) (+ -1.0 (/ x (+ x 1.0)))) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 14.255973601060752,
    "avg_bits_err_output": 12.398575538971741,
    "avg_bits_err_improve": 1.8573980620890111,
    "time": 20835.27685546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 1e+230) (/ (sqrt (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C)) (* (* (- (pow B 2.0) (* A (* 4.0 C))) F) -2.0))) (- (- (pow B 2.0) (* A (* 4.0 C))))) 0.0)",
    "output_parens": 45,
    "avg_bits_err_input": 52.337215148945475,
    "avg_bits_err_output": 50.97053132443636,
    "avg_bits_err_improve": 1.366683824509117,
    "time": 37280.54052734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 4.8e+188) (* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI)) (/ (* (atan (/ 0.0 B)) 180.0) PI))",
    "output_parens": 18,
    "avg_bits_err_input": 29.861659304921883,
    "avg_bits_err_output": 27.87138230113507,
    "avg_bits_err_improve": 1.9902770037868116,
    "time": 22380.482421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (+ C (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A)) (* 2.0 (* (- (pow B 2.0) (* A (* C 4.0))) F)))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 52.21040211276203,
    "avg_bits_err_output": 51.88454081612158,
    "avg_bits_err_improve": 0.32586129664045416,
    "time": 38367.37451171875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.428865641902025,
    "avg_bits_err_output": 15.428865641902025,
    "avg_bits_err_improve": 0,
    "time": 14063.862060546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- g) 0.0) (/ (* g (+ g (- (sqrt (fma h (- h) (* g g)))))) (- g)) (- (sqrt (fma h (- h) (* g g))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 30,
    "avg_bits_err_input": 35.81181306384064,
    "avg_bits_err_output": 35.765436405570014,
    "avg_bits_err_improve": 0.046376658270624205,
    "time": 18714.105712890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9892646625064913,
    "avg_bits_err_output": 0.9770968046888523,
    "avg_bits_err_improve": 0.01216785781763896,
    "time": 12887.09326171875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7293776763925557,
    "avg_bits_err_output": 0.7293776763925557,
    "avg_bits_err_improve": 0,
    "time": 4949.027099609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (* a1 (/ a2 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-289) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+308) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.259932373714525,
    "avg_bits_err_output": 2.2350656969783356,
    "avg_bits_err_improve": 9.02486667673619,
    "time": 9446.908447265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5141795882180192,
    "avg_bits_err_output": 0.4405,
    "avg_bits_err_improve": 0.07367958821801923,
    "time": 14331.544921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.04) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 200000000.0) (log1p (+ x (+ (hypot 1.0 x) -1.0))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 36,
    "avg_bits_err_input": 53.072991959607606,
    "avg_bits_err_output": 0.3598626084636937,
    "avg_bits_err_improve": 52.71312935114391,
    "time": 15055.0537109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.737987692005759,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.737987692005759,
    "time": 2599.21337890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (* (- 1.0 x) (/ 1.0 (+ 1.0 x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.012125,
    "avg_bits_err_improve": -0.0006250000000000006,
    "time": 5447.50439453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1311.10498046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* r w) (* (/ (* r w) (- 1.0 v)) (- 0.375 (* v 0.25)))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.927482184284866,
    "avg_bits_err_output": 0.3194695250679462,
    "avg_bits_err_improve": 12.60801265921692,
    "time": 19654.418212890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (- (- 1.0 (+ -1.0 (* x1 (* x1 -3.0)))) 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* (* x1 x1) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)))))) (+ x1 x1)))",
    "output_parens": 50,
    "avg_bits_err_input": 0.5116336805139391,
    "avg_bits_err_output": 0.2938057724925655,
    "avg_bits_err_improve": 0.21782790802137358,
    "time": 67135.26611328125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 17.88612866222424,
    "avg_bits_err_output": 1.3600987478036544,
    "avg_bits_err_improve": 16.526029914420587,
    "time": 6752.58349609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.22938228322697118,
    "avg_bits_err_output": 0.22938228322697118,
    "avg_bits_err_improve": 0,
    "time": 6143.795654296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2684.497802734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (- (/ PI b) (/ PI a)) (/ (+ b a) -0.5)) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.76977070297973,
    "avg_bits_err_output": 0.2547078953169168,
    "avg_bits_err_improve": 14.515062807662813,
    "time": 16655.338623046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (exp (- (* x eps) x)) 0.0) (/ (+ (exp (* (- x (* x eps)) -2.0)) (* (exp (- (* x eps) x)) (+ (/ (exp (- (* x eps) x)) eps) (- (exp (- (fma x eps x))) (/ (exp (- (fma x eps x))) eps))))) (exp (- (* x eps) x))) (+ (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* x eps)))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma x eps x))))) 2.0)",
    "output_parens": 44,
    "avg_bits_err_input": 29.50826244526362,
    "avg_bits_err_output": 24.841490601308195,
    "avg_bits_err_improve": 4.666771843955427,
    "time": 20689.673095703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.027875,
    "avg_bits_err_output": 0.027875,
    "avg_bits_err_improve": 0,
    "time": 5432.38232421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (/ (+ 2.0 (+ 2.0 (* (- 2.0 (/ (/ 4.0 t) (+ (/ 2.0 t) 2.0))) (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0)))))) 2.0))",
    "output_parens": 27,
    "avg_bits_err_input": 0.03175,
    "avg_bits_err_output": 0.0934985897404688,
    "avg_bits_err_improve": -0.061748589740468804,
    "time": 13735.448974609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (+ 1.0 (/ (* (/ (* 2.0 t) (+ t 1.0)) (* t 4.0)) (+ t 1.0)))) (+ 4.0 (- (+ (* (* 8.0 (/ t (+ 1.0 t))) (/ t (+ 1.0 t))) -1.0) -1.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 0.033625,
    "avg_bits_err_output": 0.08513684218813103,
    "avg_bits_err_improve": -0.05151184218813103,
    "time": 16935.97314453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3266.4052734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7309.14453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2760.60400390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.869208202763694,
    "avg_bits_err_output": 0.258875,
    "avg_bits_err_improve": 7.6103332027636945,
    "time": 29973.17236328125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (if (!= (+ (pow (+ x eps) 5.0) 1.0) 0.0) (/ (* (pow (+ x eps) 5.0) (+ (pow (+ x eps) 5.0) 1.0)) (+ (pow (+ x eps) 5.0) 1.0)) (pow (+ x eps) 5.0)) (pow x 5.0))",
    "output_parens": 19,
    "avg_bits_err_input": 7.704921750259623,
    "avg_bits_err_output": 7.707758746341332,
    "avg_bits_err_improve": -0.0028369960817089535,
    "time": 22926.60791015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (expm1 (log1p (pow (+ x eps) 2.0))) (pow x 2.0))",
    "output_parens": 6,
    "avg_bits_err_input": 16.39349772541454,
    "avg_bits_err_output": 16.421289622626432,
    "avg_bits_err_improve": -0.027791897211891126,
    "time": 14324.84423828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (exp (* 10.0 (* x x))) (- (if (!= (exp (* 10.0 (* x x))) 0.0) (/ 1.0 (/ 1.0 (exp (* 10.0 (* x x))))) (exp (* 10.0 (* x x)))) (* (if (!= (exp (* 10.0 (* x x))) 0.0) (/ 1.0 (/ 1.0 (exp (* 10.0 (* x x))))) (exp (* 10.0 (* x x)))) (cos x))))",
    "output_parens": 33,
    "avg_bits_err_input": 3.549624384460356,
    "avg_bits_err_output": 3.549894153254418,
    "avg_bits_err_improve": -0.0002697687940620419,
    "time": 17187.698486328125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (!= (* (/ (- -2.0 (* x (+ x x))) (* (fma x x 1.0) -2.0)) (/ x (fma x x 1.0))) 0.0) (/ (/ (- x 0.0) x) (+ x (/ 1.0 x))) (/ x (fma x x 1.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 15.440684010593156,
    "avg_bits_err_output": 0.10012658748691901,
    "avg_bits_err_improve": 15.340557423106237,
    "time": 6379.874755859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.83574125539821,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.83574125539821,
    "time": 3927.388427734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.76474219334192,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 38.76349219334192,
    "time": 3785.641357421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (/ (* -1.7e+308 (- 1.7e+308 (* 1.7e+308 t))) -1.7e+308) -1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.30168872187554086,
    "avg_bits_err_improve": 63.69831127812446,
    "time": 18368.101806640625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* 4e-32 (* t t))",
    "output_parens": 2,
    "avg_bits_err_input": 61.843245613873904,
    "avg_bits_err_output": 0.4106253765672779,
    "avg_bits_err_improve": 61.43262023730663,
    "time": 7728.305419921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.777319510496454,
    "avg_bits_err_output": 33.777319510496454,
    "avg_bits_err_improve": 0,
    "time": 28624.8095703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma -4.0 (* a c) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.50072855114043,
    "avg_bits_err_output": 21.773695436151467,
    "avg_bits_err_improve": 11.727033114988966,
    "time": 24034.042724609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2399.525390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.21935763276731,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 40.209107632767314,
    "time": 6010.699462890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.589307546808183,
    "avg_bits_err_output": 20.589307546808183,
    "avg_bits_err_improve": 0,
    "time": 3988.86279296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (if (!= b 0.0) (+ (+ (+ b c) (+ d a)) (/ 0.0 b)) (+ a (+ b (+ c d)))) 2.0)",
    "output_parens": 11,
    "avg_bits_err_input": 3.6405157901204688,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6405157901204688,
    "time": 13894.187255859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(+ (* a (+ b d)) (* a c))",
    "output_parens": 4,
    "avg_bits_err_input": 0.034625,
    "avg_bits_err_output": 0.0405,
    "avg_bits_err_improve": -0.005874999999999998,
    "time": 7071.81103515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.024188721875540872,
    "avg_bits_err_output": 0.0115,
    "avg_bits_err_improve": 0.012688721875540872,
    "time": 2640.59912109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.012375,
    "avg_bits_err_output": 0.012375,
    "avg_bits_err_improve": 0,
    "time": 3036.256103515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0,
    "time": 1945.81201171875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39340601562950744,
    "avg_bits_err_output": 0.24875,
    "avg_bits_err_improve": 0.14465601562950745,
    "time": 4424.85693359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (* (cos x) (* (cos x) -0.25)) 0.0) (/ (fma (cos x) (* (* (cos x) (cos x)) (* (cos x) 0.0625)) (* (cos x) (* (+ 1.0 (/ (cos x) -2.0)) (* (+ 1.0 (/ (cos x) -2.0)) (* (cos x) -0.25))))) (* (cos x) (* (cos x) -0.25))) (fma (+ 1.0 (/ (cos x) -2.0)) (+ 1.0 (/ (cos x) -2.0)) (* (cos x) (* (cos x) -0.25))))",
    "output_parens": 42,
    "avg_bits_err_input": 29.811700122557763,
    "avg_bits_err_output": 29.823738897624956,
    "avg_bits_err_improve": -0.012038775067193086,
    "time": 11258.49658203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (fma x x (- eps)))) 0.0) (/ eps (+ x (sqrt (fma x x (- eps))))) (- x (sqrt (fma x x (- eps)))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.456523389874434,
    "avg_bits_err_output": 0.29991748125036066,
    "avg_bits_err_improve": 24.156605908624073,
    "time": 11141.10791015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (- (tan x))) 0.0) (/ (+ (fma (- (fabs (/ x (tan x)))) (fabs (/ x (tan x))) (* (/ x (tan x)) (/ x (tan x)))) (* (/ x (tan x)) (/ (- x (sin x)) (- (tan x))))) (/ x (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 35,
    "avg_bits_err_input": 29.421632279398324,
    "avg_bits_err_output": 29.42097377943643,
    "avg_bits_err_improve": 0.0006584999618937104,
    "time": 31352.549072265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005375,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.00475,
    "time": 2506.22216796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= i 2.05e+83) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* 100.0 (- (/ -1.0 (/ i n)) (* (/ -1.0 (/ i n)) (pow (+ (/ i n) 1.0) n)))))",
    "output_parens": 19,
    "avg_bits_err_input": 47.941282953079444,
    "avg_bits_err_output": 13.963456986905747,
    "avg_bits_err_improve": 33.9778259661737,
    "time": 22938.1982421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* (/ d (fma d d (* c c))) b) (* a (/ c (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 25.80754034068526,
    "avg_bits_err_output": 22.846996379618343,
    "avg_bits_err_improve": 2.960543961066918,
    "time": 12129.1044921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= b -3.2e+173) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (+ (* d d) (* c c))))) (if (<= b 1.8e+126) (- (/ (* b c) (+ (* d d) (* c c))) (* a (/ d (+ (* d d) (* c c))))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (+ (* d d) (* c c)))))))",
    "output_parens": 35,
    "avg_bits_err_input": 25.95044423935469,
    "avg_bits_err_output": 24.04686950960474,
    "avg_bits_err_improve": 1.903574729749952,
    "time": 13635.53564453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.035125,
    "avg_bits_err_output": 0.023856203125901452,
    "avg_bits_err_improve": 0.011268796874098552,
    "time": 6941.79150390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.579489360709896,
    "avg_bits_err_output": 12.408031237173681,
    "avg_bits_err_improve": 1.1714581235362154,
    "time": 30114.28759765625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (- (- ux (* ux ux)) (+ (- ux) (* (* ux maxCos) (+ (- 1.0 ux) (fma maxCos ux (- 1.0 ux))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.63019050459329,
    "avg_bits_err_output": 0.33206295883040116,
    "avg_bits_err_improve": 13.29812754576289,
    "time": 30716.329345703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (fma (if (!= (sin (* uy (* 2.0 PI))) 0.0) (/ 1.0 (/ 1.0 (sin (* uy (* 2.0 PI))))) (sin (* uy (* 2.0 PI)))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) yi) (* (- 1.0 ux) (* (* ux maxCos) zi))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.33401348843591894,
    "avg_bits_err_output": 0.33728066103083365,
    "avg_bits_err_improve": -0.0032671725949147135,
    "time": 47987.776123046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.19987260553560118,
    "avg_bits_err_output": 0.19987260553560118,
    "avg_bits_err_improve": 0,
    "time": 22496.895263671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (+ (/ u1 (- 1.0 u1)) -1.0) 0.0) (/ (- (/ (* u1 u1) (- 1.0 u1)) u1) (* (- 1.0 u1) (+ (/ u1 (- 1.0 u1)) -1.0))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 21,
    "avg_bits_err_input": 0.5308800480580345,
    "avg_bits_err_output": 0.5567730417997937,
    "avg_bits_err_improve": -0.02589299374175924,
    "time": 24985.194091796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (log1p (expm1 (/ u1 (- 1.0 u1))))) (cos (* 6.28318530718 u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3397218907425026,
    "avg_bits_err_output": 0.37239877043024855,
    "avg_bits_err_improve": -0.03267687968774596,
    "time": 18741.05615234375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (if (!= (/ PI s) 0.0) (/ 1.0 (/ 1.0 (/ PI s))) (/ PI s))))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 26,
    "avg_bits_err_input": 0.3406485254221038,
    "avg_bits_err_output": 0.34282336838359606,
    "avg_bits_err_improve": -0.002174842961492285,
    "time": 52815.385009765625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05871110042782082,
    "avg_bits_err_output": 0.04649475208758201,
    "avg_bits_err_improve": 0.012216348340238811,
    "time": 14374.946533203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (/ (fabs x) (- s))) (+ s (fma s (exp (* -2.0 (/ (fabs x) s))) (* (exp (/ (fabs x) (- s))) (+ s s)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.16424616026081912,
    "avg_bits_err_output": 0.13894851287099644,
    "avg_bits_err_improve": 0.02529764738982268,
    "time": 21146.442138671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6632781777917213,
    "avg_bits_err_output": 0.6632781777917213,
    "avg_bits_err_improve": 0,
    "time": 23037.751953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (- (exp (/ -2.0 v)) (* u (exp (/ -2.0 v)))) u)) 1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.1462528737561116,
    "avg_bits_err_output": 0.14597998184198763,
    "avg_bits_err_improve": 0.0002728919141239683,
    "time": 22903.472900390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma sinTheta_O (/ sinTheta_O (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) (fma eta eta (* sinTheta_O (/ sinTheta_O (/ (sqrt (- 1.0 (* sinTheta_O sinTheta_O))) -2.0))))))))",
    "output_parens": 15,
    "avg_bits_err_input": 2.2895482299233305,
    "avg_bits_err_output": 2.2921873138502686,
    "avg_bits_err_improve": -0.002639083926938124,
    "time": 28224.73974609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (/ (* (/ 1.0 v) (* cosTheta_i (/ (/ 0.5 v) (exp (* sinTheta_O (/ sinTheta_i v)))))) (sinh (/ 1.0 v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.46097934380132244,
    "avg_bits_err_output": 0.35682462439167895,
    "avg_bits_err_improve": 0.10415471940964349,
    "time": 24313.439697265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (if (!= (exp (+ (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v) 0.6931)) 0.0) (if (!= (/ (exp (+ (* -2.0 (/ (- (fma sinTheta_i sinTheta_O 1.0) (* cosTheta_i cosTheta_O)) v)) 1.3862)) (* (exp (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v)) (+ (exp 0.6931) (exp 0.6931)))) 0.0) (/ (* (/ (exp (+ (* -2.0 (/ (- (fma sinTheta_i sinTheta_O 1.0) (* cosTheta_i cosTheta_O)) v)) 1.3862)) (* (exp (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v)) (+ (exp 0.6931) (exp 0.6931)))) (/ (exp (fma -2.0 (/ (- (fma sinTheta_i sinTheta_O 1.0) (* cosTheta_i cosTheta_O)) v) 1.3862)) (exp (+ (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v) 0.6931)))) (+ (/ (exp (fma -2.0 (/ (- (fma sinTheta_i sinTheta_O 1.0) (* cosTheta_i cosTheta_O)) v) 1.3862)) (* (+ (exp (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v)) (exp (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v))) (+ (exp 0.6931) (+ (exp 0.6931) (+ (exp 0.6931) (exp 0.6931)))))) (/ (+ (exp (fma -2.0 (/ (- (fma sinTheta_i sinTheta_O 1.0) (* cosTheta_i cosTheta_O)) v) 1.3862)) (* (exp (* -2.0 (/ (- (fma sinTheta_i sinTheta_O 1.0) (* cosTheta_i cosTheta_O)) v))) (+ (exp 1.3862) (exp 1.3862)))) (* (+ (exp (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v)) (exp (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v))) (+ (exp 0.6931) (+ (exp 0.6931) (+ (exp 0.6931) (exp 0.6931)))))))) (/ 1.0 (exp (- (+ (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v) 0.6931))))) (exp (+ (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v) 0.6931))) (/ 0.5 v))",
    "output_parens": 139,
    "avg_bits_err_input": 0.10302601290249022,
    "avg_bits_err_output": 0.1521798440281999,
    "avg_bits_err_improve": -0.049153831125709674,
    "time": 35592.91455078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (+ (* alpha alpha) -1.0) (log (* alpha alpha))) PI) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4681064950266719,
    "avg_bits_err_output": 0.4623838616495719,
    "avg_bits_err_improve": 0.005722633377099995,
    "time": 24309.9794921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) s)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3060568408883189,
    "avg_bits_err_output": 1.2106984222748027,
    "avg_bits_err_improve": 0.09535841861351613,
    "time": 29785.6328125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(/ (* s (if (!= (- -1.0 (fma (log (/ 1.0 (fma u -4.0 1.0))) 2.0 1.0)) 0.0) (/ (- 1.0 (pow (fma (log (/ 1.0 (fma u -4.0 1.0))) 2.0 1.0) 2.0)) (+ -2.0 (* (log (/ 1.0 (fma u -4.0 1.0))) -2.0))) (* (log (/ 1.0 (fma u -4.0 1.0))) 2.0))) 2.0)",
    "output_parens": 25,
    "avg_bits_err_input": 12.538021244643698,
    "avg_bits_err_output": 12.574718705638146,
    "avg_bits_err_improve": -0.03669746099444815,
    "time": 24754.05810546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (/ (/ (* (exp (* r (/ -0.3333333333333333 s))) 0.75) PI) (* r s)) 6.0))",
    "output_parens": 17,
    "avg_bits_err_input": 0.14880376278430135,
    "avg_bits_err_output": 0.16689388735264976,
    "avg_bits_err_improve": -0.01809012456834841,
    "time": 21775.8974609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (- normAngle (* u normAngle))) (sin normAngle)) n0_i) (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8751437394991366,
    "avg_bits_err_output": 0.7176943866570802,
    "avg_bits_err_improve": 0.1574493528420564,
    "time": 31438.9658203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (- (/ (* (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta) (exp (* cosTheta (- cosTheta)))) (sqrt PI)) (- -1.0 c)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.7016228866725667,
    "avg_bits_err_output": 0.5193345206246431,
    "avg_bits_err_improve": 0.18228836604792353,
    "time": 21954.2314453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (log1p (if (!= (+ (expm1 (sin (* 2.0 (* PI u2)))) 2.0) 0.0) (/ (expm1 (+ (sin (* 2.0 (* PI u2))) (sin (* 2.0 (* PI u2))))) (+ (expm1 (sin (* 2.0 (* PI u2)))) 2.0)) (expm1 (sin (* 2.0 (* PI u2)))))))",
    "output_parens": 31,
    "avg_bits_err_input": 13.571038820056883,
    "avg_bits_err_output": 13.58702966069543,
    "avg_bits_err_improve": -0.01599084063854761,
    "time": 26281.022216796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (- (- (/ (log (+ 1.0 (expm1 (* (+ 1.0 (log (- 1.0 u1))) (+ 1.0 (log (- 1.0 u1))))))) 4.0) (+ 0.25 (* (* (log (- 1.0 u1)) 0.5) -0.5))) (/ (* (+ (log (- 1.0 u1)) -1.0) (* (log (- 1.0 u1)) 0.5)) 2.0)))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 32,
    "avg_bits_err_input": 13.618980245072857,
    "avg_bits_err_output": 12.205250118522214,
    "avg_bits_err_improve": 1.413730126550643,
    "time": 29582.796142578125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(fma (log (- 1.0 u0)) (* alpha (- alpha)) (fma alpha alpha (* alpha (- alpha))))",
    "output_parens": 8,
    "avg_bits_err_input": 14.342785358530046,
    "avg_bits_err_output": 14.231495771713181,
    "avg_bits_err_improve": 0.11128958681686463,
    "time": 20869.57763671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (if (!= (log (- 1.0 u0)) 0.0) (/ 1.0 (/ 1.0 (log (- 1.0 u0)))) (log (- 1.0 u0))) (- (/ (/ sin2phi alphay) (- alphay)) (/ cos2phi (* alphax alphax))))",
    "output_parens": 17,
    "avg_bits_err_input": 12.85168414432041,
    "avg_bits_err_output": 12.850913579400864,
    "avg_bits_err_improve": 0.0007705649195468567,
    "time": 20083.99169921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (/ 1.0 (* l (- (* l PI) (- (* l PI) PI))))) (* PI l))) F) F))",
    "output_parens": 16,
    "avg_bits_err_input": 16.58024427079044,
    "avg_bits_err_output": 0.6753158924599798,
    "avg_bits_err_improve": 15.904928378330462,
    "time": 26037.529052734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.20717164837040855,
    "avg_bits_err_output": 0.14606544524450715,
    "avg_bits_err_improve": 0.0611062031259014,
    "time": 14212.480224609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 14.041987773608499,
    "avg_bits_err_output": 10.668516014394317,
    "avg_bits_err_improve": 3.3734717592141816,
    "time": 20678.041259765625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0))) (if (!= (exp (/ (* PI f) -4.0)) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (/ (* PI f) -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0)))))) (* PI -0.25))",
    "output_parens": 32,
    "avg_bits_err_input": 61.52293558095672,
    "avg_bits_err_output": 2.132102463574659,
    "avg_bits_err_improve": 59.39083311738206,
    "time": 53320.361083984375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* (* l l) (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.9698256132607,
    "avg_bits_err_output": 34.878204563279844,
    "avg_bits_err_improve": 8.091621049980859,
    "time": 29482.1923828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 4.155389877793806,
    "avg_bits_err_output": 4.155389877793806,
    "avg_bits_err_improve": 0,
    "time": 26489.32568359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (- (exp (log1p (sqrt (- (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))) -1.0)))) 1.0)) 0.5)))",
    "output_parens": 18,
    "avg_bits_err_input": 1.0022106035144864,
    "avg_bits_err_output": 1.0042106035144864,
    "avg_bits_err_improve": -0.0020000000000000018,
    "time": 12726.57666015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.401775337236556,
    "avg_bits_err_output": 10.401775337236556,
    "avg_bits_err_improve": 0,
    "time": 14268.4892578125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -4e+17) (pow (* (* 2.0 (* n U)) (- t (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* 2.0 (* l (/ l Om)))))) 0.5) (if (<= n 2.6e-82) (sqrt (- (* (pow (/ l Om) 2.0) (* (* n U*) (* 2.0 (* n U)))) (* 2.0 (+ (fma (* n (* l 2.0)) (* (/ l Om) U) 0.0) (* (- (* (pow (/ l Om) 2.0) (* n U)) t) (* n U)))))) (if (<= n 4e+205) (sqrt (* (* 2.0 n) (* U (- t (fma n (* (pow (/ l Om) 2.0) (- U U*)) (* 2.0 (* l (/ l Om)))))))) (sqrt (- (* (pow (/ l Om) 2.0) (* (* n U*) (* 2.0 (* n U)))) (* 2.0 (* (* n U) (- (* 2.0 (* l (/ l Om))) (- t (* n (* U (pow (/ l Om) 2.0))))))))))))",
    "output_parens": 77,
    "avg_bits_err_input": 34.784326591242504,
    "avg_bits_err_output": 31.191957526097806,
    "avg_bits_err_improve": 3.5923690651446982,
    "time": 35662.821533203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -4e-108) (/ (/ 2.0 (tan k)) (/ (* (pow (/ k t) 2.0) (* (sin k) (/ (pow t 3.0) l))) l)) (if (<= t 7.5e-107) (/ 2.0 (* (/ (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) (* l l)) (* (sin k) (tan k)))) (/ (/ 2.0 (tan k)) (/ (* (pow (/ k t) 2.0) (* (sin k) (/ (pow t 3.0) l))) l))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.17592741129102,
    "avg_bits_err_output": 34.251659607959226,
    "avg_bits_err_improve": 12.924267803331794,
    "time": 40083.16748046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ (tan k) l) (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ (pow t 3.0) l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.06283414055706,
    "avg_bits_err_output": 27.226067132184188,
    "avg_bits_err_improve": 4.83676700837287,
    "time": 25656.063232421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (* (cos th) (+ (* a2 a2) (* a1 a1))) (sqrt 2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5179001906453743,
    "avg_bits_err_output": 0.4705815812676698,
    "avg_bits_err_improve": 0.04731860937770449,
    "time": 23775.73388671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (exp (* (log (* 2.0 (* PI n))) (* k -0.5))) (sqrt (* 2.0 (* PI n)))) (sqrt k))",
    "output_parens": 12,
    "avg_bits_err_input": 0.5012922630313916,
    "avg_bits_err_output": 0.3662401985950528,
    "avg_bits_err_improve": 0.13505206443633883,
    "time": 18350.866943359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (- (* (expm1 (* l -2.0)) (exp l)))) (cos (/ K 2.0))) U)",
    "output_parens": 10,
    "avg_bits_err_input": 17.579718509402472,
    "avg_bits_err_output": 0.09975244375108175,
    "avg_bits_err_improve": 17.47996606565139,
    "time": 22839.0966796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (if (!= (cos (- (/ (* K (+ m n)) 2.0) M)) 0.0) (/ 1.0 (log1p (expm1 (/ 1.0 (cos (fma (+ m n) (/ K 2.0) (- M))))))) (cos (- (/ (* K (+ m n)) 2.0) M))) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 32,
    "avg_bits_err_input": 14.906355391942377,
    "avg_bits_err_output": 14.883724445798176,
    "avg_bits_err_improve": 0.022630946144200692,
    "time": 21563.705810546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.52152124062518,
    "avg_bits_err_output": 17.52152124062518,
    "avg_bits_err_improve": 0,
    "time": 15862.767822265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))) 5e+142) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l)))))",
    "output_parens": 28,
    "avg_bits_err_input": 14.68144798762942,
    "avg_bits_err_output": 10.207588132685089,
    "avg_bits_err_improve": 4.473859854944331,
    "time": 19111.617919921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* c0 (sqrt (/ A (* V l)))) -4e+294) (* c0 (sqrt (/ (/ A V) l))) (if (<= (* c0 (sqrt (/ A (* V l)))) -4e-175) (* c0 (sqrt (/ A (* V l)))) (if (<= (* c0 (sqrt (/ A (* V l)))) 0.0) (* c0 (sqrt (/ (/ A V) l))) (if (<= (* c0 (sqrt (/ A (* V l)))) 2e+261) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (/ (* A (/ 2.0 V)) (+ l l))))))))",
    "output_parens": 46,
    "avg_bits_err_input": 19.267624367244505,
    "avg_bits_err_output": 15.013002000445393,
    "avg_bits_err_improve": 4.254622366799111,
    "time": 16694.477294921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= d -1.05e+111) (/ (/ (* c0 (+ (* d (/ (* c0 (/ d (* D (* h w)))) D)) (sqrt (* (fma d (/ (* c0 (/ d (* D (* h w)))) D) M) (- (* d (/ (* c0 (/ d (* D (* h w)))) D)) M))))) w) 2.0) (if (<= d 1.42e-180) (* (/ c0 (* w 2.0)) (+ (/ (* d (/ (* c0 (/ d (* w D))) D)) h) (sqrt (* (fma d (/ (/ (* c0 (/ d D)) h) (* w D)) M) (- (/ (* d (/ (* c0 (/ d (* w D))) D)) h) M))))) (/ (/ (* c0 (+ (* d (/ (* c0 (/ d (* D (* h w)))) D)) (sqrt (* (fma d (/ (* c0 (/ d (* D (* h w)))) D) M) (- (* d (/ (* c0 (/ d (* D (* h w)))) D)) M))))) w) 2.0)))",
    "output_parens": 79,
    "avg_bits_err_input": 59.816706543722134,
    "avg_bits_err_output": 53.71535542179491,
    "avg_bits_err_improve": 6.101351121927223,
    "time": 45708.423583984375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d -3.5e+24) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (if (!= (* (/ h l) (/ (pow (* M (/ (/ D d) 2.0)) 2.0) -2.0)) 0.0) (/ 1.0 (/ (/ 2.0 (pow (* M (/ (/ D d) 2.0)) 2.0)) (/ h l))) (* 0.5 (* (pow (* M (/ (/ D d) 2.0)) 2.0) (/ h l)))))) (if (<= d 5e-148) (- (* (sqrt (/ d h)) (sqrt (/ d l))) (* (/ (* (sqrt (/ d h)) (pow (/ (/ (* D M) 2.0) d) 2.0)) (+ l l)) (* (sqrt (/ d l)) h))) (- (* (sqrt (/ d l)) (* (sqrt (/ d h)) (fma h (* 0.5 (/ (pow (/ (* M D) (* d 2.0)) 2.0) l)) -1.0))))))",
    "output_parens": 68,
    "avg_bits_err_input": 26.594621883612902,
    "avg_bits_err_output": 25.880140852627733,
    "avg_bits_err_improve": 0.7144810309851692,
    "time": 46215.024169921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (+ 0.5 (/ -0.5 (hypot 1.0 x))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 21,
    "avg_bits_err_input": 15.363753683668655,
    "avg_bits_err_output": 14.871297468638103,
    "avg_bits_err_improve": 0.49245621503055226,
    "time": 24589.285888671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9814481203125902,
    "avg_bits_err_output": 0.013021240625180291,
    "avg_bits_err_improve": 0.9684268796874099,
    "time": 4524.531982421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 (sqrt (fma v (* v -6.0) 2.0))) (- t (* v (* v t)))) PI) (* (/ (* v v) (- t (* v (* v t)))) (/ (/ 5.0 PI) (sqrt (fma v (* v -6.0) 2.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.4544076372987831,
    "avg_bits_err_output": 0.36950651404595686,
    "avg_bits_err_improve": 0.08490112325282623,
    "time": 27662.140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt 2.0) -4.0) (- (* 3.0 (* v v)) (- (* 3.0 (* v v)) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (fma v v -1.0)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.012719360937770435,
    "avg_bits_err_output": 0.015731203125901448,
    "avg_bits_err_improve": -0.003011842188131013,
    "time": 9272.930419921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5944290227989761,
    "avg_bits_err_output": 0.5944290227989761,
    "avg_bits_err_improve": 0,
    "time": 12177.421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (/ (pow k m) (- (* k (+ k 10.0)) -1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 1.9715034027665266,
    "avg_bits_err_output": 1.9839497593238276,
    "avg_bits_err_improve": -0.012446356557300975,
    "time": 12577.574462890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (- (exp (/ (- Vef (- Ec (+ mu EDonor))) KbT)) -1.0)) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.015878218412193564,
    "avg_bits_err_output": 0.015878218412193564,
    "avg_bits_err_improve": 0,
    "time": 10083.06298828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow (fma b b (* a a)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.18413233125324513,
    "avg_bits_err_output": 0.18341297031547465,
    "avg_bits_err_improve": 0.0007193609377704746,
    "time": 17801.470703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (fma b b (* a a)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.19084249726654834,
    "avg_bits_err_output": 0.18972689570359766,
    "avg_bits_err_improve": 0.00111560156295068,
    "time": 15215.977294921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (fma b b (* a a)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.19892162183657477,
    "avg_bits_err_output": 0.1977541405862142,
    "avg_bits_err_improve": 0.0011674812503605636,
    "time": 24263.458984375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (- (- -0.5 (* x (/ 0.5 (sqrt (fma 4.0 (* p p) (* x x))))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.28311631048599,
    "avg_bits_err_output": 13.482384113099544,
    "avg_bits_err_improve": -0.19926780261355326,
    "time": 18092.22607421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (if (!= (/ (expm1 (* 2.0 x)) (expm1 x)) 0.0) (/ 1.0 (/ 1.0 (/ (expm1 (* 2.0 x)) (expm1 x)))) (/ (expm1 (* 2.0 x)) (expm1 x))))",
    "output_parens": 17,
    "avg_bits_err_input": 41.871881448441904,
    "avg_bits_err_output": 0.050125,
    "avg_bits_err_improve": 41.8217564484419,
    "time": 8700.305908203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (!= (/ (- x (sin x)) (- x (tan x))) 0.0) (/ 1.0 (/ 1.0 (/ (- x (sin x)) (- x (tan x))))) (/ (- x (sin x)) (- x (tan x))))",
    "output_parens": 19,
    "avg_bits_err_input": 31.219757239076408,
    "avg_bits_err_output": 31.22347746669099,
    "avg_bits_err_improve": -0.003720227614582683,
    "time": 17036.122314453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 33.3946016815262,
    "avg_bits_err_output": 33.3946016815262,
    "avg_bits_err_improve": 0,
    "time": 14358.679443359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (if (!= (- (sqrt (- (* b_2 b_2) (* a c))) b_2) 0.0) (* a (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2))) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 21,
    "avg_bits_err_input": 33.82572493381178,
    "avg_bits_err_output": 21.415926067812528,
    "avg_bits_err_improve": 12.40979886599925,
    "time": 16210.23681640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(if (<= (/ (- 1.0 (cos x)) (* x x)) 0.0) (+ (- (/ 1.0 (* x x)) (+ 1.0 (/ (cos x) (* x x)))) 1.0) (/ (/ (- 1.0 (cos x)) x) x))",
    "output_parens": 18,
    "avg_bits_err_input": 31.760817682830556,
    "avg_bits_err_output": 28.847748405836423,
    "avg_bits_err_improve": 2.9130692769941327,
    "time": 16987.189453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.572839008559924,
    "avg_bits_err_output": 10.507909468777205,
    "avg_bits_err_improve": 22.064929539782717,
    "time": 29607.493896484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (if (!= (log1p N) 0.0) (/ 1.0 (/ 1.0 (log1p N))) (log1p N)) (log N))",
    "output_parens": 9,
    "avg_bits_err_input": 29.759153922008,
    "avg_bits_err_output": 29.78867205766488,
    "avg_bits_err_improve": -0.029518135656878997,
    "time": 14237.9130859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (- (/ -1.0 x) (+ -1.0 (/ x x))) (/ x (/ x (+ 1.0 x))))",
    "output_parens": 8,
    "avg_bits_err_input": 14.891865061230554,
    "avg_bits_err_output": 0.0772712406251803,
    "avg_bits_err_improve": 14.814593820605374,
    "time": 13358.808349609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (!= (cos (+ x eps)) 0.0) (/ (fma (cos (+ x eps)) (cos (+ x eps)) (* (cos (+ x eps)) (+ (- -1.0 (cos x)) 1.0))) (cos (+ x eps))) (- (cos (+ x eps)) (cos x)))",
    "output_parens": 22,
    "avg_bits_err_input": 39.967193054080916,
    "avg_bits_err_output": 40.0116332132288,
    "avg_bits_err_improve": -0.04444015914788224,
    "time": 25402.79931640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(- (if (!= (+ (cbrt x) 1.0) 0.0) (/ (- (* (cbrt (+ x 1.0)) (+ (cbrt x) 1.0)) (* (+ (cbrt x) 1.0) (+ (cbrt x) 1.0))) (+ (cbrt x) 1.0)) (- (expm1 (* 0.3333333333333333 (log1p x))) (cbrt x))) -1.0)",
    "output_parens": 24,
    "avg_bits_err_input": 30.00037727883092,
    "avg_bits_err_output": 29.590143569421315,
    "avg_bits_err_improve": 0.41023370940960646,
    "time": 11335.33056640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(if (!= (/ (- 1.0 (cos x)) (* (sin x) 2.0)) 0.0) (/ (+ (+ (fma (/ (cos x) (* (sin x) -2.0)) (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (* (* (- 1.0 (cos x)) (/ 0.5 (sin x))) (/ (* (cos x) 0.5) (sin x)))) (/ (* (/ (- 1.0 (cos x)) (sin x)) (/ (- 1.0 (cos x)) (sin x))) 4.0)) (/ (* (/ (- 1.0 (cos x)) (sin x)) (/ (- 1.0 (cos x)) (sin x))) 4.0)) (/ (- 1.0 (cos x)) (* (sin x) 2.0))) (/ (- 1.0 (cos x)) (sin x)))",
    "output_parens": 59,
    "avg_bits_err_input": 29.610853563576264,
    "avg_bits_err_output": 29.636798941044145,
    "avg_bits_err_improve": -0.02594537746788106,
    "time": 30261.05517578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* c (* a 4.0))))) (* a 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 33.953378994917635,
    "avg_bits_err_output": 33.96554197578415,
    "avg_bits_err_improve": -0.012162980866513351,
    "time": 20283.16357421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 33.98620127500834,
    "avg_bits_err_output": 33.98253561504416,
    "avg_bits_err_improve": 0.003665659964177337,
    "time": 25783.1435546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.454338070962,
    "avg_bits_err_output": 0.8754694701528261,
    "avg_bits_err_improve": 60.57886860080917,
    "time": 23004.365478515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (- (exp (log1p (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 1.0)) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00612660175783,
    "avg_bits_err_output": 44.237533950949995,
    "avg_bits_err_improve": 18.768592650807832,
    "time": 13989.304443359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.77575192202896,
    "avg_bits_err_output": 58.74422023549107,
    "avg_bits_err_improve": 0.03153168653788896,
    "time": 20568.83447265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (if (!= (- 1.0 (/ 1.0 (/ (- (tan x)) x))) 0.0) (/ (- 1.0 (/ (/ 1.0 (/ (- (tan x)) x)) (/ (- (tan x)) x))) (- 1.0 (/ -1.0 (/ (tan x) x)))) (+ 1.0 (/ 1.0 (/ (- (tan x)) x)))) x)",
    "output_parens": 27,
    "avg_bits_err_input": 59.955196340111364,
    "avg_bits_err_output": 59.94895889614597,
    "avg_bits_err_improve": 0.006237443965396494,
    "time": 28258.91015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (if (!= (/ eps (expm1 (* eps a))) 0.0) (/ 1.0 (/ 1.0 (/ eps (expm1 (* eps a))))) (/ eps (expm1 (* eps a))))) (expm1 (* eps b)))",
    "output_parens": 20,
    "avg_bits_err_input": 60.40087358858221,
    "avg_bits_err_output": 29.080074244820704,
    "avg_bits_err_improve": 31.320799343761504,
    "time": 25957.8212890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 42.19630522812508,
    "avg_bits_err_output": 0.39721936093777044,
    "avg_bits_err_improve": 41.79908586718731,
    "time": 5775.408447265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.820127470369236,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.819252470369236,
    "time": 2760.63427734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.66894960581914,
    "avg_bits_err_output": 0.018188651651654526,
    "avg_bits_err_improve": 29.650760954167485,
    "time": 8189.5732421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (if (!= (- (expm1 (- x))) 0.0) (+ (/ (* (expm1 (- x)) (expm1 (- x))) (* (expm1 (- x)) -2.0)) (+ (/ (* (expm1 (- x)) (expm1 x)) (* (expm1 (- x)) -2.0)) (* (expm1 (- x)) (/ (+ (expm1 (- x)) (expm1 x)) (* (expm1 (- x)) -2.0))))) (- 2.0 (+ (exp x) (exp (- x))))))",
    "output_parens": 41,
    "avg_bits_err_input": 30.426038065991328,
    "avg_bits_err_output": 29.444051349380395,
    "avg_bits_err_improve": 0.9819867166109333,
    "time": 26031.3671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ (- (/ 4.0 (/ (- 4.0 (* x -4.0)) x)) 2.0) x) (/ 1.0 (- x 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 10.026637176608501,
    "avg_bits_err_output": 10.0566642441494,
    "avg_bits_err_improve": -0.030027067540899566,
    "time": 24399.675048828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(+ (/ (tan (+ x eps)) 2.0) (- (+ (- (/ (tan (+ x eps)) 4.0) (tan x)) (/ (tan (+ x eps)) 8.0)) (- (/ (tan (+ x eps)) 8.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 37.16310756923978,
    "avg_bits_err_output": 37.26415815266241,
    "avg_bits_err_improve": -0.10105058342263362,
    "time": 20195.994140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.11088690925882,
    "avg_bits_err_output": 0.16719360937770425,
    "avg_bits_err_improve": 29.943693299881115,
    "time": 11705.617919921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (log1p (expm1 (sin (+ x eps)))) (sin x))",
    "output_parens": 6,
    "avg_bits_err_input": 37.574983091242494,
    "avg_bits_err_output": 37.66429225656467,
    "avg_bits_err_improve": -0.08930916532217736,
    "time": 19983.874755859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.36414428848915,
    "avg_bits_err_output": 19.22093644720189,
    "avg_bits_err_improve": 0.1432078412872606,
    "time": 18203.369384765625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (fma (atan (- N -1.0)) (if (!= (/ (atan (+ N 1.0)) (+ (atan (+ N 1.0)) (atan N))) 0.0) (/ 1.0 (/ 1.0 (/ (atan (+ N 1.0)) (+ (atan (+ N 1.0)) (atan N))))) (/ (atan (+ N 1.0)) (+ (atan (+ N 1.0)) (atan N)))) (/ (* (atan N) (atan N)) (- (- (atan N)) (atan (- N -1.0))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 47,
    "avg_bits_err_input": 14.865302624446377,
    "avg_bits_err_output": 14.869989483942412,
    "avg_bits_err_improve": -0.0046868594960347565,
    "time": 14408.33642578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.399025438664076,
    "avg_bits_err_output": 1.263901333936852,
    "avg_bits_err_improve": 28.135124104727225,
    "time": 24619.00537109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (* m (* (- 1.0 m) (- 1.0 m))) v) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07928328632589335,
    "avg_bits_err_output": 0.07571956445035248,
    "avg_bits_err_improve": 0.003563721875540868,
    "time": 16314.767578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b (- a)) (* a b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.35089717574628,
    "avg_bits_err_output": 0.3145334593805891,
    "avg_bits_err_improve": 16.036363716365692,
    "time": 11782.99560546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (if (!= (* PI (/ angle 180.0)) 0.0) (/ 1.0 (* (/ 1.0 (/ angle 180.0)) (/ 1.0 PI))) (* PI (/ angle 180.0))))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 20,
    "avg_bits_err_input": 20.189043207596974,
    "avg_bits_err_output": 20.209543777853362,
    "avg_bits_err_improve": -0.020500570256388073,
    "time": 39615.817626953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (* (- (pow b 2.0) (pow a 2.0)) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0)))))",
    "output_parens": 12,
    "avg_bits_err_input": 31.20189951601392,
    "avg_bits_err_output": 31.189489348711245,
    "avg_bits_err_improve": 0.012410167302675745,
    "time": 36961.29248046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* angle (/ PI 180.0)))) 2.0) (pow (* b (cos (* angle (/ PI 180.0)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 19.956372670681894,
    "avg_bits_err_output": 19.91992248725846,
    "avg_bits_err_improve": 0.0364501834234332,
    "time": 43681.3212890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (* (/ (- 1.0 m) v) m) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17507928248159613,
    "avg_bits_err_output": 0.23068324536899787,
    "avg_bits_err_improve": -0.05560396288740174,
    "time": 14518.527099609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (- (tan x)) 1.0) (+ -0.5 (+ (fma (tan x) (tan x) 1.0) 0.5)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.3109950042093892,
    "avg_bits_err_output": 0.3116737580481367,
    "avg_bits_err_improve": -0.0006787538387474923,
    "time": 18951.067626953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (/ e (fma e (cos v) 1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.1321887218755409,
    "avg_bits_err_output": 0.130136842188131,
    "avg_bits_err_improve": 0.0020518796874098855,
    "time": 18762.679931640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.180040983176863,
    "avg_bits_err_output": 17.173622824649676,
    "avg_bits_err_improve": 0.00641815852718608,
    "time": 34876.603759765625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (* -4.0 (/ c (+ b (sqrt (fma b b (* a (* c -4.0)))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.74936595178498,
    "avg_bits_err_output": 0.17218665469173675,
    "avg_bits_err_improve": 52.577179297093245,
    "time": 24989.09619140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.589142920712227,
    "avg_bits_err_output": 0.3367887234500302,
    "avg_bits_err_improve": 28.252354197262196,
    "time": 23063.880615234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* b b) (* -4.0 (* a c)))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 44.01897761971098,
    "avg_bits_err_output": 0.2376539484457027,
    "avg_bits_err_improve": 43.78132367126528,
    "time": 23352.898681640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.96554197578415,
    "avg_bits_err_output": 33.96554197578415,
    "avg_bits_err_improve": 0,
    "time": 19549.287841796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (* (cos (- lambda1 lambda2)) (cos phi2)) 0.0) (/ (* (cos phi2) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1))) (cos phi2)) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 26,
    "avg_bits_err_input": 0.8053622766329612,
    "avg_bits_err_output": 0.8055808723404361,
    "avg_bits_err_improve": -0.00021859570747484458,
    "time": 31667.3125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (- 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0)))) 0.0) (/ (if (!= (+ 1.0 (/ (/ 16.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))) 0.0) (/ (- 1.0 (/ (/ 256.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))) (+ 1.0 (/ (/ 16.0 (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))) (+ 1.0 (/ -16.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))) (- 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))) (+ 1.0 (/ -4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* -2.0 x)) 1.0))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 122,
    "avg_bits_err_input": 28.53750820755532,
    "avg_bits_err_output": 28.48983556078372,
    "avg_bits_err_improve": 0.04767264677159844,
    "time": 25515.1875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (* (exp (- x)) (* (expm1 (+ x x)) (* (exp (+ x x)) (exp (* x -2.0))))) (+ (exp x) (exp (- x))))",
    "output_parens": 16,
    "avg_bits_err_input": 58.14652874571676,
    "avg_bits_err_output": 1.3791748125036065,
    "avg_bits_err_improve": 56.76735393321315,
    "time": 19611.119873046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.07901046630942,
    "avg_bits_err_output": 0.04169812031259014,
    "avg_bits_err_improve": 58.03731234599683,
    "time": 8522.333740234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.009823120312590146,
    "avg_bits_err_output": 0.009823120312590146,
    "avg_bits_err_improve": 0,
    "time": 2386.274169921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.753875,
    "avg_bits_err_output": 31.753875,
    "avg_bits_err_improve": 0,
    "time": 5249.791748046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (- (/ x (- 1.0 x)) (log (+ 1.0 (expm1 (+ 1.0 (/ 1.0 (+ x -1.0)))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 58.76182474844535,
    "avg_bits_err_output": 50.67645844953191,
    "avg_bits_err_improve": 8.085366298913442,
    "time": 16982.8037109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.03475,
    "avg_bits_err_output": 0.0345,
    "avg_bits_err_improve": 0.0002500000000000002,
    "time": 2375.9609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12694812031259015,
    "avg_bits_err_output": 0.12694812031259015,
    "avg_bits_err_improve": 0,
    "time": 23511.239013671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (* (tan t) (/ (- eh) ew))))) (* (sin t) (* eh (sin (atan (* (tan t) (/ (- eh) ew))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.126,
    "avg_bits_err_output": 0.125625,
    "avg_bits_err_improve": 0.0003750000000000142,
    "time": 16125.322998046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.209571044582276,
    "avg_bits_err_output": 3.913578454997839,
    "avg_bits_err_improve": 35.295992589584436,
    "time": 34775.4853515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.451062335672834,
    "avg_bits_err_output": 0.011030990939180448,
    "avg_bits_err_improve": 14.440031344733653,
    "time": 6937.893798828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (if (!= (- (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))) (cos delta)) 0.0) (/ 1.0 (/ 1.0 (if (!= (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))) 0.0) (/ (- (* (cos delta) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (* (sin phi1) (* (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 128,
    "avg_bits_err_input": 0.15682207471488516,
    "avg_bits_err_output": 0.17760223923234505,
    "avg_bits_err_improve": -0.020780164517459898,
    "time": 34806.894775390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 52.787022170868994,
    "avg_bits_err_output": 0.18117725625468742,
    "avg_bits_err_improve": 52.60584491461431,
    "time": 27803.291748046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.74547855708578,
    "avg_bits_err_output": 0.3429864779620261,
    "avg_bits_err_improve": 28.402492079123753,
    "time": 27476.46337890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ (+ c c) (- (- (* b -2.0) (sqrt (fma -3.0 (* c a) (* b b)))) (sqrt (fma -3.0 (* c a) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 30,
    "avg_bits_err_input": 44.08677076960128,
    "avg_bits_err_output": 0.2433802640694408,
    "avg_bits_err_improve": 43.843390505531836,
    "time": 31270.4921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (* b -0.3333333333333333) (* (sqrt (+ (* b b) (* a (* c -3.0)))) 0.3333333333333333)) a)",
    "output_parens": 9,
    "avg_bits_err_input": 34.00292884734385,
    "avg_bits_err_output": 34.049292194984396,
    "avg_bits_err_improve": -0.046363347640543395,
    "time": 24064.215576171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (if (!= (sin (- lambda1 lambda2)) 0.0) (/ 1.0 (/ 1.0 (sin (- lambda1 lambda2)))) (sin (- lambda1 lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 23,
    "avg_bits_err_input": 13.311878993256501,
    "avg_bits_err_output": 13.327558481153009,
    "avg_bits_err_improve": -0.015679487896507638,
    "time": 36327.2001953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (+ (/ (- (+ x -1.0) (* x (/ x (+ x 1.0)))) (- 1.0 x)) (/ (/ x (+ x 1.0)) (- 1.0 x))) (/ 2.0 (+ x -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.710162012746203,
    "avg_bits_err_output": 0.44546961469513185,
    "avg_bits_err_improve": 29.26469239805107,
    "time": 22300.635498046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(- (+ (/ 1.0 (+ x -1.0)) (/ x (+ x (+ x 2.0)))) (- (/ x (+ x (+ x 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.009375,
    "avg_bits_err_output": 0.026718900368805136,
    "avg_bits_err_improve": -0.017343900368805135,
    "time": 4239.090087890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (- (/ (- (- -2.0 x) x) (+ x -1.0)) -2.0) (+ x (+ x 2.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 14.884995437822148,
    "avg_bits_err_output": 14.92272458621435,
    "avg_bits_err_improve": -0.037729148392202205,
    "time": 18960.10693359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 4e+165) (/ (sqrt (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) C) (- A)) (* (* (- (pow B 2.0) (* A (* 4.0 C))) F) -2.0))) (- (- (pow B 2.0) (* A (* 4.0 C))))) 0.0)",
    "output_parens": 45,
    "avg_bits_err_input": 52.0230816104221,
    "avg_bits_err_output": 50.8100443384284,
    "avg_bits_err_improve": 1.2130372719937057,
    "time": 38690.553955078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) PI))",
    "output_parens": 11,
    "avg_bits_err_input": 29.12373037427018,
    "avg_bits_err_output": 29.123605421787,
    "avg_bits_err_improve": 0.0001249524831798965,
    "time": 23758.62255859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (- (sqrt (fma (* (- (* C (* A 4.0)) (pow B 2.0)) -2.0) (* F (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) (* C (* F (* (- (* C (* A 4.0)) (pow B 2.0)) -2.0)))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output_parens": 27,
    "avg_bits_err_input": 51.50106194647084,
    "avg_bits_err_output": 51.34313114592531,
    "avg_bits_err_improve": 0.15793080054552888,
    "time": 37177.96142578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(cbrt (/ g (* 2.0 a)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.469744216549094,
    "avg_bits_err_output": 15.469744216549094,
    "avg_bits_err_improve": 0,
    "time": 28130.59326171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (/ (cbrt (* (/ 0.5 a) (- (sqrt (- (* g g) (* h h))) g))) 1.0) (cbrt (* (/ -0.5 a) (if (!= g 0.0) (+ (/ (* g (+ (sqrt (* (+ g h) (- g h))) (+ g g))) (+ g g)) (/ (* g (sqrt (* (+ g h) (- g h)))) (+ g g))) (+ g (sqrt (- (* g g) (* h h))))))))",
    "output_parens": 37,
    "avg_bits_err_input": 35.493450781234436,
    "avg_bits_err_output": 35.412711902569235,
    "avg_bits_err_improve": 0.08073887866520124,
    "time": 17498.293701171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (log (if (!= (exp (cos (fma PI 0.6666666666666666 (/ (acos (- (/ g h))) 3.0)))) 0.0) (/ 1.0 (/ 1.0 (exp (cos (fma PI 0.6666666666666666 (/ (acos (- (/ g h))) 3.0)))))) (exp (cos (fma PI 0.6666666666666666 (/ (acos (- (/ g h))) 3.0)))))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.9897246250072126,
    "avg_bits_err_output": 0.040021820705040005,
    "avg_bits_err_improve": 0.9497028043021726,
    "time": 12649.547607421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7338443609377705,
    "avg_bits_err_output": 0.7338443609377705,
    "avg_bits_err_improve": 0,
    "time": 2846.2158203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-296) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+307) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 10.946943699076499,
    "avg_bits_err_output": 2.119424527693833,
    "avg_bits_err_improve": 8.827519171382665,
    "time": 8600.21630859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(+ (* x y) (+ (log1p (exp x)) (* (- y) (+ x x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.45766730763229724,
    "avg_bits_err_output": 0.4378231203125902,
    "avg_bits_err_improve": 0.019844187319707052,
    "time": 9901.87939453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.999999995) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 10.0) (log1p (+ x (+ (hypot 1.0 x) -1.0))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 36,
    "avg_bits_err_input": 53.15309295628262,
    "avg_bits_err_output": 0.46036266371806983,
    "avg_bits_err_improve": 52.69273029256455,
    "time": 13425.458984375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.671864244806499,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.671864244806499,
    "time": 2695.68359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.01525,
    "avg_bits_err_output": 0.01525,
    "avg_bits_err_improve": 0,
    "time": 3080.746826171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1292.7841796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(/ (- 20.25 (* (- (+ 3.0 (/ 2.0 (* r r))) (* (* (- 3.0 (+ v v)) (/ (* w r) (- 1.0 v))) (* w (* r 0.125)))) 4.5)) -4.5)",
    "output_parens": 16,
    "avg_bits_err_input": 12.854716806468947,
    "avg_bits_err_output": 0.46355161473487927,
    "avg_bits_err_improve": 12.391165191734068,
    "time": 25764.5341796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ (* x1 (* x1 -6.0)) (+ (* (* x1 x1) (* (/ (- x1 (fma x1 (* x1 3.0) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) (* (* (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (/ (* x1 2.0) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0))))))) (+ x1 x1)))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5202355044794914,
    "avg_bits_err_output": 0.2530171728176239,
    "avg_bits_err_improve": 0.2672183316618675,
    "time": 72069.583984375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* -2.0 (* v (/ t1 (+ t1 (+ t1 (+ u u)))))) (+ t1 u))",
    "output_parens": 8,
    "avg_bits_err_input": 18.55169286973226,
    "avg_bits_err_output": 1.2665605447565922,
    "avg_bits_err_improve": 17.285132324975667,
    "time": 7361.493408203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* 0.12900613773279798 (* x x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.23429268476294263,
    "avg_bits_err_output": 0.1932312031259014,
    "avg_bits_err_improve": 0.041061481637041236,
    "time": 8823.51904296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00325,
    "avg_bits_err_output": 0.00325,
    "avg_bits_err_improve": 0,
    "time": 3117.49462890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI (- (/ 0.5 a) (/ 0.5 b))) (+ a b)) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.10479569368505,
    "avg_bits_err_output": 0.2871588359478664,
    "avg_bits_err_improve": 13.817636857737183,
    "time": 16528.205810546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (/ (exp (- (- x (* eps x)))) eps) 0.0) (+ (exp (- (* x eps) x)) (+ (- (/ (exp (- (* eps x) x)) (+ eps eps)) (/ (- (/ 2.0 (exp (fma eps x x))) (exp (- (* eps x) x))) (+ eps eps))) (- (- (exp (- (fma eps x x))))))) (+ (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* eps x)))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) 2.0)",
    "output_parens": 45,
    "avg_bits_err_input": 29.01462423991279,
    "avg_bits_err_output": 1.4097558429539305,
    "avg_bits_err_improve": 27.60486839695886,
    "time": 24364.952880859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (+ (- 2.0 (/ (/ 2.0 t) (+ 2.0 (/ 2.0 t)))) (- (/ (/ 2.0 t) (+ 2.0 (/ 2.0 t)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.02,
    "avg_bits_err_output": 0.020875,
    "avg_bits_err_improve": -0.0008750000000000008,
    "time": 6787.504638671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (- 4.0 (+ (/ (- 4.0 (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))) (* t (+ 1.0 (/ 1.0 t)))) (/ (/ 8.0 t) (+ (/ 2.0 t) 2.0))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (+ (- 2.0 (/ (/ 2.0 t) (+ (/ 2.0 t) 2.0))) (- (/ (/ 2.0 t) (+ (/ 2.0 t) 2.0)))))))",
    "output_parens": 35,
    "avg_bits_err_input": 0.0245,
    "avg_bits_err_output": 0.06860620312590145,
    "avg_bits_err_improve": -0.044106203125901446,
    "time": 22164.648681640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))) (+ 2.0 (* (/ t (+ t 1.0)) (/ (* t 4.0) (+ t 1.0)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.022375,
    "avg_bits_err_output": 0.078375,
    "avg_bits_err_improve": -0.056,
    "time": 10820.903076171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3789.766845703125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6493.674560546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2325.398681640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.807484438451687,
    "avg_bits_err_output": 0.24925,
    "avg_bits_err_improve": 7.558234438451687,
    "time": 31358.389892578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.429971816061293,
    "avg_bits_err_output": 7.429971816061293,
    "avg_bits_err_improve": 0,
    "time": 14609.599853515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (- (expm1 (log1p (pow x 2.0))) (pow (+ x eps) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 16.15167030008723,
    "avg_bits_err_output": 16.17513955864865,
    "avg_bits_err_improve": -0.023469258561419792,
    "time": 14256.248046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (log (+ 1.0 (expm1 (cos x)))) (if (!= (exp (* 10.0 (* x x))) 0.0) (/ 1.0 (/ 1.0 (exp (* 10.0 (* x x))))) (exp (* 10.0 (* x x)))))",
    "output_parens": 18,
    "avg_bits_err_input": 3.509632368915222,
    "avg_bits_err_output": 3.510720354518658,
    "avg_bits_err_improve": -0.001087985603436259,
    "time": 16469.1572265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (/ (- x 0.0) x) (+ x (/ 1.0 x))) 0.0) (/ x (fma x x 1.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 14.674814088112495,
    "avg_bits_err_output": 0.09725621061868284,
    "avg_bits_err_improve": 14.577557877493811,
    "time": 5289.088623046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.04050213454488,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.04050213454488,
    "time": 5326.924072265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.0585255882019,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.0580255882019,
    "time": 3948.4931640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(if (!= (* 1.7e+308 t) 0.0) (* t (/ (* 1.7e+308 (+ -1.0 t)) t)) (/ (/ (* -1.7e+308 (- 1.7e+308 (* 1.7e+308 t))) -1.7e+308) -1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.3025212406251803,
    "avg_bits_err_improve": 63.69747875937482,
    "time": 18583.162353515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (* t 4e-32))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325366599201,
    "avg_bits_err_output": 0.40269812031259017,
    "avg_bits_err_improve": 61.440555545679416,
    "time": 8464.044189453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 33.98620127500834,
    "avg_bits_err_output": 33.98253561504416,
    "avg_bits_err_improve": 0.003665659964177337,
    "time": 27775.35205078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output_parens": 9,
    "avg_bits_err_input": 33.96554197578415,
    "avg_bits_err_output": 33.96554197578415,
    "avg_bits_err_improve": 0,
    "time": 22694.54931640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2250.281005859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.34420391507517,
    "avg_bits_err_output": 0.01075,
    "avg_bits_err_improve": 40.33345391507517,
    "time": 3697.7080078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(+ (- (fma (+ (/ (+ x y) (fma y y (* x x))) 1.0) (- x y) 1.0) (- x y)) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 19.965563736638746,
    "avg_bits_err_output": 9.348989661800392,
    "avg_bits_err_improve": 10.616574074838354,
    "time": 14294.12255859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.687790786378916,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.687790786378916,
    "time": 9765.703369140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ (+ b c) d))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037,
    "avg_bits_err_output": 0.037,
    "avg_bits_err_improve": 0,
    "time": 4464.677490234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019969360937770436,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.009594360937770436,
    "time": 3578.298095703125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (* x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.014374999999999999,
    "time": 4356.704833984375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.00075,
    "time": 2028.081298828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40486109062806497,
    "avg_bits_err_output": 0.242875,
    "avg_bits_err_improve": 0.16198609062806496,
    "time": 6155.02978515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (/ (+ (fma (cos x) (cos x) (fma (cos x) (cos x) -1.0)) (+ (if (!= (+ -1.0 (* (cos x) (* (cos x) -2.0))) 0.0) (/ (- 1.0 (* (* (cos x) (+ (cos x) (cos x))) (* (cos x) (+ (cos x) (cos x))))) (+ -1.0 (* (cos x) (* (cos x) -2.0)))) (fma (cos x) (+ (cos x) (cos x)) -1.0)) -2.0)) 4.0) (- -1.0 (cos x))) (- 1.0 (cos x)))",
    "output_parens": 48,
    "avg_bits_err_input": 29.606384526306954,
    "avg_bits_err_output": 29.607921769441102,
    "avg_bits_err_improve": -0.0015372431341482695,
    "time": 16747.15087890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(- x (sqrt (if (!= eps 0.0) (* eps (/ (- (* x x) eps) eps)) (- (* x x) eps))))",
    "output_parens": 10,
    "avg_bits_err_input": 24.73343322037492,
    "avg_bits_err_output": 24.75851478654146,
    "avg_bits_err_improve": -0.025081566166541336,
    "time": 11804.65283203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (if (!= (sin x) 0.0) (/ (if (!= (* (sin x) (sin x)) 0.0) (if (!= (* 2.0 (/ x (/ 2.0 (sin x)))) 0.0) (/ (* (* 2.0 (/ x (/ 2.0 (sin x)))) (fma x (/ 4.0 (/ 4.0 (sin x))) (/ -8.0 (/ (/ 8.0 (sin x)) (sin x))))) (* 2.0 (/ x (/ 2.0 (sin x))))) (fma x (/ 4.0 (/ 4.0 (sin x))) (/ -8.0 (/ (/ 8.0 (sin x)) (sin x))))) (* (sin x) (- x (sin x)))) (sin x)) (- x (sin x))) (tan x))",
    "output_parens": 52,
    "avg_bits_err_input": 30.39446080742367,
    "avg_bits_err_output": 30.300554472152204,
    "avg_bits_err_improve": 0.09390633527146619,
    "time": 33580.330078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007698120312590144,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.0071981203125901436,
    "time": 2833.451171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (/ (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -200.0 (/ i n))) (* i (/ 2.0 i))))",
    "output_parens": 25,
    "avg_bits_err_input": 48.210164515605314,
    "avg_bits_err_output": 14.068704007861172,
    "avg_bits_err_improve": 34.14146050774414,
    "time": 25989.966552734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (- INFINITY)) (+ (* b (/ d (fma d d (* c c)))) (* c (/ a (fma d d (* c c))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 5e+82) (/ (fma c a (* b d)) (+ (* c c) (* d d))) (+ (* b (/ d (fma d d (* c c)))) (* a (/ c (fma d d (* c c)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 25.946804357537932,
    "avg_bits_err_output": 22.232023650433824,
    "avg_bits_err_improve": 3.714780707104108,
    "time": 13556.84814453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 4e+278) (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 25.666643687069257,
    "avg_bits_err_output": 22.5628985407046,
    "avg_bits_err_improve": 3.1037451463646555,
    "time": 16255.958740234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (- ux (* ux maxCos)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.035875,
    "avg_bits_err_output": 0.02285396288740179,
    "avg_bits_err_improve": 0.013021037112598208,
    "time": 10237.09912109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.634844888315962,
    "avg_bits_err_output": 12.434069667949636,
    "avg_bits_err_improve": 1.2007752203663262,
    "time": 28589.640380859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- (if (!= (* ux (- ux)) 0.0) (/ (* (- (* ux ux) (+ ux ux)) (* ux ux)) (* ux (- ux))) (- ux (- (* ux ux) ux))) (* (* ux maxCos) (+ (* ux maxCos) (- 1.0 ux)))) (* maxCos (- (* ux ux) ux)))))",
    "output_parens": 30,
    "avg_bits_err_input": 13.671874358429502,
    "avg_bits_err_output": 0.33704633805482953,
    "avg_bits_err_improve": 13.334828020374673,
    "time": 33430.040771484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (if (!= (* uy PI) 0.0) (/ (+ (* PI (* uy (* uy PI))) (* PI (* uy (* uy PI)))) (* uy PI)) (* uy (* 2.0 PI)))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (fma (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) yi) (* (- 1.0 ux) (* (* ux maxCos) zi))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.3319351082645813,
    "avg_bits_err_output": 0.3278133422975098,
    "avg_bits_err_improve": 0.004121765967071478,
    "time": 45422.107666015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.20653324229295936,
    "avg_bits_err_output": 0.20653324229295936,
    "avg_bits_err_improve": 0,
    "time": 22365.006591796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (/ (/ 1.0 (/ -1.0 (+ u1 -1.0))) (* (- 1.0 u1) (/ (- 1.0 u1) u1))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.5450989847503924,
    "avg_bits_err_output": 0.563684312418882,
    "avg_bits_err_improve": -0.018585327668489526,
    "time": 21110.40966796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (if (!= (* u2 -6.28318530718) 0.0) (* (/ u2 0.05066059182116222) 0.3183098861837697) (* 6.28318530718 u2))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.3222715960245229,
    "avg_bits_err_output": 0.3400361301959607,
    "avg_bits_err_improve": -0.017764534171437807,
    "time": 22550.150390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 0.3322475408065705,
    "avg_bits_err_output": 0.3322475408065705,
    "avg_bits_err_improve": 0,
    "time": 59608.9423828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.05262998408642589,
    "avg_bits_err_output": 0.05262998408642589,
    "avg_bits_err_improve": 0,
    "time": 6696.406982421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(- (+ (/ (exp (/ (fabs x) (- s))) (* (fma s (exp (/ (fabs x) (- s))) s) (+ (exp (/ (fabs x) (- s))) 1.0))) -1.0) -1.0)",
    "output_parens": 18,
    "avg_bits_err_input": 0.1491181812836496,
    "avg_bits_err_output": 0.22115206389141417,
    "avg_bits_err_improve": -0.07203388260776458,
    "time": 21084.184814453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6652467142518929,
    "avg_bits_err_output": 0.667276720285483,
    "avg_bits_err_improve": -0.0020300060335901593,
    "time": 22711.496826171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (if (!= (exp (/ -2.0 v)) 0.0) (/ 1.0 (/ 1.0 (exp (/ -2.0 v)))) (exp (/ -2.0 v))) u)) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18097698960340125,
    "avg_bits_err_output": 0.19587308321178407,
    "avg_bits_err_improve": -0.014896093608382815,
    "time": 21907.04150390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (* sinTheta_O -2.0)) (* (sqrt (- 1.0 (* sinTheta_O sinTheta_O))) 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 2.7722461908401734,
    "avg_bits_err_output": 2.769203200581812,
    "avg_bits_err_improve": 0.0030429902583613,
    "time": 31770.67578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* cosTheta_O (* cosTheta_i (/ (* (/ 1.0 v) (/ 0.5 v)) (exp (* sinTheta_i (/ sinTheta_O v)))))) (sinh (/ 1.0 v)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4536425977964531,
    "avg_bits_err_output": 0.3668779337095207,
    "avg_bits_err_improve": 0.0867646640869324,
    "time": 27071.53564453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (- (* cosTheta_i cosTheta_O) (+ 1.0 (* sinTheta_i sinTheta_O))) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.0918517741805179,
    "avg_bits_err_output": 0.08107137488191711,
    "avg_bits_err_improve": 0.010780399298600793,
    "time": 27230.548095703125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (- 1.0 (* alpha alpha)) (* (- (log (* alpha alpha))) PI)) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4546062307488622,
    "avg_bits_err_output": 0.4540391412418788,
    "avg_bits_err_improve": 0.0005670895069834203,
    "time": 21144.336669921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- (fma u -1.3333333333333333 0.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 14,
    "avg_bits_err_input": 1.3239806661406583,
    "avg_bits_err_output": 0.43385244532557155,
    "avg_bits_err_improve": 0.8901282208150868,
    "time": 27674.61328125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(expm1 (log1p (* (log (/ 1.0 (+ 1.0 (* u -4.0)))) s)))",
    "output_parens": 7,
    "avg_bits_err_input": 12.377611995813469,
    "avg_bits_err_output": 12.379432088569603,
    "avg_bits_err_improve": -0.0018200927561338176,
    "time": 25714.9931640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ 0.125 (* PI s))) (* 0.75 (* (exp (/ (/ r -6.0) s)) (/ (exp (/ r (* -6.0 s))) (* s (* PI 6.0)))))) r)",
    "output_parens": 19,
    "avg_bits_err_input": 0.12956170487676072,
    "avg_bits_err_output": 0.12703288703046767,
    "avg_bits_err_improve": 0.002528817846293052,
    "time": 24925.50341796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (sin (* normAngle u)) (/ n1_i (sin normAngle)) (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.926627020375334,
    "avg_bits_err_output": 0.8372163461615922,
    "avg_bits_err_improve": 0.08941067421374171,
    "time": 26702.5078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (- c -1.0) (/ (/ (log1p (expm1 (sqrt (- 1.0 (+ cosTheta cosTheta))))) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6796139703323612,
    "avg_bits_err_output": 0.49106327803295136,
    "avg_bits_err_improve": 0.1885506922994098,
    "time": 19149.61181640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(if (!= (+ (sin (* PI (+ u2 u2))) (* (sin (* PI (+ u2 u2))) (- 1.0 (sqrt (- (log (- 1.0 u1))))))) 0.0) (/ (fma (sin (* PI (+ u2 u2))) (sin (* PI (+ u2 u2))) (* (- 1.0 (sqrt (- (log (- 1.0 u1))))) (* (sin (* PI (+ u2 u2))) (* (sin (* PI (+ u2 u2))) (+ (sqrt (- (log (- 1.0 u1)))) -1.0))))) (+ (sin (* PI (+ u2 u2))) (* (sin (* PI (+ u2 u2))) (- 1.0 (sqrt (- (log (- 1.0 u1)))))))) (- (sin (* PI (+ u2 u2))) (* (sin (* PI (+ u2 u2))) (- 1.0 (sqrt (- (log (- 1.0 u1))))))))",
    "output_parens": 68,
    "avg_bits_err_input": 13.595958155964459,
    "avg_bits_err_output": 13.400118613185839,
    "avg_bits_err_improve": 0.1958395427786197,
    "time": 31161.31005859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(- (cos (* 2.0 (* PI u2))) (log (+ 1.0 (if (!= (expm1 (* (cos (* 2.0 (* PI u2))) (- 1.0 (sqrt (- (log (- 1.0 u1))))))) 0.0) (/ (* (expm1 (* (cos (* 2.0 (* PI u2))) (- 1.0 (sqrt (- (log (- 1.0 u1))))))) (expm1 (* (cos (* 2.0 (* PI u2))) (- 1.0 (sqrt (- (log (- 1.0 u1)))))))) (expm1 (* (cos (* 2.0 (* PI u2))) (- 1.0 (sqrt (- (log (- 1.0 u1)))))))) (expm1 (* (cos (* 2.0 (* PI u2))) (- 1.0 (sqrt (- (log (- 1.0 u1)))))))))))",
    "output_parens": 60,
    "avg_bits_err_input": 13.650115896474576,
    "avg_bits_err_output": 13.2310542008433,
    "avg_bits_err_improve": 0.41906169563127627,
    "time": 25145.18798828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(if (!= (* alpha (* alpha (log (- 1.0 u0)))) 0.0) (/ 1.0 (/ (/ (/ 1.0 alpha) (log (- 1.0 u0))) (- alpha))) (fma alpha (* alpha (exp (log1p (- (log (- 1.0 u0)))))) (- (* alpha alpha))))",
    "output_parens": 22,
    "avg_bits_err_input": 14.194763032863586,
    "avg_bits_err_output": 13.711232364200654,
    "avg_bits_err_improve": 0.48353066866293126,
    "time": 26419.248779296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (/ -1.0 (+ (/ cos2phi (* alphax alphax)) (+ (/ cos2phi (* alphax alphax)) (/ (+ sin2phi sin2phi) (* alphay alphay))))) (+ (log (- 1.0 u0)) (log (- 1.0 u0))))",
    "output_parens": 16,
    "avg_bits_err_input": 12.722424199082445,
    "avg_bits_err_output": 12.750824129156262,
    "avg_bits_err_improve": -0.02839993007381736,
    "time": 19083.99755859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (* (tan (* PI l)) (/ 1.0 F)) F))",
    "output_parens": 7,
    "avg_bits_err_input": 16.24167241562882,
    "avg_bits_err_output": 12.160094509075385,
    "avg_bits_err_improve": 4.081577906553434,
    "time": 27414.169189453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.20531372187554084,
    "avg_bits_err_output": 0.1505,
    "avg_bits_err_improve": 0.054813721875540844,
    "time": 13665.653564453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (expm1 (log1p (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.279575600895308,
    "avg_bits_err_output": 10.473706121009585,
    "avg_bits_err_improve": 2.8058694798857235,
    "time": 20038.592041015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (* -0.5 f))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) (* PI -0.25))",
    "output_parens": 31,
    "avg_bits_err_input": 61.35206920019215,
    "avg_bits_err_output": 2.0413620574161375,
    "avg_bits_err_improve": 59.31070714277601,
    "time": 60224.113525390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -2.4e-161) (/ (* (sqrt 2.0) t) (sqrt (if (!= (* l (- l)) 0.0) (+ (+ (* l (- l)) (* (/ (+ x 1.0) (+ x -1.0)) (* l l))) (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t)))) (fma (/ (+ x 1.0) (+ x -1.0)) (fma l l (* 2.0 (* t t))) (* l (- l)))))) (if (<= t 2.7e-158) (/ (* (sqrt 2.0) t) (exp (* 0.5 (log (if (!= (* l (- l)) 0.0) (fma l (- l) (/ (* (+ x 1.0) (fma 2.0 (* t t) (* l l))) (+ x -1.0))) (fma l (- l) (/ (* (+ x 1.0) (fma 2.0 (* t t) (* l l))) (+ x -1.0)))))))) (/ (* (sqrt 2.0) t) (sqrt (if (!= (* l (- l)) 0.0) (+ (+ (* l (- l)) (* (/ (+ x 1.0) (+ x -1.0)) (* l l))) (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t)))) (fma (/ (+ x 1.0) (+ x -1.0)) (fma l l (* 2.0 (* t t))) (* l (- l))))))))",
    "output_parens": 96,
    "avg_bits_err_input": 42.8761941606873,
    "avg_bits_err_output": 36.41783927211262,
    "avg_bits_err_improve": 6.458354888574675,
    "time": 31242.127197265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.9029741489722687,
    "avg_bits_err_output": 3.9029741489722687,
    "avg_bits_err_improve": 0,
    "time": 27317.64013671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 1.0585228084366862,
    "avg_bits_err_output": 1.0585228084366862,
    "avg_bits_err_improve": 0,
    "time": 10017.197509765625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (- (+ 1.0 (pow (/ Om Omc) 2.0)) 1.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.236104477331978,
    "avg_bits_err_output": 10.237872863317612,
    "avg_bits_err_improve": -0.0017683859856347794,
    "time": 22507.12646484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -1e-20) (sqrt (* (* U (* 2.0 n)) (- (+ t (* (/ l Om) (* l -2.0))) (* (pow (/ l Om) 2.0) (* n (- U U*)))))) (if (<= U 5e-102) (sqrt (* (* 2.0 n) (* U (- t (+ (* n (* (pow (/ l Om) 2.0) (- U U*))) (* 2.0 (* l (/ l Om)))))))) (sqrt (* (* U (* 2.0 n)) (- (+ t (* (/ l Om) (* l -2.0))) (* (pow (/ l Om) 2.0) (* n (- U U*))))))))",
    "output_parens": 46,
    "avg_bits_err_input": 34.36355138032334,
    "avg_bits_err_output": 29.83934432030776,
    "avg_bits_err_improve": 4.524207060015577,
    "time": 40238.05712890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -2e-108) (/ 2.0 (* (pow (/ k t) 2.0) (/ (* (sin k) (* (tan k) (/ (pow t 3.0) l))) l))) (if (<= t 2.45e-67) (/ 2.0 (/ (/ (* (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) (* (sin k) (tan k))) l) l)) (/ 2.0 (* (/ (pow (/ k t) 2.0) l) (/ (* (pow t 3.0) (* (sin k) (tan k))) l)))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.61774772707072,
    "avg_bits_err_output": 35.58684371989171,
    "avg_bits_err_improve": 12.03090400717901,
    "time": 41907.311767578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ 2.0 (* (+ 2.0 (pow (/ k t) 2.0)) (* (pow t 3.0) (/ (tan k) l)))) (/ (sin k) l))",
    "output_parens": 12,
    "avg_bits_err_input": 32.54339100056812,
    "avg_bits_err_output": 26.54224851262971,
    "avg_bits_err_improve": 6.001142487938413,
    "time": 26179.271728515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (/ (cos th) (sqrt 2.0)) (+ (* a1 a1) (* a2 a2)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5459639125209151,
    "avg_bits_err_output": 0.547152634396456,
    "avg_bits_err_improve": -0.0011887218755408657,
    "time": 23115.96923828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (pow (* PI (* n 2.0)) (* k -0.5)) (sqrt (* PI (* n 2.0)))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5113231719727442,
    "avg_bits_err_output": 0.40051917344137633,
    "avg_bits_err_improve": 0.11080399853136791,
    "time": 20812.181396484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output_parens": 9,
    "avg_bits_err_input": 17.876537267042494,
    "avg_bits_err_output": 17.876537267042494,
    "avg_bits_err_improve": 0,
    "time": 27473.539306640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 16,
    "avg_bits_err_input": 15.541636401465324,
    "avg_bits_err_output": 15.541636401465324,
    "avg_bits_err_improve": 0,
    "time": 6182.431396484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.158271240625183,
    "avg_bits_err_output": 18.158271240625183,
    "avg_bits_err_improve": 0,
    "time": 22157.04443359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) -2e-37) (* w0 (sqrt (- 1.0 (/ (* (pow (+ (/ (* D (+ M (+ M M))) (* d 8.0)) (/ (* D M) (* d 8.0))) 2.0) h) l)))) (if (<= (/ h l) 1e-77) (* w0 (sqrt (- 1.0 (* (pow (* (/ (/ D d) 2.0) M) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))))",
    "output_parens": 39,
    "avg_bits_err_input": 14.204097075735564,
    "avg_bits_err_output": 10.66634849462957,
    "avg_bits_err_improve": 3.537748581105994,
    "time": 18494.950439453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -4e+234) (* c0 (sqrt (+ (if (!= (/ (/ (/ A V) l) -4.0) 0.0) (/ 1.0 (/ 4.0 (/ (/ A V) l))) (/ A (* l (* V 4.0)))) (/ (+ (/ A l) (/ A (+ l l))) (+ V V))))) (if (<= (* V l) -2e-95) (* c0 (sqrt (* (/ 2.0 (* V (+ l l))) A))) (if (<= (* V l) 0.0) (* c0 (sqrt (* (/ A l) (/ 1.0 V)))) (if (<= (* V l) 4e+40) (* c0 (sqrt (* (- A) (/ (- (/ 2.0 V)) (+ l l))))) (* c0 (sqrt (* (/ A V) (/ 1.0 l))))))))",
    "output_parens": 57,
    "avg_bits_err_input": 18.97941775789509,
    "avg_bits_err_output": 15.575869349516918,
    "avg_bits_err_improve": 3.403548408378171,
    "time": 20603.142822265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -1.45e+200) (* (/ c0 (* 2.0 w)) (+ (* (/ d D) (* d (/ (/ c0 (* D w)) h))) (sqrt (* (fma d (* d (/ (/ (/ c0 (* D w)) h) D)) M) (- (* (/ d D) (* d (/ (/ c0 (* D w)) h))) M))))) (if (<= w 53000.0) (* (/ c0 (* 2.0 w)) (+ (* d (* (/ (/ d (* D h)) w) (/ c0 D))) (sqrt (* (fma d (* (/ (/ d (* D h)) w) (/ c0 D)) M) (- (* d (* (/ (/ d (* D h)) w) (/ c0 D))) M))))) (if (<= w 2e+197) (* (/ (/ c0 2.0) w) (fma d (/ (* (/ d D) (/ c0 h)) (* D w)) (sqrt (* (fma d (/ (* (/ d D) (/ c0 h)) (* D w)) M) (fma d (/ (* (/ d D) (/ c0 h)) (* D w)) (- M)))))) (* (/ c0 (* 2.0 w)) (fma d (* c0 (/ d (* D (* D (* w h))))) (sqrt (* (- (* c0 (* d (/ d (* D (* D (* w h)))))) M) (fma d (* c0 (/ d (* D (* D (* w h))))) M))))))))",
    "output_parens": 104,
    "avg_bits_err_input": 59.5038495139375,
    "avg_bits_err_output": 54.539679831961685,
    "avg_bits_err_improve": 4.964169681975818,
    "time": 52062.39990234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* h (/ (pow (if (!= (/ (* M D) (+ d d)) 0.0) (/ 1.0 (/ 1.0 (/ (* M D) (+ d d)))) (/ (* M D) (+ d d))) 2.0) (+ l l)))))",
    "output_parens": 24,
    "avg_bits_err_input": 26.64818285572742,
    "avg_bits_err_output": 25.724142985317215,
    "avg_bits_err_improve": 0.9240398704102049,
    "time": 37457.757080078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (/ (+ (/ -0.25 (* (hypot 1.0 x) (hypot 1.0 x))) (* (+ 1.0 (/ -0.5 (hypot 1.0 x))) (+ 1.0 (/ -0.5 (hypot 1.0 x))))) 2.0) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 31,
    "avg_bits_err_input": 15.291291794951803,
    "avg_bits_err_output": 14.806009674497057,
    "avg_bits_err_improve": 0.4852821204547464,
    "time": 19853.14111328125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9862383613244511,
    "avg_bits_err_output": 0.010323120312590145,
    "avg_bits_err_improve": 0.9759152410118609,
    "time": 4028.530029296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(- (/ (/ (/ 1.0 PI) (sqrt (+ 2.0 (* (* v v) -6.0)))) (* t (- 1.0 (* v v)))) (* (* v v) (/ (/ 5.0 (* PI (* t (- 1.0 (* v v))))) (sqrt (+ 2.0 (* (* v v) -6.0))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.4528530939519554,
    "avg_bits_err_output": 0.13067700392878273,
    "avg_bits_err_improve": 0.32217609002317266,
    "time": 19339.52978515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (- 1.0 (* 3.0 (* v v)))) (fma (* v v) (/ (sqrt 2.0) 4.0) (* (/ (sqrt 2.0) -4.0) (+ -1.0 (* v (+ v v))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.011292481250360578,
    "avg_bits_err_output": 0.012615601562950723,
    "avg_bits_err_improve": -0.0013231203125901453,
    "time": 7587.578857421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.524612494388833,
    "avg_bits_err_output": 0.524612494388833,
    "avg_bits_err_improve": 0,
    "time": 10218.52392578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (/ (+ (/ (+ (pow k m) (/ (pow k m) 2.0)) (fma k (+ k 10.0) 1.0)) (/ (pow k m) (+ 2.0 (* (+ k 10.0) (+ k k))))) 2.0))",
    "output_parens": 16,
    "avg_bits_err_input": 2.17998571354413,
    "avg_bits_err_output": 2.1491810012324795,
    "avg_bits_err_improve": 0.030804712311650384,
    "time": 16979.79248046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ mu (+ Vef EDonor)) Ec) KbT)))) (/ NaChar (+ 1.0 (- (exp (log1p (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))) 1.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.018873997935444798,
    "avg_bits_err_output": 0.018873997935444798,
    "avg_bits_err_improve": 0,
    "time": 10235.580322265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (if (!= (* (* b b) 4.0) 0.0) (* (fma b (* b 4.0) (pow (fma b b (* a a)) 2.0)) (/ b (/ (* b b) b))) (fma b (* b 4.0) (pow (fma a a (* b b)) 2.0))) 1.0)",
    "output_parens": 19,
    "avg_bits_err_input": 0.17492481250360573,
    "avg_bits_err_output": 0.23417754162740773,
    "avg_bits_err_improve": -0.059252729123802,
    "time": 14838.03759765625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (if (!= (* 4.0 (fma b (* (fma 3.0 a -1.0) (- b)) (* a (fma a a a)))) 0.0) (* (+ (pow (fma b b (* a a)) 2.0) (+ (pow (fma b b (* a a)) 2.0) (* (fma a (fma a a a) (* (- 1.0 (* a 3.0)) (* b b))) 8.0))) 0.5) (fma 4.0 (fma b (* (fma 3.0 a -1.0) (- b)) (* a (fma a a a))) (pow (fma a a (* b b)) 2.0))) 1.0)",
    "output_parens": 36,
    "avg_bits_err_input": 0.1863240526179966,
    "avg_bits_err_output": 0.19758385808020995,
    "avg_bits_err_improve": -0.011259805462213363,
    "time": 20937.024658203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.1862157017554753,
    "avg_bits_err_output": 0.1862157017554753,
    "avg_bits_err_improve": 0,
    "time": 19167.90771484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (if (!= (- 1.0 (/ x (sqrt (fma x x (* 4.0 (* p p)))))) 0.0) (/ (- 1.0 (- (/ x (fma 4.0 (* p p) (* x x))) (- (/ x (fma 4.0 (* p p) (* x x))) (/ (* x x) (fma 4.0 (* p p) (* x x)))))) (- 1.0 (/ x (sqrt (fma x x (* 4.0 (* p p))))))) (+ 1.0 (/ x (sqrt (fma x x (* 4.0 (* p p)))))))))",
    "output_parens": 39,
    "avg_bits_err_input": 13.55708596115098,
    "avg_bits_err_output": 13.987100707805181,
    "avg_bits_err_improve": -0.4300147466542015,
    "time": 14913.60888671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (* 2.0 x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.036489005031974,
    "avg_bits_err_output": 0.049,
    "avg_bits_err_improve": 40.987489005031975,
    "time": 5388.875732421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(- (/ (sin x) (- (tan x) x)) (if (!= (/ x (+ (- (tan x) x) (- (tan x) x))) 0.0) (/ (+ (* (/ x (+ (- (tan x) x) (- (tan x) x))) (/ x (+ (- (tan x) x) (- (tan x) x)))) (* (/ x (+ (- (tan x) x) (- (tan x) x))) (/ x (+ (- (tan x) x) (- (tan x) x))))) (/ x (+ (- (tan x) x) (- (tan x) x)))) (/ x (- (tan x) x))))",
    "output_parens": 50,
    "avg_bits_err_input": 31.3597885931389,
    "avg_bits_err_output": 31.33444825429926,
    "avg_bits_err_improve": 0.025340338839640708,
    "time": 26544.40283203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 33.896260775808834,
    "avg_bits_err_output": 33.896260775808834,
    "avg_bits_err_improve": 0,
    "time": 14402.5087890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (fma b_2 b_2 (* a (- c))))) a)",
    "output_parens": 7,
    "avg_bits_err_input": 34.34583601879705,
    "avg_bits_err_output": 34.343482756551005,
    "avg_bits_err_improve": 0.0023532622460464836,
    "time": 17649.618408203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (- 1.0 (cos x)) x) x)",
    "output_parens": 4,
    "avg_bits_err_input": 32.197380032654614,
    "avg_bits_err_output": 31.397379051118996,
    "avg_bits_err_improve": 0.8000009815356179,
    "time": 18268.450439453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (<= x 1.0) (- (expm1 (/ (log x) n))) (- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.265012022629655,
    "avg_bits_err_output": 11.564436455302763,
    "avg_bits_err_improve": 20.700575567326894,
    "time": 33292.783935546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (- (if (!= (- 1.0 (log1p N)) 0.0) (/ (- 1.0 (* (log1p N) (log1p N))) (- 1.0 (log1p N))) (+ (log1p N) 1.0)) (log N)) 1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 29.181923357574714,
    "avg_bits_err_output": 29.21031374022812,
    "avg_bits_err_improve": -0.028390382653405766,
    "time": 11345.28857421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (* (/ 1.0 x) (+ (/ x (+ 1.0 x)) 0.0)) (/ 1.0 x))",
    "output_parens": 7,
    "avg_bits_err_input": 14.227152949135515,
    "avg_bits_err_output": 14.230654120898105,
    "avg_bits_err_improve": -0.0035011717625899053,
    "time": 14274.33837890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (cos (+ x eps)) (if (!= (cos x) 0.0) (/ 1.0 (/ 1.0 (cos x))) (cos x)))",
    "output_parens": 10,
    "avg_bits_err_input": 39.48883795789857,
    "avg_bits_err_output": 39.51003510016361,
    "avg_bits_err_improve": -0.021197142265044988,
    "time": 26391.270263671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 29.434190690407554,
    "avg_bits_err_output": 29.131100457731332,
    "avg_bits_err_improve": 0.30309023267622237,
    "time": 14816.30126953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 29.684109682184822,
    "avg_bits_err_output": 29.684109682184822,
    "avg_bits_err_improve": 0,
    "time": 23881.76025390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ c (+ b (sqrt (fma c (* a -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.82758938682075,
    "avg_bits_err_output": 21.64973333241638,
    "avg_bits_err_improve": 12.17785605440437,
    "time": 24431.732177734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 33.980636546105906,
    "avg_bits_err_output": 33.99279845934452,
    "avg_bits_err_improve": -0.012161913238614375,
    "time": 21248.3916015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.26344024916715,
    "avg_bits_err_output": 0.9183235815938932,
    "avg_bits_err_improve": 60.34511666757325,
    "time": 25189.9677734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (- (exp (log1p (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 1.0)) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00405331366263,
    "avg_bits_err_output": 44.25319710498286,
    "avg_bits_err_improve": 18.75085620867977,
    "time": 11841.26513671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(if (!= (log (/ (- 1.0 eps) (+ 1.0 eps))) 0.0) (* (* (log (/ (- 1.0 eps) (- eps -1.0))) (log (/ (- 1.0 eps) (- eps -1.0)))) (/ 1.0 (if (!= (- -1.0 (+ 1.0 (log (/ (- 1.0 eps) (+ 1.0 eps))))) 0.0) (/ (- 1.0 (* (+ 1.0 (log (/ (- 1.0 eps) (+ 1.0 eps)))) (+ 1.0 (log (/ (- 1.0 eps) (+ 1.0 eps)))))) (- -1.0 (+ 1.0 (log (/ (- 1.0 eps) (+ 1.0 eps)))))) (log (/ (- 1.0 eps) (+ 1.0 eps)))))) (log (/ (- 1.0 eps) (+ 1.0 eps))))",
    "output_parens": 52,
    "avg_bits_err_input": 58.70969124861712,
    "avg_bits_err_output": 58.71930123971546,
    "avg_bits_err_improve": -0.00960999109834404,
    "time": 15939.346435546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(if (!= (/ x (* (tan x) (- x))) 0.0) (/ (/ (+ 1.0 (/ (- x) (tan x))) x) (* (tan x) (/ x (* x (tan x))))) (/ (+ 1.0 (/ (- x) (tan x))) x))",
    "output_parens": 22,
    "avg_bits_err_input": 59.914072478982206,
    "avg_bits_err_output": 59.8984766125744,
    "avg_bits_err_improve": 0.01559586640780708,
    "time": 27577.654541015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ b a))) (/ eps (expm1 (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.20264697536054,
    "avg_bits_err_output": 29.29564722061063,
    "avg_bits_err_improve": 30.906999754749908,
    "time": 26436.100341796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(* (/ 1.0 (expm1 x)) (exp x))",
    "output_parens": 4,
    "avg_bits_err_input": 41.35365944160877,
    "avg_bits_err_output": 0.45263684218813105,
    "avg_bits_err_improve": 40.901022599420635,
    "time": 6782.258056640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.60070967651047,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.60045967651047,
    "time": 3533.8486328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.59846497119116,
    "avg_bits_err_output": 0.015469822378330845,
    "avg_bits_err_improve": 29.582995148812827,
    "time": 7645.666015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (exp x) (- (- (* (exp x) 2.0) 1.0))) (exp x))",
    "output_parens": 9,
    "avg_bits_err_input": 30.00743125467056,
    "avg_bits_err_output": 29.11717092199763,
    "avg_bits_err_improve": 0.8902603326729306,
    "time": 22807.928955078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.152640581308404,
    "avg_bits_err_output": 9.152640581308404,
    "avg_bits_err_improve": 0,
    "time": 24854.65478515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (+ (/ (tan (+ x eps)) 2.0) (- (/ (tan (+ x eps)) 4.0) (tan x))) (/ (tan (+ x eps)) -4.0))",
    "output_parens": 13,
    "avg_bits_err_input": 36.78331177612614,
    "avg_bits_err_output": 36.88555654339143,
    "avg_bits_err_improve": -0.10224476726529019,
    "time": 21191.38671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.579155592790897,
    "avg_bits_err_output": 0.16309924843993387,
    "avg_bits_err_improve": 29.416056344350963,
    "time": 16119.2958984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (sin (+ x eps)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 36.933256363557675,
    "avg_bits_err_output": 36.933256363557675,
    "avg_bits_err_improve": 0,
    "time": 21468.249267578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.311396114594427,
    "avg_bits_err_output": 19.167326348770064,
    "avg_bits_err_improve": 0.14406976582436215,
    "time": 15323.240234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(+ (if (!= (+ (atan N) -1.0) 0.0) (- (/ (* (atan (+ 1.0 N)) (+ (atan N) -1.0)) (+ (atan N) -1.0)) (/ 1.0 (/ 1.0 (+ (atan N) -1.0)))) (+ 1.0 (- (atan (+ 1.0 N)) (atan N)))) -1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 15.176901341954409,
    "avg_bits_err_output": 15.191140085372504,
    "avg_bits_err_improve": -0.014238743418095723,
    "time": 13876.21630859375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.6802993283027,
    "avg_bits_err_output": 1.4740945429348011,
    "avg_bits_err_improve": 28.2062047853679,
    "time": 24998.914794921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (* (/ m v) (* (- 1.0 m) (- 1.0 m))) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07752953698335613,
    "avg_bits_err_output": 0.07341380440922632,
    "avg_bits_err_improve": 0.00411573257412981,
    "time": 11722.074462890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (* (- b) a))",
    "output_parens": 4,
    "avg_bits_err_input": 16.036826129186863,
    "avg_bits_err_output": 0.3162103390679988,
    "avg_bits_err_improve": 15.720615790118865,
    "time": 12738.671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.55777104414763,
    "avg_bits_err_output": 20.55777104414763,
    "avg_bits_err_improve": 0,
    "time": 39403.01220703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (- (pow b 2.0) (pow a 2.0)) (cos (* PI (/ angle 180.0)))) (* (log1p (expm1 (sin (* PI (/ angle 180.0))))) 2.0))",
    "output_parens": 14,
    "avg_bits_err_input": 30.946381846740348,
    "avg_bits_err_output": 30.931377366632326,
    "avg_bits_err_improve": 0.015004480108022022,
    "time": 43629.240966796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (log1p (expm1 (sin (* angle (/ PI 180.0)))))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 21.097963081477836,
    "avg_bits_err_output": 21.067973252257612,
    "avg_bits_err_improve": 0.02998982922022364,
    "time": 45927.37890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ (- m (* m m)) v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1742127584773497,
    "avg_bits_err_output": 0.16981367784260687,
    "avg_bits_err_improve": 0.004399080634742841,
    "time": 13001.002197265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (- (tan x)) 1.0) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.31606680393017456,
    "avg_bits_err_output": 0.3080552804084554,
    "avg_bits_err_improve": 0.008011523521719133,
    "time": 17308.671630859375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (- (fma e (cos v) -1.0) -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.1368962406251803,
    "avg_bits_err_output": 0.14361804531403244,
    "avg_bits_err_improve": -0.00672180468885214,
    "time": 17349.51123046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 17.16051448746713,
    "avg_bits_err_output": 17.155645552419358,
    "avg_bits_err_improve": 0.0048689350477708615,
    "time": 32635.822998046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* a (* c -4.0)))) (- b)) 0.0) (* (/ (* c -4.0) (+ b (sqrt (+ (* b b) (* a (* c -4.0)))))) a) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 52.55899760197495,
    "avg_bits_err_output": 0.1673941734413762,
    "avg_bits_err_improve": 52.39160342853358,
    "time": 22701.296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* -4.0 (* a c))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 28.791949948158187,
    "avg_bits_err_output": 0.33525808438780064,
    "avg_bits_err_improve": 28.456691863770388,
    "time": 24649.85107421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (fma (/ c (+ b (sqrt (fma b b (* a (* c -4.0)))))) (* a -4.0) 0.0) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.909366179606586,
    "avg_bits_err_output": 0.23704774531980144,
    "avg_bits_err_improve": 43.67231843428679,
    "time": 21952.273681640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ c (+ b (sqrt (fma c (* a -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.83231652137298,
    "avg_bits_err_output": 21.64973333241638,
    "avg_bits_err_improve": 12.182583188956603,
    "time": 23866.833740234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (- (* (cos (- lambda1 lambda2)) (cos phi2)) (+ 1.0 (- -1.0 (cos phi1))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.8195144067283671,
    "avg_bits_err_output": 0.8357391527143907,
    "avg_bits_err_improve": -0.016224745986023636,
    "time": 27975.3828125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ (/ -2.0 (- -1.0 (exp (* -2.0 x)))) 1.0) 0.0) (if (!= (/ 8.0 (* (+ 1.0 (fma (exp (* -2.0 x)) 2.0 (exp (* x -4.0)))) (+ 2.0 (/ -4.0 (- -1.0 (exp (* -2.0 x))))))) 0.0) (/ (fma (/ 8.0 (* (+ 1.0 (fma (exp (* -2.0 x)) 2.0 (exp (* x -4.0)))) (+ 2.0 (/ -4.0 (- -1.0 (exp (* -2.0 x))))))) (/ 8.0 (* (+ 1.0 (fma (exp (* -2.0 x)) 2.0 (exp (* x -4.0)))) (+ 2.0 (/ -4.0 (- -1.0 (exp (* -2.0 x))))))) (* (/ 8.0 (* (+ 1.0 (fma (exp (* -2.0 x)) 2.0 (exp (* x -4.0)))) (+ 2.0 (/ -4.0 (- -1.0 (exp (* -2.0 x))))))) (/ -2.0 (+ 2.0 (/ -4.0 (- -1.0 (exp (* -2.0 x)))))))) (/ 8.0 (* (+ 1.0 (fma (exp (* -2.0 x)) 2.0 (exp (* x -4.0)))) (+ 2.0 (/ -4.0 (- -1.0 (exp (* -2.0 x)))))))) (/ (+ -2.0 (/ 8.0 (+ 1.0 (fma (exp (* -2.0 x)) 2.0 (exp (* x -4.0)))))) (+ 2.0 (/ -4.0 (- -1.0 (exp (* -2.0 x))))))) (+ -1.0 (/ -2.0 (- -1.0 (exp (* -2.0 x))))))",
    "output_parens": 102,
    "avg_bits_err_input": 29.38406440195118,
    "avg_bits_err_output": 29.366046021210643,
    "avg_bits_err_improve": 0.018018380740535633,
    "time": 23017.393310546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (+ x x)) (+ (exp (+ x x)) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 58.214160224743246,
    "avg_bits_err_output": 0.6364693609377705,
    "avg_bits_err_improve": 57.57769086380547,
    "time": 22430.859619140625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (* x -2.0)) (/ -1.0 (exp x))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 58.073115069838195,
    "avg_bits_err_output": 0.07571936093777043,
    "avg_bits_err_improve": 57.99739570890043,
    "time": 7648.6171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.008865601562950725,
    "avg_bits_err_output": 0.008865601562950725,
    "avg_bits_err_improve": 0,
    "time": 4017.688232421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.777,
    "avg_bits_err_output": 31.777,
    "avg_bits_err_improve": 0,
    "time": 4132.83642578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (if (!= (log (/ (- -1.0 x) (+ x -1.0))) 0.0) (* (* (log (/ (- -1.0 x) (- x 1.0))) (log (/ (- -1.0 x) (- x 1.0)))) (/ 1.0 (log (- (/ -1.0 (* (- 1.0 x) (+ x -1.0))) (* x (/ x (* (- 1.0 x) (- 1.0 x)))))))) (log (/ (- -1.0 x) (+ x -1.0)))))",
    "output_parens": 33,
    "avg_bits_err_input": 58.70562520356331,
    "avg_bits_err_output": 58.7324206318178,
    "avg_bits_err_improve": -0.02679542825449488,
    "time": 26160.427490234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04394812031259015,
    "avg_bits_err_output": 0.043875,
    "avg_bits_err_improve": 7.312031259015112e-05,
    "time": 2853.42333984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.127375,
    "avg_bits_err_output": 0.127375,
    "avg_bits_err_improve": 0,
    "time": 28171.586669921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13125,
    "avg_bits_err_output": 0.13125,
    "avg_bits_err_improve": 0,
    "time": 23331.0087890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 38.1486844613934,
    "avg_bits_err_output": 3.7822560962169676,
    "avg_bits_err_improve": 34.36642836517643,
    "time": 28654.201904296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.65675921527103,
    "avg_bits_err_output": 14.65675921527103,
    "avg_bits_err_improve": 0,
    "time": 4363.65234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.15562405006909605,
    "avg_bits_err_output": 0.15562405006909605,
    "avg_bits_err_improve": 0,
    "time": 33992.538330078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.56642732981351,
    "avg_bits_err_output": 0.17075733125324516,
    "avg_bits_err_improve": 52.395669998560265,
    "time": 22861.89111328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (+ (* c (* a -3.0)) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.92385788802242,
    "avg_bits_err_output": 0.34234755782340737,
    "avg_bits_err_improve": 28.581510330199013,
    "time": 24606.15283203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 43.97902241094706,
    "avg_bits_err_output": 0.24028855039533428,
    "avg_bits_err_improve": 43.738733860551726,
    "time": 25967.033203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -3.0))))) 0.0) (* (/ c (+ b (sqrt (fma a (* c -3.0) (* b b))))) (* a -3.0)) (- (sqrt (fma b b (* a (* c -3.0)))) b)) (* 3.0 a))",
    "output_parens": 22,
    "avg_bits_err_input": 33.856203313246255,
    "avg_bits_err_output": 21.671705218852956,
    "avg_bits_err_improve": 12.184498094393298,
    "time": 23756.920654296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.010364323226927,
    "avg_bits_err_output": 13.010364323226927,
    "avg_bits_err_improve": 0,
    "time": 38195.017578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.967350305388614,
    "avg_bits_err_output": 0.5399511557680089,
    "avg_bits_err_improve": 29.427399149620605,
    "time": 15067.306884765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(log1p (expm1 (+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.010625,
    "avg_bits_err_output": 0.012542481250360577,
    "avg_bits_err_improve": -0.0019174812503605764,
    "time": 5746.04833984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (if (!= (/ 1.0 (- -1.0 x)) 0.0) (/ (- (/ (/ 1.0 (- -1.0 x)) (- -1.0 x)) (* (/ 1.0 (- -1.0 x)) (+ 1.0 (/ x (- -1.0 x))))) (/ 1.0 (- -1.0 x))) (+ -1.0 (/ (- 1.0 x) (- -1.0 x)))) (+ x -1.0))",
    "output_parens": 24,
    "avg_bits_err_input": 14.035714261268229,
    "avg_bits_err_output": 12.214339543896905,
    "avg_bits_err_improve": 1.8213747173713237,
    "time": 18410.30029296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= C 2.5e+15) (/ (sqrt (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C)) (* (+ (pow B 2.0) (* (* A C) -4.0)) (* F -2.0)))) (- (* A (* C 4.0)) (pow B 2.0))) (/ (sqrt (* (* 2.0 F) (* (- (pow B 2.0) (* 4.0 (* A C))) (if (!= (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))) 0.0) (/ (- (- (* (+ A C) (+ A C)) (pow (- A C) 2.0)) (pow B 2.0)) (+ A (+ C (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))))) (- (* 4.0 (* A C)) (pow B 2.0))))",
    "output_parens": 68,
    "avg_bits_err_input": 51.828736731426396,
    "avg_bits_err_output": 51.28205089371287,
    "avg_bits_err_improve": 0.5466858377135253,
    "time": 36692.9169921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(/ (* (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) 180.0) PI)",
    "output_parens": 11,
    "avg_bits_err_input": 29.104482211257125,
    "avg_bits_err_output": 29.10410508628108,
    "avg_bits_err_improve": 0.00037712497604402984,
    "time": 22168.132080078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (fma F (fma 2.0 (pow B 2.0) (* A (* C -8.0))) (fma (* A (* C -8.0)) F (* (* C 8.0) (* A F)))) (+ A (+ C (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 25,
    "avg_bits_err_input": 52.28626989007919,
    "avg_bits_err_output": 52.26678310428787,
    "avg_bits_err_improve": 0.019486785791322347,
    "time": 36805.13037109375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (cbrt (/ g (+ a a))) 0.0) (/ 1.0 (/ 1.0 (/ (* (* (cbrt (/ g (+ a a))) 2.0) (* (cbrt (/ g (+ a a))) 2.0)) (* 2.0 (* (/ 8.0 (/ 8.0 (/ (* (* (cbrt (/ g (+ a a))) 2.0) (* (cbrt (/ g (+ a a))) 2.0)) (* 2.0 (* (cbrt (/ g (+ a a))) 2.0))))) 2.0))))) (cbrt (/ g (+ a a))))",
    "output_parens": 39,
    "avg_bits_err_input": 15.23335130055074,
    "avg_bits_err_output": 15.269343084793174,
    "avg_bits_err_improve": -0.035991784242433766,
    "time": 27586.594482421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (fma g -1.0 (sqrt (* (+ g h) (- g h)))))) (cbrt (* (/ -0.5 a) (if (!= g 0.0) (/ (* g (+ g (sqrt (fma g g (- (* h h)))))) g) (+ g (sqrt (fma g g (- (* h h)))))))))",
    "output_parens": 26,
    "avg_bits_err_input": 35.849081053277125,
    "avg_bits_err_output": 35.778899681424846,
    "avg_bits_err_improve": 0.07018137185227857,
    "time": 19717.30615234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9904133468827534,
    "avg_bits_err_output": 0.9772124062518031,
    "avg_bits_err_improve": 0.013200940630950342,
    "time": 11595.7265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (- (+ (exp a) (+ (exp b) 1.0)) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5334749102026902,
    "avg_bits_err_output": 0.5767836551277554,
    "avg_bits_err_improve": -0.0433087449250652,
    "time": 4555.701416015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -5e+288) (* (/ (/ a2 b1) b2) a1) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-312) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+303) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b2) (/ a2 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.45150533875889,
    "avg_bits_err_output": 2.462295196462478,
    "avg_bits_err_improve": 8.989210142296413,
    "time": 9510.0478515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4214587964875865,
    "avg_bits_err_output": 0.361125,
    "avg_bits_err_improve": 0.06033379648758652,
    "time": 8718.153564453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.001) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 500000.0) (log1p (if (!= (+ (- (hypot 1.0 x) x) -1.0) 0.0) (* (+ 1.0 (- x (hypot 1.0 x))) (/ (+ x (+ (hypot 1.0 x) -1.0)) (log (+ 1.0 (expm1 (- x (+ (hypot 1.0 x) -1.0))))))) (+ x (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 55,
    "avg_bits_err_input": 52.89417892955714,
    "avg_bits_err_output": 0.6238584574809913,
    "avg_bits_err_improve": 52.27032047207615,
    "time": 15391.744873046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.721221891303513,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.721221891303513,
    "time": 3198.361083984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 2.0 (* x 2.0)) (+ x (+ x 2.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.013875,
    "avg_bits_err_output": 0.017625,
    "avg_bits_err_improve": -0.003749999999999998,
    "time": 4291.44091796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1261.501708984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= w -4.1e+108) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* r w) (* (* r (/ w (- 1.0 v))) (- 0.375 (* v 0.25)))) 4.5)) (if (<= w 1e+94) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* r (* w (* (/ (* r w) (- 1.0 v)) (- 0.375 (* v 0.25))))) 4.5)) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* (* r w) (* (* r (/ w (- 1.0 v))) (- 0.375 (* v 0.25)))) 4.5))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.709489423258463,
    "avg_bits_err_output": 0.28394572387567096,
    "avg_bits_err_improve": 12.425543699382791,
    "time": 23464.006103515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (if (!= (- (* (* (* x1 (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0))) (+ (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) -3.0)) 2.0) (* (* x1 x1) (- (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0) 6.0))) 0.0) (/ 1.0 (/ 1.0 (fma x1 (* x1 (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)) (* -2.0 (* (* x1 (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0))) (+ (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) -3.0)))))) (fma x1 (* x1 (fma (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)) (* -2.0 (* (* x1 (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0))) (+ (/ (- (fma 3.0 (* x1 x1) (* 2.0 x2)) x1) (fma x1 x1 1.0)) -3.0)))))))))))",
    "output_parens": 104,
    "avg_bits_err_input": 0.5159012060702414,
    "avg_bits_err_output": 0.2928421674452395,
    "avg_bits_err_improve": 0.22305903862500187,
    "time": 74943.38745117188,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ t1 (+ t1 u)) (- v)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.295043589852305,
    "avg_bits_err_output": 1.1278528990175076,
    "avg_bits_err_improve": 17.167190690834797,
    "time": 8498.282958984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.23467251746548876,
    "avg_bits_err_output": 0.23467251746548876,
    "avg_bits_err_improve": 0,
    "time": 6682.643310546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003875,
    "avg_bits_err_output": 0.003875,
    "avg_bits_err_improve": 0,
    "time": 3073.136962890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* (- (/ 1.0 a) (/ 1.0 b)) (* PI 0.5)) (- b a)) (+ b a))",
    "output_parens": 9,
    "avg_bits_err_input": 14.138060384022722,
    "avg_bits_err_output": 0.3005550765730468,
    "avg_bits_err_improve": 13.837505307449675,
    "time": 16865.462158203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (- (/ (+ 1.0 (/ 1.0 eps)) (exp (* (- 1.0 eps) x))) (/ (/ 1.0 eps) (exp (* x (+ 1.0 eps))))) (- (/ -1.0 (exp (* x (+ 1.0 eps)))))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 29.543531437114826,
    "avg_bits_err_output": 24.832119428483626,
    "avg_bits_err_improve": 4.7114120086312,
    "time": 35883.9423828125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (- (- 4.0 (/ 4.0 (+ t (/ t t)))) (/ (- 4.0 (/ 4.0 (+ t (/ t t)))) (* t (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.029,
    "avg_bits_err_output": 0.005,
    "avg_bits_err_improve": 0.024,
    "time": 8191.210693359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (+ 1.0 (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))))) (+ (* (- 2.0 (/ (/ 4.0 t) (+ 2.0 (/ 2.0 t)))) (- 4.0 (/ 8.0 (* t (+ 2.0 (/ 2.0 t)))))) 4.0))",
    "output_parens": 26,
    "avg_bits_err_input": 0.032875,
    "avg_bits_err_output": 0.03025,
    "avg_bits_err_improve": 0.0026250000000000023,
    "time": 20279.71630859375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))) (+ 2.0 (* (/ t (+ t 1.0)) (* t (/ 4.0 (+ t 1.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.048,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 0.039875,
    "time": 9557.911376953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 2941.588623046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6939.949951171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2644.68212890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.840824799560117,
    "avg_bits_err_output": 0.255375,
    "avg_bits_err_improve": 7.585449799560117,
    "time": 35722.63232421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.3247496513254875,
    "avg_bits_err_output": 7.3247496513254875,
    "avg_bits_err_improve": 0,
    "time": 17394.71484375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 15.708367810745404,
    "avg_bits_err_output": 15.708367810745404,
    "avg_bits_err_improve": 0,
    "time": 14505.71435546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (log (if (!= (- -2.0 (exp (cos x))) 0.0) (/ (- 1.0 (+ (expm1 (* 2.0 (log1p (exp (cos x))))) 1.0)) (- -2.0 (exp (cos x)))) (exp (cos x)))) (exp (* 10.0 (* x x))))",
    "output_parens": 23,
    "avg_bits_err_input": 3.541094055679177,
    "avg_bits_err_output": 3.559589977888509,
    "avg_bits_err_improve": -0.01849592220933216,
    "time": 20556.265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(log1p (expm1 (/ x (fma x x 1.0))))",
    "output_parens": 4,
    "avg_bits_err_input": 14.28559916519377,
    "avg_bits_err_output": 14.28559916519377,
    "avg_bits_err_improve": 0,
    "time": 13115.98291015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.92305890107985,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.92305890107985,
    "time": 5688.843017578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.353893905130626,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 39.35376890513063,
    "time": 4692.02490234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.259625,
    "avg_bits_err_improve": 63.740375,
    "time": 20035.668212890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* 4e-32 (* t t))",
    "output_parens": 2,
    "avg_bits_err_input": 61.843250060791135,
    "avg_bits_err_output": 0.40952161719245816,
    "avg_bits_err_improve": 61.433728443598675,
    "time": 7425.10791015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 33.980636546105906,
    "avg_bits_err_output": 33.99279845934452,
    "avg_bits_err_improve": -0.012161913238614375,
    "time": 21618.01806640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ c (+ b (sqrt (fma c (* a -4.0) (* b b))))) (* a -4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 33.83231652137298,
    "avg_bits_err_output": 21.64973333241638,
    "avg_bits_err_improve": 12.182583188956603,
    "time": 26800.433349609375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2318.26025390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.83810762505364,
    "avg_bits_err_output": 0.013125,
    "avg_bits_err_improve": 39.824982625053636,
    "time": 7190.040283203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(- (/ (* x x) (fma y y (* x x))) (* y (/ y (fma y y (* x x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 20.041416061583668,
    "avg_bits_err_output": 20.03834796581127,
    "avg_bits_err_improve": 0.003068095772398749,
    "time": 13554.357421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.661189081637689,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.661189081637689,
    "time": 9607.93896484375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.039375,
    "time": 8522.56494140625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(* (+ a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.022490601562950727,
    "avg_bits_err_output": 0.022490601562950727,
    "avg_bits_err_improve": 0,
    "time": 2496.68359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.0135,
    "avg_bits_err_output": 0.0135,
    "avg_bits_err_improve": 0,
    "time": 2434.71923828125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000875,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0,
    "time": 1640.0029296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39465601562950725,
    "avg_bits_err_output": 0.24425,
    "avg_bits_err_improve": 0.15040601562950726,
    "time": 5819.33154296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(log (+ 1.0 (expm1 (- 1.0 (cos x)))))",
    "output_parens": 5,
    "avg_bits_err_input": 30.292060223209155,
    "avg_bits_err_output": 30.32851490274266,
    "avg_bits_err_improve": -0.036454679533505896,
    "time": 7659.490478515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 25.038366505204042,
    "avg_bits_err_output": 0.28032312031259016,
    "avg_bits_err_improve": 24.75804338489145,
    "time": 10956.677490234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(- (if (!= (/ x (tan x)) 0.0) (/ 1.0 (/ 1.0 (/ x (tan x)))) (/ x (tan x))) (/ (sin x) (tan x)))",
    "output_parens": 14,
    "avg_bits_err_input": 30.486938587298585,
    "avg_bits_err_output": 30.511948199138395,
    "avg_bits_err_improve": -0.025009611839809764,
    "time": 26506.907470703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0065,
    "avg_bits_err_output": 0.001375,
    "avg_bits_err_improve": 0.005124999999999999,
    "time": 2213.592041015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (/ (* (- 1.0 (pow (+ (/ i n) 1.0) n)) (/ -200.0 (/ i n))) (* i (/ 2.0 i))))",
    "output_parens": 25,
    "avg_bits_err_input": 47.609822427305765,
    "avg_bits_err_output": 13.357491232586872,
    "avg_bits_err_improve": 34.25233119471889,
    "time": 25880.991455078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma d d (* c c)))) (* a (/ c (fma d d (* c c)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.369552687193668,
    "avg_bits_err_output": 23.31085388268028,
    "avg_bits_err_improve": 3.058698804513387,
    "time": 12946.537109375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) (- INFINITY)) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d))))) (if (<= (/ (- (* b c) (* a d)) (+ (* c c) (* d d))) 1e+286) (/ (fma d (- a) (* c b)) (fma c c (* d d))) (- (* (/ b (fma d d (* c c))) c) (* a (/ d (fma c c (* d d)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 26.351501031704768,
    "avg_bits_err_output": 22.967902052317903,
    "avg_bits_err_improve": 3.383598979386864,
    "time": 15114.5185546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.03275,
    "avg_bits_err_output": 0.019990697420484902,
    "avg_bits_err_improve": 0.0127593025795151,
    "time": 6322.89208984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (if (!= (* -2.0 (* uy PI)) 0.0) (/ 1.0 (/ (/ 0.5 uy) PI)) (* uy (* 2.0 PI)))) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.64969994492842,
    "avg_bits_err_output": 12.445775838750052,
    "avg_bits_err_improve": 1.203924106178368,
    "time": 31687.243896484375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- (- ux (* maxCos (* ux (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))) (* ux ux)) (- (- ux)))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.686038579350132,
    "avg_bits_err_output": 0.32345464430158005,
    "avg_bits_err_improve": 13.362583935048551,
    "time": 32060.760986328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (cos (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (- 1.0 ux) (* ux (* (- 1.0 ux) (* maxCos (* ux maxCos))))))) xi) (fma (sin (* PI (* uy 2.0))) (* (sqrt (- 1.0 (* (* maxCos maxCos) (* (- 1.0 ux) (* ux (- ux (* ux ux))))))) yi) (* ux (* (- 1.0 ux) (* maxCos zi)))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.34590803930447744,
    "avg_bits_err_output": 0.33921285950606683,
    "avg_bits_err_improve": 0.006695179798410611,
    "time": 43771.818603515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (+ (+ 2.0 (cos (atan (* (/ alphay alphax) (tan (fma 2.0 (* PI u1) (* PI 0.5))))))) -2.0) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.20441147540404264,
    "avg_bits_err_output": 0.2052463103075186,
    "avg_bits_err_improve": -0.0008348349034759672,
    "time": 34570.90771484375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (log1p (expm1 (sin (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.543769143854134,
    "avg_bits_err_output": 0.5490131295682218,
    "avg_bits_err_improve": -0.0052439857140877955,
    "time": 20451.899169921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (pow (/ u1 (- 1.0 u1)) 0.5) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.32032849407495295,
    "avg_bits_err_output": 0.32045349407495305,
    "avg_bits_err_improve": -0.00012500000000009726,
    "time": 20974.6572265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.33984281472053063,
    "avg_bits_err_output": 0.34011767772908236,
    "avg_bits_err_improve": -0.00027486300855172896,
    "time": 52118.25048828125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(expm1 (log1p (/ 1.0 (+ 1.0 (exp (/ (- x) s))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.05787217015750099,
    "avg_bits_err_output": 0.061895854533762985,
    "avg_bits_err_improve": -0.004023684376261993,
    "time": 11835.591064453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (/ (- (fabs x)) s)) (+ (+ (* s (exp (* -2.0 (/ (fabs x) s)))) (* (exp (/ (fabs x) (- s))) (+ s s))) s))",
    "output_parens": 18,
    "avg_bits_err_input": 0.13712960107210362,
    "avg_bits_err_output": 0.11520847308627506,
    "avg_bits_err_improve": 0.021921127985828556,
    "time": 21024.57861328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6680207908937882,
    "avg_bits_err_output": 0.6680207908937882,
    "avg_bits_err_improve": 0,
    "time": 22048.388916015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (if (!= (- v) 0.0) (if (!= (/ 1.0 (/ -1.0 v)) 0.0) (/ (fma (/ 1.0 (/ -1.0 v)) (/ 1.0 (/ -1.0 v)) (* (/ 1.0 (/ -1.0 v)) (/ (- -1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))) (/ -1.0 v)))) (/ 1.0 (/ -1.0 v))) (* (+ v (* v (- -1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))))) (/ v (- v)))) (* v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.16185322714897074,
    "avg_bits_err_output": 0.1924407528400732,
    "avg_bits_err_improve": -0.030587525691102457,
    "time": 20602.957763671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.583018703851672,
    "avg_bits_err_output": 2.580663262784846,
    "avg_bits_err_improve": 0.0023554410668262804,
    "time": 26317.513671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ cosTheta_i (exp (* sinTheta_O (/ sinTheta_i v)))) (* (/ (/ 0.5 v) (sinh (/ 1.0 v))) (/ 1.0 v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4653512624968681,
    "avg_bits_err_output": 0.35824375687615967,
    "avg_bits_err_improve": 0.10710750562070842,
    "time": 24844.91845703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (- (* cosTheta_i cosTheta_O) (+ 1.0 (* sinTheta_i sinTheta_O))) v) 0.6931)) 0.5) v)",
    "output_parens": 9,
    "avg_bits_err_input": 0.10650240332098712,
    "avg_bits_err_output": 0.0910454401912694,
    "avg_bits_err_improve": 0.015456963129717727,
    "time": 17213.965087890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (* alpha (+ alpha alpha)) 2.0) (* (fma cosTheta (- (* alpha (* alpha cosTheta)) cosTheta) 1.0) (* PI (* (log (* alpha alpha)) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4558456497706566,
    "avg_bits_err_output": 0.45412492779336844,
    "avg_bits_err_improve": 0.0017207219772881754,
    "time": 25683.114013671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) s)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3065097947354827,
    "avg_bits_err_output": 1.1858446569300336,
    "avg_bits_err_improve": 0.12066513780544907,
    "time": 28341.825927734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(+ (/ (* (log (/ 1.0 (+ 1.0 (* u -4.0)))) s) 2.0) (/ (* (log (/ 1.0 (+ 1.0 (* u -4.0)))) s) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 12.348574563720144,
    "avg_bits_err_output": 12.352222043608755,
    "avg_bits_err_improve": -0.003647479888611471,
    "time": 22806.957275390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* r 4.0) (/ (* (* PI s) -6.0) -4.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13655677100410343,
    "avg_bits_err_output": 0.14583715208796721,
    "avg_bits_err_improve": -0.009280381083863781,
    "time": 26742.448486328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.905243938932086,
    "avg_bits_err_output": 0.692986083730703,
    "avg_bits_err_improve": 0.21225785520138296,
    "time": 26698.594482421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (exp (* cosTheta cosTheta))) (* cosTheta (sqrt PI)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6794786001993081,
    "avg_bits_err_output": 0.4755600409796649,
    "avg_bits_err_improve": 0.20391855921964314,
    "time": 20351.6572265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (log1p (expm1 (sin (* 2.0 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.343898601823916,
    "avg_bits_err_output": 0.5414264801652768,
    "avg_bits_err_improve": 12.802472121658639,
    "time": 24003.535400390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (- (exp (log1p (cos (* 2.0 (* PI u2))))) 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 13.384857568120973,
    "avg_bits_err_output": 13.38631165790132,
    "avg_bits_err_improve": -0.001454089780347445,
    "time": 23293.89453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(- (* (* alpha (log (- 1.0 u0))) (- alpha)) (fma (- alpha) (fma alpha (log (- 1.0 u0)) alpha) (* alpha (fma alpha (log (- 1.0 u0)) alpha))))",
    "output_parens": 15,
    "avg_bits_err_input": 14.05757635386599,
    "avg_bits_err_output": 14.038946030917987,
    "avg_bits_err_improve": 0.018630322948002487,
    "time": 18082.5,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (if (!= (/ sin2phi (* alphay alphay)) 0.0) (/ 1.0 (/ 1.0 (/ sin2phi (* alphay alphay)))) (/ sin2phi (* alphay alphay)))))",
    "output_parens": 17,
    "avg_bits_err_input": 12.58468902222884,
    "avg_bits_err_output": 12.586657011526581,
    "avg_bits_err_improve": -0.001967989297741113,
    "time": 17803.626708984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (sin (* PI l)) F) (* (- (exp (log1p (cos (* PI l)))) 1.0) F)))",
    "output_parens": 12,
    "avg_bits_err_input": 16.52083657805504,
    "avg_bits_err_output": 12.500781211090455,
    "avg_bits_err_improve": 4.020055366964584,
    "time": 26110.7861328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.21641748125036056,
    "avg_bits_err_output": 0.21641748125036056,
    "avg_bits_err_improve": 0,
    "time": 15091.162353515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)) (sin B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.764258446437987,
    "avg_bits_err_output": 10.70998454077833,
    "avg_bits_err_improve": 3.0542739056596577,
    "time": 19663.692626953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (* -4.0 (log (/ (+ (exp (* PI (/ f -4.0))) (exp (* PI (* 0.25 f)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (* f -0.5))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (* 0.25 f))) (exp (* PI (/ f -4.0)))))))) PI)",
    "output_parens": 31,
    "avg_bits_err_input": 61.37742317936748,
    "avg_bits_err_output": 1.9055855812297267,
    "avg_bits_err_improve": 59.47183759813775,
    "time": 52882.56689453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.053375779353544,
    "avg_bits_err_output": 33.92545607317904,
    "avg_bits_err_improve": 9.127919706174502,
    "time": 25419.17431640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.650189929377229,
    "avg_bits_err_output": 3.650189929377229,
    "avg_bits_err_improve": 0,
    "time": 30386.089599609375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (sqrt (+ 1.0 (* (pow (* l (/ 2.0 Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))) 0.5)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.918375,
    "avg_bits_err_output": 0.918375,
    "avg_bits_err_improve": 0,
    "time": 10342.968017578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 10,
    "avg_bits_err_input": 10.159428568136615,
    "avg_bits_err_output": 10.159428568136615,
    "avg_bits_err_improve": 0,
    "time": 11605.61181640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 0.0) (sqrt (* U (* (* 2.0 n) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (if (<= (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))) 1e+300) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (- (* (pow (/ l Om) 2.0) (* (* n U*) (* 2.0 (* n U)))) (* 2.0 (- (* (/ l Om) (* (* l 2.0) (* n U))) (* n (* U (- t (* (pow (/ l Om) 2.0) (* n U)))))))))))",
    "output_parens": 80,
    "avg_bits_err_input": 34.64485074348534,
    "avg_bits_err_output": 28.13193561264115,
    "avg_bits_err_improve": 6.512915130844192,
    "time": 34708.648193359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1e-104) (+ (/ (/ 2.0 (/ (tan k) l)) (* (pow (/ k t) 2.0) (/ (* (pow t 3.0) (+ (sin k) (sin k))) l))) (/ (/ 2.0 (/ (tan k) l)) (* (pow (/ k t) 2.0) (/ (* (pow t 3.0) (+ (sin k) (sin k))) l)))) (if (<= t 9e-94) (/ 2.0 (* (/ (sin k) l) (* (exp (fma 2.0 (log (/ k t)) (* 3.0 (log t)))) (/ (tan k) l)))) (/ 2.0 (* (/ (sin k) l) (* (* (pow (/ k t) 2.0) (pow t 3.0)) (/ (tan k) l))))))",
    "output_parens": 55,
    "avg_bits_err_input": 47.67671050232394,
    "avg_bits_err_output": 34.35445132513999,
    "avg_bits_err_improve": 13.322259177183952,
    "time": 43053.299560546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (* (+ 2.0 (pow (/ k t) 2.0)) (* (* (pow t 3.0) (/ (sin k) l)) (tan k))) l))",
    "output_parens": 12,
    "avg_bits_err_input": 32.03275996639717,
    "avg_bits_err_output": 27.242075701254127,
    "avg_bits_err_improve": 4.790684265143046,
    "time": 20781.795654296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(+ (* a1 (* a1 (/ (cos th) (sqrt 2.0)))) (* (/ a2 (sqrt 2.0)) (* a2 (cos th))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.5189406047119312,
    "avg_bits_err_output": 0.4702281984601277,
    "avg_bits_err_improve": 0.04871240625180345,
    "time": 23111.941162109375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (pow (* 2.0 (if (!= (* PI n) 0.0) (/ 1.0 (/ 1.0 (* PI n))) (* PI n))) (+ 0.5 (* k -0.5))) (sqrt k))",
    "output_parens": 13,
    "avg_bits_err_input": 0.49293429273022,
    "avg_bits_err_output": 0.47490456316478713,
    "avg_bits_err_improve": 0.01802972956543286,
    "time": 19837.0205078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (+ (/ 0.5 (exp (- l))) (- (/ (/ -0.5 (exp (- l))) -1.0) (/ (exp 0.0) (exp l))))) (cos (/ K 2.0))) U)",
    "output_parens": 17,
    "avg_bits_err_input": 16.864990563002465,
    "avg_bits_err_output": 16.878142864748582,
    "avg_bits_err_improve": -0.0131523017461177,
    "time": 26997.326171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= n -2.7e+19) (* (cos (- (/ (if (!= (* K n) 0.0) (* K (* (+ n m) (* n (- (exp (log1p (/ K (* K n)))) 1.0)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (if (<= n 2e-8) (* (cos (- (/ (if (!= (* K n) 0.0) (* K (* (+ n m) (/ (/ K (/ K n)) n))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n)))))) (* (cos (- (/ (if (!= (* K n) 0.0) (* K (* (+ n m) (* n (- (exp (log1p (/ K (* K n)))) 1.0)))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))))",
    "output_parens": 85,
    "avg_bits_err_input": 15.698836307057327,
    "avg_bits_err_output": 2.904741167520202,
    "avg_bits_err_improve": 12.794095139537125,
    "time": 25153.80029296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.95346936093777,
    "avg_bits_err_output": 17.95346936093777,
    "avg_bits_err_improve": 0,
    "time": 31107.544189453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 1e-23) (* w0 (sqrt (- 1.0 (* (/ (pow (* (/ M 2.0) (/ D d)) 2.0) l) h)))) (* w0 (sqrt (- 1.0 (* (pow (* D (/ (/ M 2.0) d)) 2.0) (/ h l))))))",
    "output_parens": 24,
    "avg_bits_err_input": 14.633980344312715,
    "avg_bits_err_output": 10.815990346172232,
    "avg_bits_err_improve": 3.817989998140483,
    "time": 19465.060302734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (/ A (* V l)) 1e-315) (* c0 (if (!= (sqrt (/ (/ A l) V)) 0.0) (/ (* (sqrt (/ (/ A l) V)) (sqrt (/ (/ A l) V))) (sqrt (/ (/ A l) V))) (sqrt (/ (/ A l) V)))) (if (<= (/ A (* V l)) 1e+249) (* c0 (sqrt (/ A (* V l)))) (* c0 (sqrt (* (/ A l) (/ 1.0 V))))))",
    "output_parens": 37,
    "avg_bits_err_input": 19.03711654221674,
    "avg_bits_err_output": 15.164413026352793,
    "avg_bits_err_improve": 3.8727035158639467,
    "time": 18881.51708984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -2e+71) (/ (* (+ c0 c0) (+ (* c0 (* d (/ (/ d (* w D)) (* D h)))) (sqrt (* (fma (* d (/ (/ d (* w D)) (* D h))) c0 M) (- (* c0 (* d (/ (/ d (* w D)) (* D h)))) M))))) (+ (+ w w) (+ w w))) (if (<= w -1e-201) (* (/ c0 (* 2.0 w)) (- (+ (/ (* d (/ (* c0 (/ d D)) D)) (* w (+ h h))) (sqrt (* (fma d (/ (/ (/ (* c0 (/ d D)) D) w) h) M) (fma d (/ (/ (/ (* c0 (/ d D)) D) w) h) (- M))))) (- 0.0 (* (/ d D) (* (/ c0 D) (/ (/ d w) (+ h h))))))) (if (<= w 60000000.0) (+ (* (* c0 (* d (/ (/ d (* w D)) (* D h)))) (/ c0 (+ w w))) (* (sqrt (* (fma (/ (/ d (* w D)) (* D h)) (* c0 d) M) (fma c0 (* d (/ (/ d (* w D)) (* D h))) (- M)))) (/ c0 (+ w w)))) (if (<= w 5e+148) (* (/ c0 (* 2.0 w)) (+ (* d (/ (* d (/ c0 (* w (* D D)))) h)) (sqrt (* (fma d (/ (* d (/ c0 (* w (* D D)))) h) M) (fma d (/ (* d (/ c0 (* w (* D D)))) h) (- M)))))) (/ (* (+ c0 c0) (+ (* c0 (* d (/ (/ d (* w D)) (* D h)))) (sqrt (* (fma (* d (/ (/ d (* w D)) (* D h))) c0 M) (- (* c0 (* d (/ (/ d (* w D)) (* D h)))) M))))) (+ (+ w w) (+ w w)))))))",
    "output_parens": 152,
    "avg_bits_err_input": 59.78790956957688,
    "avg_bits_err_output": 55.40022289758631,
    "avg_bits_err_improve": 4.387686671990572,
    "time": 52880.32568359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(* (* (if (!= (sqrt (/ d h)) 0.0) (/ 1.0 (/ 1.0 (sqrt (/ d h)))) (sqrt (/ d h))) (sqrt (/ d l))) (- 1.0 (/ (* (pow (* M (/ D (* d 2.0))) 2.0) (* 0.5 h)) l)))",
    "output_parens": 22,
    "avg_bits_err_input": 26.30444984918681,
    "avg_bits_err_output": 25.85813533701591,
    "avg_bits_err_improve": 0.44631451217090046,
    "time": 41662.305908203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (+ (/ -0.25 (hypot 1.0 x)) (+ (/ -0.25 (hypot 1.0 x)) 0.5)) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 24,
    "avg_bits_err_input": 15.46220520852375,
    "avg_bits_err_output": 14.97007161154141,
    "avg_bits_err_improve": 0.49213359698233994,
    "time": 26048.435546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9868443609377705,
    "avg_bits_err_output": 0.012,
    "avg_bits_err_improve": 0.9748443609377705,
    "time": 4248.39111328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* v (* v 5.0))) PI) (sqrt (- 2.0 (* v (* v 6.0))))) (+ (* t (- (* v v))) t))",
    "output_parens": 14,
    "avg_bits_err_input": 0.4341304608686311,
    "avg_bits_err_output": 0.10684456445035252,
    "avg_bits_err_improve": 0.3272858964182786,
    "time": 20028.234619140625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (- 1.0 (* 3.0 (* v v)))) (expm1 (log1p (* (fma v v -1.0) (/ (sqrt 2.0) -4.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.011323120312590145,
    "avg_bits_err_output": 0.013761842188131014,
    "avg_bits_err_improve": -0.0024387218755408686,
    "time": 7172.47021484375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5474621861276876,
    "avg_bits_err_output": 0.5474621861276876,
    "avg_bits_err_improve": 0,
    "time": 8386.62841796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output_parens": 7,
    "avg_bits_err_input": 1.9828245666930557,
    "avg_bits_err_output": 1.9828245666930557,
    "avg_bits_err_improve": 0,
    "time": 13361.73486328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- mu (- Ec (+ Vef EDonor))) KbT)))) (/ NaChar (- (* (exp (/ (+ EAccept (- (+ Ev Vef) mu)) (+ KbT KbT))) (exp (/ (+ EAccept (- (+ Ev Vef) mu)) (+ KbT KbT)))) -1.0)))",
    "output_parens": 23,
    "avg_bits_err_input": 0.016935321751558364,
    "avg_bits_err_output": 0.01738757633080223,
    "avg_bits_err_improve": -0.0004522545792438673,
    "time": 8063.91943359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (/ 1.0 (pow (fma a a (* b b)) -2.0)) (pow (fma a a (* b b)) 2.0)) (* 4.0 (* b b))) 1.0)",
    "output_parens": 16,
    "avg_bits_err_input": 0.1862998125036057,
    "avg_bits_err_output": 0.20483571563527617,
    "avg_bits_err_improve": -0.018535903131670473,
    "time": 21442.50927734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (fma a a (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.19424740211637467,
    "avg_bits_err_output": 0.19390304117860424,
    "avg_bits_err_improve": 0.00034436093777043264,
    "time": 27132.840087890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 14,
    "avg_bits_err_input": 0.18480271804288967,
    "avg_bits_err_output": 0.18480271804288967,
    "avg_bits_err_improve": 0,
    "time": 23839.5078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(+ (+ (sqrt (fma 0.5 (/ x (sqrt (+ (* x x) (* 4.0 (* p p))))) 0.5)) -1.0) 1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 13.23647577207128,
    "avg_bits_err_output": 13.236242262098214,
    "avg_bits_err_improve": 0.0002335099730661483,
    "time": 16608.41015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (if (!= (+ 1.0 (+ (/ (expm1 (* 2.0 x)) (expm1 x)) 1.0)) 0.0) (/ (- (* (+ (/ (expm1 (* 2.0 x)) (expm1 x)) 1.0) (+ (/ (expm1 (* 2.0 x)) (expm1 x)) 1.0)) 1.0) (+ 1.0 (+ (/ (expm1 (* 2.0 x)) (expm1 x)) 1.0))) (/ (expm1 (* 2.0 x)) (expm1 x))))",
    "output_parens": 32,
    "avg_bits_err_input": 40.901760617157315,
    "avg_bits_err_output": 0.0625,
    "avg_bits_err_improve": 40.839260617157315,
    "time": 7534.71533203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (- x (sin x)) (- x (tan x)))",
    "output_parens": 5,
    "avg_bits_err_input": 31.902755490590717,
    "avg_bits_err_output": 31.902755490590717,
    "avg_bits_err_improve": 0,
    "time": 17023.575439453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 34.40584995319248,
    "avg_bits_err_output": 34.40584995319248,
    "avg_bits_err_improve": 0,
    "time": 15619.29931640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (- b_2) (sqrt (if (!= (- (* b_2 b_2) (+ (* a c) (* a (+ c (- c))))) 0.0) (- (* (* b_2 (/ b_2 (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c))) (* (* a c) (+ (/ (- (* b_2 b_2) (* a c)) (- (* b_2 b_2) (* a c))) (/ (fma (- a) c (* a c)) (- (* b_2 b_2) (* a c)))))) (- (* b_2 b_2) (* a c))))) a)",
    "output_parens": 43,
    "avg_bits_err_input": 34.3828390476411,
    "avg_bits_err_output": 34.44630470698043,
    "avg_bits_err_improve": -0.0634656593393288,
    "time": 14698.411376953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(if (<= x -0.054) (/ (/ (- 1.0 (cos x)) x) x) (if (<= x 0.000165) (+ (- (/ 1.0 (* x x)) (+ 1.0 (/ (cos x) (* x x)))) 1.0) (/ (/ (- 1.0 (cos x)) x) x)))",
    "output_parens": 20,
    "avg_bits_err_input": 31.402821974584036,
    "avg_bits_err_output": 28.655839638317143,
    "avg_bits_err_improve": 2.7469823362668926,
    "time": 17324.806884765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(if (<= x 1.0) (- (expm1 (/ (log x) n))) (- (pow (+ x 1.0) (/ 1.0 n)) (if (!= (pow x (/ 1.0 n)) 0.0) (/ 1.0 (/ 1.0 (pow x (/ 1.0 n)))) (pow x (/ 1.0 n)))))",
    "output_parens": 20,
    "avg_bits_err_input": 32.65858272605914,
    "avg_bits_err_output": 12.383964417840893,
    "avg_bits_err_improve": 20.274618308218244,
    "time": 29708.21923828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log (+ 1.0 (expm1 (- (log1p N) (log N)))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.889323456536772,
    "avg_bits_err_output": 29.889477201656973,
    "avg_bits_err_improve": -0.00015374512020116526,
    "time": 12979.9541015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ (+ (/ x (- -1.0 x)) (- 2.0 (* (/ 1.0 (+ x 1.0)) x))) -2.0) x)",
    "output_parens": 9,
    "avg_bits_err_input": 14.376828836079588,
    "avg_bits_err_output": 14.378720454207658,
    "avg_bits_err_improve": -0.0018916181280701494,
    "time": 14392.052490234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (cos (+ x eps)) (cos x))",
    "output_parens": 4,
    "avg_bits_err_input": 39.32695016404619,
    "avg_bits_err_output": 39.32695016404619,
    "avg_bits_err_improve": 0,
    "time": 22249.697021484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(+ (- (cbrt (+ x 1.0)) (+ 1.0 (cbrt x))) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 30.409551823361127,
    "avg_bits_err_output": 30.091608505279893,
    "avg_bits_err_improve": 0.3179433180812339,
    "time": 12375.289306640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (if (!= (cos x) 0.0) (/ (* (cos x) (- 1.0 (cos x))) (cos x)) (- 1.0 (cos x))) (sin x))",
    "output_parens": 13,
    "avg_bits_err_input": 30.43412667195782,
    "avg_bits_err_output": 30.44903719852222,
    "avg_bits_err_improve": -0.014910526564399618,
    "time": 24818.578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.45820643720567,
    "avg_bits_err_output": 21.8299638637294,
    "avg_bits_err_improve": 12.628242573476268,
    "time": 21822.5693359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (/ b -2.0) (+ (/ b -2.0) (- (sqrt (fma b b (* a (* c -4.0))))))) (* a 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 34.47193849760178,
    "avg_bits_err_output": 34.475571868015265,
    "avg_bits_err_improve": -0.0036333704134818845,
    "time": 28261.821044921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (- (+ 1.0 (/ (+ 1.0 (log (- 1.0 x))) (log1p x))) (/ 1.0 (log1p x))) -1.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.34023281158273,
    "avg_bits_err_output": 0.8513643802892443,
    "avg_bits_err_improve": 60.48886843129348,
    "time": 24391.121337890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (!= (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))) 0.0) (if (!= (* (fma n (- (log1p n) (log n)) (log1p n)) (/ (fma n (- (log1p n) (log n)) (log1p n)) (- -1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 0.0) (- (/ 1.0 (log (+ 1.0 (expm1 (/ 1.0 (/ (* (fma n (- (log1p n) (log n)) (log1p n)) (fma n (- (log1p n) (log n)) (log1p n))) (- -1.0 (fma n (- (log1p n) (log n)) (log1p n)))))))))) 0.0) (+ (fma n (- (log1p n) (log n)) (log1p n)) -1.0))",
    "output_parens": 58,
    "avg_bits_err_input": 63.005504915345526,
    "avg_bits_err_output": 44.220414960177045,
    "avg_bits_err_improve": 18.78508995516848,
    "time": 19805.06787109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (- (/ (- eps -1.0) (- eps -1.0)) (+ (/ eps (- eps -1.0)) (/ eps (- eps -1.0)))))",
    "output_parens": 10,
    "avg_bits_err_input": 58.6068582932264,
    "avg_bits_err_output": 58.56480205031034,
    "avg_bits_err_improve": 0.04205624291606114,
    "time": 20402.855712890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (log (+ 1.0 (expm1 (+ (/ 1.0 (tan x)) (/ -1.0 x))))) x) (/ -1.0 x))",
    "output_parens": 10,
    "avg_bits_err_input": 59.946070332992555,
    "avg_bits_err_output": 59.9460694557294,
    "avg_bits_err_improve": 8.772631545639342e-07,
    "time": 29657.8740234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ (expm1 (* eps (+ a b))) (expm1 (* eps b))) (/ eps (expm1 (* eps a))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.25634483926499,
    "avg_bits_err_output": 29.558105845463878,
    "avg_bits_err_improve": 30.698238993801112,
    "time": 27206.49853515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(- (* (exp x) (+ 1.0 (/ 1.0 (expm1 x)))) (exp x))",
    "output_parens": 7,
    "avg_bits_err_input": 41.33060170075053,
    "avg_bits_err_output": 0.5255551599769501,
    "avg_bits_err_improve": 40.805046540773574,
    "time": 5345.245849609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.64451325328932,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.64426325328932,
    "time": 3677.541015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.473618010929215,
    "avg_bits_err_output": 0.02225475254202879,
    "avg_bits_err_improve": 29.451363258387186,
    "time": 3824.13916015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (if (!= (- 1.0 (expm1 (- x))) 0.0) (/ (+ (* (+ (exp x) (+ (expm1 (- x)) -1.0)) (- (exp (- x)) 2.0)) (fma (- 1.0 (expm1 (- x))) (- (exp x)) (* (- 1.0 (expm1 (- x))) (exp x)))) (- 1.0 (expm1 (- x)))) (- (- 1.0 (expm1 (- x))) (exp x))))",
    "output_parens": 36,
    "avg_bits_err_input": 29.784773665693805,
    "avg_bits_err_output": 28.934069051997927,
    "avg_bits_err_improve": 0.8507046136958785,
    "time": 24097.157958984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (/ (if (!= (/ 1.0 (+ x -1.0)) 0.0) (/ (/ (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))) (+ x -1.0)) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0)))) (+ x -1.0)) (/ 1.0 (+ x -1.0))) (+ (- (/ 1.0 (+ 1.0 x)) (/ 2.0 x)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 39,
    "avg_bits_err_input": 9.6849076618687,
    "avg_bits_err_output": 9.691240516442859,
    "avg_bits_err_improve": -0.006332854574159441,
    "time": 28285.086181640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (/ (sin (+ x eps)) (if (!= (cos (+ x eps)) 0.0) (/ (* (cos (+ x eps)) (cos (+ x eps))) (cos (+ x eps))) (cos (+ x eps)))) (tan x))",
    "output_parens": 19,
    "avg_bits_err_input": 37.45831012305874,
    "avg_bits_err_output": 37.55093173302624,
    "avg_bits_err_improve": -0.09262160996750168,
    "time": 22466.3740234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (if (!= (sqrt (+ x 1.0)) 0.0) (/ 1.0 (/ 1.0 (sqrt (+ x 1.0)))) (sqrt (+ x 1.0))) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 23,
    "avg_bits_err_input": 30.451153362379326,
    "avg_bits_err_output": 0.15684680468885218,
    "avg_bits_err_improve": 30.294306557690476,
    "time": 11365.62060546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (if (!= (+ (sin (+ x eps)) 1.0) 0.0) (/ (* (sin (+ x eps)) (+ (sin (+ x eps)) 1.0)) (+ (sin (+ x eps)) 1.0)) (sin (+ x eps))) (sin x))",
    "output_parens": 19,
    "avg_bits_err_input": 36.814638662066,
    "avg_bits_err_output": 36.83784441363682,
    "avg_bits_err_improve": -0.02320575157082061,
    "time": 23584.239990234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 20.194070471701124,
    "avg_bits_err_output": 20.04933011115343,
    "avg_bits_err_improve": 0.14474036054769357,
    "time": 19003.559326171875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(if (!= (+ (atan (+ 1.0 N)) (atan N)) 0.0) (+ (fma (- (/ (atan N) (+ (atan (+ 1.0 N)) (atan N)))) (atan N) (* (atan N) (/ (atan N) (+ (atan (+ 1.0 N)) (atan N))))) (* (+ (atan (+ 1.0 N)) (atan N)) (/ (- (atan (+ 1.0 N)) (atan N)) (+ (atan (+ 1.0 N)) (atan N))))) (- (atan (+ 1.0 N)) (atan N)))",
    "output_parens": 42,
    "avg_bits_err_input": 14.985983612324597,
    "avg_bits_err_output": 14.994385226551083,
    "avg_bits_err_improve": -0.008401614226485776,
    "time": 13462.306884765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.800148016001764,
    "avg_bits_err_output": 1.4198377343724662,
    "avg_bits_err_improve": 28.3803102816293,
    "time": 24403.93115234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(- (/ (* m (* (- 1.0 m) (- 1.0 m))) v) (- 1.0 m))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07936580507553277,
    "avg_bits_err_output": 0.07614644413776236,
    "avg_bits_err_improve": 0.0032193609377704074,
    "time": 13744.515380859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a (* b -0.25)) (+ (* a b) (if (!= (* a (+ b (+ b b))) 0.0) (/ 1.0 (/ 1.0 (* a (+ b (+ b b))))) (* a (+ b (+ b b))))))",
    "output_parens": 18,
    "avg_bits_err_input": 16.951481687521348,
    "avg_bits_err_output": 0.3114133468827524,
    "avg_bits_err_improve": 16.640068340638596,
    "time": 13095.864013671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (if (!= (/ angle 180.0) 0.0) (/ 1.0 (/ 1.0 (/ angle 180.0))) (/ angle 180.0))))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 17,
    "avg_bits_err_input": 20.634345486172702,
    "avg_bits_err_output": 20.654143553129465,
    "avg_bits_err_improve": -0.01979806695676345,
    "time": 36909.5693359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (sin (* PI (/ angle 180.0))) (* (cos (* PI (/ angle 180.0))) (* -2.0 (- (pow a 2.0) (pow b 2.0)))))",
    "output_parens": 12,
    "avg_bits_err_input": 31.456268841423093,
    "avg_bits_err_output": 31.45688763161242,
    "avg_bits_err_improve": -0.000618790189328422,
    "time": 43646.30517578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* angle (/ PI 180.0)))) 2.0) (pow (* b (cos (* angle (/ PI 180.0)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 21.348467854042926,
    "avg_bits_err_output": 21.31467494345014,
    "avg_bits_err_improve": 0.033792910592786995,
    "time": 44599.9814453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1812550362151282,
    "avg_bits_err_output": 0.1812550362151282,
    "avg_bits_err_improve": 0,
    "time": 14002.406982421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (* (tan x) (tan x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.32299789178787647,
    "avg_bits_err_output": 0.31375567096001583,
    "avg_bits_err_improve": 0.009242220827860637,
    "time": 18889.465087890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13271936093777043,
    "avg_bits_err_output": 0.13271936093777043,
    "avg_bits_err_improve": 0,
    "time": 19008.687255859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi2) (* (cos phi1) (cos (- lambda1 lambda2))) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.845404614420108,
    "avg_bits_err_output": 16.845690967958888,
    "avg_bits_err_improve": -0.00028635353877959346,
    "time": 32009.890380859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (- (* b b) (* c (* a -4.0))) 0.0) (/ (- (* (* b b) (* b b)) (* a (* c (* (* c a) 16.0)))) (- (* b b) (* c (* a -4.0)))) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 41,
    "avg_bits_err_input": 52.64142193928883,
    "avg_bits_err_output": 0.18453101562950716,
    "avg_bits_err_improve": 52.45689092365932,
    "time": 27409.4150390625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma b b (* a (* c -4.0))))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* a (* c -4.0))))))) (- (sqrt (fma b b (* a (* c -4.0)))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 28.61555811155753,
    "avg_bits_err_output": 0.33421031937679585,
    "avg_bits_err_improve": 28.281347792180732,
    "time": 24321.791259765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 43.974908201120016,
    "avg_bits_err_output": 0.23479306133022007,
    "avg_bits_err_improve": 43.74011513978979,
    "time": 29560.343505859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.46880819558325,
    "avg_bits_err_output": 21.8299638637294,
    "avg_bits_err_improve": 12.63884433185385,
    "time": 21474.8603515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (+ (* (cos phi1) (cos phi1)) (* (cos phi1) (* (cos (- lambda1 lambda2)) (cos phi2)))) (cos phi1)) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 26,
    "avg_bits_err_input": 0.9314431385492803,
    "avg_bits_err_output": 0.9503445315104178,
    "avg_bits_err_improve": -0.018901392961137464,
    "time": 28700.741943359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (+ (/ 1.0 (+ -2.0 (/ 4.0 (- -1.0 (exp (* x -2.0)))))) (/ (- 1.0 (/ 8.0 (+ (exp (* -4.0 x)) (fma 2.0 (exp (* x -2.0)) 1.0)))) (+ -2.0 (/ 4.0 (- -1.0 (exp (* x -2.0))))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 33,
    "avg_bits_err_input": 29.52380263861097,
    "avg_bits_err_output": 29.493925811279937,
    "avg_bits_err_improve": 0.029876827331033695,
    "time": 20798.4091796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(- (/ (expm1 (+ x x)) (+ 1.0 (exp (+ x x)))) 0.0)",
    "output_parens": 7,
    "avg_bits_err_input": 58.12213032889227,
    "avg_bits_err_output": 0.7642193609377705,
    "avg_bits_err_improve": 57.357910967954496,
    "time": 18095.381591796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (/ (expm1 (+ x x)) (exp x)) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 57.996967362018786,
    "avg_bits_err_output": 0.037521240625180294,
    "avg_bits_err_improve": 57.959446121393604,
    "time": 10697.78173828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(if (!= (- (/ -2.0 (+ (exp x) (exp (- x)))) 4.0) 0.0) (/ (fma (- 2.0 (/ -2.0 (+ (exp x) (exp (- x))))) (- 2.0 (/ -2.0 (+ (exp x) (exp (- x))))) -4.0) (- (/ 2.0 (+ (exp x) (exp (- x)))) -4.0)) (/ 2.0 (+ (exp x) (exp (- x)))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.008323120312590145,
    "avg_bits_err_output": 0.1715434699051663,
    "avg_bits_err_improve": -0.16322034959257617,
    "time": 4792.109130859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 32.07419812031259,
    "avg_bits_err_output": 32.07419812031259,
    "avg_bits_err_improve": 0,
    "time": 6168.539794921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (* (/ 2.0 (- 1.0 x)) x)))",
    "output_parens": 5,
    "avg_bits_err_input": 58.596442739326356,
    "avg_bits_err_output": 0.024740601562950725,
    "avg_bits_err_improve": 58.5717021377634,
    "time": 17717.111328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.020049039677847345,
    "avg_bits_err_output": 0.020049039677847345,
    "avg_bits_err_improve": 0,
    "time": 3585.379638671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12707312031259016,
    "avg_bits_err_output": 0.12707312031259016,
    "avg_bits_err_improve": 0,
    "time": 19454.527099609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (* (tan t) (/ (- eh) ew))))) (* (sin t) (* eh (sin (atan (* (tan t) (/ (- eh) ew))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1242712406251803,
    "avg_bits_err_output": 0.1241462406251803,
    "avg_bits_err_improve": 0.0001250000000000001,
    "time": 25070.40185546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 38.40633293832862,
    "avg_bits_err_output": 3.608744908494849,
    "avg_bits_err_improve": 34.79758802983377,
    "time": 28177.982421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- (/ a a) (* (/ b a) (/ b a)))))",
    "output_parens": 7,
    "avg_bits_err_input": 15.024248602497597,
    "avg_bits_err_output": 0.010180367936981093,
    "avg_bits_err_improve": 15.014068234560616,
    "time": 7156.155517578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (if (!= (* (sin delta) (* (cos phi1) (cos theta))) 0.0) (/ (* (cos theta) (* (* (sin delta) (cos phi1)) (* (sin delta) (* (cos phi1) (cos theta))))) (* (sin delta) (* (cos phi1) (cos theta)))) (* (sin delta) (* (cos phi1) (cos theta)))))))))))",
    "output_parens": 45,
    "avg_bits_err_input": 0.1503200559205525,
    "avg_bits_err_output": 0.14980342985801387,
    "avg_bits_err_improve": 0.0005166260625386332,
    "time": 34366.010986328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* b b) 0.0) (/ (+ (* (* b b) (* b b)) (* (* b b) (* c (* a -3.0)))) (* b b)) (fma c (* a -3.0) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 37,
    "avg_bits_err_input": 52.66005239941638,
    "avg_bits_err_output": 0.181832895316917,
    "avg_bits_err_improve": 52.478219504099464,
    "time": 25415.458984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (if (!= (* c (* a -3.0)) 0.0) (/ (fma (* c (* a -3.0)) (* c (* a -3.0)) (* (* b b) (* c (* a -3.0)))) (* c (* a -3.0))) (fma c (* a -3.0) (* b b)))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 40,
    "avg_bits_err_input": 28.78284198433713,
    "avg_bits_err_output": 0.3494439662537792,
    "avg_bits_err_improve": 28.43339801808335,
    "time": 26015.498291015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 24,
    "avg_bits_err_input": 44.025899448391854,
    "avg_bits_err_output": 0.24126466250649,
    "avg_bits_err_improve": 43.784634785885366,
    "time": 25325.958251953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (sqrt (fma b b (* (* a c) -3.0))) 0.0) (/ (* (sqrt (fma b b (* (* a c) -3.0))) (- (sqrt (fma b b (* (* a c) -3.0))) b)) (sqrt (fma b b (* (* a c) -3.0)))) (- (sqrt (fma b b (* (* a c) -3.0))) b)) (* 3.0 a))",
    "output_parens": 28,
    "avg_bits_err_input": 34.50402994997815,
    "avg_bits_err_output": 34.56596038273819,
    "avg_bits_err_improve": -0.061930432760043175,
    "time": 24003.5048828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (log1p (expm1 (sin (- lambda1 lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (log (+ 1.0 (expm1 (cos (- lambda1 lambda2))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 12.948513061722045,
    "avg_bits_err_output": 12.968778033732299,
    "avg_bits_err_improve": -0.020264972010254567,
    "time": 35241.775390625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- (+ x -1.0) (* x (/ x (- x -1.0))))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.37113755413338,
    "avg_bits_err_output": 0.4836707457368143,
    "avg_bits_err_improve": 28.887466808396567,
    "time": 24409.501220703125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (+ (/ 1.0 (+ x -1.0)) (/ x (+ 2.0 (+ x x)))) (/ x (+ 2.0 (+ x x))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.011125,
    "avg_bits_err_output": 0.052197071662396045,
    "avg_bits_err_improve": -0.04107207166239604,
    "time": 5643.75927734375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (- 0.0 (/ 2.0 (+ x -1.0))) (+ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.321671084054008,
    "avg_bits_err_output": 0.074625,
    "avg_bits_err_improve": 14.24704608405401,
    "time": 16984.079833984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C)) (* (+ (pow B 2.0) (* (* A C) -4.0)) (* F -2.0)))) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 52.16865161148619,
    "avg_bits_err_output": 51.865860122799106,
    "avg_bits_err_improve": 0.3027914886870846,
    "time": 36707.083740234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= A -3.45e+162) 0.0 (* 180.0 (/ (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) PI)))",
    "output_parens": 13,
    "avg_bits_err_input": 30.0025210089891,
    "avg_bits_err_output": 27.960408270583486,
    "avg_bits_err_improve": 2.0421127384056135,
    "time": 27014.233154296875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (* (* F (- (* 2.0 (pow B 2.0)) (* (* A C) 8.0))) (if (!= (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) 0.0) (/ (+ (pow B 2.0) (+ (pow (- A C) 2.0) (* (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C)))) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))) (+ (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C))))) (- (* 4.0 (* A C)) (pow B 2.0)))",
    "output_parens": 45,
    "avg_bits_err_input": 52.36921926210302,
    "avg_bits_err_output": 52.14611128664866,
    "avg_bits_err_improve": 0.22310797545436145,
    "time": 39338.12353515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 1.0) 0.0) (/ (* (- (+ (cbrt (/ g (+ a a))) 2.0) 1.0) (cbrt (/ g (+ a a)))) (+ (cbrt (/ g (+ a a))) 1.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.690131836924849,
    "avg_bits_err_output": 15.711152231441737,
    "avg_bits_err_improve": -0.02102039451688853,
    "time": 38104.982421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (- g) 0.0) (* (/ (- (if (!= 0.0 0.0) 0.0 (sqrt (- (* g g) (* h h)))) g) g) (/ (* g g) g)) (- (sqrt (fma g g (* h (- h)))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 32,
    "avg_bits_err_input": 35.53274624010303,
    "avg_bits_err_output": 35.48681697599752,
    "avg_bits_err_improve": 0.045929264105510015,
    "time": 14513.846435546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (log1p (expm1 (cos (fma PI 0.6666666666666666 (- (exp (log1p (/ (acos (/ g (- h))) 3.0))) 1.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.9904251890708848,
    "avg_bits_err_output": 0.988005264069442,
    "avg_bits_err_improve": 0.0024199250014428353,
    "time": 10121.15087890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(expm1 (log1p (/ (exp a) (+ (exp a) (exp b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.7035212406251803,
    "avg_bits_err_output": 0.709389285939213,
    "avg_bits_err_improve": -0.005868045314032733,
    "time": 6214.580322265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-265) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b2) (/ a2 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+304) (/ (* a1 a2) (* b1 b2)) (* (/ 1.0 b1) (* a1 (/ a2 b2)))))))",
    "output_parens": 37,
    "avg_bits_err_input": 11.326408975029926,
    "avg_bits_err_output": 3.0058520370989057,
    "avg_bits_err_improve": 8.32055693793102,
    "time": 8480.712158203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3967590118918804,
    "avg_bits_err_output": 0.35021599005682036,
    "avg_bits_err_improve": 0.04654302183506004,
    "time": 8219.111572265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ (* x x) 1.0))) 0.02) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x)))) (if (<= (+ x (sqrt (+ (* x x) 1.0))) 50000.0) (log1p (if (!= (- (- 1.0 x) (hypot 1.0 x)) 0.0) (/ 1.0 (/ 1.0 (+ x (+ (hypot 1.0 x) -1.0)))) (+ x (+ (hypot 1.0 x) -1.0)))) (log (if (!= (- (hypot 1.0 x) x) 0.0) (/ 1.0 (- (hypot 1.0 x) x)) (+ x (hypot 1.0 x))))))",
    "output_parens": 46,
    "avg_bits_err_input": 52.82564529594612,
    "avg_bits_err_output": 0.4286866714530558,
    "avg_bits_err_improve": 52.39695862449306,
    "time": 13861.837158203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.740093080754705,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.740093080754705,
    "time": 1931.387939453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (- (/ (/ 1.0 (+ 1.0 x)) (+ 1.0 x)) (* (/ x (+ 1.0 x)) (/ x (+ 1.0 x)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.01475,
    "avg_bits_err_output": 0.014625,
    "avg_bits_err_improve": 0.00012499999999999838,
    "time": 11212.16748046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1332.6826171875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= w -1.4e-38) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* w (* (* r r) (* (/ w (- 1.0 v)) (- 0.375 (* v 0.25))))) 4.5)) (if (<= w 5e-28) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* r (* w (* (* w (/ r (- 1.0 v))) (- 0.375 (* v 0.25))))) 4.5)) (- (+ 3.0 (/ 2.0 (* r r))) (+ (* w (* (* r r) (* (/ w (- 1.0 v)) (- 0.375 (* v 0.25))))) 4.5))))",
    "output_parens": 43,
    "avg_bits_err_input": 12.980985044843623,
    "avg_bits_err_output": 0.4658492408313421,
    "avg_bits_err_improve": 12.51513580401228,
    "time": 28313.737060546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (- (* x1 (* x1 3.0)) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (+ x1 (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (+ (* (* x1 x1) (* (/ (- x1 (fma 3.0 (* x1 x1) (* 2.0 x2))) (fma x1 x1 1.0)) -4.0)) (* -6.0 (* x1 x1))))))))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.5128586979480503,
    "avg_bits_err_output": 0.28108619381872013,
    "avg_bits_err_improve": 0.23177250412933015,
    "time": 66657.95874023438,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ v (+ t1 (+ t1 (+ u u)))) (* t1 -2.0)) (+ t1 u))",
    "output_parens": 8,
    "avg_bits_err_input": 18.39720575079531,
    "avg_bits_err_output": 1.4225096001985036,
    "avg_bits_err_improve": 16.97469615059681,
    "time": 6791.893798828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.23615584257481162,
    "avg_bits_err_output": 0.18730432343849157,
    "avg_bits_err_improve": 0.04885151913632005,
    "time": 6708.852783203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003625,
    "avg_bits_err_output": 0.003625,
    "avg_bits_err_improve": 0,
    "time": 2374.049072265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* (/ (- (/ 0.5 a) (/ 0.5 b)) (* a (/ 1.0 a))) PI) (- b a)) (+ a b))",
    "output_parens": 11,
    "avg_bits_err_input": 14.242238088516295,
    "avg_bits_err_output": 0.31623919915275905,
    "avg_bits_err_improve": 13.925998889363536,
    "time": 16816.7177734375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (expm1 (log1p (exp (fma eps x (- x))))) (+ (- (exp (- (fma eps x x))) (/ (exp (- (fma eps x x))) eps)) (/ (exp (- (* eps x) x)) eps))) 2.0)",
    "output_parens": 20,
    "avg_bits_err_input": 30.23530296898333,
    "avg_bits_err_output": 25.40569094412109,
    "avg_bits_err_improve": 4.829612024862239,
    "time": 22434.91552734375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (fma (+ 2.0 (/ -2.0 (+ t (/ t t)))) (+ 2.0 (/ -2.0 (+ t (/ t t)))) 2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.019,
    "avg_bits_err_output": 0.004375,
    "avg_bits_err_improve": 0.014624999999999999,
    "time": 8184.9375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (- (* (+ 2.0 (/ -2.0 (+ t (/ t t)))) (+ 2.0 (/ -2.0 (+ t (/ t t))))) (- -2.0 (* (+ 2.0 (/ -2.0 (+ t (/ t t)))) (+ 2.0 (/ -2.0 (+ t (/ t t))))))) (+ 2.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ t (/ t t)))) (+ 4.0 (/ -4.0 (+ t (/ t t))))))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.022625,
    "avg_bits_err_output": 0.005865601562950723,
    "avg_bits_err_improve": 0.016759398437049277,
    "time": 20059.385498046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (+ 1.0 (/ (* (/ (* 2.0 t) (+ t 1.0)) (* t 4.0)) (+ t 1.0)))) (+ 4.0 (/ (* (/ (* 2.0 t) (+ t 1.0)) (* t 4.0)) (+ t 1.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.04875,
    "avg_bits_err_output": 0.109875,
    "avg_bits_err_improve": -0.061125,
    "time": 16893.966064453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3640.359130859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 7633.855712890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2540.49267578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.847342034684209,
    "avg_bits_err_output": 0.2395,
    "avg_bits_err_improve": 7.607842034684209,
    "time": 29041.83740234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.638903356860634,
    "avg_bits_err_output": 7.638903356860634,
    "avg_bits_err_improve": 0,
    "time": 17555.026123046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 16.03787629900214,
    "avg_bits_err_output": 16.03787629900214,
    "avg_bits_err_improve": 0,
    "time": 16634.412353515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(- (* (exp (log1p (cos x))) (if (!= (exp (* x (* x 10.0))) 0.0) (/ 1.0 (/ 1.0 (exp (* x (* x 10.0))))) (exp (* x (* x 10.0))))) (if (!= (exp (* x (* x 10.0))) 0.0) (/ 1.0 (exp (* x (* x -10.0)))) (exp (* x (* x 10.0)))))",
    "output_parens": 30,
    "avg_bits_err_input": 3.5614595501176867,
    "avg_bits_err_output": 3.6196176640827895,
    "avg_bits_err_improve": -0.05815811396510284,
    "time": 19085.789306640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(if (!= (* (/ (* (fma x x 1.0) 2.0) (* (fma x x 1.0) 2.0)) (/ x (fma x x 1.0))) 0.0) (- (/ (/ (- x 0.0) x) (+ x (/ 1.0 x))) 0.0) (/ x (fma x x 1.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 15.11125884618631,
    "avg_bits_err_output": 0.09119812031259014,
    "avg_bits_err_improve": 15.02006072587372,
    "time": 9993.845947265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.42939066357538,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.42939066357538,
    "time": 5708.91943359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.73041824971003,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 38.729918249710025,
    "time": 3865.63134765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.245875,
    "avg_bits_err_improve": 63.754125,
    "time": 14235.174072265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.8432546466958,
    "avg_bits_err_output": 0.4151842109406551,
    "avg_bits_err_improve": 61.428070435755146,
    "time": 8481.74072265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (+ (/ b -2.0) (+ (/ b -2.0) (- (sqrt (fma b b (* a (* c -4.0))))))) (* a 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 34.47193849760178,
    "avg_bits_err_output": 34.475571868015265,
    "avg_bits_err_improve": -0.0036333704134818845,
    "time": 27776.6494140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (- (- (sqrt (fma a (* c -4.0) (* b b)))) b) 0.0) (* (/ (* c -4.0) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) a) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 34.46880819558325,
    "avg_bits_err_output": 21.8299638637294,
    "avg_bits_err_improve": 12.63884433185385,
    "time": 23971.25244140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2933.273681640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.95170034462739,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 39.94070034462739,
    "time": 9201.463134765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.466781533013744,
    "avg_bits_err_output": 20.466781533013744,
    "avg_bits_err_improve": 0,
    "time": 6888.796142578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ c (+ d a))) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6390114363130643,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6390114363130643,
    "time": 9969.14990234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03625,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.035124999999999997,
    "time": 5137.11767578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.020969360937770437,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 0.010844360937770437,
    "time": 3356.74609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x (* x x)) (* x x))",
    "output_parens": 4,
    "avg_bits_err_input": 0.015,
    "avg_bits_err_output": 0.015,
    "avg_bits_err_improve": 0,
    "time": 2429.608642578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00125,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 0,
    "time": 1423.826416015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ b (+ c a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40246729375396656,
    "avg_bits_err_output": 0.235,
    "avg_bits_err_improve": 0.16746729375396657,
    "time": 4795.026611328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(if (!= (+ (* (cos x) 0.25) (- (/ (cos x) -2.0) (fma (cos x) 0.25 -1.0))) 0.0) (/ (* (+ 1.0 (- (/ (cos x) -2.0) (* (cos x) 0.5))) (+ (/ (cos x) -2.0) 1.0)) (+ (* (cos x) 0.25) (- (/ (cos x) -2.0) (fma (cos x) 0.25 -1.0)))) (+ 1.0 (- (/ (cos x) -2.0) (* (cos x) 0.5))))",
    "output_parens": 35,
    "avg_bits_err_input": 29.91012317378537,
    "avg_bits_err_output": 29.910123332119824,
    "avg_bits_err_improve": -1.5833445488055986e-07,
    "time": 14200.91015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.34135249968183,
    "avg_bits_err_output": 0.29389624062518027,
    "avg_bits_err_improve": 24.04745625905665,
    "time": 11208.83544921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (- (tan x))) 0.0) (/ (fma (/ (sin x) (- (tan x))) (/ x (- (tan x))) (* (/ x (- (tan x))) (/ x (tan x)))) (/ x (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 27,
    "avg_bits_err_input": 30.08428995822381,
    "avg_bits_err_output": 30.092240612356886,
    "avg_bits_err_improve": -0.00795065413307583,
    "time": 32911.380126953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007792481250360578,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.0071674812503605785,
    "time": 2260.637939453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (* 100.0 (/ (pow (+ (/ i n) 1.0) n) (/ i n))) (/ 100.0 (/ i n))))",
    "output_parens": 24,
    "avg_bits_err_input": 47.80853741260593,
    "avg_bits_err_output": 13.642817875550493,
    "avg_bits_err_improve": 34.16571953705544,
    "time": 25928.22119140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(+ (* b (/ d (fma d d (* c c)))) (* a (if (!= (/ c (fma d d (* c c))) 0.0) (/ 1.0 (/ 1.0 (/ c (fma d d (* c c))))) (/ c (fma d d (* c c))))))",
    "output_parens": 19,
    "avg_bits_err_input": 26.722039910265075,
    "avg_bits_err_output": 23.903838068110215,
    "avg_bits_err_improve": 2.81820184215486,
    "time": 14083.136474609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* b (/ c (fma c c (* d d)))) (* a (if (!= (/ d (fma c c (* d d))) 0.0) (/ 1.0 (/ 1.0 (/ d (fma c c (* d d))))) (/ d (fma c c (* d d))))))",
    "output_parens": 19,
    "avg_bits_err_input": 26.48712388619866,
    "avg_bits_err_output": 23.591381246115105,
    "avg_bits_err_improve": 2.8957426400835544,
    "time": 16345.898681640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- (* ux maxCos) ux) 1.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.032125,
    "avg_bits_err_output": 0.020222849187341674,
    "avg_bits_err_improve": 0.011902150812658326,
    "time": 6390.510986328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.636810760200278,
    "avg_bits_err_output": 12.409360893862578,
    "avg_bits_err_improve": 1.2274498663377003,
    "time": 33756.662841796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (+ (- (- (- ux (* ux ux)) (- ux)) (* ux (* ux (* maxCos maxCos)))) (- (* maxCos (+ (- ux (* ux ux)) (- ux (* ux ux))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.665775788780483,
    "avg_bits_err_output": 0.3360432731307399,
    "avg_bits_err_improve": 13.329732515649743,
    "time": 32871.295654296875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (* ux (* (- 1.0 ux) maxCos)) zi (fma (* (cos (if (!= (* uy PI) 0.0) (* (* PI (+ uy uy)) (* uy (/ PI (* uy PI)))) (* uy (* 2.0 PI)))) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 41,
    "avg_bits_err_input": 0.3375869690582136,
    "avg_bits_err_output": 0.32899970996522915,
    "avg_bits_err_improve": 0.008587259092984467,
    "time": 54024.488037109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.19545630303031034,
    "avg_bits_err_output": 0.19545630303031034,
    "avg_bits_err_improve": 0,
    "time": 22554.929931640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (if (!= (sqrt (/ u1 (- 1.0 u1))) 0.0) (* (- (sqrt (/ u1 (- 1.0 u1)))) (* (- (sqrt (/ u1 (- 1.0 u1)))) (/ 1.0 (sqrt (/ u1 (- 1.0 u1)))))) (sqrt (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 25,
    "avg_bits_err_input": 0.5380415291800155,
    "avg_bits_err_output": 0.5600763049787103,
    "avg_bits_err_improve": -0.02203477579869484,
    "time": 25231.86572265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3137584999820968,
    "avg_bits_err_output": 0.3137584999820968,
    "avg_bits_err_improve": 0,
    "time": 19416.07666015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (* (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (- 1.0 (/ 1.0 (+ 1.0 (exp (/ PI s))))) (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ PI (- s)))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))))",
    "output_parens": 71,
    "avg_bits_err_input": 0.3369293245419511,
    "avg_bits_err_output": 0.32046211580191614,
    "avg_bits_err_improve": 0.01646720874003499,
    "time": 48492.51318359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(expm1 (log1p (/ 1.0 (+ (expm1 (/ x (- s))) 2.0))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.06315855607968592,
    "avg_bits_err_output": 0.07055312577954288,
    "avg_bits_err_improve": -0.007394569699856968,
    "time": 16868.857666015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (+ (exp (/ (fabs x) (- s))) 1.0)) (fma s (exp (/ (fabs x) (- s))) s))",
    "output_parens": 16,
    "avg_bits_err_input": 0.1565690076009342,
    "avg_bits_err_output": 0.13935683531959997,
    "avg_bits_err_improve": 0.01721217228133423,
    "time": 20203.017822265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (* (sin (* x PI)) (/ 1.0 (* x PI))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6513452135954878,
    "avg_bits_err_output": 0.7126935024392238,
    "avg_bits_err_improve": -0.061348288843736,
    "time": 23491.16845703125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ (- (exp (/ -2.0 v)) (* u (exp (/ -2.0 v)))) u)) 1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.16747158469483756,
    "avg_bits_err_output": 0.17007177287105102,
    "avg_bits_err_improve": -0.0026001881762134638,
    "time": 17896.802001953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 2.612310869104001,
    "avg_bits_err_output": 2.6111192718829748,
    "avg_bits_err_improve": 0.0011915972210263526,
    "time": 34516.697021484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_i (* cosTheta_O (/ (/ 0.5 (* v (exp (* sinTheta_O (/ sinTheta_i v))))) (if (!= (* v (sinh (/ 1.0 v))) 0.0) (/ 1.0 (/ (/ 1.0 v) (sinh (/ 1.0 v)))) (* v (sinh (/ 1.0 v)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.4526825504145021,
    "avg_bits_err_output": 0.37250224517506575,
    "avg_bits_err_improve": 0.08018030523943637,
    "time": 26697.85986328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (* (exp (/ (fma (- (* sinTheta_i sinTheta_O) (* cosTheta_i cosTheta_O)) -2.0 -1.0) (+ v v))) (exp (if (!= 0.6931 0.0) (+ 0.6931 (/ (/ -0.6931 (+ v v)) 0.6931)) (+ (/ -1.0 (+ v v)) 0.6931)))) (/ 0.5 v))",
    "output_parens": 20,
    "avg_bits_err_input": 0.10742929765524199,
    "avg_bits_err_output": 0.1023310660421302,
    "avg_bits_err_improve": 0.005098231613111792,
    "time": 16788.942626953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (+ (* alpha alpha) -1.0) PI) (if (!= (log (* alpha alpha)) 0.0) (/ 1.0 (/ 1.0 (log (* alpha alpha)))) (log (* alpha alpha)))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 18,
    "avg_bits_err_input": 0.46684033353438215,
    "avg_bits_err_output": 0.5386598448119077,
    "avg_bits_err_improve": -0.0718195112775255,
    "time": 25196.325439453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (* 3.0 s) (log1p (if (!= (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 0.0) (/ (- (fma u -1.3333333333333333 0.3333333333333333)) (fma u -1.3333333333333333 1.3333333333333333)) (- -1.0 (/ -1.0 (fma u -1.3333333333333333 1.3333333333333333))))))",
    "output_parens": 14,
    "avg_bits_err_input": 1.311871300643012,
    "avg_bits_err_output": 0.42888064063671943,
    "avg_bits_err_improve": 0.8829906600062927,
    "time": 28040.975341796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (if (!= (log (/ 1.0 (+ 1.0 (* u -4.0)))) 0.0) (* (- (/ 2.0 (/ 2.0 (log (/ 1.0 (fma u -4.0 1.0))))) (- (log (/ 1.0 (fma u -4.0 1.0))) (* (log (/ 1.0 (fma u -4.0 1.0))) (log (/ 1.0 (fma u -4.0 1.0)))))) (/ 1.0 (log (/ 1.0 (fma u -4.0 1.0))))) (log (/ 1.0 (+ 1.0 (* u -4.0))))))",
    "output_parens": 33,
    "avg_bits_err_input": 12.31327778622974,
    "avg_bits_err_output": 12.497441752652477,
    "avg_bits_err_improve": -0.18416396642273725,
    "time": 43756.613525390625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (* (* (* 6.0 PI) s) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.1346384577372028,
    "avg_bits_err_output": 0.13386590783470262,
    "avg_bits_err_improve": 0.0007725499025001692,
    "time": 25607.72021484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma n1_i (/ (sin (* u normAngle)) (sin normAngle)) (* (sin (* (- 1.0 u) normAngle)) (/ n0_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9343527535727689,
    "avg_bits_err_output": 0.7971990991663663,
    "avg_bits_err_improve": 0.1371536544064026,
    "time": 28768.978271484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (- (- (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* cosTheta (sqrt PI))) -1.0) 1.0) (exp (* (- cosTheta) cosTheta)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.7028325369087378,
    "avg_bits_err_output": 0.4751081446810973,
    "avg_bits_err_improve": 0.22772439222764052,
    "time": 20795.2958984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (if (!= (+ 2.0 (- (log (- 1.0 u1)))) 0.0) (/ (- 1.0 (- (- (* (log (- 1.0 u1)) (+ (log (- 1.0 u1)) -1.0)) (log (- 1.0 u1))) -1.0)) (+ 2.0 (- (log (- 1.0 u1))))) (log (- 1.0 u1))))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 30,
    "avg_bits_err_input": 13.395732373251557,
    "avg_bits_err_output": 13.501838654070392,
    "avg_bits_err_improve": -0.10610628081883533,
    "time": 34697.73193359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(log1p (log (+ 1.0 (expm1 (expm1 (* (sqrt (- (log (- 1.0 u1)))) (cos (* 2.0 (* PI u2)))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 13.434744053587542,
    "avg_bits_err_output": 13.46011214437063,
    "avg_bits_err_improve": -0.025368090783087993,
    "time": 21655.755615234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(+ (fma (- alpha) alpha (* alpha alpha)) (* (if (!= (log (- 1.0 u0)) 0.0) (/ 1.0 (/ 1.0 (log (- 1.0 u0)))) (log (- 1.0 u0))) (* alpha (- alpha))))",
    "output_parens": 17,
    "avg_bits_err_input": 14.340866284373869,
    "avg_bits_err_output": 14.270449370492083,
    "avg_bits_err_improve": 0.07041691388178606,
    "time": 20360.406982421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log (- 1.0 u0))) (+ (/ (/ cos2phi alphax) alphax) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.601033155138609,
    "avg_bits_err_output": 12.601633556684176,
    "avg_bits_err_improve": -0.0006004015455669531,
    "time": 20849.463134765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (if (!= (* PI l) 0.0) (/ 1.0 (/ (/ 1.0 PI) l)) (* PI l))) F) F))",
    "output_parens": 12,
    "avg_bits_err_input": 16.22565607336345,
    "avg_bits_err_output": 11.951843582867479,
    "avg_bits_err_improve": 4.2738124904959705,
    "time": 27671.034423828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21874060156295072,
    "avg_bits_err_output": 0.15557312031259016,
    "avg_bits_err_improve": 0.06316748125036056,
    "time": 14931.181884765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (* (/ (pow (fma 2.0 x (fma F F 2.0)) -0.5) (sin B)) F))",
    "output_parens": 10,
    "avg_bits_err_input": 13.570001173261042,
    "avg_bits_err_output": 10.523636011689776,
    "avg_bits_err_improve": 3.0463651615712664,
    "time": 19981.5849609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0))) (if (!= (exp (/ (* PI f) -4.0)) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (/ (* PI f) -4.0)))) (- (exp (* PI (/ f 4.0))) (exp (/ (* PI f) -4.0)))))) (* PI -0.25))",
    "output_parens": 32,
    "avg_bits_err_input": 61.5730331379407,
    "avg_bits_err_output": 1.7567183047328077,
    "avg_bits_err_improve": 59.81631483320789,
    "time": 130953.54663085938,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* (* l l) (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.57509323770458,
    "avg_bits_err_output": 35.15584973190019,
    "avg_bits_err_improve": 7.419243505804388,
    "time": 25400.83740234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (expm1 (log1p (pow (sin kx) 2.0))) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 12,
    "avg_bits_err_input": 4.150766573662981,
    "avg_bits_err_output": 4.164936498664424,
    "avg_bits_err_improve": -0.014169925001443318,
    "time": 27200.39501953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (/ 0.5 (sqrt (fma (pow (* 2.0 (/ l Om)) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)) 1.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.9363905959419778,
    "avg_bits_err_output": 0.9363905959419778,
    "avg_bits_err_improve": 0,
    "time": 12624.163330078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (/ (- 1.0 (- (+ 1.0 (pow (/ Om Omc) 2.0)) 1.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.298768464718043,
    "avg_bits_err_output": 10.298822566165446,
    "avg_bits_err_improve": -5.410144740380929e-05,
    "time": 11486.65869140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -1.05e+30) (sqrt (- (* (* 2.0 (* n U)) (- t (* (pow (/ l Om) 2.0) (* n (- U U*))))) (fma (* 2.0 l) (/ (* 2.0 (* l (* n U))) Om) 0.0))) (if (<= n -9.6e-268) (sqrt (- (- (* U (* (* 2.0 n) t)) (* (pow (/ l Om) 2.0) (* (* 2.0 (* n U)) (* n (- U U*))))) (* (* 2.0 (* n U)) (* 2.0 (* l (/ l Om)))))) (if (<= n 8e-270) (sqrt (- (* (* 2.0 (* n U)) (- t (* (pow (/ l Om) 2.0) (* n (- U U*))))) (fma (* 2.0 l) (fma (* 2.0 n) (* U (/ l Om)) 0.0) 0.0))) (if (<= n 4.5e+18) (sqrt (* U (* (* 2.0 n) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (sqrt (* (* 2.0 n) (* U (- t (fma n (* (pow (/ l Om) 2.0) (- U U*)) (* 2.0 (* l (/ l Om))))))))))))",
    "output_parens": 88,
    "avg_bits_err_input": 35.01707994436509,
    "avg_bits_err_output": 32.10718787666413,
    "avg_bits_err_improve": 2.909892067700966,
    "time": 44362.43994140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ 2.0 (* (tan k) (/ (sin k) l))) (* (pow t 3.0) (/ (pow (/ k t) 2.0) l)))",
    "output_parens": 11,
    "avg_bits_err_input": 47.900483413567684,
    "avg_bits_err_output": 36.66449802329885,
    "avg_bits_err_improve": 11.235985390268837,
    "time": 41936.704345703125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ (/ 2.0 (sin k)) (/ (* (tan k) (/ (pow t 3.0) l)) l)) (+ 2.0 (pow (/ k t) 2.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 32.95536768404197,
    "avg_bits_err_output": 28.58583436447931,
    "avg_bits_err_improve": 4.369533319562656,
    "time": 29572.462890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (* (+ (* a2 a2) (* a1 a1)) (cos th)) (sqrt 2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5071832734586856,
    "avg_bits_err_output": 0.4690484984543582,
    "avg_bits_err_improve": 0.03813477500432744,
    "time": 23345.755126953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (- 1.0 (exp (log1p (pow (* 2.0 (* PI n)) (* k -0.5))))) (- (/ (sqrt (* 2.0 (* PI n))) (sqrt k))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.5371243047279676,
    "avg_bits_err_output": 0.580509019209848,
    "avg_bits_err_improve": -0.043384714481880415,
    "time": 18346.697509765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(fma (* (expm1 (+ l l)) (exp (- l))) (* J (cos (/ K 2.0))) U)",
    "output_parens": 9,
    "avg_bits_err_input": 17.263152104342474,
    "avg_bits_err_output": 0.1371580828133113,
    "avg_bits_err_improve": 17.125994021529163,
    "time": 25479.598876953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (/ (if (!= (* K (/ (+ m n) 2.0)) 0.0) (* (/ K 4.0) (* (+ m n) (* (/ (+ m n) (* (+ m n) (/ K 4.0))) K))) (* K (+ m n))) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output_parens": 31,
    "avg_bits_err_input": 14.61046555967511,
    "avg_bits_err_output": 1.4700750989351288,
    "avg_bits_err_improve": 13.140390460739981,
    "time": 20243.014892578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 18.37494812031259,
    "avg_bits_err_output": 18.37494812031259,
    "avg_bits_err_improve": 0,
    "time": 23232.403076171875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= M -2.9e+72) (* w0 (sqrt (- 1.0 (* (pow (if (!= (* M (/ D (* d 4.0))) 0.0) (/ (+ (* (* M (/ D (* d 4.0))) (* M (/ D (* d 4.0)))) (* (* M (/ D (* d 4.0))) (* M (/ D (* d 4.0))))) (* M (/ D (* d 4.0)))) (* D (/ (/ M 2.0) d))) 2.0) (/ h l))))) (if (<= M -5e-54) (* w0 (sqrt (- 1.0 (/ (* (pow (if (!= (* M (/ D (* d 4.0))) 0.0) (* (/ (* M (+ D D)) D) (/ (- (exp (log1p (* D (/ M (* M 4.0))))) 1.0) d)) (* D (/ (/ M d) 2.0))) 2.0) h) l)))) (* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))))",
    "output_parens": 71,
    "avg_bits_err_input": 14.388696426827504,
    "avg_bits_err_output": 11.399776255877828,
    "avg_bits_err_improve": 2.988920170949676,
    "time": 21749.21875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(* c0 (sqrt (* (/ A (* l (+ V V))) 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 19.034376758014886,
    "avg_bits_err_output": 19.06201059760531,
    "avg_bits_err_improve": -0.02763383959042187,
    "time": 16050.496337890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= d -1000000.0) (* (/ c0 (* 2.0 w)) (fma (* d (* c0 (/ (/ d (* (* w h) D)) D))) 1.0 (sqrt (- (* (* d (* c0 (/ (/ d (* (* w h) D)) D))) (* d (* c0 (/ (/ d (* (* w h) D)) D)))) (* M M))))) (if (<= d 5e-117) (* (/ c0 (* 2.0 w)) (+ (* c0 (/ (/ (* (/ d D) (/ d D)) w) h)) (sqrt (* (- (* c0 (/ (/ (* (/ d D) (/ d D)) w) h)) M) (fma c0 (/ (/ (* (/ d D) (/ d D)) w) h) M))))) (* (/ c0 (* 2.0 w)) (+ (* c0 (* d (/ (/ d (* w D)) (* D h)))) (sqrt (* (fma d (* c0 (/ (/ d (* w D)) (* D h))) M) (fma c0 (* d (/ (/ d (* w D)) (* D h))) (- M))))))))",
    "output_parens": 80,
    "avg_bits_err_input": 59.680442275452414,
    "avg_bits_err_output": 53.74587591875589,
    "avg_bits_err_improve": 5.934566356696521,
    "time": 42807.958740234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) (- INFINITY)) (- (* (sqrt (/ d h)) (sqrt (/ d l))) (/ (* h (* (pow (* M (/ D (+ d d))) 2.0) (* (sqrt (/ d l)) (sqrt (/ d h))))) (+ l l))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l)))) 1e+263) (* (sqrt (/ d l)) (* (sqrt (/ d h)) (- 1.0 (* 0.5 (* (pow (/ (* D M) (+ d d)) 2.0) (/ h l)))))) (- (* (sqrt (/ d h)) (sqrt (/ d l))) (* h (* (sqrt (/ d l)) (* (sqrt (/ d h)) (/ (pow (/ (* M D) (+ d d)) 2.0) (+ l l))))))))",
    "output_parens": 85,
    "avg_bits_err_input": 26.930657258275332,
    "avg_bits_err_output": 24.82674226794037,
    "avg_bits_err_improve": 2.1039149903349603,
    "time": 41287.008056640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (if (!= (/ -0.5 (hypot 1.0 x)) 0.0) (/ (+ (/ -0.25 (hypot 1.0 x)) (/ (/ 0.25 (hypot 1.0 x)) (hypot 1.0 x))) (/ -0.5 (hypot 1.0 x))) (+ 0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 15.501832345748937,
    "avg_bits_err_output": 15.013476330569747,
    "avg_bits_err_improve": 0.4883560151791908,
    "time": 20965.35986328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9846981203125902,
    "avg_bits_err_output": 0.011021240625180291,
    "avg_bits_err_improve": 0.9736768796874099,
    "time": 3935.548583984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* v (* v 5.0))) PI) (sqrt (- 2.0 (* v (* v 6.0))))) (* (fma v v -1.0) (- t)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4177905635405,
    "avg_bits_err_output": 0.11130432343849159,
    "avg_bits_err_improve": 0.3064862401020084,
    "time": 20742.09326171875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.011594360937770434,
    "avg_bits_err_output": 0.011594360937770434,
    "avg_bits_err_improve": 0,
    "time": 7746.40380859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5259832657021648,
    "avg_bits_err_output": 0.5259832657021648,
    "avg_bits_err_improve": 0,
    "time": 7385.44482421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output_parens": 7,
    "avg_bits_err_input": 2.32511591314059,
    "avg_bits_err_output": 2.32511591314059,
    "avg_bits_err_improve": 0,
    "time": 9845.681884765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- mu (- Ec (+ Vef EDonor))) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Ev Vef) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0160842797537534,
    "avg_bits_err_output": 0.0160842797537534,
    "avg_bits_err_improve": 0,
    "time": 7120.12353515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.18960905390214727,
    "avg_bits_err_output": 0.18960905390214727,
    "avg_bits_err_improve": 0,
    "time": 14417.212646484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (+ (/ (* (* a a) (* a a)) a) (* a a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output_parens": 18,
    "avg_bits_err_input": 0.1865633717196659,
    "avg_bits_err_output": 0.18728758964941344,
    "avg_bits_err_improve": -0.0007242179297475559,
    "time": 19916.04931640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (if (!= (* (* b b) (* (+ 3.0 a) 4.0)) 0.0) (* (- (* b (/ b (* b b))) (/ 0.0 (fma a 4.0 12.0))) (fma b (* b (fma a 4.0 12.0)) (fma 4.0 (* a (- a (* a a))) (pow (fma b b (* a a)) 2.0)))) (fma 4.0 (fma b (* b (+ 3.0 a)) (* a (- a (* a a)))) (pow (fma b b (* a a)) 2.0))) 1.0)",
    "output_parens": 34,
    "avg_bits_err_input": 0.1860512990690369,
    "avg_bits_err_output": 0.3152450822518626,
    "avg_bits_err_improve": -0.1291937831828257,
    "time": 22552.357421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (+ (/ x (* (* (sqrt (fma x x (* 4.0 (* p p)))) 2.0) 2.0)) (if (!= (/ (/ x 2.0) (sqrt (fma 4.0 (* p p) (* x x)))) 0.0) (/ (/ (* x (+ x (+ x x))) (* 4.0 (sqrt (fma 4.0 (* p p) (* x x))))) x) (/ (+ x (+ x x)) (* 4.0 (sqrt (fma 4.0 (* p p) (* x x))))))))))",
    "output_parens": 37,
    "avg_bits_err_input": 13.049863174189971,
    "avg_bits_err_output": 13.243561391989836,
    "avg_bits_err_improve": -0.19369821779986474,
    "time": 16879.69384765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (/ (/ (expm1 (* 2.0 x)) (expm1 x)) (expm1 x)) (/ 1.0 (expm1 x))))",
    "output_parens": 10,
    "avg_bits_err_input": 41.581795527543186,
    "avg_bits_err_output": 0.04325,
    "avg_bits_err_improve": 41.538545527543185,
    "time": 9795.369140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(expm1 (log1p (/ (- x (sin x)) (- x (tan x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.616592616403562,
    "avg_bits_err_output": 31.627677375391702,
    "avg_bits_err_improve": -0.011084758988140209,
    "time": 26952.37646484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a)",
    "output_parens": 6,
    "avg_bits_err_input": 34.45107456429824,
    "avg_bits_err_output": 34.45107456429824,
    "avg_bits_err_improve": 0,
    "time": 16445.173828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) 0.0 (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 2e+301) (/ (- (- b_2) (sqrt (if (!= (- (* b_2 b_2) (+ (* a c) (* a (+ c (- c))))) 0.0) (- (* (* b_2 (/ b_2 (- (* b_2 b_2) (* a c)))) (- (* b_2 b_2) (* a c))) (* (* a c) (- (* a (/ c (- (* a c) (* b_2 b_2)))) (/ (* b_2 b_2) (- (* a c) (* b_2 b_2)))))) (- (* b_2 b_2) (* a c))))) a) 0.0))",
    "output_parens": 58,
    "avg_bits_err_input": 34.62861518651838,
    "avg_bits_err_output": 29.64108245816337,
    "avg_bits_err_improve": 4.98753272835501,
    "time": 17215.238037109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(if (<= x -2.0) (* (/ (- 1.0 (cos x)) x) (/ 1.0 x)) (if (<= x 0.00031) (+ (- (/ 1.0 (* x x)) (+ 1.0 (/ (cos x) (* x x)))) 1.0) (/ (/ (/ (/ (+ (cos x) -1.0) x) (/ 1.0 x)) x) (- x))))",
    "output_parens": 25,
    "avg_bits_err_input": 31.382620110201913,
    "avg_bits_err_output": 28.601376125501023,
    "avg_bits_err_improve": 2.7812439847008896,
    "time": 16969.791015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (expm1 (/ (log1p x) n)) (expm1 (/ (log x) n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.97007266637754,
    "avg_bits_err_output": 10.908847217896986,
    "avg_bits_err_improve": 22.061225448480556,
    "time": 32854.315673828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(if (!= (- (log1p N) (- (log N))) 0.0) (fma (log1p N) (/ (log1p N) (+ (log N) (log1p N))) (/ (* (log N) (log N)) (- (- (log N)) (log1p N)))) (- (log1p N) (log N)))",
    "output_parens": 24,
    "avg_bits_err_input": 29.545799160346263,
    "avg_bits_err_output": 29.5872986574802,
    "avg_bits_err_improve": -0.041499497133937524,
    "time": 13071.203369140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(- (/ (if (!= (+ 1.0 (/ 1.0 (/ (+ 1.0 x) x))) 0.0) (/ (if (!= (/ 1.0 (/ (+ x (+ (/ 1.0 x) 2.0)) x)) 0.0) (/ (/ (+ -1.0 (/ 1.0 (/ (+ x (+ (/ 1.0 x) 2.0)) x))) (/ (+ x (+ (/ 1.0 x) 2.0)) x)) (/ 1.0 (/ (+ x (+ (/ 1.0 x) 2.0)) x))) (+ -1.0 (/ 1.0 (/ (+ x (+ (/ 1.0 x) 2.0)) x)))) (+ 1.0 (/ 1.0 (/ (+ 1.0 x) x)))) (+ -1.0 (/ 1.0 (/ (+ 1.0 x) x)))) (* x (/ x x))) 0.0)",
    "output_parens": 49,
    "avg_bits_err_input": 14.45404023870485,
    "avg_bits_err_output": 14.442803238508672,
    "avg_bits_err_improve": 0.01123700019617857,
    "time": 21700.719970703125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (!= (+ 1.0 (cos x)) 0.0) (/ (+ (* (cos (+ x eps)) (+ 1.0 (cos x))) (- (log (+ 1.0 (expm1 (fma (cos x) (cos x) (cos x))))))) (+ 1.0 (cos x))) (- (cos (+ x eps)) (cos x)))",
    "output_parens": 25,
    "avg_bits_err_input": 40.45591082540549,
    "avg_bits_err_output": 40.47386106508835,
    "avg_bits_err_improve": -0.017950239682861024,
    "time": 24206.934326171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (!= (+ 1.0 (cbrt (+ x 1.0))) 0.0) (/ (+ (+ (* (+ 1.0 (cbrt (- x -1.0))) (- -1.0 (cbrt x))) (* (cbrt (- x -1.0)) (+ 1.0 (cbrt (- x -1.0))))) (+ 1.0 (cbrt (- x -1.0)))) (+ 1.0 (cbrt (+ x 1.0)))) (- (cbrt (+ x 1.0)) (cbrt x)))",
    "output_parens": 30,
    "avg_bits_err_input": 29.832082985190723,
    "avg_bits_err_output": 29.447793163690093,
    "avg_bits_err_improve": 0.38428982150063007,
    "time": 17912.428955078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(/ (- 1.0 (cos x)) (sin x))",
    "output_parens": 4,
    "avg_bits_err_input": 30.87957046301514,
    "avg_bits_err_output": 30.87957046301514,
    "avg_bits_err_improve": 0,
    "time": 21747.906494140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma b b (* (* a c) -4.0))) (- b)) 0.0) (if (!= (/ (* b b) (- (- b) (sqrt (fma b b (* (* a c) -4.0))))) 0.0) (/ (* (* (- (sqrt (fma b b (* (* a c) -4.0))) b) (/ (+ b (sqrt (fma b b (* (* a c) -4.0)))) (+ b (sqrt (fma b b (* (* a c) -4.0)))))) (/ (* b b) (- (- b) (sqrt (fma b b (* (* a c) -4.0)))))) (/ (* b b) (- (- b) (sqrt (fma b b (* (* a c) -4.0)))))) (* (- (sqrt (fma b b (* (* a c) -4.0))) b) (/ (+ b (sqrt (fma b b (* (* a c) -4.0)))) (+ b (sqrt (fma b b (* (* a c) -4.0))))))) (- (sqrt (fma b b (* (* a c) -4.0))) b)) (* a 2.0))",
    "output_parens": 77,
    "avg_bits_err_input": 34.453524917576104,
    "avg_bits_err_output": 34.45829872874823,
    "avg_bits_err_improve": -0.004773811172128717,
    "time": 30119.0810546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 35.01359457323689,
    "avg_bits_err_output": 35.03243792425048,
    "avg_bits_err_improve": -0.01884335101359369,
    "time": 19977.450927734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (if (!= (exp (log1p (log (- 1.0 x)))) 0.0) (+ (+ 0.0 (/ (log1p (- x)) 2.0)) (+ 0.0 (/ (log1p (- x)) 2.0))) (log (- 1.0 x))) (log1p x))",
    "output_parens": 19,
    "avg_bits_err_input": 61.617755739700655,
    "avg_bits_err_output": 0.021143299068130603,
    "avg_bits_err_improve": 61.596612440632526,
    "time": 24151.104248046875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(- (if (!= (fma n (- (log1p n) (log n)) (log1p n)) 0.0) (/ 1.0 (- (exp (log1p (/ 1.0 (fma n (- (log1p n) (log n)) (log1p n))))) 1.0)) (fma n (- (log1p n) (log n)) (log1p n))) 1.0)",
    "output_parens": 23,
    "avg_bits_err_input": 63.00704683582842,
    "avg_bits_err_output": 44.205324785667585,
    "avg_bits_err_improve": 18.801722050160834,
    "time": 11464.28369140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(log (if (!= (* (/ eps (+ 1.0 eps)) (/ eps (+ 1.0 eps))) 0.0) (/ (/ (- (* (/ eps eps) (+ eps -1.0)) (/ 0.0 (- eps -1.0))) (- -1.0 eps)) (* eps (/ 1.0 eps))) (/ (- 1.0 eps) (+ 1.0 eps))))",
    "output_parens": 22,
    "avg_bits_err_input": 58.510085398497004,
    "avg_bits_err_output": 58.49660326938788,
    "avg_bits_err_improve": 0.013482129109121388,
    "time": 17945.794921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ (if (!= (/ -1.0 (tan x)) 0.0) (* (/ -1.0 (tan x)) (/ (+ 1.0 (- (/ 1.0 x) (/ 1.0 (tan x)))) (/ -1.0 (tan x)))) (+ 1.0 (- (/ 1.0 x) (/ 1.0 (tan x))))) -1.0)",
    "output_parens": 21,
    "avg_bits_err_input": 59.818693213327315,
    "avg_bits_err_output": 59.904421875237226,
    "avg_bits_err_improve": -0.08572866190991135,
    "time": 29818.66650390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ b a))) (/ eps (expm1 (* eps a)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.298200043857314,
    "avg_bits_err_output": 28.61485663854178,
    "avg_bits_err_improve": 31.683343405315533,
    "time": 26190.928955078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ (exp x) (expm1 x))",
    "output_parens": 3,
    "avg_bits_err_input": 41.96361656350097,
    "avg_bits_err_output": 0.4385943609377705,
    "avg_bits_err_improve": 41.5250222025632,
    "time": 7551.180419921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.6588772568554,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.6580022568554,
    "time": 5027.888427734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.42017257535626,
    "avg_bits_err_output": 0.016070789202753646,
    "avg_bits_err_improve": 29.404101786153507,
    "time": 4535.0234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(- (- (- (expm1 x)) (expm1 (- x))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.97926091000864,
    "avg_bits_err_output": 29.008416665606124,
    "avg_bits_err_improve": 0.9708442444025174,
    "time": 20682.91845703125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.523050693013245,
    "avg_bits_err_output": 9.523050693013245,
    "avg_bits_err_improve": 0,
    "time": 33413.460693359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (- (/ (sin x) (+ (cos x) (cos x))) (/ (tan (+ x eps)) 2.0)) -2.0)",
    "output_parens": 10,
    "avg_bits_err_input": 36.559457049524056,
    "avg_bits_err_output": 36.55658334916315,
    "avg_bits_err_improve": 0.0028737003609080602,
    "time": 19536.593017578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(if (!= (+ (sqrt (+ x 1.0)) (sqrt x)) 0.0) (/ 1.0 (+ (sqrt (+ x 1.0)) (sqrt x))) (- (sqrt (+ x 1.0)) (sqrt x)))",
    "output_parens": 15,
    "avg_bits_err_input": 30.066230535009122,
    "avg_bits_err_output": 0.16254736875252399,
    "avg_bits_err_improve": 29.9036831662566,
    "time": 12588.572509765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(if (!= (+ (sin (+ x eps)) 1.0) 0.0) (/ (+ (- (* (sin (+ x eps)) (+ (sin (+ x eps)) 1.0)) (sin x)) (- (* (if (!= (sin (+ x eps)) 0.0) (/ 1.0 (/ 1.0 (sin (+ x eps)))) (sin (+ x eps))) (sin x)))) (+ (sin (+ x eps)) 1.0)) (- (sin (+ x eps)) (sin x)))",
    "output_parens": 35,
    "avg_bits_err_input": 37.50143438815844,
    "avg_bits_err_output": 37.57944435421284,
    "avg_bits_err_improve": -0.07800996605440247,
    "time": 26560.64111328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(- (pow x -0.5) (pow (+ x 1.0) -0.5))",
    "output_parens": 4,
    "avg_bits_err_input": 19.546716205344698,
    "avg_bits_err_output": 19.395065660574836,
    "avg_bits_err_improve": 0.15165054476986128,
    "time": 15574.63525390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(+ (exp (log1p (- (atan (+ N 1.0)) (atan N)))) -1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 14.54986387644225,
    "avg_bits_err_output": 14.559187200267424,
    "avg_bits_err_improve": -0.009323323825173091,
    "time": 12497.9921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.5427609228867,
    "avg_bits_err_output": 1.5133184183111608,
    "avg_bits_err_improve": 28.029442504575538,
    "time": 24451.18408203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07596240625180288,
    "avg_bits_err_output": 0.07862988750216346,
    "avg_bits_err_improve": -0.002667481250360579,
    "time": 17618.528076171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (* (- b) a))",
    "output_parens": 4,
    "avg_bits_err_input": 16.31332318650586,
    "avg_bits_err_output": 0.30214661719245783,
    "avg_bits_err_improve": 16.0111765693134,
    "time": 12206.884765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* (/ PI 180.0) angle))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.741136635939192,
    "avg_bits_err_output": 20.701424264739632,
    "avg_bits_err_improve": 0.039712371199559726,
    "time": 39427.908935546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (expm1 (log1p (cos (* PI (/ angle 180.0))))))",
    "output_parens": 14,
    "avg_bits_err_input": 31.095909298799665,
    "avg_bits_err_output": 31.09721243046924,
    "avg_bits_err_improve": -0.0013031316695766293,
    "time": 36634.190185546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* angle (/ PI 180.0)))) 2.0) (pow (* b (cos (* angle (/ PI 180.0)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.55448105433022,
    "avg_bits_err_output": 20.528625678219655,
    "avg_bits_err_improve": 0.025855376110566652,
    "time": 44413.24462890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (- 1.0 m) (* m (/ m v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17812744375108172,
    "avg_bits_err_output": 0.17349736350301956,
    "avg_bits_err_improve": 0.004630080248062163,
    "time": 15353.375244140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (* (tan x) (tan x))) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3237485555484409,
    "avg_bits_err_output": 0.3218775334255321,
    "avg_bits_err_improve": 0.0018710221229087942,
    "time": 18230.927001953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13684436093777044,
    "avg_bits_err_output": 0.13684436093777044,
    "avg_bits_err_improve": 0,
    "time": 16067.73291015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos (- lambda1 lambda2))) (cos phi2)))) R)",
    "output_parens": 11,
    "avg_bits_err_input": 16.749913700046047,
    "avg_bits_err_output": 16.741738043275998,
    "avg_bits_err_improve": 0.0081756567700495,
    "time": 34479.313232421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 52.24080678802017,
    "avg_bits_err_output": 0.17146485000288453,
    "avg_bits_err_improve": 52.06934193801729,
    "time": 27197.2548828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (* c (* a -4.0)) 0.0) (/ (+ (* a (* c (* (* c a) 16.0))) (* (* c a) (* -4.0 (* b b)))) (* c (* a -4.0))) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 38,
    "avg_bits_err_input": 28.163699049436563,
    "avg_bits_err_output": 0.3532182504011039,
    "avg_bits_err_improve": 27.81048079903546,
    "time": 23805.680908203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma c (* a -4.0) (* b b)))) 0.0) (* a (/ (* c -4.0) (+ b (sqrt (if (!= (* b b) 0.0) (/ (+ (* (* b b) (* b b)) (* a (* (* c -4.0) (* b b)))) (* b b)) (fma a (* c -4.0) (* b b))))))) (- (sqrt (fma c (* a -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 35,
    "avg_bits_err_input": 43.55315757788315,
    "avg_bits_err_output": 0.2569041519582849,
    "avg_bits_err_improve": 43.29625342592486,
    "time": 24453.8427734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ c (+ b (sqrt (fma c (* -4.0 a) (* b b))))) (* a -4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 34.47102289653146,
    "avg_bits_err_output": 22.26671408992815,
    "avg_bits_err_improve": 12.204308806603308,
    "time": 21905.786865234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (if (!= (cos phi1) 0.0) (/ (fma (cos phi1) (cos phi1) (* (cos (- lambda1 lambda2)) (* (cos phi1) (cos phi2)))) (cos phi1)) (fma (cos (- lambda1 lambda2)) (cos phi2) (cos phi1)))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.8806065906188587,
    "avg_bits_err_output": 0.8912975140071986,
    "avg_bits_err_improve": -0.010690923388339879,
    "time": 30628.716552734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(if (!= (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 0.0) (/ (if (!= (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))) 0.0) (/ (if (!= (+ 1.0 (/ 16.0 (* (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) 0.0) (/ (if (!= (+ 1.0 (/ 256.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))))) 0.0) (/ (- 1.0 (/ (/ (/ 65536.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0))))))) (+ 1.0 (/ 256.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))))) (- 1.0 (/ 256.0 (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (* (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))) (+ 1.0 (fma 2.0 (exp (* x -2.0)) (exp (* x -4.0)))))))))) (+ 1.0 (/ 16.0 (* (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))))) (- 1.0 (/ 16.0 (* (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)) (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0)))))) (+ 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) (- 1.0 (/ 4.0 (+ (exp (* x -4.0)) (fma 2.0 (exp (* x -2.0)) 1.0))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x)))))) (+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0))",
    "output_parens": 240,
    "avg_bits_err_input": 28.599473414399565,
    "avg_bits_err_output": 28.557923596973342,
    "avg_bits_err_improve": 0.041549817426222546,
    "time": 25191.082763671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(/ (expm1 (* x -2.0)) (- -1.0 (exp (* x -2.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 57.93453049033198,
    "avg_bits_err_output": 0.6235943609377705,
    "avg_bits_err_improve": 57.31093612939421,
    "time": 15099.257568359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (- (exp x)) (expm1 (* x -2.0))) 2.0)",
    "output_parens": 6,
    "avg_bits_err_input": 57.90369207397151,
    "avg_bits_err_output": 0.028823120312590145,
    "avg_bits_err_improve": 57.874868953658925,
    "time": 6479.127685546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(log (exp (/ 2.0 (+ (exp x) (exp (- x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.005948120312590145,
    "avg_bits_err_output": 0.1474378473087649,
    "avg_bits_err_improve": -0.14148972699617476,
    "time": 4056.64599609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 31.68993242895233,
    "avg_bits_err_output": 31.68993242895233,
    "avg_bits_err_improve": 0,
    "time": 4717.00146484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (log1p (/ x (/ (- 1.0 x) 2.0))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.502049688533155,
    "avg_bits_err_output": 0.01834436093777043,
    "avg_bits_err_improve": 58.48370532759539,
    "time": 15063.3095703125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.003625,
    "avg_bits_err_output": 0.003625,
    "avg_bits_err_improve": 0,
    "time": 3234.991943359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (sin t) (* ew (cos (atan (/ eh (* ew (tan t))))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.131875,
    "avg_bits_err_output": 0.132,
    "avg_bits_err_improve": -0.000125000000000014,
    "time": 23794.60791015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12189624062518029,
    "avg_bits_err_output": 0.12189624062518029,
    "avg_bits_err_improve": 0,
    "time": 24582.779052734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (- phi1 phi2)))",
    "output_parens": 8,
    "avg_bits_err_input": 39.14955991869289,
    "avg_bits_err_output": 3.616427319314048,
    "avg_bits_err_improve": 35.53313259937884,
    "time": 24690.712646484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (/ (* (+ a b) (/ (- a b) a)) a)))",
    "output_parens": 7,
    "avg_bits_err_input": 15.030912421810992,
    "avg_bits_err_output": 0.017375,
    "avg_bits_err_improve": 15.013537421810993,
    "time": 4980.46240234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (log1p (- (exp (- (cos delta) (* (sin phi1) (sin (asin (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))) 1.0))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.1634541690030238,
    "avg_bits_err_output": 0.19877721710998614,
    "avg_bits_err_improve": -0.035323048106962324,
    "time": 40385.38818359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 52.281141624971596,
    "avg_bits_err_output": 0.17519321311922348,
    "avg_bits_err_improve": 52.105948411852374,
    "time": 29427.0244140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 28.35602565152832,
    "avg_bits_err_output": 0.33801748282485006,
    "avg_bits_err_improve": 28.01800816870347,
    "time": 22452.489501953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (if (!= (- (sqrt (fma c (* a -3.0) (* b b))) (- b)) 0.0) (* (/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b))))) (* a 3.0)) (- (sqrt (fma c (* a -3.0) (* b b))) b)) (* 3.0 a))",
    "output_parens": 25,
    "avg_bits_err_input": 43.60290176876151,
    "avg_bits_err_output": 0.2408310316456947,
    "avg_bits_err_improve": 43.362070737115815,
    "time": 25927.92724609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (+ (* b -0.3333333333333333) (* (sqrt (+ (* b b) (* a (* c -3.0)))) 0.3333333333333333)) a)",
    "output_parens": 9,
    "avg_bits_err_input": 34.48780767584708,
    "avg_bits_err_output": 34.53140310312906,
    "avg_bits_err_improve": -0.043595427281978516,
    "time": 22880.89501953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (if (!= (* (cos phi1) (sin phi2)) 0.0) (/ 1.0 (/ (/ 1.0 (sin phi2)) (cos phi1))) (* (cos phi1) (sin phi2))) (* (sin phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output_parens": 25,
    "avg_bits_err_input": 13.212609150528868,
    "avg_bits_err_output": 13.226947676316446,
    "avg_bits_err_improve": -0.014338525787577439,
    "time": 35688.052978515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(- (/ (+ (/ x (- x -1.0)) (- x (+ (* x (/ x (- x -1.0))) 1.0))) (- 1.0 x)) (/ 2.0 (+ x -1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.079432701395508,
    "avg_bits_err_output": 0.4835627002237604,
    "avg_bits_err_improve": 28.595870001171747,
    "time": 18075.16015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(if (!= (/ x (+ x 1.0)) 0.0) (/ (+ (/ x (* (+ x -1.0) (/ x (+ x 1.0)))) (* x (/ x x))) (+ x 1.0)) (+ (/ x (+ x 1.0)) (/ 1.0 (+ x -1.0))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.018575564063671886,
    "avg_bits_err_improve": -0.007075564063671887,
    "time": 6290.04638671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ -2.0 (+ x -1.0)) (+ 1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.383260165823431,
    "avg_bits_err_output": 0.073,
    "avg_bits_err_improve": 14.310260165823431,
    "time": 17620.82666015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 1e+229) (/ (sqrt (* (+ (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) A) (- C)) (* (* (- (pow B 2.0) (* A (* 4.0 C))) F) -2.0))) (- (- (pow B 2.0) (* A (* 4.0 C))))) 0.0)",
    "output_parens": 45,
    "avg_bits_err_input": 52.48032292019452,
    "avg_bits_err_output": 50.964441432986696,
    "avg_bits_err_improve": 1.515881487207821,
    "time": 34141.687255859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(if (<= C 2.9e+165) (* 180.0 (log1p (expm1 (/ (atan (/ (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))) B)) PI)))) (/ (* (atan (/ 0.0 B)) 180.0) PI))",
    "output_parens": 19,
    "avg_bits_err_input": 29.428998426865522,
    "avg_bits_err_output": 27.189554310639213,
    "avg_bits_err_improve": 2.2394441162263092,
    "time": 25375.324951171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (sqrt (fma (fma 2.0 (pow B 2.0) (* A (* C -8.0))) (* F (+ C (+ A (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) 0.0)) (- (* A (* C 4.0)) (pow B 2.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 52.40359133940805,
    "avg_bits_err_output": 52.10549668205968,
    "avg_bits_err_improve": 0.29809465734837204,
    "time": 37767.67431640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(if (!= (+ (cbrt (/ g (+ a a))) 1.0) 0.0) (* (/ (cbrt (/ g (+ a a))) (+ (cbrt (/ g (+ a a))) 1.0)) (+ (cbrt (/ g (+ a a))) 1.0)) (cbrt (/ g (+ a a))))",
    "output_parens": 22,
    "avg_bits_err_input": 15.752350087011,
    "avg_bits_err_output": 15.754133169824312,
    "avg_bits_err_improve": -0.001783082813313186,
    "time": 31640.500732421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (cbrt (* (/ 0.5 a) (if (!= (+ g (sqrt (* (+ g h) (- g h)))) 0.0) (/ (* h h) (- (- g) (sqrt (* (+ g h) (- g h))))) (- (sqrt (* (+ g h) (- g h))) g)))) (cbrt (* (/ 0.5 a) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output_parens": 33,
    "avg_bits_err_input": 35.99520121547135,
    "avg_bits_err_output": 35.75336153620015,
    "avg_bits_err_improve": 0.24183967927119454,
    "time": 16566.441650390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (cos (/ (+ (* 2.0 PI) (acos (/ g (- h)))) 3.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9882127828190815,
    "avg_bits_err_output": 0.976075564063672,
    "avg_bits_err_improve": 0.012137218755409518,
    "time": 11256.2197265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ (exp a) (+ (exp a) (exp b)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.6085433791303934,
    "avg_bits_err_output": 0.6085433791303934,
    "avg_bits_err_improve": 0,
    "time": 2011.395263671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -5e+273) (/ (* a2 (/ a1 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-311) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+280) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.32111551295781,
    "avg_bits_err_output": 2.7238886900221684,
    "avg_bits_err_improve": 8.597226822935642,
    "time": 10689.224365234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4924154457670652,
    "avg_bits_err_output": 0.459125,
    "avg_bits_err_improve": 0.03329044576706519,
    "time": 8334.08544921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -250.0) (log (if (!= (- 1.0 (+ (+ x (hypot 1.0 x)) -1.0)) 0.0) (/ (- 1.0 (* (- x (- 1.0 (hypot 1.0 x))) (+ (+ x (hypot 1.0 x)) -1.0))) (- 1.0 (+ (+ x (hypot 1.0 x)) -1.0))) (+ x (hypot 1.0 x)))) (log1p (- x (- 1.0 (hypot 1.0 x)))))",
    "output_parens": 28,
    "avg_bits_err_input": 53.03431540410139,
    "avg_bits_err_output": 13.742978236899065,
    "avg_bits_err_improve": 39.29133716720233,
    "time": 17783.704833984375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.650665790699693,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.650665790699693,
    "time": 3396.848388671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (expm1 (log1p (sqrt (/ (- 1.0 x) (+ 1.0 x)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.018125,
    "avg_bits_err_improve": -0.003624999999999998,
    "time": 3238.744384765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1321.61181640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(- (+ 3.0 (/ 2.0 (* r r))) (+ (* (- 0.375 (* v 0.25)) (* (* w r) (* w (/ r (- 1.0 v))))) 4.5))",
    "output_parens": 13,
    "avg_bits_err_input": 12.898187306960708,
    "avg_bits_err_output": 0.6136209155037722,
    "avg_bits_err_improve": 12.284566391456936,
    "time": 19509.01220703125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(fma 3.0 (/ (- (fma x1 (* x1 3.0) (* x2 -2.0)) x1) (fma x1 x1 1.0)) (+ (fma x1 (* x1 x1) (fma (* x1 (* x1 3.0)) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (fma (* (* x1 2.0) (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0))) (- (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 3.0) (* (* x1 x1) (fma (/ (- (fma x1 (* x1 3.0) (* 2.0 x2)) x1) (fma x1 x1 1.0)) 4.0 -6.0)))))) (+ x1 x1)))",
    "output_parens": 47,
    "avg_bits_err_input": 0.5135698396923305,
    "avg_bits_err_output": 0.2927155833682913,
    "avg_bits_err_improve": 0.2208542563240392,
    "time": 66137.25219726562,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ v (+ t1 u)) (/ (- t1) (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 17.915628747042692,
    "avg_bits_err_output": 1.2893388056900368,
    "avg_bits_err_improve": 16.626289941352656,
    "time": 9149.86279296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (- 0.954929658551372 (* x (* x 0.12900613773279798))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.25346936093777045,
    "avg_bits_err_output": 0.18920996250072117,
    "avg_bits_err_improve": 0.06425939843704928,
    "time": 5154.462158203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0025,
    "avg_bits_err_output": 0.0025,
    "avg_bits_err_improve": 0,
    "time": 3065.5693359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(- (* (/ PI (- a b)) (/ 0.5 (* b (+ a b)))) (/ (/ PI (- a b)) (* (+ a a) (+ a b))))",
    "output_parens": 13,
    "avg_bits_err_input": 14.770976513200347,
    "avg_bits_err_output": 0.2626674615591572,
    "avg_bits_err_improve": 14.50830905164119,
    "time": 15552.84912109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (if (!= (/ (exp (- (- x (* eps x)))) eps) 0.0) (+ (exp (- (* x eps) x)) (+ (- (exp (- (fma eps x x))) (/ (exp (- (fma eps x x))) eps)) (/ (exp (- (* x eps) x)) eps))) (+ (/ (+ 1.0 (/ 1.0 eps)) (exp (- x (* eps x)))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x))))) 2.0)",
    "output_parens": 37,
    "avg_bits_err_input": 29.453644125620823,
    "avg_bits_err_output": 24.742989487706293,
    "avg_bits_err_improve": 4.71065463791453,
    "time": 19279.382568359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.011625,
    "avg_bits_err_output": 0.011625,
    "avg_bits_err_improve": 0,
    "time": 6309.463623046875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.01625,
    "avg_bits_err_output": 0.01625,
    "avg_bits_err_improve": 0,
    "time": 17094.0986328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ (/ (* t (* (/ t (+ t 1.0)) 8.0)) (+ t 1.0)) 2.0) (+ 4.0 (/ (* t (* (/ t (+ t 1.0)) 8.0)) (+ t 1.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.03925,
    "avg_bits_err_output": 0.094625,
    "avg_bits_err_improve": -0.055375,
    "time": 7910.081298828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3288.51171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(if (!= (* y (* y 2.0)) 0.0) (/ (* (* y 2.0) (- (* (* y 2.0) (* y y)) (* y (fma y (* y (* y y)) (* (pow x 4.0) -9.0))))) (* y (* y 2.0))) (- (* 9.0 (pow x 4.0)) (* y (* y (fma y y -2.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 6663.891845703125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output_parens": 7,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 52,
    "avg_bits_err_improve": 0,
    "time": 2788.30322265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.801530994643082,
    "avg_bits_err_output": 0.243,
    "avg_bits_err_improve": 7.558530994643082,
    "time": 28881.256103515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.8289289514031815,
    "avg_bits_err_output": 7.8289289514031815,
    "avg_bits_err_improve": 0,
    "time": 14046.50927734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output_parens": 4,
    "avg_bits_err_input": 16.614361036599533,
    "avg_bits_err_output": 16.614361036599533,
    "avg_bits_err_improve": 0,
    "time": 16948.10400390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(fma (exp (* 10.0 (* x x))) (* 2.0 (cos x)) (* (- (expm1 (* 10.0 (* x x))) -1.0) (- (cos x))))",
    "output_parens": 13,
    "avg_bits_err_input": 3.564018320784271,
    "avg_bits_err_output": 3.5645470062295717,
    "avg_bits_err_improve": -0.0005286854453006029,
    "time": 19395.45263671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(/ x (+ (* x x) 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 14.876132882244992,
    "avg_bits_err_output": 14.876132882244992,
    "avg_bits_err_improve": 0,
    "time": 12372.87060546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.65687027405402,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.65687027405402,
    "time": 4850.015380859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.03638582326905,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.03588582326905,
    "time": 5472.09423828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(+ (if (!= (* t 8.5e+307) 0.0) (* (* t -8.5e+307) (* -8.5e+307 (/ t (* t 8.5e+307)))) (* t 8.5e+307)) (+ (/ t 1.176470588235294e-308) -1.7e+308))",
    "output_parens": 12,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.258125,
    "avg_bits_err_improve": 63.741875,
    "time": 18968.530029296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325519148306,
    "avg_bits_err_output": 0.409061654691737,
    "avg_bits_err_improve": 61.43419353679132,
    "time": 6836.747314453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(/ (/ (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))) -2.0) a)",
    "output_parens": 8,
    "avg_bits_err_input": 35.01359457323689,
    "avg_bits_err_output": 35.03243792425048,
    "avg_bits_err_improve": -0.01884335101359369,
    "time": 21571.692626953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (if (!= (+ b (sqrt (fma a (* c -4.0) (* b b)))) 0.0) (* (/ c (+ b (sqrt (fma c (* -4.0 a) (* b b))))) (* a -4.0)) (- (sqrt (fma a (* c -4.0) (* b b))) b)) (* a 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 34.47102289653146,
    "avg_bits_err_output": 22.26671408992815,
    "avg_bits_err_improve": 12.204308806603308,
    "time": 24340.446044921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2646.8564453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.386030501860056,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 40.37503050186005,
    "time": 5200.759521484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- (* x x) (* y y)) (fma x x (* y y)))",
    "output_parens": 6,
    "avg_bits_err_input": 19.900819241230433,
    "avg_bits_err_output": 19.901463197678645,
    "avg_bits_err_improve": -0.000643956448211469,
    "time": 7711.549072265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ b (+ (+ d a) c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6717340797998848,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6717340797998848,
    "time": 8560.48388671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04275,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.04225,
    "time": 7779.7109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b b) (* a (+ b (+ a b))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02177124062518029,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0.01152124062518029,
    "time": 3014.864501953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* (* x x) (+ x 1.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.02254248125036058,
    "avg_bits_err_improve": -0.00916748125036058,
    "time": 2498.6640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 1579.76708984375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ b (+ c a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4040216171924582,
    "avg_bits_err_output": 0.230875,
    "avg_bits_err_improve": 0.17314661719245822,
    "time": 5452.839111328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(- 1.0 (cos x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.880607605573434,
    "avg_bits_err_output": 29.880607605573434,
    "avg_bits_err_improve": 0,
    "time": 10719.390869140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(if (!= (+ x (sqrt (- (* x x) eps))) 0.0) (/ eps (+ x (sqrt (- (* x x) eps)))) (- x (sqrt (- (* x x) eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 24.61180531814241,
    "avg_bits_err_output": 0.28675,
    "avg_bits_err_improve": 24.325055318142407,
    "time": 11128.48193359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(if (!= (/ x (- (tan x))) 0.0) (/ (+ (* (/ x (- (tan x))) (/ (- x (sin x)) (tan x))) (fma (- (fabs (/ x (tan x)))) (fabs (/ x (tan x))) (* (/ x (tan x)) (/ x (tan x))))) (/ x (- (tan x)))) (/ (- x (sin x)) (tan x)))",
    "output_parens": 35,
    "avg_bits_err_input": 30.371839472538547,
    "avg_bits_err_output": 30.369589130381552,
    "avg_bits_err_improve": 0.0022503421569943782,
    "time": 33092.9619140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006600919365257201,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.005725919365257201,
    "time": 2899.076171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (- (* 100.0 (/ (- (+ 1.0 (pow (+ 1.0 (/ i n)) n)) 1.0) (/ i n))) (if (!= (/ 100.0 (/ i n)) 0.0) (- (/ (/ 10000.0 (/ i n)) 100.0) 0.0) (/ 100.0 (/ i n)))))",
    "output_parens": 34,
    "avg_bits_err_input": 47.40229719414461,
    "avg_bits_err_output": 14.102131174649692,
    "avg_bits_err_improve": 33.30016601949492,
    "time": 25240.38330078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (- INFINITY)) (+ (* d (/ b (fma d d (* c c)))) (* c (/ a (fma d d (* c c))))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 5e+281) (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (+ (* d (/ b (fma d d (* c c)))) (* c (/ a (fma d d (* c c)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 26.114874810140503,
    "avg_bits_err_output": 23.07836728264831,
    "avg_bits_err_improve": 3.036507527492194,
    "time": 13469.64453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (* (/ c (fma d d (* c c))) b) (* a (/ d (fma c c (* d d)))))",
    "output_parens": 9,
    "avg_bits_err_input": 26.210439665110023,
    "avg_bits_err_output": 22.955341230793575,
    "avg_bits_err_improve": 3.255098434316448,
    "time": 15934.46435546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (- (* ux maxCos) ux))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037,
    "avg_bits_err_output": 0.022853257067009147,
    "avg_bits_err_improve": 0.014146742932990852,
    "time": 7389.005126953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (if (!= (* -2.0 (* uy PI)) 0.0) (/ 1.0 (/ 0.5 (* PI uy))) (* uy (* 2.0 PI)))) (sqrt (- 1.0 (log (+ 1.0 (expm1 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.701491355935918,
    "avg_bits_err_output": 12.52292004986904,
    "avg_bits_err_improve": 1.1785713060668783,
    "time": 34820.644287109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (- (+ ux ux) (* ux (+ ux (* maxCos (+ (- 1.0 ux) (fma ux maxCos (- 1.0 ux)))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.736653736431963,
    "avg_bits_err_output": 0.32735706013971905,
    "avg_bits_err_improve": 13.409296676292245,
    "time": 27363.546630859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (if (!= (* (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* ux (* ux (* (- 1.0 ux) (* maxCos (- maxCos (* ux maxCos)))))))) yi)) 0.0) (* (* (sin (* PI (* uy 2.0))) (* (sqrt (- (fma (- maxCos (* maxCos ux)) (* (- maxCos (* maxCos ux)) (* ux ux)) -1.0))) yi)) (* (* (sqrt (- (fma (- maxCos (* maxCos ux)) (* (- maxCos (* maxCos ux)) (* ux ux)) -1.0))) yi) (/ (sin (* PI (* uy 2.0))) (* (sin (* PI (* uy 2.0))) (* (sqrt (- (fma (- maxCos (* maxCos ux)) (* (- maxCos (* maxCos ux)) (* ux ux)) -1.0))) yi))))) (* (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* ux (* ux (* (- 1.0 ux) (* maxCos (- maxCos (* ux maxCos)))))))) yi)))) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output_parens": 94,
    "avg_bits_err_input": 0.34700233475199505,
    "avg_bits_err_output": 0.40255696436627364,
    "avg_bits_err_improve": -0.055554629614278594,
    "time": 76012.93774414062,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (log (+ 1.0 (expm1 (cos (atan (* (/ alphay alphax) (tan (fma 2.0 (* PI u1) (* PI 0.5))))))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 52,
    "avg_bits_err_input": 0.1992409899958042,
    "avg_bits_err_output": 0.19875566933097796,
    "avg_bits_err_improve": 0.00048532066482623315,
    "time": 26129.486572265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (if (!= (/ u1 (- 1.0 u1)) 0.0) (* (/ (* u1 u1) (* (+ u1 -1.0) (+ u1 -1.0))) (/ 1.0 (/ u1 (- 1.0 u1)))) (/ u1 (- 1.0 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 19,
    "avg_bits_err_input": 0.5327953589052737,
    "avg_bits_err_output": 0.5735638980912273,
    "avg_bits_err_improve": -0.04076853918595358,
    "time": 25828.036865234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (/ u1 (* (* (- 1.0 u1) 2.0) 2.0)) (/ (+ u1 (+ u1 u1)) (* (* (- 1.0 u1) 2.0) 2.0)))) (cos (* 6.28318530718 u2)))",
    "output_parens": 15,
    "avg_bits_err_input": 0.3269974191468956,
    "avg_bits_err_output": 0.339132021096527,
    "avg_bits_err_improve": -0.012134601949631396,
    "time": 19378.434326171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (if (!= (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) 0.0) (* (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) (+ (- 1.0 (/ 1.0 (+ 1.0 (exp (/ PI s))))) (- (/ u (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ PI (- s)))))))) (+ (/ 1.0 (+ (/ 1.0 (+ 1.0 (exp (/ PI s)))) (- (/ u (+ 1.0 (exp (/ PI (- s))))) (/ u (+ 1.0 (exp (/ PI s))))))) -1.0)))))",
    "output_parens": 71,
    "avg_bits_err_input": 0.33157011017982335,
    "avg_bits_err_output": 0.3122419004187247,
    "avg_bits_err_improve": 0.01932820976109867,
    "time": 74099.16137695312,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05277137048278721,
    "avg_bits_err_output": 0.03487778576674878,
    "avg_bits_err_improve": 0.017893584716038434,
    "time": 9079.23974609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ (exp (/ (fabs x) (- s))) (+ (expm1 (/ (fabs x) (- s))) 2.0)) (* s (+ (exp (/ (- (fabs x)) s)) 1.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.14704880041152202,
    "avg_bits_err_output": 0.13147975355076705,
    "avg_bits_err_improve": 0.01556904686075497,
    "time": 19233.48779296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6610546146344237,
    "avg_bits_err_output": 0.6610546146344237,
    "avg_bits_err_improve": 0,
    "time": 17788.98388671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(- (fma (+ 1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))) v (- v)) -1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.1607340264575818,
    "avg_bits_err_output": 0.17433207454361446,
    "avg_bits_err_improve": -0.013598048086032655,
    "time": 20718.7431640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (sqrt (+ (fma (/ (- sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) sinTheta_O (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))) (fma eta eta (/ (- (* sinTheta_O sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 2.4787252456347293,
    "avg_bits_err_output": 2.4748634065226365,
    "avg_bits_err_improve": 0.003861839112092813,
    "time": 29166.74755859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ (/ 1.0 v) (exp (* sinTheta_i (/ sinTheta_O v)))) (/ (* cosTheta_i (/ 0.5 v)) (sinh (/ 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.44697668449907874,
    "avg_bits_err_output": 0.35187254697654,
    "avg_bits_err_improve": 0.09510413752253871,
    "time": 26781.09912109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (+ (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (/ -1.0 v)) 0.6931)) 0.5) v)",
    "output_parens": 10,
    "avg_bits_err_input": 0.1127232469302494,
    "avg_bits_err_output": 0.08218798196094755,
    "avg_bits_err_improve": 0.030535264969301854,
    "time": 27119.386962890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (/ (* alpha alpha) (* PI (* 2.0 (log (* alpha alpha))))) (/ (- 2.0 (* alpha alpha)) (* PI (* 2.0 (log (* alpha alpha)))))) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0))",
    "output_parens": 18,
    "avg_bits_err_input": 0.46684617393572764,
    "avg_bits_err_output": 0.5250678619182884,
    "avg_bits_err_improve": -0.05822168798256072,
    "time": 25255.184326171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log (pow (/ 1.0 (fma u -1.3333333333333333 1.3333333333333333)) 3.0)) s)",
    "output_parens": 5,
    "avg_bits_err_input": 1.3155586273297748,
    "avg_bits_err_output": 1.2126467267851484,
    "avg_bits_err_improve": 0.1029119005446264,
    "time": 25296.06298828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* s (log1p (if (!= (- -1.0 (/ 1.0 (fma u -4.0 1.0))) 0.0) (/ (- 1.0 (/ 1.0 (+ 1.0 (+ (* u -4.0) (* (fma u -4.0 1.0) (* u -4.0)))))) (- -1.0 (/ 1.0 (fma u -4.0 1.0)))) (+ (/ 1.0 (fma u -4.0 1.0)) -1.0))))",
    "output_parens": 22,
    "avg_bits_err_input": 12.177074462391777,
    "avg_bits_err_output": 11.375919590579915,
    "avg_bits_err_improve": 0.8011548718118622,
    "time": 25564.60205078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(/ (+ (* (exp (/ (- r) s)) (/ 0.125 (* PI s))) (* 0.75 (/ (+ (/ (exp (/ (/ r -3.0) s)) 2.0) (/ (exp (- (/ (/ r s) 3.0))) 2.0)) (* s (* PI 6.0))))) r)",
    "output_parens": 22,
    "avg_bits_err_input": 0.14136866499793704,
    "avg_bits_err_output": 0.1321568455052856,
    "avg_bits_err_improve": 0.009211819492651457,
    "time": 26105.261474609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9211949337940752,
    "avg_bits_err_output": 0.7288380555780936,
    "avg_bits_err_improve": 0.19235687821598169,
    "time": 27442.737548828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (- c -1.0) (/ (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) (* (sqrt PI) cosTheta)) (exp (* cosTheta cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6968330656105688,
    "avg_bits_err_output": 0.49228579139980294,
    "avg_bits_err_improve": 0.20454727421076585,
    "time": 19250.99951171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.602537837612301,
    "avg_bits_err_output": 0.5172734402693678,
    "avg_bits_err_improve": 13.085264397342934,
    "time": 22143.716796875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log (- 1.0 u1)))) (cos (expm1 (if (!= (+ (log1p (* PI (* u2 2.0))) -1.0) 0.0) (/ (- (log1p (* PI (* u2 2.0))) (- 1.0 (* (+ (log1p (* PI (* u2 2.0))) -1.0) (+ (log1p (* PI (* u2 2.0))) -1.0)))) (+ (log1p (* PI (* u2 2.0))) -1.0)) (log1p (* PI (* u2 2.0)))))))",
    "output_parens": 35,
    "avg_bits_err_input": 13.650906166182418,
    "avg_bits_err_output": 13.682300089990198,
    "avg_bits_err_improve": -0.031393923807780055,
    "time": 22543.54833984375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(fma (log1p (- u0)) (- (* alpha alpha)) (* (log1p (- u0)) (fma (- alpha) alpha (* alpha alpha))))",
    "output_parens": 11,
    "avg_bits_err_input": 14.142857218853672,
    "avg_bits_err_output": 0.215375,
    "avg_bits_err_improve": 13.927482218853672,
    "time": 15267.40673828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.704742806965966,
    "avg_bits_err_output": 0.5303217930246142,
    "avg_bits_err_improve": 12.174421013941352,
    "time": 16079.380126953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.27470222508504,
    "avg_bits_err_output": 12.221618423322695,
    "avg_bits_err_improve": 4.0530838017623445,
    "time": 25685.358154296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (- (/ 1.0 (sin B)) (/ (/ x (tan B)) 2.0)) (/ (/ x (tan B)) 2.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.21018872187554086,
    "avg_bits_err_output": 0.15811560156295076,
    "avg_bits_err_improve": 0.05207312031259009,
    "time": 14369.034423828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(+ (- (/ x (tan B))) (/ (log1p (expm1 (* F (pow (fma 2.0 x (fma F F 2.0)) -0.5)))) (sin B)))",
    "output_parens": 12,
    "avg_bits_err_input": 13.931669761833206,
    "avg_bits_err_output": 10.812988359802189,
    "avg_bits_err_improve": 3.118681402031017,
    "time": 21987.5576171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (+ (+ (log (/ (+ (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0)))) (if (!= (exp (* PI (/ f -4.0))) 0.0) (/ (expm1 (* PI (/ (+ f f) -4.0))) (- (exp (* PI (/ f -4.0))))) (- (exp (* PI (/ f 4.0))) (exp (* PI (/ f -4.0))))))) -1.0) 1.0) (* PI -0.25))",
    "output_parens": 34,
    "avg_bits_err_input": 61.35569690165737,
    "avg_bits_err_output": 1.925034758072354,
    "avg_bits_err_improve": 59.43066214358501,
    "time": 50661.7548828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* (sqrt 2.0) (/ t (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (* l (- (+ -1.0 (/ x (+ x -1.0))) (/ -1.0 (+ x -1.0)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 42.76990330589846,
    "avg_bits_err_output": 33.784273708704426,
    "avg_bits_err_improve": 8.985629597194034,
    "time": 29330.477294921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output_parens": 10,
    "avg_bits_err_input": 3.964076345249619,
    "avg_bits_err_output": 3.964076345249619,
    "avg_bits_err_improve": 0,
    "time": 27655.3525390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* (/ 1.0 (exp (* 0.5 (expm1 (log1p (log1p (* (pow (/ (* l 2.0) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0))))))))) 0.5)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.941,
    "avg_bits_err_output": 0.9415,
    "avg_bits_err_improve": -0.000500000000000056,
    "time": 16584.798828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (sqrt (+ (/ (pow (/ Om Omc) 2.0) (fma (pow (/ t l) 2.0) -2.0 -1.0)) (/ -2.0 (- -2.0 (* (pow (/ t l) 2.0) 4.0))))))",
    "output_parens": 14,
    "avg_bits_err_input": 10.513191713756571,
    "avg_bits_err_output": 10.520066385900797,
    "avg_bits_err_improve": -0.006874672144226324,
    "time": 17089.51123046875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 0.0) (sqrt (* U (* (* 2.0 n) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* 2.0 (* l (/ l Om)))))))) (if (<= (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) 2e+152) (sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*))))) (sqrt (* (* 2.0 n) (* U (- t (+ (/ (* (* (pow (/ l Om) 2.0) (- U U*)) (+ n n)) 2.0) (* 2.0 (* l (/ l Om))))))))))",
    "output_parens": 75,
    "avg_bits_err_input": 34.81510642911647,
    "avg_bits_err_output": 28.746364042835737,
    "avg_bits_err_improve": 6.068742386280732,
    "time": 33795.72998046875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -3e+121) 0.0 (if (<= t -1.35e-108) (/ (/ 2.0 (/ (tan k) l)) (* (* (pow t 3.0) (pow (/ k t) 2.0)) (/ (sin k) l))) (if (<= t 2.9e-100) 0.0 (if (<= t 1.2e+89) (/ 2.0 (* (- 0.0 (pow (/ k t) 2.0)) (- (/ (* (sin k) (* (tan k) (/ (pow t 3.0) l))) l)))) 0.0))))",
    "output_parens": 32,
    "avg_bits_err_input": 47.393965477818895,
    "avg_bits_err_output": 27.60555790605248,
    "avg_bits_err_improve": 19.788407571766417,
    "time": 47763.718017578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ 2.0 (/ (* (pow t 3.0) (tan k)) l)) (* (/ (sin k) l) (+ 2.0 (pow (/ k t) 2.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.28531013236232,
    "avg_bits_err_output": 27.57778987834096,
    "avg_bits_err_improve": 4.707520254021361,
    "time": 20949.23486328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* a2 (* (cos th) (+ a2 a2))) (* (+ a1 a1) (* (cos th) a1))) (* 2.0 (sqrt 2.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.5056808297076038,
    "avg_bits_err_output": 0.49060037814176793,
    "avg_bits_err_improve": 0.015080451565835817,
    "time": 22414.145263671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* PI (* n 2.0)) (* k -0.5)) (/ (sqrt (* PI (* n 2.0))) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5319846978978081,
    "avg_bits_err_output": 0.42298367492145067,
    "avg_bits_err_improve": 0.10900102297635744,
    "time": 19547.48681640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (/ (expm1 (+ l l)) (exp l))) (cos (/ K 2.0))) U)",
    "output_parens": 9,
    "avg_bits_err_input": 17.644283046851097,
    "avg_bits_err_output": 0.11953552656439309,
    "avg_bits_err_improve": 17.524747520286702,
    "time": 29026.836181640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(log1p (expm1 (* (- (- (cos (fma (+ m n) (/ K 2.0) (- M))) -1.0) 1.0) (exp (- (fabs (- m n)) (+ l (pow (- (/ (+ m n) 2.0) M) 2.0)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 15.451455712274758,
    "avg_bits_err_output": 15.45252745097524,
    "avg_bits_err_improve": -0.001071738700481717,
    "time": 28858.826904296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 17.888448120312592,
    "avg_bits_err_output": 17.888448120312592,
    "avg_bits_err_improve": 0,
    "time": 19117.845947265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (pow (* D (/ (/ M 2.0) d)) 2.0) h) l))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.773766496309056,
    "avg_bits_err_output": 10.529192362307741,
    "avg_bits_err_improve": 3.244574134001315,
    "time": 12486.0595703125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -2e+296) (* c0 (sqrt (* (/ A l) (/ 1.0 V)))) (if (<= (* V l) -1e-200) (* c0 (sqrt (/ A (* V l)))) (if (<= (* V l) 2e-299) (* c0 (sqrt (/ (/ A l) V))) (if (<= (* V l) 5e+65) (* c0 (sqrt (* A (/ 1.0 (* l V))))) (* c0 (sqrt (/ (/ A V) l)))))))",
    "output_parens": 34,
    "avg_bits_err_input": 19.38393505942606,
    "avg_bits_err_output": 15.36232322349124,
    "avg_bits_err_improve": 4.021611835934822,
    "time": 15592.732421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= d -1.7e+160) (* (/ c0 (* 2.0 w)) (fma d (* c0 (/ d (* (* D D) (* w h)))) (sqrt (* (- (exp (log1p (fma d (* d (/ c0 (* D (* w (* D h))))) (- M)))) 1.0) (fma d (* c0 (/ d (* (* D D) (* w h)))) M))))) (if (<= d -2e-120) (* (/ c0 (* 2.0 w)) (+ (/ (* (* d d) (/ (/ c0 w) (* h D))) D) (sqrt (- (* (/ (* (* d d) (/ (/ c0 w) (* h D))) D) (/ (* (* d d) (/ (/ c0 w) (* h D))) D)) (* M M))))) (/ (+ (* c0 (* d (/ (* c0 (/ (/ d D) (* w h))) D))) (* c0 (sqrt (* (fma d (/ (* c0 (/ (/ d D) (* w h))) D) M) (- (* d (/ (* c0 (/ (/ d D) (* w h))) D)) M))))) (* w 2.0))))",
    "output_parens": 83,
    "avg_bits_err_input": 59.63760002667698,
    "avg_bits_err_output": 52.838893127166465,
    "avg_bits_err_improve": 6.798706899510513,
    "time": 44992.894775390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= D 5e-231) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (/ (* (pow (* M (/ D (+ d d))) 2.0) (* 0.5 h)) l))) (if (<= D 2e+195) (* (sqrt (/ d h)) (* (sqrt (/ d l)) (+ (* h (/ (pow (* D (/ (/ M d) 2.0)) 2.0) (* l -2.0))) 1.0))) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (/ (* (pow (* M (/ D (+ d d))) 2.0) (* 0.5 h)) l)))))",
    "output_parens": 46,
    "avg_bits_err_input": 26.269140892190727,
    "avg_bits_err_output": 25.738734971516138,
    "avg_bits_err_improve": 0.530405920674589,
    "time": 40893.37841796875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (!= (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))) 0.0) (/ (log (exp (+ 0.5 (/ -0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (- 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.558024646213862,
    "avg_bits_err_output": 15.084259671642531,
    "avg_bits_err_improve": 0.47376497457133127,
    "time": 30011.917236328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (- 2.0 (* v (* v 6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9827924812503607,
    "avg_bits_err_output": 0.01214624062518029,
    "avg_bits_err_improve": 0.9706462406251803,
    "time": 4579.890380859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (- 1.0 (* v (* v 5.0))) PI) (sqrt (- 2.0 (* v (* v 6.0))))) (- t (* v (* v t))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.41964857393116367,
    "avg_bits_err_output": 0.11055148342892909,
    "avg_bits_err_improve": 0.30909709050223455,
    "time": 20376.6982421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.013146240625180288,
    "avg_bits_err_output": 0.013146240625180288,
    "avg_bits_err_improve": 0,
    "time": 5650.500244140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5191202699468207,
    "avg_bits_err_output": 0.5191202699468207,
    "avg_bits_err_improve": 0,
    "time": 7682.26904296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (* a (pow k m)) (- (* k (+ k 10.0)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 1.96427427963445,
    "avg_bits_err_output": 1.92377427963445,
    "avg_bits_err_improve": 0.04049999999999998,
    "time": 15800.89306640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (- (+ EDonor (+ Vef mu)) Ec) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ EAccept (- (+ Vef Ev) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017326569372752045,
    "avg_bits_err_output": 0.017326569372752045,
    "avg_bits_err_improve": 0,
    "time": 6391.53466796875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(- (+ (if (!= (pow (fma a a (* b b)) 2.0) 0.0) (+ (/ 3.0 (/ 4.0 (pow (fma a a (* b b)) 2.0))) (* (pow (fma a a (* b b)) 2.0) 0.25)) (pow (fma a a (* b b)) 2.0)) (* 4.0 (* b b))) 1.0)",
    "output_parens": 22,
    "avg_bits_err_input": 0.17891093358955718,
    "avg_bits_err_output": 0.19066619765899806,
    "avg_bits_err_improve": -0.011755264069440885,
    "time": 19358.341064453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(- (+ (+ (pow (fma b b (* a a)) 2.0) (* 4.0 (* b (- b (* b (* 3.0 a)))))) (+ (* a (* a (* a 4.0))) (* a (* a 4.0)))) 1.0)",
    "output_parens": 17,
    "avg_bits_err_input": 0.1845460060198135,
    "avg_bits_err_output": 0.18507857196359143,
    "avg_bits_err_improve": -0.0005325659437779295,
    "time": 23707.753662109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(- (+ (pow (fma a a (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1884003703942341,
    "avg_bits_err_output": 0.18735788914387355,
    "avg_bits_err_improve": 0.0010424812503605496,
    "time": 15978.116455078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(exp (* 0.5 (log (+ (* (/ x (sqrt (fma 4.0 (* p p) (* x x)))) 0.5) 0.5))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.537728423626795,
    "avg_bits_err_output": 13.539446059822252,
    "avg_bits_err_improve": -0.0017176361954565067,
    "time": 14734.864990234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "enumo-no-ff"
  }
]
