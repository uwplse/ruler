[
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (+ x x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.87488418017552,
    "avg_bits_err_output": 0.04775,
    "avg_bits_err_improve": 40.82713418017552,
    "time": 9401.983154296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= (/ (- x (sin x)) (- x (tan x))) 2.0) (/ (+ (/ (sin x) x) -1.0) (+ -1.0 (/ (tan x) x))) (/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (+ x (tan x))))",
    "output_parens": 24,
    "avg_bits_err_input": 31.180782228138554,
    "avg_bits_err_output": 28.80597373138396,
    "avg_bits_err_improve": 2.374808496754593,
    "time": 35866.775634765625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (* (/ c (/ (* c a) a)) (- (hypot b_2 (sqrt (* c (- a)))) b_2)) a) (if (<= b_2 -2.3e-273) (- (/ (sqrt (- (* b_2 b_2) (* c a))) a) (/ b_2 a)) (if (or (<= b_2 0.072) (not (<= b_2 5.7e+156))) (/ (- c) (+ b_2 (hypot b_2 (sqrt (* c (- a)))))) (/ (/ (* c (- a)) (+ b_2 (/ 1.0 (pow (- (* b_2 b_2) (* c a)) -0.5)))) a))))",
    "output_parens": 43,
    "avg_bits_err_input": 34.41134914409666,
    "avg_bits_err_output": 18.051233917997028,
    "avg_bits_err_improve": 16.360115226099634,
    "time": 26116.960693359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1e+154) (/ (- c) (- b_2 (hypot b_2 (pow (pow (* c a) 2.0) 0.25)))) (if (<= b_2 8.2e-267) (/ (- c) (- b_2 (sqrt (- (* b_2 b_2) (* c a))))) (if (<= b_2 1.5e+146) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a) (/ (fma b_2 (- -1.0 (/ b_2 (hypot b_2 (sqrt (* c a))))) (/ a (/ (hypot b_2 (sqrt (* c a))) c))) a))))",
    "output_parens": 39,
    "avg_bits_err_input": 34.25264941759655,
    "avg_bits_err_output": 13.265789855431999,
    "avg_bits_err_improve": 20.986859562164554,
    "time": 29494.80322265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 31.575020739923517,
    "avg_bits_err_output": 0.13250526406944121,
    "avg_bits_err_improve": 31.442515475854076,
    "time": 25257.802734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.65983579670954,
    "avg_bits_err_output": 32.311783600921764,
    "avg_bits_err_improve": 0.3480521957877727,
    "time": 41235.3984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.89630016366425,
    "avg_bits_err_output": 0.008,
    "avg_bits_err_improve": 29.88830016366425,
    "time": 22702.757080078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (* (fma x -1.0 -1.0) (pow (+ x 1.0) -2.0)) (/ 1.0 x))",
    "output_parens": 6,
    "avg_bits_err_input": 14.026953453822443,
    "avg_bits_err_output": 0.075011842188131,
    "avg_bits_err_improve": 13.951941611634313,
    "time": 14972.056640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (or (<= x -1e-24) (not (<= x 0.055))) (fma (sin x) (- (sin eps)) (* (cos x) (log (exp (+ -1.0 (cos eps)))))) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))))",
    "output_parens": 23,
    "avg_bits_err_input": 39.995185282530144,
    "avg_bits_err_output": 0.6472370037934865,
    "avg_bits_err_improve": 39.34794827873666,
    "time": 37895.64599609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (fma (/ x (pow (cbrt x) 2.0)) (+ (cbrt x) (cbrt (+ 1.0 x))) (pow (cbrt (+ 1.0 x)) 2.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 30.020420158353453,
    "avg_bits_err_output": 0.22029899685318027,
    "avg_bits_err_improve": 29.80012116150027,
    "time": 24120.617431640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.4562400601662,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 30.4558650601662,
    "time": 11134.45166015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -2e-280) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 4e-134) (/ (/ (* 4.0 (* a c)) (- (- b) (hypot b (sqrt (* (* a c) -4.0))))) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 1e+294) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (/ 0.5 (/ a (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b)))))))",
    "output_parens": 84,
    "avg_bits_err_input": 34.46033237308252,
    "avg_bits_err_output": 21.547913911628854,
    "avg_bits_err_improve": 12.912418461453669,
    "time": 40296.1455078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (/ (+ b (hypot b (* (sqrt a) (sqrt (* c -4.0))))) (* a -2.0)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -1e-235) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (/ (/ (fma -4.0 (* a c) (- (* b b) (* b b))) (- b (hypot b (sqrt (* (* a c) -4.0))))) (* a 2.0)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 4e+143) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (/ (+ b (hypot b (sqrt (* (* a c) -4.0)))) (* a -2.0))))))",
    "output_parens": 91,
    "avg_bits_err_input": 34.472549351833045,
    "avg_bits_err_output": 23.821333121647463,
    "avg_bits_err_improve": 10.651216230185582,
    "time": 35084.282958984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.453730727635474,
    "avg_bits_err_output": 0.0013231203125901444,
    "avg_bits_err_improve": 61.45240760732288,
    "time": 12580.4365234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(+ (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n))))",
    "output_parens": 8,
    "avg_bits_err_input": 63.008218201337286,
    "avg_bits_err_output": 0.5745447111017168,
    "avg_bits_err_improve": 62.43367349023557,
    "time": 33842.09716796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(+ (log1p (* eps (- eps))) (* -2.0 (log1p eps)))",
    "output_parens": 6,
    "avg_bits_err_input": 58.64187700601443,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 58.63525200601443,
    "time": 13726.96044921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(* (cbrt (pow (/ x (/ (- (fma (/ x (tan x)) (+ (/ x (tan x)) 1.0) 1.0) (* (fma (/ x (tan x)) (+ (/ x (tan x)) 1.0) 1.0) (pow (/ x (tan x)) 3.0))) (* (fma (/ x (tan x)) (+ (/ x (tan x)) 1.0) 1.0) (fma (/ x (tan x)) (+ (/ x (tan x)) 1.0) 1.0)))) -2.0)) (cbrt (+ (/ 1.0 x) (/ -1.0 (tan x)))))",
    "output_parens": 40,
    "avg_bits_err_input": 59.87792033337887,
    "avg_bits_err_output": 59.86716163448134,
    "avg_bits_err_improve": 0.010758698897525676,
    "time": 41213.79150390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (/ (expm1 (* eps (+ b a))) (/ (expm1 (* eps b)) eps)) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.1572632360821,
    "avg_bits_err_output": 29.48691209599515,
    "avg_bits_err_improve": 30.67035114008695,
    "time": 33980.1376953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.31012038960202,
    "avg_bits_err_output": 0.0105,
    "avg_bits_err_improve": 41.29962038960202,
    "time": 5973.029052734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.60569648221609,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.60544648221609,
    "time": 2820.09130859375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.540685457791106,
    "avg_bits_err_output": 0.01914441780414224,
    "avg_bits_err_improve": 29.521541039986964,
    "time": 4580.58349609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(fma (exp (* x 0.5)) (exp (* x 0.5)) (+ (exp (- x)) -2.0))",
    "output_parens": 8,
    "avg_bits_err_input": 29.637424647862787,
    "avg_bits_err_output": 29.47600823780232,
    "avg_bits_err_improve": 0.16141641006046825,
    "time": 33524.716552734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ 1.0 (+ 1.0 x)) (* (/ (+ x (* 2.0 (- 1.0 x))) x) (/ -1.0 (- 1.0 x))))",
    "output_parens": 10,
    "avg_bits_err_input": 9.14813584865345,
    "avg_bits_err_output": 9.197306994117334,
    "avg_bits_err_improve": -0.0491711454638839,
    "time": 43102.074951171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(/ (fma (tan x) (tan eps) (+ (+ 1.0 (/ (tan eps) (tan x))) -1.0)) (fma (/ 1.0 (sin x)) (cos x) (- (tan eps))))",
    "output_parens": 15,
    "avg_bits_err_input": 36.94670660178132,
    "avg_bits_err_output": 19.68516223059304,
    "avg_bits_err_improve": 17.261544371188283,
    "time": 40318.8466796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.292353743518234,
    "avg_bits_err_output": 0.1343374062518029,
    "avg_bits_err_improve": 30.15801633726643,
    "time": 21476.374267578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (/ 1.0 (/ 1.0 (+ (cos eps) -1.0))) (* (cos x) (sin eps)))",
    "output_parens": 9,
    "avg_bits_err_input": 37.60663541607277,
    "avg_bits_err_output": 0.3745107599844766,
    "avg_bits_err_improve": 37.232124656088295,
    "time": 32057.3681640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (* (/ (+ x 1.0) (sqrt (+ x 1.0))) (sqrt x))))",
    "output_parens": 10,
    "avg_bits_err_input": 20.151960140066578,
    "avg_bits_err_output": 0.12182800781475364,
    "avg_bits_err_improve": 20.030132132251826,
    "time": 23426.59423828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 14.787589356586064,
    "avg_bits_err_output": 0.3697741201609625,
    "avg_bits_err_improve": 14.417815236425103,
    "time": 11088.505615234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.99235110276065,
    "avg_bits_err_output": 1.143966587777828,
    "avg_bits_err_improve": 28.848384514982822,
    "time": 27713.599365234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07563928593921272,
    "avg_bits_err_output": 0.08068176718957332,
    "avg_bits_err_improve": -0.005042481250360595,
    "time": 26183.226806640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* a b) (/ (/ -1.0 b) a))",
    "output_parens": 4,
    "avg_bits_err_input": 16.006908175956998,
    "avg_bits_err_output": 0.2694935894788724,
    "avg_bits_err_improve": 15.737414586478126,
    "time": 23406.944580078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ PI (/ 180.0 angle)))) 2.0) (pow (* b (sin (* (* PI angle) 0.005555555555555556))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.320657935588994,
    "avg_bits_err_output": 20.32187647058892,
    "avg_bits_err_improve": -0.0012185349999249695,
    "time": 46576.44677734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (+ b a) (* (- b a) (* (sin (* (* PI angle) 0.011111111111111112)) 0.5))))",
    "output_parens": 9,
    "avg_bits_err_input": 31.220150071696498,
    "avg_bits_err_output": 21.236113056211106,
    "avg_bits_err_improve": 9.984037015485391,
    "time": 47433.2568359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* angle (/ 1.0 (/ (/ angle (/ PI 180.0)) angle))))) 2.0) (pow (* b (cos (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 14,
    "avg_bits_err_input": 20.517435164799974,
    "avg_bits_err_output": 20.53647969147066,
    "avg_bits_err_improve": -0.01904452667068668,
    "time": 51623.166015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (* (/ m v) (- 1.0 m)) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.17476184218813104,
    "avg_bits_err_output": 0.17458496250072117,
    "avg_bits_err_improve": 0.00017687968740986992,
    "time": 22311.030029296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(+ (/ (- 1.0 (pow (tan x) 2.0)) (+ 1.0 (pow (tan x) 2.0))) (fma (/ -1.0 (+ 1.0 (pow (tan x) 2.0))) (pow (tan x) 2.0) (* (pow (tan x) 2.0) (/ 1.0 (+ 1.0 (pow (tan x) 2.0))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.30518865959940467,
    "avg_bits_err_output": 0.31776525381608517,
    "avg_bits_err_improve": -0.012576594216680503,
    "time": 33198.052001953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13169812031259015,
    "avg_bits_err_output": 0.13171936093777042,
    "avg_bits_err_improve": -2.1240625180274364e-05,
    "time": 23917.151123046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 17.171775623305866,
    "avg_bits_err_output": 3.8518864448185797,
    "avg_bits_err_improve": 13.319889178487287,
    "time": 41607.90380859375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (fma (pow b 4.5) (pow b 4.5) (- (pow (fma b b (* (* a c) -4.0)) 4.5)))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (pow b 6.0) (+ (* (fma b b (* a (* c -4.0))) (pow (pow (cbrt (fma b b (* a (* c -4.0)))) 2.0) 3.0)) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0))))) (/ -0.5 a))",
    "output_parens": 41,
    "avg_bits_err_input": 52.83969044350404,
    "avg_bits_err_output": 49.62581259957465,
    "avg_bits_err_improve": 3.2138778439293887,
    "time": 68021.93408203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1.5e-11) (/ (- (pow b 6.0) (/ (pow (fma b b (* a (* c -4.0))) 2.0) (/ (- (pow b 4.0) (* (* a (* c -4.0)) (- (* b b) (* a (* c -4.0))))) (+ (pow b 6.0) (* -64.0 (pow (* a c) 3.0)))))) (* (+ (pow b 4.0) (+ (pow (fma b b (* a (* c -4.0))) 2.0) (* b (* b (fma b b (* a (* c -4.0))))))) (* (+ b (sqrt (fma b b (* a (* c -4.0))))) (* a -2.0)))) (/ (/ (* b (+ (- (* b b) (* b (sqrt (fma c (* a -4.0) (* b b))))) (* c (* a -4.0)))) (* b (sqrt (fma c (* a -4.0) (* b b))))) (* a 2.0)))",
    "output_parens": 72,
    "avg_bits_err_input": 28.219180534707085,
    "avg_bits_err_output": 25.841367411105566,
    "avg_bits_err_improve": 2.37781312360152,
    "time": 81566.4853515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* (cbrt (/ (pow (fma c (* a -4.0) (* b (/ (- (* b b) (fma b b (* a (* c -4.0)))) (+ b (sqrt (fma b b (* a (* c -4.0)))))))) 2.0) (fma c (* a -4.0) (* b b)))) (cbrt (/ (fma c (* a -4.0) (* b (- b (sqrt (fma c (* a -4.0) (* b b)))))) (sqrt (fma c (* a -4.0) (* b b)))))) (* a 2.0))",
    "output_parens": 37,
    "avg_bits_err_input": 43.685511367535874,
    "avg_bits_err_output": 38.05462938519517,
    "avg_bits_err_improve": 5.6308819823407035,
    "time": 88321.28930664062,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+294) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ 0.5 (/ a (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b)))))",
    "output_parens": 45,
    "avg_bits_err_input": 34.46212258103005,
    "avg_bits_err_output": 23.920758892040453,
    "avg_bits_err_improve": 10.541363688989598,
    "time": 36051.270263671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.9203810234809323,
    "avg_bits_err_output": 0.2213282491111552,
    "avg_bits_err_improve": 0.6990527743697771,
    "time": 37751.469482421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(log (exp (expm1 (- (log 2.0) (log1p (exp (* x -2.0)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 29.064811471220583,
    "avg_bits_err_output": 29.051637595725456,
    "avg_bits_err_improve": 0.013173875495127163,
    "time": 33970.365966796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.213622374202764,
    "avg_bits_err_output": 0.013625,
    "avg_bits_err_improve": 58.199997374202766,
    "time": 9511.18017578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 57.93285336758055,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 57.92610336758055,
    "time": 12790.160888671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.009912798070799487,
    "avg_bits_err_output": 0.00912031682043891,
    "avg_bits_err_improve": 0.0007924812503605771,
    "time": 3756.496826171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.60125,
    "avg_bits_err_output": 0.058375,
    "avg_bits_err_improve": 31.542875,
    "time": 5361.287841796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (* (log1p x) 2.0) (log1p (* x (- x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 58.630511978163696,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 58.623886978163696,
    "time": 10709.655517578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(- (log (/ x (+ 1.0 (sqrt (- 1.0 (* x x)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.027448120312590144,
    "avg_bits_err_output": 0.002823120312590145,
    "avg_bits_err_improve": 0.024625,
    "time": 3870.71533203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (/ 1.0 (hypot 1.0 (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1272712406251803,
    "avg_bits_err_output": 0.1280424812503606,
    "avg_bits_err_improve": -0.0007712406251803028,
    "time": 41233.091552734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.123625,
    "avg_bits_err_output": 0.123625,
    "avg_bits_err_improve": 0,
    "time": 29347.5634765625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (- (* (* (- lambda1 lambda2) (cos (* 0.5 phi1))) (cos (* 0.5 phi2))) (* (sin (* 0.5 phi2)) (* (- lambda1 lambda2) (sin (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 39.35118233120891,
    "avg_bits_err_output": 0.1320936534371314,
    "avg_bits_err_improve": 39.21908867777178,
    "time": 43243.958740234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 14.805285926075854,
    "avg_bits_err_output": 0.0018231203125901444,
    "avg_bits_err_improve": 14.803462805763264,
    "time": 11554.155517578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (fma (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))) (- (sin phi1)) (cos delta))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.16210147755514773,
    "avg_bits_err_output": 0.1585631436054743,
    "avg_bits_err_improve": 0.003538333949673428,
    "time": 49867.01416015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma -3.0 (* c a) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 52.82050532703905,
    "avg_bits_err_output": 0.07911560156295072,
    "avg_bits_err_improve": 52.7413897254761,
    "time": 41331.306396484375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.36819594953342,
    "avg_bits_err_output": 0.446136108218743,
    "avg_bits_err_improve": 27.922059841314677,
    "time": 41261.972412109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a -3.0) c))) b) (* a 3.0)) -5e-22) (* (/ 1.0 (* (/ 1.0 (/ -0.3333333333333333 a)) (+ b (sqrt (fma b b (* a (* -3.0 c))))))) (- (* b b) (fma (* a -3.0) c (* b b)))) (/ (+ (- b) (sqrt (pow (pow (fma b b (* -3.0 (* a c))) 3.0) 0.3333333333333333))) (* a 3.0)))",
    "output_parens": 35,
    "avg_bits_err_input": 43.77758319506283,
    "avg_bits_err_output": 40.928210384962156,
    "avg_bits_err_improve": 2.8493728101006752,
    "time": 65321.8466796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b 4e+20) (/ (fma (hypot b (* (sqrt (* (fabs c) 3.0)) (sqrt (fabs a)))) 0.3333333333333333 (* b -0.3333333333333333)) a) (/ (* (/ -0.3333333333333333 (+ b (hypot b (sqrt (* a (* c -3.0)))))) (* 3.0 (* c a))) a))",
    "output_parens": 22,
    "avg_bits_err_input": 34.51819949511365,
    "avg_bits_err_output": 15.764943179463819,
    "avg_bits_err_improve": 18.75325631564983,
    "time": 42860.428955078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (sin lambda1) (cos lambda2) (* (cos lambda1) (sin (- lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (fma (* (cos lambda1) (* (cos phi2) (sin phi1))) (cos lambda2) (* (sin phi1) (* (cos phi2) (* (sin lambda1) (sin lambda2)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 13.447363567738538,
    "avg_bits_err_output": 0.1680087096349492,
    "avg_bits_err_improve": 13.27935485810359,
    "time": 47940.95166015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ 1.0 (- (* (+ 1.0 x) (/ (+ 1.0 x) x)) x)) (* (/ (+ 1.0 x) x) (- 1.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 28.907142100152114,
    "avg_bits_err_output": 24.994101859625566,
    "avg_bits_err_improve": 3.9130402405265485,
    "time": 36525.6884765625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 0,
    "time": 13496.81591796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (+ -1.0 x)) (- -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.187970758462768,
    "avg_bits_err_output": 0.07594812031259013,
    "avg_bits_err_improve": 14.112022638150178,
    "time": 21084.4873046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (* F (+ C (- A (hypot B (- A C)))))) (- (sqrt (* 2.0 (fma B B (* A (* C -4.0))))))) (- (* B B) (* 4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (/ (* (sqrt (* (* 2.0 (fma B B (* A (* C -4.0)))) (- (+ A C) (hypot B (- A C))))) (- (sqrt F))) (- (* B B) (* 4.0 (* A C)))) (/ (- (sqrt (* 2.0 (* F (+ A (- C (hypot B (- A C)))))))) (hypot B (pow (pow (* A (* C -4.0)) 2.0) 0.25)))))",
    "output_parens": 96,
    "avg_bits_err_input": 52.76292766261422,
    "avg_bits_err_output": 37.54514856144409,
    "avg_bits_err_improve": 15.21777910117013,
    "time": 56116.0263671875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* (atan (/ (- (- C A) (hypot B (- C A))) B)) (/ 180.0 PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.043603710209847,
    "avg_bits_err_output": 13.372771808488972,
    "avg_bits_err_improve": 15.670831901720875,
    "time": 37563.44140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (+ A (+ C (hypot B (- A C))))) (* (sqrt (* 2.0 (fma (* A -4.0) C (* B B)))) (- (sqrt F)))) (+ (* B B) (* -4.0 (* A C)))) (/ (* (sqrt (+ (* B (* B F)) (* F (* A (* C -4.0))))) (- (sqrt (* 2.0 (+ C (+ A (hypot B (- A C)))))))) (+ (* B B) (* -4.0 (* A C)))))",
    "output_parens": 62,
    "avg_bits_err_input": 52.606007567516684,
    "avg_bits_err_output": 40.91434022994955,
    "avg_bits_err_improve": 11.691667337567132,
    "time": 48327.429443359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(* (cbrt (/ 0.5 a)) (/ 1.0 (cbrt (/ 1.0 g))))",
    "output_parens": 6,
    "avg_bits_err_input": 15.171756941918344,
    "avg_bits_err_output": 0.8411383574958058,
    "avg_bits_err_improve": 14.330618584422538,
    "time": 20497.825439453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (* (cbrt (* 0.5 (- (hypot g h) g))) (cbrt (/ 1.0 a))) (/ (cbrt (+ g (hypot g h))) (cbrt (* a -2.0))))",
    "output_parens": 14,
    "avg_bits_err_input": 35.67640701467552,
    "avg_bits_err_output": 2.7202847639847567,
    "avg_bits_err_improve": 32.95612225069076,
    "time": 33459.336181640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma 0.6666666666666666 PI (* 0.3333333333333333 (acos (/ g (- h)))))) 3.0) (pow (cos (fma 0.6666666666666666 PI (* 0.3333333333333333 (acos (/ g (- h)))))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9912883468827537,
    "avg_bits_err_output": 0.036335339067998816,
    "avg_bits_err_improve": 0.9549530078147549,
    "time": 24837.9306640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ 1.0 (+ 1.0 (exp (- b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.6610943609377705,
    "avg_bits_err_output": 0.014334962500721159,
    "avg_bits_err_improve": 0.6467593984370493,
    "time": 8071.530517578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (/ a1 b1) (/ b2 a2)) (if (<= (/ (* a1 a2) (* b1 b2)) -4e-240) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b1) (/ a2 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+280) (/ (* a1 a2) (* b1 b2)) (/ a1 (* b2 (/ b1 a2)))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.294396107797018,
    "avg_bits_err_output": 3.2333677803509753,
    "avg_bits_err_improve": 8.061028327446042,
    "time": 12953.01220703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40895293827427864,
    "avg_bits_err_output": 0.36,
    "avg_bits_err_improve": 0.04895293827427866,
    "time": 11355.686767578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -0.9) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.22922637428044,
    "avg_bits_err_output": 0.0365,
    "avg_bits_err_improve": 53.19272637428044,
    "time": 21613.94677734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.679809565668414,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.679809565668414,
    "time": 2648.689697265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (/ (+ (* x x) -1.0) (+ x 1.0)) (- -1.0 x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.012375,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 0.0001250000000000001,
    "time": 12140.59814453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1205.327392578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (pow (* r w) 2.0) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.992930689537006,
    "avg_bits_err_output": 0.20444642969606344,
    "avg_bits_err_improve": 12.788484259840944,
    "time": 34642.4033203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (fma (fma (fma x1 x1 1.0) (fma 2.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -6.0) (* x1 3.0)) (/ x1 (/ (fma x1 x1 1.0) (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)))) 0.0) (* (+ 1.0 (* x1 (+ -6.0 (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0)))))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.524059527574896,
    "avg_bits_err_output": 0.33223049010028566,
    "avg_bits_err_improve": 0.1918290374746104,
    "time": 88422.74658203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.045396829725135,
    "avg_bits_err_output": 1.4738351962201592,
    "avg_bits_err_improve": 16.571561633504977,
    "time": 7915.481201171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(+ (* x (* x (* x -0.12900613773279798))) (* x 0.954929658551372))",
    "output_parens": 5,
    "avg_bits_err_input": 0.28223776155338814,
    "avg_bits_err_output": 0.19343588186597835,
    "avg_bits_err_improve": 0.0888018796874098,
    "time": 17181.57861328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(+ (pow y 4.0) (+ (pow x 4.0) (* (pow y 4.0) -2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.003125,
    "avg_bits_err_output": 0.021,
    "avg_bits_err_improve": -0.017875000000000002,
    "time": 34926.211181640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (- PI) (* (+ b a) -2.0)) (* b a))",
    "output_parens": 6,
    "avg_bits_err_input": 14.1091207942105,
    "avg_bits_err_output": 0.24437293281619574,
    "avg_bits_err_improve": 13.864747861394305,
    "time": 47821.064453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (* (+ 1.0 (/ 1.0 eps)) (/ 1.0 (exp (- x (* eps x))))) (* (exp (* x (- -1.0 eps))) (- 1.0 (/ 1.0 eps)))) 2.0)",
    "output_parens": 15,
    "avg_bits_err_input": 29.78789341309523,
    "avg_bits_err_output": 29.79962282436494,
    "avg_bits_err_improve": -0.011729411269708834,
    "time": 42457.29248046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.0055,
    "avg_bits_err_output": 0.005625,
    "avg_bits_err_improve": -0.0001250000000000001,
    "time": 11664.453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))) (+ 2.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.008625,
    "avg_bits_err_output": 0.008875,
    "avg_bits_err_improve": -0.0002499999999999985,
    "time": 33951.2470703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ (* (/ t (+ 1.0 t)) 4.0) (+ 1.0 (/ 1.0 t)))) (+ (/ (* (/ t (+ 1.0 t)) 4.0) (+ 1.0 (/ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.048625,
    "avg_bits_err_output": 0.009,
    "avg_bits_err_improve": 0.039625,
    "time": 28133.36865234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 4320.938720703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3641.843994140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 5124.650390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.822912304428905,
    "avg_bits_err_output": 0.248875,
    "avg_bits_err_improve": 7.574037304428905,
    "time": 22525.5673828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.3143548054901855,
    "avg_bits_err_output": 7.3143548054901855,
    "avg_bits_err_improve": 0,
    "time": 26058.7255859375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(fma (* x 2.0) eps (* eps eps))",
    "output_parens": 3,
    "avg_bits_err_input": 15.835406440542085,
    "avg_bits_err_output": 0.00725,
    "avg_bits_err_improve": 15.828156440542084,
    "time": 7714.619140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5487659458009073,
    "avg_bits_err_output": 0.38528834688275265,
    "avg_bits_err_improve": 3.1634775989181545,
    "time": 24677.83056640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.020530630351313,
    "avg_bits_err_output": 0.01788928593921275,
    "avg_bits_err_improve": 15.002641344412101,
    "time": 6771.432861328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.53511209548896,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.53511209548896,
    "time": 4943.8095703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.803248968089605,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 38.802373968089604,
    "time": 4189.04345703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.295625,
    "avg_bits_err_improve": 63.704375,
    "time": 60963.4599609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325147286218,
    "avg_bits_err_output": 0.40598853437914684,
    "avg_bits_err_improve": 61.43726293848303,
    "time": 16585.469970703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (/ (+ b (hypot b (* (sqrt a) (sqrt (* c -4.0))))) (* a -2.0)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -1e-235) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (/ (/ (fma -4.0 (* a c) (- (* b b) (* b b))) (- b (hypot b (sqrt (* (* a c) -4.0))))) (* a 2.0)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 4e+143) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (/ (+ b (hypot b (sqrt (* (* a c) -4.0)))) (* a -2.0))))))",
    "output_parens": 91,
    "avg_bits_err_input": 34.472549351833045,
    "avg_bits_err_output": 23.821333121647463,
    "avg_bits_err_improve": 10.651216230185582,
    "time": 37218.905517578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+294) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ 0.5 (/ a (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b)))))",
    "output_parens": 45,
    "avg_bits_err_input": 34.46212258103005,
    "avg_bits_err_output": 23.920758892040453,
    "avg_bits_err_improve": 10.541363688989598,
    "time": 40352.4365234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2066.798095703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.76818272521393,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 39.759057725213935,
    "time": 12491.08544921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (/ (+ x y) (hypot x y)) (/ (hypot x y) (- x y)))",
    "output_parens": 7,
    "avg_bits_err_input": 19.798566548015334,
    "avg_bits_err_output": 0.024424812503605797,
    "avg_bits_err_improve": 19.774141735511726,
    "time": 21879.576904296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6701016891069065,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6701016891069065,
    "time": 27334.611083984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.036875,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.036,
    "time": 6616.84423828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ b a)) (* a (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019073120312590144,
    "avg_bits_err_output": 0.01375,
    "avg_bits_err_improve": 0.005323120312590144,
    "time": 6554.824462890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.015375,
    "avg_bits_err_output": 0.015375,
    "avg_bits_err_improve": 0,
    "time": 3427.475830078125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0,
    "time": 1812.263916015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ e (+ c (+ b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.38880225625468784,
    "avg_bits_err_output": 0.241875,
    "avg_bits_err_improve": 0.14692725625468783,
    "time": 13117.583740234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.488135785344156,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 29.479510785344157,
    "time": 13895.484619140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (/ 1.0 (pow (- (* x x) eps) -0.5))))",
    "output_parens": 6,
    "avg_bits_err_input": 24.17771523680861,
    "avg_bits_err_output": 0.279922368752524,
    "avg_bits_err_improve": 23.897792868056086,
    "time": 18601.867919921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (pow (cbrt (- x (sin x))) 2.0) (/ (pow (cbrt (tan x)) 2.0) (cbrt (/ (fma (/ x (tan x)) (- (pow (cos x) 3.0)) (pow (* (/ x (tan x)) (cos x)) 2.0)) (* (/ x (tan x)) (pow (cos x) 2.0))))))",
    "output_parens": 27,
    "avg_bits_err_input": 29.920272973259017,
    "avg_bits_err_output": 29.9106451833781,
    "avg_bits_err_improve": 0.009627789880916282,
    "time": 51084.835693359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007681401388979041,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.006556401388979041,
    "time": 2922.4794921875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 50000.0) (* n (+ (* (/ 1.0 i) (* (pow (+ 1.0 (/ i n)) n) 100.0)) (* (/ 1.0 i) -100.0))) (* n (/ (+ -100.0 (* 100.0 (pow (exp n) (log1p (/ i n))))) i))))",
    "output_parens": 41,
    "avg_bits_err_input": 47.58844782478861,
    "avg_bits_err_output": 10.3035063515066,
    "avg_bits_err_improve": 37.28494147328201,
    "time": 36052.86181640625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (or (<= b -4e+82) (not (<= b 8e+171))) (* (/ 1.0 (hypot c d)) (+ (/ (* c a) (hypot c d)) (/ d (/ (hypot c d) b)))) (/ (+ (/ c (/ (hypot c d) a)) (/ (* b d) (hypot c d))) (hypot c d)))",
    "output_parens": 24,
    "avg_bits_err_input": 26.675386994784667,
    "avg_bits_err_output": 6.072029057779325,
    "avg_bits_err_improve": 20.60335793700534,
    "time": 27774.061767578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(/ (- (/ b (/ (hypot c d) c)) (/ a (/ (hypot c d) d))) (hypot c d))",
    "output_parens": 9,
    "avg_bits_err_input": 26.20477483441839,
    "avg_bits_err_output": 0.5015075625880917,
    "avg_bits_err_improve": 25.7032672718303,
    "time": 26606.685302734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(fma ux (+ maxCos -1.0) 1.0)",
    "output_parens": 2,
    "avg_bits_err_input": 0.031375,
    "avg_bits_err_output": 0.016425910545455145,
    "avg_bits_err_improve": 0.014949089454544855,
    "time": 13970.255615234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* PI (* uy 2.0))) (sqrt (/ (- 1.0 (log (exp (pow (fma ux maxCos (- 1.0 ux)) 6.0)))) (+ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (* (pow (fma ux maxCos (- 1.0 ux)) 2.0) (pow (sqrt (fma ux maxCos (- 1.0 ux))) 4.0))))))",
    "output_parens": 25,
    "avg_bits_err_input": 13.647832149166652,
    "avg_bits_err_output": 12.141904651216167,
    "avg_bits_err_improve": 1.5059274979504842,
    "time": 55711.454833984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (/ (sqrt (/ (- (pow (/ 1.0 (+ (* (pow (- (pow (fma ux maxCos 1.0) 2.0) (* ux ux)) 8.0) (pow (/ 1.0 (fma ux maxCos (+ 1.0 ux))) 8.0)) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)))) 2.0) (/ (/ (exp (* 2.0 (log (pow (fma ux maxCos (- 1.0 ux)) 12.0)))) (+ (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (pow (- (fma ux maxCos 1.0) ux) 8.0))) (+ (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (pow (- (fma ux maxCos 1.0) ux) 8.0)))) (+ (/ 1.0 (+ (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (pow (- (fma ux maxCos 1.0) ux) 8.0))) (/ (pow (- (fma ux maxCos 1.0) ux) 12.0) (+ (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (pow (- (fma ux maxCos 1.0) ux) 8.0)))))) (hypot 1.0 (fma ux maxCos (- 1.0 ux)))))",
    "output_parens": 74,
    "avg_bits_err_input": 13.676623533641141,
    "avg_bits_err_output": 11.762492687325388,
    "avg_bits_err_improve": 1.9141308463157536,
    "time": 120310.76611328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (* maxCos (- 1.0 ux)) zi) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (expm1 (log1p (* 2.0 (* PI uy))))) xi) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.33887085912373005,
    "avg_bits_err_output": 0.35305045579160377,
    "avg_bits_err_improve": -0.014179596667873717,
    "time": 59658.792724609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (/ 1.0 (+ 1.0 (pow (* (/ alphay alphax) (tan (fma (* 2.0 PI) u1 (* PI 0.5)))) 2.0))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* PI 0.5)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* PI 0.5))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 40,
    "avg_bits_err_input": 0.2029600952810437,
    "avg_bits_err_output": 0.1957099625007211,
    "avg_bits_err_improve": 0.0072501327803226046,
    "time": 36842.00537109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (pow (+ (/ 1.0 u1) -1.0) -0.5) (sin (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5324980702766468,
    "avg_bits_err_output": 0.5265273029589208,
    "avg_bits_err_improve": 0.005970767317725945,
    "time": 24143.328857421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.33138921929424436,
    "avg_bits_err_output": 0.32435700026396,
    "avg_bits_err_improve": 0.007032219030284337,
    "time": 26792.621826171875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (* s 0.5) (log (* (pow (+ (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0) -1.0) -2.0) (pow (/ 1.0 (+ 1.0 (/ 1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))))) -2.0))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.33393869296766343,
    "avg_bits_err_output": 0.3384043593993613,
    "avg_bits_err_improve": -0.004465666431697879,
    "time": 34555.7041015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.05662766810866245,
    "avg_bits_err_output": 0.05662766810866245,
    "avg_bits_err_improve": 0,
    "time": 9813.583984375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (* s (+ 2.0 (* 2.0 (exp (log (cosh (/ (fabs x) s))))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.17231890009084724,
    "avg_bits_err_output": 0.1588917604722948,
    "avg_bits_err_improve": 0.013427139618552436,
    "time": 29031.88427734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6627989233643427,
    "avg_bits_err_output": 0.6598612367210324,
    "avg_bits_err_improve": 0.002937686643310289,
    "time": 34626.920166015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.15328271046875777,
    "avg_bits_err_output": 0.1537164668795955,
    "avg_bits_err_improve": -0.0004337564108377323,
    "time": 34734.654296875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (hypot (sqrt (/ sinTheta_O (/ (hypot 1.0 sinTheta_O) sinTheta_O))) eta)))",
    "output_parens": 7,
    "avg_bits_err_input": 2.599083711564975,
    "avg_bits_err_output": 1.6360430182853798,
    "avg_bits_err_improve": 0.9630406932795954,
    "time": 33148.014892578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (/ v cosTheta_i)) (/ (/ (/ 0.5 v) (sinh (/ 1.0 v))) (pow (exp sinTheta_O) (/ sinTheta_i v))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4628038478056186,
    "avg_bits_err_output": 0.40366238901945634,
    "avg_bits_err_improve": 0.05914145878616228,
    "time": 63601.328369140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (/ 0.5 v) (* (pow (exp (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0))) (/ 0.5 v)) (pow (exp (+ (* (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) (/ 0.3333333333333333 v)) 0.4620666666666667)) 1.5)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.11301117382757771,
    "avg_bits_err_output": 0.097748811030816,
    "avg_bits_err_improve": 0.015262362796761714,
    "time": 40093.41845703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4757510659776972,
    "avg_bits_err_output": 0.4328604280362725,
    "avg_bits_err_improve": 0.04289063794142467,
    "time": 58177.440673828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (/ (- 0.25 u) 0.75)) (* s -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.328498093227955,
    "avg_bits_err_output": 0.5495876366627998,
    "avg_bits_err_improve": 0.7789104565651553,
    "time": 32989.951416015625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.502287367634787,
    "avg_bits_err_output": 0.2095,
    "avg_bits_err_improve": 12.292787367634787,
    "time": 21592.589111328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ 0.125 (* s PI)) (+ (/ (exp (/ (- r) s)) r) (/ (* (exp (* r (/ -0.16666666666666666 s))) (exp (/ r (* s -6.0)))) r)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.12988456576125287,
    "avg_bits_err_output": 0.1398976246802926,
    "avg_bits_err_improve": -0.010013058919039725,
    "time": 75688.60693359375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (sin (* normAngle (- 1.0 u))) (/ n0_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9211871839963994,
    "avg_bits_err_output": 0.7821142378269451,
    "avg_bits_err_improve": 0.13907294616945431,
    "time": 38809.089111328125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (* (pow PI -0.16666666666666666) (sqrt (- 1.0 (+ cosTheta cosTheta)))) (* cosTheta (cbrt PI))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.6828617256700389,
    "avg_bits_err_output": 0.40919912113007434,
    "avg_bits_err_improve": 0.27366260453996455,
    "time": 27410.144775390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p u1) (log1p (* u1 (- u1))))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.349306948014679,
    "avg_bits_err_output": 0.5338122685035713,
    "avg_bits_err_improve": 12.815494679511108,
    "time": 27470.599609375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (/ (+ 1.0 (+ (* 2.0 (cos (* PI (+ u2 u2)))) -1.0)) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 13.394814497583212,
    "avg_bits_err_output": 0.31211228224704,
    "avg_bits_err_improve": 13.082702215336171,
    "time": 27570.649658203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* alpha (- alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.280362091942722,
    "avg_bits_err_output": 0.32506616562662266,
    "avg_bits_err_improve": 13.955295926316099,
    "time": 25137.65869140625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ (/ cos2phi alphax) alphax) (* (pow alphay -2.0) sin2phi)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.65511148338157,
    "avg_bits_err_output": 0.5146836317121297,
    "avg_bits_err_improve": 12.14042785166944,
    "time": 28833.293212890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (or (<= (* PI l) -2e+17) (not (<= (* PI l) 2e+15))) (- (* PI l) (tan (* PI l))) (- (* PI l) (/ (/ (tan (* PI l)) F) F)))",
    "output_parens": 17,
    "avg_bits_err_input": 16.493597986284563,
    "avg_bits_err_output": 0.44558047060324624,
    "avg_bits_err_improve": 16.048017515681316,
    "time": 31591.033935546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2138327222622215,
    "avg_bits_err_output": 0.15629024101186093,
    "avg_bits_err_improve": 0.05754248125036057,
    "time": 23221.98095703125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(if (<= x -1.15e-16) (- (/ F (/ (sin B) (pow (fma F F (fma 2.0 x 2.0)) -0.5))) (/ x (tan B))) (- (* (/ F (hypot F (sqrt (fma 2.0 x 2.0)))) (/ 1.0 (sin B))) (/ x (tan B))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.859468280720668,
    "avg_bits_err_output": 0.5683732026677214,
    "avg_bits_err_improve": 13.291095078052946,
    "time": 37279.88037109375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (* (log (tanh (* PI (* f 0.25)))) (* (pow PI -2.0) 16.0)) (/ 4.0 PI))",
    "output_parens": 9,
    "avg_bits_err_input": 61.53501356036294,
    "avg_bits_err_output": 0.6443679115592876,
    "avg_bits_err_improve": 60.890645648803655,
    "time": 52595.61767578125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= l -1.02e+63) (/ 1.0 (/ (sqrt (/ (+ (/ (+ 1.0 x) (/ (+ x -1.0) (fma l l (* t (* t 2.0))))) (* l l)) 2.0)) t)) (if (<= l -1.16e-126) (/ (sqrt 2.0) (/ (fabs (* (sqrt (/ (fma (/ (pow l 4.0) (fma l l (* 2.0 (* t t)))) (- 1.0 x) (* (+ 1.0 x) (* l l))) (+ x -1.0))) (/ (hypot l (* t (sqrt 2.0))) l))) t)) (if (<= l 2.1e-154) (/ t (/ (hypot l (sqrt (* (fma l l (* 2.0 (* t t))) (/ (+ 1.0 x) (+ x -1.0))))) (sqrt 2.0))) (if (<= l 4.1e+72) (/ (sqrt 2.0) (/ (* (hypot l (* t (sqrt 2.0))) (/ (sqrt (/ (fma (pow l 4.0) (/ (- 1.0 x) (fma l l (* 2.0 (* t t)))) (* (+ 1.0 x) (* l l))) (+ x -1.0))) l)) t)) (* t (sqrt (/ 2.0 (+ (* l l) (* (+ 1.0 x) (/ (fma 2.0 (* t t) (* l l)) (+ x -1.0)))))))))))",
    "output_parens": 88,
    "avg_bits_err_input": 42.87654474662172,
    "avg_bits_err_output": 34.46595877927773,
    "avg_bits_err_improve": 8.41058596734399,
    "time": 49345.301025390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.8751220386912992,
    "avg_bits_err_output": 0.21454041406655636,
    "avg_bits_err_improve": 3.6605816246247427,
    "time": 22279.267822265625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (pow (+ 1.0 (pow (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))) 2.0)) -0.5))))",
    "output_parens": 12,
    "avg_bits_err_input": 1.0164762837965524,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 1.0097262837965524,
    "time": 14014.75439453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ t (/ l (sqrt 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.501658317288966,
    "avg_bits_err_output": 1.0887246521307103,
    "avg_bits_err_improve": 9.412933665158256,
    "time": 24157.871337890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -1.16e-150) (sqrt (+ (* (fma l -2.0 (* (- U* U) (* l (/ n Om)))) (* 2.0 (* n (/ (* l U) Om)))) (* t (* 2.0 (* n U))))) (if (<= n 3e-304) (sqrt (fma (fma l -2.0 (* (- U* U) (* l (/ n Om)))) (* l (* 2.0 (/ U (/ Om n)))) (* U (* n (* 2.0 t))))) (if (<= n 8.8e-243) (* (sqrt (* 2.0 (* U (fma (/ l Om) (+ (* (/ l Om) (* n (- U* U))) (* l -2.0)) t)))) (sqrt n)) (if (<= n 1.4e+221) (sqrt (+ (* (fma l -2.0 (* (- U* U) (* l (/ n Om)))) (* 2.0 (* n (/ (* l U) Om)))) (* t (* 2.0 (* n U))))) (* (sqrt n) (sqrt (* 2.0 (* U (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t)))))))))",
    "output_parens": 77,
    "avg_bits_err_input": 34.563245528192134,
    "avg_bits_err_output": 27.852138538588743,
    "avg_bits_err_improve": 6.71110698960339,
    "time": 46264.697998046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -6e+266) (/ (/ l (tan k)) (* (/ t (/ t (* (* t k) (/ (sin k) l)))) (/ (pow (* k 0.5) 2.0) (* k 0.5)))) (if (<= t -9.2e-118) (/ (/ (* 2.0 (/ l k)) (tan k)) (* t (* (/ (sin k) l) (* t (/ k t))))) (if (<= t 4.1e-251) (/ (/ l (tan k)) (fma (* k 0.5) (* (/ t t) (/ (* t (* k (sin k))) l)) 0.0)) (/ (/ l (tan k)) (fma (* k 0.5) (* t (/ k (* t (/ l (* t (sin k)))))) 0.0)))))",
    "output_parens": 53,
    "avg_bits_err_input": 47.57916968591727,
    "avg_bits_err_output": 6.476301966943431,
    "avg_bits_err_improve": 41.10286771897384,
    "time": 111732.76953125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (* (/ l (* t (tan k))) (/ (* 2.0 (/ l t)) (+ 2.0 (pow (/ k t) 2.0)))) (* t (sin k)))",
    "output_parens": 13,
    "avg_bits_err_input": 33.21556720405132,
    "avg_bits_err_output": 13.19845821496688,
    "avg_bits_err_improve": 20.017108989084438,
    "time": 96136.25415039062,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (sqrt 0.5) (* (cos th) (+ (* a2 a2) (* a1 a1))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5316951156468169,
    "avg_bits_err_output": 0.4869802656439315,
    "avg_bits_err_improve": 0.04471485000288544,
    "time": 31338.44677734375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (sqrt (* PI (* 2.0 n))) (pow (* PI (* 2.0 n)) (* k -0.5))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5182383812897454,
    "avg_bits_err_output": 0.41805118412752157,
    "avg_bits_err_improve": 0.10018719716222385,
    "time": 25585.09033203125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(fma (* (* 2.0 (sinh l)) (cos (* K 0.5))) J U)",
    "output_parens": 6,
    "avg_bits_err_input": 16.86010227587373,
    "avg_bits_err_output": 0.07861560156295071,
    "avg_bits_err_improve": 16.781486674310777,
    "time": 20369.088623046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (* (cbrt (cos (- (* (+ m n) (* K 0.5)) M))) (pow (pow (cbrt (cbrt (cos (- (* (+ m n) (* K 0.5)) M)))) 2.0) 3.0)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0))))",
    "output_parens": 26,
    "avg_bits_err_input": 15.470931656540774,
    "avg_bits_err_output": 15.443554004324879,
    "avg_bits_err_improve": 0.027377652215895054,
    "time": 38108.40673828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.14964624062518,
    "avg_bits_err_output": 8.26339624062518,
    "avg_bits_err_improve": 9.88625,
    "time": 33582.406982421875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (or (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) -2e+105) (not (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) 4e-19))) (* w0 (sqrt (- 1.0 (/ M (* (/ 4.0 (/ D d)) (/ (/ l M) (* h (/ D d)))))))) (* w0 (sqrt (+ 1.0 (+ 1.0 (+ -1.0 (* (/ h l) (* (pow (* D (/ M d)) 2.0) -0.25))))))))",
    "output_parens": 39,
    "avg_bits_err_input": 13.928901350771833,
    "avg_bits_err_output": 9.453409764940163,
    "avg_bits_err_improve": 4.475491585831669,
    "time": 42619.057373046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -4e+279) (/ (* (sqrt (- A)) (/ c0 (sqrt l))) (sqrt (- V))) (if (<= (* V l) -2e-301) (* c0 (* (sqrt (- A)) (sqrt (/ -1.0 (* V l))))) (if (<= (* V l) 0.0) (/ (* (sqrt (- A)) (/ c0 (sqrt l))) (sqrt (- V))) (if (<= (* V l) 1e+286) (* c0 (/ (sqrt A) (sqrt (* V l)))) (/ (* c0 (/ (sqrt A) (sqrt (- l)))) (sqrt (- V)))))))",
    "output_parens": 48,
    "avg_bits_err_input": 19.465906873322314,
    "avg_bits_err_output": 5.955505791724974,
    "avg_bits_err_improve": 13.51040108159734,
    "time": 42294.971923828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* D D) 2e-233) (log (pow (exp (/ (* c0 0.5) w)) (/ (* M M) (- (* (/ c0 (* D (* D h))) (/ (* d d) w)) (sqrt (- (pow (* (/ c0 (* D (* D h))) (/ (* d d) w)) 2.0) (* M M))))))) (if (<= (* D D) 2e+102) (* c0 (* (/ 0.5 w) (* M (/ M (- (/ (/ (* (/ c0 D) (/ (* d d) w)) h) D) (sqrt (- (pow (/ (/ (* (/ c0 D) (/ (* d d) w)) h) D) 2.0) (* M M)))))))) (if (<= (* D D) 2e+199) (* (/ c0 (* w 2.0)) (fma (/ (/ c0 h) (/ D (/ d w))) (/ d D) (sqrt (- (pow (* (* d (pow D -2.0)) (* (/ d w) (/ c0 h))) 2.0) (* M M))))) (if (<= (* D D) 1e+269) (fma (/ (* 0.5 M) w) (* c0 (/ M (- (* (/ c0 (* D (* D h))) (/ (* d d) w)) (sqrt (- (pow (* (/ c0 (* D (* D h))) (/ (* d d) w)) 2.0) (* M M)))))) 0.0) (+ (* (sqrt (- (pow (/ (/ d D) (/ (/ D d) (/ c0 (* w h)))) 2.0) (* M M))) (/ (/ c0 2.0) w)) (* c0 (* (/ 0.5 w) (* (/ c0 (* w h)) (* (/ d D) (/ d D))))))))))",
    "output_parens": 122,
    "avg_bits_err_input": 59.429657685104644,
    "avg_bits_err_output": 36.241592091896756,
    "avg_bits_err_improve": 23.188065593207888,
    "time": 85661.7587890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) (- INFINITY)) (fma (* (* M (* (/ h l) (* 0.5 (* (/ D d) -0.5)))) (/ (fabs d) (sqrt (* h l)))) (* M (* 0.5 (/ D d))) (/ (fabs d) (sqrt (* h l)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) -4e-158) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 0.0) (fma (pow (* (* M D) (/ 0.5 d)) 2.0) (/ (* (fabs d) (* h -0.5)) (* l (sqrt (* h l)))) (/ (fabs d) (sqrt (* h l)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 5e+232) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) INFINITY) (* (/ (fabs d) (sqrt (* h l))) (+ 1.0 (* (* M (/ (* 0.5 D) d)) (/ (* 0.5 (* M (/ (* D -0.5) d))) (/ l h))))) (* (/ (/ d (sqrt (- h))) (sqrt (- l))) (+ -1.0 (/ 0.5 (/ (* d (/ (* d l) h)) (pow (* D (* 0.5 M)) 2.0))))))))))",
    "output_parens": 176,
    "avg_bits_err_input": 26.602134880330688,
    "avg_bits_err_output": 14.358929493363535,
    "avg_bits_err_improve": 12.243205386967153,
    "time": 137808.5673828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (- 0.25 (* 0.25 (exp (- (log1p (* x x)))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 16,
    "avg_bits_err_input": 15.733236059195152,
    "avg_bits_err_output": 15.215962280905694,
    "avg_bits_err_improve": 0.5172737782894572,
    "time": 49514.34716796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (* (/ 1.0 PI) 1.3333333333333333) (- 1.0 (* v v))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.9845731203125901,
    "avg_bits_err_output": 0.012198120312590145,
    "avg_bits_err_improve": 0.972375,
    "time": 9046.105712890625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* (sqrt (fma v (* v -6.0) 2.0)) PI)) (* (- 1.0 (* v v)) t))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4586993025406222,
    "avg_bits_err_output": 0.11041484475338016,
    "avg_bits_err_improve": 0.34828445778724204,
    "time": 23692.33740234375,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (sqrt (+ 2.0 (* v (* v -6.0)))) (/ 4.0 (- 1.0 (* v v))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.012146240625180289,
    "avg_bits_err_output": 0.01327124062518029,
    "avg_bits_err_improve": -0.001125000000000001,
    "time": 15815.879150390625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(expm1 (log1p (- PI (acos (/ (fma v (* v -5.0) 1.0) (- 1.0 (* v v)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5546123587068369,
    "avg_bits_err_output": 0.555072658451686,
    "avg_bits_err_improve": -0.00046029974484906866,
    "time": 30104.175048828125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (/ (- -10.0 k) (/ a k))))",
    "output_parens": 8,
    "avg_bits_err_input": 1.8381491208740295,
    "avg_bits_err_output": 0.24063366134619682,
    "avg_bits_err_improve": 1.5975154595278327,
    "time": 22322.54248046875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.018230344508855918,
    "avg_bits_err_output": 0.018230344508855918,
    "avg_bits_err_improve": 0,
    "time": 6649.310546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* b (* b 4.0))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.1817998125036057,
    "avg_bits_err_output": 0.013490805075532802,
    "avg_bits_err_improve": 0.1683090074280729,
    "time": 20623.678466796875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18492463672813633,
    "avg_bits_err_output": 0.028353031057445494,
    "avg_bits_err_improve": 0.15657160567069084,
    "time": 19298.05810546875,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (pow (hypot a b) 4.0) (fma 4.0 (fma a (* a (- 1.0 a)) (* b (* b (+ a 3.0)))) -1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.18631897236993444,
    "avg_bits_err_output": 0.03281206125017448,
    "avg_bits_err_improve": 0.15350691111975995,
    "time": 17060.162353515625,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ 1.0 (/ (hypot (* p 2.0) x) x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 13.374506953137011,
    "avg_bits_err_output": 13.379905141511154,
    "avg_bits_err_improve": -0.005398188374142521,
    "time": 21373.9814453125,
    "seed": 1,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.79512143001579,
    "avg_bits_err_output": 0.02125,
    "avg_bits_err_improve": 40.77387143001579,
    "time": 5022.150634765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -2e-8) (/ (- (sin x) x) (- (* (sin x) (/ 1.0 (cos x))) x)) (if (<= x 2.4e-8) (/ 1.0 (/ (+ (+ x (sin x)) (* x (/ (+ x (sin x)) (tan x)))) (* (+ x (sin x)) (/ (- (- x) (sin x)) (tan x))))) (/ (- (sin x) x) (- (cbrt (pow (tan x) 3.0)) x))))",
    "output_parens": 37,
    "avg_bits_err_input": 31.17525936815557,
    "avg_bits_err_output": 25.41555287736656,
    "avg_bits_err_improve": 5.759706490789007,
    "time": 37993.811279296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.05e-159) (/ (- (+ (/ b_2 (/ (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ (- (fma a (- c) (* a c)) (* a c)) (sqrt (- (* b_2 b_2) (* a c))))) b_2) a) (/ (- c) (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))))",
    "output_parens": 28,
    "avg_bits_err_input": 34.22785241872434,
    "avg_bits_err_output": 18.977164638379712,
    "avg_bits_err_improve": 15.250687780344627,
    "time": 29271.83642578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) (/ c (- (hypot b_2 (sqrt (* a c))) b_2)) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) -2e-145) (/ (- (/ -1.0 (pow (- (* b_2 b_2) (* a c)) -0.5)) b_2) a) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 2e-262) (/ (/ (fma a c 0.0) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 1e+293) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ c (+ b_2 (sqrt (/ 1.0 (/ 1.0 (- (* b_2 b_2) (* a c)))))))))))",
    "output_parens": 72,
    "avg_bits_err_input": 34.23761159853698,
    "avg_bits_err_output": 22.154974612215266,
    "avg_bits_err_improve": 12.082636986321713,
    "time": 28802.54248046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 31.549309820278808,
    "avg_bits_err_output": 0.1262834593805891,
    "avg_bits_err_improve": 31.42302636089822,
    "time": 25403.768310546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (pow E (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.9093314416616,
    "avg_bits_err_output": 32.61433659173905,
    "avg_bits_err_improve": 0.29499484992255276,
    "time": 43376.68017578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.543885853594208,
    "avg_bits_err_output": 0.017625,
    "avg_bits_err_improve": 29.52626085359421,
    "time": 16288.416015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (pow (+ 1.0 x) -2.0) (/ (fma x -1.0 -1.0) x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.112249711393671,
    "avg_bits_err_output": 0.02004248125036058,
    "avg_bits_err_improve": 14.09220723014331,
    "time": 13722.735107421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -1.08e-28) (fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps)))) (if (<= x 1.35e-23) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (fma (sin x) (- (sin eps)) (* (cos x) (+ (cos eps) -1.0)))))",
    "output_parens": 28,
    "avg_bits_err_input": 39.98961918396757,
    "avg_bits_err_output": 0.5500468390254372,
    "avg_bits_err_improve": 39.439572344942135,
    "time": 39145.896484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ (+ 1.0 (- x x)) (fma (cbrt (+ 1.0 x)) (cbrt (+ 1.0 x)) (* (cbrt x) (+ (cbrt (+ 1.0 x)) (cbrt x)))))",
    "output_parens": 14,
    "avg_bits_err_input": 30.10594522353427,
    "avg_bits_err_output": 0.5392352262367273,
    "avg_bits_err_improve": 29.566709997297544,
    "time": 29359.129638671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.031646316473925,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 30.031021316473925,
    "time": 12135.1044921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -2e-220) (/ (- (/ 1.0 (pow (fma b b (* c (* a -4.0))) -0.5)) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (/ 0.5 (* (+ b (hypot (sqrt (* a (* c -4.0))) b)) (/ a (fma a (* c -4.0) (- (* b b) (* b b)))))) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 2e+262) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 86,
    "avg_bits_err_input": 34.14834767390882,
    "avg_bits_err_output": 21.4669037495778,
    "avg_bits_err_improve": 12.681443924331024,
    "time": 41548.979736328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -1e-233) (* -0.5 (/ (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (* -0.5 (* (/ 4.0 (/ 1.0 c)) (/ 1.0 (- b (hypot b (pow (pow (* c (* 4.0 a)) 2.0) 0.25)))))) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 5e+301) (* -0.5 (/ (+ b (sqrt (fma b b (* a (* c -4.0))))) a)) (* -0.5 (* (/ 4.0 (/ 1.0 c)) (/ 1.0 (- b (hypot b (* (sqrt c) (sqrt (* a -4.0))))))))))))",
    "output_parens": 90,
    "avg_bits_err_input": 33.83041998751424,
    "avg_bits_err_output": 14.759590214726273,
    "avg_bits_err_improve": 19.070829772787967,
    "time": 36772.82958984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.348962375838774,
    "avg_bits_err_output": 0.022115601562950726,
    "avg_bits_err_improve": 61.32684677427582,
    "time": 10379.204833984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (- (log1p n) (log n)) (* (pow (* (* (cbrt (+ -1.0 (pow (log1p n) 9.0))) (+ -1.0 (exp (log1p (exp (* -0.3333333333333333 (log1p (+ (pow (log1p n) 3.0) (pow (log1p n) 6.0))))))))) (pow (/ 1.0 (fma (log1p n) (log1p n) (+ (log1p n) 1.0))) 0.3333333333333333)) 2.0) (cbrt (+ (log1p n) -1.0))))",
    "output_parens": 33,
    "avg_bits_err_input": 63.0047477116072,
    "avg_bits_err_output": 44.21585633449336,
    "avg_bits_err_improve": 18.788891377113842,
    "time": 47473.1142578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.64668196380714,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 58.63905696380714,
    "time": 19269.99072265625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (- 1.0 (* (/ x (sin x)) (cos x))) x)",
    "output_parens": 6,
    "avg_bits_err_input": 59.82052690918915,
    "avg_bits_err_output": 59.81165272098237,
    "avg_bits_err_improve": 0.008874188206775102,
    "time": 39297.11181640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (/ (expm1 (* eps b)) (/ (expm1 (* eps (+ b a))) (/ (expm1 (* eps a)) eps))))",
    "output_parens": 11,
    "avg_bits_err_input": 60.14925138088946,
    "avg_bits_err_output": 29.583710716883054,
    "avg_bits_err_improve": 30.565540664006406,
    "time": 34960.761962890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.10146429990704,
    "avg_bits_err_output": 0.00875,
    "avg_bits_err_improve": 41.092714299907044,
    "time": 5589.284423828125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.63475144687459,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 58.63362644687459,
    "time": 3403.995361328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.611401246432838,
    "avg_bits_err_output": 0.019765210880563468,
    "avg_bits_err_improve": 29.591636035552273,
    "time": 18569.103515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (/ 1.0 (+ (exp x) -2.0)) (* (exp x) (pow (+ (exp x) -2.0) 2.0)) 1.0) (exp x))",
    "output_parens": 11,
    "avg_bits_err_input": 29.516741666768688,
    "avg_bits_err_output": 29.10138082111809,
    "avg_bits_err_improve": 0.4153608456505964,
    "time": 35542.856689453125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (fma (/ -1.0 (- (* x x) x)) (- (fma x 2.0 -2.0) x) (* (- (fma x 2.0 -2.0) x) (/ 1.0 (- (* x x) x)))) (fma (/ 1.0 (- 1.0 (* x x))) (- 1.0 x) (* (/ -1.0 (- (* x x) x)) (- (fma x 2.0 -2.0) x))))",
    "output_parens": 24,
    "avg_bits_err_input": 9.27282688135644,
    "avg_bits_err_output": 9.27289420294411,
    "avg_bits_err_improve": -6.732158766986629e-05,
    "time": 56177.81591796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(/ (fma (tan x) (tan eps) (+ (/ (+ (tan x) (tan eps)) (tan x)) -1.0)) (/ (- 1.0 (* (tan x) (tan eps))) (tan x)))",
    "output_parens": 16,
    "avg_bits_err_input": 36.824550139501774,
    "avg_bits_err_output": 19.520700005940924,
    "avg_bits_err_improve": 17.30385013356085,
    "time": 38516.21533203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))",
    "output_parens": 5,
    "avg_bits_err_input": 30.3118285325049,
    "avg_bits_err_output": 0.16534680468885218,
    "avg_bits_err_improve": 30.14648172781605,
    "time": 21040.85302734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (/ (pow (sin eps) 2.0) (- -1.0 (cos eps))) (* (sin eps) (cos x)))",
    "output_parens": 10,
    "avg_bits_err_input": 37.076640996947305,
    "avg_bits_err_output": 0.33529014924377815,
    "avg_bits_err_improve": 36.74135084770353,
    "time": 28193.7919921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (* (/ (+ x 1.0) (sqrt (+ x 1.0))) (sqrt x))))",
    "output_parens": 10,
    "avg_bits_err_input": 20.160534528008185,
    "avg_bits_err_output": 0.12068176718957335,
    "avg_bits_err_improve": 20.03985276081861,
    "time": 28382.4775390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (+ 1.0 (* N (+ 1.0 N))))",
    "output_parens": 4,
    "avg_bits_err_input": 14.638241763027859,
    "avg_bits_err_output": 0.299052021770099,
    "avg_bits_err_improve": 14.33918974125776,
    "time": 20512.809326171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.50977604596259,
    "avg_bits_err_output": 1.410675545594294,
    "avg_bits_err_improve": 28.099100500368294,
    "time": 29699.73779296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(+ (/ (* (- 1.0 m) (* m (- 1.0 m))) v) (+ m -1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07411804531403245,
    "avg_bits_err_output": 0.07687048906511419,
    "avg_bits_err_improve": -0.0027524437510817457,
    "time": 31578.04638671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (/ b (/ -1.0 a)) (* b a))",
    "output_parens": 4,
    "avg_bits_err_input": 16.018193993929692,
    "avg_bits_err_output": 0.273844737505048,
    "avg_bits_err_improve": 15.744349256424645,
    "time": 22794.283935546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (/ (sqrt (+ 1.0 (cos (* (* PI angle) 0.011111111111111112)))) (sqrt 2.0))) 2.0) (pow (* b (sin (/ (* PI angle) 180.0))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 20.331947925664565,
    "avg_bits_err_output": 20.3505449655236,
    "avg_bits_err_improve": -0.018597039859034936,
    "time": 47418.666259765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (- b a) (* (+ b a) (sin (* angle (* PI 0.011111111111111112)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.72152342700583,
    "avg_bits_err_output": 21.63646326499895,
    "avg_bits_err_improve": 10.08506016200688,
    "time": 43901.925537109375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (/ (/ PI 180.0) (/ 1.0 angle)))) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 20.567626989963102,
    "avg_bits_err_output": 20.55782549240088,
    "avg_bits_err_improve": 0.009801497562222039,
    "time": 51078.87744140625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(fma (/ m v) (* m (- 1.0 m)) (- m))",
    "output_parens": 5,
    "avg_bits_err_input": 0.18167932343849155,
    "avg_bits_err_output": 0.1719080828133113,
    "avg_bits_err_improve": 0.009771240625180255,
    "time": 22842.970703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3253321527932952,
    "avg_bits_err_output": 0.3141717054206411,
    "avg_bits_err_improve": 0.011160447372654092,
    "time": 39117.161376953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13404248125036058,
    "avg_bits_err_output": 0.13404248125036058,
    "avg_bits_err_improve": 0,
    "time": 23724.6181640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (+ (* (* (cos phi1) (cos phi2)) (* (sin lambda1) (sin lambda2))) (* (* (cos phi1) (cos phi2)) (* (cos lambda1) (cos lambda2)))))) R)",
    "output_parens": 20,
    "avg_bits_err_input": 16.773023324629563,
    "avg_bits_err_output": 4.030628208447027,
    "avg_bits_err_improve": 12.742395116182536,
    "time": 44239.112060546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ c 0.5) (- (- b) (sqrt (fma b b (* a (* c -4.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 52.41577278449764,
    "avg_bits_err_output": 0.0858962406251803,
    "avg_bits_err_improve": 52.32987654387246,
    "time": 35911.34375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ (- c) 0.5) (+ b (sqrt (+ (* (* c a) -4.0) (* b b)))))",
    "output_parens": 9,
    "avg_bits_err_input": 28.773278837012505,
    "avg_bits_err_output": 0.28071016601330323,
    "avg_bits_err_improve": 28.4925686709992,
    "time": 34885.412353515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ (- c) 0.5) (+ b (sqrt (+ (* b b) (* a (* c -4.0))))))",
    "output_parens": 9,
    "avg_bits_err_input": 43.91716270595241,
    "avg_bits_err_output": 0.15692708319999193,
    "avg_bits_err_improve": 43.76023562275242,
    "time": 37646.820068359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -2e-220) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (/ 0.5 (* (+ b (hypot (sqrt (* a (* c -4.0))) b)) (/ a (fma a (* c -4.0) (- (* b b) (* b b)))))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 2e+262) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 86,
    "avg_bits_err_input": 34.1542325955339,
    "avg_bits_err_output": 21.468067667801698,
    "avg_bits_err_improve": 12.6861649277322,
    "time": 42703.686279296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (+ (cos phi1) (* (cos phi2) (+ (log1p (expm1 (* (sin lambda1) (sin lambda2)))) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.9275932301321357,
    "avg_bits_err_output": 0.23471255276198086,
    "avg_bits_err_improve": 0.6928806773701548,
    "time": 37823.492919921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (+ -1.0 (cbrt (pow (- 0.5 (/ (pow (exp -2.0) x) -2.0)) -9.0))) (fma 4.0 (pow (+ 1.0 (exp (* -2.0 x))) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (exp (* -2.0 x)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 29.428468357254232,
    "avg_bits_err_output": 29.4211772717752,
    "avg_bits_err_improve": 0.007291085479032233,
    "time": 45133.775634765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.248533931562456,
    "avg_bits_err_output": 0.01227124062518029,
    "avg_bits_err_improve": 58.236262690937274,
    "time": 16138.55126953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.18737650829796,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 58.17950150829796,
    "time": 10892.0556640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(cbrt (pow (cosh x) -3.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.009026789890100096,
    "avg_bits_err_output": 0.051970530963535294,
    "avg_bits_err_improve": -0.042943741073435196,
    "time": 3631.94677734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 32.761290241011864,
    "avg_bits_err_output": 0.066375,
    "avg_bits_err_improve": 32.69491524101186,
    "time": 4851.580322265625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.62976193228778,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 58.62213693228778,
    "time": 22356.565185546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05073836132445107,
    "avg_bits_err_output": 0.05127124062518029,
    "avg_bits_err_improve": -0.0005328793007292193,
    "time": 3802.397705078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (/ 1.0 (hypot 1.0 (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12277124062518029,
    "avg_bits_err_output": 0.12396936093777045,
    "avg_bits_err_improve": -0.001198120312590159,
    "time": 33044.775390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (* eh (/ (tan t) ew))))) (* (* eh (sin t)) (sin (atan (/ (* eh (- (tan t))) ew))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.12832312031259013,
    "avg_bits_err_output": 0.12844812031259015,
    "avg_bits_err_improve": -0.000125000000000014,
    "time": 37167.228515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (sin (* phi2 0.5)) (- (sin (* 0.5 phi1))) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 39.425490359356836,
    "avg_bits_err_output": 0.12834017133148057,
    "avg_bits_err_improve": 39.297150188025356,
    "time": 36413.514404296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (+ 1.0 (+ 1.0 (- -1.0 (/ (/ b a) (/ a b))))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.467379223809136,
    "avg_bits_err_output": 0.008363361324451065,
    "avg_bits_err_improve": 14.459015862484685,
    "time": 6952.522216796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi1) (* (sin delta) (sin theta))) (fma (cos delta) (/ (+ 1.0 (cos (+ phi1 phi1))) 2.0) (* (sin phi1) (* (sin delta) (* (cos theta) (- (cos phi1))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.15031926026065223,
    "avg_bits_err_output": 0.1177573931213614,
    "avg_bits_err_improve": 0.03256186713929084,
    "time": 53244.373046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* a -3.0) c) (+ b (sqrt (fma b b (* (* a -3.0) c))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 52.432124763581655,
    "avg_bits_err_output": 0.3828402265701624,
    "avg_bits_err_improve": 52.049284537011495,
    "time": 42295.58642578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma b b (* c (* a -3.0))))))",
    "output_parens": 7,
    "avg_bits_err_input": 28.98665986906457,
    "avg_bits_err_output": 0.2749812031259014,
    "avg_bits_err_improve": 28.71167866593867,
    "time": 36969.44189453125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* -3.0 a)) (+ b (sqrt (fma b b (* -3.0 (* a c)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 43.988148458846915,
    "avg_bits_err_output": 0.4111802800856293,
    "avg_bits_err_improve": 43.576968178761284,
    "time": 39880.83837890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (or (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) -1e-70) (not (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) 2e-203))) (* (/ 1.0 a) (* (- b (hypot b (* (* (sqrt (fabs c)) (sqrt (fabs a))) (sqrt 3.0)))) -0.3333333333333333)) (* (/ 1.0 a) (/ (fma c (* a -3.0) (* b (- b (sqrt (fma c (* a -3.0) (* b b)))))) (/ 3.0 (pow (fma c (* a -3.0) (* b b)) -0.5)))))",
    "output_parens": 49,
    "avg_bits_err_input": 34.200232836986736,
    "avg_bits_err_output": 16.059750524274467,
    "avg_bits_err_improve": 18.14048231271227,
    "time": 51870.16015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (cos phi2) (fma (cos lambda1) (- (sin lambda2)) (* (sin lambda1) (cos lambda2)))) (- (* (cos phi1) (sin phi2)) (/ (+ (* (sin lambda2) (sin lambda1)) (* (cos lambda1) (cos lambda2))) (/ 1.0 (* (cos phi2) (sin phi1))))))",
    "output_parens": 26,
    "avg_bits_err_input": 13.309146663637202,
    "avg_bits_err_output": 0.18248576280258658,
    "avg_bits_err_improve": 13.126660900834615,
    "time": 48185.170166015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (* (+ -1.0 (- (* (/ (- (* x x) x) (fma x x -1.0)) (+ x -1.0)) x)) (+ x 1.0)) (fma x x -1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 29.22226749814124,
    "avg_bits_err_output": 28.203840399844196,
    "avg_bits_err_improve": 1.0184270982970425,
    "time": 45863.24951171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.013125,
    "avg_bits_err_output": 0.013125,
    "avg_bits_err_improve": 0,
    "time": 15079.349609375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 1.0 (/ (+ x -1.0) 2.0)) (- -1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.034993816559629,
    "avg_bits_err_output": 0.06932312031259015,
    "avg_bits_err_improve": 13.965670696247038,
    "time": 25982.75390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (/ (- (pow (* (* (cbrt (+ C (- A (hypot B (- A C))))) (cbrt (* 2.0 (fma C (* A -4.0) (* B B))))) (cbrt F)) 1.5)) (+ (* B B) (* -4.0 (* A C)))) (/ (- (sqrt (* (- (- (hypot B (- A C)) A) C) (* F -2.0)))) (hypot (pow (pow (* A (* C -4.0)) 2.0) 0.25) B)))",
    "output_parens": 57,
    "avg_bits_err_input": 51.961170785148546,
    "avg_bits_err_output": 32.52793586263091,
    "avg_bits_err_improve": 19.433234922517634,
    "time": 60827.68896484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.392346234756975,
    "avg_bits_err_output": 14.000622105211228,
    "avg_bits_err_improve": 15.391724129545747,
    "time": 30753.185302734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (+ A (+ C (hypot B (- A C))))) (* (sqrt (* 2.0 (fma (* A -4.0) C (* B B)))) (- (sqrt F)))) (+ (* B B) (* -4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (sqrt (/ F (fma A (* C -4.0) (* B B))))) (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (/ (- (sqrt F)) (hypot B (pow (pow (* A (* C -4.0)) 2.0) 0.25))))))",
    "output_parens": 92,
    "avg_bits_err_input": 52.00291471876566,
    "avg_bits_err_output": 32.17016869517594,
    "avg_bits_err_improve": 19.83274602358972,
    "time": 55794.431640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(* (cbrt (/ 0.5 a)) (cbrt g))",
    "output_parens": 4,
    "avg_bits_err_input": 15.184989911331883,
    "avg_bits_err_output": 0.835291889749758,
    "avg_bits_err_improve": 14.349698021582125,
    "time": 18287.39697265625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (/ (cbrt (* 0.5 (- (hypot g h) g))) (cbrt a)) (* (cbrt (/ -0.5 a)) (cbrt (/ 1.0 (/ 1.0 (+ g (hypot g h)))))))",
    "output_parens": 15,
    "avg_bits_err_input": 36.10907955477037,
    "avg_bits_err_output": 2.7647355975730754,
    "avg_bits_err_improve": 33.344343957197296,
    "time": 34244.478271484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9885077078205238,
    "avg_bits_err_output": 0.032363534379146665,
    "avg_bits_err_improve": 0.9561441734413771,
    "time": 36899.66064453125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ 1.0 (+ 1.0 (exp (- b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.6606981203125901,
    "avg_bits_err_output": 0.014344360937770431,
    "avg_bits_err_improve": 0.6463537593748196,
    "time": 14565.879638671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -5e+206) (/ (/ a1 (/ b1 a2)) b2) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-321) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 4e-307) (* (/ a1 b1) (/ a2 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+254) (/ (* a1 a2) (* b1 b2)) (/ (/ a2 b1) (/ b2 a1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.550700597999379,
    "avg_bits_err_output": 3.3770913434896292,
    "avg_bits_err_improve": 8.17360925450975,
    "time": 15184.1220703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5152431164648773,
    "avg_bits_err_output": 0.43469812031259014,
    "avg_bits_err_improve": 0.08054499615228716,
    "time": 13653.5654296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -20.0) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.11708979415488,
    "avg_bits_err_output": 0.0308512288648421,
    "avg_bits_err_improve": 53.08623856529004,
    "time": 17458.73046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.6611866482956055,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.6611866482956055,
    "time": 1869.33544921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ 1.0 (sqrt (/ (+ 1.0 x) (- 1.0 x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.0155,
    "avg_bits_err_output": 0.012125,
    "avg_bits_err_improve": 0.0033749999999999995,
    "time": 5460.30908203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1180.335693359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(fma (* r w) (* w (* r (/ (fma v 0.25 -0.375) (- 1.0 v)))) (+ -1.5 (* 2.0 (pow r -2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 12.560425494193913,
    "avg_bits_err_output": 0.16369169090686497,
    "avg_bits_err_improve": 12.396733803287049,
    "time": 44019.168212890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.5183431564370132,
    "avg_bits_err_output": 0.3302958838109496,
    "avg_bits_err_improve": 0.18804727262606363,
    "time": 96973.66577148438,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= t1 -2.5e-257) (* (/ (- t1) (+ t1 u)) (/ v (+ t1 u))) (if (<= t1 1.05e-214) (/ (* t1 (/ v (+ t1 u))) (- t1 u)) (/ (/ v (+ t1 u)) (- -1.0 (/ u t1)))))",
    "output_parens": 20,
    "avg_bits_err_input": 18.08953280509871,
    "avg_bits_err_output": 1.5927188412211404,
    "avg_bits_err_improve": 16.49681396387757,
    "time": 21303.79296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (+ (/ x (/ -7.751569170074954 x)) 0.954929658551372))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2636062031259014,
    "avg_bits_err_output": 0.21308045156583522,
    "avg_bits_err_improve": 0.05052575156006617,
    "time": 24242.525390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0026981203125901448,
    "avg_bits_err_output": 0.0026981203125901448,
    "avg_bits_err_improve": 0,
    "time": 36430.01611328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* (/ (/ 0.5 a) b) (/ PI (+ a b)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.646059466340832,
    "avg_bits_err_output": 0.2795456781359974,
    "avg_bits_err_improve": 14.366513788204834,
    "time": 57576.271728515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (cbrt (exp (* (- (* eps x) x) 3.0))) (/ (- 1.0 (/ 1.0 eps)) (exp (fma eps x x)))) 2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 29.306274922815316,
    "avg_bits_err_output": 29.388363492428812,
    "avg_bits_err_improve": -0.08208856961349653,
    "time": 37943.827392578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.018875,
    "avg_bits_err_output": 0.004375,
    "avg_bits_err_improve": 0.014499999999999999,
    "time": 12424.524658203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.023,
    "avg_bits_err_output": 0.006875,
    "avg_bits_err_improve": 0.016125,
    "time": 21887.752685546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ 4.0 (pow (/ (+ 1.0 t) t) 2.0))) (+ 2.0 (/ 4.0 (pow (/ (+ 1.0 t) t) 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.04675,
    "avg_bits_err_output": 0.00575,
    "avg_bits_err_improve": 0.041,
    "time": 42360.2412109375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3359.05859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3312.638427734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4237.075927734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8139700812676445,
    "avg_bits_err_output": 0.24525,
    "avg_bits_err_improve": 7.568720081267644,
    "time": 21464.791748046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.418636990969528,
    "avg_bits_err_output": 7.418636990969528,
    "avg_bits_err_improve": 0,
    "time": 20555.43017578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (* eps 2.0) x) (* eps eps))",
    "output_parens": 4,
    "avg_bits_err_input": 15.505556957623671,
    "avg_bits_err_output": 0.015073120312590145,
    "avg_bits_err_improve": 15.490483837311082,
    "time": 7460.78271484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5236648542646294,
    "avg_bits_err_output": 0.3855007531345556,
    "avg_bits_err_improve": 3.138164101130074,
    "time": 28138.7587890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.070886192041119,
    "avg_bits_err_output": 0.018295128514024397,
    "avg_bits_err_improve": 15.052591063527094,
    "time": 12939.107177734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.51272108009075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.51272108009075,
    "time": 5161.966796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.840564387060496,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 38.840064387060494,
    "time": 4065.32568359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.296375,
    "avg_bits_err_improve": 63.703625,
    "time": 63739.593017578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84324597984583,
    "avg_bits_err_output": 0.31707312031259016,
    "avg_bits_err_improve": 61.52617285953324,
    "time": 13338.2783203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -1e-233) (* -0.5 (/ (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (* -0.5 (* (/ 4.0 (/ 1.0 c)) (/ 1.0 (- b (hypot b (pow (pow (* c (* 4.0 a)) 2.0) 0.25)))))) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 5e+301) (* -0.5 (/ (+ b (sqrt (fma b b (* a (* c -4.0))))) a)) (* -0.5 (* (/ 4.0 (/ 1.0 c)) (/ 1.0 (- b (hypot b (* (sqrt c) (sqrt (* a -4.0))))))))))))",
    "output_parens": 90,
    "avg_bits_err_input": 33.83041998751424,
    "avg_bits_err_output": 14.759590214726273,
    "avg_bits_err_improve": 19.070829772787967,
    "time": 39343.67431640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -2e-220) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (/ 0.5 (* (+ b (hypot (sqrt (* a (* c -4.0))) b)) (/ a (fma a (* c -4.0) (- (* b b) (* b b)))))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 2e+262) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 86,
    "avg_bits_err_input": 34.1542325955339,
    "avg_bits_err_output": 21.468067667801698,
    "avg_bits_err_improve": 12.6861649277322,
    "time": 42137.615234375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1677.659912109375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.153440145217154,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 40.14206514521715,
    "time": 3731.56103515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- x y) (* (hypot x y) (/ (hypot x y) (+ x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 20.24408881976937,
    "avg_bits_err_output": 0.03609718125612983,
    "avg_bits_err_improve": 20.207991638513242,
    "time": 14648.760986328125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (fma 1.0 (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6807592107043496,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6807592107043496,
    "time": 56513.2626953125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ (+ b c) d))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03975,
    "avg_bits_err_output": 0.03975,
    "avg_bits_err_improve": 0,
    "time": 3571.43310546875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ a (+ b b))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019896240625180292,
    "avg_bits_err_output": 0.010625,
    "avg_bits_err_improve": 0.009271240625180291,
    "time": 5443.98779296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.0135,
    "avg_bits_err_output": 0.0135,
    "avg_bits_err_improve": 0,
    "time": 5978.672607421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 1545.38916015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ b (+ a c)) d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40911597813022865,
    "avg_bits_err_output": 0.22675,
    "avg_bits_err_improve": 0.18236597813022865,
    "time": 13832.13427734375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.737439948755863,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 29.730689948755863,
    "time": 9363.1005859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (/ (- (* x x) eps) (sqrt (- (* x x) eps)))))",
    "output_parens": 8,
    "avg_bits_err_input": 24.378553841773787,
    "avg_bits_err_output": 0.04408496250072115,
    "avg_bits_err_improve": 24.334468879273064,
    "time": 13769.488525390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(+ (fma (* (pow (/ x (tan x)) 3.0) (fma (cos x) (+ (/ x (tan x)) (cos x)) (pow (/ x (tan x)) 2.0))) (pow (fma (cos x) (+ (/ x (tan x)) (cos x)) (pow (/ x (tan x)) 2.0)) -2.0) (* (pow (fma (cos x) (+ (/ x (tan x)) (cos x)) (pow (/ x (tan x)) 2.0)) -2.0) (* (fma (cos x) (+ (/ x (tan x)) (cos x)) (pow (/ x (tan x)) 2.0)) (- (pow (cos x) 3.0))))) (fma (- (pow (fma (cos x) (+ (/ x (tan x)) (cos x)) (pow (/ x (tan x)) 2.0)) -2.0)) (* (fma (cos x) (+ (/ x (tan x)) (cos x)) (pow (/ x (tan x)) 2.0)) (pow (cos x) 3.0)) (* (pow (fma (cos x) (+ (/ x (tan x)) (cos x)) (pow (/ x (tan x)) 2.0)) -2.0) (* (fma (cos x) (+ (/ x (tan x)) (cos x)) (pow (/ x (tan x)) 2.0)) (pow (cos x) 3.0)))))",
    "output_parens": 96,
    "avg_bits_err_input": 30.13032666123096,
    "avg_bits_err_output": 30.129308165238143,
    "avg_bits_err_improve": 0.0010184959928167814,
    "time": 45553.921142578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006573120312590145,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.006073120312590144,
    "time": 3472.262451171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 1e-5) (* 100.0 (* (/ n i) (+ (pow (+ 1.0 (/ i n)) n) -1.0))) (* n (/ (+ (* 100.0 (pow (exp n) (log1p (/ i n)))) -100.0) i))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.562523908102385,
    "avg_bits_err_output": 10.474813000035235,
    "avg_bits_err_improve": 37.08771090806715,
    "time": 30959.361083984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= b -5.7e+150) (fma (/ (/ b (hypot c d)) (hypot c d)) d (* a (* c (pow (hypot d c) -2.0)))) (if (<= b -1.15e-156) (/ (/ (+ (* b d) (* c a)) (hypot c d)) (hypot c d)) (if (<= b 1.5e-109) (fma (* b (pow (hypot d c) -2.0)) d (* (/ c (hypot c d)) (/ a (hypot c d)))) (if (<= b 1.3e+131) (/ (/ (fma b d (* c a)) (hypot c d)) (hypot c d)) (fma (/ (/ b (hypot c d)) (hypot c d)) d (* a (* c (pow (hypot d c) -2.0))))))))",
    "output_parens": 48,
    "avg_bits_err_input": 26.13673888214304,
    "avg_bits_err_output": 11.315084865450993,
    "avg_bits_err_improve": 14.821654016692046,
    "time": 24733.0703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 25.721552241386195,
    "avg_bits_err_output": 0.5160939688476208,
    "avg_bits_err_improve": 25.205458272538575,
    "time": 27446.55859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.033875,
    "avg_bits_err_output": 0.02218304185641585,
    "avg_bits_err_improve": 0.011691958143584154,
    "time": 5674.48388671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) 2.0) (/ (/ (pow (pow (fma ux maxCos (- 1.0 ux)) 4.0) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (* (pow (pow (cbrt (- (fma ux maxCos 1.0) ux)) 2.0) 6.0) (pow (cbrt (- (fma ux maxCos 1.0) ux)) 6.0)) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 68,
    "avg_bits_err_input": 13.52321638343316,
    "avg_bits_err_output": 11.959736953441505,
    "avg_bits_err_improve": 1.5634794299916557,
    "time": 89353.11059570312,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (+ (* (pow (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) -2.0) (- 1.0 (* (pow (fma ux maxCos (- 1.0 ux)) 3.0) (pow (pow (fma ux maxCos (- 1.0 ux)) 3.0) 3.0)))) (fma (- (* (pow (- (fma ux maxCos 1.0) ux) 4.0) (cbrt (pow (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) -2.0)))) (cbrt (* (pow (- (fma ux maxCos 1.0) ux) 24.0) (pow (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) -4.0))) (* (pow (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) -2.0) (pow (- (fma ux maxCos 1.0) ux) 12.0)))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 91,
    "avg_bits_err_input": 13.563306556753554,
    "avg_bits_err_output": 11.957809804616716,
    "avg_bits_err_improve": 1.6054967521368386,
    "time": 94516.13061523438,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (sqrt (fma ux (* (* (- 1.0 ux) (* ux (* maxCos maxCos))) (+ ux -1.0)) 1.0)) (fma (cos (* 2.0 (* uy PI))) xi (* (sin (* 2.0 (* uy PI))) yi)) (* (* ux maxCos) (* (- 1.0 ux) zi)))",
    "output_parens": 21,
    "avg_bits_err_input": 0.3314456029260001,
    "avg_bits_err_output": 0.32605686487005825,
    "avg_bits_err_improve": 0.005388738055941866,
    "time": 57201.665771484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.19989265691970173,
    "avg_bits_err_output": 0.200413897544882,
    "avg_bits_err_improve": -0.0005212406251802748,
    "time": 28830.543212890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5388518745975742,
    "avg_bits_err_output": 0.5022444574240263,
    "avg_bits_err_improve": 0.036607417173547874,
    "time": 25322.233642578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3193740149427155,
    "avg_bits_err_output": 0.3142038776667894,
    "avg_bits_err_improve": 0.005170137275926079,
    "time": 30704.355712890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (log (/ (+ 1.0 (/ 1.0 (+ (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ (- PI) s))))))) (+ (pow (+ (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ (- PI) s))))) -2.0) -1.0))))",
    "output_parens": 29,
    "avg_bits_err_input": 0.33106943524805477,
    "avg_bits_err_output": 0.3257435192599282,
    "avg_bits_err_improve": 0.0053259159881265394,
    "time": 30291.984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0566284130638754,
    "avg_bits_err_output": 0.04561798219844883,
    "avg_bits_err_improve": 0.011010430865426572,
    "time": 22506.274169921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (fma s (exp (/ (fabs x) s)) (fma s 2.0 (/ s (exp (/ (fabs x) s))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.16613285452224863,
    "avg_bits_err_output": 0.15043286639158662,
    "avg_bits_err_improve": 0.015699988130662007,
    "time": 26972.016845703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* tau (* x PI))) (* tau (* x PI))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6683661899137501,
    "avg_bits_err_output": 0.6683661899137501,
    "avg_bits_err_improve": 0,
    "time": 40287.107666015625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.1596515861568558,
    "avg_bits_err_output": 0.15646355769904188,
    "avg_bits_err_improve": 0.0031880284578139073,
    "time": 35566.8212890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (* eta (/ (fma sinTheta_O (* sinTheta_O (/ (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))) eta)) (* eta (- (sqrt (* (- 1.0 (* sinTheta_O sinTheta_O)) (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))) (* (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))) (- (sqrt (* (- 1.0 (* sinTheta_O sinTheta_O)) (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 2.5288712353957905,
    "avg_bits_err_output": 2.115750988012462,
    "avg_bits_err_improve": 0.41312024738332864,
    "time": 38732.88671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_i (* v (sinh (/ 1.0 v)))) (* (/ 0.5 v) (/ cosTheta_O (exp (/ (* sinTheta_O sinTheta_i) v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.46140259357247504,
    "avg_bits_err_output": 0.39439948283996096,
    "avg_bits_err_improve": 0.06700311073251408,
    "time": 46019.774169921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (* (/ 0.5 v) (exp 0.6931)) (exp (+ (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (/ -1.0 v))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.13207255135387566,
    "avg_bits_err_output": 0.15436112705556462,
    "avg_bits_err_improve": -0.022288575701688962,
    "time": 27517.1337890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (* 2.0 (log (cbrt (pow alpha (* PI 3.0))))) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.4592061850091888,
    "avg_bits_err_output": 0.3566066173310332,
    "avg_bits_err_improve": 0.10259956767815559,
    "time": 43676.931884765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3308150195375212,
    "avg_bits_err_output": 0.5516275659289442,
    "avg_bits_err_improve": 0.779187453608577,
    "time": 31536.38232421875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.472208825576596,
    "avg_bits_err_output": 0.196125,
    "avg_bits_err_improve": 12.276083825576595,
    "time": 24102.750244140625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ 0.125 (* s PI)) (+ (/ (exp (/ (- r) s)) r) (/ (pow E (* -0.3333333333333333 (/ r s))) r)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.13923235097205922,
    "avg_bits_err_output": 0.15163796747003475,
    "avg_bits_err_improve": -0.01240561649797553,
    "time": 63511.50537109375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* u normAngle)) (sin normAngle)) n1_i (* (/ (sin (* normAngle (- 1.0 u))) (sin normAngle)) n0_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8455285600998349,
    "avg_bits_err_output": 0.6786053257046899,
    "avg_bits_err_improve": 0.166923234395145,
    "time": 41908.6201171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* PI (/ cosTheta (sqrt PI)))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.7076747669225678,
    "avg_bits_err_output": 0.3998155935951964,
    "avg_bits_err_improve": 0.3078591733273714,
    "time": 30923.374755859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.505166915409903,
    "avg_bits_err_output": 0.5307398962198179,
    "avg_bits_err_improve": 12.974427019190086,
    "time": 23109.181396484375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.554990548217358,
    "avg_bits_err_output": 0.3091342493518576,
    "avg_bits_err_improve": 13.245856298865501,
    "time": 28371.86669921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* (- alpha) (log1p (- u0))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.06827126295669,
    "avg_bits_err_output": 0.33598364687698323,
    "avg_bits_err_improve": 13.732287616079708,
    "time": 23016.25341796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (* (log1p (- u0)) (- alphay)) (/ (+ (* (/ sin2phi alphay) (* alphax alphax)) (* alphay cos2phi)) (* alphax alphax)))",
    "output_parens": 12,
    "avg_bits_err_input": 12.607422848736979,
    "avg_bits_err_output": 0.4817229441155134,
    "avg_bits_err_improve": 12.125699904621465,
    "time": 25403.228515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(+ (* PI l) (/ (/ -1.0 (/ F (tan (* PI l)))) F))",
    "output_parens": 7,
    "avg_bits_err_input": 16.648886789168525,
    "avg_bits_err_output": 12.524574925894049,
    "avg_bits_err_improve": 4.124311863274476,
    "time": 29454.260498046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(/ (- 1.0 (* x (cos B))) (sin B))",
    "output_parens": 5,
    "avg_bits_err_input": 0.20313176194006882,
    "avg_bits_err_output": 0.17947424843993381,
    "avg_bits_err_improve": 0.023657513500135008,
    "time": 21747.03369140625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.674082945768122,
    "avg_bits_err_output": 10.565023771594824,
    "avg_bits_err_improve": 3.1090591741732982,
    "time": 39129.95654296875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (log (tanh (pow (pow (* f (* PI 0.25)) 0.16666666666666666) 6.0)))) (* PI -0.25))",
    "output_parens": 9,
    "avg_bits_err_input": 61.512769494777324,
    "avg_bits_err_output": 0.4860987808093369,
    "avg_bits_err_improve": 61.02667071396799,
    "time": 58191.4921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* t (sqrt 2.0)) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 42.729269903665504,
    "avg_bits_err_output": 19.99540799870133,
    "avg_bits_err_improve": 22.733861904964172,
    "time": 45874.031005859375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.613972633566915,
    "avg_bits_err_output": 0.21296973750504788,
    "avg_bits_err_improve": 3.401002896061867,
    "time": 29158.146728515625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 1.0567992787880738,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 1.0500492787880737,
    "time": 13282.215087890625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (* (/ Om Omc) (* Om (/ Om Omc))) (* Omc (/ Omc Om))))) (* (hypot 1.0 (* (/ t l) (sqrt 2.0))) (hypot 1.0 (/ Om Omc)))))",
    "output_parens": 18,
    "avg_bits_err_input": 10.166034271136256,
    "avg_bits_err_output": 0.9710843591405034,
    "avg_bits_err_improve": 9.194949911995753,
    "time": 24642.68359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -4e+26) (sqrt (* U (* (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t) (* n 2.0)))) (if (<= U -2.55e-269) (sqrt (+ (* (+ (* l -2.0) (* (- U* U) (* l (/ n Om)))) (* 2.0 (* n (/ (* U l) Om)))) (* t (* 2.0 (* U n))))) (if (<= U 2.9e-294) (sqrt (* U (+ (* (* (/ l Om) (fma l -2.0 (* (/ l Om) (* n (- U* U))))) (* n 2.0)) (* t (* n 2.0))))) (if (<= U 5.5e-263) (* (sqrt (* n (fma (/ l Om) (fma l -2.0 (* (/ l Om) (* n (- U* U)))) t))) (sqrt (* U 2.0))) (if (<= U 2.2e-228) (sqrt (+ (* (* 2.0 (* U n)) (* (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)))) (* 2.0 (* n (* U t))))) (if (<= U 6.4e-114) (* (sqrt (* n (fma (/ l Om) (fma l -2.0 (* (/ l Om) (* n (- U* U)))) t))) (sqrt (* U 2.0))) (if (<= U 2.8e+26) (sqrt (+ (* t (* 2.0 (* U n))) (* (+ (* l -2.0) (* (* (/ l Om) n) (- U* U))) (* 2.0 (/ n (/ (/ Om U) l)))))) (* (sqrt (* (* n 2.0) (fma (/ l Om) (+ (* l -2.0) (* n (* (/ l Om) (- U* U)))) t))) (sqrt U)))))))))",
    "output_parens": 123,
    "avg_bits_err_input": 34.62495036196397,
    "avg_bits_err_output": 27.121107405400576,
    "avg_bits_err_improve": 7.503842956563393,
    "time": 44294.551513671875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -4.1e+73) (not (<= t 1.8e-5))) (/ (* (/ (* (/ l k) (/ 2.0 (sin k))) t) (/ l (tan k))) k) (/ (* (/ l (sin k)) (/ (/ 2.0 k) t)) (/ (* k (tan k)) l)))",
    "output_parens": 23,
    "avg_bits_err_input": 47.150159029512665,
    "avg_bits_err_output": 2.102767821591616,
    "avg_bits_err_improve": 45.04739120792105,
    "time": 128692.08544921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= k -7.4e-121) (not (<= k 6.7e-159))) (* (/ 2.0 (* (fma (* t (* (* (sin k) (/ t l)) (/ k t))) (/ k t) (* t (* (sin k) (* 2.0 (/ t l))))) (tan k))) (/ l t)) (/ 2.0 (* (* (/ t l) (* t (sin k))) (/ (* (tan k) (+ 2.0 (pow (/ k t) 2.0))) (/ l t)))))",
    "output_parens": 36,
    "avg_bits_err_input": 32.954967263930065,
    "avg_bits_err_output": 8.204232160942686,
    "avg_bits_err_improve": 24.750735102987377,
    "time": 91657.21826171875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (sqrt 2.0) (* (* (cos th) (+ (* a1 a1) (* a2 a2))) 0.5))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5652188000230793,
    "avg_bits_err_output": 0.5363646640809812,
    "avg_bits_err_improve": 0.02885413594209818,
    "time": 26198.376708984375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(if (<= n 1.2e-65) (sqrt (* (pow (* PI (* 2.0 n)) (- 1.0 k)) (/ 1.0 k))) (/ (sqrt (* k (pow (* 2.0 (* PI n)) (- 1.0 k)))) k))",
    "output_parens": 16,
    "avg_bits_err_input": 0.506403650579543,
    "avg_bits_err_output": 0.7398851173107555,
    "avg_bits_err_improve": -0.2334814667312125,
    "time": 25910.36474609375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (sinh l) (* 2.0 J)) (cos (/ K 2.0))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.422381916765367,
    "avg_bits_err_output": 0.1434693609377704,
    "avg_bits_err_improve": 17.278912555827596,
    "time": 18926.8017578125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* (+ m n) K) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 0.8) (* (cos (- (/ K (/ (pow (cbrt (/ (- m n) (/ (+ m n) 2.0))) 3.0) (- m n))) M)) (exp (- (fabs (- m n)) (+ l (pow (- (/ (+ m n) 2.0) M) 2.0))))) (* (cos (- (pow (* (+ m n) (/ (* K 0.5) (pow (cbrt (* (+ m n) (* K 0.5))) 2.0))) 3.0) M)) (exp (+ (- (fabs (- m n)) l) (* (- (* (+ m n) 0.5) M) (+ M (* (+ m n) -0.5)))))))",
    "output_parens": 63,
    "avg_bits_err_input": 15.138600875798987,
    "avg_bits_err_output": 1.7969294230791053,
    "avg_bits_err_improve": 13.341671452719883,
    "time": 33065.5947265625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (cos (/ K 2.0)) (* -2.0 (hypot 1.0 (* 0.5 (/ (/ U J) (cos (* K 0.5))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.39296936093777,
    "avg_bits_err_output": 8.452075564063671,
    "avg_bits_err_improve": 9.940893796874098,
    "time": 34935.89697265625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))) 5e+136) (* (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))) w0) (* w0 (sqrt (- 1.0 (* (/ M (* l (* d (/ 4.0 D)))) (* M (/ h (/ d D))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 14.148568107581532,
    "avg_bits_err_output": 8.157937298982013,
    "avg_bits_err_improve": 5.990630808599519,
    "time": 65138.53955078125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e+288) (* c0 (/ (sqrt (/ A (- l))) (sqrt (- V)))) (if (<= (* V l) -1e-317) (* c0 (/ (sqrt (- A)) (sqrt (* V (- l))))) (if (<= (* V l) 1e-283) (* c0 (/ (sqrt (/ A V)) (sqrt l))) (if (<= (* V l) 2e+280) (* (/ c0 (sqrt (* V l))) (sqrt A)) (/ c0 (sqrt (* l (/ V A))))))))",
    "output_parens": 40,
    "avg_bits_err_input": 19.35037798114036,
    "avg_bits_err_output": 7.296224901674827,
    "avg_bits_err_improve": 12.054153079465532,
    "time": 29042.9150390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= d -8e-82) (* c0 (/ (/ (* (* M M) 0.5) (- (* (pow (/ (/ (* h D) c0) (/ d w)) -1.0) (pow (/ D d) -1.0)) (sqrt (- (pow (* (/ d (/ (* h D) c0)) (/ (/ d w) D)) 2.0) (* M M))))) w)) (if (<= d -3.7e-114) (* (/ c0 (* w 2.0)) (fma (/ c0 w) (* d (/ (/ d (* h D)) D)) (sqrt (- (pow (* (/ w (* d c0)) (/ D (/ d (* h D)))) -2.0) (* M M))))) (if (<= d -1.45e-186) (* c0 (log (pow (exp (/ 0.5 w)) (/ M (/ (- (/ (/ d (/ w d)) (* (/ h c0) (* D D))) (sqrt (- (pow (/ (/ d (/ w d)) (* (/ h c0) (* D D))) 2.0) (* M M)))) M))))) (if (<= d 2.5e-215) (* (/ c0 (* w 2.0)) (fma (/ (/ c0 w) h) (pow (/ d D) 2.0) (sqrt (- (pow (* (/ (/ c0 w) h) (pow (/ d D) 2.0)) 2.0) (* M M))))) (if (<= d 1.66e-76) (* c0 (/ (/ (* (* M M) 0.5) (- (* (pow (/ (/ (* h D) c0) (/ d w)) -1.0) (pow (/ D d) -1.0)) (sqrt (- (pow (* (/ d (/ (* h D) c0)) (/ (/ d w) D)) 2.0) (* M M))))) w)) (if (<= d 1.55e+161) (* (/ c0 (* w 2.0)) (/ (* M M) (- (* c0 (/ (pow (/ d D) 2.0) (* h w))) (sqrt (- (pow (* c0 (/ (pow (/ d D) 2.0) (* h w))) 2.0) (* M M)))))) (* c0 (log (pow (exp (/ 0.5 w)) (/ M (/ (- (/ (/ d (/ w d)) (* (/ h c0) (* D D))) (* (pow (fma d (* (/ d w) (/ (/ c0 (* h D)) D)) M) 0.5) (pow (fma d (* (/ d w) (* (/ c0 h) (pow D -2.0))) (- M)) 0.5))) M)))))))))))",
    "output_parens": 170,
    "avg_bits_err_input": 60.05213465042429,
    "avg_bits_err_output": 36.778530982188975,
    "avg_bits_err_improve": 23.273603668235317,
    "time": 84547.33813476562,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= l -5.2e+201) (* (sqrt (/ d h)) (* (/ (sqrt (- d)) (sqrt (- l))) (+ 1.0 (* (fma (/ (* M D) (* d 2.0)) (/ h (* l (* (/ d M) (/ 2.0 D)))) 0.0) -0.5)))) (if (<= l -4.2e+19) (* (/ (sqrt (- d)) (sqrt (- h))) (* (sqrt (/ d l)) (+ 1.0 (* (fma (/ (* M D) (* d 2.0)) (* (/ (* M D) (* d 2.0)) (/ h l)) 0.0) -0.5)))) (if (<= l -3.5e-120) (+ (/ (* (* -0.5 (pow (* M (* D (/ 0.5 d))) 2.0)) (fabs d)) (* (/ l h) (sqrt (* l h)))) (/ (fabs d) (sqrt (* l h)))) (if (<= l -2.8e-143) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (/ (* (* (* M D) (* M (/ D d))) (* h 0.5)) (* l (* 2.0 (* d 2.0)))))) (if (<= l -2e-310) (* (* (/ (sqrt (- d)) (sqrt (- l))) (pow (/ d h) 0.5)) (+ 1.0 (/ (* -0.5 (* h (pow (* (* M D) (/ 0.5 d)) 2.0))) l))) (if (<= l 2e-26) (* (sqrt (/ d h)) (* (+ 1.0 (* (fma (/ (* M D) (* d 2.0)) (/ h (* l (* (/ d M) (/ 2.0 D)))) 0.0) -0.5)) (/ (sqrt d) (sqrt l)))) (if (<= l 6.2e+105) (* (fma (/ (* M (* D 0.25)) (* d (/ l h))) (/ (* M (* D -0.5)) d) 1.0) (/ d (sqrt (* l h)))) (/ (* (- d) (fma (pow (* M (* 0.5 (/ D d))) 2.0) (* (/ h l) -0.5) 1.0)) (* (sqrt h) (- (sqrt l)))))))))))",
    "output_parens": 150,
    "avg_bits_err_input": 26.719306999155272,
    "avg_bits_err_output": 14.078822421875065,
    "avg_bits_err_improve": 12.640484577280207,
    "time": 106048.80346679688,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (fma 0.0 (* (fma (+ (pow (fma x x 1.0) -1.5) (pow (fma x x 1.0) -3.0)) (* 0.015625 (fma 0.015625 (+ (pow (fma x x 1.0) -1.5) (pow (fma x x 1.0) -3.0)) -0.015625)) 0.000244140625) (/ (* 0.001953125 (pow (fma x x 1.0) -4.5)) (fma 3.814697265625e-6 (pow (+ (pow (fma x x 1.0) -1.5) (pow (fma x x 1.0) -3.0)) 3.0) 3.814697265625e-6))) (fma (fma (+ (pow (fma x x 1.0) -1.5) (pow (fma x x 1.0) -3.0)) (* 0.015625 (fma 0.015625 (+ (pow (fma x x 1.0) -1.5) (pow (fma x x 1.0) -3.0)) -0.015625)) 0.000244140625) (/ (* (pow (fma x x 1.0) -4.5) -0.001953125) (fma 3.814697265625e-6 (pow (+ (pow (fma x x 1.0) -1.5) (pow (fma x x 1.0) -3.0)) 3.0) 3.814697265625e-6)) (/ (* (fma (+ (pow (fma x x 1.0) -1.5) (pow (fma x x 1.0) -3.0)) (* 0.015625 (fma 0.015625 (+ (pow (fma x x 1.0) -1.5) (pow (fma x x 1.0) -3.0)) -0.015625)) 0.000244140625) 0.001953125) (fma 3.814697265625e-6 (pow (+ (pow (fma x x 1.0) -1.5) (pow (fma x x 1.0) -3.0)) 3.0) 3.814697265625e-6)))) (+ 0.25 (+ (/ 0.25 (fma x x 1.0)) (/ 0.25 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 86,
    "avg_bits_err_input": 15.169975748055608,
    "avg_bits_err_output": 14.67378237783211,
    "avg_bits_err_improve": 0.49619337022349796,
    "time": 40488.055419921875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9848962406251803,
    "avg_bits_err_output": 0.010198120312590144,
    "avg_bits_err_improve": 0.9746981203125902,
    "time": 8858.929931640625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* (sqrt (fma v (* v -6.0) 2.0)) PI)) (* (- 1.0 (* v v)) t))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4319795188744793,
    "avg_bits_err_output": 0.11117932343849159,
    "avg_bits_err_improve": 0.3208001954359877,
    "time": 21462.3359375,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt 2.0) 4.0) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.0105,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": -0.0006249999999999988,
    "time": 19548.9873046875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(pow (pow (acos (/ (- (fma v (* v -5.0) 1.0)) (- 1.0 (* v v)))) 3.0) 0.3333333333333333)",
    "output_parens": 9,
    "avg_bits_err_input": 0.5230027583132026,
    "avg_bits_err_output": 0.52350689065535,
    "avg_bits_err_improve": -0.000504132342147412,
    "time": 35982.744384765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (* k (/ (- -10.0 k) a))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.0467293448454136,
    "avg_bits_err_output": 0.25501415091747726,
    "avg_bits_err_improve": 1.7917151939279363,
    "time": 25208.9033203125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.01732905741540336,
    "avg_bits_err_output": 0.01732905741540336,
    "avg_bits_err_improve": 0,
    "time": 6084.47265625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* b (* b 4.0))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18503757405699392,
    "avg_bits_err_output": 0.017032686554830534,
    "avg_bits_err_improve": 0.16800488750216339,
    "time": 15644.676025390625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1950031027577738,
    "avg_bits_err_output": 0.027379928726733352,
    "avg_bits_err_improve": 0.16762317403104043,
    "time": 30751.5966796875,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.19198460929168018,
    "avg_bits_err_output": 0.02576751905029602,
    "avg_bits_err_improve": 0.16621709024138415,
    "time": 17517.735595703125,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(pow (pow (+ 0.5 (* 0.5 (/ x (hypot x (* p 2.0))))) 1.5) 0.3333333333333333)",
    "output_parens": 7,
    "avg_bits_err_input": 13.4454905073507,
    "avg_bits_err_output": 13.444965977131455,
    "avg_bits_err_improve": 0.000524530219244923,
    "time": 21326.353759765625,
    "seed": 2,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (exp (log1p (exp x))))",
    "output_parens": 4,
    "avg_bits_err_input": 41.514317950428634,
    "avg_bits_err_output": 0.04046652092820791,
    "avg_bits_err_improve": 41.47385142950043,
    "time": 6386.9609375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -1.95e-8) (/ 1.0 (/ (- (tan x) x) (- (sin x) x))) (if (<= x 2.1e-8) (/ (- (log (exp (sin x))) x) (+ x (tan x))) (- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))))",
    "output_parens": 25,
    "avg_bits_err_input": 31.622030420974493,
    "avg_bits_err_output": 0.9990610882687685,
    "avg_bits_err_improve": 30.622969332705726,
    "time": 34802.981689453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- INFINITY)) (+ (/ (- (hypot b_2 (* (sqrt (- a)) (sqrt c))) b_2) a) (fma (/ -1.0 a) b_2 (/ b_2 a))) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) -1e-254) (/ (- (sqrt (+ (* b_2 b_2) (fma a (- c) (fma a (- c) (* a c))))) b_2) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (/ (* a (/ (- c) a)) (+ b_2 (sqrt (fma a (- c) (* b_2 b_2))))) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 1e+190) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (+ (fma (/ -1.0 a) b_2 (/ b_2 a)) (/ (- (hypot b_2 (* (sqrt (- c)) (sqrt a))) b_2) a))))))",
    "output_parens": 80,
    "avg_bits_err_input": 33.66020273230366,
    "avg_bits_err_output": 19.188225094202167,
    "avg_bits_err_improve": 14.471977638101492,
    "time": 36411.655517578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -2.7e+160) (/ (/ (* c (- a)) (- b_2 (expm1 (log1p (hypot b_2 (pow (pow (* c a) 2.0) 0.25)))))) a) (if (<= b_2 7.5e-220) (/ (/ (* c (- a)) a) (- b_2 (sqrt (- (* b_2 b_2) (* c a))))) (if (<= b_2 3.9e+148) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a) (/ (- (- b_2) (hypot (sqrt (* c a)) b_2)) a))))",
    "output_parens": 39,
    "avg_bits_err_input": 34.19653135953239,
    "avg_bits_err_output": 16.73753055394522,
    "avg_bits_err_improve": 17.459000805587173,
    "time": 26767.32421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 30.767338452662628,
    "avg_bits_err_output": 0.126312061716901,
    "avg_bits_err_improve": 30.641026390945726,
    "time": 24798.18505859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(* (+ (pow (+ x 1.0) (/ 0.5 n)) (pow x (/ 0.5 n))) (- (pow (+ x 1.0) (/ 0.5 n)) (pow x (/ 0.5 n))))",
    "output_parens": 13,
    "avg_bits_err_input": 33.01816708714132,
    "avg_bits_err_output": 33.043485304183385,
    "avg_bits_err_improve": -0.02531821704206294,
    "time": 52321.383544921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.59902153910503,
    "avg_bits_err_output": 0.017375,
    "avg_bits_err_improve": 29.58164653910503,
    "time": 18069.294921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 x) (- -1.0 x))",
    "output_parens": 3,
    "avg_bits_err_input": 14.712999100824304,
    "avg_bits_err_output": 0.07225,
    "avg_bits_err_improve": 14.640749100824303,
    "time": 15734.888671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (or (<= x -24000000.0) (not (<= x 7.8e-17))) (fma (sin x) (- (sin eps)) (* (cos x) (+ (cos eps) -1.0))) (* (* -2.0 (sin (* eps 0.5))) (sin (* 0.5 (+ x (+ x eps))))))",
    "output_parens": 21,
    "avg_bits_err_input": 39.53647609230894,
    "avg_bits_err_output": 0.9166164098894286,
    "avg_bits_err_improve": 38.61985968241951,
    "time": 33571.083740234375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ (fma 0.0 x 1.0) (+ (/ (+ x 1.0) (cbrt (+ x 1.0))) (fma (cbrt (+ x 1.0)) (cbrt x) (* x (/ 1.0 (cbrt x))))))",
    "output_parens": 14,
    "avg_bits_err_input": 29.844376805081026,
    "avg_bits_err_output": 0.22150549803990952,
    "avg_bits_err_improve": 29.622871307041116,
    "time": 20061.456787109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 29.862912215081383,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 29.862662215081382,
    "time": 11569.704345703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ 0.5 (/ a (- (hypot b (pow (* (* a c) (* (* a c) 16.0)) 0.25)) b))) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 2e+270) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (/ 0.5 (/ a (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b)))))",
    "output_parens": 46,
    "avg_bits_err_input": 33.558811642659755,
    "avg_bits_err_output": 24.746344488838947,
    "avg_bits_err_improve": 8.812467153820808,
    "time": 44647.0302734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -6.2e-6) (* -0.5 (/ (+ b (hypot (* a (/ (sqrt (* c -4.0)) (sqrt a))) b)) a)) (if (<= c 2.5e-87) (* -0.5 (/ (+ b (hypot (pow (* (* c a) (* (* c a) 16.0)) 0.25) b)) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b)) a))))",
    "output_parens": 30,
    "avg_bits_err_input": 33.80157756696032,
    "avg_bits_err_output": 24.312744575318902,
    "avg_bits_err_improve": 9.488832991641416,
    "time": 41541.226318359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.472647159634384,
    "avg_bits_err_output": 0.020386842188131013,
    "avg_bits_err_improve": 61.45226031744625,
    "time": 10450.900634765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(* (cbrt (pow (+ (log1p n) (fabs (fma n (- (log1p n) (log n)) -1.0))) 2.0)) (exp (* (log (pow (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0)) 2.0)) 0.16666666666666666)))",
    "output_parens": 20,
    "avg_bits_err_input": 63.00484071284103,
    "avg_bits_err_output": 42.627735980900994,
    "avg_bits_err_improve": 20.377104731940037,
    "time": 51761.208984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.49530586794207,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 58.488305867942074,
    "time": 17859.369384765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (- (/ (/ (pow (tan x) 2.0) (+ x (tan x))) x) (/ (/ (* x x) (+ x (tan x))) x)) (tan x))",
    "output_parens": 14,
    "avg_bits_err_input": 59.992713143387256,
    "avg_bits_err_output": 59.99019546094603,
    "avg_bits_err_improve": 0.002517682441222746,
    "time": 37676.58984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (/ (expm1 (* eps b)) (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ b a))))))",
    "output_parens": 11,
    "avg_bits_err_input": 60.24891967224722,
    "avg_bits_err_output": 29.03543969146426,
    "avg_bits_err_improve": 31.21347998078296,
    "time": 39012.54736328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.9159850089408,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 41.906860008940804,
    "time": 9105.20458984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.66431510498684,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.66381510498684,
    "time": 8336.860595703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.68898603451497,
    "avg_bits_err_output": 0.018374784063608936,
    "avg_bits_err_improve": 29.67061125045136,
    "time": 10530.060302734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (/ (fma (pow (exp x) 2.0) (+ (* (exp x) 2.0) -3.0) 1.0) (fma (exp x) 2.0 1.0)) (/ (pow (exp x) 2.0) (exp x)))",
    "output_parens": 14,
    "avg_bits_err_input": 29.529493374551613,
    "avg_bits_err_output": 29.247229785401192,
    "avg_bits_err_improve": 0.28226358915042127,
    "time": 38393.52197265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (/ (- 1.0 x) (- 1.0 (* x x))) (/ (- (* (- 1.0 x) -2.0) x) (* x (- 1.0 x))))",
    "output_parens": 11,
    "avg_bits_err_input": 9.719244606835552,
    "avg_bits_err_output": 9.723975899347064,
    "avg_bits_err_improve": -0.004731292511511498,
    "time": 40859.3740234375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (/ (+ (tan x) (tan eps)) (- 1.0 (* (tan x) (tan eps)))) (tan x))",
    "output_parens": 10,
    "avg_bits_err_input": 36.767742998630105,
    "avg_bits_err_output": 21.615451097854187,
    "avg_bits_err_improve": 15.152291900775918,
    "time": 34661.226806640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 29.875174423587065,
    "avg_bits_err_output": 0.13226428593921277,
    "avg_bits_err_improve": 29.742910137647854,
    "time": 20154.685546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(* (sin eps) (fma (sin x) (- (tan (* eps 0.5))) (cos x)))",
    "output_parens": 8,
    "avg_bits_err_input": 37.066784457637866,
    "avg_bits_err_output": 0.21672837069646045,
    "avg_bits_err_improve": 36.85005608694141,
    "time": 24000.436279296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (* (/ (+ x 1.0) (sqrt (+ x 1.0))) (sqrt x))))",
    "output_parens": 10,
    "avg_bits_err_input": 19.157797650223724,
    "avg_bits_err_output": 0.12418176718957337,
    "avg_bits_err_improve": 19.03361588303415,
    "time": 22188.20263671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 14.900590385858418,
    "avg_bits_err_output": 0.4036743522372541,
    "avg_bits_err_improve": 14.496916033621165,
    "time": 8138.68212890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.69295475452943,
    "avg_bits_err_output": 1.187781173875969,
    "avg_bits_err_improve": 28.505173580653462,
    "time": 25172.029052734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (/ (* m (- 1.0 m)) v) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07188136568158808,
    "avg_bits_err_output": 0.07188136568158808,
    "avg_bits_err_improve": 0,
    "time": 35835.438720703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (* a (- b)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.03771741889342,
    "avg_bits_err_output": 0.30754041406655636,
    "avg_bits_err_improve": 15.730177004826862,
    "time": 15010.694091796875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ PI (/ 180.0 angle)))) 2.0) (pow (* (sin (* PI (* angle 0.005555555555555556))) b) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 19.8618769896957,
    "avg_bits_err_output": 19.834728245277724,
    "avg_bits_err_improve": 0.02714874441797477,
    "time": 46042.090087890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* PI (* angle 0.011111111111111112))) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 30.801951198756488,
    "avg_bits_err_output": 20.782702126740404,
    "avg_bits_err_improve": 10.019249072016084,
    "time": 43869.143310546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (* PI 0.005555555555555556))) a) 2.0) (pow (* b (cos (* (* (cbrt (cbrt (* angle PI))) (* (cbrt (* angle PI)) (pow (cbrt (cbrt (* angle PI))) 2.0))) (* 0.005555555555555556 (cbrt (* angle PI)))))) 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 20.388018091198553,
    "avg_bits_err_output": 20.381549557950844,
    "avg_bits_err_improve": 0.0064685332477090185,
    "time": 49644.290283203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (/ (* m (- 1.0 m)) (/ v m)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17553303878037732,
    "avg_bits_err_output": 0.17557611980180077,
    "avg_bits_err_improve": -4.308102142344672e-05,
    "time": 35475.468505859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3283543319995591,
    "avg_bits_err_output": 0.3142632861921381,
    "avg_bits_err_improve": 0.014091045807420988,
    "time": 38552.30908203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.14111560156295072,
    "avg_bits_err_output": 0.14111560156295072,
    "avg_bits_err_improve": 0,
    "time": 27227.24169921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (+ (* (* (cos phi1) (cos phi2)) (* (sin lambda1) (sin lambda2))) (* (* (cos phi1) (cos phi2)) (* (cos lambda1) (cos lambda2)))))) R)",
    "output_parens": 20,
    "avg_bits_err_input": 16.785056858727277,
    "avg_bits_err_output": 3.8029393390364294,
    "avg_bits_err_improve": 12.982117519690847,
    "time": 43185.4677734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* c -2.0) (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))))",
    "output_parens": 8,
    "avg_bits_err_input": 52.5625467302506,
    "avg_bits_err_output": 0.07866748125036058,
    "avg_bits_err_improve": 52.48387924900024,
    "time": 35645.49755859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (+ (fma (pow b 6.75) (pow b 2.25) (* (pow (fma b b (* a (* c -4.0))) 13.5) (/ -1.0 (pow (fma b b (* a (* c -4.0))) 9.0)))) (fma (/ -1.0 (pow (fma b b (* a (* c -4.0))) 9.0)) (pow (fma b b (* a (* c -4.0))) 13.5) (* (/ 1.0 (pow (fma b b (* a (* c -4.0))) 9.0)) (pow (fma b b (* a (* c -4.0))) 13.5))))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (+ (pow b 6.0) (pow (fma b b (* a (* c -4.0))) 3.0)) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0)))) (/ -0.5 a))",
    "output_parens": 61,
    "avg_bits_err_input": 28.566420960658263,
    "avg_bits_err_output": 26.576668500540208,
    "avg_bits_err_improve": 1.989752460118055,
    "time": 85918.54736328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (fma (pow b 4.5) (pow b 4.5) (- (pow (fma b b (* a (* c -4.0))) 4.5)))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (+ (pow b 6.0) (* (fma b b (* a (* c -4.0))) (pow (pow (cbrt (fma b b (* a (* c -4.0)))) 2.0) 3.0))) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0)))) (/ -0.5 a))",
    "output_parens": 41,
    "avg_bits_err_input": 43.77825332635467,
    "avg_bits_err_output": 40.5621458023334,
    "avg_bits_err_improve": 3.2161075240212753,
    "time": 80120.93286132812,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ 0.5 (/ a (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 2e+270) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ 0.5 (/ a (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b)))))",
    "output_parens": 45,
    "avg_bits_err_input": 33.555181521123515,
    "avg_bits_err_output": 24.74271436730271,
    "avg_bits_err_improve": 8.812467153820805,
    "time": 42719.182373046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (+ (cos phi1) (* (cos phi2) (* (cos lambda2) (cos lambda1)))) (* (cos phi2) (* (sin lambda1) (sin lambda2))))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.8698663842409012,
    "avg_bits_err_output": 0.2201120899970769,
    "avg_bits_err_improve": 0.6497542942438244,
    "time": 34823.360107421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (/ (- (* 262144.0 (pow (* (pow (+ 1.0 (pow (exp -2.0) x)) 3.0) (+ (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0))) -6.0)) (pow (+ (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0)) -6.0)) (fma 512.0 (* (pow (+ (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0)) -3.0) (pow (+ 1.0 (pow (exp -2.0) x)) -9.0)) (pow (+ (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0)) -3.0))) (+ (pow (/ (/ 8.0 (+ (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0))) (pow (+ 1.0 (pow (exp -2.0) x)) 3.0)) 2.0) (* (fma (pow (+ 1.0 (pow (exp -2.0) x)) -3.0) 8.0 1.0) (pow (+ (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0)) -2.0))))",
    "output_parens": 94,
    "avg_bits_err_input": 29.29529444909919,
    "avg_bits_err_output": 29.28928533641834,
    "avg_bits_err_improve": 0.0060091126808465845,
    "time": 97112.50659179688,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.179648862205234,
    "avg_bits_err_output": 0.013198120312590145,
    "avg_bits_err_improve": 58.166450741892646,
    "time": 9987.987060546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.116196462917856,
    "avg_bits_err_output": 0.00825,
    "avg_bits_err_improve": 58.10794646291786,
    "time": 6973.9970703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.007375,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 0,
    "time": 3400.587158203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 32.35483755496477,
    "avg_bits_err_output": 0.09082312031259016,
    "avg_bits_err_improve": 32.264014434652175,
    "time": 5234.075927734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.48491139901325,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 58.47791139901325,
    "time": 16920.804443359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.026698120312590144,
    "avg_bits_err_output": 0.026698120312590144,
    "avg_bits_err_improve": 0,
    "time": 4047.614990234375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (/ 1.0 (hypot 1.0 (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.1285,
    "avg_bits_err_output": 0.12885620312590146,
    "avg_bits_err_improve": -0.0003562031259014553,
    "time": 40183.7939453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* eh (- (tan t))) ew)))) (* (* eh (sin t)) (sin (atan (/ (* eh (- (tan t))) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12584436093777043,
    "avg_bits_err_output": 0.12584436093777043,
    "avg_bits_err_improve": 0,
    "time": 44970.36376953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (/ (+ lambda1 lambda2) (/ (+ lambda1 lambda2) (- lambda1 lambda2))) (fma (cos (* phi1 0.5)) (cos (* 0.5 phi2)) (* (sin (* 0.5 phi2)) (- (sin (* phi1 0.5)))))) (- phi1 phi2)))",
    "output_parens": 20,
    "avg_bits_err_input": 39.12957355708429,
    "avg_bits_err_output": 0.11586943271265328,
    "avg_bits_err_improve": 39.013704124371635,
    "time": 32944.85400390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (/ (- a (* b (/ b a))) a))",
    "output_parens": 5,
    "avg_bits_err_input": 14.485065143779895,
    "avg_bits_err_output": 0.013049039677847344,
    "avg_bits_err_improve": 14.472016104102048,
    "time": 7191.50830078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (/ (- (pow (fma (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))) (- (sin phi1)) (cos delta)) 2.0)) (/ (fma (fma (cos phi1) (* (sin delta) (cos theta)) (* (cos delta) (sin phi1))) (* (sin phi1) (* (sin phi1) (fma (cos phi1) (* (sin delta) (cos theta)) (* (cos delta) (sin phi1))))) (- (pow (cos delta) 2.0))) (fma (sin phi1) (fma (cos delta) (sin phi1) (* (* (sin delta) (cos phi1)) (cos theta))) (cos delta))))))",
    "output_parens": 58,
    "avg_bits_err_input": 0.14518239233819433,
    "avg_bits_err_output": 0.16340940587406055,
    "avg_bits_err_improve": -0.018227013535866227,
    "time": 56429.362060546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma -3.0 (* c a) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 52.63803521654936,
    "avg_bits_err_output": 0.07928308281331128,
    "avg_bits_err_improve": 52.55875213373605,
    "time": 44070.0498046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma (* c -3.0) a (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 28.75543818824443,
    "avg_bits_err_output": 0.2750968046888522,
    "avg_bits_err_improve": 28.480341383555576,
    "time": 38040.92822265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* a -3.0) c) (+ b (sqrt (fma b b (* (* a -3.0) c))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 43.79604538061518,
    "avg_bits_err_output": 0.41293663500053407,
    "avg_bits_err_improve": 43.38310874561465,
    "time": 40136.46435546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) (- INFINITY)) (- (* (hypot b (/ c (/ (pow (pow (* c (* a -3.0)) 2.0) 0.25) (* a -3.0)))) (/ 0.3333333333333333 a)) (/ b (* 3.0 a))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) 1e+292) (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) (* (/ 0.3333333333333333 a) (- (hypot (* (sqrt (* c -3.0)) (sqrt a)) b) b))))",
    "output_parens": 50,
    "avg_bits_err_input": 33.60464308425093,
    "avg_bits_err_output": 25.351650666706416,
    "avg_bits_err_improve": 8.252992417544515,
    "time": 51554.118896484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (sin lambda1) (cos lambda2) (* (cos lambda1) (- (sin lambda2)))) (cos phi2)) (+ (* (cos phi1) (sin phi2)) (- (/ -1.0 (* (/ 1.0 (* (cos phi2) (sin phi1))) (/ 1.0 (* (cos lambda2) (cos lambda1))))) (* (cos phi2) (* (sin phi1) (* (sin lambda1) (sin lambda2)))))))",
    "output_parens": 32,
    "avg_bits_err_input": 13.115325253846082,
    "avg_bits_err_output": 0.19909438235038363,
    "avg_bits_err_improve": 12.9162308714957,
    "time": 49728.52685546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ 1.0 (+ x (* x (/ (- 1.0 x) (+ 1.0 x))))) (- 1.0 x))",
    "output_parens": 8,
    "avg_bits_err_input": 29.524752988330512,
    "avg_bits_err_output": 25.530932415293822,
    "avg_bits_err_improve": 3.9938205730366896,
    "time": 61812.570068359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.0105,
    "avg_bits_err_output": 0.0105,
    "avg_bits_err_improve": 0,
    "time": 10865.117431640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ -2.0 (- 1.0 x)) (- -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.755221738489459,
    "avg_bits_err_output": 0.080625,
    "avg_bits_err_improve": 14.67459673848946,
    "time": 27648.685791015625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (* F (+ A (- C (hypot B (- A C)))))) (- (sqrt (* 2.0 (fma B B (* (* A C) -4.0)))))) (+ (* (* A C) -4.0) (* B B))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (/ (/ (- (hypot B (- A C)) (+ A C)) (/ (sqrt (* (- (+ A C) (hypot B (- A C))) (* 2.0 (* F (fma B B (* A (* C -4.0))))))) (* 2.0 (* F (fma B B (* A (* C -4.0))))))) (+ (* (* A C) -4.0) (* B B))) (/ (- (sqrt (* F (* 2.0 (+ A (- C (hypot B (- A C)))))))) (hypot B (sqrt (* A (* C -4.0)))))))",
    "output_parens": 104,
    "avg_bits_err_input": 52.45772386407188,
    "avg_bits_err_output": 39.65533374552621,
    "avg_bits_err_improve": 12.802390118545674,
    "time": 54117.1162109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.894744119429234,
    "avg_bits_err_output": 14.181407074228838,
    "avg_bits_err_improve": 15.713337045200396,
    "time": 37076.387451171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (* (/ (sqrt (+ C (+ A (hypot B (- A C))))) (fma A (* C -4.0) (* B B))) (* (sqrt (fma A (* C -8.0) (* 2.0 (* B B)))) (- (sqrt F)))) (* (/ (sqrt (+ C (+ A (hypot B (- A C))))) (fma A (* C -4.0) (* B B))) (- (sqrt (+ (* F (* A (* C -8.0))) (fma (* F (* 2.0 B)) B 0.0))))))",
    "output_parens": 60,
    "avg_bits_err_input": 52.169770239385244,
    "avg_bits_err_output": 39.55358607754864,
    "avg_bits_err_improve": 12.616184161836607,
    "time": 54390.9287109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(* (cbrt (* g 0.5)) (cbrt (/ 1.0 a)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.270554961776552,
    "avg_bits_err_output": 0.8521939521588784,
    "avg_bits_err_improve": 14.418361009617675,
    "time": 22023.655517578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-246) (+ (/ (cbrt (- (hypot g h) g)) (cbrt (* a 2.0))) (cbrt (/ (+ g (hypot h g)) (/ a -0.5)))) (+ (cbrt (* (/ 0.5 a) (- g (hypot g h)))) (/ (cbrt (* (+ g (hypot g h)) -0.5)) (cbrt a))))",
    "output_parens": 26,
    "avg_bits_err_input": 35.99589430439149,
    "avg_bits_err_output": 2.963607468019995,
    "avg_bits_err_improve": 33.0322868363715,
    "time": 31585.298583984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (/ (+ (cos (* 2.0 (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333)))) 1.0) 2.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.9910808281331139,
    "avg_bits_err_output": 0.039000376567277645,
    "avg_bits_err_improve": 0.9520804515658363,
    "time": 29220.16552734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ 1.0 (+ 1.0 (exp (- b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.678375,
    "avg_bits_err_output": 0.015073120312590145,
    "avg_bits_err_improve": 0.6633018796874098,
    "time": 10535.26611328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b1) (/ a2 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) -4e-262) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 4e-320) (* a2 (/ (/ a1 b1) b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+279) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b1) (/ a2 b2))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.196144545501134,
    "avg_bits_err_output": 3.0247436040594606,
    "avg_bits_err_improve": 8.171400941441673,
    "time": 11947.881103515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.49046350769904495,
    "avg_bits_err_output": 0.461875,
    "avg_bits_err_improve": 0.028588507699044974,
    "time": 8369.750732421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -0.5) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 52.89821046338433,
    "avg_bits_err_output": 0.03775,
    "avg_bits_err_improve": 52.86046046338433,
    "time": 20168.9970703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.727833059046273,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.727833059046273,
    "time": 2384.229736328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (* (/ 1.0 (sqrt (- 1.0 (* x x)))) (- 1.0 x))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.017625,
    "avg_bits_err_improve": -0.003624999999999998,
    "time": 11420.144775390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1274.1455078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (/ 2.0 (* r r)) (- -1.5 (/ (+ -0.375 (* v 0.25)) (/ (/ (- 1.0 v) (* r w)) (* r (- w))))))",
    "output_parens": 13,
    "avg_bits_err_input": 12.55342337153112,
    "avg_bits_err_output": 0.3075422454864831,
    "avg_bits_err_improve": 12.245881126044637,
    "time": 39047.690185546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (fma (/ 4.0 (fma x1 x1 1.0)) (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 37,
    "avg_bits_err_input": 0.5125415513252507,
    "avg_bits_err_output": 0.32642741058450037,
    "avg_bits_err_improve": 0.18611414074075033,
    "time": 96177.81665039062,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (/ v (- -1.0 (/ u t1))) (+ u t1))",
    "output_parens": 5,
    "avg_bits_err_input": 18.393029181735724,
    "avg_bits_err_output": 1.3460171574698083,
    "avg_bits_err_improve": 17.047012024265914,
    "time": 9186.353271484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (pow x 3.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.21761336132445105,
    "avg_bits_err_output": 0.1936009193652572,
    "avg_bits_err_improve": 0.02401244195919386,
    "time": 22190.0576171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00275,
    "avg_bits_err_output": 0.00275,
    "avg_bits_err_improve": 0,
    "time": 11040.48486328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ PI (* a (* b 2.0))) (+ a b))",
    "output_parens": 5,
    "avg_bits_err_input": 14.087345127366637,
    "avg_bits_err_output": 0.2335522562546873,
    "avg_bits_err_improve": 13.85379287111195,
    "time": 51478.71435546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(if (or (<= eps -1.15e-16) (not (<= eps 1.02e-16))) (/ (+ (* (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x))) (* (exp (* x (- -1.0 eps))) (- 1.0 (/ 1.0 eps)))) 2.0) (/ (+ (fma (/ (+ eps 1.0) (+ eps -1.0)) (/ (+ eps -1.0) (exp (fma eps x x))) (* (cbrt (* (+ eps -1.0) (exp (- (fma (+ eps -1.0) x (fma eps x x)) (fma eps x x))))) (- (pow (cbrt (* (+ eps -1.0) (exp (- (fma (+ eps -1.0) x (fma eps x x)) (fma eps x x))))) 2.0)))) (fma (- (cbrt (* (+ eps -1.0) (exp (- (fma (+ eps -1.0) x (fma eps x x)) (fma eps x x)))))) (pow (cbrt (* (+ eps -1.0) (exp (- (fma (+ eps -1.0) x (fma eps x x)) (fma eps x x))))) 2.0) (* (cbrt (* (+ eps -1.0) (exp (- (fma (+ eps -1.0) x (fma eps x x)) (fma eps x x))))) (pow (cbrt (* (+ eps -1.0) (exp (- (fma (+ eps -1.0) x (fma eps x x)) (fma eps x x))))) 2.0)))) 2.0))",
    "output_parens": 91,
    "avg_bits_err_input": 29.018270759143785,
    "avg_bits_err_output": 0.8603562918307498,
    "avg_bits_err_improve": 28.157914467313034,
    "time": 56668.4609375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012,
    "avg_bits_err_output": 0.00525,
    "avg_bits_err_improve": 0.00675,
    "time": 18705.84521484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))) (+ 2.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.017375,
    "avg_bits_err_output": 0.0085,
    "avg_bits_err_improve": 0.008875000000000001,
    "time": 47866.029052734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.03925,
    "avg_bits_err_output": 0.03925,
    "avg_bits_err_improve": 0,
    "time": 24115.353515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3209.094482421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 4030.6298828125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4402.341552734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.824873496755416,
    "avg_bits_err_output": 0.25625,
    "avg_bits_err_improve": 7.568623496755416,
    "time": 19317.645263671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.275850852148199,
    "avg_bits_err_output": 7.275850852148199,
    "avg_bits_err_improve": 0,
    "time": 23338.562255859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(fma eps eps (* (* eps 2.0) x))",
    "output_parens": 3,
    "avg_bits_err_input": 15.95633635648257,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 15.948711356482569,
    "time": 16106.204345703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5403741726438858,
    "avg_bits_err_output": 0.3982458656323922,
    "avg_bits_err_improve": 3.1421283070114936,
    "time": 25051.986572265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.454857748212941,
    "avg_bits_err_output": 0.020141729690294492,
    "avg_bits_err_improve": 14.434716018522646,
    "time": 6469.311279296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.876912008031375,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.876912008031375,
    "time": 4237.251220703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.914283630750894,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 38.913408630750894,
    "time": 3968.907470703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.294,
    "avg_bits_err_improve": 63.706,
    "time": 66461.9873046875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* t (* t 1.6e-63))))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84325851722857,
    "avg_bits_err_output": 0.32959436093777045,
    "avg_bits_err_improve": 61.5136641562908,
    "time": 15218.77294921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -6.2e-6) (* -0.5 (/ (+ b (hypot (* a (/ (sqrt (* c -4.0)) (sqrt a))) b)) a)) (if (<= c 2.5e-87) (* -0.5 (/ (+ b (hypot (pow (* (* c a) (* (* c a) 16.0)) 0.25) b)) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b)) a))))",
    "output_parens": 30,
    "avg_bits_err_input": 33.80157756696032,
    "avg_bits_err_output": 24.312744575318902,
    "avg_bits_err_improve": 9.488832991641416,
    "time": 44355.5537109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ 0.5 (/ a (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 2e+270) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ 0.5 (/ a (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b)))))",
    "output_parens": 45,
    "avg_bits_err_input": 33.555181521123515,
    "avg_bits_err_output": 24.74271436730271,
    "avg_bits_err_improve": 8.812467153820805,
    "time": 43150.623779296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1800.0439453125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.656383154794554,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 39.64725815479456,
    "time": 2622.606201171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- x y) (/ (hypot x y) (/ (+ x y) (hypot x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 19.89337487829978,
    "avg_bits_err_output": 0.030184414453237152,
    "avg_bits_err_improve": 19.863190463846543,
    "time": 13866.90087890625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ c (+ d a)) b) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.656178838185139,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.656178838185139,
    "time": 32939.51025390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.041,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.040375,
    "time": 11694.868408203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ b a)) (* a (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01929248125036058,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 0.00791748125036058,
    "time": 5203.736328125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (fma x x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.018125,
    "avg_bits_err_improve": -0.0032499999999999994,
    "time": 3578.257568359375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00125,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 0,
    "time": 1162.5859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ e (+ c (+ b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39664661719245803,
    "avg_bits_err_output": 0.23825,
    "avg_bits_err_improve": 0.15839661719245804,
    "time": 11103.076171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.434841256513014,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 30.428341256513015,
    "time": 9321.551025390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.636226017078148,
    "avg_bits_err_output": 0.29494812031259016,
    "avg_bits_err_improve": 24.341277896765558,
    "time": 12973.97021484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(- (/ 1.0 (/ (tan x) x)) (cos x))",
    "output_parens": 5,
    "avg_bits_err_input": 30.51449603473977,
    "avg_bits_err_output": 30.52367465187415,
    "avg_bits_err_improve": -0.009178617134377731,
    "time": 44917.358642578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005875,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.00475,
    "time": 3025.23779296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 1e+14) (/ (+ (* n (* (pow (+ 1.0 (/ i n)) n) 100.0)) (* n -100.0)) i) (* 100.0 (/ (+ (pow (exp n) (log1p (/ i n))) -1.0) (/ i n)))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.42998750322962,
    "avg_bits_err_output": 10.506561142538798,
    "avg_bits_err_improve": 36.92342636069082,
    "time": 29140.362060546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 2e+223) (/ (/ (+ (* a c) (* b d)) (hypot c d)) (hypot c d)) (+ (fma (* d (/ 1.0 (hypot d c))) (/ b (hypot d c)) 0.0) (* a (* c (pow (hypot d c) -2.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 25.68809225727731,
    "avg_bits_err_output": 9.428423809708345,
    "avg_bits_err_improve": 16.259668447568966,
    "time": 22718.993896484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(* (+ (/ b (/ (hypot c d) c)) (* (/ a (hypot c d)) (/ -1.0 (/ 1.0 d)))) (/ 1.0 (hypot c d)))",
    "output_parens": 12,
    "avg_bits_err_input": 25.93468028107988,
    "avg_bits_err_output": 0.9924976221264308,
    "avg_bits_err_improve": 24.94218265895345,
    "time": 23943.409912109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03275,
    "avg_bits_err_output": 0.02126598181989603,
    "avg_bits_err_improve": 0.011484018180103972,
    "time": 28796.903076171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (+ (fma (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (* (/ (/ (pow (fma ux maxCos (- 1.0 ux)) 12.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (- (pow (fma ux maxCos (- 1.0 ux)) 8.0) (pow (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 2.0))) (- (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (fma (/ (pow (- (fma ux maxCos 1.0) ux) 12.0) (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 2.0) (pow (- (fma ux maxCos 1.0) ux) 4.0)))) (* (/ 1.0 (- (pow (- (fma ux maxCos 1.0) ux) 8.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) 2.0))) (- (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) -1.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) (* (+ (pow (- (fma ux maxCos 1.0) ux) 16.0) (fma (pow (- (fma ux maxCos 1.0) ux) 8.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) 2.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) 4.0))) (/ (* (/ (pow (- (fma ux maxCos 1.0) ux) 12.0) (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 2.0) (pow (- (fma ux maxCos 1.0) ux) 4.0)))) (+ (pow (- (fma ux maxCos 1.0) ux) 2.0) (- 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)))) (- (pow (- (fma ux maxCos 1.0) ux) 24.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) 6.0))))) (fma (- (- (pow (- (fma ux maxCos 1.0) ux) 16.0)) (fma (pow (- (fma ux maxCos 1.0) ux) 8.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) 2.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) 4.0))) (/ (* (/ (pow (- (fma ux maxCos 1.0) ux) 12.0) (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 2.0) (pow (- (fma ux maxCos 1.0) ux) 4.0)))) (- (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) -1.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) (- (pow (- (fma ux maxCos 1.0) ux) 24.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) 6.0))) (* (+ (pow (- (fma ux maxCos 1.0) ux) 16.0) (fma (pow (- (fma ux maxCos 1.0) ux) 8.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) 2.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) 4.0))) (/ (* (/ (pow (- (fma ux maxCos 1.0) ux) 12.0) (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 2.0) (pow (- (fma ux maxCos 1.0) ux) 4.0)))) (- (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) -1.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) (- (pow (- (fma ux maxCos 1.0) ux) 24.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) 6.0))))))) (+ (/ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)))) (/ (pow (- (fma ux maxCos 1.0) ux) 6.0) (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))))))))",
    "output_parens": 263,
    "avg_bits_err_input": 13.47745675145116,
    "avg_bits_err_output": 11.96719737155317,
    "avg_bits_err_improve": 1.51025937989799,
    "time": 114257.70581054688,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* uy (* 2.0 PI))) (exp (* (log (pow (+ (* ux (fma ux maxCos (- 1.0 ux))) (- 1.0 (* (fma ux maxCos (- 1.0 ux)) (+ 1.0 (* ux maxCos))))) 3.0)) 0.16666666666666666)))",
    "output_parens": 18,
    "avg_bits_err_input": 13.509575650849145,
    "avg_bits_err_output": 11.252592863756346,
    "avg_bits_err_improve": 2.2569827870927988,
    "time": 69212.32543945312,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) yi))) (* (* (- 1.0 ux) maxCos) (* ux zi)))",
    "output_parens": 33,
    "avg_bits_err_input": 0.3379176676902881,
    "avg_bits_err_output": 0.3270892937101121,
    "avg_bits_err_improve": 0.010828373980175998,
    "time": 74440.208984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.20632376014563122,
    "avg_bits_err_output": 0.20664688045822135,
    "avg_bits_err_improve": -0.0003231203125901305,
    "time": 22691.59765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* 39.47841760436263 (* u2 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5389125018159427,
    "avg_bits_err_output": 0.504276378125659,
    "avg_bits_err_improve": 0.03463612369028379,
    "time": 26127.68798828125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.32966220470572555,
    "avg_bits_err_output": 0.32084422589547745,
    "avg_bits_err_improve": 0.008817978810248095,
    "time": 27196.033447265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (/ (- 1.0 (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0)) (+ -1.0 (/ -1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 0.3328383993812466,
    "avg_bits_err_output": 0.3302841775654829,
    "avg_bits_err_improve": 0.002554221815763702,
    "time": 34337.0244140625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0629791461110475,
    "avg_bits_err_output": 0.044465333529752085,
    "avg_bits_err_improve": 0.01851381258129542,
    "time": 19855.552734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (* 2.0 (+ s (* s (cosh (/ (fabs x) s))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.1524771533391353,
    "avg_bits_err_output": 0.13517678512754766,
    "avg_bits_err_improve": 0.017300368211587647,
    "time": 26982.142822265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6763791529307713,
    "avg_bits_err_output": 0.6690207173900792,
    "avg_bits_err_improve": 0.007358435540692154,
    "time": 32320.712158203125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (* (+ (pow (+ 1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))) 2.0) -1.0) (/ 1.0 (+ (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 2.0))) 1.0)",
    "output_parens": 17,
    "avg_bits_err_input": 0.16121027039678423,
    "avg_bits_err_output": 0.18443842792120033,
    "avg_bits_err_improve": -0.023228157524416093,
    "time": 29644.09423828125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.601394269178739,
    "avg_bits_err_output": 0.3708752047657274,
    "avg_bits_err_improve": 2.2305190644130115,
    "time": 34979.359130859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ (* (/ 0.5 (* v (exp (/ sinTheta_O (/ v sinTheta_i))))) cosTheta_O) (- (/ (sinh (/ 1.0 v)) (/ -1.0 v)))) cosTheta_i)",
    "output_parens": 13,
    "avg_bits_err_input": 0.46020301216139614,
    "avg_bits_err_output": 0.35268967085039676,
    "avg_bits_err_improve": 0.10751334131099938,
    "time": 49975.9638671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* 0.5 (* (exp 0.6931) (exp (fma -1.0 (log v) (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.11850146213482501,
    "avg_bits_err_output": 0.08502098202922087,
    "avg_bits_err_improve": 0.03348048010560414,
    "time": 38119.55859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (fma alpha alpha -1.0) (+ (* (* PI (log alpha)) (* (fma alpha alpha -1.0) (* cosTheta (* cosTheta 2.0)))) (* PI (* (log alpha) 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.47145509358540966,
    "avg_bits_err_output": 0.46960385657104153,
    "avg_bits_err_improve": 0.0018512370143681234,
    "time": 55618.70654296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3250281364382597,
    "avg_bits_err_output": 0.5462404798074235,
    "avg_bits_err_improve": 0.7787876566308362,
    "time": 38570.204345703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.524832499128747,
    "avg_bits_err_output": 0.200375,
    "avg_bits_err_improve": 12.324457499128748,
    "time": 17932.12353515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (* (/ (/ 0.125 PI) s) (/ (exp (/ (- r) s)) r)) (* (* 0.16666666666666666 (pow (* (* PI s) 1.3333333333333333) -1.0)) (/ (pow (exp -1.0) (* r (/ 0.3333333333333333 s))) r)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.13214706366884663,
    "avg_bits_err_output": 0.15624125483815612,
    "avg_bits_err_improve": -0.024094191169309498,
    "time": 61250.89697265625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9054577894286165,
    "avg_bits_err_output": 0.735388079867553,
    "avg_bits_err_improve": 0.1700697095610636,
    "time": 38615.747802734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* PI (/ cosTheta (sqrt PI)))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6895539068954744,
    "avg_bits_err_output": 0.4029487161408422,
    "avg_bits_err_improve": 0.28660519075463214,
    "time": 28894.75,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.516249132322612,
    "avg_bits_err_output": 0.5282192337323585,
    "avg_bits_err_improve": 12.988029898590254,
    "time": 26974.801513671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p u1) (log1p (* u1 (- u1))))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.568327845070785,
    "avg_bits_err_output": 0.331967184471201,
    "avg_bits_err_improve": 13.236360660599583,
    "time": 24753.84912109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* (- alpha) (log1p (- u0))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.133087496674943,
    "avg_bits_err_output": 0.328910526564393,
    "avg_bits_err_improve": 13.80417697011055,
    "time": 21898.0927734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (log1p (- u0)) (/ (* alphay (- alphax)) (fma alphay (/ cos2phi alphax) (/ sin2phi (/ alphay alphax)))))",
    "output_parens": 10,
    "avg_bits_err_input": 12.67058122986409,
    "avg_bits_err_output": 0.4732602329361255,
    "avg_bits_err_improve": 12.197320996927965,
    "time": 27012.813232421875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) 50000000.0) (+ (* PI l) (/ (/ -1.0 F) (* (/ 1.0 F) (* F (/ F (tan (* PI l))))))) (if (<= (* PI l) 5e+102) (+ (* PI l) (/ (/ -1.0 F) (exp (sqrt (pow (log (/ F (tan (* PI l)))) 2.0))))) (- (* PI l) (/ (tan (pow (sqrt (* PI l)) 2.0)) (* F F)))))",
    "output_parens": 35,
    "avg_bits_err_input": 16.816575316829883,
    "avg_bits_err_output": 13.013145031600631,
    "avg_bits_err_improve": 3.8034302852292523,
    "time": 32618.045166015625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21608496250072115,
    "avg_bits_err_output": 0.154125,
    "avg_bits_err_improve": 0.06195996250072114,
    "time": 21597.117431640625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ (/ F (sqrt (fma x 2.0 (fma F F 2.0)))) (sin B)) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.629165918357492,
    "avg_bits_err_output": 10.351979716385046,
    "avg_bits_err_improve": 3.2771862019724463,
    "time": 39529.6826171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (log (tanh (* PI (* f 0.25))))) (* PI -0.25))",
    "output_parens": 7,
    "avg_bits_err_input": 61.49983771544291,
    "avg_bits_err_output": 0.7205270535892603,
    "avg_bits_err_improve": 60.77931066185365,
    "time": 51920.60302734375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -1.4e+152) (/ (sqrt 2.0) (/ (fabs (/ (sqrt (/ (fma (+ x 1.0) (pow (* l (hypot l (* t (sqrt 2.0)))) 2.0) (* (pow l 4.0) (- 1.0 x))) (+ x -1.0))) l)) t)) (if (or (<= t -9.4e-157) (not (<= t 4.8e-155))) (/ (* t (sqrt 2.0)) (sqrt (- (* (/ (- -1.0 x) (+ x -1.0)) (* (* t t) -2.0)) (* l (+ l (* l (/ (- -1.0 x) (+ x -1.0)))))))) (* (sqrt 2.0) (/ t (hypot l (/ (hypot l (sqrt (* 2.0 (* t t)))) (sqrt (/ (+ x -1.0) (+ x 1.0)))))))))",
    "output_parens": 55,
    "avg_bits_err_input": 42.95922449358038,
    "avg_bits_err_output": 32.506959159721646,
    "avg_bits_err_improve": 10.452265333858733,
    "time": 57142.145263671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(/ (sin th) (/ (hypot (sin ky) (sin kx)) (sin ky)))",
    "output_parens": 7,
    "avg_bits_err_input": 4.050222550256112,
    "avg_bits_err_output": 0.22806654219389993,
    "avg_bits_err_improve": 3.8221560080622123,
    "time": 25385.160400390625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9870666069875106,
    "avg_bits_err_output": 0.005125,
    "avg_bits_err_improve": 0.9819416069875105,
    "time": 12812.57763671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ (* t 2.0) (* l (sqrt 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.191200829976648,
    "avg_bits_err_output": 1.1374330296309956,
    "avg_bits_err_improve": 9.053767800345652,
    "time": 33268.18896484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -1.65e+142) (* (sqrt (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t)) (sqrt (* 2.0 (* U n)))) (if (<= U -1.52e-114) (sqrt (+ (* (fma l -2.0 (* (- U* U) (* (/ l Om) n))) (* (/ l Om) (* 2.0 (* U n)))) (* 2.0 (* U (* n t))))) (if (<= U -1.1e-232) (sqrt (+ (* (fma l -2.0 (* (- U* U) (* (/ l Om) n))) (/ (* (* l n) (* U 2.0)) Om)) (* t (* 2.0 (* U n))))) (if (<= U 1.9e-196) (sqrt (* n (+ (* 2.0 (* U t)) (* l (/ (* (* U 2.0) (fma l -2.0 (* (/ l Om) (* n (- U* U))))) Om))))) (sqrt (+ (* t (* 2.0 (* U n))) (* (fma l -2.0 (* (- U* U) (* (/ l Om) n))) (/ n (/ (/ Om l) (* U 2.0))))))))))",
    "output_parens": 79,
    "avg_bits_err_input": 34.24242992177961,
    "avg_bits_err_output": 28.156878066627495,
    "avg_bits_err_improve": 6.085551855152115,
    "time": 57298.3759765625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ (/ l k) (tan k)) (* (* (* k (/ (sin k) l)) 0.5) t))",
    "output_parens": 9,
    "avg_bits_err_input": 47.54258284319369,
    "avg_bits_err_output": 0.32776119269390347,
    "avg_bits_err_improve": 47.214821650499786,
    "time": 96285.83154296875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= (* l l) 0.0) (/ 2.0 (* t (/ (* (tan k) (* (+ 2.0 (pow (/ k t) 2.0)) (* t (/ (sin k) l)))) (/ l t)))) (if (<= (* l l) 1e+137) (/ (* (/ (/ l t) (sin k)) (* l 2.0)) (* t (* (+ 2.0 (pow (/ k t) 2.0)) (* t (tan k))))) (/ (* (/ 2.0 (* t (tan k))) (/ (/ l (* t (sin k))) (+ 2.0 (pow (/ k t) 2.0)))) (/ t l))))",
    "output_parens": 45,
    "avg_bits_err_input": 32.46389821472174,
    "avg_bits_err_output": 11.877855787169427,
    "avg_bits_err_improve": 20.58604242755231,
    "time": 85950.4853515625,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (+ (* a2 a2) (* a1 a1)) (sqrt 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5391338375223579,
    "avg_bits_err_output": 0.49081973907953863,
    "avg_bits_err_improve": 0.04831409844281925,
    "time": 22568.42138671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (sqrt (* 2.0 (* PI n))) (* (sqrt k) (pow (* 2.0 (* PI n)) (* k 0.5))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4908464607940856,
    "avg_bits_err_output": 0.42000037656727784,
    "avg_bits_err_improve": 0.07084608422680777,
    "time": 26280.64892578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (sinh l) (* 2.0 J)) (cos (/ K 2.0))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.094553649194772,
    "avg_bits_err_output": 0.12411560156295073,
    "avg_bits_err_improve": 16.97043804763182,
    "time": 23971.87255859375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(log (pow (exp (cos (- (* (+ m n) (* K 0.5)) M))) (exp (- (- (fabs (- m n)) l) (pow (- (* (+ m n) 0.5) M) 2.0)))))",
    "output_parens": 17,
    "avg_bits_err_input": 15.597584544532033,
    "avg_bits_err_output": 1.4445150677187595,
    "avg_bits_err_improve": 14.153069476813274,
    "time": 38305.4208984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (cos (/ K 2.0)) (* -2.0 (hypot 1.0 (* 0.5 (/ (/ U J) (cos (* K 0.5))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.834719360937772,
    "avg_bits_err_output": 8.065981203125899,
    "avg_bits_err_improve": 9.768738157811873,
    "time": 38369.790771484375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (or (<= (/ h l) (- INFINITY)) (not (<= (/ h l) 2e+127))) (* w0 (sqrt (- 1.0 (* (/ h (/ d (* M D))) (/ M (* l (* d (/ 4.0 D)))))))) (* w0 (sqrt (- 1.0 (* (/ h l) (* (* D (/ M d)) (* D (* 0.25 (/ M d)))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 14.150926840649017,
    "avg_bits_err_output": 10.232137080269721,
    "avg_bits_err_improve": 3.918789760379296,
    "time": 47398.110595703125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (/ (/ c0 (sqrt (/ V A))) (sqrt l)) (if (<= (* V l) -5e-312) (/ (* (sqrt (- A)) c0) (sqrt (* V (- l)))) (if (<= (* V l) 5e-303) (/ c0 (/ (sqrt l) (sqrt (/ A V)))) (* c0 (/ (sqrt A) (sqrt (* V l)))))))",
    "output_parens": 32,
    "avg_bits_err_input": 18.987251701785507,
    "avg_bits_err_output": 7.5052788558416115,
    "avg_bits_err_improve": 11.481972845943895,
    "time": 35639.6435546875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 0.0) (* (/ c0 (* 2.0 w)) (+ (* (/ d h) (/ (* d (/ c0 w)) (* D D))) (sqrt (- (pow (* (/ d h) (/ (* d (/ c0 w)) (* D D))) 2.0) (* M M))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (+ (* (/ (* c0 d) (* D D)) (/ d (* w h))) (* (sqrt (fma (/ d D) (* (/ d D) (/ c0 (* w h))) M)) (sqrt (- (* (/ d (/ D c0)) (/ (/ d (* w h)) D)) M))))) (log (pow (exp (/ (* c0 M) (* 2.0 w))) (/ M (- (* (* d (/ d (* h (* w D)))) (/ c0 D)) (sqrt (- (pow (* (* d (/ d (* h (* w D)))) (/ c0 D)) 2.0) (* M M)))))))))",
    "output_parens": 126,
    "avg_bits_err_input": 59.61431169794126,
    "avg_bits_err_output": 32.68441497630312,
    "avg_bits_err_improve": 26.929896721638144,
    "time": 75527.24267578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= h -1.45e-72) (* (* (sqrt (/ d h)) (* (sqrt (- d)) (sqrt (/ 1.0 (- l))))) (+ 1.0 (/ (* h -0.5) (/ (* l 4.0) (pow (* M (/ D d)) 2.0))))) (if (<= h -1e-310) (* (* (/ (sqrt (- d)) (sqrt (- h))) (sqrt (/ d l))) (+ 1.0 (* (/ (* M D) d) (* (/ (* M D) d) (* (/ h l) -0.125))))) (if (<= h 2.5e+104) (/ (* d (+ (/ (* 0.125 (/ h l)) (pow (/ d (* M D)) 2.0)) -1.0)) (* (sqrt l) (- (sqrt h)))) (* (+ 1.0 (/ (* h -0.5) (/ (* l 4.0) (pow (* M (/ D d)) 2.0)))) (* (sqrt (/ d h)) (/ (sqrt d) (sqrt l)))))))",
    "output_parens": 70,
    "avg_bits_err_input": 26.885601663223525,
    "avg_bits_err_output": 14.118512106633398,
    "avg_bits_err_improve": 12.767089556590127,
    "time": 126693.2958984375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(* (- (/ 0.25 (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (/ (/ 0.25 (fma x x 1.0)) (+ 0.5 (/ 0.5 (hypot 1.0 x))))) (/ 1.0 (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 15.011050498090572,
    "avg_bits_err_output": 14.505760691256652,
    "avg_bits_err_improve": 0.50528980683392,
    "time": 44470.77001953125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9837712406251803,
    "avg_bits_err_output": 0.011073120312590145,
    "avg_bits_err_improve": 0.9726981203125902,
    "time": 6384.78662109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (- 1.0 (* v v)))) (* t (sqrt (fma (* v v) -6.0 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.42716751275219256,
    "avg_bits_err_output": 0.2822361853699382,
    "avg_bits_err_improve": 0.14493132738225434,
    "time": 20228.69287109375,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt 2.0) (/ (sqrt (fma (* v v) -3.0 1.0)) (/ -4.0 (fma v v -1.0))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.011667481250360576,
    "avg_bits_err_output": 0.013219360937770435,
    "avg_bits_err_improve": -0.001551879687409859,
    "time": 18051.919921875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(expm1 (log1p (acos (- (/ (fma v (* v -5.0) 1.0) (- 1.0 (* v v)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5145300913881009,
    "avg_bits_err_output": 0.5150059588797417,
    "avg_bits_err_improve": -0.0004758674916407468,
    "time": 27896.285888671875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(if (<= k 2e+51) (/ (* (pow k m) a) (+ (* k (+ k 10.0)) 1.0)) (/ (- (pow k m)) (* (/ k a) (+ (- (/ -1.0 k) k) -10.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 2.1490949785499773,
    "avg_bits_err_output": 0.18800859605750492,
    "avg_bits_err_improve": 1.9610863824924725,
    "time": 22959.059326171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.014188321399553346,
    "avg_bits_err_output": 0.014188321399553346,
    "avg_bits_err_improve": 0,
    "time": 7936.6201171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18094172101615547,
    "avg_bits_err_output": 0.017387397577663975,
    "avg_bits_err_improve": 0.1635543234384915,
    "time": 23317.858642578125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18970316694580563,
    "avg_bits_err_output": 0.029205437642191957,
    "avg_bits_err_improve": 0.16049772930361367,
    "time": 24784.4951171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18203309357999456,
    "avg_bits_err_output": 0.02414156740228228,
    "avg_bits_err_improve": 0.1578915261777123,
    "time": 27529.62451171875,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (+ 0.5 (/ (* x 0.5) (hypot x (* p 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 12.932476742341763,
    "avg_bits_err_output": 12.929305170154834,
    "avg_bits_err_improve": 0.0031715721869289837,
    "time": 20902.60205078125,
    "seed": 3,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(hypot 1.0 (sqrt (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.15322183461517,
    "avg_bits_err_output": 0.0295,
    "avg_bits_err_improve": 41.12372183461517,
    "time": 8668.47119140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -2.45e-8) (/ (- (sin x) x) (* (tan x) (- 1.0 (/ x (tan x))))) (if (<= x 2.35e-8) (/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (/ (- x (pow (cbrt (/ x (/ (tan x) x))) 3.0)) (/ x (tan x)))) (/ (- x (sin x)) (- x (tan x)))))",
    "output_parens": 34,
    "avg_bits_err_input": 31.533065694187442,
    "avg_bits_err_output": 26.48261163284602,
    "avg_bits_err_improve": 5.050454061341423,
    "time": 37882.974365234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- INFINITY)) (/ (- c) (+ b_2 (hypot b_2 (pow (pow (* a c) 2.0) 0.25)))) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) -1e-195) (fma (- b_2) (/ 1.0 a) (/ (sqrt (- (* b_2 b_2) (* a c))) a)) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (/ (- c) (+ b_2 (sqrt (fma c a (* b_2 b_2))))) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 4e+296) (- (/ (sqrt (- (* b_2 b_2) (* a c))) a) (/ b_2 a)) (/ (- c) (+ b_2 (hypot b_2 (pow (pow (* a c) 2.0) 0.25))))))))",
    "output_parens": 68,
    "avg_bits_err_input": 34.389283387442845,
    "avg_bits_err_output": 16.974103611022173,
    "avg_bits_err_improve": 17.415179776420672,
    "time": 28019.34130859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) (/ (* a (/ (- c) (- b_2 (hypot b_2 (* (pow (* c (* a c)) 0.25) (pow a 0.25)))))) a) (if (or (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) -4e-162) (and (not (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 0.0)) (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 2e+292))) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (* a (/ (- c) (- b_2 (hypot b_2 (pow (pow (* a c) 2.0) 0.25))))) a)))",
    "output_parens": 65,
    "avg_bits_err_input": 34.129451249660974,
    "avg_bits_err_output": 20.618722700726067,
    "avg_bits_err_improve": 13.510728548934907,
    "time": 26915.30322265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 31.134044478686224,
    "avg_bits_err_output": 0.12565636750645817,
    "avg_bits_err_improve": 31.008388111179766,
    "time": 22168.071044921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(fma (pow (+ x 1.0) (/ 0.75 n)) (sqrt (pow (+ x 1.0) (/ 0.5 n))) (- (pow x (/ 1.0 n))))",
    "output_parens": 11,
    "avg_bits_err_input": 32.23633584885353,
    "avg_bits_err_output": 32.28351951354997,
    "avg_bits_err_improve": -0.04718366469644053,
    "time": 43622.077392578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.669629428432366,
    "avg_bits_err_output": 0.015125,
    "avg_bits_err_improve": 29.654504428432364,
    "time": 20179.121337890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (pow (+ x 1.0) -2.0) (/ (fma x -1.0 -1.0) x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.698462470854961,
    "avg_bits_err_output": 0.01927124062518029,
    "avg_bits_err_improve": 14.679191230229781,
    "time": 15753.673095703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (* (tan (/ eps 2.0)) (* (sin eps) (- (cos x)))) (* (sin eps) (sin x)))",
    "output_parens": 11,
    "avg_bits_err_input": 39.75990502859051,
    "avg_bits_err_output": 0.3225863098509618,
    "avg_bits_err_improve": 39.43731871873955,
    "time": 34962.100341796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ (+ 1.0 (- x x)) (fma (cbrt x) (+ (cbrt (+ 1.0 x)) (* (/ x (cbrt x)) (/ 1.0 (cbrt x)))) (/ (+ 1.0 x) (cbrt (+ 1.0 x)))))",
    "output_parens": 17,
    "avg_bits_err_input": 29.6509733651925,
    "avg_bits_err_output": 0.22027182070503987,
    "avg_bits_err_improve": 29.43070154448746,
    "time": 28210.21630859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.378223525986172,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 30.37797352598617,
    "time": 11653.098876953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -420.0) (/ (- b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) (* a -2.0)) (if (<= c 2.3e-6) (/ (- b (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25))) (* a -2.0)) (/ (- b (hypot b (* (sqrt (* -4.0 a)) (sqrt c)))) (* a -2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 34.51695654767653,
    "avg_bits_err_output": 24.541309376789737,
    "avg_bits_err_improve": 9.975647170886791,
    "time": 47721.28857421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (/ (/ (+ b (hypot b (* (pow (pow a 0.25) 2.0) (pow (pow (* c -4.0) 0.25) 2.0)))) a) -2.0) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -4e-221) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (/ (* (* 4.0 (* a c)) (/ -1.0 (- b (hypot b (sqrt (* a (* c -4.0))))))) (* a 2.0)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 2e+258) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (/ (/ (+ b (hypot b (* (sqrt (* a -4.0)) (sqrt c)))) a) -2.0)))))",
    "output_parens": 92,
    "avg_bits_err_input": 34.04895770910524,
    "avg_bits_err_output": 20.860040524255826,
    "avg_bits_err_improve": 13.188917184849412,
    "time": 38186.07666015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.285247213091395,
    "avg_bits_err_output": 0.023783082813311304,
    "avg_bits_err_improve": 61.261464130278085,
    "time": 10974.71337890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(exp (* (log (sqrt (+ (log1p n) (fabs (fma n (log (/ (+ n 1.0) n)) -1.0))))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 63.00828121079103,
    "avg_bits_err_output": 44.2106428725814,
    "avg_bits_err_improve": 18.79763833820963,
    "time": 50573.392822265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.7186003831563,
    "avg_bits_err_output": 0.00575,
    "avg_bits_err_improve": 58.7128503831563,
    "time": 15953.6064453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(* 3.0 (+ (/ 0.3333333333333333 x) (/ -0.3333333333333333 (tan x))))",
    "output_parens": 5,
    "avg_bits_err_input": 60.00642841108273,
    "avg_bits_err_output": 60.00149425393209,
    "avg_bits_err_improve": 0.004934157150643159,
    "time": 32378.33154296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (/ eps (/ (expm1 (* eps b)) (expm1 (* eps (+ b a))))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.17191290402927,
    "avg_bits_err_output": 29.56535139600629,
    "avg_bits_err_improve": 30.60656150802298,
    "time": 35065.011962890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.5112415262548,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": 41.5001165262548,
    "time": 6607.170654296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.77728461579644,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.77678461579644,
    "time": 3644.6484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.252303740510047,
    "avg_bits_err_output": 0.016165233569958675,
    "avg_bits_err_improve": 29.23613850694009,
    "time": 28335.424560546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (pow (exp x) -2.0) (- (fma 2.0 (sinh x) -2.0)) (* (fma 2.0 (sinh x) -2.0) (pow (- (exp x) 2.0) 2.0))) (pow (fma 2.0 (sinh x) -2.0) 2.0))",
    "output_parens": 16,
    "avg_bits_err_input": 29.845495044499835,
    "avg_bits_err_output": 29.414226401495075,
    "avg_bits_err_improve": 0.43126864300475987,
    "time": 37725.468994140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma (/ (+ x (+ -1.0 (+ x 1.0))) (+ x -1.0)) x (+ -2.0 (* x -2.0))) (+ x (* x x)))",
    "output_parens": 11,
    "avg_bits_err_input": 10.041605755021347,
    "avg_bits_err_output": 10.03452220219461,
    "avg_bits_err_improve": 0.007083552826737005,
    "time": 50363.056396484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(/ (fma (tan x) (tan eps) (+ (+ 1.0 (/ (tan eps) (tan x))) -1.0)) (- (/ 1.0 (tan x)) (tan eps)))",
    "output_parens": 13,
    "avg_bits_err_input": 36.556955566873185,
    "avg_bits_err_output": 19.372577335197878,
    "avg_bits_err_improve": 17.184378231675307,
    "time": 42033.88134765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))",
    "output_parens": 5,
    "avg_bits_err_input": 29.69974681681252,
    "avg_bits_err_output": 0.16473364687698316,
    "avg_bits_err_improve": 29.53501316993554,
    "time": 19179.550537109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (/ (pow (sin eps) 2.0) (- -1.0 (cos eps))) (* (sin eps) (cos x)))",
    "output_parens": 10,
    "avg_bits_err_input": 36.88128012781721,
    "avg_bits_err_output": 0.35225008754348436,
    "avg_bits_err_improve": 36.52903004027373,
    "time": 26596.22265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (hypot x (sqrt x)) (+ x 1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 19.94802338498216,
    "avg_bits_err_output": 0.10890808281331131,
    "avg_bits_err_improve": 19.83911530216885,
    "time": 21758.495361328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (+ 1.0 (* N (+ 1.0 N))))",
    "output_parens": 4,
    "avg_bits_err_input": 15.245350639810278,
    "avg_bits_err_output": 0.38350638900755013,
    "avg_bits_err_improve": 14.861844250802728,
    "time": 10917.233154296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.844951854568617,
    "avg_bits_err_output": 1.2177357040041645,
    "avg_bits_err_improve": 28.62721615056445,
    "time": 30769.5146484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (+ (/ (- m (* m m)) v) -1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07497180468885216,
    "avg_bits_err_output": 0.0761458443666995,
    "avg_bits_err_improve": -0.0011740396778473355,
    "time": 22626.167724609375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (/ (- a) (/ 1.0 b)))",
    "output_parens": 5,
    "avg_bits_err_input": 16.058677217463785,
    "avg_bits_err_output": 0.2709342109406549,
    "avg_bits_err_improve": 15.78774300652313,
    "time": 19515.884033203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ (* PI angle) 180.0))) 2.0) (pow (* b (sin (* PI (* angle 0.005555555555555556)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.33803249018788,
    "avg_bits_err_output": 20.32986686350902,
    "avg_bits_err_improve": 0.008165626678859894,
    "time": 46666.350341796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (+ b a) (* (- b a) (* (sin (* (* PI angle) 0.011111111111111112)) 0.5))))",
    "output_parens": 9,
    "avg_bits_err_input": 31.145442296575986,
    "avg_bits_err_output": 21.178956584463005,
    "avg_bits_err_improve": 9.96648571211298,
    "time": 47385.328369140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (* PI 0.005555555555555556) angle))) 2.0) (pow (* b (cos (* 0.005555555555555556 (* PI angle)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.316869005994228,
    "avg_bits_err_output": 20.270779227520148,
    "avg_bits_err_improve": 0.046089778474080134,
    "time": 49435.632080078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ m (/ v (- 1.0 m)))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.18225020351258203,
    "avg_bits_err_output": 0.1794080828133113,
    "avg_bits_err_improve": 0.002842120699270728,
    "time": 25703.140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3316504019803842,
    "avg_bits_err_output": 0.31762994799929856,
    "avg_bits_err_improve": 0.014020453981085645,
    "time": 34602.530029296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (/ e (+ 1.0 (* e (cos v)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13414624062518027,
    "avg_bits_err_output": 0.13429248125036058,
    "avg_bits_err_improve": -0.0001462406251803161,
    "time": 22085.6572265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (log (exp (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (fma (sin lambda2) (sin lambda1) (* (cos lambda1) (cos lambda2)))))))) R)",
    "output_parens": 17,
    "avg_bits_err_input": 16.799114515947352,
    "avg_bits_err_output": 3.73689736650512,
    "avg_bits_err_improve": 13.062217149442231,
    "time": 45629.930419921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* 0.5 (/ c (/ a (* a 4.0)))) (- (- b) (sqrt (+ (* c (* a -4.0)) (* b b)))))",
    "output_parens": 12,
    "avg_bits_err_input": 52.903880467862585,
    "avg_bits_err_output": 0.07945772226222149,
    "avg_bits_err_improve": 52.824422745600366,
    "time": 36616.859130859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* -2.0 (/ c (+ b (sqrt (fma b b (* (* c -4.0) a))))))",
    "output_parens": 7,
    "avg_bits_err_input": 28.549210173889637,
    "avg_bits_err_output": 0.2787218046888521,
    "avg_bits_err_improve": 28.270488369200784,
    "time": 40050.200927734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ 1.0 (/ a (* b (fma b (- b (sqrt (fma c (* a -4.0) (* b b)))) (* c (* a -4.0)))))) (/ 1.0 (* b (/ 2.0 (pow (fma c (* a -4.0) (* b b)) -0.5)))))",
    "output_parens": 19,
    "avg_bits_err_input": 43.800863444631155,
    "avg_bits_err_output": 38.72277169572916,
    "avg_bits_err_improve": 5.078091748901997,
    "time": 47355.024169921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -420.0) (/ (- b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) (* a -2.0)) (if (<= c 2.3e-6) (/ (- b (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25))) (* a -2.0)) (/ (- b (hypot b (* (sqrt (* -4.0 a)) (sqrt c)))) (* a -2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 34.52001636568025,
    "avg_bits_err_output": 24.541309376789737,
    "avg_bits_err_improve": 9.978706988890512,
    "time": 42757.611572265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8023021374663263,
    "avg_bits_err_output": 0.24352587830209202,
    "avg_bits_err_improve": 0.5587762591642342,
    "time": 38648.723876953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (+ (fma (/ 1.0 (pow (+ 1.0 (pow (exp -2.0) x)) 2.0)) (+ 4.0 (/ 8.0 (+ 1.0 (pow (exp -2.0) x)))) -1.0) (/ -2.0 (+ 1.0 (pow (exp -2.0) x)))) (pow (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))) 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 29.07521441751625,
    "avg_bits_err_output": 29.070850625641146,
    "avg_bits_err_improve": 0.0043637918751038285,
    "time": 32665.83837890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.215840184959255,
    "avg_bits_err_output": 0.012948120312590145,
    "avg_bits_err_improve": 58.20289206464666,
    "time": 7805.98193359375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.18402014172814,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 58.17652014172814,
    "time": 9957.67578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.010635515405487158,
    "avg_bits_err_output": 0.010041154467716725,
    "avg_bits_err_improve": 0.0005943609377704329,
    "time": 5863.467529296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.90577124062518,
    "avg_bits_err_output": 0.07525,
    "avg_bits_err_improve": 31.83052124062518,
    "time": 7321.71240234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.7038449870256,
    "avg_bits_err_output": 0.00575,
    "avg_bits_err_improve": 58.6980949870256,
    "time": 22319.520751953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.012,
    "avg_bits_err_improve": -0.0001250000000000001,
    "time": 6668.633056640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12425,
    "avg_bits_err_output": 0.123125,
    "avg_bits_err_improve": 0.001125000000000001,
    "time": 37567.708740234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (pow (+ 1.0 (pow (* (/ eh ew) (tan t)) 2.0)) -0.5)) (* (* eh (sin t)) (sin (atan (/ (* eh (- (tan t))) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1296674812503606,
    "avg_bits_err_output": 0.1320409558664909,
    "avg_bits_err_improve": -0.0023734746161303,
    "time": 39642.494384765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (+ (* (- lambda1 lambda2) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1)))) (* (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))) (- lambda2 lambda1))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 39.39515394909506,
    "avg_bits_err_output": 0.1262146914370089,
    "avg_bits_err_improve": 39.268939257658054,
    "time": 50952.6748046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 13.995094089426662,
    "avg_bits_err_output": 0.001363361324451065,
    "avg_bits_err_improve": 13.99373072810221,
    "time": 6978.68896484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (+ (* (cos delta) (+ (/ (cos (* phi1 2.0)) 2.0) -0.5)) (- (cos delta) (* (* (sin delta) (* (cos phi1) (cos theta))) (sin phi1))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.15595999319001144,
    "avg_bits_err_output": 0.1969659412939279,
    "avg_bits_err_improve": -0.041005948103916445,
    "time": 51692.56640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* b (+ (* -3.0 (* a c)) (* b (- b (sqrt (fma b b (* -3.0 (* a c)))))))) (* b (sqrt (fma b b (* -3.0 (* a c)))))) (* a 3.0))",
    "output_parens": 18,
    "avg_bits_err_input": 52.908560327204256,
    "avg_bits_err_output": 45.44063507975867,
    "avg_bits_err_improve": 7.467925247445585,
    "time": 43988.671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ c (- (- b) (sqrt (+ (* b b) (* a (* c -3.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 28.717548485991898,
    "avg_bits_err_output": 0.2829624062518028,
    "avg_bits_err_improve": 28.434586079740097,
    "time": 36110.56787109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(* (fma (* -3.0 a) c 0.0) (/ (/ 1.0 (+ b (sqrt (fma -3.0 (* a c) (* b b))))) (* a 3.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 43.82823094140982,
    "avg_bits_err_output": 0.4711832734586852,
    "avg_bits_err_improve": 43.357047667951136,
    "time": 58895.216064453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= c -1.4e-298) (/ (/ -0.3333333333333333 a) (/ 1.0 (- b (hypot b (* (sqrt (* c -3.0)) (sqrt (fabs a))))))) (if (<= c 6e+88) (/ (/ -1.0 (* a 3.0)) (/ 1.0 (- b (hypot b (sqrt (fabs (* a (* c -3.0)))))))) (- (/ b (* a -3.0)) (/ (hypot (* (sqrt (* a -3.0)) (sqrt c)) b) (* a -3.0)))))",
    "output_parens": 34,
    "avg_bits_err_input": 34.55748047305467,
    "avg_bits_err_output": 19.294931816825475,
    "avg_bits_err_improve": 15.262548656229193,
    "time": 46312.09716796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (- (* (* (sin lambda1) (cos lambda2)) (cos phi2)) (* (cos phi2) (* (cos lambda1) (sin lambda2)))) (- (* (cos phi1) (sin phi2)) (* (sin phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 27,
    "avg_bits_err_input": 12.819481171290647,
    "avg_bits_err_output": 0.1733868170172075,
    "avg_bits_err_improve": 12.646094354273439,
    "time": 49950.377197265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ -1.0 (+ x (+ (- -1.0 x) (+ -1.0 (/ -1.0 x))))) (* (/ (+ x 1.0) x) (+ -1.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.702365385298744,
    "avg_bits_err_output": 25.626383097277046,
    "avg_bits_err_improve": 4.075982288021699,
    "time": 60058.244140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ (+ x -1.0) (/ 1.0 (/ x (+ x 1.0)))) (+ x (/ -1.0 x)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.010125,
    "avg_bits_err_output": 0.015544925001442316,
    "avg_bits_err_improve": -0.005419925001442316,
    "time": 8988.4951171875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 1.0 (/ (+ x -1.0) 2.0)) (- -1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.72004917919412,
    "avg_bits_err_output": 0.07325,
    "avg_bits_err_improve": 14.64679917919412,
    "time": 26655.488525390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) -1e+175) (/ (sqrt (* F (- A (- (hypot B (- A C)) C)))) (* (pow (fma 2.0 (* B B) (* C (* A -8.0))) -0.5) (- (* (* 4.0 A) C) (* B B)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (* (sqrt (* (fma -4.0 (* A C) (* B B)) (* 2.0 (* F (+ C (- A (hypot B (- A C)))))))) (/ 1.0 (- (fma -4.0 (* A C) (* B B))))) (/ 1.0 (/ (hypot (sqrt (* C (* A -4.0))) B) (- (sqrt (* (- A (- (hypot B (- A C)) C)) (* 2.0 F))))))))",
    "output_parens": 94,
    "avg_bits_err_input": 52.124822280773145,
    "avg_bits_err_output": 40.36312947963196,
    "avg_bits_err_improve": 11.761692801141187,
    "time": 53438.573974609375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 30.321259719347697,
    "avg_bits_err_output": 14.122988308397872,
    "avg_bits_err_improve": 16.198271410949825,
    "time": 28159.753662109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (/ (* (sqrt (+ A (+ C (hypot B (- A C))))) (- (pow (* (cbrt (* 2.0 (fma C (* A -4.0) (* B B)))) (cbrt F)) 1.5))) (+ (* B B) (* -4.0 (* A C)))) (* (sqrt (* 2.0 (+ C (+ A (hypot B (- A C)))))) (/ (- (sqrt F)) (hypot B (sqrt (* C (* A -4.0)))))))",
    "output_parens": 57,
    "avg_bits_err_input": 52.34563997338811,
    "avg_bits_err_output": 34.20311418974005,
    "avg_bits_err_improve": 18.14252578364806,
    "time": 53650.715087890625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt g) (cbrt (* a 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 15.356114480563749,
    "avg_bits_err_output": 0.8444263805934304,
    "avg_bits_err_improve": 14.511688099970318,
    "time": 21520.08544921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (* (cbrt (/ 0.5 a)) (cbrt (- (hypot g h) g))) (/ (cbrt (* (+ g (hypot g h)) -0.5)) (* a (/ 1.0 (/ a (cbrt a))))))",
    "output_parens": 16,
    "avg_bits_err_input": 35.675476118018906,
    "avg_bits_err_output": 2.864311311038313,
    "avg_bits_err_improve": 32.81116480698059,
    "time": 39334.056884765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9892528203183604,
    "avg_bits_err_output": 0.03052857187842551,
    "avg_bits_err_improve": 0.9587242484399349,
    "time": 38140.306884765625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ 1.0 (+ 1.0 (exp (- b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.6456981203125902,
    "avg_bits_err_output": 0.014917481250360578,
    "avg_bits_err_improve": 0.6307806390622296,
    "time": 14783.694091796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (* a1 a2) -1e+198) (/ a1 (* (/ b2 a2) b1)) (if (<= (* a1 a2) -2e-196) (/ (* a1 a2) (* b2 b1)) (if (<= (* a1 a2) 1e-150) (/ (/ a1 b1) (/ b2 a2)) (if (<= (* a1 a2) 5e+226) (/ (* a1 a2) (* b2 b1)) (/ a1 (* b2 (/ b1 a2)))))))",
    "output_parens": 27,
    "avg_bits_err_input": 11.785799122496455,
    "avg_bits_err_output": 5.051312675937885,
    "avg_bits_err_improve": 6.73448644655857,
    "time": 14581.124267578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4428257887595321,
    "avg_bits_err_output": 0.396125,
    "avg_bits_err_improve": 0.0467007887595321,
    "time": 10981.64306640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -8.5e-7) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (+ (hypot 1.0 x) -1.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 53.11726904540219,
    "avg_bits_err_output": 0.3453375372879576,
    "avg_bits_err_improve": 52.77193150811423,
    "time": 23641.128173828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.7380536978855154,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.7380536978855154,
    "time": 2491.439453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (/ (- 1.0 x) (+ 1.0 x)) (sqrt (/ (- 1.0 x) (+ 1.0 x))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.00825,
    "avg_bits_err_improve": 0.00625,
    "time": 6297.021728515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1220.142822265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (/ 2.0 (* r r)) (- -1.5 (* (* r w) (* r (* w (/ (fma v -0.25 0.375) (- 1.0 v)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.970045637983286,
    "avg_bits_err_output": 0.2647385343791465,
    "avg_bits_err_improve": 12.70530710360414,
    "time": 33431.311279296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.5116868640749087,
    "avg_bits_err_output": 0.3200560216986924,
    "avg_bits_err_improve": 0.1916308423762163,
    "time": 91842.66381835938,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (* (/ (- t1) (+ t1 u)) v) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.28419832474688,
    "avg_bits_err_output": 1.273011304576121,
    "avg_bits_err_improve": 17.01118702017076,
    "time": 12553.478271484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(+ (* 0.954929658551372 x) (/ -0.12900613773279798 (pow x -3.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.22184436093777044,
    "avg_bits_err_output": 0.17302576232674943,
    "avg_bits_err_improve": 0.048818598611021,
    "time": 24506.392822265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0021981203125901443,
    "avg_bits_err_output": 0.0021981203125901443,
    "avg_bits_err_improve": 0,
    "time": 2190.130615234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ PI (+ b a)) (/ (- b a) (+ (/ 0.5 a) (/ -0.5 b))))",
    "output_parens": 8,
    "avg_bits_err_input": 14.084617614909417,
    "avg_bits_err_output": 0.29528139219678473,
    "avg_bits_err_improve": 13.789336222712633,
    "time": 50791.66015625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0))) (/ (+ 1.0 (/ -1.0 eps)) (exp (fma eps x x)))) 2.0)",
    "output_parens": 12,
    "avg_bits_err_input": 30.466625857289806,
    "avg_bits_err_output": 30.498921620277383,
    "avg_bits_err_improve": -0.03229576298757664,
    "time": 42350.594482421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.013125,
    "avg_bits_err_output": 0.005125,
    "avg_bits_err_improve": 0.008,
    "time": 25047.96533203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))) (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (+ (+ 1.0 (pow (+ 2.0 (/ -2.0 (+ 1.0 t))) 2.0)) -1.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 0.017125,
    "avg_bits_err_output": 0.017892638659230877,
    "avg_bits_err_improve": -0.0007676386592308758,
    "time": 33828.91357421875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0075,
    "avg_bits_err_output": 0.0395,
    "avg_bits_err_improve": -0.032,
    "time": 9085.126953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3789.455810546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3789.2646484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4553.47705078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.808299539132032,
    "avg_bits_err_output": 0.252125,
    "avg_bits_err_improve": 7.556174539132032,
    "time": 19018.52001953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.307054420725671,
    "avg_bits_err_output": 7.307054420725671,
    "avg_bits_err_improve": 0,
    "time": 23716.763671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (* eps 2.0) x) (* eps eps))",
    "output_parens": 4,
    "avg_bits_err_input": 15.95912717625473,
    "avg_bits_err_output": 0.015790241011860922,
    "avg_bits_err_improve": 15.94333693524287,
    "time": 11199.537109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (* x 0.125)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.540502444771896,
    "avg_bits_err_output": 0.35214417344137633,
    "avg_bits_err_improve": 3.1883582713305194,
    "time": 24641.9931640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.68810725363533,
    "avg_bits_err_output": 0.01636804531403246,
    "avg_bits_err_improve": 14.671739208321299,
    "time": 16275.388427734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.506265881854695,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.506265881854695,
    "time": 4673.101806640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.6191748059602,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.6189248059602,
    "time": 4902.770751953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.3005,
    "avg_bits_err_improve": 63.6995,
    "time": 67975.796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* t (* t 1.6e-63))))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84325373223181,
    "avg_bits_err_output": 0.33106372187554084,
    "avg_bits_err_improve": 61.51219001035627,
    "time": 14501.896728515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (/ (/ (+ b (hypot b (* (pow (pow a 0.25) 2.0) (pow (pow (* c -4.0) 0.25) 2.0)))) a) -2.0) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -4e-221) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (/ (* (* 4.0 (* a c)) (/ -1.0 (- b (hypot b (sqrt (* a (* c -4.0))))))) (* a 2.0)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 2e+258) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (/ (/ (+ b (hypot b (* (sqrt (* a -4.0)) (sqrt c)))) a) -2.0)))))",
    "output_parens": 92,
    "avg_bits_err_input": 34.04895770910524,
    "avg_bits_err_output": 20.860040524255826,
    "avg_bits_err_improve": 13.188917184849412,
    "time": 39885.842529296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -420.0) (/ (- b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) (* a -2.0)) (if (<= c 2.3e-6) (/ (- b (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25))) (* a -2.0)) (/ (- b (hypot b (* (sqrt (* -4.0 a)) (sqrt c)))) (* a -2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 34.52001636568025,
    "avg_bits_err_output": 24.541309376789737,
    "avg_bits_err_improve": 9.978706988890512,
    "time": 43208.115234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2107.962646484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.70703321656496,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 39.69715821656496,
    "time": 6137.99169921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- x y) (/ (hypot x y) (/ (+ x y) (hypot x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 20.166642772734377,
    "avg_bits_err_output": 0.03369625664136816,
    "avg_bits_err_improve": 20.13294651609301,
    "time": 9751.01123046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ (+ a d) c) b) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6594213341394606,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6594213341394606,
    "time": 34329.468017578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma (+ b d) a (* a c))",
    "output_parens": 3,
    "avg_bits_err_input": 0.041125,
    "avg_bits_err_output": 0.0035,
    "avg_bits_err_improve": 0.037625,
    "time": 8680.492919921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(* (+ a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.019896240625180292,
    "avg_bits_err_output": 0.019896240625180292,
    "avg_bits_err_improve": 0,
    "time": 4992.68017578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (fma x x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.014875,
    "avg_bits_err_improve": -0.0022499999999999985,
    "time": 8699.428955078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.00075,
    "time": 1815.34423828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ b (+ a c)) d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4036797000057695,
    "avg_bits_err_output": 0.23725,
    "avg_bits_err_improve": 0.16642970000576954,
    "time": 24989.471923828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.16991500837944,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 30.16329000837944,
    "time": 10796.1494140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (/ (- (* x x) eps) (sqrt (- (* x x) eps)))))",
    "output_parens": 8,
    "avg_bits_err_input": 24.579067066851806,
    "avg_bits_err_output": 0.044908082813311295,
    "avg_bits_err_improve": 24.534158984038495,
    "time": 19225.883056640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(cbrt (pow (/ (- x (sin x)) (tan x)) 3.0))",
    "output_parens": 6,
    "avg_bits_err_input": 29.935148109685397,
    "avg_bits_err_output": 29.935218503592004,
    "avg_bits_err_improve": -7.039390660779077e-05,
    "time": 46809.6767578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006625,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 0,
    "time": 2774.923828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 200000.0) (+ (* n (/ (pow (+ 1.0 (/ i n)) n) (* i 0.01))) (/ n (/ i -100.0))) (* n (/ (+ -100.0 (* 100.0 (pow (exp n) (log1p (/ i n))))) i))))",
    "output_parens": 40,
    "avg_bits_err_input": 47.94170988204123,
    "avg_bits_err_output": 10.144114316918198,
    "avg_bits_err_improve": 37.79759556512303,
    "time": 33739.70068359375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (- INFINITY)) (+ (* c (* a (pow (hypot c d) -2.0))) (* b (* d (pow (hypot c d) -2.0)))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 2e+296) (/ (/ (+ (* a c) (* b d)) (hypot c d)) (hypot c d)) (/ (/ (- (* (/ a (/ (hypot c d) c)) (/ a (/ (hypot c d) c))) (* (/ b (/ (hypot c d) d)) (/ b (/ (hypot c d) d)))) (- (/ a (/ (hypot c d) c)) (/ b (/ (hypot c d) d)))) (hypot c d))))",
    "output_parens": 60,
    "avg_bits_err_input": 26.3920867006932,
    "avg_bits_err_output": 11.77937119019109,
    "avg_bits_err_improve": 14.612715510502108,
    "time": 21867.599609375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(/ (- (/ b (/ (hypot c d) c)) (/ a (/ (hypot c d) d))) (hypot c d))",
    "output_parens": 9,
    "avg_bits_err_input": 26.16791257004547,
    "avg_bits_err_output": 0.6107299092846284,
    "avg_bits_err_improve": 25.55718266076084,
    "time": 28409.98046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03425,
    "avg_bits_err_output": 0.020869143784593144,
    "avg_bits_err_improve": 0.013380856215406859,
    "time": 13229.859619140625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) 2.0) (/ (/ (pow (sqrt (pow (- (fma ux maxCos 1.0) ux) 8.0)) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (* (pow (sqrt (- (fma ux maxCos 1.0) ux)) 4.0) (pow (sqrt (- (fma ux maxCos 1.0) ux)) 4.0))))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 68,
    "avg_bits_err_input": 13.265780636450266,
    "avg_bits_err_output": 11.802254645970281,
    "avg_bits_err_improve": 1.4635259904799849,
    "time": 120501.04931640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)))) 2.0) (/ (/ (pow (pow (fma ux maxCos (- 1.0 ux)) 4.0) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (* (pow (sqrt (- (fma ux maxCos 1.0) ux)) 4.0) (pow (sqrt (- (fma ux maxCos 1.0) ux)) 4.0))))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 67,
    "avg_bits_err_input": 13.30430100271784,
    "avg_bits_err_output": 11.772295486791924,
    "avg_bits_err_improve": 1.532005515925917,
    "time": 112039.98168945312,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) yi))) (* (* (- 1.0 ux) maxCos) (* ux zi)))",
    "output_parens": 33,
    "avg_bits_err_input": 0.3331290051909574,
    "avg_bits_err_output": 0.3269324263350378,
    "avg_bits_err_improve": 0.006196578855919621,
    "time": 66673.853515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.20630759366319829,
    "avg_bits_err_output": 0.20232556406367178,
    "avg_bits_err_improve": 0.00398202959952651,
    "time": 30850.375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* 39.47841760436263 (* u2 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5398968997108202,
    "avg_bits_err_output": 0.505252634004026,
    "avg_bits_err_improve": 0.03464426570679424,
    "time": 21068.998046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3178456279750203,
    "avg_bits_err_output": 0.31222940291791357,
    "avg_bits_err_improve": 0.0056162250571067385,
    "time": 29237.02197265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (* s -0.5) (log (* (pow (+ (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0) -1.0) 2.0) (pow (/ 1.0 (+ 1.0 (/ 1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))))) 2.0))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.33478257062772354,
    "avg_bits_err_output": 0.3412154098045744,
    "avg_bits_err_improve": -0.006432839176850835,
    "time": 32935.295654296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (/ 1.0 (exp (/ x s)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.05820654601193664,
    "avg_bits_err_output": 0.06390147173344306,
    "avg_bits_err_improve": -0.005694925721506421,
    "time": 6027.28125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ 1.0 s) (+ 2.0 (* 2.0 (expm1 (log1p (cosh (/ (fabs x) s)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.1562500466966886,
    "avg_bits_err_output": 0.21561556236897625,
    "avg_bits_err_improve": -0.05936551567228765,
    "time": 28749.99658203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6876513735889636,
    "avg_bits_err_output": 0.6843174074377069,
    "avg_bits_err_improve": 0.0033339661512566954,
    "time": 27249.31005859375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (+ (+ 1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))) -1.0) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.1753757084092386,
    "avg_bits_err_output": 0.18054690037466858,
    "avg_bits_err_improve": -0.005171191965429978,
    "time": 27738.990478515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* eta eta) 9.999999350456404e-39) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.5257487598013366,
    "avg_bits_err_output": 0.4064526941431059,
    "avg_bits_err_improve": 2.1192960656582307,
    "time": 34643.440673828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_O (/ sinTheta_i v)))) (fma (* cosTheta_i (/ (/ 0.5 v) (sinh (/ 1.0 v)))) (/ 1.0 v) 0.0))",
    "output_parens": 12,
    "avg_bits_err_input": 0.46658294560228564,
    "avg_bits_err_output": 0.35272145746349925,
    "avg_bits_err_improve": 0.11386148813878638,
    "time": 44100.802978515625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ (+ (/ cosTheta_i (/ v cosTheta_O)) (- (/ -1.0 v) (/ (* sinTheta_i sinTheta_O) v))) (+ 0.6931 (log (/ 0.5 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.10410405243715923,
    "avg_bits_err_output": 0.10383191003642274,
    "avg_bits_err_improve": 0.00027214240073648865,
    "time": 34907.270263671875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (* 2.0 (log (cbrt (pow alpha (* PI 3.0))))) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.4685091442512029,
    "avg_bits_err_output": 0.3587711819281849,
    "avg_bits_err_improve": 0.10973796232301797,
    "time": 57221.668701171875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3159584407674125,
    "avg_bits_err_output": 0.5440413267170962,
    "avg_bits_err_improve": 0.7719171140503164,
    "time": 36999.61572265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.56426601420522,
    "avg_bits_err_output": 0.2115,
    "avg_bits_err_improve": 12.352766014205221,
    "time": 24607.17724609375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (* 0.75 (exp (/ (- r) (* s 3.0)))) (* PI (* r (* s 6.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.13847928776050428,
    "avg_bits_err_output": 0.14007313398180551,
    "avg_bits_err_improve": -0.0015938462213012372,
    "time": 69961.21459960938,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8646385385723694,
    "avg_bits_err_output": 0.6991085760589715,
    "avg_bits_err_improve": 0.1655299625133979,
    "time": 35031.349365234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (/ (* cosTheta PI) (sqrt PI))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6857721731942664,
    "avg_bits_err_output": 0.40855830350106426,
    "avg_bits_err_improve": 0.27721386969320216,
    "time": 28488.762939453125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (log1p (expm1 (pow (log1p (- u1)) 2.0))) 0.25) (sin (* 2.0 (* PI u2))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.653590131905819,
    "avg_bits_err_output": 0.523336022504499,
    "avg_bits_err_improve": 13.13025410940132,
    "time": 27803.1650390625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (fma (fabs (sin (* PI u2))) (- (fabs (sin (* PI u2)))) (+ (cos (* u2 (* PI 2.0))) (pow (sin (/ (pow (* PI u2) 3.0) (pow (* PI u2) 2.0))) 2.0))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.691179165085,
    "avg_bits_err_output": 0.3114064650112001,
    "avg_bits_err_improve": 13.379772700073799,
    "time": 33045.16845703125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* alpha (- alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.174956408182862,
    "avg_bits_err_output": 0.3265661656266226,
    "avg_bits_err_improve": 13.848390242556238,
    "time": 25415.749267578125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (/ (* alphax alphax) (/ (+ (/ (* alphax (* alphax sin2phi)) alphay) (* alphay cos2phi)) alphay)) (- (log1p (- u0))))",
    "output_parens": 12,
    "avg_bits_err_input": 12.57253538117605,
    "avg_bits_err_output": 0.5407200133946297,
    "avg_bits_err_improve": 12.03181536778142,
    "time": 29011.2158203125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (or (<= (* PI l) -2e+51) (not (<= (* PI l) 5e+127))) (- (* PI l) (/ (/ (tan (pow (* PI (* l (cbrt (pow (* PI l) -2.0)))) 3.0)) F) F)) (+ (* PI l) (* (/ (tan (* PI l)) F) (/ -1.0 F))))",
    "output_parens": 25,
    "avg_bits_err_input": 16.723557015822454,
    "avg_bits_err_output": 7.402003357943977,
    "avg_bits_err_improve": 9.321553657878477,
    "time": 33602.92529296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2184387218755409,
    "avg_bits_err_output": 0.15271936093777042,
    "avg_bits_err_improve": 0.06571936093777048,
    "time": 24429.901611328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(if (<= x -1.0) (- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B))) (- (/ (/ F (hypot F (sqrt (fma 2.0 x 2.0)))) (sin B)) (/ x (tan B))))",
    "output_parens": 20,
    "avg_bits_err_input": 14.13654311864041,
    "avg_bits_err_output": 0.3447068945825815,
    "avg_bits_err_improve": 13.791836224057828,
    "time": 29454.43310546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (log (tanh (* f (/ PI 4.0))))) (* PI -0.25))",
    "output_parens": 7,
    "avg_bits_err_input": 61.477159954499704,
    "avg_bits_err_output": 0.5669558846891621,
    "avg_bits_err_improve": 60.91020406981054,
    "time": 52740.82568359375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -2.9e+181) (/ (sqrt 2.0) (/ (fabs (/ (sqrt (/ (fma (+ x 1.0) (pow (* l (hypot l (* t (sqrt 2.0)))) 2.0) (* (pow l 4.0) (- 1.0 x))) (+ x -1.0))) l)) t)) (if (<= t -4.8e-53) (/ (* t (sqrt 2.0)) (sqrt (+ (* (+ x 1.0) (* 2.0 (/ (* t t) (+ x -1.0)))) (* l (- (* l (/ (+ x 1.0) (+ x -1.0))) l))))) (if (<= t 1.65e-44) (* t (/ (sqrt 2.0) (hypot l (sqrt (* (/ (+ x 1.0) (+ x -1.0)) (fma 2.0 (* t t) (* l l))))))) (if (<= t 7e+164) (/ (* t (sqrt 2.0)) (sqrt (+ (* (+ x 1.0) (* 2.0 (/ (* t t) (+ x -1.0)))) (* l (- (* l (/ (+ x 1.0) (+ x -1.0))) l))))) (/ (sqrt 2.0) (/ (fabs (/ (sqrt (/ (fma (+ x 1.0) (pow (* l (hypot l (* t (sqrt 2.0)))) 2.0) (* (pow l 4.0) (- 1.0 x))) (+ x -1.0))) l)) t))))))",
    "output_parens": 90,
    "avg_bits_err_input": 43.13593552709568,
    "avg_bits_err_output": 33.33336828109933,
    "avg_bits_err_improve": 9.80256724599635,
    "time": 57520.49169921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(/ (sin th) (/ (hypot (sin ky) (sin kx)) (sin ky)))",
    "output_parens": 7,
    "avg_bits_err_input": 4.142166604141708,
    "avg_bits_err_output": 0.22260413594209713,
    "avg_bits_err_improve": 3.9195624681996106,
    "time": 26201.14404296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (pow (sqrt (hypot 1.0 (* l (* (/ 2.0 Om) (hypot (sin kx) (sin ky)))))) -2.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 1.0028867854942232,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 0.9953867854942232,
    "time": 13766.476806640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ (sqrt 2.0) (/ l t)))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.01840953910635,
    "avg_bits_err_output": 1.0710024803412475,
    "avg_bits_err_improve": 8.947407058765103,
    "time": 29090.0068359375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -2.4e+87) (sqrt (- (* (* 2.0 (* U n)) t) (* (* (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0))) (* -2.0 (* U n))))) (if (<= U 1.42e-303) (sqrt (fma (* (/ l Om) (* n 2.0)) (* U (fma l -2.0 (* (- U* U) (/ n (/ Om l))))) (* n (* 2.0 (* U t))))) (if (<= U 4.5e-279) (* (sqrt (* (* n 2.0) (fma (/ l Om) (- (* l -2.0) (* n (* (/ l Om) (- U U*)))) t))) (sqrt U)) (if (<= U 5.7e-183) (sqrt (fma (* (/ l Om) (* n 2.0)) (* U (fma l -2.0 (* (- U* U) (/ n (/ Om l))))) (* n (* 2.0 (* U t))))) (* (sqrt U) (sqrt (* (* n 2.0) (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t))))))))",
    "output_parens": 76,
    "avg_bits_err_input": 35.07639001983728,
    "avg_bits_err_output": 23.805443420040643,
    "avg_bits_err_improve": 11.270946599796634,
    "time": 54404.8798828125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ (* (/ 2.0 k) (/ l (tan k))) t) (* k (/ (sin k) l)))",
    "output_parens": 9,
    "avg_bits_err_input": 47.59580084174757,
    "avg_bits_err_output": 0.3469508499517472,
    "avg_bits_err_improve": 47.24884999179582,
    "time": 91564.8076171875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (* l (/ (/ (/ l t) (+ 2.0 (pow (/ k t) 2.0))) (/ (sin k) (/ 2.0 t)))) (* t (tan k)))",
    "output_parens": 13,
    "avg_bits_err_input": 31.955668116995383,
    "avg_bits_err_output": 12.591948623189397,
    "avg_bits_err_improve": 19.363719493805988,
    "time": 90462.46020507812,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* a2 a2) (* a1 a1)) (* (/ 1.0 (cos th)) (sqrt 2.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5340962437741605,
    "avg_bits_err_output": 0.5048723719015037,
    "avg_bits_err_improve": 0.029223871872656848,
    "time": 29104.80322265625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (/ (sqrt (* PI (* 2.0 n))) (pow (* PI (* 2.0 n)) (* k 0.5))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5244609778208092,
    "avg_bits_err_output": 0.45648692013283976,
    "avg_bits_err_improve": 0.06797405768796949,
    "time": 28068.3896484375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(fma (* (sinh l) (* 2.0 (cos (* K 0.5)))) J U)",
    "output_parens": 6,
    "avg_bits_err_input": 17.133124816344267,
    "avg_bits_err_output": 0.06261560156295072,
    "avg_bits_err_improve": 17.070509214781318,
    "time": 22309.787109375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (* (pow (* (cbrt (* (+ m n) K)) (cbrt 0.5)) 2.0) (cbrt (* (+ m n) (* K 0.5)))) M)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.5280737184317,
    "avg_bits_err_output": 15.544290758113146,
    "avg_bits_err_improve": -0.016217039681444945,
    "time": 35738.241455078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.995917481250363,
    "avg_bits_err_output": 7.85491748125036,
    "avg_bits_err_improve": 10.141000000000002,
    "time": 38211.38427734375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) (- INFINITY)) (* w0 (sqrt (+ 1.0 (/ (* h M) (* l (/ -4.0 (* (/ D d) (* M (/ D d))))))))) (if (<= (/ h l) -1e-229) (* w0 (sqrt (+ 1.0 (* (* (/ M d) (* D 0.5)) (/ (* (/ M d) (* D -0.5)) (/ l h)))))) (if (<= (/ h l) 1e-296) (* w0 (sqrt (+ 1.0 (* M (* (/ D d) (/ (* (* h M) -0.25) (* l (/ d D)))))))) (* w0 (sqrt (- 1.0 (log (pow (exp (- M)) (* h (/ (/ M (/ -4.0 (pow (/ D d) 2.0))) l))))))))))",
    "output_parens": 57,
    "avg_bits_err_input": 14.067381665166643,
    "avg_bits_err_output": 9.16230872292282,
    "avg_bits_err_improve": 4.905072942243823,
    "time": 44637.963623046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e-316) (* (sqrt (- A)) (/ c0 (* (sqrt l) (sqrt (- V))))) (if (<= (* V l) 0.0) (* (/ c0 (sqrt l)) (/ 1.0 (sqrt (/ V A)))) (if (<= (* V l) 4e+296) (/ c0 (* (pow A -0.5) (sqrt (* V l)))) (pow (* (/ l (* A c0)) (/ V c0)) -0.5))))",
    "output_parens": 33,
    "avg_bits_err_input": 19.173273755806512,
    "avg_bits_err_output": 6.699098933613287,
    "avg_bits_err_improve": 12.474174822193225,
    "time": 40618.9296875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* d d) 1e-262) (+ (* (* (/ (/ d h) D) (/ (/ c0 w) (/ D d))) (* c0 (/ 0.5 w))) (* c0 (* (/ 0.5 w) (sqrt (- (pow (* (/ (/ d h) D) (/ (/ c0 w) (/ D d))) 2.0) (* M M)))))) (if (<= (* d d) 5e-201) (* c0 (* (/ 0.5 w) (* M (/ M (- (/ d (/ (* h D) (* d (/ c0 (* D w))))) (sqrt (- (pow (/ d (* (* D (/ h d)) (* w (/ D c0)))) 2.0) (* M M)))))))) (if (<= (* d d) 2e-137) (+ (* (* (/ (/ d h) D) (/ (/ c0 w) (/ D d))) (* c0 (/ 0.5 w))) (* c0 (* (/ 0.5 w) (sqrt (- (pow (* (/ (/ d h) D) (/ (/ c0 w) (/ D d))) 2.0) (* M M)))))) (log (pow (sqrt (exp (/ c0 w))) (/ M (/ (- (hypot (/ (* d (* d c0)) (* h (* D (* D w)))) M) (/ (* d (* d c0)) (* h (* D (* D w))))) (- M))))))))",
    "output_parens": 99,
    "avg_bits_err_input": 59.477399904622935,
    "avg_bits_err_output": 33.628125048443685,
    "avg_bits_err_improve": 25.84927485617925,
    "time": 84956.966796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= h -1.95e-19) (* (sqrt (/ d h)) (* (* (sqrt (- d)) (sqrt (/ 1.0 (- l)))) (+ 1.0 (* 0.5 (/ (* h (* M (* (/ D d) -0.5))) (* l (* (/ d D) (/ 2.0 M)))))))) (if (<= h -2e-310) (* (/ (sqrt (- d)) (sqrt (- h))) (* (+ 1.0 (* 0.5 (/ (* h (* M (* (/ D d) -0.5))) (* l (* (/ d D) (/ 2.0 M)))))) (sqrt (/ d l)))) (if (<= h 5e-74) (/ (* (- d) (fma (/ h l) (* (pow (/ d (* M D)) -2.0) -0.125) 1.0)) (* (sqrt l) (- (sqrt h)))) (* (sqrt (/ d h)) (* (+ 1.0 (* 0.5 (/ (* h (* M (* (/ D d) -0.5))) (* l (* (/ d D) (/ 2.0 M)))))) (/ (sqrt d) (sqrt l)))))))",
    "output_parens": 78,
    "avg_bits_err_input": 26.979217564542626,
    "avg_bits_err_output": 14.505975541505878,
    "avg_bits_err_improve": 12.473242023036748,
    "time": 99475.05078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (* (/ (- (/ (/ 0.00390625 (+ -0.25 (/ -0.25 (fma x x 1.0)))) (+ -0.25 (/ -0.25 (fma x x 1.0)))) (* (/ (pow (* (fma x x 1.0) 4.0) -2.0) (+ 0.25 (/ 0.25 (fma x x 1.0)))) (/ (pow (* (fma x x 1.0) 4.0) -2.0) (+ 0.25 (/ 0.25 (fma x x 1.0)))))) (+ (/ -0.0625 (+ -0.25 (/ -0.25 (fma x x 1.0)))) (/ (pow (* 2.0 (hypot 1.0 x)) -4.0) (+ 0.25 (/ 0.25 (fma x x 1.0)))))) (/ 1.0 (+ 0.5 (/ 0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 48,
    "avg_bits_err_input": 15.441218408153023,
    "avg_bits_err_output": 14.933025898905477,
    "avg_bits_err_improve": 0.5081925092475466,
    "time": 83128.9833984375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9848962406251803,
    "avg_bits_err_output": 0.011073120312590145,
    "avg_bits_err_improve": 0.9738231203125902,
    "time": 5496.151123046875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(* (/ (/ 1.0 PI) (* (* t (sqrt (fma (* v v) -6.0 2.0))) (- 1.0 (* v v)))) (+ 1.0 (* (* v v) -5.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4508996903074717,
    "avg_bits_err_output": 0.2827909202005821,
    "avg_bits_err_improve": 0.16810877010688957,
    "time": 25918.799560546875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (- 1.0 (* v v)) (sqrt (+ 2.0 (* v (* v -6.0))))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.01164624062518029,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 0.0035212406251802896,
    "time": 10114.492919921875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(* (cbrt (cbrt (acos (/ (fma v (* v -5.0) 1.0) (fma v v -1.0))))) (* (pow (cbrt (acos (/ (fma v (* v -5.0) 1.0) (fma v v -1.0)))) 2.0) (pow (cbrt (cbrt (acos (/ (fma v (* v -5.0) 1.0) (fma v v -1.0))))) 2.0)))",
    "output_parens": 24,
    "avg_bits_err_input": 0.5352647360209091,
    "avg_bits_err_output": 0.5414721730237395,
    "avg_bits_err_improve": -0.00620743700283044,
    "time": 30223.47705078125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (/ (- -10.0 k) (/ a k))))",
    "output_parens": 8,
    "avg_bits_err_input": 1.771707114896289,
    "avg_bits_err_output": 0.2750206742117472,
    "avg_bits_err_improve": 1.496686440684542,
    "time": 23455.427001953125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (/ 1.0 (exp (/ (+ (+ Vef EDonor) (- mu Ec)) (- KbT)))))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.03188787450397706,
    "avg_bits_err_output": 0.0324169302647271,
    "avg_bits_err_improve": -0.0005290557607500398,
    "time": 12461.57861328125,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (pow (hypot a b) 4.0) (fma b (* b 4.0) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.18579697249404314,
    "avg_bits_err_output": 0.01575244375108174,
    "avg_bits_err_improve": 0.17004452874296141,
    "time": 24435.898681640625,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18888333395870788,
    "avg_bits_err_output": 0.027594723930000644,
    "avg_bits_err_improve": 0.16128861002870723,
    "time": 41435.928466796875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18917557175431662,
    "avg_bits_err_output": 0.024623189872137873,
    "avg_bits_err_improve": 0.16455238188217874,
    "time": 18675.990234375,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(log1p (expm1 (sqrt (fma (/ x (hypot x (* p 2.0))) 0.5 0.5))))",
    "output_parens": 7,
    "avg_bits_err_input": 13.556949941172181,
    "avg_bits_err_output": 13.558425411127134,
    "avg_bits_err_improve": -0.001475469954952402,
    "time": 24494.215576171875,
    "seed": 4,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.4978094337969,
    "avg_bits_err_output": 0.01525,
    "avg_bits_err_improve": 40.4825594337969,
    "time": 4866.399169921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (fma (/ 1.0 x) (* x (tan x)) (- x)))",
    "output_parens": 13,
    "avg_bits_err_input": 31.936707880230397,
    "avg_bits_err_output": 30.02385200037018,
    "avg_bits_err_improve": 1.912855879860217,
    "time": 38857.212890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) -2e+225) (/ (- (hypot (pow (pow (* a (- c)) 2.0) 0.25) b_2) b_2) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) -1e-165) (/ (- (sqrt (+ (* b_2 b_2) (fma a (- c) (fma a (- c) (* a c))))) b_2) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (/ (/ (* a (- c)) (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 2e+249) (/ (- (sqrt (+ (* b_2 b_2) (fma a (- c) (fma a (- c) (* a c))))) b_2) a) (/ (- (hypot (* (cbrt (- c)) (sqrt (* a (cbrt (- c))))) b_2) b_2) a)))))",
    "output_parens": 78,
    "avg_bits_err_input": 34.3296966223253,
    "avg_bits_err_output": 19.073531393810885,
    "avg_bits_err_improve": 15.256165228514416,
    "time": 32952.848388671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) (/ (/ 1.0 (/ 1.0 c)) (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) -5e-186) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 2e-280) (/ (/ (fma a c 0.0) a) (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 2e+257) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ (/ 1.0 (/ -1.0 c)) (+ b_2 (sqrt (- (* b_2 b_2) (* a c)))))))))",
    "output_parens": 75,
    "avg_bits_err_input": 34.0714052041139,
    "avg_bits_err_output": 22.76416077620803,
    "avg_bits_err_improve": 11.307244427905871,
    "time": 27532.908447265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (tan (* x 0.5)) (* x (/ x (sin x))))",
    "output_parens": 6,
    "avg_bits_err_input": 31.100323104351038,
    "avg_bits_err_output": 0.4765792673301009,
    "avg_bits_err_improve": 30.623743837020935,
    "time": 24967.04345703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(cbrt (pow (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))) 3.0))",
    "output_parens": 8,
    "avg_bits_err_input": 33.17957847590282,
    "avg_bits_err_output": 32.848323396820696,
    "avg_bits_err_improve": 0.33125507908212626,
    "time": 46368.887451171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.32475496090731,
    "avg_bits_err_output": 0.0165,
    "avg_bits_err_improve": 29.30825496090731,
    "time": 19328.09375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (pow (+ 1.0 x) -2.0) (/ (fma x -1.0 -1.0) x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.248885183343658,
    "avg_bits_err_output": 0.020198120312590145,
    "avg_bits_err_improve": 14.228687063031067,
    "time": 15430.780029296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (/ (* (pow (sin eps) 2.0) (cos x)) (- -1.0 (cos eps))) (* (sin eps) (sin x)))",
    "output_parens": 11,
    "avg_bits_err_input": 39.46031141867641,
    "avg_bits_err_output": 0.6570387839808948,
    "avg_bits_err_improve": 38.80327263469552,
    "time": 37679.17724609375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (<= x 1e+69) (/ (fma 0.0 x 1.0) (+ (cbrt (pow (+ x 1.0) 2.0)) (fma (cbrt (+ x 1.0)) (cbrt x) (/ x (cbrt x))))) (/ (* (/ (+ 1.0 (- x x)) (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (/ (+ x 1.0) (cbrt (+ x 1.0))))) (+ (/ (+ x 1.0) (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (pow (exp 0.6666666666666666) (log1p x)))) (/ x (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (pow (exp 0.6666666666666666) (log1p x)))))) (+ (/ (+ x 1.0) (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (pow (exp 0.6666666666666666) (log1p x)))) (/ x (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (pow (exp 0.6666666666666666) (log1p x)))))))",
    "output_parens": 73,
    "avg_bits_err_input": 29.84055146491137,
    "avg_bits_err_output": 7.669107658422408,
    "avg_bits_err_improve": 22.171443806488963,
    "time": 37140.586669921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.386027519795867,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 30.38565251979587,
    "time": 12002.9892578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -8.5e-22) (/ (- b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) (* a -2.0)) (if (<= c 1.75e-81) (/ (- b (hypot (pow (pow (* (* c -4.0) a) 2.0) 0.25) b)) (* a -2.0)) (/ (- b (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b)) (* a -2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 34.196290081002864,
    "avg_bits_err_output": 24.201140298378014,
    "avg_bits_err_improve": 9.99514978262485,
    "time": 42943.3115234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -4.1e-50) (* -0.5 (/ (+ b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) a)) (if (<= c 1.05e-36) (* -0.5 (/ (+ b (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25))) a)) (* -0.5 (/ (+ b (hypot b (* (sqrt (* -4.0 a)) (sqrt c)))) a))))",
    "output_parens": 28,
    "avg_bits_err_input": 34.39471082197148,
    "avg_bits_err_output": 23.773141614419984,
    "avg_bits_err_improve": 10.621569207551495,
    "time": 36537.85400390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.22634751687551,
    "avg_bits_err_output": 0.001820280303027634,
    "avg_bits_err_improve": 61.22452723657248,
    "time": 11945.729248046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(pow (pow (+ (log1p n) (fabs (fma n (- (log1p n) (log n)) -1.0))) 0.16666666666666666) 6.0)",
    "output_parens": 9,
    "avg_bits_err_input": 63.00267498396311,
    "avg_bits_err_output": 44.21287109687075,
    "avg_bits_err_improve": 18.78980388709236,
    "time": 42530.0263671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.54819709755006,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 58.54144709755006,
    "time": 24539.10498046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (+ 1.0 (+ 1.0 (- -1.0 (/ x (tan x))))) x)",
    "output_parens": 6,
    "avg_bits_err_input": 59.84548669582391,
    "avg_bits_err_output": 59.85464204336816,
    "avg_bits_err_improve": -0.009155347544250958,
    "time": 36746.59765625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (/ 1.0 (/ eps (* (expm1 (* eps a)) (/ (expm1 (* eps b)) (expm1 (* eps (+ a b))))))))",
    "output_parens": 12,
    "avg_bits_err_input": 60.232625251042634,
    "avg_bits_err_output": 28.798486934470183,
    "avg_bits_err_improve": 31.43413831657245,
    "time": 36299.02978515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.86640520061961,
    "avg_bits_err_output": 0.0105,
    "avg_bits_err_improve": 40.85590520061961,
    "time": 7160.507080078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.54124921015561,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.54074921015561,
    "time": 3143.123779296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.52050738731715,
    "avg_bits_err_output": 0.01785342332290452,
    "avg_bits_err_improve": 29.502653963994245,
    "time": 17569.637939453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(fma (pow (+ (exp x) -2.0) 2.0) (/ 1.0 (+ (exp x) (- -2.0 (exp (- x))))) (- (/ (pow (exp x) -2.0) (+ (exp x) (- -2.0 (exp (- x)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 29.214461849268176,
    "avg_bits_err_output": 29.007551571030522,
    "avg_bits_err_improve": 0.20691027823765396,
    "time": 36950.762939453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma x (/ (+ 1.0 (+ x (+ x -1.0))) (+ x -1.0)) (+ -2.0 (* x -2.0))) (+ x (* x x)))",
    "output_parens": 11,
    "avg_bits_err_input": 9.843690680938964,
    "avg_bits_err_output": 9.874022821060874,
    "avg_bits_err_improve": -0.0303321401219101,
    "time": 55486.139404296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(+ (* (* (tan x) (tan eps)) (/ (tan x) (- 1.0 (* (tan x) (tan eps))))) (/ (tan eps) (- 1.0 (* (tan x) (tan eps)))))",
    "output_parens": 17,
    "avg_bits_err_input": 36.7119505772127,
    "avg_bits_err_output": 0.2305213402313574,
    "avg_bits_err_improve": 36.48142923698134,
    "time": 43651.428466796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.01322397282652,
    "avg_bits_err_output": 0.14335169219101565,
    "avg_bits_err_improve": 29.869872280635505,
    "time": 17979.92822265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (cos x) (sin eps) (* (tan (/ eps 2.0)) (* (sin eps) (- (sin x)))))",
    "output_parens": 10,
    "avg_bits_err_input": 37.02781205846847,
    "avg_bits_err_output": 0.2125053826323939,
    "avg_bits_err_improve": 36.81530667583608,
    "time": 26474.773681640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (* (sqrt x) (sqrt (+ x 1.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 19.67262804726614,
    "avg_bits_err_output": 0.16855752032412846,
    "avg_bits_err_improve": 19.504070526942012,
    "time": 23529.82275390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 14.925742312787628,
    "avg_bits_err_output": 0.37289123360406173,
    "avg_bits_err_improve": 14.552851079183567,
    "time": 19132.11279296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.887854101821585,
    "avg_bits_err_output": 1.3005975755771406,
    "avg_bits_err_improve": 28.587256526244445,
    "time": 27365.8056640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (+ (/ (- m (* m m)) v) -1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07366484475338013,
    "avg_bits_err_output": 0.07286152811111554,
    "avg_bits_err_improve": 0.0008033166422645871,
    "time": 39715.0048828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (* a (- b)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.52721110657995,
    "avg_bits_err_output": 0.3022479328161958,
    "avg_bits_err_improve": 16.224963173763754,
    "time": 18846.84912109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ (- (pow (* angle (* 3.08641975308642e-5 (/ PI angle))) 3.0)) (* (/ -0.005555555555555556 angle) (pow (/ -32400.0 PI) -2.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 19.863074373178627,
    "avg_bits_err_output": 19.924001605482548,
    "avg_bits_err_improve": -0.060927232303921386,
    "time": 48842.311767578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (* (sin (* PI (* angle 0.011111111111111112))) (* 0.5 (- b a))) (+ b a)))",
    "output_parens": 9,
    "avg_bits_err_input": 31.767193257253773,
    "avg_bits_err_output": 21.37765170404213,
    "avg_bits_err_improve": 10.389541553211643,
    "time": 46087.221435546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (+ (* 3.0 (log (cbrt (exp (+ 1.0 (cos (* angle (* PI 0.005555555555555556)))))))) -1.0)) 2.0))",
    "output_parens": 17,
    "avg_bits_err_input": 19.959423476632974,
    "avg_bits_err_output": 19.965871450954364,
    "avg_bits_err_improve": -0.006447974321389438,
    "time": 57598.814697265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (/ (- m (* m m)) (/ v m)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.18050055538953297,
    "avg_bits_err_output": 0.17727694936974814,
    "avg_bits_err_improve": 0.0032236060197848304,
    "time": 22763.1162109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32558722911195537,
    "avg_bits_err_output": 0.32218475922053535,
    "avg_bits_err_improve": 0.0034024698914200124,
    "time": 40384.073486328125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13684436093777044,
    "avg_bits_err_output": 0.13684436093777044,
    "avg_bits_err_improve": 0,
    "time": 28152.462158203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (+ (* (* (sin lambda1) 0.5) (log (pow (exp (sin lambda2)) 2.0))) (* (cos lambda1) (cos lambda2)))))) R)",
    "output_parens": 20,
    "avg_bits_err_input": 17.198816294993406,
    "avg_bits_err_output": 4.1047536279903865,
    "avg_bits_err_improve": 13.09406266700302,
    "time": 49806.355712890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* (pow (/ a -0.5) -3.0) (+ (- (* b b) (fma a (* c -4.0) (* b b))) (+ (- (* b b) (+ (* b b) (* a (* c 4.0)))) (* c (* a 4.0))))) (* (/ 0.25 (* a a)) (+ b (sqrt (fma (* a c) -4.0 (* b b))))))",
    "output_parens": 27,
    "avg_bits_err_input": 52.18668749439654,
    "avg_bits_err_output": 0.6113852199194011,
    "avg_bits_err_improve": 51.57530227447714,
    "time": 55438.642822265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (pow (cbrt (* (+ (* (* a c) 4.0) (- (* b b) (* b b))) (pow (* a -2.0) -3.0))) 3.0) (* (/ 0.25 (* a a)) (+ b (sqrt (fma (* a c) -4.0 (* b b))))))",
    "output_parens": 20,
    "avg_bits_err_input": 28.44517071933788,
    "avg_bits_err_output": 1.4196760993929494,
    "avg_bits_err_improve": 27.025494619944933,
    "time": 76115.95458984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ c 0.5) (- (- b) (pow (pow (fma b b (* c (* a -4.0))) 2.0) 0.25)))",
    "output_parens": 9,
    "avg_bits_err_input": 43.67076178833966,
    "avg_bits_err_output": 0.163148684376262,
    "avg_bits_err_improve": 43.5076131039634,
    "time": 46737.6376953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -8.5e-22) (* (- b (hypot (* (/ a (sqrt a)) (sqrt (* c -4.0))) b)) (/ -0.5 a)) (if (<= c 1.75e-81) (/ (- (hypot b (pow (pow (* c (* a -4.0)) 2.0) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 29,
    "avg_bits_err_input": 34.19223999182593,
    "avg_bits_err_output": 24.233767228156147,
    "avg_bits_err_improve": 9.958472763669782,
    "time": 38340.125244140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (+ (cos phi1) (* (cos phi2) (+ (+ (fma (sin lambda1) (sin lambda2) 1.0) -1.0) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.8229353861021843,
    "avg_bits_err_output": 0.21855892715035383,
    "avg_bits_err_improve": 0.6043764589518305,
    "time": 38981.522216796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(+ (/ 4.0 (/ (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) (pow (+ 1.0 (exp (* -2.0 x))) -2.0))) (/ -1.0 (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 29.257231818172045,
    "avg_bits_err_output": 29.255594477807417,
    "avg_bits_err_improve": 0.001637340364627704,
    "time": 31049.507080078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.08868462277677,
    "avg_bits_err_output": 0.014323120312590145,
    "avg_bits_err_improve": 58.07436150246418,
    "time": 11138.7001953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 57.7514954079555,
    "avg_bits_err_output": 0.009,
    "avg_bits_err_improve": 57.7424954079555,
    "time": 15084.374755859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.007344360937770433,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 0.0005943609377704329,
    "time": 4126.27197265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (fma (sqrt (+ x 1.0)) (sqrt (+ x -1.0)) x))",
    "output_parens": 6,
    "avg_bits_err_input": 32.241125,
    "avg_bits_err_output": 0.057,
    "avg_bits_err_improve": 32.184124999999995,
    "time": 11356.88330078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.54673702084727,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 58.53998702084727,
    "time": 22330.451416015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(- (log (/ x (+ 1.0 (sqrt (- 1.0 (* x x)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.04369812031259015,
    "avg_bits_err_output": 0.001646240625180289,
    "avg_bits_err_improve": 0.04205187968740986,
    "time": 7172.226318359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (/ 1.0 (hypot 1.0 (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.125375,
    "avg_bits_err_output": 0.12621936093777042,
    "avg_bits_err_improve": -0.0008443609377704331,
    "time": 34932.950439453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (/ 1.0 (hypot 1.0 (/ (tan t) (/ ew eh))))) (* (* eh (sin t)) (sin (atan (/ (* (tan t) (- eh)) ew))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.12607312031259016,
    "avg_bits_err_output": 0.12796936093777045,
    "avg_bits_err_improve": -0.00189624062518029,
    "time": 44269.33056640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))) (* (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))) (- lambda2 lambda1))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.01120546324586,
    "avg_bits_err_output": 0.12531805118298836,
    "avg_bits_err_improve": 38.88588741206287,
    "time": 38306.281005859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 14.543707163975762,
    "avg_bits_err_output": 0.0011674812503605781,
    "avg_bits_err_improve": 14.542539682725401,
    "time": 7527.59375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (fma (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))) (- (sin phi1)) (cos delta))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.14608197728352681,
    "avg_bits_err_output": 0.14240482443448851,
    "avg_bits_err_improve": 0.003677152849038301,
    "time": 51011.732421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma a (* c -3.0) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 52.19193956543452,
    "avg_bits_err_output": 0.08324060156295073,
    "avg_bits_err_improve": 52.10869896387157,
    "time": 43008.732177734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* a -3.0) c) (+ b (sqrt (+ (* b b) (* a (* -3.0 c)))))) (* a 3.0))",
    "output_parens": 11,
    "avg_bits_err_input": 28.628214395472614,
    "avg_bits_err_output": 0.4428622203298989,
    "avg_bits_err_improve": 28.185352175142715,
    "time": 48074.459716796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) -1e-21) (/ (/ (+ (- (pow (fma -3.0 (* a c) (* b b)) 4.5) (pow b 9.0)) (+ (fma (pow b 18.0) (/ 1.0 (pow b 9.0)) (* (- b) (* (* b b) (pow b 6.0)))) (fma (- b) (* (* b b) (pow b 6.0)) (* b (* (* b b) (pow b 6.0)))))) (* (fma b (+ b (sqrt (fma -3.0 (* a c) (* b b)))) (fma -3.0 (* a c) (* b b))) (+ (pow (fma -3.0 (* a c) (* b b)) 3.0) (+ (pow b 6.0) (pow (* b (sqrt (fma -3.0 (* a c) (* b b)))) 3.0))))) (* 3.0 a)) (/ (+ (- b) (pow (pow (fma -3.0 (* a c) (* b b)) 1.5) 0.3333333333333333)) (* 3.0 a)))",
    "output_parens": 71,
    "avg_bits_err_input": 43.76212072528842,
    "avg_bits_err_output": 41.056080371327,
    "avg_bits_err_improve": 2.70604035396142,
    "time": 107427.85375976562,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= c -1e-291) (/ 0.3333333333333333 (/ a (- (hypot b (* (sqrt (* c -3.0)) (sqrt (fabs a)))) b))) (if (<= c 1.32e+107) (* (/ 0.3333333333333333 a) (- (hypot (sqrt (fabs (* a (* c -3.0)))) b) b)) (/ 0.3333333333333333 (/ a (- (hypot b (* (sqrt (* a -3.0)) (sqrt c))) b)))))",
    "output_parens": 29,
    "avg_bits_err_input": 34.24197516158707,
    "avg_bits_err_output": 19.105226562870435,
    "avg_bits_err_improve": 15.136748598716636,
    "time": 49674.28076171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (+ (* (sin phi1) (* (sin lambda1) (sin lambda2))) (fma (* (cos lambda1) (sin phi1)) (cos lambda2) 0.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.380679768160723,
    "avg_bits_err_output": 0.18292274214496643,
    "avg_bits_err_improve": 13.197757026015756,
    "time": 51131.071044921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(+ (/ -1.0 (+ -1.0 x)) (/ (* x (- (+ -1.0 x) (+ x 1.0))) (* (+ -1.0 x) (+ x 1.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 28.462837068428296,
    "avg_bits_err_output": 24.258377901281957,
    "avg_bits_err_improve": 4.204459167146339,
    "time": 40423.878173828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ (- 1.0 x) (+ -1.0 (/ -1.0 x))) (- (/ 1.0 x) x))",
    "output_parens": 7,
    "avg_bits_err_input": 0.011625,
    "avg_bits_err_output": 0.026948120312590144,
    "avg_bits_err_improve": -0.015323120312590144,
    "time": 10767.028564453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ 2.0 (- 1.0 (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 13.97788253504498,
    "avg_bits_err_output": 0.36900069995801366,
    "avg_bits_err_improve": 13.608881835086967,
    "time": 28802.705078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (* F (+ C (- A (hypot B (- A C)))))) (- (sqrt (* 2.0 (fma B B (* (* A C) -4.0)))))) (+ (* (* A C) -4.0) (* B B))) (sqrt (* (/ (* F (fma B B (* C (* A -4.0)))) (pow (fma B B (* C (* A -4.0))) 2.0)) (* 2.0 (- (+ A C) (hypot B (- A C)))))))",
    "output_parens": 57,
    "avg_bits_err_input": 52.02378954338342,
    "avg_bits_err_output": 45.19586214172723,
    "avg_bits_err_improve": 6.82792740165619,
    "time": 46356.41943359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* (atan (/ (- (- C A) (hypot B (- C A))) B)) (/ 180.0 PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.71015275926808,
    "avg_bits_err_output": 14.053770640745386,
    "avg_bits_err_improve": 15.656382118522695,
    "time": 45381.955322265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= C -1.35e-271) (/ (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (* (hypot B (sqrt (* C (* A -4.0)))) (- (sqrt F)))) (+ (* B B) (* -4.0 (* C A)))) (/ (* (sqrt (+ (* B (* B (* F 2.0))) (* F (* C (* A -8.0))))) (- (sqrt (+ C (+ A (hypot B (- A C))))))) (+ (* B B) (* -4.0 (* C A)))))",
    "output_parens": 41,
    "avg_bits_err_input": 52.740710839481196,
    "avg_bits_err_output": 44.192849657377785,
    "avg_bits_err_improve": 8.54786118210341,
    "time": 46050.3515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (/ 1.0 (/ 1.0 (cbrt (* g 0.5)))) (cbrt a))",
    "output_parens": 6,
    "avg_bits_err_input": 15.789346630896121,
    "avg_bits_err_output": 0.8392815026075878,
    "avg_bits_err_improve": 14.950065128288534,
    "time": 20353.11962890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-228) (+ (/ (cbrt (* 0.5 (- (hypot g h) g))) (cbrt a)) (cbrt (* (/ -0.5 a) (+ g (hypot g h))))) (+ (cbrt (* (/ 0.5 a) (- g (hypot g h)))) (/ (cbrt (/ -0.5 a)) (/ 1.0 (cbrt (+ g (hypot g h)))))))",
    "output_parens": 27,
    "avg_bits_err_input": 35.98163594674697,
    "avg_bits_err_output": 3.3507547676974685,
    "avg_bits_err_improve": 32.6308811790495,
    "time": 36660.0791015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9887885503953355,
    "avg_bits_err_output": 0.04088742226799073,
    "avg_bits_err_improve": 0.9479011281273448,
    "time": 33668.86279296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- (log1p (exp (- b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.684625,
    "avg_bits_err_output": 0.008732681305326043,
    "avg_bits_err_improve": 0.675892318694674,
    "time": 10024.782958984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b1) (/ a2 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-242) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ a1 (/ b2 (/ a2 b1))) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+291) (/ (* a1 a2) (* b1 b2)) (* a2 (/ (/ a1 b2) b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.217747438681487,
    "avg_bits_err_output": 3.6759214794519033,
    "avg_bits_err_improve": 7.541825959229584,
    "time": 10929.33251953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.471054483806003,
    "avg_bits_err_output": 0.40075,
    "avg_bits_err_improve": 0.07030448380600302,
    "time": 11159.99853515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -1.0) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.0760533601966,
    "avg_bits_err_output": 0.03575,
    "avg_bits_err_improve": 53.0403033601966,
    "time": 20044.5888671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.739294068766958,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.739294068766958,
    "time": 2132.084716796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (/ (- 1.0 x) (+ 1.0 x)) (sqrt (/ (- 1.0 x) (+ 1.0 x))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.011698120312590146,
    "avg_bits_err_improve": 0.001676879687409854,
    "time": 14104.24267578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1269.240478515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (+ -1.5 (* (pow (* r w) 2.0) (/ (+ (* v 0.25) -0.375) (- 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.425687634112146,
    "avg_bits_err_output": 0.23771767032124363,
    "avg_bits_err_improve": 12.187969963790902,
    "time": 35530.8720703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* -2.0 (- 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))))))) (* (fma x1 (fma (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0)) -6.0) 1.0) (+ x1 (pow x1 3.0))))))",
    "output_parens": 36,
    "avg_bits_err_input": 0.51500260748199,
    "avg_bits_err_output": 0.319448372255434,
    "avg_bits_err_improve": 0.19555423522655602,
    "time": 110142.30346679688,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.304213894702073,
    "avg_bits_err_output": 1.3558324168624012,
    "avg_bits_err_improve": 16.94838147783967,
    "time": 14441.8671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma 0.954929658551372 x (* (pow x 3.0) -0.12900613773279798))",
    "output_parens": 3,
    "avg_bits_err_input": 0.26071275847734965,
    "avg_bits_err_output": 0.233625,
    "avg_bits_err_improve": 0.02708775847734965,
    "time": 25810.3603515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0021009193652572005,
    "avg_bits_err_output": 0.0021009193652572005,
    "avg_bits_err_improve": 0,
    "time": 3081.11083984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* (/ PI (* a b)) 0.5) (+ a b))",
    "output_parens": 5,
    "avg_bits_err_input": 13.757174470309106,
    "avg_bits_err_output": 0.2355404140665564,
    "avg_bits_err_improve": 13.52163405624255,
    "time": 58974.55419921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (* (+ 1.0 (/ 1.0 eps)) (exp (+ (* (- 1.0 eps) (* x -3.0)) (* 2.0 (* (- 1.0 eps) x))))) (* (exp (* x (- -1.0 eps))) (- 1.0 (/ 1.0 eps)))) 2.0)",
    "output_parens": 19,
    "avg_bits_err_input": 30.03112156650771,
    "avg_bits_err_output": 30.048729223495243,
    "avg_bits_err_improve": -0.01760765698753275,
    "time": 51109.80029296875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.004625,
    "avg_bits_err_improve": 0.006625,
    "time": 10318.95263671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))) (+ 2.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.015625,
    "avg_bits_err_output": 0.007771240625180288,
    "avg_bits_err_improve": 0.007853759374819712,
    "time": 36131.799560546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0095,
    "avg_bits_err_output": 0.03325,
    "avg_bits_err_improve": -0.02375,
    "time": 7520.5537109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3094.1787109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 4283.28515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 5547.96044921875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8371841634018695,
    "avg_bits_err_output": 0.247375,
    "avg_bits_err_improve": 7.58980916340187,
    "time": 17289.0185546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.484800959171523,
    "avg_bits_err_output": 7.484800959171523,
    "avg_bits_err_improve": 0,
    "time": 23698.225830078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(fma (* x 2.0) eps (* eps eps))",
    "output_parens": 3,
    "avg_bits_err_input": 16.244735096869938,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 16.23761009686994,
    "time": 4823.26220703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (* x 0.125)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5386042855481405,
    "avg_bits_err_output": 0.34990601562950735,
    "avg_bits_err_improve": 3.1886982699186333,
    "time": 31905.84521484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.0717478663596,
    "avg_bits_err_output": 0.021882331253245214,
    "avg_bits_err_improve": 15.049865535106354,
    "time": 9607.187255859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.06648705772956,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.06648705772956,
    "time": 5577.122314453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.12558211302138,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.124832113021384,
    "time": 4489.388427734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.287625,
    "avg_bits_err_improve": 63.712375,
    "time": 63815.14990234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ t (/ 2.5e+31 t))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325561318282,
    "avg_bits_err_output": 0.42038233125324537,
    "avg_bits_err_improve": 61.422873281929576,
    "time": 15693.58056640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -4.1e-50) (* -0.5 (/ (+ b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) a)) (if (<= c 1.05e-36) (* -0.5 (/ (+ b (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25))) a)) (* -0.5 (/ (+ b (hypot b (* (sqrt (* -4.0 a)) (sqrt c)))) a))))",
    "output_parens": 28,
    "avg_bits_err_input": 34.39471082197148,
    "avg_bits_err_output": 23.773141614419984,
    "avg_bits_err_improve": 10.621569207551495,
    "time": 40264.71337890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -8.5e-22) (* (- b (hypot (* (/ a (sqrt a)) (sqrt (* c -4.0))) b)) (/ -0.5 a)) (if (<= c 1.75e-81) (/ (- (hypot b (pow (pow (* c (* a -4.0)) 2.0) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 29,
    "avg_bits_err_input": 34.19223999182593,
    "avg_bits_err_output": 24.233767228156147,
    "avg_bits_err_improve": 9.958472763669782,
    "time": 39172.208740234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1757.2880859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.9475805527553,
    "avg_bits_err_output": 0.012625,
    "avg_bits_err_improve": 39.9349555527553,
    "time": 8849.027587890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (+ x y) (* (hypot x y) (/ (hypot x y) (- x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 20.49962911266229,
    "avg_bits_err_output": 0.034000376567277675,
    "avg_bits_err_improve": 20.465628736095013,
    "time": 29043.020263671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ d a) (+ b c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.672973892985605,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.672973892985605,
    "time": 34891.63134765625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.038,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.03725,
    "time": 6348.488525390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ b (+ b a))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.024594360937770437,
    "avg_bits_err_output": 0.012875,
    "avg_bits_err_improve": 0.011719360937770438,
    "time": 7848.580322265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* (- 1.0 (* x x)) (* x (/ x (- 1.0 x))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.016875,
    "avg_bits_err_output": 0.02300020351258208,
    "avg_bits_err_improve": -0.00612520351258208,
    "time": 6722.64453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.001,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.001,
    "time": 2615.166748046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ e (+ c (+ b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40579285781763874,
    "avg_bits_err_output": 0.24325,
    "avg_bits_err_improve": 0.16254285781763875,
    "time": 13539.11328125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.059580929313302,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 30.052455929313304,
    "time": 11750.124755859375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (/ 1.0 (pow (- (* x x) eps) -0.5))))",
    "output_parens": 6,
    "avg_bits_err_input": 23.885156494912707,
    "avg_bits_err_output": 0.2907573312532452,
    "avg_bits_err_improve": 23.59439916365946,
    "time": 19055.490966796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(* (pow (cbrt (tan x)) -3.0) (- x (sin x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.292814726161268,
    "avg_bits_err_output": 30.325024809135964,
    "avg_bits_err_improve": -0.03221008297469652,
    "time": 45911.50146484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006415241011860921,
    "avg_bits_err_output": 0.006415241011860921,
    "avg_bits_err_improve": 0,
    "time": 1677.685546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 2e-291) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (* (expm1 (+ n n)) (/ (* n 100.0) i)))",
    "output_parens": 20,
    "avg_bits_err_input": 47.69810470040508,
    "avg_bits_err_output": 11.316293203650547,
    "avg_bits_err_improve": 36.38181149675454,
    "time": 26895.021240234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(/ (/ (+ (* b d) (* a c)) (hypot c d)) (hypot c d))",
    "output_parens": 7,
    "avg_bits_err_input": 26.18973041289681,
    "avg_bits_err_output": 16.810839737679043,
    "avg_bits_err_improve": 9.378890675217768,
    "time": 29734.43701171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 26.389734815961095,
    "avg_bits_err_output": 0.5014046120156541,
    "avg_bits_err_improve": 25.88833020394544,
    "time": 29515.65576171875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(fma ux (+ maxCos -1.0) 1.0)",
    "output_parens": 2,
    "avg_bits_err_input": 0.03575,
    "avg_bits_err_output": 0.0159577222622215,
    "avg_bits_err_improve": 0.0197922777377785,
    "time": 14021.447998046875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (fma (cbrt (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) -2.0)) (/ 1.0 (cbrt (+ 1.0 (/ (* (fma ux maxCos (- 1.0 ux)) (- (pow (fma ux maxCos 1.0) 2.0) (* ux ux))) (fma ux maxCos (+ 1.0 ux)))))) (/ (- (pow (- (fma ux maxCos 1.0) ux) 4.0)) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))))))",
    "output_parens": 34,
    "avg_bits_err_input": 13.63824748318509,
    "avg_bits_err_output": 12.057350921778303,
    "avg_bits_err_improve": 1.580896561406787,
    "time": 120981.88232421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (fma (cbrt (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) -2.0)) (/ 1.0 (cbrt (- 1.0 (/ (* (- (fma ux maxCos 1.0) ux) (- (* ux ux) (pow (fma ux maxCos 1.0) 2.0))) (fma ux maxCos (+ 1.0 ux)))))) (/ (- (pow (- (fma ux maxCos 1.0) ux) 4.0)) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))))))",
    "output_parens": 34,
    "avg_bits_err_input": 13.67436470532853,
    "avg_bits_err_output": 12.0682623434159,
    "avg_bits_err_improve": 1.6061023619126296,
    "time": 86286.54443359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- 1.0 ux) (* maxCos zi)) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (/ 1.0 (/ 0.5 (* PI uy)))) xi) (* (sin (* uy (* PI 2.0))) yi))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.34068761311264495,
    "avg_bits_err_output": 0.34510683800908093,
    "avg_bits_err_improve": -0.00441922489643598,
    "time": 68878.51782226562,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.1992922197419501,
    "avg_bits_err_output": 0.19921909942935997,
    "avg_bits_err_improve": 7.31203125901303e-05,
    "time": 31291.9111328125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* 39.47841760436263 (* u2 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.543569304548471,
    "avg_bits_err_output": 0.5025973655540067,
    "avg_bits_err_improve": 0.040971938994464274,
    "time": 23095.48193359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 0.02533029591058111 (* 248.05021344244753 u2))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3151450401005405,
    "avg_bits_err_output": 0.3116508928609064,
    "avg_bits_err_improve": 0.0034941472396340933,
    "time": 27380.41552734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (/ (- 1.0 (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0)) (+ -1.0 (/ -1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 0.32963404237189015,
    "avg_bits_err_output": 0.3282731783226971,
    "avg_bits_err_improve": 0.0013608640491930557,
    "time": 27615.376220703125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (pow E (/ x (- s)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.06665255881401566,
    "avg_bits_err_output": 0.07012380955498712,
    "avg_bits_err_improve": -0.00347125074097146,
    "time": 12806.179931640625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (* (+ 1.0 (exp (/ (fabs x) (- s)))) (fma s (expm1 (log1p (exp (/ (fabs x) s)))) s)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.16605002735452667,
    "avg_bits_err_output": 0.16811864900200807,
    "avg_bits_err_improve": -0.0020686216474813945,
    "time": 25443.18994140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.659869554704408,
    "avg_bits_err_output": 0.659869554704408,
    "avg_bits_err_improve": 0,
    "time": 34000.837646484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (- (log (/ 1.0 (fma (- 1.0 u) (exp (/ -2.0 v)) u)))) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.16408674862765432,
    "avg_bits_err_output": 0.17896479867840806,
    "avg_bits_err_improve": -0.014878050050753738,
    "time": 28117.129150390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (hypot eta (/ sinTheta_O (sqrt (hypot 1.0 sinTheta_O))))))",
    "output_parens": 6,
    "avg_bits_err_input": 2.51106599356844,
    "avg_bits_err_output": 1.6488373440237054,
    "avg_bits_err_improve": 0.8622286495447344,
    "time": 38533.426513671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (/ v cosTheta_i)) (/ (/ (/ 0.5 v) (sinh (/ 1.0 v))) (exp (/ sinTheta_O (/ v sinTheta_i)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4632674196993997,
    "avg_bits_err_output": 0.3958197447842079,
    "avg_bits_err_improve": 0.06744767491519182,
    "time": 50105.035400390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (fma (/ 1.0 v) (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) 0.6931)) 0.5) (exp (log v)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.11598676697993002,
    "avg_bits_err_output": 0.08990756810420042,
    "avg_bits_err_improve": 0.026079198875729598,
    "time": 31083.308349609375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4787302764106153,
    "avg_bits_err_output": 0.41997524631164174,
    "avg_bits_err_improve": 0.05875503009897354,
    "time": 73386.0712890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3375915294041014,
    "avg_bits_err_output": 0.556129128237917,
    "avg_bits_err_improve": 0.7814624011661844,
    "time": 31773.08447265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.364197765594707,
    "avg_bits_err_output": 0.202875,
    "avg_bits_err_improve": 12.161322765594706,
    "time": 26824.146240234375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ 0.125 (* s PI)) (+ (/ (exp (/ (- r) s)) r) (/ (* (cbrt (pow (exp -0.6666666666666666) (/ r s))) (cbrt (exp (/ (* r -0.3333333333333333) s)))) r)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1322888898725968,
    "avg_bits_err_output": 0.24586198846107093,
    "avg_bits_err_improve": -0.11357309858847414,
    "time": 90000.07983398438,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma n1_i (/ (sin (* normAngle u)) (sin normAngle)) (* (sin (* normAngle (- 1.0 u))) (/ n0_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8834567869471265,
    "avg_bits_err_output": 0.7586029166030192,
    "avg_bits_err_improve": 0.12485387034410733,
    "time": 39921.01513671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* cosTheta (sqrt PI))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6912347107001349,
    "avg_bits_err_output": 0.47775784730424,
    "avg_bits_err_improve": 0.2134768633958949,
    "time": 22946.00390625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (pow (log1p (- u1)) 2.0) 0.25) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.64238750509035,
    "avg_bits_err_output": 0.5391015339916457,
    "avg_bits_err_improve": 13.103285971098703,
    "time": 20674.303955078125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (exp (log (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.697039825434446,
    "avg_bits_err_output": 0.3061310869231257,
    "avg_bits_err_improve": 13.390908738511321,
    "time": 25421.76318359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* (- alpha) (log1p (- u0))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.002637804717528,
    "avg_bits_err_output": 0.3282430453140325,
    "avg_bits_err_improve": 13.674394759403496,
    "time": 18534.892333984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (* alphay (- (log1p (- u0)))) (/ (fma (/ sin2phi alphay) (* alphax alphax) (* alphay cos2phi)) (* alphax alphax)))",
    "output_parens": 11,
    "avg_bits_err_input": 12.555530842915715,
    "avg_bits_err_output": 0.4761120634243551,
    "avg_bits_err_improve": 12.07941877949136,
    "time": 26740.718017578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(+ (* PI l) (/ -1.0 (* F (/ F (tan (* PI l))))))",
    "output_parens": 7,
    "avg_bits_err_input": 16.697940926346046,
    "avg_bits_err_output": 12.285447555305439,
    "avg_bits_err_improve": 4.412493371040608,
    "time": 34477.137939453125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21540127684030846,
    "avg_bits_err_output": 0.14791524101186093,
    "avg_bits_err_improve": 0.06748603582844753,
    "time": 18879.3310546875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (/ (sqrt (fma x 2.0 (fma F F 2.0))) (/ 1.0 (sin B)))) (/ x (tan B)))",
    "output_parens": 10,
    "avg_bits_err_input": 14.169776114473212,
    "avg_bits_err_output": 10.893953338522103,
    "avg_bits_err_improve": 3.2758227759511094,
    "time": 39086.638916015625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (* 4.0 (log (tanh (* PI (* f 0.25))))) PI)",
    "output_parens": 6,
    "avg_bits_err_input": 61.24436236411623,
    "avg_bits_err_output": 0.6493807622720454,
    "avg_bits_err_improve": 60.59498160184418,
    "time": 46820.034912109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* t (sqrt 2.0)) (hypot l (/ (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x -1.0) (+ x 1.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 43.24177929978166,
    "avg_bits_err_output": 20.266832442750083,
    "avg_bits_err_improve": 22.97494685703158,
    "time": 47884.236083984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.953121431623882,
    "avg_bits_err_output": 0.2139390984428183,
    "avg_bits_err_improve": 3.7391823331810636,
    "time": 22031.1552734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 1.1960248549434027,
    "avg_bits_err_output": 0.013028555837104548,
    "avg_bits_err_improve": 1.182996299106298,
    "time": 12043.1142578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ (* t (sqrt 2.0)) l))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.343448877249196,
    "avg_bits_err_output": 1.0884499242343173,
    "avg_bits_err_improve": 9.25499895301488,
    "time": 24817.91796875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -5e-310) (sqrt (+ (* (* 2.0 n) (* U t)) (* (* 2.0 n) (/ (* U (+ (* l -2.0) (* n (* (/ l Om) (- U* U))))) (/ Om l))))) (if (<= n 8e-103) (* (sqrt (* U (fma (/ l Om) (+ (* l -2.0) (* (/ l Om) (* n (- U* U)))) t))) (sqrt (* 2.0 n))) (if (<= n 4.6e-25) (sqrt (+ (* (* 2.0 n) (* U t)) (* (/ (fma n (* l (/ (- U* U) Om)) (* l -2.0)) (/ Om U)) (* 2.0 (* n l))))) (if (<= n 4e+23) (* (sqrt (- t (fma n (/ (* l (- U U*)) (* Om (/ Om l))) (* 2.0 (* l (/ l Om)))))) (sqrt (* 2.0 (* U n)))) (* (sqrt n) (sqrt (* 2.0 (* U (+ t (* (/ l Om) (fma n (* l (/ (- U* U) Om)) (* l -2.0))))))))))))",
    "output_parens": 80,
    "avg_bits_err_input": 34.87608845753049,
    "avg_bits_err_output": 26.833576749693073,
    "avg_bits_err_improve": 8.04251170783742,
    "time": 56591.9677734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= l -6.5e-191) (/ 2.0 (* k (* (tan k) (/ (/ 1.0 l) (/ (/ l t) (* k (sin k))))))) (if (<= l 3.6e-97) (/ (* (/ (/ l (tan k)) (* (* k t) (/ (* t (sin k)) l))) (* 2.0 t)) k) (if (<= l 4e+242) (/ (* l (/ (* l -2.0) k)) (/ (* k (* (sin k) (- (tan k)))) (/ 1.0 t))) (/ 2.0 (* k (* (tan k) (/ (/ 1.0 l) (/ (/ l t) (* k (sin k))))))))))",
    "output_parens": 48,
    "avg_bits_err_input": 47.433712742115276,
    "avg_bits_err_output": 8.339817780706436,
    "avg_bits_err_improve": 39.093894961408836,
    "time": 121694.3349609375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(* (/ 2.0 (* t (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ t l))))) (/ (/ l t) (tan k)))",
    "output_parens": 13,
    "avg_bits_err_input": 32.875653945299014,
    "avg_bits_err_output": 11.852126551868238,
    "avg_bits_err_improve": 21.023527393430776,
    "time": 67348.03515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (fma a1 a1 (* a2 a2)) (sqrt 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5192069578349481,
    "avg_bits_err_output": 0.46543985157737483,
    "avg_bits_err_improve": 0.05376710625757325,
    "time": 32579.05908203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(if (<= n 6.6e+28) (sqrt (/ (pow (* PI (* 2.0 n)) (- 1.0 k)) k)) (/ (sqrt (* k (pow (* 2.0 (* PI n)) (- 1.0 k)))) k))",
    "output_parens": 15,
    "avg_bits_err_input": 0.5133391902296772,
    "avg_bits_err_output": 0.5132997781116091,
    "avg_bits_err_improve": 3.941211806812728e-05,
    "time": 25916.956787109375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (sinh l) (* (* 2.0 J) (cos (* 0.5 K)))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.536522096306445,
    "avg_bits_err_output": 0.12248120312590145,
    "avg_bits_err_improve": 17.414040893180545,
    "time": 22655.437744140625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(/ (cos (- (/ K (/ 2.0 (+ m n))) M)) (exp (+ (+ (pow (- (* (+ m n) 0.5) M) 2.0) l) (- m n))))",
    "output_parens": 14,
    "avg_bits_err_input": 15.244949337409441,
    "avg_bits_err_output": 15.227968830911495,
    "avg_bits_err_improve": 0.016980506497946024,
    "time": 42698.243408203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.66936560156295,
    "avg_bits_err_output": 8.22899060156295,
    "avg_bits_err_improve": 9.440375000000001,
    "time": 39131.814697265625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (* (/ (/ M (/ 4.0 (/ D d))) l) (* h (* M (/ D d)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 13.942765264523583,
    "avg_bits_err_output": 8.64936099130224,
    "avg_bits_err_improve": 5.293404273221343,
    "time": 35091.63134765625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (/ (* (sqrt (/ A V)) c0) (sqrt l)) (if (<= (* V l) -2e-294) (* c0 (/ (sqrt (- A)) (sqrt (* l (- V))))) (if (<= (* V l) 2e-320) (/ (sqrt (/ A V)) (/ (sqrt l) c0)) (if (<= (* V l) 1e+288) (* c0 (/ (sqrt A) (sqrt (* V l)))) (sqrt (* (/ (* A c0) l) (/ c0 V)))))))",
    "output_parens": 40,
    "avg_bits_err_input": 19.754043750378862,
    "avg_bits_err_output": 6.772534210236664,
    "avg_bits_err_improve": 12.981509540142198,
    "time": 31154.6923828125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= c0 -3.2e-140) (* c0 (* (/ 0.5 w) (* M (/ M (- (/ d (* (* D (/ h d)) (* w (/ D c0)))) (sqrt (fma (- M) M (pow (/ (* D (/ h d)) (/ d (/ D (/ c0 w)))) -2.0)))))))) (if (<= c0 1.85e-281) (log (pow (sqrt (exp (/ c0 w))) (fma (/ c0 w) (* (/ d h) (/ d (* D D))) (sqrt (- (pow (* (/ (* c0 d) w) (/ d (* h (* D D)))) 2.0) (* M M)))))) (if (<= c0 5.5e-212) (* (/ (- (* M M)) (- (sqrt (- (pow (/ (/ (* c0 (/ (* d d) w)) h) (* D D)) 2.0) (* M M))) (* (* (/ (/ d w) D) (/ d D)) (/ c0 h)))) (/ c0 (* w 2.0))) (if (<= c0 6e-204) (* (/ c0 (* w 2.0)) (+ (* (/ c0 (/ w d)) (/ d (* D (* D h)))) (* (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* D h))) M)) (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* D h))) (- M)))))) (if (<= c0 2.65e-164) (/ (* (/ c0 2.0) (/ (* M M) w)) (- (* c0 (* (/ d (* w D)) (/ (/ d D) h))) (sqrt (- (pow (* c0 (* (/ d (* w D)) (/ (/ d D) h))) 2.0) (* M M))))) (if (<= c0 3.5e-9) (* c0 (* (/ 0.5 w) (* M (/ M (- (/ d (* (* D (/ h d)) (* w (/ D c0)))) (pow (pow (fma M (- M) (pow (* (/ (* w (* h (/ D c0))) d) (/ D d)) -2.0)) 2.0) 0.25)))))) (if (<= c0 6.2e-6) (/ (/ (* c0 (fma (/ c0 (* w h)) (* (/ d D) (/ d D)) (sqrt (- (pow (* (/ c0 (* w h)) (* (/ d D) (/ d D))) 2.0) (* M M))))) w) 2.0) (* c0 (* (/ 0.5 w) (* M (/ M (- (/ d (* (* D (/ h d)) (* w (/ D c0)))) (sqrt (fma (- M) M (pow (/ (* D (/ h d)) (/ d (/ D (/ c0 w)))) -2.0)))))))))))))))",
    "output_parens": 192,
    "avg_bits_err_input": 59.414281227251884,
    "avg_bits_err_output": 33.79769058598463,
    "avg_bits_err_improve": 25.61659064126725,
    "time": 106861.0283203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= h -1.9e-130) (* (* (sqrt (/ d h)) (/ (sqrt (- d)) (sqrt (- l)))) (+ 1.0 (* (/ h (/ l (* M (/ D d)))) (* (* M (/ D d)) -0.125)))) (if (<= h -5e-310) (* (* (/ (sqrt (- d)) (sqrt (- h))) (sqrt (/ d l))) (+ 1.0 (* (/ (* h M) (* l (/ d D))) (* (* M (/ D d)) -0.125)))) (if (<= h 9.8e+76) (/ (* d (+ -1.0 (* (* M (/ D d)) (* (* M (/ D d)) (* 0.125 (/ h l)))))) (* (sqrt l) (- (sqrt h)))) (* (+ 1.0 (* (/ h (/ l (* M (/ D d)))) (* (* M (/ D d)) -0.125))) (* (sqrt (/ d h)) (/ (sqrt d) (sqrt l)))))))",
    "output_parens": 73,
    "avg_bits_err_input": 26.216037983146116,
    "avg_bits_err_output": 13.340686049856693,
    "avg_bits_err_improve": 12.875351933289423,
    "time": 97014.88012695312,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (- (+ (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 1.5) (- 1.0 (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 3.0))) (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 4.5)) (pow (+ 1.0 (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 1.5)) 2.0)) (+ 1.5 (+ (/ 0.5 (hypot 1.0 x)) (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))",
    "output_parens": 31,
    "avg_bits_err_input": 15.391789417137355,
    "avg_bits_err_output": 14.918597565851291,
    "avg_bits_err_improve": 0.4731918512860638,
    "time": 38181.851318359375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9828202803030276,
    "avg_bits_err_output": 0.010875,
    "avg_bits_err_improve": 0.9719452803030276,
    "time": 5014.822021484375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (* (/ 1.0 (sqrt (fma v (* v -6.0) 2.0))) (+ -1.0 (* (* v v) 5.0))) PI) (- t)) (- 1.0 (* v v)))",
    "output_parens": 14,
    "avg_bits_err_input": 0.4362961123149945,
    "avg_bits_err_output": 0.11194404686075497,
    "avg_bits_err_improve": 0.3243520654542395,
    "time": 20068.28857421875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt 2.0) 4.0) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.01322491020269024,
    "avg_bits_err_output": 0.01364624062518029,
    "avg_bits_err_improve": -0.00042133042249004916,
    "time": 13388.3603515625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(expm1 (log1p (acos (/ (- (fma v (* v -5.0) 1.0)) (- 1.0 (* v v))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5586795959272463,
    "avg_bits_err_output": 0.5603573670388086,
    "avg_bits_err_improve": -0.0016777711115623095,
    "time": 45374.889892578125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (* k (/ (- -10.0 k) a))))",
    "output_parens": 8,
    "avg_bits_err_input": 1.8344327472608766,
    "avg_bits_err_output": 0.2849302088722241,
    "avg_bits_err_improve": 1.5495025383886525,
    "time": 23449.6962890625,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02622911122411479,
    "avg_bits_err_output": 0.02622911122411479,
    "avg_bits_err_improve": 0,
    "time": 5282.802001953125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.17661109062806482,
    "avg_bits_err_output": 0.015389285939212752,
    "avg_bits_err_improve": 0.16122180468885206,
    "time": 9399.111083984375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1904976065326843,
    "avg_bits_err_output": 0.0288346362172097,
    "avg_bits_err_improve": 0.1616629703154746,
    "time": 13979.848388671875,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (pow (hypot a b) 4.0) (fma a (* a (fma a -4.0 4.0)) (+ (+ -1.0 (* a (* 4.0 (* b b)))) (* b (* b 12.0)))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.18888481622889675,
    "avg_bits_err_output": 0.032519011153364016,
    "avg_bits_err_improve": 0.15636580507553272,
    "time": 11669.1552734375,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (+ 0.5 (* x (/ 0.5 (hypot x (* p 2.0))))))",
    "output_parens": 6,
    "avg_bits_err_input": 12.998031364856104,
    "avg_bits_err_output": 13.252138957191665,
    "avg_bits_err_improve": -0.25410759233556135,
    "time": 22026.524658203125,
    "seed": 5,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.94225197430117,
    "avg_bits_err_output": 0.02925,
    "avg_bits_err_improve": 40.913001974301174,
    "time": 5187.924072265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -2e-8) (- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x))) (if (<= x 2e-9) (* (/ x (tan x)) (/ (- (- x) (sin x)) (+ x (* x (/ x (tan x)))))) (+ (* x (/ -1.0 (- (tan x) x))) (* (sin x) (/ 1.0 (- (tan x) x))))))",
    "output_parens": 33,
    "avg_bits_err_input": 31.00025058020758,
    "avg_bits_err_output": 25.234564034172134,
    "avg_bits_err_improve": 5.765686546035447,
    "time": 35199.3740234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -7e-125) (/ (- (- (/ b_2 (/ (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ (fma a c (* a (- c c))) (sqrt (- (* b_2 b_2) (* a c))))) b_2) a) (if (<= b_2 3.2e+137) (/ (/ (* a (- c)) (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))) a) (/ (- c) (+ b_2 (hypot b_2 (sqrt (* a c)))))))",
    "output_parens": 36,
    "avg_bits_err_input": 34.10190090268774,
    "avg_bits_err_output": 21.10717261936636,
    "avg_bits_err_improve": 12.994728283321379,
    "time": 28670.443115234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -8.5e-163) (/ (- c) (- b_2 (hypot b_2 (pow (pow (* c a) 2.0) 0.25)))) (if (<= b_2 3e+147) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a) (/ (fma b_2 (- -1.0 (/ b_2 (hypot b_2 (sqrt (* c a))))) (/ a (/ (hypot b_2 (sqrt (* c a))) c))) a)))",
    "output_parens": 30,
    "avg_bits_err_input": 34.40190670582469,
    "avg_bits_err_output": 15.688152179373018,
    "avg_bits_err_improve": 18.713754526451673,
    "time": 34922.3095703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (* (sin x) (/ (tan (* x 0.5)) x)) x)",
    "output_parens": 6,
    "avg_bits_err_input": 31.351370300103493,
    "avg_bits_err_output": 0.12824097813022844,
    "avg_bits_err_improve": 31.223129321973264,
    "time": 24371.728271484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 33.09710080445001,
    "avg_bits_err_output": 32.86507484896743,
    "avg_bits_err_improve": 0.23202595548257676,
    "time": 38034.702880859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.461923562613176,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 29.454298562613175,
    "time": 24422.37158203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (pow (+ 1.0 x) -2.0) (/ (fma x -1.0 -1.0) x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.989250107322736,
    "avg_bits_err_output": 0.01975,
    "avg_bits_err_improve": 14.969500107322736,
    "time": 12385.07080078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -9.5e-31) (fma (sin x) (- (sin eps)) (* (cos x) (+ (cos eps) -1.0))) (if (<= x 2.05e-17) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (- (- (* (cos x) (cos eps)) (cos x)) (* (sin x) (sin eps)))))",
    "output_parens": 29,
    "avg_bits_err_input": 39.667621311749734,
    "avg_bits_err_output": 0.5874317591222555,
    "avg_bits_err_improve": 39.08018955262748,
    "time": 33745.992431640625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (fma (cbrt x) (+ (cbrt x) (cbrt (+ 1.0 x))) (/ (+ 1.0 x) (cbrt (+ 1.0 x)))))",
    "output_parens": 11,
    "avg_bits_err_input": 29.80329868934751,
    "avg_bits_err_output": 0.3319904172155352,
    "avg_bits_err_improve": 29.471308272131974,
    "time": 24675.224853515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.524368888568375,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 30.524243888568375,
    "time": 10488.360595703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ 0.5 (/ a (- (hypot (* (sqrt (* a -4.0)) (sqrt c)) b) b))) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -1e-21) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (* (/ (* a (* 4.0 c)) (- (- b) (hypot b (sqrt (* a (* c -4.0)))))) (/ 0.5 a)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 1e+185) (/ (fma (pow (fma a (* c -4.0) (* b b)) 0.375) (pow (fma a (* c -4.0) (* b b)) 0.125) (- b)) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 88,
    "avg_bits_err_input": 33.99866586007448,
    "avg_bits_err_output": 22.622177054984373,
    "avg_bits_err_improve": 11.376488805090109,
    "time": 39683.06005859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -1.22e-135) (/ (/ (/ (* a (* c -4.0)) a) -2.0) (- (hypot b (sqrt (* a (* c -4.0)))) b)) (if (<= b 3.1e-251) (/ (/ (+ b (hypot b (* (* c -4.0) (sqrt (/ a (* c -4.0)))))) a) -2.0) (if (<= b 1.5e+141) (/ (- (- b) (sqrt (+ (* b b) (* -4.0 (* a c))))) (* a 2.0)) (/ (/ (+ b (hypot b (pow (* (* a c) (* (* a c) 16.0)) 0.25))) a) -2.0))))",
    "output_parens": 43,
    "avg_bits_err_input": 34.516884818183726,
    "avg_bits_err_output": 22.32727322234968,
    "avg_bits_err_improve": 12.189611595834045,
    "time": 37611.4873046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.15650823780998,
    "avg_bits_err_output": 0.022304323438491595,
    "avg_bits_err_improve": 61.13420391437149,
    "time": 10128.98486328125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(+ (+ (log1p n) (* n (log1p (/ 1.0 n)))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 63.00680280572232,
    "avg_bits_err_output": 0.0035,
    "avg_bits_err_improve": 63.00330280572232,
    "time": 31698.86376953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.77462370524597,
    "avg_bits_err_output": 0.006125,
    "avg_bits_err_improve": 58.768498705245975,
    "time": 15662.9599609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(* (/ 1.0 x) (* (/ (fma x (* x (- (cos x))) (* (tan x) (sin x))) (* (cos x) (tan x))) (/ 1.0 (+ x (tan x)))))",
    "output_parens": 17,
    "avg_bits_err_input": 59.95306982695454,
    "avg_bits_err_output": 60.01697090521438,
    "avg_bits_err_improve": -0.06390107825983904,
    "time": 39257.260009765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (/ eps (expm1 (* eps a))) (/ (expm1 (* eps b)) (expm1 (* eps (+ a b)))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.128964569987595,
    "avg_bits_err_output": 29.38940346202407,
    "avg_bits_err_improve": 30.739561107963524,
    "time": 37246.5224609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.33835830818711,
    "avg_bits_err_output": 0.01,
    "avg_bits_err_improve": 41.32835830818711,
    "time": 5505.5244140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.77604677655998,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 58.77529677655998,
    "time": 2804.845703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.492312971654627,
    "avg_bits_err_output": 0.024869335871256167,
    "avg_bits_err_improve": 29.467443635783372,
    "time": 3408.941650390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (pow (+ -2.0 (exp (- x))) 2.0) (exp (- x)) (+ -2.0 (exp (- x)))) (/ (+ -2.0 (exp (- x))) (exp x)))",
    "output_parens": 16,
    "avg_bits_err_input": 30.160152882582313,
    "avg_bits_err_output": 29.993453176968593,
    "avg_bits_err_improve": 0.16669970561371983,
    "time": 39924.019287109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma x (/ (+ 1.0 (+ x (+ x -1.0))) (+ x -1.0)) (+ -2.0 (* x -2.0))) (+ x (* x x)))",
    "output_parens": 11,
    "avg_bits_err_input": 9.983138448054993,
    "avg_bits_err_output": 9.977395033120462,
    "avg_bits_err_improve": 0.005743414934530122,
    "time": 46157.526611328125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (or (<= x -2.4e-110) (not (<= x 3.5e-155))) (/ (+ (tan eps) (- (* (/ (- (pow (tan x) 2.0) (pow (tan eps) 2.0)) (- 1.0 (* (tan x) (tan eps)))) (/ (cos x) (sin x))) (tan x))) (* (/ (cos x) (sin x)) (- (tan x) (tan eps)))) (fma (+ (cos x) (* (sin x) (/ (+ (* (tan x) (tan eps)) -1.0) (+ (tan x) (tan eps))))) (* (tan eps) (/ 1.0 (* (- 1.0 (* (tan x) (tan eps))) (cos x)))) (* (tan x) (- (/ 1.0 (- 1.0 (* (tan x) (tan eps)))) (/ (/ (sin x) (+ (tan x) (tan eps))) (cos x))))))",
    "output_parens": 68,
    "avg_bits_err_input": 37.213770144703545,
    "avg_bits_err_output": 17.960054907111488,
    "avg_bits_err_improve": 19.253715237592058,
    "time": 44856.796630859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.254410173334666,
    "avg_bits_err_output": 0.13230676718957338,
    "avg_bits_err_improve": 30.122103406145094,
    "time": 20289.54931640625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (/ (pow (sin eps) 2.0) (- -1.0 (cos eps))) (* (sin eps) (cos x)))",
    "output_parens": 10,
    "avg_bits_err_input": 36.9918538104059,
    "avg_bits_err_output": 0.3553135679423104,
    "avg_bits_err_improve": 36.63654024246359,
    "time": 33243.535400390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (* (sqrt (+ x 1.0)) (sqrt x))))",
    "output_parens": 8,
    "avg_bits_err_input": 19.508638628069466,
    "avg_bits_err_output": 0.1611563921967848,
    "avg_bits_err_improve": 19.347482235872683,
    "time": 23246.0146484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (+ N (+ 1.0 (* N N))))",
    "output_parens": 4,
    "avg_bits_err_input": 14.915952475671583,
    "avg_bits_err_output": 0.38519220245667163,
    "avg_bits_err_improve": 14.530760273214911,
    "time": 29197.18798828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.2586342510356,
    "avg_bits_err_output": 1.1996047253163828,
    "avg_bits_err_improve": 29.059029525719215,
    "time": 25074.197509765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(/ (+ (* (* m (- 1.0 m)) (+ 1.0 m)) (* (/ v (- 1.0 m)) (+ (* m m) -1.0))) (* (+ 1.0 m) (/ v (- 1.0 m))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.07949080507553279,
    "avg_bits_err_output": 0.10714417344137626,
    "avg_bits_err_improve": -0.027653368365843478,
    "time": 17892.35205078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (/ b (/ 1.0 a)) (/ (- a) (/ 1.0 b)))",
    "output_parens": 6,
    "avg_bits_err_input": 16.385552720969105,
    "avg_bits_err_output": 0.2915387234500298,
    "avg_bits_err_improve": 16.094013997519074,
    "time": 18611.389404296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (fma (* PI (pow (pow (* (cbrt (cbrt angle)) (cbrt (cbrt 0.005555555555555556))) 3.0) 2.0)) (cbrt (* angle 0.005555555555555556)) 0.0))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 20,
    "avg_bits_err_input": 20.039304238767144,
    "avg_bits_err_output": 20.06921457130748,
    "avg_bits_err_improve": -0.029910332540335816,
    "time": 56772.362060546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* (* PI 0.011111111111111112) angle)) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 31.154669206096404,
    "avg_bits_err_output": 21.2527348582852,
    "avg_bits_err_improve": 9.901934347811203,
    "time": 42587.5341796875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (expm1 (- (log1p (- (pow (pow (cbrt (sin (* angle (* PI 0.005555555555555556)))) 3.0) 2.0))) (log1p (- (sin (* angle (* PI 0.005555555555555556)))))))) 2.0) (pow (* b (cos (/ (* angle PI) 180.0))) 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 20.483593051521456,
    "avg_bits_err_output": 20.457850892602398,
    "avg_bits_err_improve": 0.02574215891905851,
    "time": 55212.021484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (* m (- 1.0 m)) (/ m v)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17922236042698106,
    "avg_bits_err_output": 0.1740958953558774,
    "avg_bits_err_improve": 0.0051264650711036475,
    "time": 21398.771484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (sqrt (pow (tan x) 4.0))) (+ 1.0 (sqrt (pow (tan x) 4.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.30791094300227856,
    "avg_bits_err_output": 0.31001631397461105,
    "avg_bits_err_improve": -0.0021053709723324876,
    "time": 31605.372802734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13743872187554088,
    "avg_bits_err_output": 0.1382924812503606,
    "avg_bits_err_improve": -0.0008537593748197125,
    "time": 23614.89697265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda1) (cos lambda2)))))) R)",
    "output_parens": 17,
    "avg_bits_err_input": 17.21888736549553,
    "avg_bits_err_output": 3.855554076459083,
    "avg_bits_err_improve": 13.363333289036447,
    "time": 40619.623291015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* c -2.0) (+ b (sqrt (fma c (* a -4.0) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 52.45237299224613,
    "avg_bits_err_output": 0.08666748125036058,
    "avg_bits_err_improve": 52.365705510995774,
    "time": 38941.13232421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fma (cbrt (pow b 18.0)) (cbrt (pow b 9.0)) (- (pow (fma b b (* a (* c -4.0))) 4.5))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (pow b 6.0) (+ (pow (fma b b (* a (* c -4.0))) 3.0) (pow (* b (* b (fma b b (* -4.0 (* a c))))) 1.5))))) (/ -0.5 a))",
    "output_parens": 36,
    "avg_bits_err_input": 28.379383801467668,
    "avg_bits_err_output": 27.016524580681388,
    "avg_bits_err_improve": 1.3628592207862802,
    "time": 71264.45288085938,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (- (* b b) (* c (* a 4.0)))) b) (* a 2.0)) -1e-21) (/ (/ (- (fma c (* -4.0 a) (* b b)) (* b b)) (+ b (sqrt (fma c (* -4.0 a) (* b b))))) (* a 2.0)) (* (+ (- b) (sqrt (pow (pow (fma c (* -4.0 a) (* b b)) 3.0) 0.3333333333333333))) (/ 0.5 a)))",
    "output_parens": 33,
    "avg_bits_err_input": 43.97590902782919,
    "avg_bits_err_output": 41.08185283212548,
    "avg_bits_err_improve": 2.894056195703712,
    "time": 61163.3359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ 0.5 (/ a (- (hypot (* (sqrt (* a -4.0)) (sqrt c)) b) b))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-21) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (/ 0.5 (* (+ b (hypot (sqrt (* a (* c -4.0))) b)) (/ a (fma a (* c -4.0) (- (* b b) (* b b)))))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+185) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 86,
    "avg_bits_err_input": 33.99914084391831,
    "avg_bits_err_output": 22.339769465763027,
    "avg_bits_err_improve": 11.659371378155285,
    "time": 41284.515380859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8633101713535926,
    "avg_bits_err_output": 0.23287423555701087,
    "avg_bits_err_improve": 0.6304359357965816,
    "time": 31731.1513671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (- (* (/ (* 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0)) (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))) (/ (* 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0)) (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))))) (* (/ 1.0 (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))) (/ 1.0 (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))))) (+ (/ (* 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0)) (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))) (/ 1.0 (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))))))",
    "output_parens": 56,
    "avg_bits_err_input": 29.561451474339556,
    "avg_bits_err_output": 29.558424831249834,
    "avg_bits_err_improve": 0.003026643089722114,
    "time": 107048.90234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.20251103404985,
    "avg_bits_err_output": 0.01464624062518029,
    "avg_bits_err_improve": 58.187864793424666,
    "time": 9847.45263671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.131545867547196,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 58.1245458675472,
    "time": 8684.723388671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(sqrt (pow (cosh x) -2.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.009271240625180288,
    "avg_bits_err_output": 0.03195624030092001,
    "avg_bits_err_improve": -0.02268499967573972,
    "time": 4968.02685546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.51375,
    "avg_bits_err_output": 0.082375,
    "avg_bits_err_improve": 31.431375000000003,
    "time": 7336.75,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.766096294650104,
    "avg_bits_err_output": 0.006125,
    "avg_bits_err_improve": 58.75997129465011,
    "time": 17992.243896484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (/ 1.0 (/ 1.0 (+ 1.0 (sqrt (- 1.0 (* x x)))))) x))",
    "output_parens": 8,
    "avg_bits_err_input": 0.01075,
    "avg_bits_err_output": 0.012,
    "avg_bits_err_improve": -0.0012500000000000011,
    "time": 7060.307373046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (* (cos (atan (/ (/ eh ew) (tan t)))) (sin t))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.129375,
    "avg_bits_err_output": 0.1297712406251803,
    "avg_bits_err_improve": -0.00039624062518031633,
    "time": 38019.413818359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (/ (* ew (cos t)) (hypot 1.0 (* (/ eh ew) (tan t)))) (* eh (* (sin t) (sin (atan (/ (- eh) (/ ew (tan t)))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12587595881547559,
    "avg_bits_err_output": 0.12321936093777044,
    "avg_bits_err_improve": 0.0026565978777051413,
    "time": 40310.529052734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (cos (* phi2 0.5)) (cos (* 0.5 phi1)) (* (sin (* phi2 0.5)) (- (sin (* 0.5 phi1)))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 39.35066410203863,
    "avg_bits_err_output": 0.12075763561575073,
    "avg_bits_err_improve": 39.229906466422875,
    "time": 36389.1865234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (/ (/ (- b) a) (/ a b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.618058391079979,
    "avg_bits_err_output": 0.0011981203125901445,
    "avg_bits_err_improve": 14.616860270767388,
    "time": 7162.537353515625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (fma (fma (* (sin delta) (cos phi1)) (cos theta) (* (cos delta) (sin phi1))) (- (sin phi1)) (cos delta))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.15662077084698975,
    "avg_bits_err_output": 0.15483513394026,
    "avg_bits_err_improve": 0.001785636906729754,
    "time": 55595.398193359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) -5e-33) (/ (/ (- (fma b b (* c (* a -3.0))) (* b b)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* 3.0 a)) (/ (+ (- b) (sqrt (pow (pow (fma c (* 3.0 a) (* b b)) 3.0) 0.3333333333333333))) (* 3.0 a)))",
    "output_parens": 33,
    "avg_bits_err_input": 52.47411886526256,
    "avg_bits_err_output": 50.04591352289325,
    "avg_bits_err_improve": 2.42820534236931,
    "time": 55417.47021484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.58994764020808,
    "avg_bits_err_output": 0.4477208672068821,
    "avg_bits_err_improve": 28.142226773001198,
    "time": 47872.10693359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ c (- (- b) (sqrt (fma b b (* c (* a -3.0))))))",
    "output_parens": 7,
    "avg_bits_err_input": 44.01911326624868,
    "avg_bits_err_output": 0.16185620312590143,
    "avg_bits_err_improve": 43.85725706312278,
    "time": 47692.33447265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (* 3.0 a) -4e-254) (/ -1.0 (* 3.0 (/ a (- b (hypot b (* (sqrt (* a -3.0)) (sqrt (fabs c)))))))) (if (<= (* 3.0 a) 5e+160) (/ (- (hypot (sqrt (fabs (* (* 3.0 a) c))) b) b) (* 3.0 a)) (/ (- (hypot (* (sqrt (* -3.0 c)) (sqrt a)) b) b) (* 3.0 a))))",
    "output_parens": 32,
    "avg_bits_err_input": 34.031625337564016,
    "avg_bits_err_output": 19.631550568038755,
    "avg_bits_err_improve": 14.400074769525261,
    "time": 49947.3203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (cos lambda1) (- (sin lambda2)) (* (sin lambda1) (cos lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (fma (sin lambda2) (sin lambda1) (* (cos lambda1) (cos lambda2))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.194486882436959,
    "avg_bits_err_output": 0.175807871245243,
    "avg_bits_err_improve": 13.018679011191715,
    "time": 47825.7783203125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (- 1.0 (+ x (- (/ (- -1.0 x) x) (* x (/ (+ 1.0 x) x))))) (* (/ (+ 1.0 x) x) (- 1.0 x)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.358130577874952,
    "avg_bits_err_output": 25.36623889879051,
    "avg_bits_err_improve": 3.9918916790844428,
    "time": 48167.671142578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.011875,
    "avg_bits_err_improve": 0,
    "time": 12643.841064453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.85230374844709,
    "avg_bits_err_output": 0.074375,
    "avg_bits_err_improve": 14.77792874844709,
    "time": 50536.027099609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1e-310) (/ (* (sqrt (* (* F (+ A (- C (hypot B (- A C))))) 2.0)) (- (sqrt (fma B B (* (* A C) -4.0))))) (- (* B B) (* (* A C) 4.0))) (/ (* (sqrt (* (fma (* C -4.0) A (* B B)) (+ C (- A (hypot B (- A C)))))) (sqrt (* F 2.0))) (- (* (* A C) 4.0) (* B B))))",
    "output_parens": 37,
    "avg_bits_err_input": 52.566082583251784,
    "avg_bits_err_output": 44.914995525181745,
    "avg_bits_err_improve": 7.65108705807004,
    "time": 55026.60546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(/ 180.0 (/ PI (atan (/ (- (- C A) (hypot B (- A C))) B))))",
    "output_parens": 8,
    "avg_bits_err_input": 29.75221806948308,
    "avg_bits_err_output": 13.94327515407697,
    "avg_bits_err_improve": 15.808942915406112,
    "time": 32660.78955078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (* 2.0 (+ C (+ A (hypot B (- A C)))))) (/ (- F) (* (sqrt F) (pow (fma B B (* A (* C -4.0))) -0.5)))) (+ (* B B) (* -4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (/ (* (/ F (/ (sqrt (* F (fma B B (* A (* C -4.0))))) (fma B B (* A (* C -4.0))))) (- (sqrt (* 2.0 (+ C (+ A (hypot B (- A C)))))))) (+ (* B B) (* -4.0 (* A C)))) (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (/ (- (sqrt F)) (hypot B (sqrt (* A (* C -4.0))))))))",
    "output_parens": 103,
    "avg_bits_err_input": 52.30050522129833,
    "avg_bits_err_output": 35.10565995930098,
    "avg_bits_err_improve": 17.19484526199735,
    "time": 51289.491455078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt (/ 0.5 a)) (cbrt (/ 1.0 g)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.34486327965288,
    "avg_bits_err_output": 0.8424052618408924,
    "avg_bits_err_improve": 14.502458017811989,
    "time": 21061.328369140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (* (cbrt (/ 0.5 a)) (cbrt (- (hypot g h) g))) (/ (cbrt (+ g (hypot g h))) (cbrt (* a -2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 35.23042539824691,
    "avg_bits_err_output": 2.7391645459889027,
    "avg_bits_err_improve": 32.49126085225801,
    "time": 26508.061767578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9899345875079336,
    "avg_bits_err_output": 0.032738534379146665,
    "avg_bits_err_improve": 0.957196053128787,
    "time": 20857.8955078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- a (log1p (+ (exp a) (expm1 b)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.7018656015629509,
    "avg_bits_err_output": 0.6277094256203688,
    "avg_bits_err_improve": 0.07415617594258206,
    "time": 8788.09716796875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+306) (* (/ a1 b1) (/ a2 b2)) (if (or (<= (/ (* a1 a2) (* b1 b2)) -1e-308) (and (not (<= (/ (* a1 a2) (* b1 b2)) 0.0)) (<= (/ (* a1 a2) (* b1 b2)) 4e+296))) (/ (* a1 a2) (* b1 b2)) (/ (/ a2 b1) (/ b2 a1))))",
    "output_parens": 30,
    "avg_bits_err_input": 11.147461439121788,
    "avg_bits_err_output": 1.9547893648063448,
    "avg_bits_err_improve": 9.192672074315443,
    "time": 16796.401123046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.44698812628009865,
    "avg_bits_err_output": 0.3915935241061987,
    "avg_bits_err_improve": 0.055394602173899965,
    "time": 9160.2880859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -10.0) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.36214296657906,
    "avg_bits_err_output": 0.021703156527718363,
    "avg_bits_err_improve": 53.340439810051336,
    "time": 13045.843505859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.716441266604496,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.716441266604496,
    "time": 1773.489990234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (/ (- 1.0 x) (+ 1.0 x)) (sqrt (/ (- 1.0 x) (+ 1.0 x))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.010875,
    "avg_bits_err_output": 0.00875,
    "avg_bits_err_improve": 0.0021249999999999984,
    "time": 6381.7421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1239.6083984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (+ (+ 3.0 (/ 2.0 (* r r))) (/ (* 0.125 (- -3.0 (* -2.0 v))) (/ (/ (- 1.0 v) (* r w)) (* r w)))) -4.5)",
    "output_parens": 14,
    "avg_bits_err_input": 13.010359042811723,
    "avg_bits_err_output": 0.34042498813225236,
    "avg_bits_err_improve": 12.669934054679471,
    "time": 40605.203857421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (+ -2.0 (+ 2.0 (fma (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0)) -6.0))))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 39,
    "avg_bits_err_input": 0.5076809803471464,
    "avg_bits_err_output": 0.3065464102231808,
    "avg_bits_err_improve": 0.20113457012396557,
    "time": 90791.54931640625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.241386591681053,
    "avg_bits_err_output": 1.3898562614877825,
    "avg_bits_err_improve": 16.85153033019327,
    "time": 17600.254150390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(+ (* 0.954929658551372 x) (* (pow x 3.0) -0.12900613773279798))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2251156015629507,
    "avg_bits_err_output": 0.20058755496476763,
    "avg_bits_err_improve": 0.024528046598183084,
    "time": 23065.014892578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003948120312590144,
    "avg_bits_err_output": 0.003948120312590144,
    "avg_bits_err_improve": 0,
    "time": 4365.80810546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ PI (+ b a)) (* a (* b 2.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.104115558514566,
    "avg_bits_err_output": 0.24146973750504788,
    "avg_bits_err_improve": 13.862645821009519,
    "time": 47096.40625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0))) (* (+ (/ 1.0 eps) -1.0) (/ 1.0 (- (exp (fma eps x x)))))) 2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 29.48144291384505,
    "avg_bits_err_output": 29.505709081462754,
    "avg_bits_err_improve": -0.024266167617703616,
    "time": 47327.0712890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.01225,
    "avg_bits_err_output": 0.005625,
    "avg_bits_err_improve": 0.006625000000000001,
    "time": 10693.716796875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (fma (/ 2.0 (+ 1.0 t)) (+ (/ 2.0 (+ 1.0 t)) -4.0) 5.0) (fma (/ 2.0 (+ 1.0 t)) (+ (/ 2.0 (+ 1.0 t)) -4.0) 6.0))",
    "output_parens": 13,
    "avg_bits_err_input": 0.0155,
    "avg_bits_err_output": 0.009615601562950724,
    "avg_bits_err_improve": 0.005884398437049276,
    "time": 36481.70556640625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.07075,
    "avg_bits_err_output": 0.07075,
    "avg_bits_err_improve": 0,
    "time": 31616.702392578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3540.2177734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 4169.017822265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4250.230712890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.814598372922784,
    "avg_bits_err_output": 0.25275,
    "avg_bits_err_improve": 7.5618483729227846,
    "time": 27797.654052734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.403162216803511,
    "avg_bits_err_output": 7.403162216803511,
    "avg_bits_err_improve": 0,
    "time": 25791.22705078125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (+ eps (* x 2.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 16.029201965016785,
    "avg_bits_err_output": 0.01275,
    "avg_bits_err_improve": 16.016451965016785,
    "time": 13685.85595703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (* x 0.125)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.552710306718202,
    "avg_bits_err_output": 0.34384473750504824,
    "avg_bits_err_improve": 3.208865569213154,
    "time": 24656.989013671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.791668553750958,
    "avg_bits_err_output": 0.019349248439933908,
    "avg_bits_err_improve": 14.772319305311024,
    "time": 15182.462646484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.593630075264166,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.593630075264166,
    "time": 4250.3369140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.00222041175863,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 39.00134541175863,
    "time": 5996.135009765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.290875,
    "avg_bits_err_improve": 63.709125,
    "time": 56749.46630859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.8432554647147,
    "avg_bits_err_output": 0.4082409781302287,
    "avg_bits_err_improve": 61.43501448658447,
    "time": 14085.111572265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -1.22e-135) (/ (/ (/ (* a (* c -4.0)) a) -2.0) (- (hypot b (sqrt (* a (* c -4.0)))) b)) (if (<= b 3.1e-251) (/ (/ (+ b (hypot b (* (* c -4.0) (sqrt (/ a (* c -4.0)))))) a) -2.0) (if (<= b 1.5e+141) (/ (- (- b) (sqrt (+ (* b b) (* -4.0 (* a c))))) (* a 2.0)) (/ (/ (+ b (hypot b (pow (* (* a c) (* (* a c) 16.0)) 0.25))) a) -2.0))))",
    "output_parens": 43,
    "avg_bits_err_input": 34.516884818183726,
    "avg_bits_err_output": 22.32727322234968,
    "avg_bits_err_improve": 12.189611595834045,
    "time": 39397.849365234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ 0.5 (/ a (- (hypot (* (sqrt (* a -4.0)) (sqrt c)) b) b))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-21) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (/ 0.5 (* (+ b (hypot (sqrt (* a (* c -4.0))) b)) (/ a (fma a (* c -4.0) (- (* b b) (* b b)))))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+185) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 86,
    "avg_bits_err_input": 33.99914084391831,
    "avg_bits_err_output": 22.339769465763027,
    "avg_bits_err_improve": 11.659371378155285,
    "time": 44010.33740234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2081.534423828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.88220275472192,
    "avg_bits_err_output": 0.018375,
    "avg_bits_err_improve": 39.86382775472192,
    "time": 7646.2109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(* (/ (- x y) (hypot x y)) (/ (+ x y) (hypot x y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.660100310055522,
    "avg_bits_err_output": 0.03841785781763824,
    "avg_bits_err_improve": 20.621682452237884,
    "time": 15146.362060546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.675222906064817,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.675222906064817,
    "time": 20584.292724609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.039625,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.03875,
    "time": 7744.6083984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(fma (+ a b) b (* a (+ a b)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.022073120312590146,
    "avg_bits_err_output": 0.010875,
    "avg_bits_err_improve": 0.011198120312590147,
    "time": 20968.202880859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (fma x x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.01275,
    "avg_bits_err_output": 0.013375,
    "avg_bits_err_improve": -0.0006250000000000006,
    "time": 6977.20751953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0,
    "time": 1313.873046875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ c b) (+ d a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40046033906799905,
    "avg_bits_err_output": 0.23675,
    "avg_bits_err_improve": 0.16371033906799906,
    "time": 16390.6044921875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.882990703357898,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 29.8764907033579,
    "time": 16887.21435546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.225150136310525,
    "avg_bits_err_output": 0.296875,
    "avg_bits_err_improve": 23.928275136310525,
    "time": 17012.474609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (fma (* (- (tan x)) (pow (cos x) 1.5)) (pow (cos x) 1.5) (* x (pow (cos x) 2.0))) (* (tan x) (pow (cos x) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 30.003921320546326,
    "avg_bits_err_output": 30.02676068564828,
    "avg_bits_err_improve": -0.022839365101955167,
    "time": 41453.81884765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007573120312590144,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.006448120312590144,
    "time": 2264.88427734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 2e-10) (* 100.0 (/ (- (* n (pow (+ 1.0 (/ i n)) n)) n) i)) (* n (/ (+ (* 100.0 (pow (exp n) (log1p (/ i n)))) -100.0) i))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.94633672975809,
    "avg_bits_err_output": 10.494691926586915,
    "avg_bits_err_improve": 37.45164480317117,
    "time": 32210.58447265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(/ (+ (* (/ d (hypot d c)) b) (* (/ c (hypot d c)) a)) (hypot d c))",
    "output_parens": 9,
    "avg_bits_err_input": 26.152970838189805,
    "avg_bits_err_output": 0.5569627317166884,
    "avg_bits_err_improve": 25.596008106473118,
    "time": 25342.427001953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (or (<= (/ (- (* b c) (* d a)) (+ (* c c) (* d d))) (- INFINITY)) (not (<= (/ (- (* b c) (* d a)) (+ (* c c) (* d d))) -2e+187))) (/ (- (* c (/ b (hypot c d))) (* d (/ a (hypot c d)))) (hypot c d)) (/ (- (* b c) (* d a)) (+ (* c c) (* d d))))",
    "output_parens": 36,
    "avg_bits_err_input": 26.438523611620948,
    "avg_bits_err_output": 0.8849549276742225,
    "avg_bits_err_improve": 25.553568683946725,
    "time": 28189.847412109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(fma ux (+ maxCos -1.0) 1.0)",
    "output_parens": 2,
    "avg_bits_err_input": 0.033125,
    "avg_bits_err_output": 0.017778602336311983,
    "avg_bits_err_improve": 0.015346397663688019,
    "time": 18323.2041015625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (* (pow (/ 1.0 (fma ux (+ ux (fma ux maxCos 1.0)) (pow (fma ux maxCos 1.0) 2.0))) 4.0) (pow (- (pow (fma ux maxCos 1.0) 3.0) (pow ux 3.0)) 4.0)) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)))) 2.0) (/ (/ (pow (- (fma ux maxCos 1.0) ux) 12.0) (+ (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) (pow (- (fma ux maxCos 1.0) ux) 4.0))) (+ (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) (/ (pow (- (fma ux maxCos 1.0) ux) 12.0) (pow (- (fma ux maxCos 1.0) ux) 8.0))))) (+ (/ 1.0 (+ (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) (pow (- (fma ux maxCos 1.0) ux) 4.0))) (/ (pow (- (fma ux maxCos 1.0) ux) 6.0) (+ (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)) (pow (- (fma ux maxCos 1.0) ux) 4.0)))))))",
    "output_parens": 74,
    "avg_bits_err_input": 13.686185619014726,
    "avg_bits_err_output": 12.041363312170407,
    "avg_bits_err_improve": 1.6448223068443184,
    "time": 148299.74536132812,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* uy (* 2.0 PI))) (sqrt (+ (pow (cbrt (* ux (- (fma ux maxCos 1.0) ux))) 3.0) (+ 1.0 (* (fma ux maxCos (- 1.0 ux)) (- -1.0 (* ux maxCos)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 13.724063613141345,
    "avg_bits_err_output": 11.37338761731318,
    "avg_bits_err_improve": 2.3506759958281656,
    "time": 65002.027099609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) yi))) (* (* (- 1.0 ux) maxCos) (* ux zi)))",
    "output_parens": 33,
    "avg_bits_err_input": 0.3372387253491264,
    "avg_bits_err_output": 0.3312569840529071,
    "avg_bits_err_improve": 0.005981741296219312,
    "time": 72317.31274414062,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (/ 1.0 (+ 1.0 (pow (/ (* (tan (* PI (+ 0.5 (* 2.0 u1)))) alphay) alphax) 2.0))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* u1 (* PI 2.0)) (* PI 0.5)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* u1 (* PI 2.0)) (* PI 0.5))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 40,
    "avg_bits_err_input": 0.20894844765789308,
    "avg_bits_err_output": 0.20237744375108171,
    "avg_bits_err_improve": 0.006571003906811368,
    "time": 43667.441162109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (/ u1 (- 1.0 (* u1 u1))) (* u1 (/ u1 (- 1.0 (* u1 u1)))))) (sin (* 6.28318530718 u2)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.5538096882505927,
    "avg_bits_err_output": 0.5484625482009607,
    "avg_bits_err_improve": 0.005347140049631993,
    "time": 27966.659912109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (/ 0.15915494309188485 (/ 0.02533029591058111 u2))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3207886334593113,
    "avg_bits_err_output": 0.3371051885633718,
    "avg_bits_err_improve": -0.016316555104060493,
    "time": 26757.778564453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ (- 1.0 u) (+ 1.0 (exp (* PI (/ 1.0 s))))))) -1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.3318218683702057,
    "avg_bits_err_output": 0.3339468683702057,
    "avg_bits_err_improve": -0.002124999999999988,
    "time": 28225.378662109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05961664007037485,
    "avg_bits_err_output": 0.04498718490214106,
    "avg_bits_err_improve": 0.014629455168233788,
    "time": 18785.8447265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ 1.0 s) (+ 2.0 (* 2.0 (expm1 (log1p (cosh (/ (fabs x) s)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.12713487757054245,
    "avg_bits_err_output": 0.16773174425654575,
    "avg_bits_err_improve": -0.04059686668600329,
    "time": 26590.86328125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6635499846456265,
    "avg_bits_err_output": 0.6635499846456265,
    "avg_bits_err_improve": 0,
    "time": 31025.947265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (pow E (/ -2.0 v)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.161460654199401,
    "avg_bits_err_output": 0.16399965292926258,
    "avg_bits_err_improve": -0.0025389987298615746,
    "time": 32352.160400390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ sinTheta_O (/ (hypot 1.0 sinTheta_O) sinTheta_O))) eta))) (asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.5778873774689015,
    "avg_bits_err_output": 0.39905813849187133,
    "avg_bits_err_improve": 2.17882923897703,
    "time": 39518.169189453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* (exp (/ (* sinTheta_O (- sinTheta_i)) v)) (* (/ cosTheta_i v) cosTheta_O)) (/ (* (sinh (/ 1.0 v)) 2.0) (/ 1.0 v)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.45413552700512566,
    "avg_bits_err_output": 0.39185150933976715,
    "avg_bits_err_improve": 0.062284017665358515,
    "time": 38546.898193359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(fma (/ 0.5 (/ v (exp (+ (* 0.6666666666666666 (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v)) 0.4620666666666667)))) (cbrt (exp (fma (/ 1.0 v) (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) 0.6931))) 0.0)",
    "output_parens": 18,
    "avg_bits_err_input": 0.11152254660054957,
    "avg_bits_err_output": 0.09224874333232813,
    "avg_bits_err_improve": 0.019273803268221437,
    "time": 30026.4833984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (* 2.0 (log (cbrt (pow alpha (* PI 3.0))))) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.4718355008318359,
    "avg_bits_err_output": 0.361977481397608,
    "avg_bits_err_improve": 0.1098580194342279,
    "time": 42817.0927734375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3317612159065804,
    "avg_bits_err_output": 0.55776070792253,
    "avg_bits_err_improve": 0.7740005079840504,
    "time": 37735.657958984375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.37033347220054,
    "avg_bits_err_output": 0.201875,
    "avg_bits_err_improve": 12.168458472200541,
    "time": 22025.400390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (* 0.75 (exp (/ (- r) (* s 3.0)))) (* (* s PI) (* r 6.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1504416214531113,
    "avg_bits_err_output": 0.15719015239214765,
    "avg_bits_err_improve": -0.006748530939036351,
    "time": 67154.34790039062,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* n1_i (/ (sin (* u normAngle)) (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9471200880812249,
    "avg_bits_err_output": 0.7545636517820109,
    "avg_bits_err_improve": 0.19255643629921404,
    "time": 36908.7421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (/ (* (pow PI -0.16666666666666666) (sqrt (- 1.0 (+ cosTheta cosTheta)))) cosTheta) (cbrt PI)) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.7033159359408594,
    "avg_bits_err_output": 0.4333744055065872,
    "avg_bits_err_improve": 0.2699415304342722,
    "time": 25649.815673828125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI (expm1 (log1p u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.689376373062071,
    "avg_bits_err_output": 0.538490647577915,
    "avg_bits_err_improve": 13.150885725484157,
    "time": 23376.051025390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (pow (pow (log1p (- u1)) 2.0) 0.25) (cos (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.735547786346128,
    "avg_bits_err_output": 0.30728373805768905,
    "avg_bits_err_improve": 13.428264048288439,
    "time": 25524.5029296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* alpha (- alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 13.959537248136943,
    "avg_bits_err_output": 0.3176274437510817,
    "avg_bits_err_improve": 13.641909804385861,
    "time": 20439.440185546875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (- (log1p (- u0))) (/ (* alphay (* alphay alphax)) (fma alphay (* alphay (/ cos2phi alphax)) (* alphax sin2phi))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.729088581998798,
    "avg_bits_err_output": 0.49365947284285766,
    "avg_bits_err_improve": 12.235429109155941,
    "time": 26273.187744140625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ 1.0 F) (* F (/ 1.0 (tan (* PI l))))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.981408703704858,
    "avg_bits_err_output": 12.710710101501872,
    "avg_bits_err_improve": 4.270698602202986,
    "time": 35400.635986328125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2161770831999919,
    "avg_bits_err_output": 0.15398836132445107,
    "avg_bits_err_improve": 0.06218872187554084,
    "time": 22956.7109375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (* F (/ (pow (fma x 2.0 (fma F F 2.0)) -0.5) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.600603606515639,
    "avg_bits_err_output": 10.354051630373476,
    "avg_bits_err_improve": 3.246551976142163,
    "time": 36013.734130859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (/ (log (tanh (* PI (* f 0.25)))) PI) 4.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.35017041931623,
    "avg_bits_err_output": 0.7313776239977345,
    "avg_bits_err_improve": 60.61879279531849,
    "time": 50072.944091796875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (or (<= t -9.5e+62) (and (not (<= t -9e-71)) (or (<= t 1.1e+28) (not (<= t 2.85e+112))))) (/ (* t (sqrt 2.0)) (hypot l (/ (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x -1.0) (+ x 1.0)))))) (/ (* t (sqrt 2.0)) (sqrt (- (* (+ x 1.0) (* (/ 2.0 (+ x -1.0)) (* t t))) (* l (+ l (* l (/ (- -1.0 x) (+ x -1.0)))))))))",
    "output_parens": 39,
    "avg_bits_err_input": 43.45845029640257,
    "avg_bits_err_output": 19.59771983371046,
    "avg_bits_err_improve": 23.860730462692107,
    "time": 47231.699951171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.052084893928113,
    "avg_bits_err_output": 0.21656165469173658,
    "avg_bits_err_improve": 3.8355232392363763,
    "time": 26598.936767578125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 1.0803795705210955,
    "avg_bits_err_output": 0.013528555837104548,
    "avg_bits_err_improve": 1.066851014683991,
    "time": 11581.573974609375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (/ 1.0 (pow (- 1.0 (/ (/ Om Omc) (/ Omc Om))) -0.5)) (hypot 1.0 (* (/ t l) (sqrt 2.0)))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.079392923555607,
    "avg_bits_err_output": 1.0512913063877383,
    "avg_bits_err_improve": 9.02810161716787,
    "time": 29548.957275390625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -8.8e-88) (sqrt (+ (* (* (/ l Om) (+ (* (- U* U) (* n (/ l Om))) (* l -2.0))) (* 2.0 (* n U))) (* (* 2.0 (* n U)) t))) (if (<= n 9.5e-244) (sqrt (- (* (* 2.0 (* n U)) t) (/ l (/ (- Om) (* U (* (fma l -2.0 (* (- U* U) (/ (* n l) Om))) (* n 2.0))))))) (* (sqrt n) (sqrt (* (fma (/ l Om) (fma l -2.0 (* n (* (/ l Om) (- U* U)))) t) (* U 2.0))))))",
    "output_parens": 48,
    "avg_bits_err_input": 34.06067149106098,
    "avg_bits_err_output": 25.516836165749215,
    "avg_bits_err_improve": 8.543835325311765,
    "time": 51688.8837890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -2.1e+38) (not (<= t 35.0))) (/ (/ (/ (* 2.0 l) k) k) (* t (* (sin k) (/ (tan k) l)))) (/ (/ l k) (* (* k (* t 0.5)) (/ (sin k) (/ l (tan k))))))",
    "output_parens": 23,
    "avg_bits_err_input": 47.43296114968898,
    "avg_bits_err_output": 1.6253013192019328,
    "avg_bits_err_improve": 45.80765983048705,
    "time": 82870.79272460938,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(* (/ 2.0 (* t (tan k))) (/ (/ l t) (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ t l)))))",
    "output_parens": 13,
    "avg_bits_err_input": 32.220085978087475,
    "avg_bits_err_output": 12.875396205858193,
    "avg_bits_err_improve": 19.34468977222928,
    "time": 70501.90087890625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (* (pow 2.0 -0.5) (fma a2 a2 (* a1 a1))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5379875968971776,
    "avg_bits_err_output": 0.4858573328277354,
    "avg_bits_err_improve": 0.052130264069442156,
    "time": 25378.739013671875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (sqrt (* PI (* 2.0 n))) (pow (* PI (* 2.0 n)) (* k -0.5))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5094101744730215,
    "avg_bits_err_output": 0.4222151849179941,
    "avg_bits_err_improve": 0.08719498955502741,
    "time": 26508.17626953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (sinh l) (* (* 2.0 J) (cos (* 0.5 K)))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.457157721169843,
    "avg_bits_err_output": 0.1193539628874018,
    "avg_bits_err_improve": 17.33780375828244,
    "time": 26544.189453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (pow (cbrt (- (* (+ m n) (* K 0.5)) M)) 3.0)) (exp (- (- (fabs (- n m)) l) (pow (- (/ (+ m n) 2.0) M) 2.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 15.580029875800928,
    "avg_bits_err_output": 15.555933890920178,
    "avg_bits_err_improve": 0.024095984880750265,
    "time": 44170.58447265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.476386842188134,
    "avg_bits_err_output": 8.41451184218813,
    "avg_bits_err_improve": 10.061875000000004,
    "time": 39079.81005859375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (or (<= (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) 5e-112) (not (<= (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) INFINITY))) (* w0 (sqrt (+ 1.0 (* (* (/ M 2.0) (/ D d)) (/ (* h (* (/ D d) (* M -0.5))) l))))) (* w0 (sqrt (- 1.0 (/ (* h (pow (* (/ M d) (* D 0.5)) 2.0)) l)))))",
    "output_parens": 44,
    "avg_bits_err_input": 13.652115268102541,
    "avg_bits_err_output": 9.183401642018689,
    "avg_bits_err_improve": 4.4687136260838525,
    "time": 44486.97021484375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (* (sqrt (- A)) (/ (/ c0 (sqrt (- V))) (sqrt l))) (if (<= (* V l) -4e-303) (* c0 (* (sqrt (- A)) (sqrt (/ -1.0 (* V l))))) (if (<= (* V l) 0.0) (/ (/ c0 (sqrt (/ (- l) A))) (sqrt (- V))) (* c0 (* (pow (* V l) -0.5) (sqrt A))))))",
    "output_parens": 37,
    "avg_bits_err_input": 19.48360003408157,
    "avg_bits_err_output": 6.275587298039149,
    "avg_bits_err_improve": 13.20801273604242,
    "time": 36848.69482421875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* D D) 5e-105) (log (pow (exp (* (/ c0 w) (* 0.5 M))) (/ M (- (* (pow (/ d D) 2.0) (/ c0 (* w h))) (hypot M (* (pow (/ d D) 2.0) (/ c0 (* w h)))))))) (if (<= (* D D) 1e-55) (* (/ c0 (* w 2.0)) (fma (sqrt (fma (* (/ d w) (/ d h)) (* c0 (pow D -2.0)) M)) (sqrt (- (* (* (/ d w) (/ d h)) (* c0 (pow D -2.0))) M)) (* (* (/ d w) (/ d h)) (* c0 (pow D -2.0))))) (if (<= (* D D) 5e+227) (log (pow (exp (* (/ c0 w) (* 0.5 M))) (/ M (- (* (pow (/ d D) 2.0) (/ c0 (* w h))) (hypot M (* (pow (/ d D) 2.0) (/ c0 (* w h)))))))) (* (/ c0 (* w 2.0)) (+ (* (pow (/ d D) 2.0) (/ c0 (* w h))) (sqrt (- (pow (* (pow (/ d D) 2.0) (/ c0 (* w h))) 2.0) (* M M))))))))",
    "output_parens": 90,
    "avg_bits_err_input": 59.29148434905495,
    "avg_bits_err_output": 33.441455188922404,
    "avg_bits_err_improve": 25.850029160132543,
    "time": 103452.10571289062,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) -2e-235) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (pow (/ (/ (* 0.5 (* M D)) (sqrt (* l (/ 2.0 h)))) d) 2.0))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 0.0) (fabs (* (/ d (sqrt (* h l))) (- 1.0 (* (* 0.25 (pow (* M (/ D d)) 2.0)) (* 0.5 (/ h l)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 5e+210) (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) (* (/ (fabs d) (sqrt (* h l))) (+ 1.0 (/ -0.125 (* (/ d h) (* (* d l) (pow (* M D) -2.0)))))))))",
    "output_parens": 103,
    "avg_bits_err_input": 26.562177345692803,
    "avg_bits_err_output": 13.962639528258752,
    "avg_bits_err_improve": 12.59953781743405,
    "time": 128993.5556640625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (+ 0.25 (/ -0.25 (fma x x 1.0))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 13,
    "avg_bits_err_input": 15.733607877400226,
    "avg_bits_err_output": 15.229133450485566,
    "avg_bits_err_improve": 0.5044744269146602,
    "time": 64226.311279296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9838443609377705,
    "avg_bits_err_output": 0.010198120312590144,
    "avg_bits_err_improve": 0.9736462406251803,
    "time": 7182.11279296875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma (* v v) -5.0 1.0) (* PI (* (sqrt (fma v (* v -6.0) 2.0)) (- 1.0 (* v v))))) t)",
    "output_parens": 11,
    "avg_bits_err_input": 0.44108909742812363,
    "avg_bits_err_output": 0.11469116562662261,
    "avg_bits_err_improve": 0.326397931801501,
    "time": 18278.903564453125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (- 1.0 (* v v)) (sqrt (+ 2.0 (* (* v v) -6.0)))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.012344360937770431,
    "avg_bits_err_output": 0.009448120312590146,
    "avg_bits_err_improve": 0.0028962406251802856,
    "time": 18469.84375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(exp (log (acos (/ (fma (* v v) -5.0 1.0) (fma v v -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.6181967939153886,
    "avg_bits_err_output": 0.618136288347051,
    "avg_bits_err_improve": 6.050556833758769e-05,
    "time": 38162.958740234375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (- (/ -1.0 a) (* k (/ (+ k 10.0) a))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.015190885762199,
    "avg_bits_err_output": 0.2908837585533772,
    "avg_bits_err_improve": 1.724307127208822,
    "time": 17048.70751953125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017331650391671637,
    "avg_bits_err_output": 0.017331650391671637,
    "avg_bits_err_improve": 0,
    "time": 8710.809326171875,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18633289531691705,
    "avg_bits_err_output": 0.01801428593921275,
    "avg_bits_err_improve": 0.1683186093777043,
    "time": 15928.8193359375,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18874838106592987,
    "avg_bits_err_output": 0.026844971475516673,
    "avg_bits_err_improve": 0.1619034095904132,
    "time": 14583.08447265625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.1823877602212981,
    "avg_bits_err_output": 0.028334753464839112,
    "avg_bits_err_improve": 0.154053006756459,
    "time": 33277.60009765625,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (hypot (* p 2.0) x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 13.219543623686569,
    "avg_bits_err_output": 13.212431020924823,
    "avg_bits_err_improve": 0.0071126027617456344,
    "time": 21089.298095703125,
    "seed": 6,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(pow (/ -1.0 (- -1.0 (exp x))) -0.5)",
    "output_parens": 4,
    "avg_bits_err_input": 41.179015890162,
    "avg_bits_err_output": 0.024375,
    "avg_bits_err_improve": 41.154640890162,
    "time": 16885.694580078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -5e-8) (/ 1.0 (/ (- (tan x) x) (- (sin x) x))) (if (<= x 1e-130) (/ (- (/ (pow (sin x) 2.0) (+ x (sin x))) (* x (/ x (+ x (sin x))))) (/ (+ x (* (* x x) (/ -1.0 (tan x)))) (* x (/ 1.0 (tan x))))) (if (<= x 1e-23) (/ (- (/ (* (pow (sin x) 2.0) (fma x x (* (sin x) (- (sin x) x)))) (+ (pow x 3.0) (pow (sin x) 3.0))) (* x (/ x (+ x (sin x))))) (/ (+ x (* (* x x) (/ -1.0 (tan x)))) (* x (/ 1.0 (tan x))))) (- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x))))))",
    "output_parens": 68,
    "avg_bits_err_input": 31.90397771703424,
    "avg_bits_err_output": 14.811343285951935,
    "avg_bits_err_improve": 17.092634431082306,
    "time": 44551.8857421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (or (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- INFINITY)) (and (not (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) -2e-197)) (or (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (not (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 1e+271))))) (/ c (- (- b_2) (hypot b_2 (pow (pow (* a c) 2.0) 0.25)))) (- (/ (sqrt (- (* b_2 b_2) (* a c))) a) (/ b_2 a)))",
    "output_parens": 49,
    "avg_bits_err_input": 34.14185691002886,
    "avg_bits_err_output": 16.83385104466257,
    "avg_bits_err_improve": 17.308005865366287,
    "time": 32669.857666015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -4e+165) (/ c (- (hypot b_2 (sqrt (* c a))) b_2)) (if (<= b_2 1.26e-146) (/ c (- (sqrt (- (* b_2 b_2) (* c a))) b_2)) (/ (- (- (/ (fma a c (* a (- c c))) (sqrt (- (* b_2 b_2) (* c a)))) (/ b_2 (/ (sqrt (- (* b_2 b_2) (* c a))) b_2))) b_2) a)))",
    "output_parens": 32,
    "avg_bits_err_input": 33.84744890084061,
    "avg_bits_err_output": 18.077764138226872,
    "avg_bits_err_improve": 15.769684762613739,
    "time": 24321.686767578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (* (tan (* x 0.5)) (/ (sin x) x)) x)",
    "output_parens": 6,
    "avg_bits_err_input": 32.20379012175142,
    "avg_bits_err_output": 0.1201890984428186,
    "avg_bits_err_improve": 32.083601023308596,
    "time": 22203.67236328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (sqrt (pow (+ x 1.0) (/ 2.0 n))) (pow x (/ 1.0 n)))",
    "output_parens": 7,
    "avg_bits_err_input": 33.25467620735367,
    "avg_bits_err_output": 33.28131002972408,
    "avg_bits_err_improve": -0.026633822370413895,
    "time": 46614.84716796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.486007637322597,
    "avg_bits_err_output": 0.01425,
    "avg_bits_err_improve": 29.471757637322597,
    "time": 30115.580810546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 x) (- -1.0 x))",
    "output_parens": 3,
    "avg_bits_err_input": 14.542454852721805,
    "avg_bits_err_output": 0.073875,
    "avg_bits_err_improve": 14.468579852721806,
    "time": 15128.601318359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (sin x) (- (sin eps)) (* (cos x) (* (sin eps) (- (tan (/ eps 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 39.236232941011416,
    "avg_bits_err_output": 0.30323226380345825,
    "avg_bits_err_improve": 38.93300067720796,
    "time": 33294.61865234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (<= x -1.35e-48) (/ (- (+ x 1.0) x) (+ (pow (cbrt (+ x 1.0)) 2.0) (+ (pow (cbrt x) 2.0) (* (cbrt (+ x 1.0)) (cbrt x))))) (/ (* (/ (+ 1.0 (- x x)) (fma (sqrt (/ x (cbrt x))) (+ (cbrt x) (/ (- -1.0 x) (- (pow (exp 0.6666666666666666) (log1p x))))) (pow (exp 0.6666666666666666) (log1p x)))) (+ (/ (+ x 1.0) (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (pow (exp 0.6666666666666666) (log1p x)))) (/ x (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (pow (exp 0.6666666666666666) (log1p x)))))) (+ (/ (+ x 1.0) (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (pow (exp 0.6666666666666666) (log1p x)))) (/ x (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (pow (exp 0.6666666666666666) (log1p x)))))))",
    "output_parens": 80,
    "avg_bits_err_input": 29.8676301540041,
    "avg_bits_err_output": 14.584693952752172,
    "avg_bits_err_improve": 15.282936201251928,
    "time": 56568.41650390625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.61912989970838,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 30.61900489970838,
    "time": 11322.048828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -3.15e+100) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 1.55e+42) (/ (- (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* -4.0 a)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 33.96605243463104,
    "avg_bits_err_output": 24.95787390184168,
    "avg_bits_err_improve": 9.008178532789358,
    "time": 37211.1376953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -2e-212) (* -0.5 (/ (+ b (sqrt (fma a (* c -4.0) (* b b)))) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (* -0.5 (/ (/ (fma a (* c -4.0) 0.0) (- (sqrt (fma a (* c -4.0) (* b b))) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 4e+297) (* -0.5 (+ (/ (sqrt (fma a (* c -4.0) (* b b))) a) (/ b a))) (* -0.5 (/ (+ b (hypot (* (sqrt (sqrt c)) (sqrt (* (sqrt c) (* a -4.0)))) b)) a))))))",
    "output_parens": 89,
    "avg_bits_err_input": 34.06103919246469,
    "avg_bits_err_output": 18.07708025132496,
    "avg_bits_err_improve": 15.98395894113973,
    "time": 42802.17041015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.468757477423495,
    "avg_bits_err_output": 0.019834962500721157,
    "avg_bits_err_improve": 61.44892251492277,
    "time": 11535.76025390625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (- (log1p n) (log n)) (/ (* (+ (pow (exp (pow (pow (cbrt (cbrt (* 4.0 (log (log1p n))))) 3.0) 2.0)) (cbrt (* 4.0 (log (log1p n))))) -1.0) (/ 1.0 (+ (log1p n) 1.0))) (+ 1.0 (pow (log1p n) 2.0))))",
    "output_parens": 26,
    "avg_bits_err_input": 63.005613431672735,
    "avg_bits_err_output": 44.214348698617904,
    "avg_bits_err_improve": 18.79126473305483,
    "time": 38833.942626953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.46515362392268,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 58.45702862392268,
    "time": 8871.9228515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (/ (- 1.0 (pow (/ x (tan x)) 4.0)) (+ 1.0 (pow (/ x (tan x)) 2.0))) (+ 1.0 (/ x (tan x)))) x)",
    "output_parens": 14,
    "avg_bits_err_input": 59.88804697047933,
    "avg_bits_err_output": 59.86800144508339,
    "avg_bits_err_improve": 0.020045525395943287,
    "time": 35324.041015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ a b)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.36918945083786,
    "avg_bits_err_output": 29.325408765296658,
    "avg_bits_err_improve": 31.0437806855412,
    "time": 34895.579345703125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.51891809206283,
    "avg_bits_err_output": 0.008875,
    "avg_bits_err_improve": 41.51004309206283,
    "time": 12455.342529296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.58823761586692,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.58736261586692,
    "time": 2802.43505859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.314059832286034,
    "avg_bits_err_output": 0.020062931983547826,
    "avg_bits_err_improve": 29.293996900302485,
    "time": 13137.58203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (/ (fma (* (pow (exp x) 3.0) (pow (+ (exp x) -2.0) 6.0)) (- -2.0 (exp x)) (* (fma (pow (exp x) 2.0) (pow (+ (exp x) -2.0) 4.0) 0.0) (- 4.0 (pow (exp x) 2.0)))) (* (- -2.0 (exp x)) (fma (pow (exp x) 2.0) (pow (+ (exp x) -2.0) 4.0) 0.0))) (* (exp x) (+ (exp x) -2.0)))",
    "output_parens": 34,
    "avg_bits_err_input": 29.562467002314683,
    "avg_bits_err_output": 29.493751668273926,
    "avg_bits_err_improve": 0.06871533404075691,
    "time": 43025.822998046875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma (/ (fma -2.0 (+ x -1.0) x) (+ x -1.0)) (+ x 1.0) x) (* x (+ x 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 9.608333295066489,
    "avg_bits_err_output": 9.577632845433046,
    "avg_bits_err_improve": 0.030700449633442872,
    "time": 60203.254638671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(fma (/ (tan x) (- 1.0 (* (tan x) (tan eps)))) (* (tan x) (tan eps)) (/ (tan eps) (- 1.0 (* (tan x) (tan eps)))))",
    "output_parens": 16,
    "avg_bits_err_input": 36.840457708542395,
    "avg_bits_err_output": 0.2229241518725115,
    "avg_bits_err_improve": 36.61753355666988,
    "time": 41614.097412109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.04240395230425,
    "avg_bits_err_output": 0.13406860937770432,
    "avg_bits_err_improve": 29.90833534292655,
    "time": 22778.0009765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (* (sin eps) (tan (/ (- eps) 2.0))) (* (sin eps) (cos x)))",
    "output_parens": 10,
    "avg_bits_err_input": 37.05896402966488,
    "avg_bits_err_output": 0.21134862132097398,
    "avg_bits_err_improve": 36.847615408343906,
    "time": 27763.368896484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (sqrt (+ x 1.0)) (* x (pow x -1.5)))))",
    "output_parens": 9,
    "avg_bits_err_input": 20.026034465467962,
    "avg_bits_err_output": 0.1252103390679989,
    "avg_bits_err_improve": 19.900824126399964,
    "time": 20665.185302734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(pow (pow (atan2 1.0 (+ 1.0 (fma N N N))) -0.5) -2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 14.991472377652421,
    "avg_bits_err_output": 0.38550902811779486,
    "avg_bits_err_improve": 14.605963349534626,
    "time": 11843.9658203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.174707168965995,
    "avg_bits_err_output": 1.2664966232126014,
    "avg_bits_err_improve": 28.908210545753395,
    "time": 26495.766357421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (+ (/ (- m (* m m)) v) -1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07847755746635404,
    "avg_bits_err_output": 0.07858131684117375,
    "avg_bits_err_improve": -0.00010375937481971187,
    "time": 23499.630126953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (* a (- b)))",
    "output_parens": 4,
    "avg_bits_err_input": 15.852117248422408,
    "avg_bits_err_output": 0.29742481250360575,
    "avg_bits_err_improve": 15.554692435918803,
    "time": 17852.757568359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (fma (cos (+ (* PI (* angle 0.005555555555555556)) 1.0)) (cos 1.0) (* (sin 1.0) (sin (+ (* PI (* angle 0.005555555555555556)) 1.0))))) 2.0) (pow (* b (sin (/ angle (/ 180.0 PI)))) 2.0))",
    "output_parens": 20,
    "avg_bits_err_input": 19.82264113287219,
    "avg_bits_err_output": 19.779590402336005,
    "avg_bits_err_improve": 0.04305073053618358,
    "time": 52376.680908203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* PI (* angle 0.011111111111111112))) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 31.069179065568253,
    "avg_bits_err_output": 21.033449758296005,
    "avg_bits_err_improve": 10.035729307272248,
    "time": 43076.46142578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (expm1 (log1p (sin (* PI (* angle 0.005555555555555556)))))) 2.0) (pow (* b (cos (/ angle (/ 180.0 PI)))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.27522524694481,
    "avg_bits_err_output": 20.254342159782578,
    "avg_bits_err_improve": 0.020883087162232528,
    "time": 56960.2333984375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (/ (* m (- 1.0 m)) v) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.17585416639998386,
    "avg_bits_err_output": 0.17585416639998386,
    "avg_bits_err_improve": 0,
    "time": 22034.48779296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32912410109759316,
    "avg_bits_err_output": 0.3237888249507136,
    "avg_bits_err_improve": 0.005335276146879564,
    "time": 37201.00439453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.14231372187554087,
    "avg_bits_err_output": 0.143761842188131,
    "avg_bits_err_improve": -0.0014481203125901454,
    "time": 22870.531005859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (+ (* (cos phi1) (* (* (cos lambda1) (cos lambda2)) (cos phi2))) (* (cos phi1) (* (cos phi2) (* (sin lambda1) (sin lambda2))))))) R)",
    "output_parens": 20,
    "avg_bits_err_input": 16.90002975143135,
    "avg_bits_err_output": 3.8326061444226838,
    "avg_bits_err_improve": 13.067423607008667,
    "time": 42125.642822265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-26) (* (/ (- (fma c (* a -4.0) (* b b)) (* b b)) 2.0) (/ (/ 1.0 (+ b (sqrt (fma c (* a -4.0) (* b b))))) a)) (* (+ (- b) (pow (pow (fma c (* a -4.0) (* b b)) 1.5) 0.3333333333333333)) (/ 0.5 a)))",
    "output_parens": 33,
    "avg_bits_err_input": 52.823534972120875,
    "avg_bits_err_output": 50.29524064056108,
    "avg_bits_err_improve": 2.528294331559792,
    "time": 55355.86865234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fma c (* a -4.0) (- (* b b) (* b b))) a) (/ (/ 1.0 (+ b (sqrt (+ (* b b) (* c (* a -4.0)))))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 28.784753414520114,
    "avg_bits_err_output": 0.44738590470616135,
    "avg_bits_err_improve": 28.33736750981395,
    "time": 44733.526611328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (fma (pow b 4.5) (pow b 4.5) (/ (- (pow (fma b b (* (* a c) -4.0)) 9.0)) (pow (fma b b (* (* a c) -4.0)) 4.5)))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (pow b 6.0) (+ (pow (fma b b (* a (* c -4.0))) 3.0) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0))))) (/ -0.5 a))",
    "output_parens": 40,
    "avg_bits_err_input": 44.354955677005634,
    "avg_bits_err_output": 41.10249388916978,
    "avg_bits_err_improve": 3.2524617878358555,
    "time": 101126.16772460938,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -3.15e+100) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 1.55e+42) (/ (- (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* -4.0 a)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 33.9724835388945,
    "avg_bits_err_output": 24.95787390184168,
    "avg_bits_err_improve": 9.014609637052821,
    "time": 34176.859619140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (fma (sin (- lambda2)) (cos lambda1) (* (cos lambda2) (sin lambda1)))) (+ (cos phi1) (* (cos phi2) (fma (cos lambda2) (cos lambda1) (* (sin lambda1) (sin lambda2)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.9316221955006693,
    "avg_bits_err_output": 0.22523405889070514,
    "avg_bits_err_improve": 0.7063881366099641,
    "time": 40754.478515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (+ (/ 512.0 (pow (* (pow (+ 1.0 (pow (exp -2.0) x)) 3.0) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x)))))) 3.0)) (/ -1.0 (pow (fma 4.0 (pow (+ 1.0 (exp (* (log (pow (exp -2.0) (* x 0.5))) 2.0))) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x))))) 3.0))) (fma (* (pow (/ -2.0 (- -1.0 (pow (exp -2.0) x))) 3.0) (pow (/ 1.0 (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x)))))) 2.0)) (pow (/ -2.0 (- -1.0 (pow (exp -2.0) x))) 3.0) (fma (pow (/ -2.0 (- -1.0 (pow (exp -2.0) x))) 3.0) (pow (/ 1.0 (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x)))))) 2.0) (pow (/ 1.0 (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x)))))) 2.0))))",
    "output_parens": 89,
    "avg_bits_err_input": 29.48928923050382,
    "avg_bits_err_output": 29.477128840586168,
    "avg_bits_err_improve": 0.012160389917653447,
    "time": 60801.09130859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.10358578893647,
    "avg_bits_err_output": 0.014875,
    "avg_bits_err_improve": 58.08871078893647,
    "time": 18295.133056640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.02302317436167,
    "avg_bits_err_output": 0.008,
    "avg_bits_err_improve": 58.015023174361666,
    "time": 5670.2880859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.008240601562950723,
    "avg_bits_err_output": 0.00725,
    "avg_bits_err_improve": 0.0009906015629507223,
    "time": 8707.94873046875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(if (<= (+ x (sqrt (+ -1.0 (* x x)))) 10000000000000.0) (log (+ x (sqrt (+ (* x (+ x 1.0)) (- -1.0 x))))) (log (+ x (+ x 1.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 32.161125,
    "avg_bits_err_output": 0.06251415237664344,
    "avg_bits_err_improve": 32.098610847623355,
    "time": 11793.62841796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.456263283840364,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 58.448138283840365,
    "time": 10101.135498046875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.04375,
    "avg_bits_err_output": 0.04375,
    "avg_bits_err_improve": 0,
    "time": 3593.584228515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1302712406251803,
    "avg_bits_err_output": 0.1302712406251803,
    "avg_bits_err_improve": 0,
    "time": 35355.096435546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* ew (* (cos t) (pow (/ 1.0 (cbrt (hypot 1.0 (* eh (/ (tan t) ew))))) 3.0))) (* eh (* (sin t) (sin (atan (/ (- eh) (/ ew (tan t)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.12832312031259016,
    "avg_bits_err_output": 0.14162157831048094,
    "avg_bits_err_improve": -0.013298457997890784,
    "time": 37816.389892578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (- (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))) (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 39.37138127544293,
    "avg_bits_err_output": 0.12800165493992013,
    "avg_bits_err_improve": 39.243379620503006,
    "time": 33609.291259765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 14.283674373791138,
    "avg_bits_err_output": 0.0024058425748116436,
    "avg_bits_err_improve": 14.281268531216327,
    "time": 7352.818115234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (expm1 (log1p (- (cos delta) (* (sin phi1) (fma (sin phi1) (cos delta) (* (sin delta) (* (cos phi1) (cos theta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.13904330086437403,
    "avg_bits_err_output": 0.1455872011108297,
    "avg_bits_err_improve": -0.006543900246455681,
    "time": 54197.23681640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) -2e-31) (* (/ (/ (- (pow b 9.0) (pow (fma b b (* a (* c -3.0))) 4.5)) (+ (pow (fma b b (* a (* c -3.0))) 3.0) (+ (pow b 6.0) (pow (* b (sqrt (fma b b (* a (* c -3.0))))) 3.0)))) (fma b (+ b (sqrt (fma b b (* a (* c -3.0))))) (fma b b (* a (* c -3.0))))) (/ -0.3333333333333333 a)) (/ (fma (pow (fma b b (* c (* a -3.0))) 0.16666666666666666) (cbrt (fma b b (* c (* a -3.0)))) (- b)) (* 3.0 a)))",
    "output_parens": 54,
    "avg_bits_err_input": 52.84631070773147,
    "avg_bits_err_output": 50.245677496418246,
    "avg_bits_err_improve": 2.600633211313223,
    "time": 50459.251708984375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.85335407011293,
    "avg_bits_err_output": 0.444916574226277,
    "avg_bits_err_improve": 28.408437495886652,
    "time": 45558.44775390625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (fma (* a -3.0) c (- (* b b) (* b b))) (+ b (sqrt (fma a (* -3.0 c) (* b b))))) (* a 3.0))",
    "output_parens": 13,
    "avg_bits_err_input": 44.42040056330815,
    "avg_bits_err_output": 0.40765254302465587,
    "avg_bits_err_improve": 44.012748020283496,
    "time": 50130.263427734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (* 3.0 a) -4e-205) (/ -1.0 (* 3.0 (/ a (- b (hypot b (* (sqrt (* a -3.0)) (sqrt (fabs c)))))))) (/ -1.0 (* 3.0 (/ a (- b (hypot b (sqrt (fabs (* (* 3.0 a) c)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 34.013366455742556,
    "avg_bits_err_output": 20.528687632052602,
    "avg_bits_err_improve": 13.484678823689954,
    "time": 42181.92529296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (+ (* (* (cos phi2) (sin phi1)) (* (cos lambda2) (cos lambda1))) (* (cos phi2) (* (sin phi1) (* (sin lambda1) (sin lambda2)))))))",
    "output_parens": 29,
    "avg_bits_err_input": 13.70846327050992,
    "avg_bits_err_output": 0.17898293456311876,
    "avg_bits_err_improve": 13.529480335946802,
    "time": 46832.715087890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ (- (/ (+ x -1.0) (/ (+ x 1.0) x)) x) -1.0) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 29.027332819947535,
    "avg_bits_err_output": 25.112191815245726,
    "avg_bits_err_improve": 3.915141004701809,
    "time": 47935.544677734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ (+ x -1.0) (/ (+ x 1.0) x)) (* (+ x -1.0) (/ (+ x 1.0) x)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": -0.00037500000000000033,
    "time": 7568.211181640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (+ -1.0 x)) (- -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.619113870524966,
    "avg_bits_err_output": 0.077375,
    "avg_bits_err_improve": 14.541738870524966,
    "time": 24293.60986328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (* 2.0 (* F (+ C (- A (hypot B (- A C))))))) (- (sqrt (fma (* A C) -4.0 (* B B))))) (+ (* B B) (* (* A C) -4.0))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (/ (* (sqrt (* 2.0 F)) (- (sqrt (* (fma C (* A -4.0) (* B B)) (- (+ A C) (hypot B (- A C))))))) (+ (* B B) (* (* A C) -4.0))) (/ (- (sqrt (* 2.0 (* F (- (+ A C) (hypot B (- A C))))))) (hypot B (pow (pow (* (* A C) -4.0) 2.0) 0.25)))))",
    "output_parens": 96,
    "avg_bits_err_input": 52.557777024598984,
    "avg_bits_err_output": 37.6812510850062,
    "avg_bits_err_improve": 14.876525939592781,
    "time": 59021.77001953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(/ (* (atan (/ (- (- C A) (hypot (- C A) B)) B)) 180.0) PI)",
    "output_parens": 8,
    "avg_bits_err_input": 29.85365437021454,
    "avg_bits_err_output": 13.855559097490401,
    "avg_bits_err_improve": 15.998095272724138,
    "time": 36602.08251953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F 1.8e-282) (/ (* (sqrt (+ A (+ C (hypot B (- A C))))) (- (sqrt (* 2.0 (+ (* B (* F B)) (* F (* A (* C -4.0)))))))) (+ (* B B) (* -4.0 (* A C)))) (if (<= F 6.2e+131) (/ (* (sqrt (* F (+ C (+ A (hypot B (- A C)))))) (sqrt (* 2.0 (fma A (* C -4.0) (* B B))))) (- (* C (* A 4.0)) (* B B))) (/ (* (sqrt (* (+ A (+ C (hypot B (- A C)))) (fma A (* C -4.0) (* B B)))) (sqrt (* F 2.0))) (- (* C (* A 4.0)) (* B B)))))",
    "output_parens": 58,
    "avg_bits_err_input": 52.76154166964942,
    "avg_bits_err_output": 43.10287618740777,
    "avg_bits_err_improve": 9.658665482241645,
    "time": 46104.878173828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt (/ 1.0 a)) (cbrt (/ 2.0 g)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.391838770633505,
    "avg_bits_err_output": 0.8552127843367251,
    "avg_bits_err_improve": 14.53662598629678,
    "time": 28056.802734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (/ (cbrt (/ 1.0 (/ 1.0 (- (hypot g h) g)))) (cbrt (* a 2.0))) (/ (cbrt (+ g (hypot g h))) (cbrt (* a -2.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 35.81750611425101,
    "avg_bits_err_output": 3.0576504054596145,
    "avg_bits_err_improve": 32.7598557087914,
    "time": 34613.70654296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9924015046946224,
    "avg_bits_err_output": 0.0328116546917368,
    "avg_bits_err_improve": 0.9595898500028857,
    "time": 26004.923828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- (log1p (exp (- b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.931125,
    "avg_bits_err_output": 0.007702717138876148,
    "avg_bits_err_improve": 0.9234222828611238,
    "time": 10928.24365234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ a1 (* b1 (/ b2 a2))) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-308) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ a2 (* b1 (/ b2 a1))) (if (<= (/ (* a1 a2) (* b1 b2)) INFINITY) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b1) (/ a2 b2))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.28370955146603,
    "avg_bits_err_output": 4.482236631464532,
    "avg_bits_err_improve": 6.8014729200014985,
    "time": 12700.5322265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5119730148866263,
    "avg_bits_err_output": 0.479625,
    "avg_bits_err_improve": 0.03234801488662625,
    "time": 10516.953369140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -50000.0) (- (log (- (hypot 1.0 x) x))) (log1p (* x (+ 1.0 (/ x (+ 1.0 (hypot 1.0 x)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 52.99372040857784,
    "avg_bits_err_output": 0.07568790305281768,
    "avg_bits_err_improve": 52.91803250552503,
    "time": 22360.56787109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.684403591105956,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.684403591105956,
    "time": 3190.953369140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (/ (- 1.0 x) (+ 1.0 x)) (sqrt (/ (- 1.0 x) (+ 1.0 x))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 0.00375,
    "time": 7133.51220703125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1489.422119140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (* (* r w) (* r w)) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 12.565362110838905,
    "avg_bits_err_output": 0.23930263282196484,
    "avg_bits_err_improve": 12.32605947801694,
    "time": 43830.203369140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (fma (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 1.0 (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.5180940075640867,
    "avg_bits_err_output": 0.30988874944914585,
    "avg_bits_err_improve": 0.2082052581149409,
    "time": 103991.9404296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.25644350928271,
    "avg_bits_err_output": 1.2335927553006822,
    "avg_bits_err_improve": 17.022850753982027,
    "time": 14203.422119140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(+ (* 0.954929658551372 x) (/ -0.12900613773279798 (pow x -3.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.22679248125036058,
    "avg_bits_err_output": 0.17526840061561777,
    "avg_bits_err_improve": 0.051524080634742814,
    "time": 21684.82080078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002625,
    "avg_bits_err_output": 0.002625,
    "avg_bits_err_improve": 0,
    "time": 2282.371337890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI 0.5) (+ b a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 14.54698531867687,
    "avg_bits_err_output": 0.23525977500432674,
    "avg_bits_err_improve": 14.311725543672543,
    "time": 62334.12158203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (* (+ (/ 1.0 eps) -1.0) (exp (* x (- -1.0 eps))))) 2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 28.848695455601533,
    "avg_bits_err_output": 28.848695455601533,
    "avg_bits_err_improve": 0,
    "time": 45397.887939453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (/ (* (- 4.0 (/ (/ (/ 4.0 (+ 1.0 t)) t) (+ 1.0 (/ 1.0 t)))) (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t))))) (+ 2.0 (/ 2.0 (+ 1.0 t)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.004125,
    "avg_bits_err_output": 0.052125,
    "avg_bits_err_improve": -0.048,
    "time": 38202.390625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))) (+ 2.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.0085,
    "avg_bits_err_output": 0.008375,
    "avg_bits_err_improve": 0.0001250000000000001,
    "time": 19082.388671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.046573120312590144,
    "avg_bits_err_output": 0.07919812031259015,
    "avg_bits_err_improve": -0.032625,
    "time": 9380.19873046875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 2997.668701171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3817.24462890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4376.4384765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.868468556723507,
    "avg_bits_err_output": 0.2465,
    "avg_bits_err_improve": 7.621968556723507,
    "time": 17748.37548828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.2546251846211645,
    "avg_bits_err_output": 7.2546251846211645,
    "avg_bits_err_improve": 0,
    "time": 23364.759765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(fma (* x 2.0) eps (* eps eps))",
    "output_parens": 3,
    "avg_bits_err_input": 15.755211617548808,
    "avg_bits_err_output": 0.00791524101186092,
    "avg_bits_err_improve": 15.747296376536946,
    "time": 10798.7265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.532546884364404,
    "avg_bits_err_output": 0.40218703125901495,
    "avg_bits_err_improve": 3.130359853105389,
    "time": 28442.101806640625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.344769544218986,
    "avg_bits_err_output": 0.0167124062518029,
    "avg_bits_err_improve": 15.328057137967184,
    "time": 13613.0146484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.849550129934634,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.849550129934634,
    "time": 5352.032470703125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.14092750219331,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.140427502193305,
    "time": 3726.181396484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(/ (+ (fma 1.7e+308 t -1.7e+308) (* (/ 1.0 (+ -1.7e+308 (* 1.7e+308 t))) 0.0)) (* (/ 1.0 (fma 1.7e+308 t -1.7e+308)) (/ 1.0 (/ 1.0 (fma 1.7e+308 t -1.7e+308)))))",
    "output_parens": 13,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.30725,
    "avg_bits_err_improve": 63.69275,
    "time": 69716.232421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84325466514815,
    "avg_bits_err_output": 0.31968872187554087,
    "avg_bits_err_improve": 61.52356594327261,
    "time": 10905.68798828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -2e-212) (* -0.5 (/ (+ b (sqrt (fma a (* c -4.0) (* b b)))) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (* -0.5 (/ (/ (fma a (* c -4.0) 0.0) (- (sqrt (fma a (* c -4.0) (* b b))) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 4e+297) (* -0.5 (+ (/ (sqrt (fma a (* c -4.0) (* b b))) a) (/ b a))) (* -0.5 (/ (+ b (hypot (* (sqrt (sqrt c)) (sqrt (* (sqrt c) (* a -4.0)))) b)) a))))))",
    "output_parens": 89,
    "avg_bits_err_input": 34.06103919246469,
    "avg_bits_err_output": 18.07708025132496,
    "avg_bits_err_improve": 15.98395894113973,
    "time": 44502.4541015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -3.15e+100) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 1.55e+42) (/ (- (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* -4.0 a)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 33.9724835388945,
    "avg_bits_err_output": 24.95787390184168,
    "avg_bits_err_improve": 9.014609637052821,
    "time": 35827.89990234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2395.21875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.804810527354064,
    "avg_bits_err_output": 0.011875,
    "avg_bits_err_improve": 39.79293552735406,
    "time": 3259.218505859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (+ x y) (* (hypot x y) (/ (hypot x y) (- x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 20.48084172065822,
    "avg_bits_err_output": 0.03377161719245796,
    "avg_bits_err_improve": 20.447070103465762,
    "time": 25579.278564453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6571481356869886,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6571481356869886,
    "time": 15125.65576171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ (+ b c) d))",
    "output_parens": 3,
    "avg_bits_err_input": 0.040125,
    "avg_bits_err_output": 0.040125,
    "avg_bits_err_improve": 0,
    "time": 3858.80615234375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ b (+ b a))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02239624062518029,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 0.011021240625180291,
    "time": 9184.69677734375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.01425,
    "avg_bits_err_output": 0.01425,
    "avg_bits_err_improve": 0,
    "time": 4103.8671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000875,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0,
    "time": 1458.467041015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ e (+ c (+ b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.41169605312878627,
    "avg_bits_err_output": 0.247375,
    "avg_bits_err_improve": 0.16432105312878625,
    "time": 12610.066650390625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.224150718920463,
    "avg_bits_err_output": 0.008,
    "avg_bits_err_improve": 30.216150718920463,
    "time": 7975.7275390625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.325377732130907,
    "avg_bits_err_output": 0.297,
    "avg_bits_err_improve": 24.028377732130906,
    "time": 16510.684814453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(exp (log (/ (- x (sin x)) (tan x))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.580091874103584,
    "avg_bits_err_output": 29.579934758490257,
    "avg_bits_err_improve": 0.0001571156133266527,
    "time": 47331.787109375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006573120312590144,
    "avg_bits_err_output": 0.001625,
    "avg_bits_err_improve": 0.004948120312590144,
    "time": 3360.674560546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.002) (* (/ n i) (+ (* 100.0 (pow (+ 1.0 (/ i n)) n)) -100.0)) (* n (/ (+ -100.0 (* 100.0 (pow (exp n) (log1p (/ i n))))) i))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.72965976414739,
    "avg_bits_err_output": 10.612142559757853,
    "avg_bits_err_improve": 37.11751720438954,
    "time": 30734.77783203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(* (/ -1.0 (hypot d c)) (+ (* (/ c (- (hypot d c))) a) (* (/ d (- (hypot d c))) b)))",
    "output_parens": 12,
    "avg_bits_err_input": 25.436088356440877,
    "avg_bits_err_output": 0.5766637857451922,
    "avg_bits_err_improve": 24.859424570695683,
    "time": 22578.125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 25.623499127443804,
    "avg_bits_err_output": 0.5483242917207672,
    "avg_bits_err_improve": 25.075174835723036,
    "time": 33284.5869140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (/ ux (/ 1.0 (- 1.0 maxCos))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.035,
    "avg_bits_err_output": 0.025148543607279805,
    "avg_bits_err_improve": 0.009851456392720198,
    "time": 14450.892333984375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- 1.0 (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 6.0))))) (+ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (pow (fma ux maxCos (- 1.0 ux)) 4.0)))))",
    "output_parens": 21,
    "avg_bits_err_input": 13.505415196103039,
    "avg_bits_err_output": 11.987282473581438,
    "avg_bits_err_improve": 1.5181327225216013,
    "time": 70632.3876953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* uy (* 2.0 PI))) (sqrt (+ (* ux (fma ux maxCos (- 1.0 ux))) (/ (/ (+ -1.0 (/ (pow (* (fma ux maxCos (- 1.0 ux)) (- -1.0 (* ux maxCos))) 12.0) (pow (* (fma ux maxCos (- 1.0 ux)) (- -1.0 (* ux maxCos))) 8.0))) (fma (fma ux maxCos (- 1.0 ux)) (fma ux (- maxCos) -1.0) -1.0)) (+ 1.0 (pow (* (fma ux maxCos (- 1.0 ux)) (fma ux (- maxCos) -1.0)) 2.0))))))",
    "output_parens": 37,
    "avg_bits_err_input": 13.548809366169355,
    "avg_bits_err_output": 11.274608320599818,
    "avg_bits_err_improve": 2.274201045569537,
    "time": 78496.72680664062,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (sin (* uy (* 2.0 PI))) (* (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos))))) yi))) (* (* (- 1.0 ux) maxCos) (* ux zi)))",
    "output_parens": 33,
    "avg_bits_err_input": 0.34026445899576524,
    "avg_bits_err_output": 0.332526326749198,
    "avg_bits_err_improve": 0.00773813224656722,
    "time": 62922.09228515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.20140481469338017,
    "avg_bits_err_output": 0.20115481469338017,
    "avg_bits_err_improve": 0.0002500000000000002,
    "time": 28470.45654296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.542935509015052,
    "avg_bits_err_output": 0.542935509015052,
    "avg_bits_err_improve": 0,
    "time": 21081.147705078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (/ u1 (- 1.0 (* u1 u1))) (* u1 (/ u1 (- 1.0 (* u1 u1)))))) (cos (* 6.28318530718 u2)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.32672121110921293,
    "avg_bits_err_output": 0.33879855223474226,
    "avg_bits_err_improve": -0.012077341125529328,
    "time": 31387.7451171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))) -1.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.32466646930498516,
    "avg_bits_err_output": 0.32427022867980493,
    "avg_bits_err_improve": 0.00039624062518023306,
    "time": 33638.792724609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.062307858716118235,
    "avg_bits_err_output": 0.04594906031780625,
    "avg_bits_err_improve": 0.01635879839831198,
    "time": 15777.4091796875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (* s (+ (exp (/ (fabs x) s)) (+ (exp (/ (fabs x) (- s))) 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.13040594065941177,
    "avg_bits_err_output": 0.11564025574310326,
    "avg_bits_err_improve": 0.014765684916308516,
    "time": 22573.939208984375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6827529928988721,
    "avg_bits_err_output": 0.6889228779478774,
    "avg_bits_err_improve": -0.006169885049005286,
    "time": 32795.0830078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.15776153656422884,
    "avg_bits_err_output": 0.15776153656422884,
    "avg_bits_err_improve": 0,
    "time": 34118.4111328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))) 4.999999918875795e-18) (asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))) (asin (sqrt (/ h (- (/ eta (/ h eta)) (/ sinTheta_O (* h (/ (sqrt (- 1.0 (* sinTheta_O sinTheta_O))) sinTheta_O))))))))",
    "output_parens": 34,
    "avg_bits_err_input": 2.668334903845633,
    "avg_bits_err_output": 1.3447293388892296,
    "avg_bits_err_improve": 1.3236055649564036,
    "time": 30166.479736328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_O (/ sinTheta_i v)))) (/ (* (/ 1.0 v) (* cosTheta_i (/ 0.5 v))) (sinh (/ 1.0 v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45579228081252515,
    "avg_bits_err_output": 0.3525833745086717,
    "avg_bits_err_improve": 0.10320890630385343,
    "time": 43025.662353515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (exp (+ (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (+ (/ -1.0 v) 0.6931))) (/ 0.5 v))",
    "output_parens": 10,
    "avg_bits_err_input": 0.10260851389960937,
    "avg_bits_err_output": 0.10215044473880319,
    "avg_bits_err_improve": 0.0004580691608061793,
    "time": 12535.337158203125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow alpha (* 2.0 PI))) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.46990039415795626,
    "avg_bits_err_output": 0.4356001334682059,
    "avg_bits_err_improve": 0.03430026068975034,
    "time": 47468.189697265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3279020321432367,
    "avg_bits_err_output": 0.5527127703434274,
    "avg_bits_err_improve": 0.7751892617998093,
    "time": 29363.65576171875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.385976548948085,
    "avg_bits_err_output": 0.208,
    "avg_bits_err_improve": 12.177976548948084,
    "time": 25780.2255859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (* 0.75 (exp (/ (/ r s) -3.0))) (* r (* s (* PI 6.0)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.1447449350722043,
    "avg_bits_err_output": 0.1426210014459915,
    "avg_bits_err_improve": 0.0021239336262127984,
    "time": 46892.921142578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9024449258931355,
    "avg_bits_err_output": 0.7350367202113511,
    "avg_bits_err_improve": 0.16740820568178438,
    "time": 36841.10986328125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (* (sqrt (- 1.0 (+ cosTheta cosTheta))) (/ (sqrt PI) (* cosTheta PI))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6945803313842076,
    "avg_bits_err_output": 0.4152684583788607,
    "avg_bits_err_improve": 0.2793118730053469,
    "time": 29342.608154296875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p u1) (log1p (* u1 (- u1))))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.570361051648597,
    "avg_bits_err_output": 0.5422393956589585,
    "avg_bits_err_improve": 13.028121655989638,
    "time": 24385.04833984375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (pow (pow (log1p (- u1)) 2.0) 0.25) (cos (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.617788886988382,
    "avg_bits_err_output": 0.320013222162971,
    "avg_bits_err_improve": 13.297775664825412,
    "time": 24322.646728515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* (- alpha) (log1p (- u0))))",
    "output_parens": 5,
    "avg_bits_err_input": 13.988949961053551,
    "avg_bits_err_output": 0.3352855265643931,
    "avg_bits_err_improve": 13.653664434489158,
    "time": 21437.286376953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ (/ cos2phi alphax) alphax) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.657846703115,
    "avg_bits_err_output": 0.504306510249692,
    "avg_bits_err_improve": 12.153540192865307,
    "time": 27856.458251953125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(+ (* PI l) (/ (/ -1.0 (/ F (tan (* PI l)))) F))",
    "output_parens": 7,
    "avg_bits_err_input": 16.51630223095017,
    "avg_bits_err_output": 12.163356971577302,
    "avg_bits_err_improve": 4.352945259372868,
    "time": 29445.70068359375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.210761842188131,
    "avg_bits_err_output": 0.15275,
    "avg_bits_err_improve": 0.05801184218813099,
    "time": 22300.181884765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.812547798383543,
    "avg_bits_err_output": 10.671786009403895,
    "avg_bits_err_improve": 3.1407617889796473,
    "time": 37243.600830078125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (log (cbrt (pow (/ (cosh (* PI (* 0.25 f))) (sinh (* PI (* 0.25 f)))) (/ 3.0 PI)))) -4.0)",
    "output_parens": 12,
    "avg_bits_err_input": 61.69592345952694,
    "avg_bits_err_output": 1.7877421377762517,
    "avg_bits_err_improve": 59.90818132175069,
    "time": 45144.24072265625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -2.45e-22) (/ (* t (sqrt 2.0)) (sqrt (+ (* (+ x 1.0) (* t (/ (* t -2.0) (- 1.0 x)))) (* l (- (/ l (/ (+ x -1.0) (+ x 1.0))) l))))) (if (<= t -5.2e-192) (/ (* t (sqrt 2.0)) (sqrt (fma t (/ (* -2.0 (fma x t t)) (- 1.0 x)) (* l (- (/ (* (+ x 1.0) l) (+ x -1.0)) l))))) (if (<= t 1.12e-162) (* t (/ (sqrt 2.0) (hypot (hypot l l) (sqrt (fma l l (/ (+ x 1.0) (/ (+ x -1.0) (fma 2.0 (* t t) (* l l))))))))) (if (<= t 3.45e-19) (/ (* t (sqrt 2.0)) (sqrt (fma t (/ (* -2.0 (fma x t t)) (- 1.0 x)) (* l (- (/ (* (+ x 1.0) l) (+ x -1.0)) l))))) (/ (* t (sqrt 2.0)) (pow (pow (+ (* (+ x 1.0) (* t (/ (* t -2.0) (- 1.0 x)))) (* l (- (/ l (/ (+ x -1.0) (+ x 1.0))) l))) 0.25) 2.0))))))",
    "output_parens": 87,
    "avg_bits_err_input": 42.855677604555986,
    "avg_bits_err_output": 35.25534908270699,
    "avg_bits_err_improve": 7.6003285218489935,
    "time": 53924.498046875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(/ (sin th) (/ (hypot (sin ky) (sin kx)) (sin ky)))",
    "output_parens": 7,
    "avg_bits_err_input": 3.8710282331018293,
    "avg_bits_err_output": 0.22440845938058876,
    "avg_bits_err_improve": 3.6466197737212407,
    "time": 23531.467041015625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(pow (pow (- 0.5 (/ -0.5 (hypot 1.0 (* l (/ 2.0 (/ Om (hypot (sin kx) (sin ky)))))))) 2.0) 0.25)",
    "output_parens": 11,
    "avg_bits_err_input": 1.0442544754655605,
    "avg_bits_err_output": 0.006,
    "avg_bits_err_improve": 1.0382544754655605,
    "time": 18152.9765625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (* t (/ (sqrt 2.0) l)))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.231380863159591,
    "avg_bits_err_output": 1.058254485262845,
    "avg_bits_err_improve": 9.173126377896747,
    "time": 30430.70849609375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= Om -2.3e+251) (* (sqrt (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t)) (sqrt (* 2.0 (* n U)))) (if (<= Om -8.6e+210) (* (sqrt (+ (* (* (/ l Om) (fma n (* (/ l Om) (- U* U)) (* l -2.0))) (* n 2.0)) (* t (* n 2.0)))) (sqrt U)) (if (<= Om -9.8e+179) (* (sqrt (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t)) (sqrt (* 2.0 (* n U)))) (if (<= Om -3.9e-128) (sqrt (* (* n 2.0) (+ (/ (* U (fma l -2.0 (/ (- U* U) (/ Om (* l n))))) (/ Om l)) (* U t)))) (if (<= Om 6.8e+43) (sqrt (+ (* 2.0 (* (fma l -2.0 (* (/ l Om) (* n (- U* U)))) (* U (* (/ l Om) n)))) (* 2.0 (* U (* n t))))) (if (<= Om 1.8e+122) (pow (cbrt (fma l (* n (* (/ (fma l -2.0 (* (- U* U) (* (/ l Om) n))) Om) (* U 2.0))) (* 2.0 (* n (* U t))))) 1.5) (if (<= Om 8e+199) (* (sqrt n) (sqrt (* 2.0 (* U (+ t (* (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)))))))) (if (<= Om 1.2e+240) (sqrt (+ (* 2.0 (* (fma l -2.0 (* (/ l Om) (* n (- U* U)))) (* U (* (/ l Om) n)))) (* 2.0 (* U (* n t))))) (if (<= Om 7e+274) (* (sqrt (+ (* (* (/ l Om) (fma n (* (/ l Om) (- U* U)) (* l -2.0))) (* n 2.0)) (* t (* n 2.0)))) (sqrt U)) (/ (* n 2.0) (* (/ (sqrt (* 2.0 (* n (* U (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t))))) U) (/ 1.0 (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t)))))))))))))",
    "output_parens": 166,
    "avg_bits_err_input": 34.9832577964157,
    "avg_bits_err_output": 32.36986277013544,
    "avg_bits_err_improve": 2.6133950262802585,
    "time": 61241.131103515625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -5.8e-68) (/ (/ 2.0 k) (/ (* (/ (sin k) l) (* t (tan k))) (/ l k))) (if (<= t 3.5e-71) (/ (/ (/ (* 2.0 (/ l (* k (tan k)))) t) k) (/ (sin k) l)) (if (<= t 5e+104) (/ (/ (/ l t) k) (* (* k 0.5) (* (tan k) (/ (sin k) l)))) (/ (/ 2.0 k) (/ (* (/ (sin k) l) (* t (tan k))) (/ l k))))))",
    "output_parens": 42,
    "avg_bits_err_input": 47.14853979378786,
    "avg_bits_err_output": 2.1975662914581893,
    "avg_bits_err_improve": 44.950973502329674,
    "time": 139573.1845703125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= k -1.45e+20) (not (<= k 9.2e-45))) (/ (/ 2.0 (* t (+ (pow (* (/ t l) (/ k t)) 2.0) (* 2.0 (pow (/ t l) 2.0))))) (* (sin k) (tan k))) (/ 2.0 (* (/ (sin k) (/ l t)) (* (* (/ t l) (tan k)) (* t (+ 2.0 (pow (/ k t) 2.0)))))))",
    "output_parens": 32,
    "avg_bits_err_input": 32.55534704050198,
    "avg_bits_err_output": 8.03786104006604,
    "avg_bits_err_improve": 24.517486000435937,
    "time": 78700.00170898438,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (* (cos th) (+ (* a2 a2) (* a1 a1))) (sqrt 2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.4899924843993411,
    "avg_bits_err_output": 0.43437161876694824,
    "avg_bits_err_improve": 0.05562086563239288,
    "time": 32606.497314453125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* k (pow (* PI (* 2.0 n)) k)) -0.5) (sqrt (* PI (* 2.0 n))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.48712105639185577,
    "avg_bits_err_output": 0.43195150710863245,
    "avg_bits_err_improve": 0.05516954928322332,
    "time": 27207.7548828125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (* (sinh l) (cos (* K 0.5))) 2.0) J) U)",
    "output_parens": 7,
    "avg_bits_err_input": 16.93383418685015,
    "avg_bits_err_output": 0.08609939715289865,
    "avg_bits_err_improve": 16.84773478969725,
    "time": 22795.49267578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 1.0) (/ (cos (- (* (+ m n) (* K (cbrt 0.125))) M)) (exp (+ (* (- (* (+ m n) 0.5) M) (- (* (+ m n) 0.5) M)) (- l (fabs (- m n)))))) (/ (cos (- (pow (* (+ m n) (/ (* K 0.5) (pow (* (+ m n) (* K 0.5)) 0.5))) 2.0) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (- l (fabs (- m n)))))))",
    "output_parens": 57,
    "avg_bits_err_input": 14.87102626627843,
    "avg_bits_err_output": 1.389349273630782,
    "avg_bits_err_improve": 13.481676992647648,
    "time": 51492.462890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.872313721875543,
    "avg_bits_err_output": 7.79393872187554,
    "avg_bits_err_improve": 10.078375000000003,
    "time": 38987.9638671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (+ 1.0 (/ (* h (* M (* (/ D d) -0.5))) (* (/ 2.0 (* M (/ D d))) l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 13.919590528764356,
    "avg_bits_err_output": 8.685062711411451,
    "avg_bits_err_improve": 5.234527817352905,
    "time": 41969.535888671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= V -5.8e+155) (* c0 (/ (sqrt (/ -1.0 V)) (sqrt (/ (- l) A)))) (if (<= V -47.0) (/ c0 (sqrt (/ (* V l) A))) (if (<= V -5e-310) (* c0 (* (/ (pow l -0.5) (sqrt (- V))) (sqrt (- A)))) (* c0 (/ (sqrt A) (* (sqrt l) (sqrt V)))))))",
    "output_parens": 31,
    "avg_bits_err_input": 19.01020085077524,
    "avg_bits_err_output": 9.69002440069871,
    "avg_bits_err_improve": 9.32017645007653,
    "time": 39044.82373046875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= D -2.6e-21) (* c0 (* (/ 0.5 w) (/ (* M M) (- (/ c0 (* (pow (/ d D) -2.0) (* w h))) (sqrt (- (pow (/ c0 (* (pow (/ d D) -2.0) (* w h))) 2.0) (* M M))))))) (if (<= D 8.5e-59) (log (pow (pow (pow (exp (/ M w)) M) 0.5) (/ c0 (- (/ (* (/ d h) (/ (* c0 d) w)) (* D D)) (hypot (/ (* (/ d h) (/ (* c0 d) w)) (* D D)) M))))) (if (<= D 6.6e+92) (* (/ 1.0 (/ (- (* (/ (/ d h) D) (/ (/ d (/ w c0)) D)) (hypot (* (/ (/ d h) D) (/ (/ d (/ w c0)) D)) M)) (* c0 (* 0.5 (* M M))))) (/ 1.0 w)) (* (/ c0 (* w 2.0)) (fma (sqrt (fma (/ c0 (* w h)) (* (/ d D) (/ d D)) M)) (sqrt (fma (/ c0 (* w h)) (* (/ d D) (/ d D)) (- M))) (* (/ c0 (* w h)) (* (/ d D) (/ d D))))))))",
    "output_parens": 93,
    "avg_bits_err_input": 59.29488111332215,
    "avg_bits_err_output": 32.658378632715895,
    "avg_bits_err_improve": 26.636502480606254,
    "time": 135332.42797851562,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= h -7.8e-95) (* (* (sqrt (/ d h)) (/ (sqrt (- d)) (sqrt (- l)))) (+ 1.0 (/ (* (/ M (/ d D)) (* h -0.125)) (* l (/ d (* M D)))))) (if (<= h -1.95e-146) (/ (- (fma (pow (* D (/ M d)) 2.0) (* (/ h l) -0.125) 1.0)) (/ (sqrt (* h l)) d)) (if (<= h -5.8e-224) (* (* (/ (sqrt (- d)) (sqrt (- l))) (/ d (* h (sqrt (/ d h))))) (+ 1.0 (* (/ (* M (* D 0.5)) l) (* (/ (* M D) d) (* (/ h d) -0.25))))) (if (<= h -5e-312) (* d (* (fma (* (/ h l) -0.125) (pow (/ (* M D) d) 2.0) 1.0) (- (pow (* h l) -0.5)))) (if (<= h 5e-158) (/ (/ (* d (fma (* D (/ 0.25 (* (/ d h) (/ d M)))) (* (* M (/ D l)) -0.5) 1.0)) (sqrt l)) (sqrt h)) (if (<= h 3.6e+61) (* (/ d (sqrt (* h l))) (+ 1.0 (/ (* 0.5 (* h (* D (* M -0.25)))) (* d (* d (/ l (* M D))))))) (* (/ d (* (sqrt l) (sqrt h))) (+ 1.0 (* (* 0.5 (/ M (/ l D))) (* (/ h d) (* D (/ (* M -0.25) d))))))))))))",
    "output_parens": 116,
    "avg_bits_err_input": 26.725104960433168,
    "avg_bits_err_output": 16.359382640566363,
    "avg_bits_err_improve": 10.365722319866805,
    "time": 104660.31396484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (+ (+ 0.125 (* 0.25 (/ 0.5 (hypot 1.0 x)))) (* (+ 0.5 (/ 0.5 (hypot 1.0 x))) (/ -0.25 (fma x x 1.0)))) (* (+ 0.5 (/ 0.5 (hypot 1.0 x))) (+ 0.5 (/ 0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 25,
    "avg_bits_err_input": 15.265705062211147,
    "avg_bits_err_output": 14.760068812795884,
    "avg_bits_err_improve": 0.5056362494152626,
    "time": 79640.06005859375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9835490396778473,
    "avg_bits_err_output": 0.013453669577509953,
    "avg_bits_err_improve": 0.9700953701003374,
    "time": 5512.462890625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (- 1.0 (* v v)))) (* t (sqrt (fma (* v v) -6.0 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.44247189432537193,
    "avg_bits_err_output": 0.2867260180720049,
    "avg_bits_err_improve": 0.15574587625336705,
    "time": 27927.40185546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (+ 1.0 (* (* v v) -3.0)))) (- 1.0 (* v v)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.013216520928207924,
    "avg_bits_err_output": 0.013216520928207924,
    "avg_bits_err_improve": 0,
    "time": 3477.733642578125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(exp (log (acos (/ (fma (* v v) -5.0 1.0) (fma v v -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5169218506131418,
    "avg_bits_err_output": 0.5171434477165154,
    "avg_bits_err_improve": -0.0002215971033736608,
    "time": 32016.470703125,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (* k (/ (- -10.0 k) a))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.0931415881287134,
    "avg_bits_err_output": 0.258689520580631,
    "avg_bits_err_improve": 1.8344520675480824,
    "time": 19447.546875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (pow E (/ (+ Vef (- (+ Ev EAccept) mu)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.015361468716510129,
    "avg_bits_err_output": 0.01622598976765969,
    "avg_bits_err_improve": -0.0008645210511495603,
    "time": 8813.540771484375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.17933914418249194,
    "avg_bits_err_output": 0.012737965065970292,
    "avg_bits_err_improve": 0.16660117911652164,
    "time": 7598.86083984375,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18458191605492125,
    "avg_bits_err_output": 0.022979518276934754,
    "avg_bits_err_improve": 0.1616023977779865,
    "time": 9878.609619140625,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18646520187983545,
    "avg_bits_err_output": 0.025929675315442477,
    "avg_bits_err_improve": 0.16053552656439296,
    "time": 16281.832763671875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ (/ x (hypot x (* 2.0 p))) 1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 13.173163709861829,
    "avg_bits_err_output": 13.167210502807713,
    "avg_bits_err_improve": 0.00595320705411595,
    "time": 19671.22607421875,
    "seed": 7,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(hypot 1.0 (exp (* 0.5 x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.89116367628887,
    "avg_bits_err_output": 0.006875,
    "avg_bits_err_improve": 40.88428867628887,
    "time": 8523.45849609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -2e-308) (/ (- (sin x) x) (fma (pow (cbrt (tan x)) 2.0) (cbrt (tan x)) (- x))) (if (<= x 4.2e-8) (/ (fma (sqrt (sin x)) (sqrt (sin x)) (- x)) (fma (pow (cbrt (tan x)) 2.0) (cbrt (tan x)) (- x))) (/ (- x (sin x)) (- x (tan x)))))",
    "output_parens": 33,
    "avg_bits_err_input": 31.729140590893675,
    "avg_bits_err_output": 29.665273752920385,
    "avg_bits_err_improve": 2.06386683797329,
    "time": 48768.635986328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- INFINITY)) (/ (- (hypot b_2 (* (sqrt (- a)) (sqrt c))) b_2) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) -2e-301) (/ (fabs (- b_2 (sqrt (- (* b_2 b_2) (* a c))))) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (/ (fabs (/ (* a c) (+ b_2 (hypot b_2 (sqrt (* a (- c))))))) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 1e+303) (/ (fabs (- b_2 (sqrt (- (* b_2 b_2) (* a c))))) a) (/ (- (hypot b_2 (* (sqrt (- c)) (sqrt a))) b_2) a)))))",
    "output_parens": 70,
    "avg_bits_err_input": 33.53619996649882,
    "avg_bits_err_output": 20.388045038834296,
    "avg_bits_err_improve": 13.148154927664525,
    "time": 34151.81640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -3.1e+158) (/ c (- (hypot b_2 (sqrt (* c a))) b_2)) (if (<= b_2 -9.5e-99) (/ (/ (+ (* c a) (- (* b_2 b_2) (* b_2 b_2))) (- a)) (- b_2 (sqrt (- (* b_2 b_2) (* c a))))) (if (<= b_2 1.4e+154) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a) (/ (fma b_2 (- -1.0 (/ b_2 (hypot b_2 (sqrt (* c a))))) (/ a (/ (hypot b_2 (sqrt (* c a))) c))) a))))",
    "output_parens": 43,
    "avg_bits_err_input": 33.7289563848553,
    "avg_bits_err_output": 18.514855497998788,
    "avg_bits_err_improve": 15.214100886856514,
    "time": 30196.9951171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (tan (* x 0.5)) x) (/ x (sin x)))",
    "output_parens": 6,
    "avg_bits_err_input": 31.625737249144954,
    "avg_bits_err_output": 0.12430470000576935,
    "avg_bits_err_improve": 31.501432549139185,
    "time": 23664.185546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(cbrt (pow (- (exp (/ (log1p x) n)) (expm1 (log1p (pow x (/ 1.0 n))))) 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 32.77697784492157,
    "avg_bits_err_output": 32.506060304375424,
    "avg_bits_err_improve": 0.2709175405461437,
    "time": 38459.93212890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 30.06302376670628,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 30.05639876670628,
    "time": 23030.254638671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (pow (+ 1.0 x) -2.0) (/ (fma x -1.0 -1.0) x))",
    "output_parens": 5,
    "avg_bits_err_input": 13.664943789160496,
    "avg_bits_err_output": 0.019198120312590144,
    "avg_bits_err_improve": 13.645745668847907,
    "time": 14977.2568359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (or (<= x -2.8e-20) (not (<= x 5.4e-36))) (fma (+ -1.0 (cos eps)) (cos x) (* (sin eps) (- (sin x)))) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))))",
    "output_parens": 21,
    "avg_bits_err_input": 39.57246204492315,
    "avg_bits_err_output": 0.5929176704643224,
    "avg_bits_err_improve": 38.979544374458825,
    "time": 37258.16748046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ (+ 1.0 (- x x)) (fma (cbrt x) (+ (cbrt (+ 1.0 x)) (/ x (pow (cbrt x) 2.0))) (/ (+ 1.0 x) (cbrt (+ 1.0 x)))))",
    "output_parens": 15,
    "avg_bits_err_input": 30.527942284184142,
    "avg_bits_err_output": 0.21808309882949894,
    "avg_bits_err_improve": 30.309859185354643,
    "time": 23141.486328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.226092642270725,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 30.225842642270724,
    "time": 11103.057373046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -3.2e-131) (/ (- (hypot (* (sqrt (* c -4.0)) (sqrt a)) b) b) (* a 2.0)) (if (<= c 4.5e-235) (/ (- (hypot (pow (* -4.0 (* (* (* c -4.0) a) (* c a))) 0.25) b) b) (* a 2.0)) (if (<= c 4.3e-216) (* (- (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b) b) (/ 0.5 a)) (if (<= c 7.2e-51) (/ (- (hypot (pow (* -4.0 (* (* (* c -4.0) a) (* c a))) 0.25) b) b) (* a 2.0)) (if (or (<= c 1.8e+42) (not (<= c 1e+65))) (/ (- (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b) b) (* a 2.0)) (/ (- (hypot (pow (* a (* a (* c (* c 16.0)))) 0.25) b) b) (* a 2.0)))))))",
    "output_parens": 66,
    "avg_bits_err_input": 33.8680721684986,
    "avg_bits_err_output": 24.09094828743778,
    "avg_bits_err_improve": 9.77712388106082,
    "time": 41457.898193359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 1e+216) (* -0.5 (/ (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) a)) (* -0.5 (/ (+ b (hypot (pow (pow (* c (* a -4.0)) 2.0) 0.25) b)) a))))",
    "output_parens": 47,
    "avg_bits_err_input": 33.8941878028341,
    "avg_bits_err_output": 24.29114147051097,
    "avg_bits_err_improve": 9.603046332323128,
    "time": 35793.765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.33709469106678,
    "avg_bits_err_output": 0.001771240625180289,
    "avg_bits_err_improve": 61.3353234504416,
    "time": 11889.81103515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (- (log1p n) (log n)) (+ (/ (* (pow (log1p n) 6.0) (pow (pow (log1p n) -12.0) 0.3333333333333333)) (+ (log1p n) 1.0)) (/ 1.0 (+ (log1p n) 1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 63.0022783914742,
    "avg_bits_err_output": 44.22325960333148,
    "avg_bits_err_improve": 18.77901878814272,
    "time": 73347.28344726562,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(+ (log1p (* eps (- eps))) (* -2.0 (log1p eps)))",
    "output_parens": 6,
    "avg_bits_err_input": 58.44410861979138,
    "avg_bits_err_output": 0.008375,
    "avg_bits_err_improve": 58.43573361979138,
    "time": 16944.91748046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (fma (/ (sin x) x) (/ 1.0 x) (/ (- (cos x)) (tan x))) (/ (cos x) x)) (+ x (tan x)))",
    "output_parens": 14,
    "avg_bits_err_input": 59.86598605168939,
    "avg_bits_err_output": 59.84989078631386,
    "avg_bits_err_improve": 0.016095265375533074,
    "time": 45608.601806640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ a b)))) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.25932700563275,
    "avg_bits_err_output": 29.174127042860317,
    "avg_bits_err_improve": 31.085199962772432,
    "time": 33142.572021484375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.29180283119123,
    "avg_bits_err_output": 0.012,
    "avg_bits_err_improve": 41.279802831191226,
    "time": 6291.796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.69584748524195,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.69584748524195,
    "time": 2758.99755859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.58006687886283,
    "avg_bits_err_output": 0.015464992043082168,
    "avg_bits_err_improve": 29.564601886819748,
    "time": 14081.245849609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (/ (fma (pow (* (exp x) (fma (exp x) -2.0 3.0)) 3.0) (- (exp x)) (pow (* (exp x) (fma (exp x) -2.0 3.0)) 2.0)) (* (exp x) (- (pow (* (exp x) (fma (exp x) -2.0 3.0)) 2.0)))) (fma -2.0 (exp x) -1.0))",
    "output_parens": 25,
    "avg_bits_err_input": 29.587006303554848,
    "avg_bits_err_output": 29.21144967426101,
    "avg_bits_err_improve": 0.37555662929383615,
    "time": 36808.004638671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma (/ (+ x (* (+ x 1.0) -2.0)) (+ x 1.0)) (+ x -1.0) x) (* x (+ x -1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 9.74572717208754,
    "avg_bits_err_output": 9.752138078543792,
    "avg_bits_err_improve": -0.006410906456252974,
    "time": 48676.812744140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (+ (/ (tan eps) (tan x)) (* (tan eps) (tan x))) (/ (- (tan x)) (+ (* (tan eps) (tan x)) -1.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 36.990941654153616,
    "avg_bits_err_output": 0.33299609724638907,
    "avg_bits_err_improve": 36.65794555690723,
    "time": 47172.7783203125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.42149008764258,
    "avg_bits_err_output": 0.1334530078147536,
    "avg_bits_err_improve": 30.288037079827827,
    "time": 19851.174560546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (* (cos x) (cos (* eps 0.5))) (* 2.0 (sin (* eps 0.5))) (* (* (sin (* eps 0.5)) (sin x)) (* (sin (* eps 0.5)) -2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 37.503821979855935,
    "avg_bits_err_output": 0.3145506225319349,
    "avg_bits_err_improve": 37.189271357324,
    "time": 30704.257080078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.814181388769363,
    "avg_bits_err_output": 0.1179293234384916,
    "avg_bits_err_improve": 19.69625206533087,
    "time": 24282.845947265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 14.277424160347712,
    "avg_bits_err_output": 0.39905879342248857,
    "avg_bits_err_improve": 13.878365366925223,
    "time": 22341.114013671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 28.96638773513798,
    "avg_bits_err_output": 1.2500851671895141,
    "avg_bits_err_improve": 27.716302567948468,
    "time": 29492.001953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (/ m (/ v (- 1.0 m))) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.08487256701560164,
    "avg_bits_err_output": 0.08056824357711005,
    "avg_bits_err_improve": 0.004304323438491589,
    "time": 30590.849365234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* a b) (/ (/ -1.0 a) b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.087441263329783,
    "avg_bits_err_output": 0.275404751903512,
    "avg_bits_err_improve": 15.812036511426271,
    "time": 22937.04052734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (* angle 0.005555555555555556)))) 2.0) (pow (* b (sin (* (* PI -0.005555555555555556) (/ 1.0 (/ -1.0 angle))))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.348666461291202,
    "avg_bits_err_output": 20.34477266050447,
    "avg_bits_err_improve": 0.00389380078673085,
    "time": 48854.258544921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* (* PI 0.011111111111111112) angle)) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 31.37059061946111,
    "avg_bits_err_output": 20.830406480569668,
    "avg_bits_err_improve": 10.540184138891444,
    "time": 39921.6259765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (* -0.005555555555555556 (/ PI (/ -1.0 angle))))) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 20.541261682835103,
    "avg_bits_err_output": 20.551701190588773,
    "avg_bits_err_improve": -0.010439507753670085,
    "time": 45780.4189453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (/ (- m (* m m)) (/ v m)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.18474279776851638,
    "avg_bits_err_output": 0.1821041840101474,
    "avg_bits_err_improve": 0.002638613758368963,
    "time": 18576.416259765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3180175992242749,
    "avg_bits_err_output": 0.317929261103917,
    "avg_bits_err_improve": 8.833812035791144e-05,
    "time": 29194.518798828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13227124062518028,
    "avg_bits_err_output": 0.13227124062518028,
    "avg_bits_err_improve": 0,
    "time": 25439.354736328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (fma (cos lambda1) (cos lambda2) (* (sin lambda1) (sin lambda2))) (* (cos phi1) (cos phi2))))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 17.004589539228938,
    "avg_bits_err_output": 3.741499189096731,
    "avg_bits_err_improve": 13.263090350132208,
    "time": 44016.080322265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* (/ -0.5 a) (/ (fabs (+ (- (pow b 8.0) (pow (fma b b (* a (* c -4.0))) 4.0)) (fma (- (fma b b (* a (* c -4.0)))) (pow (fma b b (* a (* c -4.0))) 3.0) (pow (fma b b (* a (* c -4.0))) 4.0)))) (* (fma b b (fma b b (* a (* c -4.0)))) (+ (pow b 4.0) (pow (fma b b (* a (* c -4.0))) 2.0))))) (+ b (sqrt (fma (* a c) -4.0 (* b b)))))",
    "output_parens": 41,
    "avg_bits_err_input": 52.31160300809916,
    "avg_bits_err_output": 49.1331696694915,
    "avg_bits_err_improve": 3.178433338607661,
    "time": 65456.921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ 1.0 (/ (* (/ a -0.5) (+ b (sqrt (fma (* a c) -4.0 (* b b))))) (* (* a c) 4.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 28.508292504147214,
    "avg_bits_err_output": 0.5052992515889142,
    "avg_bits_err_improve": 28.002993252558298,
    "time": 66858.6474609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (* b (+ (* (* c a) -4.0) (* b (- b (sqrt (fma (* c a) -4.0 (* b b))))))) (* b (sqrt (fma (* c a) -4.0 (* b b))))) (/ 0.5 a))",
    "output_parens": 18,
    "avg_bits_err_input": 43.87748042462839,
    "avg_bits_err_output": 38.82237526558024,
    "avg_bits_err_improve": 5.055105159048146,
    "time": 51939.889404296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.32e+154) (/ (- (hypot b (pow (* -4.0 (* (* a (* c -4.0)) (* a c))) 0.25)) b) (* a 2.0)) (if (<= b -1.9e-287) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= b 3e-154) (/ (- (hypot b (* (* c -4.0) (sqrt (/ a (* c -4.0))))) b) (* a 2.0)) (* (/ (* a (* c -4.0)) (+ b (hypot (sqrt (* a (* c -4.0))) b))) (/ 0.5 a)))))",
    "output_parens": 43,
    "avg_bits_err_input": 33.88879999874394,
    "avg_bits_err_output": 22.30862552524591,
    "avg_bits_err_improve": 11.580174473498033,
    "time": 33447.155029296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8908471282957333,
    "avg_bits_err_output": 0.2243553031291066,
    "avg_bits_err_improve": 0.6664918251666268,
    "time": 35979.0556640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (/ (/ (- (* (/ 1.0 (fma (pow (+ 1.0 (pow (exp x) -2.0)) -12.0) 4096.0 1.0)) (/ 1.0 (fma (pow (+ 1.0 (pow (exp x) -2.0)) -12.0) 4096.0 1.0))) (* (/ (* (pow (+ 1.0 (pow (exp x) -2.0)) -24.0) 16777216.0) (fma (pow (+ 1.0 (pow (exp x) -2.0)) -12.0) 4096.0 1.0)) (/ (* (pow (+ 1.0 (pow (exp x) -2.0)) -24.0) 16777216.0) (fma (pow (+ 1.0 (pow (exp x) -2.0)) -12.0) 4096.0 1.0)))) (+ (/ 1.0 (fma (pow (+ 1.0 (pow (exp x) -2.0)) -12.0) 4096.0 1.0)) (/ (* (pow (+ 1.0 (pow (exp x) -2.0)) -24.0) 16777216.0) (fma (* (pow (pow (cbrt (+ 1.0 (pow (exp x) -2.0))) 2.0) -12.0) (pow (cbrt (+ 1.0 (pow (exp x) -2.0))) -12.0)) 4096.0 1.0)))) (* (+ 1.0 (+ (* (pow (+ 1.0 (pow (exp x) -2.0)) -4.0) 16.0) (pow (* (pow (+ 1.0 (pow (exp x) -2.0)) -4.0) 16.0) 2.0))) (+ 1.0 (* (pow (+ 1.0 (pow (exp x) -2.0)) -2.0) 4.0)))) (+ -1.0 (/ -2.0 (+ 1.0 (pow (exp -2.0) x)))))",
    "output_parens": 91,
    "avg_bits_err_input": 29.039778307518205,
    "avg_bits_err_output": 29.049491366534877,
    "avg_bits_err_improve": -0.009713059016672076,
    "time": 55284.2265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.189138759505,
    "avg_bits_err_output": 0.012625,
    "avg_bits_err_improve": 58.176513759505,
    "time": 9850.6123046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.02941010114313,
    "avg_bits_err_output": 0.006125,
    "avg_bits_err_improve": 58.02328510114313,
    "time": 6398.4296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.008094360937770434,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 0.0004693609377704345,
    "time": 3617.630859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 32.07325,
    "avg_bits_err_output": 0.034625,
    "avg_bits_err_improve": 32.038625,
    "time": 6177.326171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (* (log1p x) 2.0) (log1p (* x (- x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 58.43124789208118,
    "avg_bits_err_output": 0.008375,
    "avg_bits_err_improve": 58.42287289208118,
    "time": 17865.741943359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04369812031259015,
    "avg_bits_err_output": 0.042863361324451066,
    "avg_bits_err_improve": 0.0008347589881390824,
    "time": 5413.019287109375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (/ (* ew (sin t)) (hypot 1.0 (/ eh (* ew (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13021936093777042,
    "avg_bits_err_output": 0.13159436093777044,
    "avg_bits_err_improve": -0.001375000000000015,
    "time": 43615.673095703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* eh (- (tan t))) ew)))) (* (* eh (sin t)) (sin (atan (/ (* eh (- (tan t))) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.122625,
    "avg_bits_err_output": 0.122625,
    "avg_bits_err_improve": 0,
    "time": 37010.31884765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (+ (* (* (- lambda1 lambda2) (cos (* phi2 0.5))) (cos (* 0.5 phi1))) (* (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))) (- lambda2 lambda1))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 38.849716132013,
    "avg_bits_err_output": 0.13135507364224727,
    "avg_bits_err_improve": 38.71836105837075,
    "time": 36143.408935546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 14.657914333518113,
    "avg_bits_err_output": 0.0013231203125901444,
    "avg_bits_err_improve": 14.656591213205523,
    "time": 6924.586181640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (pow (/ 1.0 (* (sin theta) (* (sin delta) (cos phi1)))) -1.0) (fma (/ 2.0 (/ 2.0 (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))) (- (sin phi1)) (cos delta))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.16004668487053925,
    "avg_bits_err_output": 0.17049129700856183,
    "avg_bits_err_improve": -0.010444612138022585,
    "time": 53669.428955078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (- (* b b) (* (* 3.0 a) c))) b) (* 3.0 a)) -1e-31) (/ (* (pow (cbrt (/ (* (* a c) -0.3333333333333333) (* a a))) 2.0) (cbrt (/ (+ (* 0.1111111111111111 (fma c (* a -3.0) (* b b))) (* (* b b) -0.1111111111111111)) (* a a)))) (* (/ 0.3333333333333333 a) (+ b (sqrt (fma c (* a -3.0) (* b b)))))) (/ (fma (pow (fma b b (* c (* a -3.0))) 0.16666666666666666) (cbrt (fma b b (* c (* a -3.0)))) (- b)) (* 3.0 a)))",
    "output_parens": 47,
    "avg_bits_err_input": 52.33944271674547,
    "avg_bits_err_output": 49.51201190432043,
    "avg_bits_err_improve": 2.8274308124250354,
    "time": 62924.965087890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* a -3.0) c) (+ b (sqrt (fma b b (* (* a -3.0) c))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.646493578571594,
    "avg_bits_err_output": 0.45305586016548977,
    "avg_bits_err_improve": 28.193437718406106,
    "time": 40701.298828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (- (* b b) (* (* 3.0 a) c))) b) (* 3.0 a)) -1e-19) (* (/ (- (fma (* a -3.0) c (* b b)) (* b b)) a) (/ (/ 1.0 (+ b (sqrt (fma (* a -3.0) c (* b b))))) 3.0)) (/ (fma (pow (fma b b (* a (* c -3.0))) 0.16666666666666666) (cbrt (fma -3.0 (* a c) (* b b))) (- b)) (* 3.0 a)))",
    "output_parens": 36,
    "avg_bits_err_input": 43.89042012060226,
    "avg_bits_err_output": 41.02147683571193,
    "avg_bits_err_improve": 2.868943284890328,
    "time": 61458.5634765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b 1.3e-228) (/ (fma b -0.3333333333333333 (* 0.3333333333333333 (hypot b (sqrt (fabs (* a (* c 3.0))))))) a) (/ (* (* -3.0 (* a c)) (/ 0.3333333333333333 a)) (+ b (hypot b (sqrt (* -3.0 (* a c)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 33.93005751268642,
    "avg_bits_err_output": 19.327408445261266,
    "avg_bits_err_improve": 14.602649067425151,
    "time": 42000.169921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (- (/ (* (pow (cos lambda2) 2.0) (sin lambda1)) (cos lambda2)) (* (sin lambda2) (cos lambda1))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1))))))",
    "output_parens": 28,
    "avg_bits_err_input": 13.362692445980375,
    "avg_bits_err_output": 0.18030737678662612,
    "avg_bits_err_improve": 13.18238506919375,
    "time": 56157.52001953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (- 1.0 (+ x (* (fma x -1.0 -1.0) (/ (+ 1.0 x) x)))) (* (/ (- -1.0 x) x) (- x 1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.32578772281659,
    "avg_bits_err_output": 25.360595082313015,
    "avg_bits_err_improve": 3.965192640503574,
    "time": 42230.467529296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ x (/ 1.0 x)) (+ x (/ -1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.011125,
    "avg_bits_err_output": 0.010948120312590145,
    "avg_bits_err_improve": 0.0001768796874098543,
    "time": 11414.400634765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.143255548844879,
    "avg_bits_err_output": 0.073375,
    "avg_bits_err_improve": 14.069880548844878,
    "time": 25901.255615234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) INFINITY) (/ (- (pow (* (* (cbrt (fma A (* C -4.0) (* B B))) (cbrt (* 2.0 F))) (cbrt (- C (- (hypot B (- A C)) A)))) 1.5)) (+ (* B B) (* -4.0 (* A C)))) (/ (- (sqrt (* 2.0 (* F (+ A (- C (hypot B (- A C)))))))) (hypot B (sqrt (* C (* A -4.0))))))",
    "output_parens": 56,
    "avg_bits_err_input": 52.36936568687435,
    "avg_bits_err_output": 34.74013979037399,
    "avg_bits_err_improve": 17.629225896500365,
    "time": 61585.63134765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* (atan (/ (- (- C A) (hypot B (- C A))) B)) (/ 180.0 PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.552095268521562,
    "avg_bits_err_output": 13.93985247232453,
    "avg_bits_err_improve": 15.612242796197032,
    "time": 33813.423095703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2e-310) (/ (sqrt (+ A (+ C (hypot B (- A C))))) (/ 1.0 (sqrt (/ (* F 2.0) (fma A (* C -4.0) (* B B)))))) (* (sqrt (+ A (pow (sqrt (+ C (hypot B (- A C)))) 2.0))) (* (pow (fma A (* C -4.0) (* B B)) -0.5) (- (sqrt (* F 2.0))))))",
    "output_parens": 31,
    "avg_bits_err_input": 52.91519349146561,
    "avg_bits_err_output": 39.28605953506916,
    "avg_bits_err_improve": 13.629133956396451,
    "time": 61764.746826171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ g (* (/ g (cbrt g)) (cbrt (* a 2.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 16.01564985920578,
    "avg_bits_err_output": 0.8950546859869442,
    "avg_bits_err_improve": 15.120595173218836,
    "time": 22986.763916015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g 3.5e-295) (+ (/ 1.0 (/ (cbrt a) (cbrt (* 0.5 (- (hypot h g) g))))) (/ 1.0 (cbrt (/ a (* (+ g (hypot g h)) -0.5))))) (+ (cbrt (* (/ 0.5 a) (- g (hypot g h)))) (* (cbrt (+ g (hypot g h))) (cbrt (/ -0.5 a)))))",
    "output_parens": 28,
    "avg_bits_err_input": 35.977806423664475,
    "avg_bits_err_output": 2.9011045809349403,
    "avg_bits_err_improve": 33.076701842729534,
    "time": 35842.78125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9911727453198026,
    "avg_bits_err_output": 0.031205451565835363,
    "avg_bits_err_improve": 0.9599672937539673,
    "time": 25385.1298828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ 1.0 (+ 1.0 (exp (- b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.9006462406251803,
    "avg_bits_err_output": 0.016584125669149408,
    "avg_bits_err_improve": 0.8840621149560308,
    "time": 4754.866943359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a2 b1) (/ a1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-299) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e-287) (* (/ a2 b1) (/ a1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+208) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b1) (/ a2 b2))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.103851474437171,
    "avg_bits_err_output": 3.210259701041634,
    "avg_bits_err_improve": 7.893591773395537,
    "time": 10714.5087890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5259289385955593,
    "avg_bits_err_output": 0.434375,
    "avg_bits_err_improve": 0.09155393859555933,
    "time": 18188.4677734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -9e+15) (- (log1p (- (pow (+ x (+ (hypot 1.0 x) -1.0)) 2.0))) (log1p (- 1.0 (+ x (hypot 1.0 x))))) (log1p (* x (+ 1.0 (/ x (+ 1.0 (hypot 1.0 x)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 53.251528206832646,
    "avg_bits_err_output": 13.347423218273205,
    "avg_bits_err_improve": 39.90410498855944,
    "time": 19636.248291015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.740628981971858,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.740628981971858,
    "time": 2222.536865234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.014,
    "avg_bits_err_improve": 0,
    "time": 3560.84716796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1255.510009765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (/ 2.0 (* r r)) (- -1.5 (* (* (* r w) (* r w)) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 12.582187331450612,
    "avg_bits_err_output": 0.31809043008274446,
    "avg_bits_err_improve": 12.264096901367868,
    "time": 37442.673095703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (* x1 (* x1 3.0)) (fma 2.0 x2 x1)) (fma x1 x1 1.0)) (fma x1 (/ (* (* x1 3.0) (fma 2.0 x2 (fma x1 (* x1 3.0) (- x1)))) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ x1 (+ (* 2.0 (* (pow (/ (fma x1 x1 1.0) (* x1 (fma 2.0 x2 (fma 3.0 (* x1 x1) (- x1))))) -1.0) (+ (/ (- (fma 2.0 x2 (* x1 (* x1 3.0))) x1) (fma x1 x1 1.0)) -3.0))) (* x1 (* x1 (fma (/ (fma 2.0 x2 (- (* 3.0 (* x1 x1)) x1)) (fma x1 x1 1.0)) 4.0 -6.0)))))))))",
    "output_parens": 47,
    "avg_bits_err_input": 0.5148986108851147,
    "avg_bits_err_output": 0.28881741775428804,
    "avg_bits_err_improve": 0.22608119313082664,
    "time": 85228.34423828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.313158470463996,
    "avg_bits_err_output": 1.409984404663397,
    "avg_bits_err_improve": 16.9031740658006,
    "time": 12951.79443359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma 0.954929658551372 x (* (pow x 3.0) -0.12900613773279798))",
    "output_parens": 3,
    "avg_bits_err_input": 0.2306079264948677,
    "avg_bits_err_output": 0.20273836132445108,
    "avg_bits_err_improve": 0.02786956517041661,
    "time": 20492.43896484375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2736.234619140625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ PI b) a) (* (+ b a) 2.0))",
    "output_parens": 5,
    "avg_bits_err_input": 14.656241829431005,
    "avg_bits_err_output": 0.26883289531691684,
    "avg_bits_err_improve": 14.387408934114088,
    "time": 54899.4541015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x)) (/ (+ 1.0 (/ -1.0 eps)) (exp (fma eps x x)))) 2.0)",
    "output_parens": 12,
    "avg_bits_err_input": 29.178838880393464,
    "avg_bits_err_output": 29.202560967221693,
    "avg_bits_err_improve": -0.023722086828229294,
    "time": 47128.860595703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (+ (* 2.0 (+ 2.0 (/ -2.0 (+ 1.0 t)))) (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.0125,
    "avg_bits_err_output": 0.005875,
    "avg_bits_err_improve": 0.006625000000000001,
    "time": 33494.850341796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))) (+ 2.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.01725,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 0.007625000000000002,
    "time": 31690.5224609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.04275,
    "avg_bits_err_output": 0.082,
    "avg_bits_err_improve": -0.03925,
    "time": 18084.36767578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3704.40966796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 4399.3017578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4360.72216796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.843910449075863,
    "avg_bits_err_output": 0.249875,
    "avg_bits_err_improve": 7.594035449075863,
    "time": 16989.241455078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.7158885577526855,
    "avg_bits_err_output": 7.7158885577526855,
    "avg_bits_err_improve": 0,
    "time": 19759.459716796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (+ eps (* x 2.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 16.11846614546361,
    "avg_bits_err_output": 0.0145,
    "avg_bits_err_improve": 16.10396614546361,
    "time": 19288.723876953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (* x 0.125)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5323393279850985,
    "avg_bits_err_output": 0.3490710531287862,
    "avg_bits_err_improve": 3.1832682748563124,
    "time": 27811.475341796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.29409370700576,
    "avg_bits_err_output": 0.021903571878425506,
    "avg_bits_err_improve": 15.272190135127335,
    "time": 14527.06298828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.96791563568305,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.96791563568305,
    "time": 4230.108154296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.30441054977922,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 38.30403554977922,
    "time": 3952.5478515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2985,
    "avg_bits_err_improve": 63.7015,
    "time": 61855.12939453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.843251042012014,
    "avg_bits_err_output": 0.32225,
    "avg_bits_err_improve": 61.52100104201202,
    "time": 13760.49267578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 1e+216) (* -0.5 (/ (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) a)) (* -0.5 (/ (+ b (hypot (pow (pow (* c (* a -4.0)) 2.0) 0.25) b)) a))))",
    "output_parens": 47,
    "avg_bits_err_input": 33.8941878028341,
    "avg_bits_err_output": 24.29114147051097,
    "avg_bits_err_improve": 9.603046332323128,
    "time": 37843.27490234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.32e+154) (/ (- (hypot b (pow (* -4.0 (* (* a (* c -4.0)) (* a c))) 0.25)) b) (* a 2.0)) (if (<= b -1.9e-287) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= b 3e-154) (/ (- (hypot b (* (* c -4.0) (sqrt (/ a (* c -4.0))))) b) (* a 2.0)) (* (/ (* a (* c -4.0)) (+ b (hypot (sqrt (* a (* c -4.0))) b))) (/ 0.5 a)))))",
    "output_parens": 43,
    "avg_bits_err_input": 33.88879999874394,
    "avg_bits_err_output": 22.30862552524591,
    "avg_bits_err_improve": 11.580174473498033,
    "time": 37994.2490234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2041.39013671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (/ 1.0 x) (/ 1.0 (expm1 x)))",
    "output_parens": 4,
    "avg_bits_err_input": 40.16383456716739,
    "avg_bits_err_output": 0.029304323438491594,
    "avg_bits_err_improve": 40.1345302437289,
    "time": 8353.08056640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (/ (- x y) (hypot x y)) (+ x y)) (hypot x y))",
    "output_parens": 7,
    "avg_bits_err_input": 20.353977514116686,
    "avg_bits_err_output": 0.03367501601618786,
    "avg_bits_err_improve": 20.3203024981005,
    "time": 17660.5732421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6186085787196505,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6186085787196505,
    "time": 15292.068603515625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.036,
    "time": 4659.373291015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ b a)) (* a (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021969360937770434,
    "avg_bits_err_output": 0.01575,
    "avg_bits_err_improve": 0.006219360937770434,
    "time": 6170.0615234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (fma x x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.01275,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 0.0013749999999999995,
    "time": 2870.214599609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00025,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0,
    "time": 1164.367919921875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ e (+ b (+ a c))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3988729328161961,
    "avg_bits_err_output": 0.243,
    "avg_bits_err_improve": 0.15587293281619613,
    "time": 16978.319091796875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(/ (* (sin x) (sin (* x 0.5))) (cos (* x -0.5)))",
    "output_parens": 7,
    "avg_bits_err_input": 29.483744802675492,
    "avg_bits_err_output": 0.007917481250360578,
    "avg_bits_err_improve": 29.475827321425133,
    "time": 8877.2587890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (/ (- (* x x) eps) (sqrt (- (* x x) eps)))))",
    "output_parens": 8,
    "avg_bits_err_input": 24.967283559370152,
    "avg_bits_err_output": 0.043386842188131006,
    "avg_bits_err_improve": 24.92389671718202,
    "time": 21422.880615234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(* (tan x) (/ (fma (cos x) (pow (/ x (tan x)) 2.0) (* (/ x (tan x)) (/ (- -1.0 (cos (+ x x))) 2.0))) (* x (cos x))))",
    "output_parens": 17,
    "avg_bits_err_input": 30.077157344841027,
    "avg_bits_err_output": 30.075701601550257,
    "avg_bits_err_improve": 0.0014557432907693624,
    "time": 44384.1708984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00764624062518029,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.00652124062518029,
    "time": 3564.072265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 2e-231) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 1.0) (* 100.0 (- (* n (/ (pow (+ 1.0 (/ i n)) n) i)) (/ n i))) (* 100.0 (/ (+ (pow (exp n) (log1p (/ i n))) -1.0) (/ i n)))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.686514191116316,
    "avg_bits_err_output": 10.501320677530336,
    "avg_bits_err_improve": 37.18519351358598,
    "time": 29934.101806640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(/ (+ (/ a (/ (hypot c d) c)) (* (/ d (hypot c d)) b)) (hypot c d))",
    "output_parens": 9,
    "avg_bits_err_input": 26.1341579976068,
    "avg_bits_err_output": 0.4257278967857911,
    "avg_bits_err_improve": 25.70843010082101,
    "time": 23214.40234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (* (/ c (hypot c d)) b) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 26.197595971955746,
    "avg_bits_err_output": 0.5216650935828784,
    "avg_bits_err_improve": 25.675930878372867,
    "time": 22558.0380859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03375,
    "avg_bits_err_output": 0.024711703818081368,
    "avg_bits_err_improve": 0.009038296181918634,
    "time": 22154.63525390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- 1.0 (log (exp (pow (fma ux maxCos (- 1.0 ux)) 6.0)))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.703806796572488,
    "avg_bits_err_output": 12.153151366970125,
    "avg_bits_err_improve": 1.5506554296023634,
    "time": 66945.13842773438,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* uy (* 2.0 PI))) (sqrt (+ (fma (fma ux maxCos (- 1.0 ux)) (- (fma ux maxCos 1.0)) 1.0) (* ux (- (fma ux maxCos 1.0) ux)))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.741929338666584,
    "avg_bits_err_output": 11.401642180954653,
    "avg_bits_err_improve": 2.3402871577119306,
    "time": 56834.904052734375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- 1.0 ux) (* maxCos zi)) (* (sqrt (+ 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (+ ux -1.0)))))))) (+ (* (cos (* uy (* 2.0 PI))) xi) (* (sin (/ (* uy (* 8.0 (pow PI 3.0))) (pow (* 2.0 PI) 2.0))) yi))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.33763074281731875,
    "avg_bits_err_output": 0.32509414164514555,
    "avg_bits_err_improve": 0.0125366011721732,
    "time": 76992.50854492188,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (* (sin (atan (/ 1.0 (/ alphax (* alphay (tan (* PI (fma 2.0 u1 0.5)))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.1906883504838014,
    "avg_bits_err_output": 0.19106672136475142,
    "avg_bits_err_improve": -0.00037837088095002414,
    "time": 32339.739013671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5439826908594201,
    "avg_bits_err_output": 0.5163378199162992,
    "avg_bits_err_improve": 0.027644870943120847,
    "time": 24864.579345703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3170521316007832,
    "avg_bits_err_output": 0.3170521316007832,
    "avg_bits_err_improve": 0,
    "time": 31246.714111328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ (- 1.0 u) (+ 1.0 (exp (* PI (/ 1.0 s))))))) -1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.33130660728913075,
    "avg_bits_err_output": 0.33298301161864596,
    "avg_bits_err_improve": -0.0016764043295152131,
    "time": 38226.00439453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.061751992049796756,
    "avg_bits_err_output": 0.04154837748020238,
    "avg_bits_err_improve": 0.020203614569594373,
    "time": 15049.2041015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 0.5 (+ s (* s (cosh (/ (fabs x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.15397063354866408,
    "avg_bits_err_output": 0.12285836380390283,
    "avg_bits_err_improve": 0.03111226974476125,
    "time": 31439.41015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.648488859115783,
    "avg_bits_err_output": 0.648488859115783,
    "avg_bits_err_improve": 0,
    "time": 27110.356689453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.1675748508106349,
    "avg_bits_err_output": 0.16345586061346765,
    "avg_bits_err_improve": 0.004118990197167244,
    "time": 26655.90673828125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (expm1 (log1p (/ h (hypot eta (/ sinTheta_O (sqrt (hypot 1.0 sinTheta_O))))))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.4634390628625606,
    "avg_bits_err_output": 1.6695958755208191,
    "avg_bits_err_improve": 0.7938431873417415,
    "time": 35633.65185546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ (/ 0.5 v) (sinh (/ 1.0 v))) (/ cosTheta_i (/ (pow (exp (/ sinTheta_O v)) sinTheta_i) (* (/ 1.0 v) cosTheta_O))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.47404769640329625,
    "avg_bits_err_output": 0.3878610560546287,
    "avg_bits_err_improve": 0.08618664034866758,
    "time": 50874.1328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (+ (/ -1.0 v) 0.6931))) 0.5) v)",
    "output_parens": 10,
    "avg_bits_err_input": 0.1179853212986712,
    "avg_bits_err_output": 0.0841378618959963,
    "avg_bits_err_improve": 0.033847459402674904,
    "time": 14470.3505859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (* 2.0 (log (cbrt (pow alpha (* PI 3.0))))) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.47274946954319436,
    "avg_bits_err_output": 0.35565153584074716,
    "avg_bits_err_improve": 0.1170979337024472,
    "time": 58071.4384765625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (/ (- 0.25 u) 0.75)) (* s -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3164124899728602,
    "avg_bits_err_output": 0.5401548548856799,
    "avg_bits_err_improve": 0.7762576350871803,
    "time": 27559.082275390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.394417548115204,
    "avg_bits_err_output": 0.20457312031259015,
    "avg_bits_err_improve": 12.189844427802614,
    "time": 25393.14892578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (* (/ (/ 0.125 s) PI) (/ (exp (/ (- r) s)) r)) (* (/ 0.75 (* s (* PI 6.0))) (/ (exp (/ (- r) (* s 3.0))) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.1410571449845021,
    "avg_bits_err_output": 0.1392970516718666,
    "avg_bits_err_improve": 0.0017600933126354912,
    "time": 49818.013671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i (* n1_i (/ (sin (* normAngle u)) (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8889425159661124,
    "avg_bits_err_output": 0.7110059506837316,
    "avg_bits_err_improve": 0.17793656528238078,
    "time": 38750.654296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ 1.0 (/ (sqrt PI) (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) cosTheta))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6715434552179841,
    "avg_bits_err_output": 0.5116804817535261,
    "avg_bits_err_improve": 0.159862973464458,
    "time": 24550.759033203125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (sqrt (pow (log1p (- u1)) 4.0)) 0.25) (sin (* 2.0 (* PI u2))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.621784274776658,
    "avg_bits_err_output": 0.5393505057850296,
    "avg_bits_err_improve": 13.082433768991628,
    "time": 24189.3095703125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.665214078245482,
    "avg_bits_err_output": 0.300168165973937,
    "avg_bits_err_improve": 13.365045912271546,
    "time": 27126.936279296875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* alpha (- alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.170012526780337,
    "avg_bits_err_output": 0.32003552656439316,
    "avg_bits_err_improve": 13.849977000215944,
    "time": 20264.75,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (* (* alphay alphax) (log1p (- u0))) (/ (+ (* sin2phi (/ alphax alphay)) (* alphay (/ cos2phi alphax))) -1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 12.597309665124838,
    "avg_bits_err_output": 0.4739665995370313,
    "avg_bits_err_improve": 12.123343065587807,
    "time": 27244.1123046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -2e+166) (- (* PI l) (/ (tan (fabs (* PI l))) (* F F))) (if (<= (* PI l) -5e-46) (- (* PI l) (/ (tan (* (pow (* PI l) 2.0) (/ 1.0 (log1p (expm1 (* PI l)))))) (* F F))) (if (<= (* PI l) 20000000.0) (- (* PI l) (/ (/ 1.0 F) (* F (/ 1.0 (tan (* PI l)))))) (if (<= (* PI l) 1e+144) (- (* PI l) (/ (tan (* (pow (* PI l) 2.0) (/ 1.0 (log1p (expm1 (* PI l)))))) (* F F))) (- (* PI l) (* (tan (* PI l)) (/ 1.0 (* F F))))))))",
    "output_parens": 58,
    "avg_bits_err_input": 16.6436605511083,
    "avg_bits_err_output": 9.949512416714919,
    "avg_bits_err_improve": 6.694148134393382,
    "time": 30200.7958984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(/ (- (/ (tan B) (sin B)) x) (tan B))",
    "output_parens": 6,
    "avg_bits_err_input": 0.20960112287783922,
    "avg_bits_err_output": 0.1752496037415192,
    "avg_bits_err_improve": 0.03435151913632001,
    "time": 20458.73681640625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.19585464388637,
    "avg_bits_err_output": 10.146496366794153,
    "avg_bits_err_improve": 3.0493582770922174,
    "time": 35253.45751953125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (log (tanh (/ PI (/ 4.0 f))))) (* PI -0.25))",
    "output_parens": 7,
    "avg_bits_err_input": 61.58779739507401,
    "avg_bits_err_output": 0.710365229614276,
    "avg_bits_err_improve": 60.87743216545974,
    "time": 40347.632080078125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* t (sqrt 2.0)) (hypot l (* (hypot (* t (sqrt 2.0)) l) (sqrt (/ (+ 1.0 x) (+ x -1.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 42.70191322909703,
    "avg_bits_err_output": 20.40617393608563,
    "avg_bits_err_improve": 22.2957392930114,
    "time": 48327.025390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.202135922791699,
    "avg_bits_err_output": 0.21897669219101554,
    "avg_bits_err_improve": 3.9831592306006836,
    "time": 29096.683837890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (log (exp (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 1.060151335454401,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 1.053401335454401,
    "time": 15765.625732421875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ 2.0 (* (/ l t) (sqrt 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.389237730312896,
    "avg_bits_err_output": 1.0661059954401872,
    "avg_bits_err_improve": 9.323131734872709,
    "time": 26462.910400390625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -6e-25) (sqrt (* (* U (* 2.0 n)) (+ (- t (* 2.0 (* l (/ l Om)))) (* (* n (pow (/ l Om) 2.0)) (- U* U))))) (if (<= U 2.7e-283) (sqrt (* (* 2.0 n) (* U (+ t (- (* (/ l (/ Om l)) -2.0) (* n (* (/ l Om) (* (/ l Om) (- U U*))))))))) (* (sqrt (* n (fma (/ l Om) (fma l -2.0 (* (* n (/ l Om)) (- U* U))) t))) (sqrt (* U 2.0)))))",
    "output_parens": 45,
    "avg_bits_err_input": 34.559575328156924,
    "avg_bits_err_output": 26.30945185137073,
    "avg_bits_err_improve": 8.250123476786193,
    "time": 51271.177490234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= k -6.5e+120) (not (<= k 1350000000.0))) (/ (/ (/ l k) t) (/ (* 0.5 (* k (sin k))) (/ l (tan k)))) (/ (/ (/ l k) k) (* 0.5 (* t (* (sin k) (/ (tan k) l))))))",
    "output_parens": 23,
    "avg_bits_err_input": 47.90102348639842,
    "avg_bits_err_output": 0.5365008995574393,
    "avg_bits_err_improve": 47.364522586840984,
    "time": 146548.50170898438,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ (/ l t) (sin k)) (/ t (/ l (* t (* (* (tan k) 0.5) (+ 2.0 (pow (/ k t) 2.0)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 32.68437030765328,
    "avg_bits_err_output": 11.813984439866621,
    "avg_bits_err_improve": 20.87038586778666,
    "time": 87693.55834960938,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* a2 a2) (* a1 a1)) (/ (sqrt 2.0) (cos th)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5266481234615706,
    "avg_bits_err_output": 0.47774906251803007,
    "avg_bits_err_improve": 0.04889906094354057,
    "time": 30302.615234375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (sqrt (* 2.0 (* PI n))) (* (sqrt k) (pow (* 2.0 (* PI n)) (* k 0.5))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5506039723449057,
    "avg_bits_err_output": 0.4174570524517851,
    "avg_bits_err_improve": 0.13314691989312055,
    "time": 26107.7822265625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (* 2.0 (sinh l)) J) (cos (/ K 2.0))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.57793623564195,
    "avg_bits_err_output": 0.07136383180507613,
    "avg_bits_err_improve": 17.506572403836874,
    "time": 29929.39013671875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- n m)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 2.0) (/ (cos (- (/ (* K (+ m n)) (* (/ K (* K (+ m n))) (* (+ m n) 2.0))) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (- l (fabs (- n m)))))) (/ (cos (- (* K (/ (* (pow (+ m n) 2.0) (/ 0.125 (pow (+ m n) 3.0))) (/ 0.25 (pow (+ m n) 2.0)))) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (- l (fabs (- n m)))))))",
    "output_parens": 61,
    "avg_bits_err_input": 15.525022680929563,
    "avg_bits_err_output": 13.956584663256196,
    "avg_bits_err_improve": 1.5684380176733672,
    "time": 46632.6337890625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.301167481250364,
    "avg_bits_err_output": 8.295542481250362,
    "avg_bits_err_improve": 10.005625000000002,
    "time": 34209.87939453125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= l 4e+68) (* w0 (sqrt (- 1.0 (/ (* (* M (/ D d)) h) (* l (/ (* d (/ 4.0 D)) M)))))) (if (<= l 1.22e+291) (* w0 (sqrt (+ 1.0 (/ (* (* M D) -0.5) (* d (/ (* (/ 2.0 D) (* l (/ d M))) h)))))) (* w0 (sqrt (+ 1.0 (* (* (* (/ D d) (/ M l)) (* 0.5 (/ M d))) (/ h (/ -2.0 D))))))))",
    "output_parens": 39,
    "avg_bits_err_input": 14.097235306350637,
    "avg_bits_err_output": 8.928464539365882,
    "avg_bits_err_improve": 5.168770766984755,
    "time": 49587.23974609375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (* c0 (/ (sqrt (/ A V)) (sqrt l))) (if (<= (* V l) -1e-299) (* c0 (/ (sqrt (- A)) (sqrt (* V (- l))))) (if (<= (* V l) 0.0) (/ (pow (/ V A) -0.5) (/ (sqrt l) c0)) (if (<= (* V l) 2e+304) (* c0 (/ (sqrt A) (sqrt (* V l)))) (* A (/ c0 (sqrt (* V (* l A)))))))))",
    "output_parens": 40,
    "avg_bits_err_input": 18.458718662940683,
    "avg_bits_err_output": 5.807828376993911,
    "avg_bits_err_improve": 12.650890285946772,
    "time": 32650.892578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= D -8e-44) (* (/ c0 (* 2.0 w)) (* M (/ M (- (* (/ (/ c0 w) h) (pow (/ d D) 2.0)) (hypot M (* (/ (/ c0 w) h) (pow (/ d D) 2.0))))))) (if (<= D 31.0) (* c0 (* (/ 0.5 w) (/ M (/ (- (* d (* (/ c0 D) (/ (/ d (* D w)) h))) (sqrt (- (pow (* (/ D (/ d h)) (/ (/ w d) (/ c0 D))) -2.0) (* M M)))) M)))) (* (/ c0 (* 2.0 w)) (/ (* M M) (- (/ (pow (/ d D) 2.0) (* h (/ w c0))) (hypot (* (/ (/ c0 w) h) (pow (/ d D) 2.0)) M))))))",
    "output_parens": 60,
    "avg_bits_err_input": 59.269508356723485,
    "avg_bits_err_output": 34.48932224262574,
    "avg_bits_err_improve": 24.780186114097745,
    "time": 84653.54248046875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= h -5e-310) (* (* (/ (sqrt (- d)) (sqrt (- h))) (sqrt (/ d l))) (- 1.0 (/ (/ (* h (* M (/ D d))) (* (/ d (* M D)) 8.0)) l))) (if (<= h 5.1e+14) (* (* (sqrt (/ d l)) (/ (sqrt d) (sqrt h))) (+ 1.0 (/ (/ (* (* M 0.5) (* h (* (* M (/ D d)) -0.25))) (/ d D)) l))) (* (- 1.0 (/ (/ (* h (* M (/ D d))) (* (/ d (* M D)) 8.0)) l)) (* (sqrt (/ d h)) (/ (sqrt d) (sqrt l))))))",
    "output_parens": 55,
    "avg_bits_err_input": 26.68856513104088,
    "avg_bits_err_output": 18.152491193633683,
    "avg_bits_err_improve": 8.536073937407195,
    "time": 90131.771484375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (- 1.0 (pow (+ 0.5 (/ (* 0.5 (hypot 1.0 x)) (fma x x 1.0))) 1.5)) (+ (/ 0.5 (hypot 1.0 x)) (+ 1.5 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))",
    "output_parens": 16,
    "avg_bits_err_input": 16.00784359152053,
    "avg_bits_err_output": 15.529180216428491,
    "avg_bits_err_improve": 0.4786633750920384,
    "time": 37990.95458984375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9842193609377705,
    "avg_bits_err_output": 0.010969360937770432,
    "avg_bits_err_improve": 0.9732500000000001,
    "time": 5165.416015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (- 1.0 (* v v)))) (* t (sqrt (fma (* v v) -6.0 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4448520355945246,
    "avg_bits_err_output": 0.27957660728523004,
    "avg_bits_err_improve": 0.16527542830929454,
    "time": 25127.894287109375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (sqrt (+ 2.0 (* v (* v -6.0)))) (- 1.0 (* v v))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.014292481250360577,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 0.004167481250360577,
    "time": 8899.31005859375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(expm1 (pow (sqrt (log1p (acos (/ (- (fma v (* v -5.0) 1.0)) (- 1.0 (* v v)))))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.515697075733991,
    "avg_bits_err_output": 0.5172552347913074,
    "avg_bits_err_improve": -0.0015581590573163773,
    "time": 41733.86328125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (/ a (fma k (+ k 10.0) 1.0)) (pow k (- m)))",
    "output_parens": 6,
    "avg_bits_err_input": 2.106638157000591,
    "avg_bits_err_output": 2.081813346673221,
    "avg_bits_err_improve": 0.02482481032736983,
    "time": 25815.315185546875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017997431866599887,
    "avg_bits_err_output": 0.017997431866599887,
    "avg_bits_err_improve": 0,
    "time": 6820.929443359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(fma (* b 4.0) b (+ (pow (hypot a b) 4.0) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.1822479328161959,
    "avg_bits_err_output": 0.013710166013303236,
    "avg_bits_err_improve": 0.16853776680289265,
    "time": 28051.48291015625,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1846298982688467,
    "avg_bits_err_output": 0.02638416165821663,
    "avg_bits_err_improve": 0.15824573661063007,
    "time": 18016.929443359375,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (+ (pow b 4.0) (+ (pow a 4.0) (+ (pow (* b a) 2.0) (pow (* b a) 2.0)))) (* 4.0 (fma (* a a) (- 1.0 a) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 18,
    "avg_bits_err_input": 0.18933762053106826,
    "avg_bits_err_output": 0.0226669227038676,
    "avg_bits_err_improve": 0.16667069782720065,
    "time": 17521.811767578125,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (* (/ 1.0 (hypot x (* 2.0 p))) (/ 1.0 (/ 1.0 x))))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.235230172694507,
    "avg_bits_err_output": 13.445044661757523,
    "avg_bits_err_improve": -0.20981448906301559,
    "time": 18398.12451171875,
    "seed": 8,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.279883517511536,
    "avg_bits_err_output": 0.0385,
    "avg_bits_err_improve": 40.24138351751154,
    "time": 5120.516845703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -2.05e-8) (/ (- (sin x) x) (- (* (sin x) (/ 1.0 (cos x))) x)) (if (<= x 1.75e-8) (/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (+ x (tan x))) (/ (- (sin x) x) (- (cbrt (pow (tan x) 3.0)) x))))",
    "output_parens": 29,
    "avg_bits_err_input": 31.887283812701988,
    "avg_bits_err_output": 29.55288455031368,
    "avg_bits_err_improve": 2.334399262388306,
    "time": 34223.868896484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (- (hypot (pow (pow (* c (- a)) 2.0) 0.25) b_2) b_2) a) (if (<= b_2 3.5e-256) (/ (fabs (- (sqrt (fma b_2 b_2 (* c (- a)))) b_2)) a) (if (<= b_2 1.2e+160) (* c (/ -1.0 (+ b_2 (sqrt (- (* b_2 b_2) (* c a)))))) (/ (* c (- a)) (* a (+ b_2 (hypot (sqrt (* c (- a))) b_2)))))))",
    "output_parens": 36,
    "avg_bits_err_input": 34.25679418892966,
    "avg_bits_err_output": 15.192935690293533,
    "avg_bits_err_improve": 19.06385849863613,
    "time": 31302.8759765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (/ (* c (- a)) (- b_2 (expm1 (log1p (hypot b_2 (pow (pow (* c a) 2.0) 0.25)))))) a) (if (<= b_2 -5.2e-213) (/ (/ (* c (- a)) a) (- b_2 (sqrt (- (* b_2 b_2) (* c a))))) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a)))",
    "output_parens": 31,
    "avg_bits_err_input": 34.646977942311466,
    "avg_bits_err_output": 19.67372738702214,
    "avg_bits_err_improve": 14.973250555289326,
    "time": 25202.48779296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (tan (* x 0.5)) (/ x (sin x))) x)",
    "output_parens": 6,
    "avg_bits_err_input": 31.51567623839316,
    "avg_bits_err_output": 0.12637782031835948,
    "avg_bits_err_improve": 31.389298418074798,
    "time": 22460.9287109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.593478801695994,
    "avg_bits_err_output": 32.31149889791109,
    "avg_bits_err_improve": 0.2819799037849009,
    "time": 42435.43505859375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.482993288620186,
    "avg_bits_err_output": 0.023125,
    "avg_bits_err_improve": 29.459868288620186,
    "time": 16414.7216796875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 (- -1.0 x)) x)",
    "output_parens": 3,
    "avg_bits_err_input": 14.84130662861528,
    "avg_bits_err_output": 0.08157312031259015,
    "avg_bits_err_improve": 14.75973350830269,
    "time": 12599.193359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -8e-9) (- (* (cos x) (log1p (expm1 (+ -1.0 (cos eps))))) (* (sin eps) (sin x))) (if (<= x 1.25e-50) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (fma (+ -1.0 (cos eps)) (cos x) (* (sin eps) (- (sin x))))))",
    "output_parens": 30,
    "avg_bits_err_input": 39.39427075411002,
    "avg_bits_err_output": 0.6797325579971598,
    "avg_bits_err_improve": 38.714538196112855,
    "time": 39470.916748046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (<= x 3.1e+184) (/ (+ x (+ x 1.0)) (* (+ (cbrt (+ x 1.0)) (cbrt x)) (+ (pow (cbrt (+ x 1.0)) 4.0) (fma x (cbrt x) (pow (* (cbrt (+ x 1.0)) (/ (/ x (cbrt x)) (cbrt x))) 2.0))))) (/ 1.0 (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (exp (* (log1p x) 0.6666666666666666)))))",
    "output_parens": 34,
    "avg_bits_err_input": 29.94498734798447,
    "avg_bits_err_output": 7.298499298891525,
    "avg_bits_err_improve": 22.646488049092945,
    "time": 25796.61083984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.263074593365097,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 30.262949593365096,
    "time": 11256.84326171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -75000.0) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 1.2e-14) (/ (- (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt c) (sqrt (* -4.0 a)))) b) (* a 2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 34.195757106768276,
    "avg_bits_err_output": 24.21741898025812,
    "avg_bits_err_improve": 9.978338126510156,
    "time": 41889.73095703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -5e-255) (* -0.5 (/ (/ 1.0 (/ 1.0 (/ (* a (* c 4.0)) a))) (- b (hypot b (sqrt (* a (* c -4.0))))))) (* -0.5 (/ (+ b (hypot (sqrt (fabs (* c (* a -4.0)))) b)) a)))",
    "output_parens": 22,
    "avg_bits_err_input": 34.44614432655109,
    "avg_bits_err_output": 19.425921617838846,
    "avg_bits_err_improve": 15.020222708712247,
    "time": 37914.654052734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.305152710857946,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 61.30452771085795,
    "time": 13001.328857421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (- (log1p n) (log n)) (* (+ (log1p n) 1.0) (* (+ (log1p n) -1.0) (+ -1.0 (exp (+ (log (pow (cbrt (+ 1.0 (/ 1.0 (+ (log1p n) 1.0)))) 2.0)) (+ (log (cbrt (exp (* 0.6666666666666666 (log1p (/ 1.0 (+ (log1p n) 1.0))))))) (log (cbrt (cbrt (+ 1.0 (/ 1.0 (+ (log1p n) 1.0)))))))))))))",
    "output_parens": 36,
    "avg_bits_err_input": 62.99370881589905,
    "avg_bits_err_output": 44.25373758354678,
    "avg_bits_err_improve": 18.739971232352268,
    "time": 48358.17236328125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.463043797532045,
    "avg_bits_err_output": 0.009,
    "avg_bits_err_improve": 58.454043797532044,
    "time": 17924.7578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(* (exp (log (/ (- (pow (/ 1.0 (+ 1.0 (/ x (tan x)))) 3.0) (/ (pow (/ x (tan x)) 6.0) (pow (+ 1.0 (/ x (tan x))) 3.0))) (fma (/ (pow (/ x (tan x)) 2.0) (+ 1.0 (/ x (tan x)))) (+ (/ 1.0 (+ 1.0 (/ x (tan x)))) (/ (pow (/ x (tan x)) 2.0) (+ 1.0 (/ x (tan x))))) (pow (+ 1.0 (/ x (tan x))) -2.0))))) (/ 1.0 x))",
    "output_parens": 43,
    "avg_bits_err_input": 59.90029006700842,
    "avg_bits_err_output": 59.89349333110885,
    "avg_bits_err_improve": 0.006796735899570194,
    "time": 37483.574462890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (/ (expm1 (* eps a)) (/ (expm1 (* eps (+ a b))) (/ (expm1 (* eps b)) eps))))",
    "output_parens": 11,
    "avg_bits_err_input": 60.35248503890346,
    "avg_bits_err_output": 28.778381694413103,
    "avg_bits_err_improve": 31.574103344490357,
    "time": 35215.873046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.71257744821935,
    "avg_bits_err_output": 0.010625,
    "avg_bits_err_improve": 40.70195244821935,
    "time": 7380.019775390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.639894128298145,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.63939412829814,
    "time": 2988.954833984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 28.49945657089388,
    "avg_bits_err_output": 0.01815499375684071,
    "avg_bits_err_improve": 28.48130157713704,
    "time": 5429.800537109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(fma (sqrt (exp x)) (exp (* x 0.5)) (+ (exp (- x)) -2.0))",
    "output_parens": 8,
    "avg_bits_err_input": 29.14058623538579,
    "avg_bits_err_output": 29.025065552216613,
    "avg_bits_err_improve": 0.11552068316917641,
    "time": 33278.173095703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(* (/ (fma (/ (+ x (* 2.0 (- 1.0 x))) x) (+ 1.0 x) (+ x -1.0)) (+ x -1.0)) (/ 1.0 (+ 1.0 x)))",
    "output_parens": 12,
    "avg_bits_err_input": 10.00177022459701,
    "avg_bits_err_output": 10.017090466152668,
    "avg_bits_err_improve": -0.015320241555658143,
    "time": 52440.129150390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(/ (+ (tan eps) (* (tan x) (* (tan eps) (tan x)))) (- 1.0 (* (tan eps) (tan x))))",
    "output_parens": 12,
    "avg_bits_err_input": 37.06446869702387,
    "avg_bits_err_output": 0.23713394251535022,
    "avg_bits_err_improve": 36.82733475450852,
    "time": 38246.2470703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.073167042723615,
    "avg_bits_err_output": 0.12969360937770438,
    "avg_bits_err_improve": 29.94347343334591,
    "time": 26703.498779296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (+ -1.0 (cos eps)) (* (cos x) (sin eps)))",
    "output_parens": 7,
    "avg_bits_err_input": 37.03248519238114,
    "avg_bits_err_output": 0.3992724225279425,
    "avg_bits_err_improve": 36.633212769853195,
    "time": 26005.781982421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.56944854718025,
    "avg_bits_err_output": 0.10404492500144234,
    "avg_bits_err_improve": 19.46540362217881,
    "time": 26148.57421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (+ 1.0 (+ N (* N N))))",
    "output_parens": 4,
    "avg_bits_err_input": 14.825275473549802,
    "avg_bits_err_output": 0.4969947286303931,
    "avg_bits_err_improve": 14.32828074491941,
    "time": 21947.1630859375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.209372297151717,
    "avg_bits_err_output": 1.4312366936942307,
    "avg_bits_err_improve": 27.778135603457486,
    "time": 27590.3115234375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07142932343849158,
    "avg_bits_err_output": 0.0779411656266226,
    "avg_bits_err_improve": -0.0065118421881310146,
    "time": 28408.93212890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (/ (* a b) -1.0) (/ (- b) (/ -1.0 a)))",
    "output_parens": 6,
    "avg_bits_err_input": 15.494462756005221,
    "avg_bits_err_output": 0.2668729328161959,
    "avg_bits_err_improve": 15.227589823189026,
    "time": 18642.00830078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* (/ 1.0 PI) (* PI (* (* angle 0.005555555555555556) (* (/ 180.0 angle) (* PI (* angle 0.005555555555555556)))))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.553976437900413,
    "avg_bits_err_output": 20.769640282010524,
    "avg_bits_err_improve": -0.21566384411011086,
    "time": 46864.0830078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (* (sin (* 2.0 (/ PI (/ 0.005555555555555556 (* angle 3.08641975308642e-5))))) (* 0.5 (+ b a))) (- b a)))",
    "output_parens": 11,
    "avg_bits_err_input": 31.68913021245405,
    "avg_bits_err_output": 22.06589061252983,
    "avg_bits_err_improve": 9.623239599924219,
    "time": 43326.251953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (fma (/ PI 180.0) (/ 1.0 (/ 1.0 angle)) 0.0))) 2.0) (pow (* b (cos (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.992348440806676,
    "avg_bits_err_output": 20.99133545628005,
    "avg_bits_err_improve": 0.001012984526624905,
    "time": 48590.446533203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (* (/ m v) (- 1.0 m)) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.18145772226222148,
    "avg_bits_err_output": 0.18177144413776233,
    "avg_bits_err_improve": -0.00031372187554085107,
    "time": 26184.201171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32372057079218763,
    "avg_bits_err_output": 0.31334727931679757,
    "avg_bits_err_improve": 0.010373291475390067,
    "time": 31039.462646484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.1403962406251803,
    "avg_bits_err_output": 0.14136560156295072,
    "avg_bits_err_improve": -0.0009693609377704193,
    "time": 25737.157958984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (fma (* (* (cos phi1) (cos phi2)) (sin lambda2)) (sin lambda1) (* (cos phi1) (* (cos phi2) (* (cos lambda1) (cos lambda2))))))) R)",
    "output_parens": 19,
    "avg_bits_err_input": 16.526754732811064,
    "avg_bits_err_output": 3.812727780467711,
    "avg_bits_err_improve": 12.714026952343353,
    "time": 43425.29052734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ c 0.5) (- (- b) (sqrt (fma b b (* a (* c -4.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 52.58784690087849,
    "avg_bits_err_output": 0.0817924812503606,
    "avg_bits_err_improve": 52.50605441962813,
    "time": 34878.477783203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -5e-15) (* (/ (/ -0.125 (pow a 3.0)) (/ 0.25 (* a a))) (/ (- (pow b 4.0) (fma (fma b b (* a (* c -4.0))) (* b b) (* (* a (* c -4.0)) (fma b b (* a (* c -4.0)))))) (* (fma b b (fma b b (* a (* c -4.0)))) (+ b (sqrt (fma b b (* a (* c -4.0)))))))) (/ (/ (* b (+ (* c (* a -4.0)) (- (* b b) (* b (sqrt (fma c (* a -4.0) (* b b))))))) (* b (sqrt (fma c (* a -4.0) (* b b))))) (* a 2.0)))",
    "output_parens": 59,
    "avg_bits_err_input": 28.054785036784796,
    "avg_bits_err_output": 25.472253570089126,
    "avg_bits_err_improve": 2.58253146669567,
    "time": 74500.06518554688,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -5e-20) (/ (fma (* b b) (- b) (pow (pow (fma (* a c) -4.0 (* b b)) 2.0) 0.75)) (* (* a 2.0) (+ (fma c (* a -4.0) (* b b)) (+ (* b b) (* b (sqrt (fma c (* a -4.0) (* b b)))))))) (* (+ (- b) (pow (pow (pow (fma c (* a -4.0) (* b b)) 0.25) 6.0) 0.3333333333333333)) (/ 0.5 a)))",
    "output_parens": 42,
    "avg_bits_err_input": 43.88496704593725,
    "avg_bits_err_output": 41.15820426852845,
    "avg_bits_err_improve": 2.7267627774088012,
    "time": 54109.87060546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -75000.0) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 1.2e-14) (/ (- (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* -4.0 a)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 34.194225814587526,
    "avg_bits_err_output": 24.21741898025812,
    "avg_bits_err_improve": 9.976806834329405,
    "time": 42038.43994140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8901279830007941,
    "avg_bits_err_output": 0.22418362766184827,
    "avg_bits_err_improve": 0.6659443553389458,
    "time": 37089.490478515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (/ (+ (pow (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))) 3.0) (* (pow (+ -4.0 (/ -8.0 (+ 1.0 (pow (exp -2.0) x)))) 3.0) (pow (+ 1.0 (pow (exp -2.0) x)) -6.0))) (+ (+ (pow (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))) 2.0) (* (pow (+ -4.0 (/ -8.0 (+ 1.0 (pow (exp -2.0) x)))) 2.0) (pow (+ 1.0 (pow (exp -2.0) x)) -4.0))) (* (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))) (* (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (+ 4.0 (/ 8.0 (+ 1.0 (pow (exp -2.0) x)))))))) (- (pow (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) 2.0)))",
    "output_parens": 62,
    "avg_bits_err_input": 29.18561948043984,
    "avg_bits_err_output": 29.17678021597513,
    "avg_bits_err_improve": 0.008839264464711505,
    "time": 108081.34204101562,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(expm1 (log1p (tanh x)))",
    "output_parens": 3,
    "avg_bits_err_input": 58.03829425603023,
    "avg_bits_err_output": 0.014073120312590144,
    "avg_bits_err_improve": 58.02422113571764,
    "time": 8944.277587890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 57.95333233912599,
    "avg_bits_err_output": 0.006875,
    "avg_bits_err_improve": 57.94645733912599,
    "time": 9388.394287109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.01337461079306209,
    "avg_bits_err_output": 0.013176490480471944,
    "avg_bits_err_improve": 0.00019812031259014602,
    "time": 3581.071044921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 32.129375,
    "avg_bits_err_output": 0.0415,
    "avg_bits_err_improve": 32.087875000000004,
    "time": 4409.51708984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.44706635597823,
    "avg_bits_err_output": 0.009,
    "avg_bits_err_improve": 58.43806635597823,
    "time": 9984.876220703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(- (log (/ x (+ 1.0 (sqrt (- 1.0 (* x x)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.04344812031259015,
    "avg_bits_err_output": 0.001771240625180289,
    "avg_bits_err_improve": 0.04167687968740986,
    "time": 4549.07666015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (/ eh (/ 1.0 (cos t))) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.12591748125036056,
    "avg_bits_err_output": 0.1577524437510817,
    "avg_bits_err_improve": -0.031834962500721126,
    "time": 38549.91357421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (pow (sqrt (hypot 1.0 (* (/ eh ew) (tan t)))) -2.0)) (* (* eh (sin t)) (sin (atan (/ (* eh (- (tan t))) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12221936093777043,
    "avg_bits_err_output": 0.12798140663848354,
    "avg_bits_err_improve": -0.005762045700713106,
    "time": 38769.967529296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (cos (* 0.5 phi2)) (cos (* 0.5 phi1)) (* (sin (* phi1 -0.5)) (sin (* 0.5 phi2))))) (- phi1 phi2)))",
    "output_parens": 15,
    "avg_bits_err_input": 38.550200061136444,
    "avg_bits_err_output": 0.12528587897160867,
    "avg_bits_err_improve": 38.424914182164834,
    "time": 36795.631103515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (fma (/ b a) (/ b a) -1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.63862258158851,
    "avg_bits_err_output": 0.013428414105516871,
    "avg_bits_err_improve": 14.625194167482993,
    "time": 3105.419677734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (log1p (expm1 (* (sin phi1) (fma (cos delta) (sin phi1) (* (cos phi1) (* (sin delta) (cos theta))))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1578551135373302,
    "avg_bits_err_output": 0.16243134229562656,
    "avg_bits_err_improve": -0.004576228758296358,
    "time": 46519.74072265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma c (* a -3.0) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 52.604906270673375,
    "avg_bits_err_output": 0.08199060156295071,
    "avg_bits_err_improve": 52.522915669110425,
    "time": 33481.686279296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* a -3.0) c) (+ b (sqrt (fma a (* -3.0 c) (* b b))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.272329037636187,
    "avg_bits_err_output": 0.45453214533134123,
    "avg_bits_err_improve": 27.817796892304845,
    "time": 36478.622314453125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (- (fma -3.0 (* c a) 0.0)) (+ b (sqrt (fma -3.0 (* c a) (* b b))))) (* -3.0 a))",
    "output_parens": 11,
    "avg_bits_err_input": 43.96643487876498,
    "avg_bits_err_output": 0.5459654187900276,
    "avg_bits_err_improve": 43.42046945997495,
    "time": 51690.456298828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (or (<= b 1.3e-28) (not (<= b 1.8e+161))) (/ 0.3333333333333333 (/ a (- (hypot b (sqrt (fabs (* a (* c -3.0))))) b))) (/ (* (/ -0.3333333333333333 (+ b (hypot b (sqrt (* a (* c -3.0)))))) (* 3.0 (* a c))) a))",
    "output_parens": 23,
    "avg_bits_err_input": 34.196854534573504,
    "avg_bits_err_output": 21.28850350348381,
    "avg_bits_err_improve": 12.908351031089694,
    "time": 42819.2158203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (sin lambda1) (cos lambda2) (* (cos lambda1) (sin (- lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (sin phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 13.156630702960724,
    "avg_bits_err_output": 0.17102888940504885,
    "avg_bits_err_improve": 12.985601813555675,
    "time": 50363.10546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ -1.0 (- (* x (/ (+ x -1.0) (+ x 1.0))) x)) (+ x -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 29.514354193511846,
    "avg_bits_err_output": 25.452870114416317,
    "avg_bits_err_improve": 4.061484079095528,
    "time": 48690.914794921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.013,
    "avg_bits_err_output": 0.013,
    "avg_bits_err_improve": 0,
    "time": 7235.68896484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (+ -1.0 x)) (- -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.359911804127425,
    "avg_bits_err_output": 0.074625,
    "avg_bits_err_improve": 14.285286804127425,
    "time": 20078.11181640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 20000.0) (/ (- (pow (* (cbrt (* F (+ A (- C (hypot B (- A C)))))) (cbrt (* 2.0 (fma B B (* A (* C -4.0)))))) 1.5)) (- (* B B) (* 4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (/ (- (pow (* (cbrt (* 2.0 (* F (fma C (* A -4.0) (* B B))))) (cbrt (+ A (- C (hypot B (- A C)))))) 1.5)) (- (* B B) (* 4.0 (* A C)))) (/ (- (sqrt (* (+ A (- C (hypot B (- A C)))) (* 2.0 (log (pow (exp F) (fma B B (* C (* A -4.0))))))))) (fma B B (* C (* A -4.0))))))",
    "output_parens": 102,
    "avg_bits_err_input": 52.764235445500084,
    "avg_bits_err_output": 42.639397249587695,
    "avg_bits_err_improve": 10.124838195912389,
    "time": 60711.894287109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.396248183615747,
    "avg_bits_err_output": 13.955273545564125,
    "avg_bits_err_improve": 15.440974638051621,
    "time": 29642.997802734375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= C -0.08) (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (/ (- (sqrt F)) (hypot B (* (sqrt (* C -4.0)) (sqrt A))))) (if (<= C 7.2e-191) (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (/ (- (sqrt F)) (hypot B (pow (pow (* A (* C -4.0)) 2.0) 0.25)))) (if (<= C 1.3e-71) (/ (* (/ F (/ (sqrt (+ (* F (* B B)) (* F (* A (* C -4.0))))) (fma B B (* A (* C -4.0))))) (- (sqrt (* 2.0 (+ C (+ A (hypot B (- A C)))))))) (+ (* B B) (* -4.0 (* C A)))) (if (<= C 3e+74) (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (/ (- (sqrt F)) (hypot B (pow (pow (* A (* C -4.0)) 2.0) 0.25)))) (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (/ (- (sqrt F)) (hypot B (* (sqrt (* A -4.0)) (sqrt C)))))))))",
    "output_parens": 93,
    "avg_bits_err_input": 52.38526105972533,
    "avg_bits_err_output": 36.88565055617458,
    "avg_bits_err_improve": 15.499610503550748,
    "time": 63460.219970703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt (/ 0.5 a)) (/ 1.0 (cbrt g)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.471001910125102,
    "avg_bits_err_output": 0.8565903049229816,
    "avg_bits_err_improve": 14.61441160520212,
    "time": 22022.6318359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (* (cbrt (/ 0.5 a)) (cbrt (- (hypot g h) g))) (* (cbrt (/ -0.5 a)) (cbrt (+ g (hypot g h)))))",
    "output_parens": 13,
    "avg_bits_err_input": 36.41911381376894,
    "avg_bits_err_output": 2.627310199826383,
    "avg_bits_err_improve": 33.791803613942555,
    "time": 35864.405029296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9922577078205239,
    "avg_bits_err_output": 0.0365734968798678,
    "avg_bits_err_improve": 0.9556842109406561,
    "time": 25380.146240234375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- (log1p (exp (- b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7405,
    "avg_bits_err_output": 0.008557204672623971,
    "avg_bits_err_improve": 0.731942795327376,
    "time": 10741.300537109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -5e+258) (/ (* a1 (/ a2 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-289) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+288) (/ (* a1 a2) (* b1 b2)) (/ a1 (* b2 (/ b1 a2)))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.56122765733664,
    "avg_bits_err_output": 3.5014141951639766,
    "avg_bits_err_improve": 8.059813462172665,
    "time": 10780.322265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4620794223799711,
    "avg_bits_err_output": 0.4232259193652572,
    "avg_bits_err_improve": 0.03885350301471391,
    "time": 15451.662353515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -50.0) (- (log1p 0.0) (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 52.80995237557292,
    "avg_bits_err_output": 0.040738896115119376,
    "avg_bits_err_improve": 52.7692134794578,
    "time": 21198.90087890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.6820655613684465,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.6820655613684465,
    "time": 3102.13623046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (* (pow (- 1.0 (* x x)) -0.5) (- 1.0 x))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.013,
    "avg_bits_err_improve": 0.0010000000000000009,
    "time": 5980.443603515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1242.48291015625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (/ 2.0 (* r r)) (- -1.5 (* (* (* r w) (* r w)) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 12.81312687351412,
    "avg_bits_err_output": 0.32245298812355033,
    "avg_bits_err_improve": 12.490673885390569,
    "time": 31553.80126953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (/ (+ x1 (pow x1 3.0)) (/ (fma x1 (fma (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0)) -6.0) -1.0) (+ -1.0 (pow (* x1 (fma (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0)) -6.0)) 2.0)))))))",
    "output_parens": 46,
    "avg_bits_err_input": 0.5178261617280987,
    "avg_bits_err_output": 0.3296660405667774,
    "avg_bits_err_improve": 0.1881601211613213,
    "time": 94975.1474609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 17.86576924066963,
    "avg_bits_err_output": 1.4303552488034164,
    "avg_bits_err_improve": 16.435413991866213,
    "time": 7070.002197265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (fma x (* x -0.12900613773279798) 0.954929658551372))",
    "output_parens": 3,
    "avg_bits_err_input": 0.2370827222622215,
    "avg_bits_err_output": 0.1838043234384916,
    "avg_bits_err_improve": 0.053278398823729894,
    "time": 20540.745849609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(+ (pow y 4.0) (+ (pow x 4.0) (* (pow y 4.0) -2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0031981203125901443,
    "avg_bits_err_output": 0.012073120312590144,
    "avg_bits_err_improve": -0.008875000000000001,
    "time": 32198.893798828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* 0.5 (/ PI (+ b a))) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 13.890576369762117,
    "avg_bits_err_output": 0.24550037656727752,
    "avg_bits_err_improve": 13.64507599319484,
    "time": 60978.25390625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(if (<= eps -0.04) (/ (fma (+ 1.0 (/ 1.0 eps)) (exp (* (+ eps -1.0) x)) (/ (/ (* (+ 1.0 (/ 1.0 eps)) (- 1.0 (pow eps -2.0))) (pow (+ 1.0 (/ 1.0 eps)) 2.0)) (exp (fma eps x x)))) 2.0) (if (<= eps 5e-16) (/ (+ (* (pow (exp x) (+ eps -1.0)) (- 1.0 eps)) (exp (+ (* (+ eps -1.0) x) (log1p eps)))) 2.0) (/ (+ (* (+ 1.0 (/ 1.0 eps)) (exp (* (+ eps -1.0) x))) (/ (+ 1.0 (/ -1.0 eps)) (exp (* x (+ eps 1.0))))) 2.0)))",
    "output_parens": 49,
    "avg_bits_err_input": 29.582559723460626,
    "avg_bits_err_output": 0.8796395548741407,
    "avg_bits_err_improve": 28.702920168586484,
    "time": 54582.40478515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (/ (+ 4.0 (/ (/ -4.0 (+ 1.0 t)) (+ 1.0 t))) (+ 2.0 (/ 2.0 (+ 1.0 t)))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.021875,
    "avg_bits_err_output": 0.006875,
    "avg_bits_err_improve": 0.015,
    "time": 18611.43701171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.025125,
    "avg_bits_err_output": 0.00925,
    "avg_bits_err_improve": 0.015875,
    "time": 20560.48388671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ (* t (/ 4.0 (/ (+ 1.0 t) t))) (+ 1.0 t))) (+ 2.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.033375,
    "avg_bits_err_output": 0.08331616562662263,
    "avg_bits_err_improve": -0.049941165626622624,
    "time": 15400.927490234375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3316.038330078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3293.772705078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4402.100830078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.85217844556147,
    "avg_bits_err_output": 0.250625,
    "avg_bits_err_improve": 7.6015534455614695,
    "time": 21448.37939453125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.356420441774422,
    "avg_bits_err_output": 7.356420441774422,
    "avg_bits_err_improve": 0,
    "time": 22363.19384765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(fma (* x 2.0) eps (* eps eps))",
    "output_parens": 3,
    "avg_bits_err_input": 16.065916226199413,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 16.057791226199413,
    "time": 8285.1572265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.545927065533903,
    "avg_bits_err_output": 0.3880407906338345,
    "avg_bits_err_improve": 3.1578862749000685,
    "time": 23389.3779296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.232342327066089,
    "avg_bits_err_output": 0.018901128127343767,
    "avg_bits_err_improve": 15.213441198938746,
    "time": 18246.078857421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.28054089694213,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.28054089694213,
    "time": 4040.180419921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.16200663003109,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.16125663003109,
    "time": 5594.51318359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.297375,
    "avg_bits_err_improve": 63.702625,
    "time": 67917.71020507812,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84324714829695,
    "avg_bits_err_output": 0.3079906015629507,
    "avg_bits_err_improve": 61.535256546734004,
    "time": 13531.4384765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -5e-255) (* -0.5 (/ (/ 1.0 (/ 1.0 (/ (* a (* c 4.0)) a))) (- b (hypot b (sqrt (* a (* c -4.0))))))) (* -0.5 (/ (+ b (hypot (sqrt (fabs (* c (* a -4.0)))) b)) a)))",
    "output_parens": 22,
    "avg_bits_err_input": 34.44614432655109,
    "avg_bits_err_output": 19.425921617838846,
    "avg_bits_err_improve": 15.020222708712247,
    "time": 38535.7236328125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -75000.0) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 1.2e-14) (/ (- (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* -4.0 a)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 34.194225814587526,
    "avg_bits_err_output": 24.21741898025812,
    "avg_bits_err_improve": 9.976806834329405,
    "time": 43034.444580078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2276.54296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.02494290489038,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 40.01456790489038,
    "time": 2742.877685546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (/ (- x y) (hypot x y)) (+ x y)) (hypot x y))",
    "output_parens": 7,
    "avg_bits_err_input": 20.003784732652008,
    "avg_bits_err_output": 0.03394625664136817,
    "avg_bits_err_improve": 19.96983847601064,
    "time": 18089.1865234375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (fma 1.0 (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.640094545805552,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.640094545805552,
    "time": 44514.02294921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03475,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.034375,
    "time": 10997.319580078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ b a)) (* a (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02429248125036058,
    "avg_bits_err_output": 0.01625,
    "avg_bits_err_improve": 0.00804248125036058,
    "time": 10761.553955078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.013625,
    "avg_bits_err_improve": 0,
    "time": 8451.474609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 1661.189697265625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ e (+ d c)) (+ b a))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4062834593805893,
    "avg_bits_err_output": 0.309625,
    "avg_bits_err_improve": 0.09665845938058931,
    "time": 17370.548583984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.794982550211905,
    "avg_bits_err_output": 0.008375,
    "avg_bits_err_improve": 29.786607550211905,
    "time": 12372.7724609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (/ (- (* x x) eps) (sqrt (- (* x x) eps)))))",
    "output_parens": 8,
    "avg_bits_err_input": 24.974306063092257,
    "avg_bits_err_output": 0.043658082813311294,
    "avg_bits_err_improve": 24.930647980278945,
    "time": 19498.80712890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (/ (fma (- -1.0 (cos (+ x x))) (pow (/ x (tan x)) 4.0) (* 2.0 (pow (/ x (tan x)) 6.0))) (* 2.0 (pow (sqrt (/ (tan x) x)) -8.0))) (+ (/ x (tan x)) (cos x)))",
    "output_parens": 22,
    "avg_bits_err_input": 29.917198975434502,
    "avg_bits_err_output": 29.912856700221884,
    "avg_bits_err_improve": 0.004342275212618318,
    "time": 50404.33984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005448120312590145,
    "avg_bits_err_output": 0.005448120312590145,
    "avg_bits_err_improve": 0,
    "time": 1792.496826171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 50000000.0) (* (* 100.0 (/ n i)) (+ (pow (+ 1.0 (/ i n)) n) -1.0)) (* n (/ (+ (* 100.0 (pow (exp n) (log1p (/ i n)))) -100.0) i))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.42313709608519,
    "avg_bits_err_output": 10.730151125525405,
    "avg_bits_err_improve": 36.69298597055979,
    "time": 34559.21142578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) INFINITY) (/ (/ (fma c a (* b d)) (hypot c d)) (hypot c d)) (* (/ (- (* (/ (* b d) (hypot d c)) (/ (* b d) (hypot d c))) (* (/ a (/ (hypot d c) c)) (/ a (/ (hypot d c) c)))) (- (/ (* b d) (hypot d c)) (/ a (/ (hypot d c) c)))) (/ 1.0 (hypot c d))))",
    "output_parens": 41,
    "avg_bits_err_input": 26.400683635839055,
    "avg_bits_err_output": 15.151028938295697,
    "avg_bits_err_improve": 11.249654697543358,
    "time": 22735.87109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (* (/ a (hypot c d)) (/ d (hypot c d))))",
    "output_parens": 11,
    "avg_bits_err_input": 25.865055488060655,
    "avg_bits_err_output": 0.9930916799016802,
    "avg_bits_err_improve": 24.871963808158974,
    "time": 23927.261474609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- 1.0 ux) (* ux maxCos))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03575,
    "avg_bits_err_output": 0.03575,
    "avg_bits_err_improve": 0,
    "time": 9417.57470703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- 1.0 (log (+ 1.0 (expm1 (log1p (expm1 (pow (fma ux maxCos (- 1.0 ux)) 12.0))))))) (* (+ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (pow (fma ux maxCos (- 1.0 ux)) 4.0)) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 6.0))))))",
    "output_parens": 28,
    "avg_bits_err_input": 13.53660620613949,
    "avg_bits_err_output": 11.970750102811639,
    "avg_bits_err_improve": 1.5658561033278513,
    "time": 62375.037109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* uy (* 2.0 PI))) (sqrt (+ (/ (- 1.0 (/ (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 18.0) (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 12.0))) (* (fma (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) (fma (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux)) 1.0) 1.0) (+ 1.0 (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 3.0)))) (* ux (- (fma ux maxCos 1.0) ux)))))",
    "output_parens": 38,
    "avg_bits_err_input": 13.573655209608024,
    "avg_bits_err_output": 11.294998520696394,
    "avg_bits_err_improve": 2.2786566889116298,
    "time": 65910.6298828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- 1.0 ux) (* maxCos zi)) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (/ (pow (* 2.0 (* PI uy)) 2.0) (* 2.0 (* PI uy)))) xi) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.3487942396280732,
    "avg_bits_err_output": 0.3482174044151728,
    "avg_bits_err_improve": 0.0005768352129004173,
    "time": 70375.07592773438,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.19875731732960175,
    "avg_bits_err_output": 0.19632332382517223,
    "avg_bits_err_improve": 0.0024339935044295213,
    "time": 54065.320556640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(/ (sin (* 6.28318530718 u2)) (sqrt (/ (- 1.0 u1) u1)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5274287772379858,
    "avg_bits_err_output": 0.5286273829110049,
    "avg_bits_err_improve": -0.0011986056730191041,
    "time": 29813.539306640625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3212644161665526,
    "avg_bits_err_output": 0.31840620208573783,
    "avg_bits_err_improve": 0.0028582140808147694,
    "time": 26217.453125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ (- 1.0 u) (+ 1.0 (exp (* PI (/ 1.0 s))))))) -1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.3398029990847761,
    "avg_bits_err_output": 0.34057423970995643,
    "avg_bits_err_improve": -0.0007712406251803028,
    "time": 32212.2392578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.055718613676711756,
    "avg_bits_err_output": 0.04193243549330766,
    "avg_bits_err_improve": 0.013786178183404094,
    "time": 17897.855712890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ 0.5 s) (+ (cosh (/ (fabs x) s)) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.16732094247556387,
    "avg_bits_err_output": 0.17170391200653948,
    "avg_bits_err_improve": -0.004382969530975611,
    "time": 24611.348388671875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6693614518190241,
    "avg_bits_err_output": 0.6693614518190241,
    "avg_bits_err_improve": 0,
    "time": 32736.813232421875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (pow (cbrt (* v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)))) 3.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.14976554748583387,
    "avg_bits_err_output": 0.183072151140936,
    "avg_bits_err_improve": -0.03330660365510213,
    "time": 32516.197509765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* eta eta) 5.000001076526666e-40) (asin (/ h (hypot eta (sqrt (/ sinTheta_O (/ (hypot 1.0 sinTheta_O) sinTheta_O)))))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.5517181718552395,
    "avg_bits_err_output": 0.418028006937249,
    "avg_bits_err_improve": 2.1336901649179905,
    "time": 30556.637939453125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* (exp (/ (* sinTheta_O (- sinTheta_i)) v)) (* cosTheta_i (* cosTheta_O (/ 1.0 v)))) (/ (* (sinh (/ 1.0 v)) 2.0) (/ 1.0 v)))",
    "output_parens": 14,
    "avg_bits_err_input": 0.46066836139509765,
    "avg_bits_err_output": 0.36351893651278167,
    "avg_bits_err_improve": 0.09714942488231598,
    "time": 47367.024169921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (pow (sqrt (exp (+ (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (+ (/ -1.0 v) 0.6931)))) 2.0) (/ 0.5 v))",
    "output_parens": 12,
    "avg_bits_err_input": 0.1147120518670971,
    "avg_bits_err_output": 0.1134977873722493,
    "avg_bits_err_improve": 0.0012142644948477943,
    "time": 33973.9873046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45996173427410836,
    "avg_bits_err_output": 0.41050650275509765,
    "avg_bits_err_improve": 0.04945523151901071,
    "time": 47749.908203125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (/ (- 0.25 u) 0.75)) (* s -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.317276311743076,
    "avg_bits_err_output": 0.5491986690463937,
    "avg_bits_err_improve": 0.7680776426966822,
    "time": 31218.43701171875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.682042951267007,
    "avg_bits_err_output": 0.20425,
    "avg_bits_err_improve": 12.477792951267007,
    "time": 25288.328369140625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ (/ 0.125 s) PI) (+ (/ (exp (/ (- r) s)) r) (/ (pow (exp -1.0) (* (/ r s) 0.3333333333333333)) r)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.13378643935956866,
    "avg_bits_err_output": 0.15492919332850033,
    "avg_bits_err_improve": -0.02114275396893167,
    "time": 81809.42407226562,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9084112578988484,
    "avg_bits_err_output": 0.7385069387986645,
    "avg_bits_err_improve": 0.1699043191001839,
    "time": 39969.30078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (/ (* (pow PI -0.16666666666666666) (sqrt (- 1.0 (+ cosTheta cosTheta)))) cosTheta) (cbrt PI)) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.678554291109187,
    "avg_bits_err_output": 0.40453288778277857,
    "avg_bits_err_improve": 0.2740214033264084,
    "time": 26296.83544921875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p u1) (log1p (* u1 (- u1))))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.461463227361117,
    "avg_bits_err_output": 0.5393046595552139,
    "avg_bits_err_improve": 12.922158567805903,
    "time": 30039.72998046875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (/ (* PI (* PI u2)) PI))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.50769491823571,
    "avg_bits_err_output": 0.3230537997633024,
    "avg_bits_err_improve": 13.184641118472408,
    "time": 29905.4814453125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- (* alpha alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.041905495798238,
    "avg_bits_err_output": 0.3329624062518029,
    "avg_bits_err_improve": 13.708943089546436,
    "time": 27231.313720703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ (/ cos2phi alphax) alphax) (/ sin2phi (* alphay alphay))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.349824006685278,
    "avg_bits_err_output": 0.5216392617643689,
    "avg_bits_err_improve": 11.82818474492091,
    "time": 29150.5537109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (or (<= (* PI l) -5e+20) (not (<= (* PI l) 500000000000.0))) (+ (* PI l) -1.0) (- (* PI l) (/ (/ 1.0 F) (/ F (tan (* PI l))))))",
    "output_parens": 16,
    "avg_bits_err_input": 17.053863350340244,
    "avg_bits_err_output": 0.6497142989249134,
    "avg_bits_err_improve": 16.40414905141533,
    "time": 36689.85986328125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(/ (- 1.0 (* x (cos B))) (sin B))",
    "output_parens": 5,
    "avg_bits_err_input": 0.217504167120048,
    "avg_bits_err_output": 0.1879838503895652,
    "avg_bits_err_improve": 0.029520316730482804,
    "time": 22606.001708984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 14.088389699750529,
    "avg_bits_err_output": 10.7766638553418,
    "avg_bits_err_improve": 3.3117258444087287,
    "time": 35278.56787109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (log (cbrt (pow (/ (cosh (* PI (* 0.25 f))) (sinh (* PI (* 0.25 f)))) (/ 3.0 PI)))) -4.0)",
    "output_parens": 12,
    "avg_bits_err_input": 61.656665015601824,
    "avg_bits_err_output": 1.544177730693536,
    "avg_bits_err_improve": 60.11248728490829,
    "time": 38398.76220703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (or (<= t -3.4e-78) (not (<= t 4.6e-6))) (/ (* t (sqrt 2.0)) (sqrt (+ (* (- -1.0 x) (/ (* (* t t) -2.0) (+ x -1.0))) (* l (- (* l (/ (+ x 1.0) (+ x -1.0))) l))))) (* t (/ (sqrt 2.0) (hypot l (sqrt (* (/ (+ x 1.0) (+ x -1.0)) (fma l l (* 2.0 (* t t)))))))))",
    "output_parens": 34,
    "avg_bits_err_input": 43.0332305403977,
    "avg_bits_err_output": 37.28722737666428,
    "avg_bits_err_improve": 5.74600316373342,
    "time": 46374.396728515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(/ (sin th) (/ (hypot (sin ky) (sin kx)) (sin ky)))",
    "output_parens": 7,
    "avg_bits_err_input": 3.822046058506583,
    "avg_bits_err_output": 0.22638966250649017,
    "avg_bits_err_improve": 3.5956563960000927,
    "time": 26658.3193359375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 1.0909239778258346,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 1.0842989778258345,
    "time": 10524.11767578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (+ (+ 1.0 (pow (/ Om Omc) 2.0)) -1.0))) (hypot 1.0 (* (/ t l) (sqrt 2.0)))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.250903229399619,
    "avg_bits_err_output": 1.0463574908981998,
    "avg_bits_err_improve": 9.20454573850142,
    "time": 28690.2109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U)))) 0.0) (* (sqrt n) (sqrt (+ (* (* (/ l Om) (fma l -2.0 (* (/ l Om) (* n (- U* U))))) (* 2.0 U)) (* t (* 2.0 U))))) (if (<= (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U)))) 2e+293) (sqrt (* (* (* 2.0 n) U) (+ (+ t (* -2.0 (* l (/ l Om)))) (* (* n (pow (/ l Om) 2.0)) (- U* U))))) (* (sqrt (* (* 2.0 n) (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t))) (sqrt U))))",
    "output_parens": 71,
    "avg_bits_err_input": 34.73260626226498,
    "avg_bits_err_output": 28.310426349002626,
    "avg_bits_err_improve": 6.4221799132623545,
    "time": 45140.73583984375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ (/ (/ l k) (sin k)) (* (/ k l) (* t 0.5))) (tan k))",
    "output_parens": 9,
    "avg_bits_err_input": 47.42179906374774,
    "avg_bits_err_output": 1.3018694900206507,
    "avg_bits_err_improve": 46.11992957372709,
    "time": 76146.15551757812,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -7.5e-38) (not (<= t 1.25e-114))) (* 2.0 (/ (/ (/ (/ l t) (+ 2.0 (pow (/ k t) 2.0))) (tan k)) (* (/ t l) (* t (sin k))))) (* (/ 2.0 (* t (fma (* (sin k) (* t (* t (tan k)))) 2.0 (* (* (tan k) (sin k)) (pow (/ (* t k) t) 2.0))))) (* l l)))",
    "output_parens": 35,
    "avg_bits_err_input": 32.4004713729434,
    "avg_bits_err_output": 10.076545954619833,
    "avg_bits_err_improve": 22.32392541832357,
    "time": 69954.7685546875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (* (sqrt 0.5) (cos th)) (+ (* a2 a2) (* a1 a1)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5111644765845871,
    "avg_bits_err_output": 0.46681278439357105,
    "avg_bits_err_improve": 0.044351692191016034,
    "time": 31495.95849609375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(if (<= n 1.16e+14) (pow (/ k (pow (* PI (* 2.0 n)) (- 1.0 k))) -0.5) (/ (sqrt (* k (pow (* 2.0 (* PI n)) (- 1.0 k)))) k))",
    "output_parens": 15,
    "avg_bits_err_input": 0.4632588704756291,
    "avg_bits_err_output": 0.4117939981927998,
    "avg_bits_err_improve": 0.051464872282829255,
    "time": 27186.6962890625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* J (* 2.0 (* (sinh l) (cos (* K 0.5))))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.31387788804528,
    "avg_bits_err_output": 0.08556372187554086,
    "avg_bits_err_improve": 17.22831416616974,
    "time": 30419.005126953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 2.0) (/ (cos (- (pow (pow (cbrt (cbrt (* K (* (+ m n) 0.5)))) 3.0) 3.0) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (+ m (- l n))))) (/ (cos (- (pow (/ (* (+ m n) 0.5) (/ (cbrt (* (pow (* K (+ m n)) 2.0) 0.25)) K)) 3.0) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (+ m (- l n))))))",
    "output_parens": 56,
    "avg_bits_err_input": 15.628191190906573,
    "avg_bits_err_output": 1.3312309372836986,
    "avg_bits_err_improve": 14.296960253622874,
    "time": 45193.581787109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (cos (/ K 2.0)) (* -2.0 (hypot 1.0 (* 0.5 (/ (/ U J) (cos (* K 0.5))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.778667481250363,
    "avg_bits_err_output": 8.324554323438491,
    "avg_bits_err_improve": 9.454113157811872,
    "time": 36701.530517578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) -5e+279) (* w0 (sqrt (- 1.0 (/ (* M (* D (/ h d))) (* l (* (/ 4.0 D) (/ d M))))))) (if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) 4e-27) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (+ 1.0 (/ (* (* M D) (* h 0.5)) (* d (* (* l (/ d M)) (/ -2.0 D)))))))))",
    "output_parens": 48,
    "avg_bits_err_input": 14.522832118794017,
    "avg_bits_err_output": 9.249703887044713,
    "avg_bits_err_improve": 5.273128231749304,
    "time": 95777.15893554688,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (/ (/ c0 (sqrt l)) (/ (sqrt (- V)) (sqrt (- A)))) (if (<= (* V l) -1e-292) (/ (sqrt (- A)) (/ (sqrt (* V (- l))) c0)) (if (<= (* V l) 5e-314) (* (/ c0 l) (sqrt (/ A (/ V l)))) (if (<= (* V l) 4e+307) (* c0 (/ (sqrt A) (sqrt (* V l)))) (/ (/ (sqrt A) (sqrt V)) (/ (sqrt l) c0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 19.03724219765438,
    "avg_bits_err_output": 5.875732852737901,
    "avg_bits_err_improve": 13.161509344916478,
    "time": 36197.65673828125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= M -9.8e+144) (log (pow (pow (exp (/ 0.5 w)) c0) (fma c0 (* (/ d w) (/ (/ d (* h D)) D)) (sqrt (- (pow (* c0 (* (/ d w) (/ (/ d (* h D)) D))) 2.0) (* M M)))))) (if (<= M -6.4e-127) (* c0 (* (/ 0.5 w) (/ (* M M) (- (/ (pow (/ d D) 2.0) (* w (/ h c0))) (sqrt (- (pow (/ (pow (/ d D) 2.0) (* w (/ h c0))) 2.0) (* M M))))))) (if (<= M 6.4e-296) (* c0 (* (/ (* M M) (fma (/ d h) (/ (* (* c0 (pow D -2.0)) (- d)) w) (sqrt (- (pow (* d (* (/ d h) (/ 1.0 (* D (* D (/ w c0)))))) 2.0) (* M M))))) (/ -0.5 w))) (if (<= M 1.5e+27) (/ (* M (* c0 (* M 0.5))) (* w (- (* (/ c0 (* w h)) (* (/ d D) (/ d D))) (sqrt (- (pow (* (/ c0 (* w h)) (* (/ d D) (/ d D))) 2.0) (* M M)))))) (if (<= M 3.5e+152) (* c0 (* (/ 0.5 w) (/ M (/ (- (* d (* (/ d h) (* (pow D -2.0) (/ c0 w)))) (sqrt (- (pow (* d (* (/ d h) (* (pow D -2.0) (/ c0 w)))) 2.0) (* M M)))) M)))) (log (pow (pow (exp (/ 0.5 w)) c0) (fma c0 (* (/ d w) (/ (/ d (* h D)) D)) (sqrt (- (pow (* c0 (* (/ d w) (/ (/ d (* h D)) D))) 2.0) (* M M)))))))))))",
    "output_parens": 139,
    "avg_bits_err_input": 59.62991978504072,
    "avg_bits_err_output": 36.203869650683934,
    "avg_bits_err_improve": 23.426050134356785,
    "time": 97180.2470703125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= l -9e-64) (* (* (* (sqrt (- d)) (sqrt (/ -1.0 h))) (sqrt (/ d l))) (- 1.0 (/ h (/ (* l (/ (/ d D) (* M (/ D d)))) (* M 0.125))))) (if (<= l -5e-311) (* (* (pow (/ d h) 0.5) (/ (sqrt (- d)) (sqrt (- l)))) (+ 1.0 (/ (* (* h (pow (* M (* D (/ 0.5 d))) 2.0)) -0.5) l))) (if (<= l 7.6e+260) (/ (* d (- -1.0 (/ (* h (* (pow (* M (/ D d)) 2.0) -0.125)) l))) (* (sqrt l) (- (sqrt h)))) (* (* (sqrt (/ d h)) (/ (sqrt d) (sqrt l))) (- 1.0 (fma (* (* (/ h l) -0.5) (* M (* (/ D d) -0.5))) (* M (* (/ D d) 0.5)) 0.0))))))",
    "output_parens": 72,
    "avg_bits_err_input": 26.625379458411643,
    "avg_bits_err_output": 15.590069715888522,
    "avg_bits_err_improve": 11.035309742523122,
    "time": 108864.03759765625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (- (/ 0.25 (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (/ (/ 0.25 (fma x x 1.0)) (+ 0.5 (/ 0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 17,
    "avg_bits_err_input": 15.827180933665998,
    "avg_bits_err_output": 15.327136444871199,
    "avg_bits_err_improve": 0.5000444887947992,
    "time": 35757.046630859375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9823231203125902,
    "avg_bits_err_output": 0.013073120312590145,
    "avg_bits_err_improve": 0.9692500000000001,
    "time": 4866,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (- 1.0 (* v v)))) (* t (sqrt (fma (* v v) -6.0 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.46706241769983164,
    "avg_bits_err_output": 0.2687312031259014,
    "avg_bits_err_improve": 0.19833121457393027,
    "time": 20193.26904296875,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (- 1.0 (* v v)) (sqrt (* 2.0 (fma (* v v) -3.0 1.0)))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.012896240625180291,
    "avg_bits_err_output": 0.0105,
    "avg_bits_err_improve": 0.0023962406251802904,
    "time": 4462.853271484375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(+ (expm1 (log1p (- (+ 1.0 PI) (acos (/ (fma v (* v -5.0) 1.0) (- 1.0 (* v v))))))) -1.0)",
    "output_parens": 11,
    "avg_bits_err_input": 0.5246140864383407,
    "avg_bits_err_output": 0.5268744893532832,
    "avg_bits_err_improve": -0.00226040291494245,
    "time": 42683.16455078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (- (/ -1.0 a) (/ k (/ a (+ k 10.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.1306996052535694,
    "avg_bits_err_output": 0.23933942334629135,
    "avg_bits_err_improve": 1.891360181907278,
    "time": 24659.31787109375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02299749334274228,
    "avg_bits_err_output": 0.02299749334274228,
    "avg_bits_err_improve": 0,
    "time": 6949.296630859375,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (pow (hypot a b) 4.0) (+ (* 4.0 (* b b)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.18560825061850234,
    "avg_bits_err_output": 0.018627647263663817,
    "avg_bits_err_improve": 0.16698060335483852,
    "time": 31649.353515625,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1839420758309814,
    "avg_bits_err_output": 0.02525783184316084,
    "avg_bits_err_improve": 0.15868424398782055,
    "time": 26071.880126953125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (pow (hypot a b) 4.0) (fma a (* a (fma a -4.0 4.0)) (fma (* b b) (fma a 4.0 12.0) -1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.1864564212650287,
    "avg_bits_err_output": 0.031036682425804915,
    "avg_bits_err_improve": 0.15541973883922378,
    "time": 23152.517578125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ (/ x (hypot x (* p 2.0))) 1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 13.228236724088283,
    "avg_bits_err_output": 13.226077346876293,
    "avg_bits_err_improve": 0.002159377211990332,
    "time": 26287.19580078125,
    "seed": 9,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.60856231977707,
    "avg_bits_err_output": 0.03025,
    "avg_bits_err_improve": 41.57831231977707,
    "time": 10394.052978515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -1.35e-15) (/ (- (cbrt (* (pow (sin x) 6.0) (pow (+ x (sin x)) -3.0))) (/ x (/ (+ x (sin x)) x))) (fma (pow (cbrt (tan x)) 2.0) (cbrt (tan x)) (- x))) (if (<= x 4.5e-60) (/ (- (/ (pow (sin x) 2.0) (+ x (sin x))) (/ x (/ (+ x (sin x)) x))) (/ (- x (/ (* x x) (tan x))) (/ x (tan x)))) (/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (+ (pow (* (pow (tan x) 6.0) (pow (+ x (tan x)) -3.0)) 0.3333333333333333) (/ (- x) (/ (+ x (tan x)) x))))))",
    "output_parens": 63,
    "avg_bits_err_input": 31.193350173374697,
    "avg_bits_err_output": 14.453113740029803,
    "avg_bits_err_improve": 16.740236433344894,
    "time": 44999.910888671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- INFINITY)) (/ (- (hypot b_2 (* (sqrt (- a)) (sqrt c))) b_2) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) -2e-222) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 5e-226) (/ (/ (* a (- c)) (+ b_2 (hypot (sqrt (* a (- c))) b_2))) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 5e+294) (+ (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (fma (/ -1.0 a) b_2 (/ b_2 a))) (/ (- (hypot b_2 (* (sqrt (- c)) (sqrt a))) b_2) a)))))",
    "output_parens": 72,
    "avg_bits_err_input": 34.538466372829376,
    "avg_bits_err_output": 21.35049104871102,
    "avg_bits_err_improve": 13.187975324118355,
    "time": 35808.552490234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -2.9e+156) (/ c (- (hypot b_2 (sqrt (* c (- a)))) b_2)) (if (<= b_2 2.4e-241) (/ (- c) (- b_2 (sqrt (- (* b_2 b_2) (* c a))))) (if (<= b_2 2.5e+148) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a) (/ (fma b_2 (- -1.0 (/ b_2 (hypot b_2 (sqrt (* c a))))) (/ a (/ (hypot b_2 (sqrt (* c a))) c))) a))))",
    "output_parens": 38,
    "avg_bits_err_input": 34.359671427520006,
    "avg_bits_err_output": 15.63712011477483,
    "avg_bits_err_improve": 18.722551312745175,
    "time": 31986.934814453125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (* (/ (sin x) x) (tan (/ x 2.0))) x)",
    "output_parens": 6,
    "avg_bits_err_input": 31.863183204671362,
    "avg_bits_err_output": 0.12330470000576932,
    "avg_bits_err_improve": 31.739878504665594,
    "time": 24472.404541015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (/ 1.0 (exp (/ (log1p x) (- n)))) (pow x (/ 1.0 n)))",
    "output_parens": 8,
    "avg_bits_err_input": 32.715736835205774,
    "avg_bits_err_output": 32.460414765871796,
    "avg_bits_err_improve": 0.25532206933397816,
    "time": 39423.677978515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 28.931379202585735,
    "avg_bits_err_output": 0.00875,
    "avg_bits_err_improve": 28.922629202585735,
    "time": 13168.480712890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (* (fma x -1.0 -1.0) (pow (+ x 1.0) -2.0)) (/ 1.0 x))",
    "output_parens": 6,
    "avg_bits_err_input": 14.697968263542883,
    "avg_bits_err_output": 0.07984436093777043,
    "avg_bits_err_improve": 14.618123902605113,
    "time": 12248.543212890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (* (cos x) (/ (pow (sin eps) 2.0) (- -1.0 (cos eps)))) (* (sin eps) (sin x)))",
    "output_parens": 11,
    "avg_bits_err_input": 39.53909484960069,
    "avg_bits_err_output": 0.6357198925700555,
    "avg_bits_err_improve": 38.90337495703063,
    "time": 36779.021728515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (fma (cbrt (+ 1.0 x)) (+ (cbrt (+ 1.0 x)) (cbrt x)) (pow (/ x (pow (cbrt x) 2.0)) 2.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 29.693757557383183,
    "avg_bits_err_output": 0.21824467341468878,
    "avg_bits_err_improve": 29.475512883968495,
    "time": 23428.814453125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 29.664429132167218,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 29.664429132167218,
    "time": 11350.201171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -4e-254) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (* (/ (* a (* c -4.0)) (+ b (hypot b (sqrt (* a (* c -4.0)))))) (/ (/ 0.25 (* a a)) (/ 0.5 a))) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 4e+282) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0))))))) b) (* a 2.0))))))",
    "output_parens": 91,
    "avg_bits_err_input": 33.96952294757647,
    "avg_bits_err_output": 23.258115976626332,
    "avg_bits_err_improve": 10.71140697095014,
    "time": 44581.722412109375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -5e-239) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt (fabs a))) b)) a)) (if (<= c 1e+154) (* -0.5 (/ (+ b (hypot (sqrt (fabs (* (* c -4.0) a))) b)) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b)) a))))",
    "output_parens": 29,
    "avg_bits_err_input": 34.07549345058352,
    "avg_bits_err_output": 18.633418813110257,
    "avg_bits_err_improve": 15.442074637473265,
    "time": 34370.496826171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.2319294488308,
    "avg_bits_err_output": 0.0013231203125901444,
    "avg_bits_err_improve": 61.230606328518206,
    "time": 12483.888671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(* (cbrt (pow (+ (log1p n) (fabs (fma n (log (/ (+ n 1.0) n)) -1.0))) 2.0)) (cbrt (+ (log1p n) (fma n (log (/ (+ n 1.0) n)) -1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 63.01122761611562,
    "avg_bits_err_output": 42.63066891741379,
    "avg_bits_err_improve": 20.380558698701826,
    "time": 39098.168701171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(+ (log1p (- (* eps eps))) (* -2.0 (log1p eps)))",
    "output_parens": 6,
    "avg_bits_err_input": 58.61476200552469,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 58.60763700552469,
    "time": 18049.37548828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ (/ 1.0 x) (* (cos x) (/ -1.0 (sin x))))",
    "output_parens": 6,
    "avg_bits_err_input": 59.8891276216965,
    "avg_bits_err_output": 59.89681495901196,
    "avg_bits_err_improve": -0.007687337315459786,
    "time": 39156.381103515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (/ (expm1 (* eps b)) (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ b a))))))",
    "output_parens": 11,
    "avg_bits_err_input": 60.466944364512365,
    "avg_bits_err_output": 29.922027050319507,
    "avg_bits_err_improve": 30.54491731419286,
    "time": 36908.94580078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.968656923695356,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 41.958781923695355,
    "time": 8446.111572265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.45593533040235,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.455435330402345,
    "time": 2711.78564453125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(/ (expm1 (fma a x (* a x))) (+ (exp (* a x)) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 29.140522535259453,
    "avg_bits_err_output": 0.03137458845898471,
    "avg_bits_err_improve": 29.10914794680047,
    "time": 16857.02587890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(+ (- (/ (pow (exp x) -2.0) (+ 2.0 (* -2.0 (sinh x)))) (* (pow (+ (exp x) -2.0) 2.0) (/ (fma (+ (exp x) -2.0) (+ -2.0 (* 2.0 (cosh x))) (pow (exp x) -2.0)) (- (pow (exp x) -3.0) (pow (+ (exp x) -2.0) 3.0))))) (fma (fma (+ (exp x) -2.0) (+ -2.0 (+ (exp x) (exp (- x)))) (pow (exp x) -2.0)) (/ (- (pow (+ (exp x) -2.0) 2.0)) (- (pow (exp x) -3.0) (pow (+ (exp x) -2.0) 3.0))) (/ (* (pow (+ (exp x) -2.0) 2.0) (fma (+ (exp x) -2.0) (+ -2.0 (+ (exp x) (exp (- x)))) (pow (exp x) -2.0))) (- (pow (exp x) -3.0) (pow (+ (exp x) -2.0) 3.0)))))",
    "output_parens": 70,
    "avg_bits_err_input": 29.22318893748671,
    "avg_bits_err_output": 28.938996496722112,
    "avg_bits_err_improve": 0.28419244076459904,
    "time": 43392.984619140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma x (/ (+ x x) (+ x -1.0)) (+ -2.0 (* x -2.0))) (+ x (* x x)))",
    "output_parens": 9,
    "avg_bits_err_input": 10.087273144814745,
    "avg_bits_err_output": 10.094049320031216,
    "avg_bits_err_improve": -0.006776175216471003,
    "time": 46570.21875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (<= eps -9e-20) (fma (+ (tan x) (tan eps)) (/ -1.0 (fma (tan x) (tan eps) -1.0)) (- (tan x))) (if (<= eps 7.8e-13) (/ (fma (tan x) (tan eps) (+ (/ (+ (tan x) (tan eps)) (tan x)) -1.0)) (+ (tan eps) (/ 1.0 (tan x)))) (fma (+ (tan x) (tan eps)) (/ 1.0 (- 1.0 (/ (tan eps) (/ (cos x) (sin x))))) (- (tan x)))))",
    "output_parens": 41,
    "avg_bits_err_input": 37.007013946764296,
    "avg_bits_err_output": 19.485445534114778,
    "avg_bits_err_improve": 17.52156841264952,
    "time": 41389.413818359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 29.700997026746272,
    "avg_bits_err_output": 0.12970300781475366,
    "avg_bits_err_improve": 29.571294018931518,
    "time": 18005.229736328125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (/ (pow (sin eps) 2.0) (- -1.0 (cos eps))) (* (sin eps) (cos x)))",
    "output_parens": 10,
    "avg_bits_err_input": 37.16570685385567,
    "avg_bits_err_output": 0.3559918351952287,
    "avg_bits_err_improve": 36.80971501866044,
    "time": 27240.101318359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (/ (+ (sqrt x) (sqrt (+ x 1.0))) (pow (+ x 1.0) -0.5)))",
    "output_parens": 9,
    "avg_bits_err_input": 19.874430557313985,
    "avg_bits_err_output": 0.1950584769712654,
    "avg_bits_err_improve": 19.67937208034272,
    "time": 23103.725830078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (+ 1.0 (+ N (* N N))))",
    "output_parens": 4,
    "avg_bits_err_input": 15.409385879312945,
    "avg_bits_err_output": 0.3748037392810786,
    "avg_bits_err_improve": 15.034582140031866,
    "time": 15727.263916015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.50234736225663,
    "avg_bits_err_output": 1.4976939463424883,
    "avg_bits_err_improve": 28.00465341591414,
    "time": 25679.161376953125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (/ m (/ v (- 1.0 m))) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07098120312590143,
    "avg_bits_err_output": 0.0701699250014423,
    "avg_bits_err_improve": 0.000811278124459136,
    "time": 30140.60107421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (* a (- b)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.360975021658504,
    "avg_bits_err_output": 0.30055225625468746,
    "avg_bits_err_improve": 16.060422765403818,
    "time": 19603.90283203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ angle (/ 180.0 PI)))) 2.0) (pow (* b (log1p (expm1 (sin (* PI (* angle 0.005555555555555556)))))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.387664189979713,
    "avg_bits_err_output": 20.37357805182658,
    "avg_bits_err_improve": 0.01408613815313231,
    "time": 48134.2978515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* (* PI 0.011111111111111112) angle)) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 31.456932807889103,
    "avg_bits_err_output": 21.31966156017551,
    "avg_bits_err_improve": 10.137271247713592,
    "time": 42845.8203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* angle (* PI 0.005555555555555556)))) 2.0) (pow (* b (cos (* PI (* angle -0.005555555555555556)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.077501069464418,
    "avg_bits_err_output": 20.0467138394818,
    "avg_bits_err_improve": 0.03078722998261796,
    "time": 48986.031005859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* (/ m (/ v m)) (- 1.0 m)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17320996250072115,
    "avg_bits_err_output": 0.16823120312590142,
    "avg_bits_err_improve": 0.00497875937481973,
    "time": 30260.587158203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32397650950092693,
    "avg_bits_err_output": 0.31479151777391656,
    "avg_bits_err_improve": 0.009184991727010372,
    "time": 37826.24169921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13916748125036058,
    "avg_bits_err_output": 0.13916748125036058,
    "avg_bits_err_improve": 0,
    "time": 25179.149658203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (fma (cos lambda2) (cos lambda1) (* (sin lambda1) (sin lambda2)))))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 16.9079449299305,
    "avg_bits_err_output": 3.8502334306475654,
    "avg_bits_err_improve": 13.057711499282936,
    "time": 41583.458740234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (fma (pow b 4.5) (pow b 4.5) (* (pow (fma b b (* (* a c) -4.0)) 2.25) (- (pow (fma b b (* (* a c) -4.0)) 2.25))))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (+ (pow b 6.0) (pow (fma b b (* a (* c -4.0))) 3.0)) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0)))) (/ -0.5 a))",
    "output_parens": 40,
    "avg_bits_err_input": 52.931795447052565,
    "avg_bits_err_output": 49.740453179160845,
    "avg_bits_err_improve": 3.19134226789172,
    "time": 64983.880615234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -2e-15) (* (/ -0.5 a) (/ (- (pow b 9.0) (pow (fma b b (* a (* c -4.0))) 4.5)) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (+ (pow b 6.0) (pow (fma b b (* a (* c -4.0))) 3.0)) (pow (* (fma b b (* a (* c -4.0))) (* b b)) 1.5))))) (log (sqrt (exp (/ (fma c (* a -4.0) (* b (- b (sqrt (fma c (* a -4.0) (* b b)))))) (* a (sqrt (fma c (* a -4.0) (* b b)))))))))",
    "output_parens": 59,
    "avg_bits_err_input": 28.60219856016556,
    "avg_bits_err_output": 26.16282721798368,
    "avg_bits_err_improve": 2.4393713421818823,
    "time": 73387.25415039062,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -2e-20) (* (/ -0.5 a) (/ (pow (sqrt (- (pow b 9.0) (pow (fma b b (* a (* c -4.0))) 4.5))) 2.0) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (+ (pow b 6.0) (pow (fma b b (* a (* c -4.0))) 3.0)) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0))))) (* (/ -0.5 a) (+ b (- 0.0 (pow (pow (fma (* a c) -4.0 (* b b)) 1.5) 0.3333333333333333)))))",
    "output_parens": 53,
    "avg_bits_err_input": 44.26002592204503,
    "avg_bits_err_output": 41.41627555971279,
    "avg_bits_err_improve": 2.843750362332244,
    "time": 73106.92016601562,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) -4e-254) (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) 0.0) (* (/ (* a (* c -4.0)) (+ b (hypot b (sqrt (* a (* c -4.0)))))) (/ (/ 0.25 (* a a)) (/ 0.5 a))) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) 4e+282) (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0))))))) b) (* a 2.0))))))",
    "output_parens": 91,
    "avg_bits_err_input": 33.96409567475518,
    "avg_bits_err_output": 23.25224460513156,
    "avg_bits_err_improve": 10.71185106962362,
    "time": 38870.9462890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8975531091494992,
    "avg_bits_err_output": 0.23262161905059217,
    "avg_bits_err_improve": 0.664931490098907,
    "time": 34317.73046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (- 1.0 (* 4.0 (exp (* -2.0 (log1p (pow (exp -2.0) x)))))) (+ -1.0 (/ 2.0 (- -1.0 (exp (* -2.0 x))))))",
    "output_parens": 13,
    "avg_bits_err_input": 29.275680607362645,
    "avg_bits_err_output": 29.24839979963611,
    "avg_bits_err_improve": 0.02728080772653385,
    "time": 31940.639404296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.096357746333474,
    "avg_bits_err_output": 0.012573120312590145,
    "avg_bits_err_improve": 58.083784626020886,
    "time": 10620.330810546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 57.96805335612618,
    "avg_bits_err_output": 0.00625,
    "avg_bits_err_improve": 57.961803356126175,
    "time": 6419.07421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(pow (pow (cosh x) -0.5) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 0.010417481250360577,
    "avg_bits_err_output": 0.009469360937770434,
    "avg_bits_err_improve": 0.0009481203125901432,
    "time": 5348.53271484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.698094360937773,
    "avg_bits_err_output": 0.09925,
    "avg_bits_err_improve": 31.598844360937772,
    "time": 5364.558349609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (* 2.0 (log1p x)) (log1p (* x (- x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 58.610680513426786,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 58.603555513426784,
    "time": 26617.135009765625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0105,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0.0002500000000000002,
    "time": 3991.367919921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (/ (* ew (sin t)) (hypot 1.0 (/ (/ eh (tan t)) ew))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.124,
    "avg_bits_err_output": 0.12471936093777045,
    "avg_bits_err_improve": -0.0007193609377704469,
    "time": 36028.982666015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1261462406251803,
    "avg_bits_err_output": 0.1261462406251803,
    "avg_bits_err_improve": 0,
    "time": 43399.998046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (- (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))) (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 39.29166150430416,
    "avg_bits_err_output": 0.12676039564391442,
    "avg_bits_err_improve": 39.164901108660246,
    "time": 31861.65771484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (- 1.0 (/ (/ b (/ a b)) a)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.241415957400738,
    "avg_bits_err_output": 0.011469360937770434,
    "avg_bits_err_improve": 14.229946596462968,
    "time": 7953.557373046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (fma (fma (cos delta) (sin phi1) (* (* (sin delta) (cos phi1)) (cos theta))) (- (sin phi1)) (cos delta))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.15151540977261335,
    "avg_bits_err_output": 0.15055174827018272,
    "avg_bits_err_improve": 0.0009636615024306294,
    "time": 56463.240234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(* (/ (* b (+ (* c (* -3.0 a)) (* b (- b (sqrt (fma c (* -3.0 a) (* b b))))))) (* b (sqrt (fma c (* -3.0 a) (* b b))))) (/ 1.0 (* a 3.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 52.923375528437695,
    "avg_bits_err_output": 45.51950240102391,
    "avg_bits_err_improve": 7.403873127413789,
    "time": 41906.25146484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma b b (* c (* -3.0 a))))))",
    "output_parens": 7,
    "avg_bits_err_input": 28.7157085658012,
    "avg_bits_err_output": 0.2747218046888521,
    "avg_bits_err_improve": 28.44098676111235,
    "time": 36649.620849609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma c (* -3.0 a) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 44.29182590516657,
    "avg_bits_err_output": 0.152761842188131,
    "avg_bits_err_improve": 44.139064062978434,
    "time": 44881.737060546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) -5e-188) (* (/ 0.3333333333333333 a) (- (hypot b (* (sqrt (* a -3.0)) (sqrt (fabs c)))) b)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) 2e-145) (* (/ 0.3333333333333333 a) (/ (fma a (* c -3.0) (- (* b b) (* b b))) (+ b (hypot b (sqrt (* a (* c -3.0))))))) (* (/ 0.3333333333333333 a) (- (hypot b (sqrt (fabs (* (* 3.0 a) c)))) b))))",
    "output_parens": 50,
    "avg_bits_err_input": 34.013940608330714,
    "avg_bits_err_output": 18.465357051385915,
    "avg_bits_err_improve": 15.548583556944799,
    "time": 51600.939208984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (+ (* (* (sin lambda1) (cos lambda2)) (cos phi2)) (* (cos phi2) (* (cos lambda1) (sin (- lambda2))))) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1))))))",
    "output_parens": 28,
    "avg_bits_err_input": 13.473314311980436,
    "avg_bits_err_output": 0.17956514074893332,
    "avg_bits_err_improve": 13.293749171231504,
    "time": 47429.78173828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (- -1.0 (- (* (+ x 1.0) (/ (+ x 1.0) x)) x)) (* (/ (+ x 1.0) x) (+ -1.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 28.91820384602095,
    "avg_bits_err_output": 25.005652303630455,
    "avg_bits_err_improve": 3.9125515423904957,
    "time": 40411.302978515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ (+ x -1.0) (/ (+ x 1.0) x)) (* (+ x -1.0) (/ (+ x 1.0) x)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.011,
    "avg_bits_err_output": 0.014094360937770434,
    "avg_bits_err_improve": -0.003094360937770435,
    "time": 12914.5185546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.696180249082623,
    "avg_bits_err_output": 0.077,
    "avg_bits_err_improve": 14.619180249082623,
    "time": 44482.92724609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -3300000000000.0) (/ (* (sqrt (fma B B (* (* A C) -4.0))) (* (/ F (sqrt (* 2.0 (* F (+ A (- C (hypot B (- A C)))))))) (* 2.0 (- (- (hypot B (- A C)) C) A)))) (+ (* B B) (* (* A C) -4.0))) (if (<= F -4.2e-130) (/ (- (sqrt (* 2.0 (* F (+ A (- C (hypot B (- A C)))))))) (hypot B (sqrt (* A (* C -4.0))))) (if (<= F -1.5e-143) (* (/ (sqrt (fma B B (* (* A C) -4.0))) -1.0) (/ (sqrt (* F (* 2.0 (+ A (- C (hypot B (- A C))))))) (fma B B (* (* A C) -4.0)))) (if (<= F -5e-212) (* (sqrt (* 2.0 (* F (+ A (- C (hypot B (- A C))))))) (/ -1.0 (hypot B (sqrt (* A (* C -4.0)))))) (if (<= F -1e-310) (/ (- (sqrt (* 2.0 (* F (+ A (- C (hypot B (- A C)))))))) (hypot B (sqrt (* A (* C -4.0))))) (sqrt (/ (* F (* 2.0 (+ A (- C (hypot B (- A C)))))) (fma B B (* (* A C) -4.0)))))))))",
    "output_parens": 101,
    "avg_bits_err_input": 52.2410603264072,
    "avg_bits_err_output": 42.351527635214595,
    "avg_bits_err_improve": 9.889532691192606,
    "time": 66629.52416992188,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* (atan (/ (- (- C A) (hypot B (- C A))) B)) (/ 180.0 PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.474804534991712,
    "avg_bits_err_output": 13.939730824421371,
    "avg_bits_err_improve": 15.535073710570341,
    "time": 35007.472900390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F 1.9e-262) (* (sqrt (* 2.0 (+ (* B (* F B)) (* F (* A (* C -4.0)))))) (/ (- (sqrt (+ C (+ A (hypot B (- A C)))))) (fma B B (* A (* C -4.0))))) (* (/ (- (sqrt (+ C (+ A (hypot B (- A C)))))) (fma B B (* A (* C -4.0)))) (* (sqrt (* 2.0 (fma B B (* A (* C -4.0))))) (sqrt F))))",
    "output_parens": 39,
    "avg_bits_err_input": 52.72704333584218,
    "avg_bits_err_output": 40.3831385584074,
    "avg_bits_err_improve": 12.34390477743478,
    "time": 50440.31787109375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(* (cbrt (/ 1.0 a)) (/ 1.0 (cbrt (/ 2.0 g))))",
    "output_parens": 6,
    "avg_bits_err_input": 15.773959931546122,
    "avg_bits_err_output": 0.872194282918712,
    "avg_bits_err_improve": 14.901765648627409,
    "time": 24824.1201171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -4.2e-233) (+ (* (cbrt (* 0.5 (- (hypot h g) g))) (/ 1.0 (cbrt a))) (cbrt (* -0.5 (/ (+ g (hypot g h)) a)))) (+ (cbrt (* (- (hypot h g) g) (/ 0.5 a))) (* (cbrt (+ g (hypot g h))) (cbrt (/ -0.5 a)))))",
    "output_parens": 27,
    "avg_bits_err_input": 35.86431059287852,
    "avg_bits_err_output": 3.0645942680329568,
    "avg_bits_err_improve": 32.79971632484556,
    "time": 37143.11962890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9894441894575653,
    "avg_bits_err_output": 0.042137218755408656,
    "avg_bits_err_improve": 0.9473069707021566,
    "time": 32498.173828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- (log1p (exp (- b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7002193609377705,
    "avg_bits_err_output": 0.008434444911123629,
    "avg_bits_err_improve": 0.6917849160266468,
    "time": 17813.780517578125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -2e+290) (/ (/ a2 b1) (/ b2 a1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-300) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e-296) (/ (/ a2 b1) (/ b2 a1)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+294) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b1) (/ a2 b2))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.460099516228876,
    "avg_bits_err_output": 2.5612613583604684,
    "avg_bits_err_improve": 8.898838157868408,
    "time": 10910.07666015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5379376695931969,
    "avg_bits_err_output": 0.46344812031259014,
    "avg_bits_err_improve": 0.07448954928060675,
    "time": 9851.360107421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -2.0) (- (log (- (hypot 1.0 x) x))) (log1p (* x (+ 1.0 (/ x (+ 1.0 (hypot 1.0 x)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.05676708120647,
    "avg_bits_err_output": 0.0722712406251803,
    "avg_bits_err_improve": 52.984495840581296,
    "time": 14802.595947265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.675553231529634,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.675553231529634,
    "time": 3254.2119140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.01125,
    "avg_bits_err_improve": 0,
    "time": 3424.5546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1258.606689453125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (pow (* r w) 2.0) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 13.006076314377172,
    "avg_bits_err_output": 0.26001710625757174,
    "avg_bits_err_improve": 12.7460592081196,
    "time": 43478.1630859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.5146300528268175,
    "avg_bits_err_output": 0.311676433272582,
    "avg_bits_err_improve": 0.20295361955423552,
    "time": 86402.67016601562,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.04225740340445,
    "avg_bits_err_output": 1.3973193946950893,
    "avg_bits_err_improve": 16.64493800870936,
    "time": 16030.67333984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(+ (* 0.954929658551372 x) (* (pow x 3.0) -0.12900613773279798))",
    "output_parens": 4,
    "avg_bits_err_input": 0.19424060156295073,
    "avg_bits_err_output": 0.17319812031259013,
    "avg_bits_err_improve": 0.021042481250360595,
    "time": 17577.1064453125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(+ (pow y 4.0) (+ (pow x 4.0) (* (pow y 4.0) -2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0035,
    "avg_bits_err_output": 0.029875,
    "avg_bits_err_improve": -0.026375,
    "time": 33117.5029296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI 0.5) (+ b a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 14.080555225714622,
    "avg_bits_err_output": 0.24077161719245765,
    "avg_bits_err_improve": 13.839783608522165,
    "time": 48018.649169921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x)) (* (exp (- (fma eps x x))) (- 1.0 (/ 1.0 eps)))) 2.0)",
    "output_parens": 13,
    "avg_bits_err_input": 29.945426673179135,
    "avg_bits_err_output": 29.962108475805785,
    "avg_bits_err_improve": -0.016681802626649755,
    "time": 50230.55224609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (+ (* 2.0 (+ 2.0 (/ -2.0 (+ 1.0 t)))) (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.020125,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 0.013500000000000002,
    "time": 38516.70556640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (+ 2.0 (+ (+ 1.0 (pow (+ 2.0 (/ -2.0 (+ 1.0 t))) 2.0)) -1.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.02475,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 0.017375,
    "time": 26760.8173828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ 2.0 (log (+ 1.0 (expm1 (* t (* (/ t (+ 1.0 t)) (/ 4.0 (+ 1.0 t)))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.0315,
    "avg_bits_err_output": 0.041929323438491595,
    "avg_bits_err_improve": -0.010429323438491594,
    "time": 10090.632080078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 2823.822021484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3789.171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 5102.869873046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.860831900243411,
    "avg_bits_err_output": 0.248375,
    "avg_bits_err_improve": 7.61245690024341,
    "time": 26617.83203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.365979288052949,
    "avg_bits_err_output": 7.365979288052949,
    "avg_bits_err_improve": 0,
    "time": 22081.00244140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (+ eps (+ x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 16.15603944471507,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 16.14578944471507,
    "time": 15185.595458984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (* x 0.125)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.531589396523647,
    "avg_bits_err_output": 0.351271617192458,
    "avg_bits_err_improve": 3.180317779331189,
    "time": 24950.338623046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.335924263130591,
    "avg_bits_err_output": 0.017233646876983186,
    "avg_bits_err_improve": 15.318690616253608,
    "time": 7926.590087890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.289253767540075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.289253767540075,
    "time": 4518.908203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.72356555091175,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.72306555091175,
    "time": 3897.384033203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2945,
    "avg_bits_err_improve": 63.7055,
    "time": 62810.358154296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84325825111469,
    "avg_bits_err_output": 0.3258043234384916,
    "avg_bits_err_improve": 61.5174539276762,
    "time": 13807.209716796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -5e-239) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt (fabs a))) b)) a)) (if (<= c 1e+154) (* -0.5 (/ (+ b (hypot (sqrt (fabs (* (* c -4.0) a))) b)) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b)) a))))",
    "output_parens": 29,
    "avg_bits_err_input": 34.07549345058352,
    "avg_bits_err_output": 18.633418813110257,
    "avg_bits_err_improve": 15.442074637473265,
    "time": 37207.40966796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) -4e-254) (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) 0.0) (* (/ (* a (* c -4.0)) (+ b (hypot b (sqrt (* a (* c -4.0)))))) (/ (/ 0.25 (* a a)) (/ 0.5 a))) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) 4e+282) (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0))))))) b) (* a 2.0))))))",
    "output_parens": 91,
    "avg_bits_err_input": 33.96409567475518,
    "avg_bits_err_output": 23.25224460513156,
    "avg_bits_err_improve": 10.71185106962362,
    "time": 44425.8876953125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1910.51904296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.09852066573798,
    "avg_bits_err_output": 0.01125,
    "avg_bits_err_improve": 40.08727066573798,
    "time": 9333.98291015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- x y) (* (hypot x y) (/ (hypot x y) (+ x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 20.502515420042872,
    "avg_bits_err_output": 0.03833533906799881,
    "avg_bits_err_improve": 20.464180080974874,
    "time": 19808.515869140625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6591384579897333,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6591384579897333,
    "time": 15631.345458984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037375,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.0365,
    "time": 6209.5791015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ b a)) (* a (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021948120312590146,
    "avg_bits_err_output": 0.0175,
    "avg_bits_err_improve": 0.004448120312590145,
    "time": 2680.4609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.014625,
    "avg_bits_err_output": 0.014625,
    "avg_bits_err_improve": 0,
    "time": 6387.13232421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0,
    "time": 1724.592041015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ c b) (+ d a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39961353437914676,
    "avg_bits_err_output": 0.2345,
    "avg_bits_err_improve": 0.16511353437914678,
    "time": 20122.816650390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.290450352934208,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 30.28382535293421,
    "time": 12455.46728515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.796915210370255,
    "avg_bits_err_output": 0.29532312031259017,
    "avg_bits_err_improve": 24.501592090057663,
    "time": 21695.678955078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(* (log (exp (- (pow (/ x (tan x)) 3.0) (pow (cos x) 3.0)))) (/ 1.0 (+ (pow (/ x (tan x)) 2.0) (* (cos x) (+ (/ x (tan x)) (cos x))))))",
    "output_parens": 20,
    "avg_bits_err_input": 29.532143519155557,
    "avg_bits_err_output": 29.53664911152009,
    "avg_bits_err_improve": -0.004505592364534294,
    "time": 43287.946533203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006198120312590144,
    "avg_bits_err_output": 0.006198120312590144,
    "avg_bits_err_improve": 0,
    "time": 1684.09033203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 5e-251) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 500.0) (/ n (/ i (+ (* (pow (+ 1.0 (/ i n)) n) 100.0) -100.0))) (* n (/ (+ -100.0 (* 100.0 (pow (exp n) (log1p (/ i n))))) i))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.44885723323919,
    "avg_bits_err_output": 10.939969023673338,
    "avg_bits_err_improve": 36.50888820956585,
    "time": 27710.3828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (or (<= c -2.45e+26) (not (<= c 9.8e+76))) (fma (/ (/ c (hypot d c)) (hypot d c)) a (* (pow (hypot d c) -2.0) (* d b))) (/ (/ (+ (* d b) (* c a)) (hypot c d)) (hypot c d)))",
    "output_parens": 21,
    "avg_bits_err_input": 26.07241525507372,
    "avg_bits_err_output": 11.711451114597597,
    "avg_bits_err_improve": 14.360964140476124,
    "time": 24139.967529296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (* (/ d (hypot c d)) a) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 26.106454942368067,
    "avg_bits_err_output": 0.5114818193954421,
    "avg_bits_err_improve": 25.594973122972625,
    "time": 26925.076904296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* (/ (* ux ux) ux) (+ maxCos -1.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.033625,
    "avg_bits_err_output": 0.02942202104303607,
    "avg_bits_err_improve": 0.004202978956963931,
    "time": 31550.11572265625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* uy (* 2.0 PI))) (sqrt (+ (/ (- (fma (fma ux maxCos (- 1.0 ux)) (* (fma ux maxCos 1.0) (fma (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux)) 1.0)) 1.0) (* (fma (fma ux maxCos (- 1.0 ux)) (* (fma ux maxCos 1.0) (fma (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux)) 1.0)) 1.0) (pow (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos 1.0)) 3.0))) (pow (fma (fma ux maxCos (- 1.0 ux)) (* (fma ux maxCos 1.0) (fma (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux)) 1.0)) 1.0) 2.0)) (* ux (fma ux maxCos (- 1.0 ux))))))",
    "output_parens": 45,
    "avg_bits_err_input": 13.369883984414619,
    "avg_bits_err_output": 11.158785599074402,
    "avg_bits_err_improve": 2.2110983853402164,
    "time": 66248.97387695312,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) 2.0) (/ (/ (pow (pow (fma ux maxCos (- 1.0 ux)) 4.0) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (* (pow (pow (cbrt (- (fma ux maxCos 1.0) ux)) 2.0) 6.0) (pow (cbrt (- (fma ux maxCos 1.0) ux)) 6.0)) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 68,
    "avg_bits_err_input": 13.402046285481308,
    "avg_bits_err_output": 11.84536585309861,
    "avg_bits_err_improve": 1.5566804323826986,
    "time": 108395.47143554688,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- 1.0 ux) (* maxCos zi)) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (* (/ (* uy uy) 0.5) (/ PI uy))) xi) (* (sin (* uy (* PI 2.0))) yi))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.33738181104624615,
    "avg_bits_err_output": 0.340333828158754,
    "avg_bits_err_improve": -0.0029520171125078654,
    "time": 68735.91796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 43,
    "avg_bits_err_input": 0.20460615593600745,
    "avg_bits_err_output": 0.20216813301267664,
    "avg_bits_err_improve": 0.0024380229233308126,
    "time": 34416.323974609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ (* u1 (+ u1 1.0)) (- 1.0 (* u1 u1)))) (sin (* 6.28318530718 u2)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5396182899107279,
    "avg_bits_err_output": 0.5574209102726219,
    "avg_bits_err_improve": -0.01780262036189395,
    "time": 23942.219482421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 0.02533029591058111 (* u2 248.05021344244753))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3202862910193155,
    "avg_bits_err_output": 0.3182535616769931,
    "avg_bits_err_improve": 0.0020327293423224035,
    "time": 25556.21533203125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ (- 1.0 u) (+ 1.0 (exp (/ 1.0 (/ s PI))))))) -1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.33423293891705724,
    "avg_bits_err_output": 0.33532729985482773,
    "avg_bits_err_improve": -0.0010943609377704888,
    "time": 27269.105224609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (* (pow (exp (* (/ x s) -2.0)) 0.3333333333333333) (pow (exp 2.0) (* (/ x (- s)) 0.16666666666666666)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.06337955531749875,
    "avg_bits_err_output": 0.12461690383978562,
    "avg_bits_err_improve": -0.061237348522286864,
    "time": 22221.78955078125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (* s (+ 2.0 (* 2.0 (expm1 (log1p (cosh (/ (fabs x) s))))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.16429215136219916,
    "avg_bits_err_output": 0.14880902012765554,
    "avg_bits_err_improve": 0.015483131234543618,
    "time": 27398.29345703125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641084826074513,
    "avg_bits_err_output": 0.6641084826074513,
    "avg_bits_err_improve": 0,
    "time": 32241.995361328125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.16916530269330018,
    "avg_bits_err_output": 0.16916530269330018,
    "avg_bits_err_improve": 0,
    "time": 32536.471923828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.514782104455441,
    "avg_bits_err_output": 0.3431512131187486,
    "avg_bits_err_improve": 2.1716308913366924,
    "time": 35879.34716796875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_O (/ sinTheta_i v)))) (* (/ cosTheta_i (* v (sinh (/ 1.0 v)))) (/ 0.5 v)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4633497118029939,
    "avg_bits_err_output": 0.39149042713056925,
    "avg_bits_err_improve": 0.07185928467242464,
    "time": 48208.713623046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ (+ (/ cosTheta_i (/ v cosTheta_O)) (- (/ -1.0 v) (/ (* sinTheta_i sinTheta_O) v))) (+ 0.6931 (log (/ 0.5 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.12518526195804403,
    "avg_bits_err_output": 0.1264424733257905,
    "avg_bits_err_improve": -0.0012572113677464802,
    "time": 39447.737060546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.46386933414691894,
    "avg_bits_err_output": 0.41830712090868866,
    "avg_bits_err_improve": 0.04556221323823029,
    "time": 41602.25390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (/ (- 0.25 u) 0.75)) (* s -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3216063405233007,
    "avg_bits_err_output": 0.5546765916992773,
    "avg_bits_err_improve": 0.7669297488240234,
    "time": 40624.040771484375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.438894629017375,
    "avg_bits_err_output": 0.204,
    "avg_bits_err_improve": 12.234894629017374,
    "time": 22676.933349609375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (* (/ (/ 0.125 s) PI) (/ (exp (/ (- r) s)) r)) (* (/ 0.75 (* s (* PI 6.0))) (/ (exp (/ (- r) (* s 3.0))) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.14841609693991722,
    "avg_bits_err_output": 0.1642260468817261,
    "avg_bits_err_improve": -0.01580994994180887,
    "time": 126013.04565429688,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9172214596710796,
    "avg_bits_err_output": 0.7313111333311346,
    "avg_bits_err_improve": 0.18591032633994498,
    "time": 38006.598388671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (* (sqrt (- 1.0 (+ cosTheta cosTheta))) (/ (sqrt PI) (* cosTheta PI))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.7000439462243894,
    "avg_bits_err_output": 0.41631013322722593,
    "avg_bits_err_improve": 0.28373381299716344,
    "time": 30425.544677734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (pow (log1p (- u1)) 2.0) 0.25) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.726960596178067,
    "avg_bits_err_output": 0.5395566900906583,
    "avg_bits_err_improve": 13.18740390608741,
    "time": 24942.899169921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (+ 0.5 (- (* 0.5 (cos (/ (/ PI (/ 0.5 (pow u2 3.0))) (* u2 u2)))) (/ (- 1.0 (cos (* PI (* u2 2.0)))) 2.0))))",
    "output_parens": 19,
    "avg_bits_err_input": 13.768073639905353,
    "avg_bits_err_output": 0.31657714954441957,
    "avg_bits_err_improve": 13.451496490360933,
    "time": 28045.07177734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* alpha (- (log1p (- u0)))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.356825423854707,
    "avg_bits_err_output": 0.3233255640636719,
    "avg_bits_err_improve": 14.033499859791034,
    "time": 22371.57470703125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (log1p (- u0)) (/ 1.0 (- (fma cos2phi (pow alphax -2.0) (/ sin2phi (* alphay alphay))))))",
    "output_parens": 9,
    "avg_bits_err_input": 12.657366776701199,
    "avg_bits_err_output": 0.5967336923297312,
    "avg_bits_err_improve": 12.060633084371467,
    "time": 30143.457275390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(+ (* PI l) (/ (/ -1.0 F) (* F (/ 1.0 (tan (* PI l))))))",
    "output_parens": 8,
    "avg_bits_err_input": 16.61431987146278,
    "avg_bits_err_output": 12.43432166465948,
    "avg_bits_err_improve": 4.179998206803299,
    "time": 32286.814208984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21891901566846755,
    "avg_bits_err_output": 0.15070905316774644,
    "avg_bits_err_improve": 0.06820996250072112,
    "time": 23515.6201171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(fma F (* (pow (fma x 2.0 (fma F F 2.0)) -0.5) (/ 1.0 (sin B))) (/ (- x) (tan B)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.808494131170866,
    "avg_bits_err_output": 10.48754134857177,
    "avg_bits_err_improve": 3.320952782599095,
    "time": 40014.393310546875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* 4.0 (/ (log (tanh (* PI (* 0.25 f)))) PI))",
    "output_parens": 6,
    "avg_bits_err_input": 61.56136905097554,
    "avg_bits_err_output": 0.6407206670096273,
    "avg_bits_err_improve": 60.92064838396592,
    "time": 53865.1669921875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ 1.0 (/ (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ 1.0 x) (+ x -1.0))))) (* t (sqrt 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 42.539973515654495,
    "avg_bits_err_output": 20.27250971461025,
    "avg_bits_err_improve": 22.267463801044244,
    "time": 47424.62451171875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(/ (sin th) (/ (hypot (sin ky) (sin kx)) (sin ky)))",
    "output_parens": 7,
    "avg_bits_err_input": 3.8189911087062542,
    "avg_bits_err_output": 0.22883924922855428,
    "avg_bits_err_improve": 3.5901518594776998,
    "time": 21940.5390625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8909181020552495,
    "avg_bits_err_output": 0.013528555837104548,
    "avg_bits_err_improve": 0.8773895462181449,
    "time": 13288.469482421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (pow (- 1.0 (/ (/ Om Omc) (/ Omc Om))) 0.5) (hypot 1.0 (/ t (/ l (sqrt 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.300471547290924,
    "avg_bits_err_output": 1.1343669362960158,
    "avg_bits_err_improve": 9.166104610994907,
    "time": 26206.37890625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -2e+52) (/ n (* 0.5 (/ (sqrt (* n (* (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t) (* 2.0 U)))) (* U (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t))))) (if (<= n -3.3e-189) (sqrt (+ (* (fma l -2.0 (* (/ l Om) (* n (- U* U)))) (* (/ l Om) (* 2.0 (* n U)))) (* 2.0 (* n (* U t))))) (if (<= n -1.9e-278) (sqrt (* U (* (- t (fma (pow (/ Om l) -2.0) (* n (- U U*)) (* 2.0 (/ l (/ Om l))))) (* n 2.0)))) (if (<= n 1e-29) (sqrt (+ (* (fma l -2.0 (* (/ l Om) (* n (- U* U)))) (fma (* (/ l Om) (* n 2.0)) U 0.0)) (* t (* 2.0 (* n U))))) (* (sqrt n) (sqrt (* (fma (/ l Om) (fma l -2.0 (* n (* (/ l Om) (- U* U)))) t) (* 2.0 U))))))))",
    "output_parens": 85,
    "avg_bits_err_input": 34.25266843955151,
    "avg_bits_err_output": 26.164572951350774,
    "avg_bits_err_improve": 8.08809548820074,
    "time": 56344.3779296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= k -9e-73) (/ (/ -2.0 (* t (/ (- k) l))) (* (sin k) (* k (/ (tan k) l)))) (if (<= k 5e-79) (* (* (/ 2.0 (sin k)) (/ l (* k (/ (tan k) l)))) (/ 1.0 (* k t))) (/ (/ 1.0 (/ (/ k (/ (/ l (tan k)) (sin k))) 2.0)) (* t (/ k l)))))",
    "output_parens": 34,
    "avg_bits_err_input": 47.49037683069059,
    "avg_bits_err_output": 1.5978914279577685,
    "avg_bits_err_improve": 45.892485402732824,
    "time": 101953.01977539062,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (/ t l) (* (tan k) (+ 2.0 (/ (/ k t) (/ t k))))) (* t (* (/ t l) (sin k)))))",
    "output_parens": 14,
    "avg_bits_err_input": 32.127143358607746,
    "avg_bits_err_output": 13.1515800772859,
    "avg_bits_err_improve": 18.975563281321847,
    "time": 95275.681640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (* (sqrt 0.5) (+ (* a2 a2) (* a1 a1))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5379524469000625,
    "avg_bits_err_output": 0.48842105470327646,
    "avg_bits_err_improve": 0.04953139219678604,
    "time": 25333.1162109375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (/ (pow (sqrt PI) (- 1.0 k)) (pow (* 2.0 n) (* k 0.5))) (sqrt (* 2.0 n))) (sqrt k))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4852067580956259,
    "avg_bits_err_output": 0.4792271373597737,
    "avg_bits_err_improve": 0.005979620735852231,
    "time": 27059.54443359375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (* (sinh l) 2.0)) (cos (/ K 2.0))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.53553653168156,
    "avg_bits_err_output": 0.07359436093777044,
    "avg_bits_err_improve": 17.46194217074379,
    "time": 21280.3623046875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (log1p (+ (/ (pow (exp (cos (- (* (+ m n) (* K 0.5)) M))) 2.0) (+ (exp (cos (- (* (+ m n) (* K 0.5)) M))) 1.0)) (/ -1.0 (+ (exp (cos (- (* (+ m n) (* K 0.5)) M))) 1.0)))) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0))))",
    "output_parens": 35,
    "avg_bits_err_input": 15.58374602098597,
    "avg_bits_err_output": 15.55249601641131,
    "avg_bits_err_improve": 0.03125000457466065,
    "time": 33707.119384765625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.186511842188136,
    "avg_bits_err_output": 8.141136842188128,
    "avg_bits_err_improve": 10.045375000000007,
    "time": 32413.48388671875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))) 5e+133) (* (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))) w0) (* w0 (sqrt (+ 1.0 (/ (* h (* M (* D (/ -0.5 d)))) (/ (* l (/ (* 2.0 d) D)) M))))))",
    "output_parens": 31,
    "avg_bits_err_input": 14.013086210429998,
    "avg_bits_err_output": 7.884353243554566,
    "avg_bits_err_improve": 6.1287329668754325,
    "time": 39022.48681640625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (/ (* c0 (sqrt (/ A V))) (sqrt l)) (if (<= (* V l) -5e-270) (/ (* (sqrt (- A)) c0) (sqrt (* V (- l)))) (if (<= (* V l) 0.0) (/ c0 (* (sqrt (- V)) (sqrt (- (/ l A))))) (if (<= (* V l) 5e+306) (* c0 (/ (sqrt A) (sqrt (* V l)))) (/ c0 (/ l (sqrt (* l (/ A V)))))))))",
    "output_parens": 42,
    "avg_bits_err_input": 18.845743201392345,
    "avg_bits_err_output": 6.625851042511455,
    "avg_bits_err_improve": 12.21989215888089,
    "time": 34398.2978515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) -2e-166) (* (/ c0 (* 2.0 w)) (fma (/ c0 (* w h)) (pow (/ d D) 2.0) (* (sqrt (fma (/ c0 (* w h)) (pow (/ d D) 2.0) M)) (sqrt (- (* (/ c0 (* w h)) (pow (/ d D) 2.0)) M))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 0.0) (* c0 (* (/ 0.5 w) (* M (/ M (- (* (/ c0 (* D D)) (/ d (* w (/ h d)))) (hypot M (* d (* (/ c0 (* D D)) (/ (/ d w) h))))))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) M)) (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) (- M))) (* (/ c0 (/ w d)) (/ d (* D (* h D)))))) (* c0 (* (/ 0.5 w) (* M (/ M (- (* (/ d w) (/ (* c0 (/ d D)) (* h D))) (hypot (* (/ d w) (/ (* c0 (/ d D)) (* h D))) M)))))))))",
    "output_parens": 169,
    "avg_bits_err_input": 59.545428212516434,
    "avg_bits_err_output": 29.420546010360564,
    "avg_bits_err_improve": 30.12488220215587,
    "time": 81631.5615234375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d -2.8e+24) (* (/ (sqrt (- d)) (sqrt (- h))) (* (/ (sqrt (- d)) (sqrt (- l))) (+ 1.0 (* (/ (* (* M D) (* h (/ D (* d (/ 2.0 M))))) (* l (* d 2.0))) -0.5)))) (if (<= d -1e-310) (* (sqrt (/ d h)) (* (/ (sqrt (- d)) (sqrt (- l))) (+ 1.0 (* (fma (/ M (/ (* d 2.0) D)) (/ h (* d (/ (/ l D) (* 0.5 M)))) 0.0) -0.5)))) (* (/ d (* (sqrt l) (sqrt h))) (+ 1.0 (* (/ (* h (pow (* M (/ D d)) 2.0)) l) -0.125)))))",
    "output_parens": 59,
    "avg_bits_err_input": 26.92738928625457,
    "avg_bits_err_output": 14.172594049186461,
    "avg_bits_err_improve": 12.754795237068109,
    "time": 118608.54541015625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (fma 0.0 (* (fma (+ (/ 0.25 (fma x x 1.0)) (/ 0.25 (hypot 1.0 x))) (+ (/ 0.25 (fma x x 1.0)) (+ (/ 0.25 (hypot 1.0 x)) -0.25)) 0.0625) (/ (* 0.125 (pow (hypot 1.0 x) -3.0)) (+ 0.015625 (pow (+ (/ 0.25 (fma x x 1.0)) (/ 0.25 (hypot 1.0 x))) 3.0)))) (fma (fma (+ (/ 0.25 (fma x x 1.0)) (/ 0.25 (hypot 1.0 x))) (+ (/ 0.25 (fma x x 1.0)) (+ (/ 0.25 (hypot 1.0 x)) -0.25)) 0.0625) (/ (* (pow (hypot 1.0 x) -3.0) -0.125) (+ 0.015625 (pow (+ (/ 0.25 (fma x x 1.0)) (/ 0.25 (hypot 1.0 x))) 3.0))) (/ 0.125 (+ 0.25 (+ (/ 0.25 (fma x x 1.0)) (/ 0.25 (hypot 1.0 x))))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 62,
    "avg_bits_err_input": 15.40199340572836,
    "avg_bits_err_output": 14.907583732993727,
    "avg_bits_err_improve": 0.49440967273463343,
    "time": 45053.1357421875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.0 (* PI (* (- 1.0 (* v v)) 0.75))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.9841981203125901,
    "avg_bits_err_output": 0.014115601562950724,
    "avg_bits_err_improve": 0.9700825187496394,
    "time": 7391.33154296875,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (sqrt (fma v (* v -6.0) 2.0)))) (* t (- 1.0 (* v v))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4565768815682678,
    "avg_bits_err_output": 0.11581616562662261,
    "avg_bits_err_improve": 0.3407607159416452,
    "time": 23341.2958984375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (sqrt (fma (* v v) -6.0 2.0)) (- 1.0 (* v v))) 4.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.012323120312590145,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 0.002948120312590145,
    "time": 8727.950927734375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(- PI (acos (+ (/ 1.0 (- 1.0 (* v v))) (* (/ 1.0 (- 1.0 (* v v))) (* v (* v -5.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.508847125251714,
    "avg_bits_err_output": 0.5278041230982299,
    "avg_bits_err_improve": -0.018956997846515833,
    "time": 76556.17163085938,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (* k (/ (- -10.0 k) a))))",
    "output_parens": 8,
    "avg_bits_err_input": 1.9987596601181528,
    "avg_bits_err_output": 0.2944364153593147,
    "avg_bits_err_improve": 1.7043232447588381,
    "time": 17796.737548828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(fma (/ 1.0 (+ 1.0 (exp (/ (+ (+ Ev EAccept) (- Vef mu)) KbT)))) NaChar (/ NdChar (+ 1.0 (exp (/ (+ Vef (- (+ mu EDonor) Ec)) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.016281150418828574,
    "avg_bits_err_output": 0.017032876143769204,
    "avg_bits_err_improve": -0.0007517257249406301,
    "time": 8992.9287109375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18960735349127605,
    "avg_bits_err_output": 0.01751200166777914,
    "avg_bits_err_improve": 0.17209535182349692,
    "time": 20715.802978515625,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18656697967695074,
    "avg_bits_err_output": 0.028483891614135132,
    "avg_bits_err_improve": 0.1580830880628156,
    "time": 31554.956298828125,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18854912789656242,
    "avg_bits_err_output": 0.02972771587867332,
    "avg_bits_err_improve": 0.1588214120178891,
    "time": 13400.2255859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (+ 0.5 (/ 0.5 (/ (hypot x (* 2.0 p)) x))))",
    "output_parens": 6,
    "avg_bits_err_input": 13.75244049231281,
    "avg_bits_err_output": 13.752908668569313,
    "avg_bits_err_improve": -0.0004681762565041936,
    "time": 21708.031005859375,
    "seed": 10,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (+ x x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.75957069438255,
    "avg_bits_err_output": 0.081375,
    "avg_bits_err_improve": 40.67819569438255,
    "time": 9773.513916015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x 1.25e-299) (/ (- (sin x) x) (fma (pow (cbrt (tan x)) 2.0) (cbrt (tan x)) (- x))) (if (<= x 1.85e-8) (/ (fma (sqrt (sin x)) (sqrt (sin x)) (- x)) (fma (pow (/ 1.0 (/ (pow (cbrt (tan x)) 2.0) (tan x))) 2.0) (cbrt (tan x)) (- x))) (/ 1.0 (/ (+ (/ (tan x) x) -1.0) (+ (/ (sin x) x) -1.0)))))",
    "output_parens": 40,
    "avg_bits_err_input": 31.426259028215274,
    "avg_bits_err_output": 29.50757196562278,
    "avg_bits_err_improve": 1.9186870625924932,
    "time": 40454.77587890625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (- (hypot b_2 (/ a (/ (pow (* a c) 0.5) c))) b_2) a) (if (<= b_2 2.5e-134) (/ (fabs (- (sqrt (fma b_2 b_2 (* a (- c)))) b_2)) a) (if (<= b_2 6.4e+156) (/ (/ (* a c) (- (- b_2) (sqrt (- (* b_2 b_2) (* a c))))) a) (if (<= b_2 2.8e+185) (/ (fabs (/ (* a c) (+ b_2 (hypot b_2 (sqrt (* a (- c))))))) a) (/ (- c) (+ b_2 (hypot b_2 (sqrt (* a c)))))))))",
    "output_parens": 46,
    "avg_bits_err_input": 34.40629718842668,
    "avg_bits_err_output": 18.099174019583288,
    "avg_bits_err_improve": 16.30712316884339,
    "time": 30868.546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 3.2e-99) (/ c (- (sqrt (- (* b_2 b_2) (* c a))) b_2)) (/ (- (- (/ a (/ (sqrt (- (* b_2 b_2) (* c a))) c)) (* b_2 (/ b_2 (sqrt (- (* b_2 b_2) (* c a)))))) b_2) a))",
    "output_parens": 23,
    "avg_bits_err_input": 33.97145927407366,
    "avg_bits_err_output": 19.241693880392265,
    "avg_bits_err_improve": 14.729765393681394,
    "time": 30145.428955078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (tan (* x 0.5)) x) (/ x (sin x)))",
    "output_parens": 6,
    "avg_bits_err_input": 31.411070634483735,
    "avg_bits_err_output": 0.11855490351835148,
    "avg_bits_err_improve": 31.292515730965384,
    "time": 22529.398193359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.65270767685723,
    "avg_bits_err_output": 32.36716905855948,
    "avg_bits_err_improve": 0.28553861829774974,
    "time": 40189.787109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.968340199517087,
    "avg_bits_err_output": 0.01725,
    "avg_bits_err_improve": 29.951090199517086,
    "time": 12709.290283203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (* (- -1.0 x) (pow (- -1.0 x) -2.0)) x)",
    "output_parens": 5,
    "avg_bits_err_input": 14.957259567815925,
    "avg_bits_err_output": 0.03869812031259015,
    "avg_bits_err_improve": 14.918561447503334,
    "time": 7022.1025390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (* (* (tan (/ eps 2.0)) (- (sin eps))) (cos x)) (* (sin eps) (sin x)))",
    "output_parens": 11,
    "avg_bits_err_input": 39.8583013065861,
    "avg_bits_err_output": 0.3103723032515679,
    "avg_bits_err_improve": 39.54792900333453,
    "time": 30730.0625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ (fma 0.0 x 1.0) (fma (cbrt (+ x 1.0)) (+ (cbrt (+ x 1.0)) (/ x (pow (cbrt x) 2.0))) (* x (/ 1.0 (cbrt x)))))",
    "output_parens": 14,
    "avg_bits_err_input": 30.21417733891934,
    "avg_bits_err_output": 0.24153651366941656,
    "avg_bits_err_improve": 29.972640825249925,
    "time": 21508.12158203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 29.98425757669562,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 29.98425757669562,
    "time": 11181.79052734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -6.5e+227) (/ (- (hypot b (* (* c -4.0) (sqrt (/ a (* c -4.0))))) b) (* a 2.0)) (if (<= c -2.1e+161) (* (/ (* -4.0 (* c a)) (+ b (hypot b (sqrt (* -4.0 (* c a)))))) (/ 0.5 a)) (if (<= c -3.9e-70) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 1.32e-99) (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (* c -4.0) (/ a (* (sqrt (* a -4.0)) (sqrt c))))) b) (* a 2.0))))))",
    "output_parens": 54,
    "avg_bits_err_input": 34.02880879723151,
    "avg_bits_err_output": 24.694979986285976,
    "avg_bits_err_improve": 9.333828810945537,
    "time": 41275.160888671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -4e-178) (/ (/ (+ b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) a) -2.0) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (/ (/ (* 4.0 (* a c)) -2.0) (* a (- b (hypot b (sqrt (* a (* c -4.0))))))) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 2e+267) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (/ (/ (+ b (hypot b (* (sqrt (* a -4.0)) (sqrt c)))) a) -2.0))))",
    "output_parens": 68,
    "avg_bits_err_input": 34.31682482700995,
    "avg_bits_err_output": 24.327232884116267,
    "avg_bits_err_improve": 9.989591942893686,
    "time": 37783.10107421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.506351104515716,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 61.50510110451572,
    "time": 12171.12890625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(cbrt (pow (+ (log1p n) (fabs (fma n (log (/ (+ n 1.0) n)) -1.0))) 3.0))",
    "output_parens": 9,
    "avg_bits_err_input": 62.99830314314377,
    "avg_bits_err_output": 44.195165487460756,
    "avg_bits_err_improve": 18.803137655683017,
    "time": 37574.466064453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.69856530902926,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 58.69206530902926,
    "time": 20904.89892578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (* (- (pow (tan x) 2.0) (* x x)) (/ 1.0 (+ x (tan x)))) x) (tan x))",
    "output_parens": 11,
    "avg_bits_err_input": 60.03390797384855,
    "avg_bits_err_output": 60.02120725661907,
    "avg_bits_err_improve": 0.012700717229478187,
    "time": 37295.8583984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (/ (* (expm1 (* eps a)) (/ (expm1 (* eps b)) (expm1 (* eps (+ a b))))) eps))",
    "output_parens": 11,
    "avg_bits_err_input": 60.545498997463795,
    "avg_bits_err_output": 29.034962239874755,
    "avg_bits_err_improve": 31.51053675758904,
    "time": 38633.44677734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.14198855681147,
    "avg_bits_err_output": 0.01666956516968526,
    "avg_bits_err_improve": 41.125318991641784,
    "time": 8273.197509765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.72375050291582,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.72312550291582,
    "time": 2996.317138671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.752675469533614,
    "avg_bits_err_output": 0.019508678590172007,
    "avg_bits_err_improve": 29.733166790943443,
    "time": 25146.875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (pow (exp x) -2.0) (- (pow (exp x) -2.0)) (pow (+ (exp x) -2.0) 4.0)) (* (+ -2.0 (/ (expm1 (+ x x)) (exp x))) (+ (pow (exp x) -2.0) (pow (+ (exp x) -2.0) 2.0))))",
    "output_parens": 22,
    "avg_bits_err_input": 29.97256274512492,
    "avg_bits_err_output": 29.702401254314278,
    "avg_bits_err_improve": 0.27016149081064356,
    "time": 43403.6689453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma x (/ (+ 1.0 (+ x (+ x -1.0))) (+ x -1.0)) (+ -2.0 (* x -2.0))) (+ x (* x x)))",
    "output_parens": 11,
    "avg_bits_err_input": 9.883531490737864,
    "avg_bits_err_output": 9.887256953004558,
    "avg_bits_err_improve": -0.003725462266693569,
    "time": 54774.596923828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (/ (+ (tan x) (tan eps)) (fma (tan x) (- (tan eps)) 1.0)) (tan x))",
    "output_parens": 10,
    "avg_bits_err_input": 36.82708596163752,
    "avg_bits_err_output": 21.606059533628226,
    "avg_bits_err_improve": 15.221026428009296,
    "time": 41329.53466796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))",
    "output_parens": 5,
    "avg_bits_err_input": 30.46279392718438,
    "avg_bits_err_output": 0.16608740625180285,
    "avg_bits_err_improve": 30.296706520932577,
    "time": 19800.825927734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (cos x) (sin eps) (* (sin x) (+ (cos eps) -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 37.2820694714606,
    "avg_bits_err_output": 0.360352943753438,
    "avg_bits_err_improve": 36.92171652770716,
    "time": 30757.845458984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.53816983068328,
    "avg_bits_err_output": 0.10824304531403246,
    "avg_bits_err_improve": 19.429926785369247,
    "time": 26194.865966796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.104404949952972,
    "avg_bits_err_output": 0.34936804830086476,
    "avg_bits_err_improve": 14.755036901652108,
    "time": 7236.580078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.58275976293066,
    "avg_bits_err_output": 1.2541989507961064,
    "avg_bits_err_improve": 28.328560812134555,
    "time": 29760.98583984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07792999596793129,
    "avg_bits_err_output": 0.08298431940642288,
    "avg_bits_err_improve": -0.00505432343849159,
    "time": 33304.06494140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (/ a (/ -1.0 b)) (* a b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.681627241265716,
    "avg_bits_err_output": 0.27786808611738,
    "avg_bits_err_improve": 16.403759155148336,
    "time": 23435.7109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* 180.0 (* angle (* PI 3.08641975308642e-5))))) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 20.25536766350176,
    "avg_bits_err_output": 20.268980344633697,
    "avg_bits_err_improve": -0.013612681131935034,
    "time": 41454.153564453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (* (sin (* 2.0 (/ (* PI angle) 180.0))) (* 0.5 (+ b a))) (- b a)))",
    "output_parens": 10,
    "avg_bits_err_input": 31.64041768746994,
    "avg_bits_err_output": 21.70398165398235,
    "avg_bits_err_improve": 9.936436033487592,
    "time": 45200.164794921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (* PI -0.005555555555555556) (/ 1.0 (/ -1.0 angle))))) 2.0) (pow (* b (cos (/ PI (/ 180.0 angle)))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.034816628433592,
    "avg_bits_err_output": 20.051069770862345,
    "avg_bits_err_improve": -0.0162531424287522,
    "time": 49772.29736328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (/ m (/ v (- 1.0 m))) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.17814300435713698,
    "avg_bits_err_output": 0.18137176373195668,
    "avg_bits_err_improve": -0.0032287593748197008,
    "time": 25039.841796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.33644979461744556,
    "avg_bits_err_output": 0.3246097765696509,
    "avg_bits_err_improve": 0.011840018047794665,
    "time": 34308.6787109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13521936093777043,
    "avg_bits_err_output": 0.13586560156295072,
    "avg_bits_err_improve": -0.0006462406251802888,
    "time": 26148.17724609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi2) (* (cos phi1) (fma (cos lambda1) (cos lambda2) (* (sin lambda1) (sin lambda2))))))) R)",
    "output_parens": 15,
    "avg_bits_err_input": 16.959706606356065,
    "avg_bits_err_output": 3.545352709386279,
    "avg_bits_err_improve": 13.414353896969786,
    "time": 43413.3203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ c 0.5) (- (- b) (sqrt (fma b b (* a (* c -4.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 52.39074677848369,
    "avg_bits_err_output": 0.08329248125036058,
    "avg_bits_err_improve": 52.30745429723333,
    "time": 40333.993408203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (fma (fma b b (* a (* c -4.0))) (- (fma (* b (fma b b (* a (* c -4.0)))) b (* (* a (* c -4.0)) (fma b b (* a (* c -4.0)))))) (pow b 6.0))) (* (+ b (sqrt (fma b b (* a (* c -4.0))))) (+ (pow b 4.0) (fma b (* b (fma b b (* a (* c -4.0)))) (pow (fma b b (* a (* c -4.0))) 2.0))))) (/ -0.5 a))",
    "output_parens": 38,
    "avg_bits_err_input": 28.434346419993858,
    "avg_bits_err_output": 26.047921926306856,
    "avg_bits_err_improve": 2.3864244936870023,
    "time": 105356.27099609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* c -2.0) (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))))",
    "output_parens": 8,
    "avg_bits_err_input": 43.21024841021872,
    "avg_bits_err_output": 0.16355432343849158,
    "avg_bits_err_improve": 43.04669408678023,
    "time": 38649.0625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -5e+154) (/ (- (hypot b (pow (* a (* (* c -4.0) (* a (* c -4.0)))) 0.25)) b) (* a 2.0)) (if (<= b -1.1e-234) (/ (- (sqrt (- (* b b) (* c (* a 4.0)))) b) (* a 2.0)) (* c (/ -2.0 (+ b (hypot b (sqrt (* -4.0 (* a c)))))))))",
    "output_parens": 29,
    "avg_bits_err_input": 34.03373881434307,
    "avg_bits_err_output": 18.765420259030932,
    "avg_bits_err_improve": 15.268318555312135,
    "time": 35139.87548828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (fma (* (cos phi2) (cos lambda1)) (cos lambda2) (* (sin lambda1) (* (cos phi2) (sin lambda2)))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.9227916492343113,
    "avg_bits_err_output": 0.22969890054931186,
    "avg_bits_err_improve": 0.6930927486849995,
    "time": 40386.593017578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (/ (- (pow (* (pow (fma 4.0 (pow (+ (pow (exp -2.0) x) 1.0) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x))))) -2.0) (* (/ -8.0 (pow (- -1.0 (pow (exp -2.0) x)) 3.0)) (/ -8.0 (pow (- -1.0 (pow (exp -2.0) x)) 3.0)))) 2.0) (* (pow (fma 4.0 (pow (+ (pow (exp -2.0) x) 1.0) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x))))) -2.0) (pow (fma 4.0 (pow (+ (pow (exp -2.0) x) 1.0) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x))))) -2.0))) (+ (pow (fma 4.0 (pow (+ (pow (exp -2.0) x) 1.0) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x))))) -2.0) (* (pow (fma 4.0 (pow (+ (pow (exp -2.0) x) 1.0) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x))))) -2.0) (* (/ -8.0 (pow (- -1.0 (pow (exp -2.0) x)) 3.0)) (/ -8.0 (pow (- -1.0 (pow (exp -2.0) x)) 3.0)))))) (log (* (exp (/ (/ 8.0 (pow (+ (pow (exp -2.0) x) 1.0) 3.0)) (fma 4.0 (pow (+ (pow (exp -2.0) x) 1.0) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x))))))) (exp (/ 1.0 (fma 4.0 (pow (+ (pow (exp -2.0) x) 1.0) -2.0) (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x))))))))))",
    "output_parens": 116,
    "avg_bits_err_input": 29.48602237292531,
    "avg_bits_err_output": 29.481662302985242,
    "avg_bits_err_improve": 0.0043600699400663245,
    "time": 66271.93823242188,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.31821049390211,
    "avg_bits_err_output": 0.013125,
    "avg_bits_err_improve": 58.305085493902105,
    "time": 9446.36669921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.194048431410835,
    "avg_bits_err_output": 0.007323120312590145,
    "avg_bits_err_improve": 58.18672531109824,
    "time": 10564.604736328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.007948120312590144,
    "avg_bits_err_output": 0.00775,
    "avg_bits_err_improve": 0.0001981203125901443,
    "time": 6427.164794921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.8415,
    "avg_bits_err_output": 0.0425,
    "avg_bits_err_improve": 31.799,
    "time": 6914.55078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (+ (log1p (* x (- x))) (* -2.0 (log1p (- x)))))",
    "output_parens": 8,
    "avg_bits_err_input": 58.690047170071864,
    "avg_bits_err_output": 0.0063231203125901445,
    "avg_bits_err_improve": 58.68372404975928,
    "time": 23325.353271484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log1p (+ (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x) -1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.04382312031259015,
    "avg_bits_err_output": 0.04432312031259015,
    "avg_bits_err_improve": -0.0005000000000000004,
    "time": 8761.962646484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12657312031259016,
    "avg_bits_err_output": 0.12657312031259016,
    "avg_bits_err_improve": 0,
    "time": 33359.701416015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (/ 1.0 (hypot 1.0 (* (- eh) (/ (tan t) ew))))) (* (* eh (sin t)) (sin (atan (/ (* eh (- (tan t))) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13507312031259017,
    "avg_bits_err_output": 0.13621936093777043,
    "avg_bits_err_improve": -0.0011462406251802615,
    "time": 52802.417724609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))) (* (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))) (- lambda2 lambda1))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 38.737575955172545,
    "avg_bits_err_output": 0.11534741241823435,
    "avg_bits_err_improve": 38.622228542754314,
    "time": 37289.344970703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (+ 1.0 (+ 1.0 (- -1.0 (/ (/ b a) (/ a b))))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.581460396180367,
    "avg_bits_err_output": 0.007594360937770434,
    "avg_bits_err_improve": 14.573866035242597,
    "time": 6416.595703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (/ (sin delta) (/ 1.0 (* (cos phi1) (sin theta)))) (+ (- (cos delta) (* (* (sin delta) (* (cos phi1) (cos theta))) (sin phi1))) (* (cos delta) (+ (/ (cos (* phi1 2.0)) 2.0) -0.5)))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.14823173516493837,
    "avg_bits_err_output": 0.17929373759311212,
    "avg_bits_err_improve": -0.03106200242817375,
    "time": 53786.040283203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) -5e-34) (/ (/ (- (fma b b (* c (* a -3.0))) (* b b)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* 3.0 a)) (/ (+ (- b) (sqrt (pow (pow (fma b b (* c (* a -3.0))) 3.0) 0.3333333333333333))) (* 3.0 a)))",
    "output_parens": 33,
    "avg_bits_err_input": 52.348724220987485,
    "avg_bits_err_output": 49.89119501372414,
    "avg_bits_err_improve": 2.4575292072633417,
    "time": 50726.95751953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.62054275743222,
    "avg_bits_err_output": 0.45470902501875127,
    "avg_bits_err_improve": 28.165833732413468,
    "time": 45602.89501953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (- (* b b) (* (* 3.0 a) c))) b) (* 3.0 a)) -1e-20) (* (/ (- (pow (fma b b (* a (* c -3.0))) 3.0) (pow b 6.0)) (* (fma b (+ b (sqrt (fma b b (* a (* c -3.0))))) (fma b b (* a (* c -3.0)))) (+ (pow (fma b b (* a (* c -3.0))) 1.5) (pow b 3.0)))) (/ 0.3333333333333333 a)) (/ (+ (- b) (sqrt (pow (pow (fma b b (* c (* a -3.0))) 3.0) 0.3333333333333333))) (* 3.0 a)))",
    "output_parens": 45,
    "avg_bits_err_input": 43.33573691100468,
    "avg_bits_err_output": 40.59212161589975,
    "avg_bits_err_improve": 2.743615295104931,
    "time": 68921.99780273438,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b 4.2e-136) (* (/ 1.0 (* a -3.0)) (- b (hypot (sqrt (fabs (* c (* a -3.0)))) b))) (if (<= b 3.7e+130) (/ (/ 0.1111111111111111 (/ (* -0.3333333333333333 (+ b (sqrt (fma a (* c -3.0) (* b b))))) (* a (* c 3.0)))) a) (/ (* (* a (* c -3.0)) (/ 0.3333333333333333 (+ b (hypot b (sqrt (* a (* c -3.0))))))) a)))",
    "output_parens": 34,
    "avg_bits_err_input": 34.085782308532885,
    "avg_bits_err_output": 17.01479160081323,
    "avg_bits_err_improve": 17.070990707719655,
    "time": 48730.444580078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (sin lambda2) (- (cos lambda1)) (* (sin lambda1) (cos lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (fma (cos lambda2) (cos lambda1) (* (sin lambda2) (sin lambda1))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.54259765526681,
    "avg_bits_err_output": 0.17650157639987732,
    "avg_bits_err_improve": 13.366096078866933,
    "time": 48768.530029296875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ -1.0 (+ x (* (+ x 1.0) (/ (- -1.0 x) x)))) (* (* (+ x 1.0) (/ 1.0 x)) (+ -1.0 x)))",
    "output_parens": 12,
    "avg_bits_err_input": 29.278962175140784,
    "avg_bits_err_output": 25.323415572182913,
    "avg_bits_err_improve": 3.9555466029578703,
    "time": 43820.321044921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ (- -1.0 x) (- 1.0 (* x x))) (/ x (+ x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.01004024101186092,
    "avg_bits_err_improve": 0.0017097589881390797,
    "time": 3131.17431640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.511259199520136,
    "avg_bits_err_output": 0.068625,
    "avg_bits_err_improve": 14.442634199520135,
    "time": 21003.216064453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (* 2.0 (fma B B (* C (* A -4.0))))) (- (sqrt (* F (+ C (- A (hypot B (- A C)))))))) (- (* B B) (* 4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (/ (* (sqrt (* (fma B (* 2.0 B) (* C (* A -8.0))) (- A (- (hypot B (- A C)) C)))) (- (sqrt F))) (fma B B (* A (* C -4.0)))) (/ (- (sqrt (* 2.0 (* F (- A (- (hypot B (- A C)) C)))))) (hypot B (pow (pow (* A (* C -4.0)) 2.0) 0.25)))))",
    "output_parens": 95,
    "avg_bits_err_input": 52.38712920987268,
    "avg_bits_err_output": 37.12825920255396,
    "avg_bits_err_improve": 15.25887000731872,
    "time": 74763.78857421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* (atan (/ (- (- C A) (hypot B (- C A))) B)) (/ 180.0 PI))",
    "output_parens": 8,
    "avg_bits_err_input": 30.086011349813948,
    "avg_bits_err_output": 14.227031993575514,
    "avg_bits_err_improve": 15.858979356238434,
    "time": 39758.435302734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (/ (- F) (* (sqrt F) (pow (fma C (* A -4.0) (* B B)) -0.5)))) (+ (* B B) (* -4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (* (sqrt (* F -2.0)) (sqrt (/ (+ A (+ C (hypot B (- A C)))) (- (* A (* 4.0 C)) (* B B))))) (/ (- (sqrt (* 2.0 (+ C (+ A (hypot B (- A C))))))) (* (/ 1.0 (sqrt F)) (hypot B (sqrt (* C (* A -4.0))))))))",
    "output_parens": 94,
    "avg_bits_err_input": 52.49758604289484,
    "avg_bits_err_output": 34.29485416925711,
    "avg_bits_err_improve": 18.20273187363773,
    "time": 55095.144287109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(* (* (cbrt g) (cbrt 0.5)) (cbrt (/ 1.0 a)))",
    "output_parens": 6,
    "avg_bits_err_input": 15.747999065916055,
    "avg_bits_err_output": 0.8449516831128658,
    "avg_bits_err_improve": 14.903047382803189,
    "time": 24083.92431640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (/ (cbrt (- (hypot g h) g)) (cbrt (* a 2.0))) (/ (cbrt (* (+ g (hypot g h)) -0.5)) (cbrt a)))",
    "output_parens": 13,
    "avg_bits_err_input": 36.39747149191954,
    "avg_bits_err_output": 2.8008115899031396,
    "avg_bits_err_improve": 33.5966599020164,
    "time": 31908.891845703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9896372187554094,
    "avg_bits_err_output": 0.035573496879867814,
    "avg_bits_err_improve": 0.9540637218755417,
    "time": 24870.312744140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ 1.0 (+ 1.0 (exp (- b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.8134481203125902,
    "avg_bits_err_output": 0.01633717525093784,
    "avg_bits_err_improve": 0.7971109450616524,
    "time": 11522.205322265625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b1) (/ a2 b2)) (if (or (<= (/ (* a1 a2) (* b1 b2)) -2e-266) (and (not (<= (/ (* a1 a2) (* b1 b2)) 2e-258)) (<= (/ (* a1 a2) (* b1 b2)) 4e+302))) (/ (* a1 a2) (* b1 b2)) (* a1 (/ (/ a2 b2) b1))))",
    "output_parens": 31,
    "avg_bits_err_input": 11.2541952019844,
    "avg_bits_err_output": 3.6266585332032633,
    "avg_bits_err_improve": 7.627536668781136,
    "time": 12858.415771484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5053160970876119,
    "avg_bits_err_output": 0.4398231203125902,
    "avg_bits_err_improve": 0.06549297677502175,
    "time": 11435.23681640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x 8.2e-7) (- (log (pow (sqrt (- (hypot 1.0 x) x)) 2.0))) (- (+ (log (pow (+ x (hypot 1.0 x)) -0.5)) (log (pow (+ x (hypot 1.0 x)) -0.5)))))",
    "output_parens": 18,
    "avg_bits_err_input": 53.08757398226754,
    "avg_bits_err_output": 29.258630429772964,
    "avg_bits_err_improve": 23.82894355249458,
    "time": 21192.607177734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.738474669718629,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.738474669718629,
    "time": 2438.7568359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.011875,
    "avg_bits_err_output": 0.011875,
    "avg_bits_err_improve": 0,
    "time": 4396.308349609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1234.59033203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (/ 2.0 (* r r)) (- -1.5 (fma (fma v -0.25 0.375) (* (/ 1.0 (- 1.0 v)) (pow (* r w) 2.0)) 0.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 13.043903285727616,
    "avg_bits_err_output": 0.365796258215858,
    "avg_bits_err_improve": 12.678107027511759,
    "time": 34466.057373046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (fma (/ 4.0 (fma x1 x1 1.0)) (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 37,
    "avg_bits_err_input": 0.511444133549421,
    "avg_bits_err_output": 0.32430564186946886,
    "avg_bits_err_improve": 0.1871384916799521,
    "time": 94987.47802734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (/ v (+ t1 u)) (- -1.0 (/ u t1)))",
    "output_parens": 5,
    "avg_bits_err_input": 18.071336238946007,
    "avg_bits_err_output": 1.4970707777710266,
    "avg_bits_err_improve": 16.57426546117498,
    "time": 19515.6416015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (+ 0.954929658551372 (* (* x x) -0.12900613773279798)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2382406015629507,
    "avg_bits_err_output": 0.19248120312590142,
    "avg_bits_err_improve": 0.04575939843704929,
    "time": 22659.03662109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003875,
    "avg_bits_err_output": 0.003875,
    "avg_bits_err_improve": 0,
    "time": 2840.294189453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI (* 0.5 (+ (/ 1.0 a) (/ -1.0 b)))) (+ a b)) (- b a))",
    "output_parens": 9,
    "avg_bits_err_input": 14.060157334164336,
    "avg_bits_err_output": 0.2975765207108092,
    "avg_bits_err_improve": 13.762580813453527,
    "time": 57163.763427734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (pow (cbrt (* x (+ eps -1.0))) 3.0))) (* (+ (/ 1.0 eps) -1.0) (exp (* x (- -1.0 eps))))) 2.0)",
    "output_parens": 16,
    "avg_bits_err_input": 29.404405551391168,
    "avg_bits_err_output": 29.40671144608777,
    "avg_bits_err_improve": -0.0023058946966010296,
    "time": 50289.37158203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (fma (/ 2.0 (+ 1.0 t)) (+ (/ 2.0 (+ 1.0 t)) -4.0) 6.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.034,
    "avg_bits_err_output": 0.006823120312590144,
    "avg_bits_err_improve": 0.02717687968740986,
    "time": 13073.499755859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(* (/ (+ 1.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (- 4.0 (pow (+ 2.0 (/ -2.0 (+ 1.0 t))) 4.0))) (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ -2.0 (/ 2.0 (+ 1.0 t))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.04125,
    "avg_bits_err_output": 0.018749807254101303,
    "avg_bits_err_improve": 0.0225001927458987,
    "time": 45247.934326171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ (/ 4.0 (/ (+ 1.0 t) t)) (/ (+ 1.0 t) t))) (+ (/ (/ 4.0 (/ (+ 1.0 t) t)) (/ (+ 1.0 t) t)) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0395,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 0.031375,
    "time": 17556.068115234375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3198.559814453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3143.30517578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4534.528076171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.83415294849226,
    "avg_bits_err_output": 0.242125,
    "avg_bits_err_improve": 7.592027948492261,
    "time": 18276.013916015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.251812304277228,
    "avg_bits_err_output": 7.251812304277228,
    "avg_bits_err_improve": 0,
    "time": 22467.400146484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (+ eps (* x 2.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.811674165106716,
    "avg_bits_err_output": 0.012125,
    "avg_bits_err_improve": 15.799549165106717,
    "time": 17479.26611328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (* x 0.125)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.533808319946438,
    "avg_bits_err_output": 0.3488823312532452,
    "avg_bits_err_improve": 3.184925988693193,
    "time": 30550.2392578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.969313845086171,
    "avg_bits_err_output": 0.019361090628064924,
    "avg_bits_err_improve": 14.949952754458106,
    "time": 17922.86083984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.13321700459055,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.13321700459055,
    "time": 5219.08935546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.14235252904971,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.14160252904971,
    "time": 4239.16015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.297375,
    "avg_bits_err_improve": 63.702625,
    "time": 69354.03784179688,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (* t 4e-32))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325748725749,
    "avg_bits_err_output": 0.40519812031259017,
    "avg_bits_err_improve": 61.4380593669449,
    "time": 14487.813720703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -4e-178) (/ (/ (+ b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) a) -2.0) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (/ (/ (* 4.0 (* a c)) -2.0) (* a (- b (hypot b (sqrt (* a (* c -4.0))))))) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 2e+267) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (/ (/ (+ b (hypot b (* (sqrt (* a -4.0)) (sqrt c)))) a) -2.0))))",
    "output_parens": 68,
    "avg_bits_err_input": 34.31682482700995,
    "avg_bits_err_output": 24.327232884116267,
    "avg_bits_err_improve": 9.989591942893686,
    "time": 36761.4931640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -5e+154) (/ (- (hypot b (pow (* a (* (* c -4.0) (* a (* c -4.0)))) 0.25)) b) (* a 2.0)) (if (<= b -1.1e-234) (/ (- (sqrt (- (* b b) (* c (* a 4.0)))) b) (* a 2.0)) (* c (/ -2.0 (+ b (hypot b (sqrt (* -4.0 (* a c)))))))))",
    "output_parens": 29,
    "avg_bits_err_input": 34.03373881434307,
    "avg_bits_err_output": 18.765420259030932,
    "avg_bits_err_improve": 15.268318555312135,
    "time": 34457.344482421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2378.852294921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (/ 1.0 x) (/ 1.0 (expm1 x)))",
    "output_parens": 4,
    "avg_bits_err_input": 40.27328378007921,
    "avg_bits_err_output": 0.021502443751081735,
    "avg_bits_err_improve": 40.25178133632813,
    "time": 6865.262451171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- x y) (* (hypot x y) (/ (hypot x y) (+ x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 20.603900004970843,
    "avg_bits_err_output": 0.03401917344137623,
    "avg_bits_err_improve": 20.569880831529467,
    "time": 19221.802734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.675466294662739,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.675466294662739,
    "time": 20147.400146484375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.038125,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.037375,
    "time": 4017.12841796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ b (+ b a))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02052124062518029,
    "avg_bits_err_output": 0.0115,
    "avg_bits_err_improve": 0.00902124062518029,
    "time": 7123.444091796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 0.0006250000000000006,
    "time": 5836.575439453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 1254.302001953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ a (+ c b)) d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39513477500432725,
    "avg_bits_err_output": 0.24125,
    "avg_bits_err_improve": 0.15388477500432726,
    "time": 27336.519775390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.82809672115579,
    "avg_bits_err_output": 0.00825,
    "avg_bits_err_improve": 29.81984672115579,
    "time": 6398.906005859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (/ (- (* x x) eps) (sqrt (- (* x x) eps)))))",
    "output_parens": 8,
    "avg_bits_err_input": 25.156603882026246,
    "avg_bits_err_output": 0.038658082813311304,
    "avg_bits_err_improve": 25.117945799212936,
    "time": 15942.2578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (cbrt (* (pow (- (/ x (tan x)) (cos x)) 2.0) (- (pow (/ x (tan x)) 3.0) (pow (cos x) 3.0)))) (cbrt (fma (cos x) (+ (/ x (tan x)) (cos x)) (pow (/ x (tan x)) 2.0))))",
    "output_parens": 24,
    "avg_bits_err_input": 30.202534991187456,
    "avg_bits_err_output": 30.214104856996347,
    "avg_bits_err_improve": -0.011569865808890967,
    "time": 55363.51171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00475,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.00375,
    "time": 2622.25244140625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 1e-270) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 5.0) (* n (+ (/ -100.0 i) (* 100.0 (/ (pow (+ 1.0 (/ i n)) n) i)))) (* n (/ (+ -100.0 (* 100.0 (pow (exp n) (log1p (/ i n))))) i))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.793414774631046,
    "avg_bits_err_output": 10.09599414631183,
    "avg_bits_err_improve": 37.697420628319215,
    "time": 32556.14599609375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= c -5.8e+131) (/ (* (fma a c (* b d)) (/ 1.0 (hypot d c))) (hypot c d)) (if (<= c -1200000000000.0) (+ (* (* b d) (pow (hypot c d) -2.0)) (* c (* a (pow (hypot c d) -2.0)))) (/ (/ (+ (* b d) (* c a)) (hypot c d)) (hypot c d))))",
    "output_parens": 27,
    "avg_bits_err_input": 26.54672000234614,
    "avg_bits_err_output": 17.704394733484605,
    "avg_bits_err_improve": 8.842325268861536,
    "time": 22629.565673828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 26.919322503604423,
    "avg_bits_err_output": 0.6182564475054333,
    "avg_bits_err_improve": 26.30106605609899,
    "time": 26708.007568359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(fma ux (+ maxCos -1.0) 1.0)",
    "output_parens": 2,
    "avg_bits_err_input": 0.034625,
    "avg_bits_err_output": 0.018505036215128213,
    "avg_bits_err_improve": 0.01611996378487179,
    "time": 9437.88671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (fma (* (cbrt (pow (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))) -2.0)) (- (pow (- (fma ux maxCos 1.0) ux) 4.0))) (cbrt (* (exp (* 2.0 (log (pow (fma ux maxCos (- 1.0 ux)) 12.0)))) (pow (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))) -4.0))) (fma (pow (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))) -2.0) (pow (- (fma ux maxCos 1.0) ux) 12.0) (* (pow (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))) -2.0) (fma (pow (- (fma ux maxCos 1.0) ux) 12.0) -1.0 1.0)))) (+ (/ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)))) (/ (pow (- (fma ux maxCos 1.0) ux) 6.0) (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))))))))",
    "output_parens": 88,
    "avg_bits_err_input": 13.48019772248627,
    "avg_bits_err_output": 11.938534917596042,
    "avg_bits_err_improve": 1.541662804890228,
    "time": 99265.54760742188,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (/ (* 8.0 (pow (* PI uy) 3.0)) (pow (* uy (* PI 2.0)) 2.0))) (cbrt (pow (+ (* ux (fma ux maxCos (- 1.0 ux))) (+ 1.0 (* (fma ux maxCos (- 1.0 ux)) (- -1.0 (* ux maxCos))))) 1.5)))",
    "output_parens": 21,
    "avg_bits_err_input": 13.519301336611504,
    "avg_bits_err_output": 11.28530929376367,
    "avg_bits_err_improve": 2.2339920428478344,
    "time": 72033.44750976562,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (sqrt (fma ux (* (- 1.0 ux) (* (* ux (* maxCos maxCos)) (+ ux -1.0))) 1.0)) (fma (cos (* 2.0 (log (+ 1.0 (expm1 (* uy PI)))))) xi (* (sin (* 2.0 (* uy PI))) yi)) (* (* ux maxCos) (* (- 1.0 ux) zi)))",
    "output_parens": 24,
    "avg_bits_err_input": 0.3487379499286087,
    "avg_bits_err_output": 0.3502580176821356,
    "avg_bits_err_improve": -0.0015200677535269214,
    "time": 64369.995361328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.20178646459810826,
    "avg_bits_err_output": 0.20232894584846886,
    "avg_bits_err_improve": -0.0005424812503606047,
    "time": 29369.07080078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(/ (sin (* 6.28318530718 u2)) (sqrt (/ (- 1.0 u1) u1)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5406407732888537,
    "avg_bits_err_output": 0.5455452220002298,
    "avg_bits_err_improve": -0.004904448711376075,
    "time": 23955.69873046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (/ u1 (- 1.0 (* u1 u1))) (* u1 (/ u1 (- 1.0 (* u1 u1)))))) (cos (* 6.28318530718 u2)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.33783987387645614,
    "avg_bits_err_output": 0.3463868781943201,
    "avg_bits_err_improve": -0.008547004317863982,
    "time": 25292.44091796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))) -1.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.34373294970418733,
    "avg_bits_err_output": 0.3441357487568544,
    "avg_bits_err_improve": -0.00040279905266704663,
    "time": 33240.6669921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.053398950078813255,
    "avg_bits_err_output": 0.03756563589897472,
    "avg_bits_err_improve": 0.015833314179838534,
    "time": 15707.7216796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (* 2.0 (+ s (* s (cosh (/ (fabs x) s))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13206295199689416,
    "avg_bits_err_output": 0.10700204927656275,
    "avg_bits_err_improve": 0.025060902720331416,
    "time": 20793.17236328125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641972797300889,
    "avg_bits_err_output": 0.6641972797300889,
    "avg_bits_err_improve": 0,
    "time": 33649.17578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (- (log (pow (fma (- 1.0 u) (exp (/ -2.0 v)) u) 2.0)) (/ (pow (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 2.0) (log (fma (- 1.0 u) (exp (/ -2.0 v)) u))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.16187538088854972,
    "avg_bits_err_output": 0.17536911079131204,
    "avg_bits_err_improve": -0.01349372990276232,
    "time": 29258.836181640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot eta (sqrt (/ sinTheta_O (/ (hypot 1.0 sinTheta_O) sinTheta_O)))))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.549048912363797,
    "avg_bits_err_output": 0.3730902933077797,
    "avg_bits_err_improve": 2.175958619056017,
    "time": 28958.212158203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (* (/ 0.5 v) (/ (/ (exp (* (/ sinTheta_O v) (- sinTheta_i))) v) (/ 1.0 cosTheta_i))) (/ cosTheta_O (sinh (/ 1.0 v))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4686063684886611,
    "avg_bits_err_output": 0.3686206759808958,
    "avg_bits_err_improve": 0.09998569250776529,
    "time": 55194.43359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (* (exp (fma (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v) 0.3333333333333333 0.23103333333333334)) (exp (* (+ (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v) 0.6931) 0.6666666666666666))) (/ 0.5 v))",
    "output_parens": 16,
    "avg_bits_err_input": 0.11032161080318517,
    "avg_bits_err_output": 0.12621874092858804,
    "avg_bits_err_improve": -0.015897130125402864,
    "time": 30624.293212890625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.47728999914480447,
    "avg_bits_err_output": 0.4282490426343809,
    "avg_bits_err_improve": 0.04904095651042356,
    "time": 52415.164306640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (/ (- 0.25 u) 0.75)) (* s -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.2990784434495346,
    "avg_bits_err_output": 0.5500173214120243,
    "avg_bits_err_improve": 0.7490611220375103,
    "time": 29849.800537109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.58015451999077,
    "avg_bits_err_output": 0.2065,
    "avg_bits_err_improve": 12.37365451999077,
    "time": 24364.16748046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ 0.125 (* s PI)) (+ (/ (exp (/ (- r) s)) r) (/ (* (cbrt (pow (exp -0.6666666666666666) (/ r s))) (cbrt (exp (/ (* r -0.3333333333333333) s)))) r)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1470153545370418,
    "avg_bits_err_output": 0.32760492291830423,
    "avg_bits_err_improve": -0.18058956838126244,
    "time": 47038.013671875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8823517852884531,
    "avg_bits_err_output": 0.7209336883007895,
    "avg_bits_err_improve": 0.16141809698766363,
    "time": 40099.387939453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ 1.0 (+ c (/ (exp (- (* 0.5 (log1p (* cosTheta -2.0))) (* cosTheta cosTheta))) (* cosTheta (sqrt PI))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6824175854522285,
    "avg_bits_err_output": 0.45128810466755154,
    "avg_bits_err_improve": 0.231129480784677,
    "time": 26674.194580078125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (/ (log1p (- u1)) (/ 1.0 (log1p (- u1)))) 0.25) (sin (* 2.0 (* PI u2))))",
    "output_parens": 11,
    "avg_bits_err_input": 13.323353505942526,
    "avg_bits_err_output": 0.5482733901150018,
    "avg_bits_err_improve": 12.775080115827524,
    "time": 22950.70458984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.368858134355358,
    "avg_bits_err_output": 0.3132657387652689,
    "avg_bits_err_improve": 13.05559239559009,
    "time": 23009.56982421875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* (- alpha) (log1p (- u0))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.121224912919445,
    "avg_bits_err_output": 0.3294742484399339,
    "avg_bits_err_improve": 13.79175066447951,
    "time": 22269.3310546875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ (/ cos2phi alphax) alphax) (/ 1.0 (/ alphay (/ sin2phi alphay)))))",
    "output_parens": 10,
    "avg_bits_err_input": 12.447327489928941,
    "avg_bits_err_output": 0.5566291336787211,
    "avg_bits_err_improve": 11.89069835625022,
    "time": 27130.681884765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -2e+37) (+ (/ (* l (pow PI 2.0)) PI) -1.0) (if (<= (* PI l) 2000.0) (+ (* PI l) (/ (/ -1.0 F) (/ F (tan (* PI l))))) (+ (* PI l) -1.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 16.601878004565418,
    "avg_bits_err_output": 1.3189939597877993,
    "avg_bits_err_improve": 15.282884044777617,
    "time": 33808.907470703125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2144387218755409,
    "avg_bits_err_output": 0.15,
    "avg_bits_err_improve": 0.0644387218755409,
    "time": 22876.178466796875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ (/ F (sqrt (fma x 2.0 (fma F F 2.0)))) (sin B)) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 14.15189048950995,
    "avg_bits_err_output": 10.658988229662537,
    "avg_bits_err_improve": 3.4929022598474138,
    "time": 33619.04150390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (log (tanh (* PI (* f 0.25))))) (* PI -0.25))",
    "output_parens": 7,
    "avg_bits_err_input": 61.46676337592357,
    "avg_bits_err_output": 0.6610836784266548,
    "avg_bits_err_improve": 60.80567969749691,
    "time": 42926.581298828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (or (<= t -9.2e-28) (not (<= t 1.3e-33))) (/ (* (sqrt 2.0) t) (sqrt (- (* (+ x 1.0) (/ (* 2.0 (* t t)) (+ x -1.0))) (* l (+ l (* l (/ (- -1.0 x) (+ x -1.0)))))))) (* (sqrt 2.0) (/ t (hypot l (sqrt (/ (* (+ x 1.0) (fma l l (* t (* 2.0 t)))) (+ x -1.0)))))))",
    "output_parens": 34,
    "avg_bits_err_input": 43.27858462668803,
    "avg_bits_err_output": 37.29259257024529,
    "avg_bits_err_improve": 5.98599205644274,
    "time": 44096.123046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.821904746008287,
    "avg_bits_err_output": 0.223667857817638,
    "avg_bits_err_improve": 3.598236888190649,
    "time": 30029.265625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (log (exp (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.9649431985483787,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 0.9563181985483787,
    "time": 15756.914306640625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (* (/ t l) (sqrt 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.122000677655011,
    "avg_bits_err_output": 1.1141285866964301,
    "avg_bits_err_improve": 9.007872090958582,
    "time": 29183.54052734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -4.4e+18) (sqrt (* U (* (* n 2.0) (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t)))) (if (<= U 4.7e-303) (sqrt (fma (/ l Om) (* (* U (fma l -2.0 (* (- U* U) (/ n (/ Om l))))) (* n 2.0)) (* n (* 2.0 (* U t))))) (if (or (<= U 1.86e-249) (not (<= U 4.5e-179))) (* (sqrt (* (* n 2.0) (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t))) (sqrt U)) (sqrt (* (* n 2.0) (+ (/ (* U (fma l -2.0 (* (- U* U) (/ n (/ Om l))))) (/ Om l)) (* U t)))))))",
    "output_parens": 59,
    "avg_bits_err_input": 33.972974253867456,
    "avg_bits_err_output": 24.322087138092392,
    "avg_bits_err_improve": 9.650887115775063,
    "time": 62170.34326171875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (* (* t (sin k)) (/ k l)) (* (/ k l) (tan k))))",
    "output_parens": 9,
    "avg_bits_err_input": 47.131482056898776,
    "avg_bits_err_output": 1.206511467592392,
    "avg_bits_err_improve": 45.92497058930638,
    "time": 102788.08447265625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= l -3.8e-61) (not (<= l -9e-307))) (* (/ l t) (/ (/ (/ l t) (sin k)) (* (* (+ 2.0 (pow (/ t k) -2.0)) (* t (tan k))) 0.5))) (* (/ (/ 2.0 (* (tan k) (+ 2.0 (pow (/ k t) 2.0)))) t) (/ (/ l t) (* t (/ (sin k) l)))))",
    "output_parens": 31,
    "avg_bits_err_input": 32.47317359083393,
    "avg_bits_err_output": 12.745584037532621,
    "avg_bits_err_improve": 19.727589553301307,
    "time": 81776.12939453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (+ (* a2 a2) (* a1 a1)) (sqrt 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5343601531460959,
    "avg_bits_err_output": 0.48717594220544014,
    "avg_bits_err_improve": 0.047184210940655724,
    "time": 26432.96533203125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(if (<= n 3.6e+24) (sqrt (/ (pow (* PI (* 2.0 n)) (- 1.0 k)) k)) (/ (sqrt (* k (pow (* 2.0 (* PI n)) (- 1.0 k)))) k))",
    "output_parens": 15,
    "avg_bits_err_input": 0.49964689433809917,
    "avg_bits_err_output": 0.44514593474075337,
    "avg_bits_err_improve": 0.0545009595973458,
    "time": 24857.39501953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (sinh l) (* (* 2.0 J) (cos (* 0.5 K)))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.01749178768661,
    "avg_bits_err_output": 0.07836560156295072,
    "avg_bits_err_improve": 16.93912618612366,
    "time": 20340.635009765625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 2.0) (/ (cos (- (* (* K (+ m n)) (cbrt 0.125)) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (- l (fabs (- m n)))))) (/ (cos (- (pow (* K (/ (* (+ m n) 0.5) (cbrt (* (pow (* K (+ m n)) 2.0) 0.25)))) 3.0) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (- l (fabs (- m n)))))))",
    "output_parens": 55,
    "avg_bits_err_input": 15.429412809716103,
    "avg_bits_err_output": 1.3219231514042071,
    "avg_bits_err_improve": 14.107489658311897,
    "time": 45085.0927734375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.04782312031259,
    "avg_bits_err_output": 8.20944812031259,
    "avg_bits_err_improve": 9.838375,
    "time": 33138.210693359375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) -5e+124) (* w0 (sqrt (- 1.0 (/ (/ M (/ l h)) (/ (/ 4.0 (/ D d)) (* M (/ D d))))))) (if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) 5e-85) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (+ 1.0 (* h (* (/ (* D (/ M d)) (* (/ d M) (/ l D))) -0.25)))))))",
    "output_parens": 47,
    "avg_bits_err_input": 13.978490889181716,
    "avg_bits_err_output": 9.726121842870894,
    "avg_bits_err_improve": 4.252369046310822,
    "time": 40862.0458984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -4e+281) (* (sqrt (- A)) (/ (/ c0 (sqrt (- V))) (sqrt l))) (if (<= (* V l) -2e-271) (/ c0 (/ (sqrt (- (* V l))) (sqrt (- A)))) (if (<= (* V l) 0.0) (/ c0 (* (sqrt (- V)) (sqrt (/ l (- A))))) (if (<= (* V l) 5e+282) (* c0 (/ (sqrt A) (sqrt (* V l)))) (* c0 (sqrt (/ (/ A V) l)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 18.650584142982236,
    "avg_bits_err_output": 5.124281399348942,
    "avg_bits_err_improve": 13.526302743633295,
    "time": 43039.810791015625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) -4e+19) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (* d (pow D -2.0)) (/ (/ (* c0 d) w) h) M)) (sqrt (- (* (* d (pow D -2.0)) (/ (/ (* c0 d) w) h)) M)) (* (* d (pow D -2.0)) (/ (/ (* c0 d) w) h)))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 1e+253) (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (* (/ (* c0 d) (* h (* w D))) (/ d D))) (* M M))))) (log (pow (exp (* (/ M w) (- (/ M -2.0)))) (/ c0 (fma (* (/ (/ c0 (* D D)) h) (/ d w)) d (- (hypot M (* (/ c0 D) (/ (* d (/ d w)) (* h D)))))))))))",
    "output_parens": 129,
    "avg_bits_err_input": 59.53759391199181,
    "avg_bits_err_output": 30.181375783201077,
    "avg_bits_err_improve": 29.356218128790736,
    "time": 92433.83471679688,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= l -4.2e+214) (* (sqrt (/ d h)) (* (/ (sqrt (- d)) (sqrt (- l))) (+ 1.0 (* 0.5 (/ (* (/ D d) (* M -0.5)) (* (* (/ d D) (/ 2.0 M)) (/ l h))))))) (if (<= l -9e-124) (* (+ 1.0 (* (pow (* (/ M 2.0) (/ D d)) 2.0) (* (/ h l) -0.5))) (* (* (sqrt (- d)) (sqrt (/ 1.0 (- h)))) (sqrt (/ d l)))) (if (<= l -2e-308) (* (* (/ (sqrt (- d)) (sqrt (- l))) (sqrt (/ d h))) (+ 1.0 (* (/ 1.0 l) (/ (* (* 0.125 (* M D)) (/ -1.0 d)) (/ (/ d D) (* h M)))))) (if (<= l 2.35e-5) (* (sqrt (/ d h)) (* (/ (sqrt d) (sqrt l)) (+ 1.0 (* 0.5 (/ (* h (* (/ D d) (* M -0.5))) (* l (* (/ d D) (/ 2.0 M)))))))) (if (<= l 1.55e+78) (- (/ d (sqrt (* l h))) (* (* (/ d (sqrt (* l h))) (pow (* M (/ D d)) 2.0)) (/ (* h 0.125) l))) (/ d (* (/ (sqrt l) (fma (* (/ h l) (pow (/ (* M D) (* d 2.0)) 2.0)) -0.5 1.0)) (sqrt h))))))))",
    "output_parens": 112,
    "avg_bits_err_input": 25.561166891117207,
    "avg_bits_err_output": 15.181426317806942,
    "avg_bits_err_improve": 10.379740573310265,
    "time": 125904.59814453125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (log (exp (- 1.0 (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 4.5)))) (+ 1.0 (+ (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 1.5) (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 3.0)))) (+ (/ 0.5 (hypot 1.0 x)) (+ 1.5 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))",
    "output_parens": 27,
    "avg_bits_err_input": 15.804121893032281,
    "avg_bits_err_output": 15.331999016039124,
    "avg_bits_err_improve": 0.4721228769931578,
    "time": 68802.7578125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* v (* v -6.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9842712406251803,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 0.9732712406251803,
    "time": 7688.708251953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (fma v (* v -5.0) 1.0) (sqrt (fma v (* v -6.0) 2.0))) (* PI (- 1.0 (* v v)))) t)",
    "output_parens": 11,
    "avg_bits_err_input": 0.43664791206242864,
    "avg_bits_err_output": 0.11440828632589338,
    "avg_bits_err_improve": 0.32223962573653525,
    "time": 15749.57373046875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (- 1.0 (* v v)) (* (sqrt (+ 2.0 (* v (* v -6.0)))) 0.25))",
    "output_parens": 8,
    "avg_bits_err_input": 0.01102124062518029,
    "avg_bits_err_output": 0.00825,
    "avg_bits_err_improve": 0.002771240625180289,
    "time": 19064.9501953125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(+ -1.0 (* (pow (* (cbrt (- 1.0 (pow (acos (/ (fma (* v v) -5.0 1.0) (fma v v -1.0))) 2.0))) (cbrt (/ 1.0 (- 1.0 (acos (/ (fma (* v v) -5.0 1.0) (fma v v -1.0))))))) 2.0) (cbrt (+ 1.0 (acos (/ (fma v (* v -5.0) 1.0) (fma v v -1.0)))))))",
    "output_parens": 27,
    "avg_bits_err_input": 0.5026736243882015,
    "avg_bits_err_output": 0.5097070338536743,
    "avg_bits_err_improve": -0.007033409465472817,
    "time": 36643.21875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (- (/ -1.0 a) (/ (+ k 10.0) (/ a k))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.1803358968477475,
    "avg_bits_err_output": 0.23975166643391024,
    "avg_bits_err_improve": 1.9405842304138372,
    "time": 18195.94775390625,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.01842832603964897,
    "avg_bits_err_output": 0.01842832603964897,
    "avg_bits_err_improve": 0,
    "time": 9773.890380859375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18791059254041304,
    "avg_bits_err_output": 0.017555113031797877,
    "avg_bits_err_improve": 0.17035547950861515,
    "time": 10636.34912109375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1883576957532427,
    "avg_bits_err_output": 0.02952381928378819,
    "avg_bits_err_improve": 0.15883387646945452,
    "time": 21210.18798828125,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18364499700213033,
    "avg_bits_err_output": 0.029968490487727997,
    "avg_bits_err_improve": 0.15367650651440234,
    "time": 21173.984375,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(pow (pow (+ 0.5 (* 0.5 (/ x (hypot x (* p 2.0))))) 2.0) 0.25)",
    "output_parens": 7,
    "avg_bits_err_input": 13.064064303577362,
    "avg_bits_err_output": 13.058585308787864,
    "avg_bits_err_improve": 0.00547899478949887,
    "time": 24486.992919921875,
    "seed": 11,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (+ x x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.81136276382824,
    "avg_bits_err_output": 0.048375,
    "avg_bits_err_improve": 40.76298776382824,
    "time": 5946.85595703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (fma (pow (/ 1.0 (/ (pow (cbrt (tan x)) 2.0) (tan x))) 2.0) (/ 1.0 (cbrt (/ 1.0 (tan x)))) (- x)))",
    "output_parens": 21,
    "avg_bits_err_input": 30.762234360860536,
    "avg_bits_err_output": 25.451498043061967,
    "avg_bits_err_improve": 5.310736317798568,
    "time": 39181.59521484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (+ (pow (exp (* (log (hypot b_2 (sqrt (* a c)))) 1.5)) 0.6666666666666666) (- b_2)) a) (if (<= b_2 1e-184) (/ (fabs (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a) (/ (/ (* a (- c)) (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))) a)))",
    "output_parens": 30,
    "avg_bits_err_input": 33.928949676298444,
    "avg_bits_err_output": 21.687143651554692,
    "avg_bits_err_improve": 12.241806024743752,
    "time": 29688.587646484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 2.5e-162) (/ (- c) (- b_2 (sqrt (- (* b_2 b_2) (* c a))))) (/ (- (- (/ a (/ (sqrt (- (* b_2 b_2) (* c a))) c)) (* b_2 (/ b_2 (sqrt (- (* b_2 b_2) (* c a)))))) b_2) a))",
    "output_parens": 24,
    "avg_bits_err_input": 34.00131642707157,
    "avg_bits_err_output": 18.5447645966895,
    "avg_bits_err_improve": 15.456551830382072,
    "time": 26601.884765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 31.479503745857624,
    "avg_bits_err_output": 0.13586842188131015,
    "avg_bits_err_improve": 31.343635323976315,
    "time": 24459.18359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (/ 1.0 (exp (/ (log1p x) (- n)))) (pow x (/ 1.0 n)))",
    "output_parens": 8,
    "avg_bits_err_input": 32.72777396419889,
    "avg_bits_err_output": 32.466972168501,
    "avg_bits_err_improve": 0.260801795697887,
    "time": 41302.122802734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.78660663386939,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 29.77873163386939,
    "time": 37440.6787109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 x) (- -1.0 x))",
    "output_parens": 3,
    "avg_bits_err_input": 14.227968964086289,
    "avg_bits_err_output": 0.07257312031259014,
    "avg_bits_err_improve": 14.155395843773698,
    "time": 12891.21875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= eps -4e-5) (- (* (cos x) (cos eps)) (fma (sin x) (sin eps) (cos x))) (if (<= eps 0.0003) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (fma (sin x) (- (sin eps)) (- (* (cos x) (cos eps)) (cos x)))))",
    "output_parens": 29,
    "avg_bits_err_input": 39.80847367086928,
    "avg_bits_err_output": 0.724198042686135,
    "avg_bits_err_improve": 39.08427562818315,
    "time": 34421.952392578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ (+ 1.0 (- x x)) (fma (cbrt x) (+ (cbrt (+ 1.0 x)) (/ x (pow (cbrt x) 2.0))) (/ (+ 1.0 x) (cbrt (+ 1.0 x)))))",
    "output_parens": 15,
    "avg_bits_err_input": 29.97572181503202,
    "avg_bits_err_output": 0.21835169219101547,
    "avg_bits_err_improve": 29.757370122841007,
    "time": 25891.65673828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.441579290088793,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 30.44132929008879,
    "time": 9196.956298828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (* (/ 0.5 a) (- (hypot (* (sqrt (* a -4.0)) (sqrt c)) b) b)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -1e-156) (+ (* 0.5 (/ (- (sqrt (fma a (* c -4.0) (* b b))) b) a)) (fma (/ -0.5 a) b (* b (/ 0.5 a)))) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (/ 0.5 (* (+ b (hypot (sqrt (* a (* c -4.0))) b)) (/ a (fma a (* c -4.0) (- (* b b) (* b b)))))) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 2e+290) (+ (* 0.5 (/ (- (sqrt (fma a (* c -4.0) (* b b))) b) a)) (fma (/ -0.5 a) b (* b (/ 0.5 a)))) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 94,
    "avg_bits_err_input": 34.157592644304245,
    "avg_bits_err_output": 20.43566644371468,
    "avg_bits_err_improve": 13.721926200589564,
    "time": 41899.11962890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(* -0.5 (/ (+ b (hypot (* (sqrt (* 4.0 (fabs a))) (sqrt (fabs c))) b)) a))",
    "output_parens": 10,
    "avg_bits_err_input": 34.35626756182946,
    "avg_bits_err_output": 16.98199683485564,
    "avg_bits_err_improve": 17.374270726973823,
    "time": 37728.076171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.43951174953297,
    "avg_bits_err_output": 0.021627443751081738,
    "avg_bits_err_improve": 61.41788430578189,
    "time": 10868.630126953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (log (/ (+ n 1.0) n)) (* (- 1.0 (pow (log1p n) 2.0)) (/ (+ (* (+ (pow (+ 1.0 (/ 1.0 (- -1.0 (log1p n)))) 2.0) (+ 2.0 (/ 1.0 (- -1.0 (log1p n))))) (pow (+ 1.0 (/ 1.0 (- -1.0 (log1p n)))) 3.0)) (- (+ -2.0 (/ -1.0 (- -1.0 (log1p n)))) (pow (+ 1.0 (/ 1.0 (- -1.0 (log1p n)))) 2.0))) (* (+ (pow (+ 1.0 (/ 1.0 (- -1.0 (log1p n)))) 2.0) (+ 2.0 (/ 1.0 (- -1.0 (log1p n))))) (+ (pow (+ 1.0 (/ 1.0 (- -1.0 (log1p n)))) 2.0) (+ 2.0 (/ 1.0 (- -1.0 (log1p n)))))))))",
    "output_parens": 57,
    "avg_bits_err_input": 63.00671293506907,
    "avg_bits_err_output": 44.217645303192015,
    "avg_bits_err_improve": 18.789067631877053,
    "time": 45201.760009765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.7625527710156,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 58.7554277710156,
    "time": 25101.482666015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (fma 0.0 (* (- (cbrt (- x))) (cbrt (* x x))) (fma (cbrt (- x)) (cbrt (* x x)) (/ (pow (tan x) 2.0) (tan x)))) x) (tan x))",
    "output_parens": 19,
    "avg_bits_err_input": 59.934265574616184,
    "avg_bits_err_output": 59.75719220122308,
    "avg_bits_err_improve": 0.1770733733931067,
    "time": 38728.55224609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ eps (expm1 (* eps b))) (/ (expm1 (* eps (+ b a))) (expm1 (* eps a))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.224248678815805,
    "avg_bits_err_output": 28.91836485670199,
    "avg_bits_err_improve": 31.305883822113813,
    "time": 33871.98486328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.09620958617261,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 41.08608458617261,
    "time": 7400.9638671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.8305333361147,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.8299083361147,
    "time": 2635.004150390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.26460244412646,
    "avg_bits_err_output": 0.017303307870343385,
    "avg_bits_err_improve": 29.247299136256117,
    "time": 20811.83203125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (pow (exp x) 2.0) (+ (* (exp x) -2.0) 3.0) -1.0) (* (exp x) (fma (exp x) -2.0 -1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.557129343382474,
    "avg_bits_err_output": 29.300356759646917,
    "avg_bits_err_improve": 0.25677258373555745,
    "time": 40624.449951171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (fma (/ -1.0 (* x (- 1.0 x))) (fma 2.0 (- 1.0 x) x) (* (fma 2.0 (- 1.0 x) x) (/ 1.0 (* x (- 1.0 x))))) (fma (/ 1.0 (- 1.0 (* x x))) (- 1.0 x) (* (/ -1.0 (* x (- 1.0 x))) (fma 2.0 (- 1.0 x) x))))",
    "output_parens": 24,
    "avg_bits_err_input": 9.862247228978633,
    "avg_bits_err_output": 9.857973216512876,
    "avg_bits_err_improve": 0.004274012465756982,
    "time": 52040.265380859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (<= eps -5.6e-17) (fma (+ (tan x) (tan eps)) (/ 1.0 (- 1.0 (* (tan x) (tan eps)))) (- (tan x))) (if (<= eps 6.5e-17) (/ (+ (* (cos x) (- (/ (sin (+ eps x)) (sin x)) (cos eps))) (* (sin x) (sin eps))) (/ (cos (+ eps x)) (tan x))) (- (/ (+ (tan eps) (/ (sin x) (cos x))) (- 1.0 (* (tan x) (tan eps)))) (tan x))))",
    "output_parens": 44,
    "avg_bits_err_input": 37.14351349314595,
    "avg_bits_err_output": 19.732529908964608,
    "avg_bits_err_improve": 17.410983584181345,
    "time": 36588.9765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.103093410625217,
    "avg_bits_err_output": 0.1356511281273438,
    "avg_bits_err_improve": 29.967442282497874,
    "time": 22334.436279296875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (cos x) (sin eps) (* (sin x) (+ (cos eps) -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 37.06058064168207,
    "avg_bits_err_output": 0.37016437105213174,
    "avg_bits_err_improve": 36.69041627062994,
    "time": 26157.151611328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (fma (sqrt (+ x 1.0)) (sqrt x) (+ x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 19.78679781097523,
    "avg_bits_err_output": 0.12271240625180292,
    "avg_bits_err_improve": 19.664085404723426,
    "time": 22758.656494140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (+ (+ 1.0 N) (* N N)))",
    "output_parens": 4,
    "avg_bits_err_input": 15.702685266654953,
    "avg_bits_err_output": 0.40531835293403606,
    "avg_bits_err_improve": 15.297366913720918,
    "time": 20456.98291015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.68373776830271,
    "avg_bits_err_output": 1.1927035824343493,
    "avg_bits_err_improve": 28.49103418586836,
    "time": 25772.798095703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (/ (* m (- 1.0 m)) v) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07484680468885217,
    "avg_bits_err_output": 0.07484680468885217,
    "avg_bits_err_improve": 0,
    "time": 29212.139404296875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* a (- b)) (/ (/ 1.0 a) b))",
    "output_parens": 5,
    "avg_bits_err_input": 16.554429015546823,
    "avg_bits_err_output": 0.2613496250072112,
    "avg_bits_err_improve": 16.293079390539614,
    "time": 19339.32470703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* angle (* PI -0.005555555555555556)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.127718495623387,
    "avg_bits_err_output": 20.101644816409127,
    "avg_bits_err_improve": 0.02607367921426018,
    "time": 48185.931884765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* (* PI 0.011111111111111112) angle)) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 31.189253402311895,
    "avg_bits_err_output": 21.57574408100707,
    "avg_bits_err_improve": 9.613509321304825,
    "time": 42828.646728515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (- (* (cos (fma angle (* PI 0.005555555555555556) 1.0)) (cos -1.0)) (* (sin (fma angle (* PI 0.005555555555555556) 1.0)) (sin -1.0)))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.250990098620672,
    "avg_bits_err_output": 20.255673477665912,
    "avg_bits_err_improve": -0.004683379045239633,
    "time": 50731.10302734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (/ (* m (- 1.0 m)) v) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.174386842188131,
    "avg_bits_err_output": 0.174386842188131,
    "avg_bits_err_improve": 0,
    "time": 19598.34912109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32787923409624165,
    "avg_bits_err_output": 0.32370753386473006,
    "avg_bits_err_improve": 0.004171700231511588,
    "time": 31923.51611328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13361560156295077,
    "avg_bits_err_output": 0.13354248125036058,
    "avg_bits_err_improve": 7.312031259018581e-05,
    "time": 24642.256103515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda1) (cos lambda2)))))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 16.553132762127607,
    "avg_bits_err_output": 3.815072311607801,
    "avg_bits_err_improve": 12.738060450519805,
    "time": 38727.790771484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ 0.5 (* (/ a (fma (* a c) -4.0 (- (* b b) (* b b)))) (+ b (sqrt (fma (* a c) -4.0 (* b b))))))",
    "output_parens": 13,
    "avg_bits_err_input": 52.54578696672873,
    "avg_bits_err_output": 0.4544075523565057,
    "avg_bits_err_improve": 52.09137941437222,
    "time": 38704.040771484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fma c (* a -4.0) (- (* b b) (* b b))) a) (/ (/ 1.0 (+ b (sqrt (fma b b (* c (* a -4.0)))))) 2.0))",
    "output_parens": 14,
    "avg_bits_err_input": 28.703022829959906,
    "avg_bits_err_output": 0.44047822891801386,
    "avg_bits_err_improve": 28.262544601041892,
    "time": 44657.5947265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -5e-22) (/ (/ (- (pow (fma b b (* -4.0 (* a c))) 4.5) (pow b 9.0)) (* (fma b (+ b (sqrt (fma b b (* -4.0 (* a c))))) (fma b b (* -4.0 (* a c)))) (+ (+ (pow (fma b b (* -4.0 (* a c))) 3.0) (pow b 6.0)) (pow (* b (sqrt (fma b b (* -4.0 (* a c))))) 3.0)))) (* a 2.0)) (* (+ (- b) (pow (pow (fma c (* a -4.0) (* b b)) 1.5) 0.3333333333333333)) (/ 0.5 a)))",
    "output_parens": 51,
    "avg_bits_err_input": 43.95278290847692,
    "avg_bits_err_output": 41.117795786008294,
    "avg_bits_err_improve": 2.8349871224686254,
    "time": 61541.08642578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -3e-259) (* (- b (hypot (* (sqrt (* c -4.0)) (sqrt (fabs a))) b)) (/ -0.5 a)) (if (<= c 1.02e+73) (* (/ -0.5 a) (- b (hypot (sqrt (fabs (* (* c -4.0) a))) b))) (/ (- b (hypot b (* (sqrt (* -4.0 a)) (sqrt c)))) (* a -2.0))))",
    "output_parens": 29,
    "avg_bits_err_input": 34.16796812371057,
    "avg_bits_err_output": 18.439510789232425,
    "avg_bits_err_improve": 15.728457334478147,
    "time": 42872.882568359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8658996775858595,
    "avg_bits_err_output": 0.22705975753469707,
    "avg_bits_err_improve": 0.6388399200511624,
    "time": 45486.4443359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (- 1.0 (pow (/ -2.0 (- -1.0 (pow (exp -2.0) x))) 2.0)) (+ -1.0 (/ 2.0 (- -1.0 (pow (exp -2.0) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 29.094274758241443,
    "avg_bits_err_output": 29.093740812289894,
    "avg_bits_err_improve": 0.0005339459515489864,
    "time": 35169.290771484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.341430065011906,
    "avg_bits_err_output": 0.013823120312590146,
    "avg_bits_err_improve": 58.32760694469932,
    "time": 10233.083251953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.420190970130484,
    "avg_bits_err_output": 0.006375,
    "avg_bits_err_improve": 58.413815970130486,
    "time": 9036.132568359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(cbrt (pow (cosh x) -3.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007823120312590144,
    "avg_bits_err_output": 0.05756898874691487,
    "avg_bits_err_improve": -0.04974586843432473,
    "time": 4481.435302734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.969375,
    "avg_bits_err_output": 0.043,
    "avg_bits_err_improve": 31.926375,
    "time": 6039.3916015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.75718426350197,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 58.75005926350197,
    "time": 11594.143798828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(- (log (/ x (+ 1.0 (sqrt (- 1.0 (* x x)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.010875,
    "avg_bits_err_output": 0.001625,
    "avg_bits_err_improve": 0.00925,
    "time": 5259.486328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12107312031259015,
    "avg_bits_err_output": 0.12107312031259015,
    "avg_bits_err_improve": 0,
    "time": 39979.37939453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (pow (cbrt (* (- eh) (/ (tan t) ew))) 3.0))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.1320212406251803,
    "avg_bits_err_output": 0.1326462406251803,
    "avg_bits_err_improve": -0.0006249999999999867,
    "time": 44310.916748046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (+ (* (* (- lambda1 lambda2) (cos (* 0.5 phi1))) (cos (* 0.5 phi2))) (* (* (sin (* 0.5 phi1)) (sin (* 0.5 phi2))) (- lambda2 lambda1))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 39.16164565647196,
    "avg_bits_err_output": 0.132919925910153,
    "avg_bits_err_improve": 39.02872573056181,
    "time": 32052.085205078125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (/ (/ (- b) a) (/ a b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 15.001870432482269,
    "avg_bits_err_output": 0.0010574289523296622,
    "avg_bits_err_improve": 15.00081300352994,
    "time": 8418.710205078125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin delta) (* (sin theta) (cos phi1))) (fma (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))) (- (sin phi1)) (cos delta))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.15074603719722948,
    "avg_bits_err_output": 0.14527101133818818,
    "avg_bits_err_improve": 0.005475025859041305,
    "time": 49770.970458984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma -3.0 (* c a) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 52.54121187401281,
    "avg_bits_err_output": 0.08749060156295071,
    "avg_bits_err_improve": 52.45372127244986,
    "time": 43236.381591796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* a -3.0) c) (+ b (sqrt (fma b b (* (* a -3.0) c))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.833534575413424,
    "avg_bits_err_output": 0.4480060172039973,
    "avg_bits_err_improve": 28.385528558209426,
    "time": 41426.98681640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (+ (* b b) (* a (* c -3.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 44.071963725662876,
    "avg_bits_err_output": 0.16264644413776236,
    "avg_bits_err_improve": 43.90931728152511,
    "time": 37826.1279296875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= c -2.2e-259) (/ (/ -0.3333333333333333 a) (/ 1.0 (- b (hypot b (* (sqrt (* c -3.0)) (sqrt (fabs a))))))) (if (<= c 6.4e+72) (/ (/ -1.0 (* a 3.0)) (/ 1.0 (- b (hypot b (sqrt (fabs (* a (* c -3.0)))))))) (/ (/ -0.3333333333333333 a) (/ 1.0 (- b (hypot b (* (sqrt (* a -3.0)) (sqrt c))))))))",
    "output_parens": 33,
    "avg_bits_err_input": 34.19149044542867,
    "avg_bits_err_output": 18.552157145066655,
    "avg_bits_err_improve": 15.639333300362015,
    "time": 50217.111083984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (- (/ 1.0 (/ (/ 1.0 (cos lambda2)) (sin lambda1))) (* (cos lambda1) (sin lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (fma (sin lambda2) (sin lambda1) (* (cos lambda2) (cos lambda1))))))",
    "output_parens": 26,
    "avg_bits_err_input": 13.244023484142858,
    "avg_bits_err_output": 0.1941338898298557,
    "avg_bits_err_improve": 13.049889594313003,
    "time": 45074.52099609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (/ (/ (+ 1.0 (fma x (/ (+ x -1.0) (- -1.0 x)) x)) (* (/ 1.0 (+ 1.0 x)) (+ 1.0 x))) (* (+ 1.0 x) (/ -1.0 (- -1.0 x)))) (- 1.0 x))",
    "output_parens": 17,
    "avg_bits_err_input": 29.478830136119743,
    "avg_bits_err_output": 25.720272061831547,
    "avg_bits_err_improve": 3.758558074288196,
    "time": 38007.82275390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.012375,
    "avg_bits_err_output": 0.012375,
    "avg_bits_err_improve": 0,
    "time": 1676.291259765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (+ -1.0 x)) (- -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.356729808407922,
    "avg_bits_err_output": 0.07675,
    "avg_bits_err_improve": 14.279979808407921,
    "time": 27170.1142578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (fma B B (* (* A C) -4.0))) (- (sqrt (* 2.0 (* F (+ A (- C (hypot B (- A C))))))))) (- (* B B) (* 4.0 (* A C)))) (/ (- (sqrt (* (+ A (- C (hypot B (- A C)))) (* 2.0 (+ (* B (* B F)) (* F (* C (* A -4.0)))))))) (fma B B (* C (* A -4.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 52.68465213343055,
    "avg_bits_err_output": 44.63899028835493,
    "avg_bits_err_improve": 8.045661845075621,
    "time": 51567.489013671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 28.799872016422874,
    "avg_bits_err_output": 13.58139836741234,
    "avg_bits_err_improve": 15.218473649010534,
    "time": 28936.381103515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -5e-309) (/ (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (* (fma B B (* C (* A -4.0))) (/ (- F) (sqrt (* F (fma B B (* C (* A -4.0)))))))) (+ (* B B) (* -4.0 (* C A)))) (/ (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (* (fma B B (* C (* A -4.0))) (/ (- F) (* (sqrt F) (sqrt (fma B B (* A (* C -4.0)))))))) (+ (* B B) (* -4.0 (* C A)))))",
    "output_parens": 49,
    "avg_bits_err_input": 52.626284500470604,
    "avg_bits_err_output": 41.04301835519189,
    "avg_bits_err_improve": 11.583266145278714,
    "time": 55307.14599609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (/ g (/ g (cbrt g))) (cbrt (* a 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 15.048649245902647,
    "avg_bits_err_output": 0.8348297776456816,
    "avg_bits_err_improve": 14.213819468256965,
    "time": 22626.243896484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (* (cbrt (/ 0.5 a)) (cbrt (- (hypot g h) g))) (/ (cbrt (pow (sqrt (+ g (hypot g h))) 2.0)) (cbrt (* a -2.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 36.04933893785269,
    "avg_bits_err_output": 2.817577060420713,
    "avg_bits_err_improve": 33.23176187743198,
    "time": 36988.20654296875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (/ (+ (cos (* 2.0 (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333)))) 1.0) 2.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.9915689859449832,
    "avg_bits_err_output": 0.04088090506507382,
    "avg_bits_err_improve": 0.9506880808799094,
    "time": 35574.24853515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- (log1p (exp (- b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.6864481203125902,
    "avg_bits_err_output": 0.01053974557223292,
    "avg_bits_err_improve": 0.6759083747403573,
    "time": 15262.242431640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b1) (/ a2 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-317) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ a1 (/ b2 (/ a2 b1))) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+279) (/ (* a1 a2) (* b1 b2)) (/ (/ a1 b1) (/ b2 a2))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.087774609214982,
    "avg_bits_err_output": 2.599067141896208,
    "avg_bits_err_improve": 8.488707467318774,
    "time": 11641.330810546875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5410586298238309,
    "avg_bits_err_output": 0.459,
    "avg_bits_err_improve": 0.08205862982383089,
    "time": 8494.666259765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -10.0) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.053144343062264,
    "avg_bits_err_output": 0.06858755496476764,
    "avg_bits_err_improve": 52.9845567880975,
    "time": 19223.74169921875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.661814674667153,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.661814674667153,
    "time": 2011.734619140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.014125,
    "avg_bits_err_output": 0.014125,
    "avg_bits_err_improve": 0,
    "time": 4510.353759765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1221.369384765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (pow (* r w) 2.0) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.904227775203816,
    "avg_bits_err_output": 0.22809043008274404,
    "avg_bits_err_improve": 12.676137345121072,
    "time": 39263.38720703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (fma (* (fma x1 (fma (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0)) -6.0) 1.0) (* x1 x1)) x1 (* x1 (fma x1 (fma (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0)) -6.0) 1.0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.5144545917423572,
    "avg_bits_err_output": 0.320545880392573,
    "avg_bits_err_improve": 0.1939087113497842,
    "time": 86218.39306640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (/ (- t1) (/ (+ t1 u) v)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.37992929354394,
    "avg_bits_err_output": 1.4662321067919915,
    "avg_bits_err_improve": 16.913697186751946,
    "time": 22255.23681640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma 0.954929658551372 x (* (pow x 3.0) -0.12900613773279798))",
    "output_parens": 3,
    "avg_bits_err_input": 0.2313942038992627,
    "avg_bits_err_output": 0.21041524101186093,
    "avg_bits_err_improve": 0.02097896288740178,
    "time": 22538.74609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(+ (pow y 4.0) (+ (pow x 4.0) (* (pow y 4.0) -2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.003875,
    "avg_bits_err_output": 0.021625,
    "avg_bits_err_improve": -0.01775,
    "time": 18641.66845703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ PI (* a b)) (* 2.0 (+ a b)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.448593729422706,
    "avg_bits_err_output": 0.2556736939574846,
    "avg_bits_err_improve": 14.192920035465221,
    "time": 53136.07666015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (* (+ (/ 1.0 eps) -1.0) (expm1 (log1p (exp (* x (- -1.0 eps))))))) 2.0)",
    "output_parens": 16,
    "avg_bits_err_input": 29.068608974404512,
    "avg_bits_err_output": 29.07993576136408,
    "avg_bits_err_improve": -0.011326786959568125,
    "time": 50490.417724609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ 1.0 (+ 2.0 (* (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))) (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.00525,
    "avg_bits_err_output": 0.00525,
    "avg_bits_err_improve": 0,
    "time": 15588.043701171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ 2.0 (+ 1.0 t))))) (+ 2.0 (+ (+ 1.0 (pow (- 2.0 (/ 2.0 (+ 1.0 t))) 2.0)) -1.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.008625,
    "avg_bits_err_output": 0.006759601949631355,
    "avg_bits_err_improve": 0.0018653980503686458,
    "time": 35731.292724609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.047125,
    "avg_bits_err_output": 0.070875,
    "avg_bits_err_improve": -0.023749999999999993,
    "time": 9270.64990234375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3168.572509765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3884.963623046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4378.003173828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.822439552994903,
    "avg_bits_err_output": 0.2555,
    "avg_bits_err_improve": 7.566939552994904,
    "time": 20668.950439453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.196932921991729,
    "avg_bits_err_output": 7.196932921991729,
    "avg_bits_err_improve": 0,
    "time": 21384.534912109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (+ eps (* x 2.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.775917841363928,
    "avg_bits_err_output": 0.012,
    "avg_bits_err_improve": 15.763917841363927,
    "time": 13022.47412109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5279987713504624,
    "avg_bits_err_output": 0.38897951250937546,
    "avg_bits_err_improve": 3.139019258841087,
    "time": 31049.2998046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.238760082455856,
    "avg_bits_err_output": 0.01634924843993391,
    "avg_bits_err_improve": 15.222410834015923,
    "time": 9190.863037109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.974329284874436,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.974329284874436,
    "time": 4946.829833984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.31492535642638,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 39.31417535642638,
    "time": 5749.094970703125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.294375,
    "avg_bits_err_improve": 63.705625,
    "time": 59463.94775390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.843247791892665,
    "avg_bits_err_output": 0.32039624062518035,
    "avg_bits_err_improve": 61.522851551267486,
    "time": 14372.434326171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(* -0.5 (/ (+ b (hypot (* (sqrt (* 4.0 (fabs a))) (sqrt (fabs c))) b)) a))",
    "output_parens": 10,
    "avg_bits_err_input": 34.35626756182946,
    "avg_bits_err_output": 16.98199683485564,
    "avg_bits_err_improve": 17.374270726973823,
    "time": 38606.501708984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -3e-259) (* (- b (hypot (* (sqrt (* c -4.0)) (sqrt (fabs a))) b)) (/ -0.5 a)) (if (<= c 1.02e+73) (* (/ -0.5 a) (- b (hypot (sqrt (fabs (* (* c -4.0) a))) b))) (/ (- b (hypot b (* (sqrt (* -4.0 a)) (sqrt c)))) (* a -2.0))))",
    "output_parens": 29,
    "avg_bits_err_input": 34.16796812371057,
    "avg_bits_err_output": 18.439510789232425,
    "avg_bits_err_improve": 15.728457334478147,
    "time": 42094.412841796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1827.30322265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.96699280021474,
    "avg_bits_err_output": 0.0105,
    "avg_bits_err_improve": 39.95649280021474,
    "time": 6393.923583984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (/ (+ x y) (/ (hypot x y) (- x y))) (hypot x y))",
    "output_parens": 7,
    "avg_bits_err_input": 19.940154839816145,
    "avg_bits_err_output": 0.030000376567277685,
    "avg_bits_err_improve": 19.91015446324887,
    "time": 14402.548828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6135202606315286,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6135202606315286,
    "time": 16259.725830078125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.032625,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.031875,
    "time": 9102.192138671875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a b) (+ (* b b) (* a (+ a b))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.021542481250360578,
    "avg_bits_err_output": 0.019625,
    "avg_bits_err_improve": 0.0019174812503605781,
    "time": 7955.841064453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.01225,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 0,
    "time": 6014.117919921875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00025,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0,
    "time": 1673.7724609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ b (+ a c)) d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4040592109406551,
    "avg_bits_err_output": 0.237875,
    "avg_bits_err_improve": 0.1661842109406551,
    "time": 47413.31884765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.534509587325942,
    "avg_bits_err_output": 0.00525,
    "avg_bits_err_improve": 30.529259587325942,
    "time": 11148.2255859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (fma x x (- eps)))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.624325936858042,
    "avg_bits_err_output": 0.29377124062518034,
    "avg_bits_err_improve": 24.330554696232863,
    "time": 23382.68603515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(cbrt (* (- (/ x (tan x)) (cos x)) (pow (/ (tan x) (- x (sin x))) -2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.735580462747357,
    "avg_bits_err_output": 29.72642086839906,
    "avg_bits_err_improve": 0.009159594348297162,
    "time": 50486.644287109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0055,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.004625,
    "time": 5181.6640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 1e-239) (/ (* (expm1 (* n (log1p (/ i n)))) 100.0) (/ i n)) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 5000000000.0) (/ (+ (* (/ n (- i)) (* i 0.01)) (* 0.01 (* n (pow (+ 1.0 (/ i n)) n)))) (* 0.01 (* i 0.01))) (* n (/ (+ (* 100.0 (pow (exp n) (log1p (/ i n)))) -100.0) i))))",
    "output_parens": 44,
    "avg_bits_err_input": 47.906857548174784,
    "avg_bits_err_output": 11.1996451118858,
    "avg_bits_err_improve": 36.707212436288984,
    "time": 35388.034912109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) (- INFINITY)) (+ (/ b (/ (pow (hypot c d) 2.0) d)) (/ a (/ (pow (hypot c d) 2.0) c))) (if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 2e+291) (/ (/ (+ (* a c) (* b d)) (hypot c d)) (hypot c d)) (/ (/ (- (* (/ (* a c) (hypot c d)) (/ (* a c) (hypot c d))) (* (/ d (/ (hypot c d) b)) (/ d (/ (hypot c d) b)))) (- (/ (* a c) (hypot c d)) (/ d (/ (hypot c d) b)))) (hypot c d))))",
    "output_parens": 60,
    "avg_bits_err_input": 25.968229817912984,
    "avg_bits_err_output": 13.437443004153916,
    "avg_bits_err_improve": 12.530786813759068,
    "time": 23964.618896484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(/ (- (* c (/ b (hypot c d))) (* d (/ a (hypot c d)))) (hypot c d))",
    "output_parens": 9,
    "avg_bits_err_input": 26.133310396043644,
    "avg_bits_err_output": 1.0988161656266229,
    "avg_bits_err_improve": 25.03449423041702,
    "time": 19802.613525390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(fma ux (+ maxCos -1.0) 1.0)",
    "output_parens": 2,
    "avg_bits_err_input": 0.037625,
    "avg_bits_err_output": 0.0213086416274787,
    "avg_bits_err_improve": 0.016316358372521298,
    "time": 6612.083984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- (* (cbrt (pow (hypot (hypot 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (fma ux maxCos (- 1.0 ux))) -4.0)) (cbrt (pow (hypot (hypot 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (fma ux maxCos (- 1.0 ux))) -8.0))) (/ (/ (pow (pow (fma ux maxCos (- 1.0 ux)) 4.0) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 70,
    "avg_bits_err_input": 13.493586621741947,
    "avg_bits_err_output": 12.003415417167735,
    "avg_bits_err_improve": 1.490171204574212,
    "time": 89013.6572265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) 2.0) (/ (/ (pow (pow (fma ux maxCos (- 1.0 ux)) 4.0) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (/ -1.0 (* (pow (fma ux maxCos (- 1.0 ux)) -2.0) (- (pow (fma ux maxCos (- 1.0 ux)) -2.0)))))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 67,
    "avg_bits_err_input": 13.529781691518084,
    "avg_bits_err_output": 11.933801887392908,
    "avg_bits_err_improve": 1.5959798041251751,
    "time": 197653.67846679688,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- 1.0 ux) (* maxCos zi)) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (/ 1.0 (/ 1.0 (* 2.0 (* PI uy))))) xi) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.33362818424911234,
    "avg_bits_err_output": 0.3361854316100735,
    "avg_bits_err_improve": -0.00255724736096119,
    "time": 61356.6591796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.20030153685924734,
    "avg_bits_err_output": 0.1943562031259014,
    "avg_bits_err_improve": 0.005945333733345937,
    "time": 41215.10400390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (log1p (expm1 (sin (* 6.28318530718 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5431772925161444,
    "avg_bits_err_output": 0.5490075817939677,
    "avg_bits_err_improve": -0.005830289277823253,
    "time": 22263.82861328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3217833431545981,
    "avg_bits_err_output": 0.3217833431545981,
    "avg_bits_err_improve": 0,
    "time": 27771.010009765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log1p (/ (- 4.0 (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0)) (+ -2.0 (/ -1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 0.33924215969447646,
    "avg_bits_err_output": 0.3347013351085384,
    "avg_bits_err_improve": 0.004540824585938075,
    "time": 31043.913330078125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06396203401129882,
    "avg_bits_err_output": 0.04765389245739274,
    "avg_bits_err_improve": 0.016308141553906086,
    "time": 26490.6884765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (pow (sqrt (/ 0.5 (+ (cosh (/ (fabs x) s)) 1.0))) 2.0) s)",
    "output_parens": 8,
    "avg_bits_err_input": 0.13358078798172698,
    "avg_bits_err_output": 0.12854909117892208,
    "avg_bits_err_improve": 0.005031696802804908,
    "time": 25716.22802734375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* PI (* x tau))) (* PI (* x tau))) (/ (sin (* PI x)) (* PI x)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641672695097591,
    "avg_bits_err_output": 0.6647208177201474,
    "avg_bits_err_improve": -0.0005535482103882217,
    "time": 32051.350341796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.1575425624589511,
    "avg_bits_err_output": 0.15136695170411923,
    "avg_bits_err_improve": 0.006175610754831862,
    "time": 28365.17431640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(asin (/ h (hypot (/ sinTheta_O (sqrt (hypot 1.0 sinTheta_O))) eta)))",
    "output_parens": 6,
    "avg_bits_err_input": 2.537795758433255,
    "avg_bits_err_output": 1.7014391046210393,
    "avg_bits_err_improve": 0.8363566538122156,
    "time": 32641.884521484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (* (exp (/ (- (* sinTheta_O sinTheta_i)) v)) (/ cosTheta_i v)) (* cosTheta_O (/ (/ 0.5 v) (sinh (/ 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45374477729140716,
    "avg_bits_err_output": 0.38516970329196315,
    "avg_bits_err_improve": 0.06857507399944401,
    "time": 45906.62744140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (pow (exp (* (+ (/ -1.0 v) (+ 0.6931 (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v))) 0.5)) 2.0) (/ 0.5 v))",
    "output_parens": 12,
    "avg_bits_err_input": 0.1066016481684797,
    "avg_bits_err_output": 0.1070949491061482,
    "avg_bits_err_improve": -0.0004933009376685005,
    "time": 23035.587890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (- (* alpha alpha) 1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (log (+ 1.0 (expm1 (* (fma alpha alpha -1.0) (* cosTheta cosTheta))))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.47146334320773836,
    "avg_bits_err_output": 0.4349761094659698,
    "avg_bits_err_improve": 0.03648723374176854,
    "time": 61057.135498046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (/ (- 0.25 u) 0.75)) (* s -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3238551415534026,
    "avg_bits_err_output": 0.5627905080004953,
    "avg_bits_err_improve": 0.7610646335529072,
    "time": 28274.070556640625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.310275082294115,
    "avg_bits_err_output": 0.20532312031259015,
    "avg_bits_err_improve": 12.104951961981525,
    "time": 23049.020751953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (* 0.75 (exp (/ 1.0 (* s (/ -3.0 r))))) (* r (* s (* PI 6.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.15304794401725277,
    "avg_bits_err_output": 0.15581888177906192,
    "avg_bits_err_improve": -0.0027709377618091446,
    "time": 113176.31396484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8490767472671129,
    "avg_bits_err_output": 0.6906722059710816,
    "avg_bits_err_improve": 0.15840454129603132,
    "time": 38871.02978515625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (* (sqrt (- 1.0 (+ cosTheta cosTheta))) (exp (* cosTheta (- cosTheta)))) (* PI (/ cosTheta (sqrt PI))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.7068688293326224,
    "avg_bits_err_output": 0.4027119634564082,
    "avg_bits_err_improve": 0.3041568658762142,
    "time": 29049.38818359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (log1p (expm1 (sin (* 2.0 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.520307270022995,
    "avg_bits_err_output": 0.5296627898668328,
    "avg_bits_err_improve": 12.990644480156162,
    "time": 26328.570068359375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (/ -1.0 (/ 1.0 (log1p (- u1))))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.570601282770717,
    "avg_bits_err_output": 0.3366785136323248,
    "avg_bits_err_improve": 13.233922769138392,
    "time": 23289.685546875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* alpha (- alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 13.978770255565019,
    "avg_bits_err_output": 0.32047180468885217,
    "avg_bits_err_improve": 13.658298450876167,
    "time": 20240.3583984375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (- (/ (/ cos2phi alphax) alphax) (/ (/ sin2phi (- alphay)) alphay)))",
    "output_parens": 10,
    "avg_bits_err_input": 12.741572865133525,
    "avg_bits_err_output": 0.5043154498938764,
    "avg_bits_err_improve": 12.237257415239648,
    "time": 26805.7392578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(+ (* PI l) (/ (/ -1.0 F) (/ (* F (cos (pow (cbrt (* PI l)) 3.0))) (sin (* PI l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 16.591322162193293,
    "avg_bits_err_output": 12.505364461976564,
    "avg_bits_err_improve": 4.0859577002167295,
    "time": 35468.2109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2183977750432873,
    "avg_bits_err_output": 0.15408405316774643,
    "avg_bits_err_improve": 0.06431372187554088,
    "time": 22580.9697265625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ (* F (pow (fma x 2.0 (fma F F 2.0)) -0.5)) (sin B)) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.678654866980793,
    "avg_bits_err_output": 10.905680015957195,
    "avg_bits_err_improve": 2.772974851023598,
    "time": 36694.697021484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (/ (log (tanh (* PI (* f 0.25)))) PI) 4.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.54165585945417,
    "avg_bits_err_output": 0.5548312324664169,
    "avg_bits_err_improve": 60.98682462698775,
    "time": 40621.417724609375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ 1.0 (/ (sqrt (/ (fma l (- l) (* (/ (+ 1.0 x) (+ x -1.0)) (fma t (* t 2.0) (* l l)))) 2.0)) t))",
    "output_parens": 13,
    "avg_bits_err_input": 43.32659585248511,
    "avg_bits_err_output": 39.55826179921647,
    "avg_bits_err_improve": 3.768334053268646,
    "time": 45761.4873046875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.231344212828495,
    "avg_bits_err_output": 0.2201560156295071,
    "avg_bits_err_improve": 4.0111881971989884,
    "time": 28702.53466796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (log (exp (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.9556506569647484,
    "avg_bits_err_output": 0.006875,
    "avg_bits_err_improve": 0.9487756569647484,
    "time": 22814.42236328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ t (* (pow 2.0 -0.5) l)))))",
    "output_parens": 11,
    "avg_bits_err_input": 9.879134065163266,
    "avg_bits_err_output": 1.1387886385366364,
    "avg_bits_err_improve": 8.740345426626629,
    "time": 27181.00244140625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -2.8e-35) (sqrt (+ (* (fma l -2.0 (* (- U* U) (* l (/ n Om)))) (* 2.0 (/ (* l (* U n)) Om))) (* t (* 2.0 (* U n))))) (if (<= U -1.95e-122) (/ (sqrt (- n)) (sqrt (/ -0.5 (* U (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t))))) (if (<= U -6.4e-158) (sqrt (+ (* t (* 2.0 (* U n))) (pow (cbrt (* (fma l -2.0 (* (/ l Om) (* (- U* U) n))) (* (/ l Om) (* n (* U 2.0))))) 3.0))) (if (<= U -5.3e-260) (sqrt (* n (+ (* (fma (/ (* l n) Om) (- U* U) (* l -2.0)) (* (/ l Om) (* U 2.0))) (* U (* 2.0 t))))) (if (<= U -5e-311) (sqrt (+ (* t (* 2.0 (* U n))) (* l (* (fma (/ (* l n) Om) (- U* U) (* l -2.0)) (/ (* n (* U 2.0)) Om))))) (if (<= U 5.5e-242) (* (sqrt (* (* n 2.0) (fma (/ l Om) (+ (* l -2.0) (* (/ l Om) (* (- U* U) n))) t))) (sqrt U)) (if (<= U 4e-99) (sqrt (* n (+ (* (fma (/ (* l n) Om) (- U* U) (* l -2.0)) (* (/ l Om) (* U 2.0))) (* U (* 2.0 t))))) (* (sqrt U) (sqrt (* (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t) (* n 2.0)))))))))))",
    "output_parens": 127,
    "avg_bits_err_input": 34.715856491886406,
    "avg_bits_err_output": 27.144022326585517,
    "avg_bits_err_improve": 7.5718341653008885,
    "time": 64701.2666015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* k (* (/ k l) (/ (* (sin k) (tan k)) (/ l t)))))",
    "output_parens": 9,
    "avg_bits_err_input": 47.454367195334584,
    "avg_bits_err_output": 8.483470089619342,
    "avg_bits_err_improve": 38.97089710571524,
    "time": 88353.33837890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -9e-16) (not (<= t 1.3e+23))) (* (/ l t) (* (/ (/ l t) (* t (tan k))) (/ 2.0 (* (sin k) (+ 2.0 (pow (/ k t) 2.0)))))) (/ 2.0 (* (* (tan k) (* (* t (+ 2.0 (pow (/ k t) 2.0))) (/ t l))) (* (sin k) (/ t l)))))",
    "output_parens": 31,
    "avg_bits_err_input": 32.29597966000656,
    "avg_bits_err_output": 11.836626080327873,
    "avg_bits_err_improve": 20.459353579678684,
    "time": 83496.85717773438,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (* (cos th) (fma a2 a2 (* a1 a1))) (sqrt 2.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5231174843993409,
    "avg_bits_err_output": 0.4747609047061612,
    "avg_bits_err_improve": 0.04835657969317969,
    "time": 33942.740234375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (sqrt (/ PI (/ 0.5 n))) (- 1.0 k)) (pow k -0.5))",
    "output_parens": 7,
    "avg_bits_err_input": 0.4621902415054958,
    "avg_bits_err_output": 0.45474972739137776,
    "avg_bits_err_improve": 0.0074405141141180575,
    "time": 25001.64453125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(fma (* (sinh l) 2.0) (* J (cos (/ K 2.0))) U)",
    "output_parens": 6,
    "avg_bits_err_input": 17.13823190441733,
    "avg_bits_err_output": 0.07722896288740178,
    "avg_bits_err_improve": 17.061002941529928,
    "time": 30601.587646484375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 1.0) (/ (cos (- (/ (+ m n) (/ 2.0 K)) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (- l (fabs (- m n)))))) (/ (cos (- (pow (/ (* (+ m n) 0.5) (/ (cbrt (* (pow (* K (+ m n)) 2.0) 0.25)) K)) 3.0) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (- l (fabs (- m n)))))))",
    "output_parens": 54,
    "avg_bits_err_input": 15.457810561855487,
    "avg_bits_err_output": 1.381833104089516,
    "avg_bits_err_improve": 14.07597745776597,
    "time": 48759.213134765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (cos (/ K 2.0)) (* -2.0 (hypot 1.0 (* 0.5 (/ (/ U J) (cos (* K 0.5))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.109875,
    "avg_bits_err_output": 8.481575564063668,
    "avg_bits_err_improve": 9.62829943593633,
    "time": 39265.753173828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ (* M D) (* 2.0 d)) 5e-113) (* w0 (sqrt (+ 1.0 (* M (* (/ (* D (* h (* D (/ M d)))) l) (/ -0.25 d)))))) (* w0 (sqrt (+ 1.0 (/ (* (* M D) -0.5) (* d (/ 2.0 (* D (* M (/ (/ h l) d))))))))))",
    "output_parens": 28,
    "avg_bits_err_input": 14.03672484659555,
    "avg_bits_err_output": 10.719301012947348,
    "avg_bits_err_improve": 3.3174238336482027,
    "time": 80190.41430664062,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+257) (* c0 (/ (sqrt (/ (- A) l)) (sqrt (- V)))) (if (<= (* V l) -1e-264) (* c0 (/ (sqrt (- A)) (sqrt (* V (- l))))) (if (<= (* V l) 0.0) (* c0 (/ (sqrt (/ (- A) l)) (sqrt (- V)))) (if (<= (* V l) 2e+285) (* (sqrt A) (* c0 (pow (* V l) -0.5))) (/ c0 (sqrt (/ V (/ A l))))))))",
    "output_parens": 42,
    "avg_bits_err_input": 20.075743097737565,
    "avg_bits_err_output": 7.135935621515761,
    "avg_bits_err_improve": 12.939807476221803,
    "time": 36124.7861328125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= M -2.9e+46) (* (/ (* M (- M)) (- (sqrt (- (pow (* (/ d (* h (/ w d))) (/ c0 (* D D))) 2.0) (* M M))) (* (/ d (* h (/ w d))) (/ c0 (* D D))))) (/ c0 (* w 2.0))) (if (<= M -2.75e-151) (* (/ c0 (- (* (/ d D) (* (/ d (* w D)) (/ c0 h))) (sqrt (- (pow (* (/ d D) (* (/ d (* w D)) (/ c0 h))) 2.0) (* M M))))) (/ (fma M M 0.0) (* w 2.0))) (if (<= M 3.7e-177) (log (pow (exp (/ (* M M) w)) (/ (* c0 0.5) (- (* (/ c0 (* h w)) (pow (/ d D) 2.0)) (sqrt (- (* (pow (/ c0 (* h w)) 2.0) (pow (/ d D) 4.0)) (* M M))))))) (if (<= M 8.2e+85) (* (/ c0 (- (* (/ d D) (* (/ d (* w D)) (/ c0 h))) (sqrt (- (pow (* (/ d D) (* (/ d (* w D)) (/ c0 h))) 2.0) (* M M))))) (/ (fma M M 0.0) (* w 2.0))) (/ (* (/ M (/ (- (hypot (* d (* (/ d h) (* (/ c0 w) (pow D -2.0)))) (sqrt (* M (- M)))) (* d (* (/ d h) (* (/ c0 w) (pow D -2.0))))) M)) (* c0 -0.5)) w)))))",
    "output_parens": 119,
    "avg_bits_err_input": 59.4890401168143,
    "avg_bits_err_output": 33.602005928307264,
    "avg_bits_err_improve": 25.887034188507037,
    "time": 88413.10205078125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= l -1.2e-35) (* (* (* (sqrt (- d)) (sqrt (/ 1.0 (- h)))) (* (sqrt (- d)) (sqrt (/ 1.0 (- l))))) (+ 1.0 (* (* (/ D d) 0.5) (* h (* (/ M (/ d D)) (* (/ M l) -0.25)))))) (if (<= l -2e-308) (* (* (* (sqrt (- d)) (sqrt (/ 1.0 (- l)))) (sqrt (/ d h))) (+ 1.0 (* (/ (* M (* D 0.5)) l) (* (/ (* D M) d) (* (/ h d) -0.25))))) (if (<= l 2.2e-79) (* (sqrt (/ d h)) (* (/ (sqrt d) (sqrt l)) (+ 1.0 (* (/ h (* d (/ l (/ (* D M) (/ 4.0 (* (/ D d) M)))))) -0.5)))) (* (/ d (* (sqrt l) (sqrt h))) (+ 1.0 (* (* (/ D d) M) (* (* (/ D d) M) (* (/ h l) -0.125))))))))",
    "output_parens": 81,
    "avg_bits_err_input": 26.57517247183802,
    "avg_bits_err_output": 12.62163955109765,
    "avg_bits_err_improve": 13.95353292074037,
    "time": 105375.73876953125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (+ 0.125 (* (exp (* (log1p (* x x)) -1.5)) -0.125)) (+ 0.25 (+ (/ 0.25 (fma x x 1.0)) (/ 0.25 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 19,
    "avg_bits_err_input": 15.268472142618139,
    "avg_bits_err_output": 14.73952026904011,
    "avg_bits_err_improve": 0.5289518735780288,
    "time": 42072.166259765625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ -1.3333333333333333 (fma v v -1.0)) PI) (sqrt (+ (* (* v v) -6.0) 2.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9855212406251803,
    "avg_bits_err_output": 0.00975,
    "avg_bits_err_improve": 0.9757712406251803,
    "time": 7667.581298828125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (* (/ (/ 1.0 (sqrt (fma v (* v -6.0) 2.0))) (- 1.0 (* v v))) (/ (+ -1.0 (* (* v v) 5.0)) (- PI))) t)",
    "output_parens": 14,
    "avg_bits_err_input": 0.42904849037918835,
    "avg_bits_err_output": 0.10807556406367191,
    "avg_bits_err_improve": 0.32097292631551644,
    "time": 21294.283935546875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (- 1.0 (* v v)) (* (sqrt (+ 2.0 (* (* v v) -6.0))) 0.25))",
    "output_parens": 8,
    "avg_bits_err_input": 0.010948120312590145,
    "avg_bits_err_output": 0.007823120312590144,
    "avg_bits_err_improve": 0.003125000000000001,
    "time": 9919.357666015625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(expm1 (expm1 (log1p (log1p (acos (/ (fma v (* v -5.0) 1.0) (fma v v -1.0)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5439001819329498,
    "avg_bits_err_output": 0.5464823804637357,
    "avg_bits_err_improve": -0.0025821985307858952,
    "time": 48171.2587890625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (/ (- -10.0 k) (/ a k))))",
    "output_parens": 8,
    "avg_bits_err_input": 1.9259301046592883,
    "avg_bits_err_output": 0.28606917764062756,
    "avg_bits_err_improve": 1.6398609270186606,
    "time": 23413.9755859375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.018231961784336958,
    "avg_bits_err_output": 0.018231961784336958,
    "avg_bits_err_improve": 0,
    "time": 6914.400390625,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.19278029524739168,
    "avg_bits_err_output": 0.014516212820761088,
    "avg_bits_err_improve": 0.17826408242663058,
    "time": 9574.069091796875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1859979328161958,
    "avg_bits_err_output": 0.018054323438491594,
    "avg_bits_err_improve": 0.16794360937770422,
    "time": 36684.7412109375,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (* b a) 2.0) (+ (pow b 4.0) (+ (pow (* b a) 2.0) (pow a 4.0)))) (fma 4.0 (fma a (- a (* a a)) (* (* b b) (+ a 3.0))) -1.0))",
    "output_parens": 17,
    "avg_bits_err_input": 0.19748326282425066,
    "avg_bits_err_output": 0.024591520928207922,
    "avg_bits_err_improve": 0.17289174189604273,
    "time": 29015.451171875,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ (/ x (hypot x (* p 2.0))) 1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 13.033998074617855,
    "avg_bits_err_output": 13.031326643656337,
    "avg_bits_err_improve": 0.0026714309615183396,
    "time": 23764.155517578125,
    "seed": 12,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (+ x x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 41.25816847325312,
    "avg_bits_err_output": 0.04775,
    "avg_bits_err_improve": 41.21041847325312,
    "time": 9838.250244140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -2.5e-8) (/ (- x (sin x)) (- x (tan x))) (if (<= x 4.5e-8) (* (/ x (tan x)) (/ (- (- x) (sin x)) (fma x (/ x (tan x)) x))) (/ (- (/ x (- (tan x) x)) (* (pow (/ x (- (tan x) x)) 2.0) (/ (- (tan x) x) (sin x)))) (* (/ x (- (tan x) x)) (- (/ (tan x) (sin x)) (/ x (sin x)))))))",
    "output_parens": 43,
    "avg_bits_err_input": 31.461052173174245,
    "avg_bits_err_output": 25.66955788403525,
    "avg_bits_err_improve": 5.7914942891389956,
    "time": 44942.91455078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -4.6e+160) (/ (+ (* b_2 (/ b_2 (hypot b_2 (sqrt (* a c))))) (- (/ (* a (- (- c c) c)) (hypot b_2 (sqrt (* a c)))) b_2)) a) (if (<= b_2 -8e-159) (/ (- (- (/ b_2 (/ (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ (fma a c (* a (- c c))) (sqrt (- (* b_2 b_2) (* a c))))) b_2) a) (* c (/ -1.0 (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))))))",
    "output_parens": 43,
    "avg_bits_err_input": 34.31137639132593,
    "avg_bits_err_output": 17.050460262276196,
    "avg_bits_err_improve": 17.260916129049733,
    "time": 29586.1591796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) (/ c (- (hypot b_2 (pow (pow (* a c) 2.0) 0.25)) b_2)) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) -4e-78) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 2e-263) (/ (- c) (- b_2 (sqrt (- (* b_2 b_2) (* a c))))) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 2e+216) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ c (- (hypot b_2 (* c (/ a (sqrt (* a c))))) b_2))))))",
    "output_parens": 71,
    "avg_bits_err_input": 33.67612592308911,
    "avg_bits_err_output": 19.30998580109278,
    "avg_bits_err_improve": 14.366140121996331,
    "time": 24441.79541015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (tan (* x 0.5)) x) (/ x (sin x)))",
    "output_parens": 6,
    "avg_bits_err_input": 31.736452024498952,
    "avg_bits_err_output": 0.12179530156872005,
    "avg_bits_err_improve": 31.61465672293023,
    "time": 23110.57080078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 33.29715031191236,
    "avg_bits_err_output": 32.93678060699734,
    "avg_bits_err_improve": 0.36036970491502274,
    "time": 37963.005126953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 28.969261763196297,
    "avg_bits_err_output": 0.00775,
    "avg_bits_err_improve": 28.961511763196295,
    "time": 29915.070068359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (* (fma x -1.0 -1.0) (pow (+ x 1.0) -2.0)) (/ 1.0 x))",
    "output_parens": 6,
    "avg_bits_err_input": 14.50278024762384,
    "avg_bits_err_output": 0.07681372187554088,
    "avg_bits_err_improve": 14.425966525748299,
    "time": 13540.47314453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (/ (- (pow (sin eps) 2.0)) (/ (/ (sin eps) (tan (/ eps 2.0))) (cos x))) (* (sin eps) (sin x)))",
    "output_parens": 14,
    "avg_bits_err_input": 39.86815598606264,
    "avg_bits_err_output": 0.3629601268731667,
    "avg_bits_err_improve": 39.50519585918947,
    "time": 33695.458251953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (fma (/ x (pow (cbrt x) 2.0)) (+ (cbrt x) (cbrt (+ 1.0 x))) (pow (cbrt (+ 1.0 x)) 2.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 29.348605674942352,
    "avg_bits_err_output": 0.2133294324028278,
    "avg_bits_err_improve": 29.135276242539526,
    "time": 23432.02783203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.28445121235955,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 30.28382621235955,
    "time": 10330.18896484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -0.0042) (/ (- (hypot (* (sqrt (* c -4.0)) (sqrt a)) b) b) (* a 2.0)) (if (<= c 1.85e-96) (/ (- (hypot (pow (pow (* c (* -4.0 a)) 2.0) 0.25) b) b) (* a 2.0)) (if (<= c 2.9e+126) (/ (- (sqrt (+ (* b b) (* -4.0 (* c a)))) b) (* a 2.0)) (/ (- (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b) b) (* a 2.0)))))",
    "output_parens": 38,
    "avg_bits_err_input": 33.95559404567842,
    "avg_bits_err_output": 24.440533931873293,
    "avg_bits_err_improve": 9.515060113805124,
    "time": 40017.98046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -2.02e+80) (* -0.5 (/ (+ b (hypot (* a (/ (sqrt (* c -4.0)) (sqrt a))) b)) a)) (if (<= c 3.4e-112) (* -0.5 (/ (+ b (hypot (pow (* (* c a) (* (* c a) 16.0)) 0.25) b)) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b)) a))))",
    "output_parens": 30,
    "avg_bits_err_input": 33.66758794091285,
    "avg_bits_err_output": 24.513500810131294,
    "avg_bits_err_improve": 9.154087130781559,
    "time": 36995.19775390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.270619768826684,
    "avg_bits_err_output": 0.0013114816370412093,
    "avg_bits_err_improve": 61.269308287189645,
    "time": 12397.427978515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (log (/ (+ n 1.0) n)) (+ (expm1 (pow (cbrt (pow (log1p (log1p n)) 1.5)) 2.0)) -1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 62.99302958475544,
    "avg_bits_err_output": 44.23038312301585,
    "avg_bits_err_improve": 18.762646461739592,
    "time": 39051.91015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(+ (log1p (- (* eps eps))) (* -2.0 (log1p eps)))",
    "output_parens": 6,
    "avg_bits_err_input": 58.74642241238647,
    "avg_bits_err_output": 0.0073231203125901445,
    "avg_bits_err_improve": 58.73909929207388,
    "time": 11272.39404296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (pow (cbrt (/ (- 1.0 (pow (/ (tan x) x) 4.0)) (* (- -1.0 (/ (tan x) x)) (+ 1.0 (pow (/ (tan x) x) 2.0))))) 2.0) (/ (pow (cbrt (tan x)) 2.0) (cbrt (+ (/ -1.0 (tan x)) (/ 1.0 x)))))",
    "output_parens": 25,
    "avg_bits_err_input": 59.8838557877573,
    "avg_bits_err_output": 59.878252397023445,
    "avg_bits_err_improve": 0.005603390733853075,
    "time": 39889.29150390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (/ (expm1 (* eps b)) (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ b a))))))",
    "output_parens": 11,
    "avg_bits_err_input": 60.345378136483426,
    "avg_bits_err_output": 29.266638976830293,
    "avg_bits_err_improve": 31.078739159653132,
    "time": 34454.738525390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.57759652460927,
    "avg_bits_err_output": 0.00975,
    "avg_bits_err_improve": 41.56784652460927,
    "time": 9016.158447265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.64956406296297,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.648939062962974,
    "time": 3130.4716796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.190555501613225,
    "avg_bits_err_output": 0.021933307961146224,
    "avg_bits_err_improve": 29.16862219365208,
    "time": 30004.745361328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (pow (exp x) 2.0) (fma (exp x) 2.0 -3.0) 1.0) (fma 2.0 (pow (exp x) 2.0) (exp x)))",
    "output_parens": 10,
    "avg_bits_err_input": 29.97122092094942,
    "avg_bits_err_output": 29.6884358436833,
    "avg_bits_err_improve": 0.28278507726611934,
    "time": 36132.415771484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma x (/ (+ 1.0 (+ x (+ x -1.0))) (+ x -1.0)) (+ -2.0 (* x -2.0))) (+ x (* x x)))",
    "output_parens": 11,
    "avg_bits_err_input": 9.863463027586418,
    "avg_bits_err_output": 9.903532203724382,
    "avg_bits_err_improve": -0.04006917613796368,
    "time": 53333.2099609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (<= eps -9.6e-51) (fma (/ (+ (tan x) (tan eps)) (- 1.0 (pow (* (tan x) (tan eps)) 2.0))) (fma (tan x) (tan eps) 1.0) (- (tan x))) (if (<= eps 1.9e-26) (/ (+ (- (/ (sin (+ eps x)) (tan x)) (* (cos eps) (cos x))) (* (sin x) (sin eps))) (/ (cos (+ eps x)) (tan x))) (- (/ (+ (tan x) (tan eps)) (fma (tan x) (- (tan eps)) 1.0)) (tan x))))",
    "output_parens": 46,
    "avg_bits_err_input": 36.57062617300174,
    "avg_bits_err_output": 20.313015189850084,
    "avg_bits_err_improve": 16.257610983151658,
    "time": 37068.406982421875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(pow (pow (+ (sqrt x) (sqrt (+ 1.0 x))) 2.0) -0.5)",
    "output_parens": 6,
    "avg_bits_err_input": 29.19445551519674,
    "avg_bits_err_output": 0.19107589741040848,
    "avg_bits_err_improve": 29.003379617786333,
    "time": 22380.3203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (/ (pow (sin eps) 2.0) (- -1.0 (cos eps))) (* (sin eps) (cos x)))",
    "output_parens": 10,
    "avg_bits_err_input": 37.310897933782066,
    "avg_bits_err_output": 0.3470390089456158,
    "avg_bits_err_improve": 36.96385892483645,
    "time": 28582.256591796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (hypot x (sqrt x))))",
    "output_parens": 6,
    "avg_bits_err_input": 20.190462941858282,
    "avg_bits_err_output": 0.1088962406251803,
    "avg_bits_err_improve": 20.0815667012331,
    "time": 20014.91259765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.352790914590928,
    "avg_bits_err_output": 0.3795012452330688,
    "avg_bits_err_improve": 14.97328966935786,
    "time": 10422.082275390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.13578993921866,
    "avg_bits_err_output": 1.2873016390653997,
    "avg_bits_err_improve": 27.84848830015326,
    "time": 27011.65673828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07544116562662259,
    "avg_bits_err_output": 0.08025488750216347,
    "avg_bits_err_improve": -0.004813721875540883,
    "time": 27720.617919921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (/ a (/ 1.0 b)) (* b (- a)))",
    "output_parens": 5,
    "avg_bits_err_input": 16.425196651887,
    "avg_bits_err_output": 0.26841541406655617,
    "avg_bits_err_improve": 16.156781237820443,
    "time": 16686.49169921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ PI (/ 180.0 angle)))) 2.0) (pow (* b (sin (/ PI (/ 180.0 angle)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.76230206679157,
    "avg_bits_err_output": 20.779984262876738,
    "avg_bits_err_improve": -0.0176821960851683,
    "time": 45435.98828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (* (* (cos (* (/ PI -180.0) angle)) (* 2.0 (sin (* PI (* angle 0.005555555555555556))))) (* 0.5 (+ b a))) (- b a)))",
    "output_parens": 14,
    "avg_bits_err_input": 31.402692556196307,
    "avg_bits_err_output": 21.526029735580735,
    "avg_bits_err_improve": 9.876662820615572,
    "time": 42441.88720703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* angle (* PI 0.005555555555555556)))) 2.0) (pow (* b (+ (pow (cbrt (* (cos (fma angle (* PI 0.005555555555555556) 1.0)) (cos 1.0))) 3.0) (* (sin (+ 1.0 (* angle (* PI 0.005555555555555556)))) (sin 1.0)))) 2.0))",
    "output_parens": 22,
    "avg_bits_err_input": 21.01613996667177,
    "avg_bits_err_output": 20.99084045536741,
    "avg_bits_err_improve": 0.02529951130435748,
    "time": 49676.460693359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (* m (/ (- 1.0 m) v))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1709080828133113,
    "avg_bits_err_output": 0.21204736875252397,
    "avg_bits_err_improve": -0.04113928593921268,
    "time": 24420.480712890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3192409679578293,
    "avg_bits_err_output": 0.3159762357599503,
    "avg_bits_err_improve": 0.0032647321978789834,
    "time": 46869.044921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13709436093777044,
    "avg_bits_err_output": 0.13538684218813102,
    "avg_bits_err_improve": 0.001707518749639425,
    "time": 22529.58740234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda1) (cos lambda2)))))) R)",
    "output_parens": 17,
    "avg_bits_err_input": 17.26532266119347,
    "avg_bits_err_output": 3.8912924494012207,
    "avg_bits_err_improve": 13.374030211792249,
    "time": 40194.383544921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ a (* a 2.0)) (/ (* c -4.0) (+ b (sqrt (fma a (* c -4.0) (* b b))))))",
    "output_parens": 10,
    "avg_bits_err_input": 52.29929976882252,
    "avg_bits_err_output": 0.08563684218813102,
    "avg_bits_err_improve": 52.21366292663439,
    "time": 38893.87548828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ (* (- a) (fma b (* b 0.5) (* (fma b b (* (* a -4.0) c)) -0.5))) (* a a)) (+ b (sqrt (fma b b (* a (* -4.0 c))))))",
    "output_parens": 16,
    "avg_bits_err_input": 28.574083879377984,
    "avg_bits_err_output": 27.088412164304817,
    "avg_bits_err_improve": 1.4856717150731669,
    "time": 56592.160400390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (fma (pow (fma b b (* (* a c) -4.0)) 2.25) (* (pow (fma b b (* a (* c -4.0))) 6.75) (/ -1.0 (pow (fma b b (* a (* c -4.0))) 4.5))) (pow b 9.0))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (pow b 6.0) (+ (pow (fma b b (* a (* c -4.0))) 3.0) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0))))) (/ -0.5 a))",
    "output_parens": 43,
    "avg_bits_err_input": 43.86897274401046,
    "avg_bits_err_output": 40.60004106152707,
    "avg_bits_err_improve": 3.268931682483391,
    "time": 83448.65258789062,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (- (hypot (/ a (* (/ (pow (pow (* a (* c -4.0)) 2.0) 0.25) c) -0.25)) b) b) (* a 2.0)) (if (<= b 1.25e-33) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (or (<= b 3.8e+183) (not (<= b 1.3e+215))) (/ (* c (* a -4.0)) (* (* a 2.0) (+ b (hypot b (sqrt (* a (* c -4.0))))))) (* (- (hypot (pow (* a (* a (* c (* c 16.0)))) 0.25) b) b) (/ 0.5 a)))))",
    "output_parens": 47,
    "avg_bits_err_input": 33.9597819943698,
    "avg_bits_err_output": 20.905239195198273,
    "avg_bits_err_improve": 13.054542799171525,
    "time": 39372.87939453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (+ (cos phi1) (* (cos phi2) (* (cos lambda2) (cos lambda1)))) (* (cos phi2) (* (sin lambda1) (sin lambda2))))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.9338465601211272,
    "avg_bits_err_output": 0.23640411149471208,
    "avg_bits_err_improve": 0.6974424486264151,
    "time": 39212.23486328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(expm1 (- (log 2.0) (log1p (exp (* x -2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 28.86677195124757,
    "avg_bits_err_output": 28.835017604199408,
    "avg_bits_err_improve": 0.03175434704816382,
    "time": 31867.045654296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.21967768377833,
    "avg_bits_err_output": 0.014,
    "avg_bits_err_improve": 58.205677683778326,
    "time": 12278.8330078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 57.86675641053981,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 57.859381410539804,
    "time": 11401.321044921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.010865601562950722,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 0.0009906015629507214,
    "time": 2698.242431640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 32.50683755496477,
    "avg_bits_err_output": 0.08275,
    "avg_bits_err_improve": 32.42408755496477,
    "time": 8013.114501953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (* (log1p x) 2.0) (log1p (* x (- x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 58.73486940753129,
    "avg_bits_err_output": 0.0073231203125901445,
    "avg_bits_err_improve": 58.7275462872187,
    "time": 19642.94970703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.098125,
    "avg_bits_err_output": 0.09819812031259015,
    "avg_bits_err_improve": -7.312031259014418e-05,
    "time": 3622.237548828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (* (/ 1.0 (hypot 1.0 (/ (/ eh ew) (tan t)))) (sin t))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.130375,
    "avg_bits_err_output": 0.13146936093777042,
    "avg_bits_err_improve": -0.0010943609377704333,
    "time": 39551.40087890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* eh (sin t)) (sin (atan (/ (* (tan t) (- eh)) ew)))) (* ew (/ (cos t) (hypot 1.0 (* eh (/ (tan t) ew)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1261462406251803,
    "avg_bits_err_output": 0.12831372187554085,
    "avg_bits_err_improve": -0.0021674812503605645,
    "time": 33517.970947265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (sin (* phi2 0.5)) (- (sin (* 0.5 phi1))) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 38.78113974327733,
    "avg_bits_err_output": 0.1244786373643868,
    "avg_bits_err_improve": 38.656661105912946,
    "time": 32083.7080078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 14.835913914949252,
    "avg_bits_err_output": 0.0010731203125901444,
    "avg_bits_err_improve": 14.834840794636662,
    "time": 7667.327880859375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin delta) (* (sin theta) (cos phi1))) (fma (* (sin delta) (* (cos phi1) (cos theta))) (- (sin phi1)) (* (cos delta) (pow (cos phi1) 2.0)))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.1495530779968154,
    "avg_bits_err_output": 0.0800096651599577,
    "avg_bits_err_improve": 0.0695434128368577,
    "time": 52762.130126953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a 3.0)) (- (- b) (sqrt (+ (* b b) (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52.33902114744207,
    "avg_bits_err_output": 0.3727859031316709,
    "avg_bits_err_improve": 51.9662352443104,
    "time": 53447.8388671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* a -3.0) c) (+ b (sqrt (fma b b (* (* a -3.0) c))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.737962075875984,
    "avg_bits_err_output": 0.4425697390795386,
    "avg_bits_err_improve": 28.295392336796446,
    "time": 41892.646240234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (/ (* (pow (* c a) 3.0) 27.0) (pow (* a (* c -3.0)) 2.0)) -0.3333333333333333) (+ b (sqrt (fma b b (* a (* c -3.0)))))) a)",
    "output_parens": 15,
    "avg_bits_err_input": 43.860597649161285,
    "avg_bits_err_output": 1.0043994767514548,
    "avg_bits_err_improve": 42.85619817240983,
    "time": 66018.97338867188,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (fma b (+ -1.0 (/ b (hypot b (sqrt (* (* c -3.0) a))))) (/ c (/ (hypot (sqrt (* c (* -3.0 a))) b) (* -3.0 a)))) (* a 3.0)) (if (<= b 2.75e-170) (/ (- (sqrt (- (* b b) (* c (* a 3.0)))) b) (* a 3.0)) (if (<= b 5.4e+84) (/ (/ (+ (+ (pow (* b -0.3333333333333333) 2.0) (* (* b b) -0.1111111111111111)) (* 0.3333333333333333 (* c a))) (* -0.3333333333333333 (+ b (sqrt (fma b b (* (* c -3.0) a)))))) a) (if (<= b 2.1e+163) (/ (fma b (+ -1.0 (/ b (sqrt (fma (* c -3.0) a (* b b))))) (* -3.0 (/ (* c a) (sqrt (fma c (* -3.0 a) (* b b)))))) (* a 3.0)) (/ (fma b (+ -1.0 (/ b (hypot b (sqrt (* (* c -3.0) a))))) (* (/ -3.0 (hypot b (sqrt (* (* c -3.0) a)))) (* c a))) (* a 3.0))))))",
    "output_parens": 80,
    "avg_bits_err_input": 34.005469977839034,
    "avg_bits_err_output": 25.458909194361084,
    "avg_bits_err_improve": 8.54656078347795,
    "time": 48950.78662109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (sin phi1) (* (cos phi2) (fma (cos lambda1) (cos lambda2) (* (sin lambda1) (sin lambda2)))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.731879525442293,
    "avg_bits_err_output": 0.17780721029687405,
    "avg_bits_err_improve": 13.554072315145419,
    "time": 49961.707275390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ -1.0 (- x (/ (pow (+ x 1.0) 2.0) x))) (/ (* (+ x 1.0) (+ -1.0 x)) x))",
    "output_parens": 10,
    "avg_bits_err_input": 29.29014617868307,
    "avg_bits_err_output": 28.154386312146734,
    "avg_bits_err_improve": 1.1357598665363362,
    "time": 38373.9140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ (+ 1.0 x) (fma x x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.010823120312590145,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 0.0014481203125901454,
    "time": 13838.53515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.879906971499576,
    "avg_bits_err_output": 0.0715,
    "avg_bits_err_improve": 14.808406971499576,
    "time": 18229.357421875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (/ (* (pow (* 2.0 (fma B B (* A (* C -4.0)))) 0.5) (- (sqrt (* F (+ C (- A (hypot B (- A C)))))))) (+ (* B B) (* -4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) INFINITY) (/ (/ (- (hypot B (- A C)) (+ A C)) (/ (sqrt (* (- (+ A C) (hypot B (- A C))) (* 2.0 (* F (fma B B (* A (* C -4.0))))))) (* 2.0 (* F (fma B B (* A (* C -4.0))))))) (+ (* B B) (* -4.0 (* A C)))) (/ (- (sqrt (* 2.0 (* F (+ A (- C (hypot B (- A C)))))))) (hypot B (pow (pow (* A (* C -4.0)) 2.0) 0.25)))))",
    "output_parens": 105,
    "avg_bits_err_input": 52.55267109565867,
    "avg_bits_err_output": 37.892119862434335,
    "avg_bits_err_improve": 14.660551233224332,
    "time": 55481.64892578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(/ (* (atan (/ (- (- C A) (hypot B (- A C))) B)) 180.0) PI)",
    "output_parens": 8,
    "avg_bits_err_input": 29.518849631088848,
    "avg_bits_err_output": 14.053265402944358,
    "avg_bits_err_improve": 15.46558422814449,
    "time": 36225.991943359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (pow (* (/ (pow F -0.5) -1.0) (sqrt (/ (fma B B (* A (* C -4.0))) (* 2.0 (+ (+ A C) (hypot B (- A C))))))) -1.0) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) INFINITY) (/ (sqrt (* 2.0 (+ (+ A C) (hypot B (- A C))))) (sqrt (/ (fma A (* C -4.0) (* B B)) F))) (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (/ (- (sqrt F)) (hypot B (pow (pow (* A (* C -4.0)) 2.0) 0.25))))))",
    "output_parens": 87,
    "avg_bits_err_input": 52.65280475486105,
    "avg_bits_err_output": 31.901960447647888,
    "avg_bits_err_improve": 20.750844307213164,
    "time": 61261.88720703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt (* g 0.5)) (cbrt a))",
    "output_parens": 4,
    "avg_bits_err_input": 15.675261129035539,
    "avg_bits_err_output": 0.8244174533386075,
    "avg_bits_err_improve": 14.85084367569693,
    "time": 22562.01318359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g 2.4e-258) (+ (* (cbrt (/ 0.5 a)) (cbrt (/ 1.0 (/ 1.0 (- (hypot g h) g))))) (/ 1.0 (cbrt (/ (/ a (+ g (hypot g h))) -0.5)))) (+ (/ (cbrt (* (+ g (hypot g h)) -0.5)) (cbrt a)) (cbrt (* (/ 0.5 a) (- g (hypot g h))))))",
    "output_parens": 29,
    "avg_bits_err_input": 36.258130008360105,
    "avg_bits_err_output": 2.797677775007771,
    "avg_bits_err_improve": 33.460452233352335,
    "time": 34600.4169921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (* 3.0 (- (cos (fma (acos (/ g (- h))) 0.3333333333333333 (* PI 0.6666666666666666))) (* 0.6666666666666666 (cos (fma (acos (/ g (- h))) 0.3333333333333333 (* PI 0.6666666666666666)))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9892859031316716,
    "avg_bits_err_output": 0.04088966250649037,
    "avg_bits_err_improve": 0.9483962406251812,
    "time": 25465.87451171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ 1.0 (+ 1.0 (exp (- b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.7728231203125902,
    "avg_bits_err_output": 0.015505549264919807,
    "avg_bits_err_improve": 0.7573175710476704,
    "time": 8093.73095703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* a2 (/ (/ a1 b2) b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-293) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* a2 (/ (/ a1 b2) b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+307) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b1) (/ a2 b2))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.033263149210494,
    "avg_bits_err_output": 2.598910505421145,
    "avg_bits_err_improve": 8.43435264378935,
    "time": 17670.142333984375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5711422606473945,
    "avg_bits_err_output": 0.488,
    "avg_bits_err_improve": 0.0831422606473945,
    "time": 12689.93603515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -10.0) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.001803818880376,
    "avg_bits_err_output": 0.060526789890100095,
    "avg_bits_err_improve": 52.94127702899028,
    "time": 21543.785888671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.71631120409847,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.71631120409847,
    "time": 2691.8251953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (- 1.0 x) (sqrt (- 1.0 (* x x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.01425,
    "avg_bits_err_output": 0.011875,
    "avg_bits_err_improve": 0.0023750000000000004,
    "time": 9106.19140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1555.422119140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (pow (* r w) 2.0) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 13.234242980792,
    "avg_bits_err_output": 0.22188515157160424,
    "avg_bits_err_improve": 13.012357829220397,
    "time": 34266.646484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (fma (/ 4.0 (fma x1 x1 1.0)) (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 37,
    "avg_bits_err_input": 0.5027885008178629,
    "avg_bits_err_output": 0.31707264583891903,
    "avg_bits_err_improve": 0.18571585497894383,
    "time": 86874.49145507812,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (/ v (+ t1 u)) (- -1.0 (/ u t1)))",
    "output_parens": 5,
    "avg_bits_err_input": 18.37980176535948,
    "avg_bits_err_output": 1.5114822195405615,
    "avg_bits_err_improve": 16.86831954581892,
    "time": 14951.249267578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma (pow x 3.0) -0.12900613773279798 (* x 0.954929658551372))",
    "output_parens": 3,
    "avg_bits_err_input": 0.2082830828133113,
    "avg_bits_err_output": 0.182875,
    "avg_bits_err_improve": 0.025408082813311278,
    "time": 20356.434814453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2130.616943359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ 0.5 a) b) (/ (+ a b) PI))",
    "output_parens": 5,
    "avg_bits_err_input": 14.499340347252387,
    "avg_bits_err_output": 0.2809443625122593,
    "avg_bits_err_improve": 14.218395984740127,
    "time": 66002.52807617188,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x)) (/ (+ 1.0 (/ -1.0 eps)) (pow (cbrt (exp (fma eps x x))) 3.0))) 2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 29.538187497987234,
    "avg_bits_err_output": 29.563706240004045,
    "avg_bits_err_improve": -0.02551874201681059,
    "time": 43801.15185546875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.042,
    "avg_bits_err_output": 0.005125,
    "avg_bits_err_improve": 0.036875000000000005,
    "time": 26422.925537109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (+ 2.0 (+ (+ 1.0 (pow (+ 2.0 (/ -2.0 (+ 1.0 t))) 2.0)) -1.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.05,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 0.042625,
    "time": 56389.353271484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ 2.0 (log (+ 1.0 (expm1 (* t (/ (/ t (/ (+ 1.0 t) 4.0)) (+ 1.0 t))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.025875,
    "avg_bits_err_output": 0.039125,
    "avg_bits_err_improve": -0.013250000000000001,
    "time": 7394.06396484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3401.166748046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 4159.659423828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4466.556884765625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.825802818610342,
    "avg_bits_err_output": 0.242625,
    "avg_bits_err_improve": 7.583177818610341,
    "time": 19430.636474609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.313456544664289,
    "avg_bits_err_output": 7.313456544664289,
    "avg_bits_err_improve": 0,
    "time": 21113.43994140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (+ eps (* x 2.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 16.09118304571128,
    "avg_bits_err_output": 0.0125,
    "avg_bits_err_improve": 16.07868304571128,
    "time": 13512.59326171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.556954082220967,
    "avg_bits_err_output": 0.39144398594498225,
    "avg_bits_err_improve": 3.165510096275985,
    "time": 25781.81494140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.7099627821281,
    "avg_bits_err_output": 0.01829736875252406,
    "avg_bits_err_improve": 14.691665413375576,
    "time": 6682.308349609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.3977754163026,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.3977754163026,
    "time": 4456.167236328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.535438043916855,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 39.534563043916854,
    "time": 4114.955078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.29775,
    "avg_bits_err_improve": 63.70225,
    "time": 59089.0205078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ t (/ 2.5e+31 t))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325919191947,
    "avg_bits_err_output": 0.4356629703154749,
    "avg_bits_err_improve": 61.407596221603995,
    "time": 14109.26953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -2.02e+80) (* -0.5 (/ (+ b (hypot (* a (/ (sqrt (* c -4.0)) (sqrt a))) b)) a)) (if (<= c 3.4e-112) (* -0.5 (/ (+ b (hypot (pow (* (* c a) (* (* c a) 16.0)) 0.25) b)) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b)) a))))",
    "output_parens": 30,
    "avg_bits_err_input": 33.66758794091285,
    "avg_bits_err_output": 24.513500810131294,
    "avg_bits_err_improve": 9.154087130781559,
    "time": 37263.919677734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (- (hypot (/ a (* (/ (pow (pow (* a (* c -4.0)) 2.0) 0.25) c) -0.25)) b) b) (* a 2.0)) (if (<= b 1.25e-33) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (or (<= b 3.8e+183) (not (<= b 1.3e+215))) (/ (* c (* a -4.0)) (* (* a 2.0) (+ b (hypot b (sqrt (* a (* c -4.0))))))) (* (- (hypot (pow (* a (* a (* c (* c 16.0)))) 0.25) b) b) (/ 0.5 a)))))",
    "output_parens": 47,
    "avg_bits_err_input": 33.9597819943698,
    "avg_bits_err_output": 20.905239195198273,
    "avg_bits_err_improve": 13.054542799171525,
    "time": 39241.946533203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1917.89404296875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.2457102326979,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 39.2354602326979,
    "time": 3827.479736328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (/ (+ x y) (hypot x y)) (/ (hypot x y) (- x y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.59203578829052,
    "avg_bits_err_output": 0.0313825347658273,
    "avg_bits_err_improve": 20.56065325352469,
    "time": 11094.65869140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.645317901549117,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.645317901549117,
    "time": 14768.251953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03775,
    "avg_bits_err_output": 0.001375,
    "avg_bits_err_improve": 0.036375,
    "time": 5507.322265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(* (+ a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.019969360937770436,
    "avg_bits_err_output": 0.019969360937770436,
    "avg_bits_err_improve": 0,
    "time": 5616.159912109375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.014875,
    "avg_bits_err_improve": 0,
    "time": 3396.544921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000125,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 0,
    "time": 1901.05419921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3994178578176384,
    "avg_bits_err_output": 0.242875,
    "avg_bits_err_improve": 0.15654285781763838,
    "time": 17229.415771484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.245784507366725,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 30.239159507366725,
    "time": 13348.663818359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.74729623413098,
    "avg_bits_err_output": 0.2920943609377704,
    "avg_bits_err_improve": 24.45520187319321,
    "time": 17012.938232421875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(* (/ (pow (cbrt (- x (sin x))) 2.0) (pow (cbrt (tan x)) 2.0)) (cbrt (/ (- (pow (/ (pow (/ x (tan x)) 3.0) (fma (/ x (tan x)) (+ (/ x (tan x)) (cos x)) (pow (cos x) 2.0))) 3.0) (pow (/ (pow (cos x) 3.0) (fma (/ x (tan x)) (+ (/ x (tan x)) (cos x)) (pow (cos x) 2.0))) 3.0)) (fma (/ (pow (cos x) 3.0) (fma (/ x (tan x)) (+ (/ x (tan x)) (cos x)) (pow (cos x) 2.0))) (+ (/ (pow (/ x (tan x)) 3.0) (fma (/ x (tan x)) (+ (/ x (tan x)) (cos x)) (pow (cos x) 2.0))) (/ (pow (cos x) 3.0) (fma (/ x (tan x)) (+ (/ x (tan x)) (cos x)) (pow (cos x) 2.0)))) (/ (/ (pow (/ x (tan x)) 6.0) (fma (/ x (tan x)) (+ (/ x (tan x)) (cos x)) (pow (cos x) 2.0))) (fma (/ x (tan x)) (+ (/ x (tan x)) (cos x)) (pow (cos x) 2.0)))))))",
    "output_parens": 101,
    "avg_bits_err_input": 29.94598572055244,
    "avg_bits_err_output": 29.93734133683185,
    "avg_bits_err_improve": 0.008644383720589843,
    "time": 47169.329345703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007073120312590144,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.006698120312590144,
    "time": 2429.1767578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 5e-303) (/ (* (expm1 (* n (log1p (/ i n)))) -100.0) (/ (- i) n)) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 4e-15) (* 100.0 (- (* n (/ (pow (+ 1.0 (/ i n)) n) i)) (/ n i))) (* n (/ (+ (* 100.0 (pow (exp n) (log1p (/ i n)))) -100.0) i))))",
    "output_parens": 40,
    "avg_bits_err_input": 47.892560485256006,
    "avg_bits_err_output": 11.385070220568135,
    "avg_bits_err_improve": 36.507490264687874,
    "time": 33577.135986328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (or (<= d -4.1e+105) (not (<= d 1.08e+21))) (+ (fma (* d (/ 1.0 (hypot d c))) (/ b (hypot d c)) 0.0) (* a (* c (pow (hypot d c) -2.0)))) (+ (* (pow (hypot d c) -2.0) (* d b)) (fma (/ 1.0 (hypot d c)) (* a (/ c (hypot d c))) 0.0)))",
    "output_parens": 27,
    "avg_bits_err_input": 26.12211874181536,
    "avg_bits_err_output": 7.77920482444206,
    "avg_bits_err_improve": 18.3429139173733,
    "time": 27740.34033203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(* (- (* (/ c (hypot c d)) b) (/ a (/ (hypot c d) d))) (/ 1.0 (hypot c d)))",
    "output_parens": 10,
    "avg_bits_err_input": 26.308678419576303,
    "avg_bits_err_output": 0.6867963470165726,
    "avg_bits_err_improve": 25.621882072559732,
    "time": 31510.976318359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ (- 1.0 ux) (* ux maxCos))",
    "output_parens": 3,
    "avg_bits_err_input": 0.034,
    "avg_bits_err_output": 0.034,
    "avg_bits_err_improve": 0,
    "time": 11504.480224609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* uy (* 2.0 PI))) (sqrt (+ (pow (pow (fma (fma ux maxCos 1.0) (- (fma ux maxCos (- 1.0 ux))) 1.0) 3.0) 0.3333333333333333) (* ux (fma ux maxCos (- 1.0 ux))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.438470364147909,
    "avg_bits_err_output": 11.32944348899886,
    "avg_bits_err_improve": 2.1090268751490484,
    "time": 61171.51123046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) 2.0) (/ (/ (pow (pow (fma ux maxCos (- 1.0 ux)) 4.0) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 61,
    "avg_bits_err_input": 13.469913441361573,
    "avg_bits_err_output": 11.90850145880558,
    "avg_bits_err_improve": 1.5614119825559936,
    "time": 78052.09936523438,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (sqrt (fma ux (* (- 1.0 ux) (* (* ux (* maxCos maxCos)) (+ ux -1.0))) 1.0)) (fma (cos (* 2.0 (* uy PI))) xi (* (sin (* 2.0 (* uy PI))) yi)) (* (* ux maxCos) (* (- 1.0 ux) zi)))",
    "output_parens": 21,
    "avg_bits_err_input": 0.33065003407957066,
    "avg_bits_err_output": 0.3233166368924424,
    "avg_bits_err_improve": 0.007333397187128277,
    "time": 62593.156005859375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.20943728552988009,
    "avg_bits_err_output": 0.2035943609377704,
    "avg_bits_err_improve": 0.005842924592109694,
    "time": 48432.172119140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5440503140067406,
    "avg_bits_err_output": 0.5069745175333246,
    "avg_bits_err_improve": 0.03707579647341608,
    "time": 25506.7705078125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.33463633674053544,
    "avg_bits_err_output": 0.33463633674053544,
    "avg_bits_err_improve": 0,
    "time": 26497.36669921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (* s 0.5) (log (/ 1.0 (/ (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))) -1.0) (/ (+ 1.0 (/ 1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))))) (+ -1.0 (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0)))))))",
    "output_parens": 45,
    "avg_bits_err_input": 0.3268509457247941,
    "avg_bits_err_output": 0.3154113779827534,
    "avg_bits_err_improve": 0.01143956774204069,
    "time": 32831.2841796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.05719053371969949,
    "avg_bits_err_output": 0.05719053371969949,
    "avg_bits_err_improve": 0,
    "time": 7639.176513671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 0.5 (+ s (* s (cosh (/ (fabs x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1363717012863607,
    "avg_bits_err_output": 0.11145044788497013,
    "avg_bits_err_improve": 0.024921253401390564,
    "time": 26098.209228515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6721000649712545,
    "avg_bits_err_output": 0.6721000649712545,
    "avg_bits_err_improve": 0,
    "time": 26272.17919921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.1595977041511719,
    "avg_bits_err_output": 0.1595977041511719,
    "avg_bits_err_improve": 0,
    "time": 33026.583740234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot eta (sqrt (/ sinTheta_O (/ (hypot 1.0 sinTheta_O) sinTheta_O)))))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.602624512973444,
    "avg_bits_err_output": 0.35437830199964865,
    "avg_bits_err_improve": 2.2482462109737957,
    "time": 37018.49560546875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* cosTheta_i cosTheta_O) (* (/ (sinh (/ 1.0 v)) (* (/ 0.25 v) (/ 2.0 v))) (exp (* (/ sinTheta_O v) sinTheta_i))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4680016482563398,
    "avg_bits_err_output": 0.37921131850074213,
    "avg_bits_err_improve": 0.08879032975559764,
    "time": 55434.245361328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(pow E (/ (+ (* (- (* (* cosTheta_i cosTheta_O) v) (* v (fma sinTheta_i sinTheta_O 1.0))) (+ -0.6931 (log (/ 0.5 v)))) (* (* v v) (+ (pow (log (/ 0.5 v)) 2.0) -0.48038761))) (* (+ -0.6931 (log (/ 0.5 v))) (* v v))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.13372623535774267,
    "avg_bits_err_output": 0.1501978970130933,
    "avg_bits_err_improve": -0.016471661655350633,
    "time": 34482.115966796875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (* 2.0 (log (cbrt (pow alpha (* PI 3.0))))) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.47169524392017503,
    "avg_bits_err_output": 0.3557479879003969,
    "avg_bits_err_improve": 0.11594725601977812,
    "time": 54346.8896484375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.313558536097618,
    "avg_bits_err_output": 0.5446586204451775,
    "avg_bits_err_improve": 0.7688999156524405,
    "time": 33121.252197265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.496819115533375,
    "avg_bits_err_output": 0.201375,
    "avg_bits_err_improve": 12.295444115533375,
    "time": 24198.32177734375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (* 0.75 (exp (/ (- r) (* s 3.0)))) (* PI (* 6.0 (* r s)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1393646669422509,
    "avg_bits_err_output": 0.14630171900665942,
    "avg_bits_err_improve": -0.006937052064408533,
    "time": 74207.36767578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* u normAngle)) (sin normAngle)) n1_i (/ n0_i (/ (sin normAngle) (sin (* normAngle (- 1.0 u))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8787843934670551,
    "avg_bits_err_output": 0.7491488176642129,
    "avg_bits_err_improve": 0.12963557580284213,
    "time": 36800.0234375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (* (pow PI -0.16666666666666666) (sqrt (- 1.0 (+ cosTheta cosTheta)))) (* cosTheta (cbrt PI))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.7050612200225589,
    "avg_bits_err_output": 0.42460334449917503,
    "avg_bits_err_improve": 0.28045787552338386,
    "time": 27190.874267578125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (/ (* 8.0 (pow PI 3.0)) (/ (pow (* PI 2.0) 2.0) u2))))",
    "output_parens": 12,
    "avg_bits_err_input": 13.64286270808231,
    "avg_bits_err_output": 0.5173914649701782,
    "avg_bits_err_improve": 13.125471243112132,
    "time": 29039.323486328125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (+ (cos (* PI (+ u2 u2))) (fma (- (sin (* PI u2))) (sin (* PI u2)) (pow (sin (* PI u2)) 2.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 13.68930644715885,
    "avg_bits_err_output": 0.3151247605085614,
    "avg_bits_err_improve": 13.374181686650289,
    "time": 30771.56494140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* (- alpha) (log1p (- u0))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.121078724752802,
    "avg_bits_err_output": 0.31928552656439296,
    "avg_bits_err_improve": 13.80179319818841,
    "time": 25232.484130859375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (* (log1p (- u0)) (* alphax (* alphay alphay))) (- (* cos2phi (/ (* alphay alphay) (- alphax))) (* alphax sin2phi)))",
    "output_parens": 12,
    "avg_bits_err_input": 12.559770403455477,
    "avg_bits_err_output": 0.46429512123172,
    "avg_bits_err_improve": 12.095475282223758,
    "time": 32174.629150390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (or (<= F -1e-268) (not (<= F 2.9e-194))) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (- (* PI l) (* (tan (* PI l)) (pow (exp -2.0) (- (* (log F) 3.0) (log (* F F)))))))",
    "output_parens": 23,
    "avg_bits_err_input": 16.484532653509525,
    "avg_bits_err_output": 10.598231484459843,
    "avg_bits_err_improve": 5.886301169049682,
    "time": 30401.106689453125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2216887218755409,
    "avg_bits_err_output": 0.15707312031259013,
    "avg_bits_err_improve": 0.06461560156295076,
    "time": 22866.5419921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.64980104240478,
    "avg_bits_err_output": 10.533258859911134,
    "avg_bits_err_improve": 3.116542182493646,
    "time": 32380.2666015625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (/ (log (tanh (* PI (* f 0.25)))) PI) 4.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.462011496647925,
    "avg_bits_err_output": 0.6478299591450948,
    "avg_bits_err_improve": 60.81418153750283,
    "time": 45832.089599609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (or (<= t -1e+142) (and (not (<= t -2.165e-119)) (or (<= t 1.95e-156) (not (<= t 4.2e+77))))) (/ (* t (sqrt 2.0)) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0)))))) (* t (pow (* (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* (* l l) (+ -1.0 (/ (+ x 1.0) (+ x -1.0))))) 0.5) -0.5)))",
    "output_parens": 38,
    "avg_bits_err_input": 42.925394382291636,
    "avg_bits_err_output": 17.05289517047519,
    "avg_bits_err_improve": 25.872499211816447,
    "time": 46341.239501953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.6964799854752193,
    "avg_bits_err_output": 0.22335413594209716,
    "avg_bits_err_improve": 3.473125849533122,
    "time": 24762.94970703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 1.0654600485173984,
    "avg_bits_err_output": 0.012778555837104548,
    "avg_bits_err_improve": 1.0526814926802939,
    "time": 11629.70556640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ (* t 2.0) (* l (sqrt 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.159801384007425,
    "avg_bits_err_output": 1.1362874409161738,
    "avg_bits_err_improve": 9.02351394309125,
    "time": 24556.2744140625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -2.2e-119) (sqrt (* U (* (fma (/ l Om) (- (* l -2.0) (* (* (/ l Om) n) (- U U*))) t) (* n 2.0)))) (if (<= U -4e-264) (sqrt (+ (/ (* (fma l -2.0 (* (/ l Om) (* (- U* U) n))) (* n (* U 2.0))) (/ Om l)) (* t (* 2.0 (* U n))))) (if (<= U 1.45e-299) (sqrt (+ (* t (* 2.0 (* U n))) (* 2.0 (* (fma l -2.0 (* (/ l Om) (* (- U* U) n))) (* U (* (/ l Om) n)))))) (if (<= U 2.5e-167) (* (sqrt U) (sqrt (+ (* t (* n 2.0)) (* (* n 2.0) (* (/ l Om) (+ (* l -2.0) (* n (/ (- U* U) (/ Om l))))))))) (if (<= U 5.2e-126) (sqrt (+ (* t (* 2.0 (* U n))) (* 2.0 (* (fma l -2.0 (* (/ l Om) (* (- U* U) n))) (* U (* (/ l Om) n)))))) (if (<= U 1200.0) (sqrt (* (* n 2.0) (* U (- t (+ (* 2.0 (/ l (/ Om l))) (* n (* (/ l Om) (* (/ l Om) (- U U*))))))))) (* (sqrt U) (sqrt (+ (* t (* n 2.0)) (* (* n 2.0) (* (/ l Om) (+ (* l -2.0) (* n (/ (- U* U) (/ Om l)))))))))))))))",
    "output_parens": 116,
    "avg_bits_err_input": 34.57310368756563,
    "avg_bits_err_output": 27.447420953303816,
    "avg_bits_err_improve": 7.125682734261812,
    "time": 44625.631103515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ (* -2.0 l) k) (* (* k (/ (tan k) l)) (* (sin k) (- t))))",
    "output_parens": 10,
    "avg_bits_err_input": 47.32513768766738,
    "avg_bits_err_output": 1.0940158356469323,
    "avg_bits_err_improve": 46.23112185202044,
    "time": 102540.0576171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= k -5.2e-69) (not (<= k 6.6e-66))) (* (/ l t) (/ (/ 2.0 (fma (/ k t) (* t (* (/ k t) (* (/ t l) (tan k)))) (* t (* t (* 2.0 (/ (tan k) l)))))) (sin k))) (* (/ (/ (/ 2.0 t) (+ 2.0 (pow (/ k t) 2.0))) (/ (tan k) (/ l t))) (/ l (* t (sin k)))))",
    "output_parens": 36,
    "avg_bits_err_input": 32.56549354709639,
    "avg_bits_err_output": 7.3245929430365395,
    "avg_bits_err_improve": 25.24090060405985,
    "time": 86558.88208007812,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (/ a2 (/ (sqrt 2.0) a2)) (/ a1 (/ (sqrt 2.0) a1))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4966031984601277,
    "avg_bits_err_output": 0.4374516937655057,
    "avg_bits_err_improve": 0.05915150469462199,
    "time": 30211.379150390625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* (* k (pow PI (+ k -1.0))) (pow (* 2.0 n) k)) -0.5) (sqrt (* 2.0 n)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5202207130428028,
    "avg_bits_err_output": 0.35929699296076095,
    "avg_bits_err_improve": 0.16092372008204187,
    "time": 25931.62451171875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(fma (* (sinh l) 2.0) (* J (cos (/ K 2.0))) U)",
    "output_parens": 6,
    "avg_bits_err_input": 17.5399525058927,
    "avg_bits_err_output": 0.06258496250072114,
    "avg_bits_err_improve": 17.477367543391978,
    "time": 26492.719970703125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(log (pow (exp (fabs (cos (- (* (+ m n) (* K 0.5)) M)))) (exp (+ (* (- (* (+ m n) 0.5) M) (+ M (* (+ m n) -0.5))) (- (fabs (- m n)) l)))))",
    "output_parens": 21,
    "avg_bits_err_input": 14.777861285819132,
    "avg_bits_err_output": 1.1701028180490674,
    "avg_bits_err_improve": 13.607758467770065,
    "time": 28337.27587890625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.513615601562954,
    "avg_bits_err_output": 8.313240601562951,
    "avg_bits_err_improve": 10.200375000000003,
    "time": 36178.4375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* M D) -5000000.0) (* w0 (sqrt (+ 1.0 (/ (* (* M D) -0.5) (* d (/ (/ 2.0 D) (* M (/ (/ h d) l)))))))) (if (<= (* M D) 0.0) (* w0 (sqrt (+ 1.0 (/ (* M (* h (* M (* D (/ 0.5 d))))) (* l (* d (/ -2.0 D))))))) (if (<= (* M D) 5e-84) (* w0 (sqrt (+ 1.0 (/ (* h (* D (* M (/ -0.25 d)))) (* l (/ d (* M D))))))) (* w0 (sqrt (+ 1.0 (* (/ (* (/ h d) (* D (/ M 2.0))) l) (* (* M D) (/ -0.5 d)))))))))",
    "output_parens": 56,
    "avg_bits_err_input": 13.833042091093368,
    "avg_bits_err_output": 9.994211148916946,
    "avg_bits_err_improve": 3.838830942176422,
    "time": 50631.2548828125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e+296) (/ (* (sqrt (- A)) (/ c0 (sqrt l))) (sqrt (- V))) (if (<= (* V l) -2e-190) (* c0 (/ A (* (sqrt (- A)) (/ (* V l) (sqrt (* V (- l))))))) (if (<= (* V l) 5e-313) (* c0 (* (pow (- V) -0.5) (pow (/ l (- A)) -0.5))) (if (<= (* V l) 5e+293) (* c0 (/ (sqrt A) (sqrt (* V l)))) (sqrt (* (/ c0 l) (* A (/ c0 V))))))))",
    "output_parens": 47,
    "avg_bits_err_input": 19.087414540911038,
    "avg_bits_err_output": 5.761151231830871,
    "avg_bits_err_improve": 13.326263309080167,
    "time": 33041.44873046875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= w -4.2e-154) (* c0 (* (/ 0.5 w) (* M (/ M (fma (/ (* (/ c0 D) d) (* D h)) (/ d w) (- (hypot (* (/ (* (/ c0 D) d) (* D h)) (/ d w)) M))))))) (if (<= w -9.6e-175) (* (/ c0 (* w 2.0)) (fma (sqrt (fma (/ c0 w) (/ (pow (/ d D) 2.0) h) M)) (sqrt (- (* (/ c0 w) (/ (pow (/ d D) 2.0) h)) M)) (* (/ c0 w) (/ (pow (/ d D) 2.0) h)))) (if (<= w 7.5e-51) (* c0 (* (/ 0.5 w) (* M (/ M (- (* (/ d (* D h)) (/ (/ c0 D) (/ w d))) (hypot (* (/ d (* D h)) (/ (/ c0 D) (/ w d))) M)))))) (if (<= w 1.14e+197) (* (/ c0 (* w 2.0)) (* M (/ M (- (* c0 (/ (pow (/ d D) 2.0) (* w h))) (hypot M (* c0 (/ (pow (/ d D) 2.0) (* w h)))))))) (log (pow (exp (* (/ M w) (- (/ M -2.0)))) (/ c0 (- (* (/ c0 (* D (* D h))) (* d (/ d w))) (hypot (* (/ (/ c0 D) (* D h)) (/ d (/ w d))) M)))))))))",
    "output_parens": 107,
    "avg_bits_err_input": 59.588639698190775,
    "avg_bits_err_output": 30.901213523626314,
    "avg_bits_err_improve": 28.68742617456446,
    "time": 106376.68603515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= h -7.2e+134) (* (/ (sqrt (- d)) (sqrt (- h))) (* (sqrt (/ d l)) (- 1.0 (* -0.5 (/ h (/ (- l) (pow (* M (* 0.5 (/ D d))) 2.0))))))) (if (<= h -2e-310) (* (/ (/ (- d) (sqrt (- l))) (sqrt (- h))) (fma (/ h l) (* -0.5 (pow (/ d (* 0.5 (* M D))) -2.0)) 1.0)) (if (<= h 1e-200) (/ (* (fma (* (/ h l) -0.5) (pow (* (* M D) (/ 0.5 d)) 2.0) 1.0) (* (sqrt d) (sqrt d))) (* (sqrt h) (sqrt l))) (if (<= h 4e+30) (* (/ d (sqrt (* h l))) (+ 1.0 (* (/ 0.5 (/ d D)) (* (/ M (/ 1.0 h)) (/ (* (/ D d) (* 0.5 (* M -0.5))) l))))) (* (sqrt (/ d h)) (* (sqrt (/ d l)) (+ 1.0 (* 0.5 (/ h (* (* d (/ -2.0 (* M D))) (* 2.0 (* d (/ (/ l M) D)))))))))))))",
    "output_parens": 89,
    "avg_bits_err_input": 25.877465678062265,
    "avg_bits_err_output": 15.84914736585532,
    "avg_bits_err_improve": 10.028318312206945,
    "time": 126543.33813476562,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (pow (pow (- 1.0 (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 9.0)) 3.0) 0.3333333333333333) (* (fma (+ 0.5 (/ 0.5 (hypot 1.0 x))) (+ (/ 0.5 (hypot 1.0 x)) 1.5) 1.0) (+ (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 3.0) (+ 1.0 (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 6.0))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 32,
    "avg_bits_err_input": 15.425813022918906,
    "avg_bits_err_output": 14.9398752299043,
    "avg_bits_err_improve": 0.48593779301460494,
    "time": 41897.021728515625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9855943609377705,
    "avg_bits_err_output": 0.008823120312590145,
    "avg_bits_err_improve": 0.9767712406251804,
    "time": 3262.875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma (* v v) -5.0 1.0) (* (* (- 1.0 (* v v)) (sqrt (fma (* v v) -6.0 2.0))) PI)) t)",
    "output_parens": 11,
    "avg_bits_err_input": 0.43574238835900414,
    "avg_bits_err_output": 0.11453308281331133,
    "avg_bits_err_improve": 0.3212093055456928,
    "time": 36805.805908203125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt 2.0) 4.0) (* (sqrt (- 1.0 (* 3.0 (* v v)))) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.010344360937770435,
    "avg_bits_err_output": 0.009646240625180288,
    "avg_bits_err_improve": 0.0006981203125901465,
    "time": 11054.304931640625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(log (exp (- PI (acos (/ (- (fma v (* v 5.0) -1.0)) (- 1.0 (* v v)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5108302076528658,
    "avg_bits_err_output": 0.5106185680175054,
    "avg_bits_err_improve": 0.00021163963536041663,
    "time": 35308.4794921875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(* a (/ (pow k m) (+ (* k (+ k 10.0)) 1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 2.2294409504701145,
    "avg_bits_err_output": 2.21580551169881,
    "avg_bits_err_improve": 0.013635438771304464,
    "time": 23420.723388671875,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (+ (+ 1.0 (/ (+ EAccept (+ Vef (- Ev mu))) KbT)) -1.0)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.025436822098208918,
    "avg_bits_err_output": 0.025113701785618774,
    "avg_bits_err_improve": 0.0003231203125901444,
    "time": 9159.823974609375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18291973225554356,
    "avg_bits_err_output": 0.014424446703011504,
    "avg_bits_err_improve": 0.16849528555253207,
    "time": 7156.067626953125,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1823065744436745,
    "avg_bits_err_output": 0.025186085378560437,
    "avg_bits_err_improve": 0.15712048906511408,
    "time": 5973.882568359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.19048803207133594,
    "avg_bits_err_output": 0.029230904330672967,
    "avg_bits_err_improve": 0.16125712774066298,
    "time": 18868.616943359375,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (fma (cbrt (/ (* x x) (fma 4.0 (* p p) (* x x)))) (cbrt (/ x (hypot x (* p 2.0)))) 1.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 13.609559969502971,
    "avg_bits_err_output": 13.617194371596783,
    "avg_bits_err_improve": -0.007634402093811943,
    "time": 25240.7197265625,
    "seed": 13,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.77464088323663,
    "avg_bits_err_output": 0.045125,
    "avg_bits_err_improve": 40.72951588323663,
    "time": 7076.9248046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -3e-8) (/ (+ (cbrt (pow (/ (sin x) x) 3.0)) -1.0) (+ -1.0 (/ (tan x) x))) (if (<= x 1e-8) (* (/ x (tan x)) (/ (- (- x) (sin x)) (fma x (/ x (tan x)) x))) (/ 1.0 (/ (- (tan x) x) (- (sin x) x)))))",
    "output_parens": 29,
    "avg_bits_err_input": 31.428593048015863,
    "avg_bits_err_output": 25.592453904760692,
    "avg_bits_err_improve": 5.836139143255171,
    "time": 37032.494384765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.95e+166) (/ (- (hypot b_2 (sqrt (* a (- c)))) b_2) a) (if (<= b_2 -1.2e-271) (/ (- (sqrt (- (* b_2 b_2) (* c a))) b_2) a) (if (<= b_2 2e+154) (* c (/ -1.0 (+ b_2 (sqrt (- (* b_2 b_2) (* c a)))))) (if (<= b_2 4e+205) (/ (fabs (/ (* c a) (+ b_2 (hypot b_2 (sqrt (* a (- c))))))) a) (* (/ 1.0 (+ b_2 (sqrt (fma (- c) a (* b_2 b_2))))) (/ 1.0 (/ -1.0 c)))))))",
    "output_parens": 45,
    "avg_bits_err_input": 34.058381366922966,
    "avg_bits_err_output": 16.509356243813958,
    "avg_bits_err_improve": 17.549025123109008,
    "time": 29270.27880859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ c (- (hypot b_2 (pow (pow (* c a) 2.0) 0.25)) b_2)) (if (<= b_2 -1.1e-298) (/ (- c) (- b_2 (sqrt (- (* b_2 b_2) (* c a))))) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a)))",
    "output_parens": 24,
    "avg_bits_err_input": 34.03008086100492,
    "avg_bits_err_output": 15.81961649894406,
    "avg_bits_err_improve": 18.21046436206086,
    "time": 23801.11279296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (sin x) x) (/ x (tan (* x 0.5))))",
    "output_parens": 6,
    "avg_bits_err_input": 30.90666563524404,
    "avg_bits_err_output": 0.13058533906799885,
    "avg_bits_err_improve": 30.77608029617604,
    "time": 24096.2060546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (/ 1.0 (pow (+ 1.0 x) (/ -1.0 n))) (pow x (/ 1.0 n)))",
    "output_parens": 7,
    "avg_bits_err_input": 32.706754976689055,
    "avg_bits_err_output": 32.73446450435991,
    "avg_bits_err_improve": -0.02770952767085788,
    "time": 39128.98046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.18356159511976,
    "avg_bits_err_output": 0.008375,
    "avg_bits_err_improve": 29.175186595119758,
    "time": 12646.80615234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 (- -1.0 x)) x)",
    "output_parens": 3,
    "avg_bits_err_input": 14.669926653435628,
    "avg_bits_err_output": 0.0776462406251803,
    "avg_bits_err_improve": 14.592280412810448,
    "time": 10080.454345703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(fma (sin x) (- (sin eps)) (* (cos x) (* (- (sin eps)) (tan (/ eps 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 39.62885796385204,
    "avg_bits_err_output": 0.3019419459586175,
    "avg_bits_err_improve": 39.326916017893424,
    "time": 38607.608154296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ (+ 1.0 (* 0.0 x)) (fma (/ (/ x (cbrt x)) (cbrt x)) (+ (cbrt x) (cbrt (+ 1.0 x))) (pow (cbrt (+ 1.0 x)) 2.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.672128719980382,
    "avg_bits_err_output": 0.22282291519991104,
    "avg_bits_err_improve": 29.449305804780472,
    "time": 29097.6025390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.002686708335755,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 30.002561708335755,
    "time": 11111.458984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -5.9e+174) (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a 2.0)) (if (<= b -5.8e-282) (/ (- (sqrt (+ (* b b) (* -4.0 (* a c)))) b) (* a 2.0)) (if (<= b 1.8e+221) (/ c (* (+ b (hypot b (sqrt (* -4.0 (* a c))))) -0.5)) (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a 2.0)))))",
    "output_parens": 37,
    "avg_bits_err_input": 34.234673131877436,
    "avg_bits_err_output": 19.514174772465417,
    "avg_bits_err_improve": 14.72049835941202,
    "time": 35557.741455078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -1.3e+154) (* -0.5 (log (pow (pow (exp a) (fma b b (fma b b (* c (* a -4.0))))) (/ (pow a -2.0) (- b (sqrt (fma b b (* c (* a -4.0))))))))) (if (<= b 1.35e+154) (* -0.5 (/ (+ b (sqrt (fma a (* c -4.0) (* b b)))) a)) (* -0.5 (/ (+ b (hypot (pow (pow (* a (* c -4.0)) 2.0) 0.25) b)) a))))",
    "output_parens": 35,
    "avg_bits_err_input": 33.710277482896295,
    "avg_bits_err_output": 24.998877210004164,
    "avg_bits_err_improve": 8.711400272892131,
    "time": 48354.781494140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.368384163634296,
    "avg_bits_err_output": 0.0015731203125901444,
    "avg_bits_err_improve": 61.366811043321704,
    "time": 14460.9423828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(* (pow (cbrt (sqrt (fma n (- (log1p n) (log n)) (+ (log1p n) -1.0)))) 3.0) (cbrt (pow (+ (log1p n) (fabs (fma n (- (log1p n) (log n)) -1.0))) 1.5)))",
    "output_parens": 19,
    "avg_bits_err_input": 63.004861545587985,
    "avg_bits_err_output": 34.96590857401752,
    "avg_bits_err_improve": 28.038952971570467,
    "time": 46690.05859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(+ (log1p (- (* eps eps))) (* -2.0 (log1p eps)))",
    "output_parens": 6,
    "avg_bits_err_input": 58.55311717107745,
    "avg_bits_err_output": 0.0055,
    "avg_bits_err_improve": 58.547617171077455,
    "time": 10813.20751953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(+ (exp (log1p (/ (/ (- (tan x) x) (tan x)) x))) -1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 59.86659524500726,
    "avg_bits_err_output": 59.85067959814437,
    "avg_bits_err_improve": 0.015915646862893595,
    "time": 43770.6484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (* (/ (expm1 (* eps b)) eps) (/ (expm1 (* eps a)) (expm1 (* eps (+ b a))))))",
    "output_parens": 11,
    "avg_bits_err_input": 60.52131561508944,
    "avg_bits_err_output": 29.019392356583463,
    "avg_bits_err_improve": 31.50192325850598,
    "time": 34703.597412109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.146003904474156,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 41.137378904474154,
    "time": 8603.8095703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.65758867147359,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 58.65721367147359,
    "time": 3118.185546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.113551741286233,
    "avg_bits_err_output": 0.01916850310022949,
    "avg_bits_err_improve": 29.094383238186005,
    "time": 26412.37158203125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(exp (log (/ (fma (pow (exp x) 2.0) (fma (exp x) 2.0 -3.0) 1.0) (fma 2.0 (exp (+ x x)) (exp x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 29.460704682000475,
    "avg_bits_err_output": 29.23055951531858,
    "avg_bits_err_improve": 0.230145166681897,
    "time": 32524.78271484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma x (/ (+ 1.0 (+ x (+ x -1.0))) (+ x -1.0)) (+ -2.0 (* x -2.0))) (+ x (* x x)))",
    "output_parens": 11,
    "avg_bits_err_input": 9.633505261051234,
    "avg_bits_err_output": 9.672309907904356,
    "avg_bits_err_improve": -0.038804646853122904,
    "time": 59660.887939453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (fma (tan eps) (tan x) (/ (tan eps) (tan x))) (/ (- (tan x)) (+ -1.0 (* (tan eps) (tan x)))))",
    "output_parens": 14,
    "avg_bits_err_input": 36.7534910911402,
    "avg_bits_err_output": 0.33011201368871196,
    "avg_bits_err_improve": 36.423379077451486,
    "time": 35702.433837890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))",
    "output_parens": 5,
    "avg_bits_err_input": 29.591864212488453,
    "avg_bits_err_output": 0.16016052656439303,
    "avg_bits_err_improve": 29.43170368592406,
    "time": 18799.595458984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (cos x) (sin eps) (* (sin x) (+ (cos eps) -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 37.01132265054853,
    "avg_bits_err_output": 0.39810650217054494,
    "avg_bits_err_improve": 36.61321614837799,
    "time": 29203.669189453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 20.256004051314022,
    "avg_bits_err_output": 0.11400244375108176,
    "avg_bits_err_improve": 20.14200160756294,
    "time": 22459.574462890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(pow (pow (atan2 1.0 (+ 1.0 (fma N N N))) -0.5) -2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 14.178066987185467,
    "avg_bits_err_output": 0.3057681459294189,
    "avg_bits_err_improve": 13.872298841256049,
    "time": 22442.960205078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.38078377963852,
    "avg_bits_err_output": 1.2293022381684982,
    "avg_bits_err_improve": 28.151481541470023,
    "time": 24545.510498046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (/ (* m (- 1.0 m)) v) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07448514209423482,
    "avg_bits_err_output": 0.07448514209423482,
    "avg_bits_err_improve": 0,
    "time": 21179.56787109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (/ a (/ -1.0 b)) (* a b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.067174388564737,
    "avg_bits_err_output": 0.2819989738164229,
    "avg_bits_err_improve": 15.785175414748315,
    "time": 17307.29345703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* (* PI 180.0) (* angle 3.08641975308642e-5)))) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 20.417983566486676,
    "avg_bits_err_output": 20.428172261718338,
    "avg_bits_err_improve": -0.010188695231661882,
    "time": 42479.386962890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (+ b a) (* (sin (* angle (* 0.011111111111111112 PI))) (* 0.5 (- b a)))))",
    "output_parens": 9,
    "avg_bits_err_input": 31.15099973059393,
    "avg_bits_err_output": 20.887009224904027,
    "avg_bits_err_improve": 10.263990505689904,
    "time": 45964.240966796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ PI (/ 180.0 angle)))) 2.0) (pow (* b (cos (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.207910606075902,
    "avg_bits_err_output": 20.23358558799044,
    "avg_bits_err_improve": -0.025674981914537653,
    "time": 46956.09130859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (/ (* m (- 1.0 m)) v) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.17090158869586775,
    "avg_bits_err_output": 0.17090158869586775,
    "avg_bits_err_improve": 0,
    "time": 23681.274169921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3234814492662428,
    "avg_bits_err_output": 0.31439494479001145,
    "avg_bits_err_improve": 0.009086504476231327,
    "time": 33747.12109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (* e (/ 1.0 (fma e (cos v) 1.0))) (sin v))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13239624062518027,
    "avg_bits_err_output": 0.1354293234384916,
    "avg_bits_err_improve": -0.0030330828133113275,
    "time": 24326.6328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (log1p (expm1 (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (fma (sin lambda2) (sin lambda1) (* (cos lambda1) (cos lambda2))))))))) R)",
    "output_parens": 17,
    "avg_bits_err_input": 17.053078116884766,
    "avg_bits_err_output": 3.9335014671742337,
    "avg_bits_err_improve": 13.119576649710533,
    "time": 42763.50390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ (* (* a c) -4.0) (+ b (pow (pow (fma c (* a -4.0) (* b b)) 2.0) 0.25))) (* a 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 52.41960666705849,
    "avg_bits_err_output": 0.38059962500721184,
    "avg_bits_err_improve": 52.039007042051274,
    "time": 33220.712890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ 1.0 (/ (* (/ a -0.5) (+ b (sqrt (fma (* a c) -4.0 (* b b))))) (/ (/ (fma (pow (fma b b (* a (* c -4.0))) 3.0) (pow b 18.0) (* (pow (fma b b (* a (* c -4.0))) 6.0) (- (pow b 12.0)))) (* (pow (fma b b (* a (* c -4.0))) 3.0) (pow b 12.0))) (+ (pow b 4.0) (+ (pow (fma b b (* a (* c -4.0))) 2.0) (* (* b b) (fma b b (* a (* c -4.0)))))))))",
    "output_parens": 42,
    "avg_bits_err_input": 28.521127677284223,
    "avg_bits_err_output": 27.138871720096233,
    "avg_bits_err_improve": 1.38225595718799,
    "time": 72892.13891601562,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- (* b b) (* b b)) (* a (* c 4.0))) (* (/ a -0.5) (+ b (sqrt (fma (* a c) -4.0 (* b b))))))",
    "output_parens": 14,
    "avg_bits_err_input": 43.933839051325805,
    "avg_bits_err_output": 0.4105646785226788,
    "avg_bits_err_improve": 43.52327437280313,
    "time": 59349.827392578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) -2e+217) (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a 2.0)) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) -5e-160) (* (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (/ 0.5 a)) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) 2e-228) (/ (* (/ (* a c) a) -2.0) (+ b (hypot b (sqrt (* -4.0 (* a c)))))) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) 1e+276) (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 81,
    "avg_bits_err_input": 34.23904482868608,
    "avg_bits_err_output": 21.93828438376533,
    "avg_bits_err_improve": 12.300760444920755,
    "time": 37518.3291015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (+ (cos phi1) (* (cos phi2) (fma (cos lambda2) (cos lambda1) (* (sin lambda1) (sin lambda2)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.9072351064400549,
    "avg_bits_err_output": 0.2255994364572868,
    "avg_bits_err_improve": 0.6816356699827681,
    "time": 37656.27880859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(expm1 (- (log 2.0) (log1p (exp (* x -2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.07634473132597,
    "avg_bits_err_output": 29.05685381421805,
    "avg_bits_err_improve": 0.019490917107919614,
    "time": 34454.41455078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.071940921935386,
    "avg_bits_err_output": 0.011375,
    "avg_bits_err_improve": 58.060565921935385,
    "time": 9079.4443359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 57.99240368509231,
    "avg_bits_err_output": 0.008,
    "avg_bits_err_improve": 57.98440368509231,
    "time": 8948.423583984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00789624062518029,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 0.0003962406251802903,
    "time": 5396.966064453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 32.369375,
    "avg_bits_err_output": 0.082875,
    "avg_bits_err_improve": 32.2865,
    "time": 11892.14306640625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (* (log1p x) 2.0) (log1p (* x (- x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 58.54309489220731,
    "avg_bits_err_output": 0.0055,
    "avg_bits_err_improve": 58.53759489220731,
    "time": 16682.6123046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.026573120312590147,
    "avg_bits_err_output": 0.026573120312590147,
    "avg_bits_err_improve": 0,
    "time": 5388.236572265625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (/ (sin t) (hypot 1.0 (/ eh (* ew (tan t)))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12382312031259014,
    "avg_bits_err_output": 0.12404248125036058,
    "avg_bits_err_improve": -0.00021936093777043253,
    "time": 39805.86328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (/ 1.0 (hypot 1.0 (/ (tan t) (/ ew eh))))) (* (* eh (sin t)) (sin (atan (/ (* (tan t) (- eh)) ew))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.1261462406251803,
    "avg_bits_err_output": 0.12674060156295072,
    "avg_bits_err_improve": -0.0005943609377704329,
    "time": 41579.1806640625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (+ (* (* (- lambda1 lambda2) (cos (* phi2 0.5))) (cos (* 0.5 phi1))) (* (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))) (- lambda2 lambda1))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 39.08669208283665,
    "avg_bits_err_output": 0.1272859562818309,
    "avg_bits_err_improve": 38.95940612655482,
    "time": 31746.303955078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (- 1.0 (/ (/ b (/ a b)) a)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.449749711339619,
    "avg_bits_err_output": 0.01391748125036058,
    "avg_bits_err_improve": 14.43583223008926,
    "time": 8725.077392578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin delta) (* (sin theta) (cos phi1))) (- (* (cos delta) (sqrt (pow (cos phi1) 4.0))) (* (sin phi1) (* (cos theta) (* (sin delta) (cos phi1)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1635200668372493,
    "avg_bits_err_output": 0.0778824907328933,
    "avg_bits_err_improve": 0.08563757610435599,
    "time": 50490.455322265625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* a 3.0)) -2e-32) (* (/ (fma (* b b) (+ b (sqrt (fma (* a -3.0) c (* b b)))) (* (fma (* a -3.0) c (* b b)) (- (- b) (sqrt (fma (* a -3.0) c (* b b)))))) (* (+ b (sqrt (fma (* a -3.0) c (* b b)))) (+ b (sqrt (fma (* a -3.0) c (* b b)))))) (/ -0.3333333333333333 a)) (/ (+ (- b) (sqrt (pow (pow (fma b b (* -3.0 (* c a))) 3.0) 0.3333333333333333))) (* a 3.0)))",
    "output_parens": 51,
    "avg_bits_err_input": 52.4813404162015,
    "avg_bits_err_output": 50.01129285607011,
    "avg_bits_err_improve": 2.470047560131384,
    "time": 57709.001953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (+ (* b b) (* a (* c -3.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 28.675928576812307,
    "avg_bits_err_output": 0.28298140663848353,
    "avg_bits_err_improve": 28.392947170173823,
    "time": 40866.2607421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* -3.0 a) c) (+ b (sqrt (fma c (* -3.0 a) (* b b))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 44.010822380376474,
    "avg_bits_err_output": 0.41221336289894084,
    "avg_bits_err_improve": 43.598609017477536,
    "time": 55239.744873046875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -5.9e+174) (/ (fma b (+ -1.0 (/ b (hypot b (sqrt (* -3.0 (* c a)))))) (/ -3.0 (* (/ (sqrt (fma -3.0 (* c a) (* b b))) c) (/ 1.0 a)))) (* a 3.0)) (if (<= b 6.2e-80) (/ (fma b (+ -1.0 (/ b (sqrt (fma (* -3.0 c) a (* b b))))) (/ -3.0 (/ (/ (sqrt (fma b b (* -3.0 (* c a)))) a) c))) (* a 3.0)) (if (<= b 1.35e+154) (/ (/ (+ (* (* c a) 0.3333333333333333) (* (* b b) 0.0)) (* -0.3333333333333333 (+ b (sqrt (fma a (* -3.0 c) (* b b)))))) a) (/ (log (pow (exp (fma b (* b 0.1111111111111111) (* -0.1111111111111111 (fma b b (* a (* -3.0 c)))))) (/ -3.0 (+ b (sqrt (fma b b (* a (* -3.0 c)))))))) a))))",
    "output_parens": 68,
    "avg_bits_err_input": 34.27727371167057,
    "avg_bits_err_output": 20.359899273555396,
    "avg_bits_err_improve": 13.917374438115171,
    "time": 51571.7626953125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (cos phi2) (* (sin phi1) (+ (* (cos lambda2) (cos lambda1)) (* (sin lambda1) (sin lambda2)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 13.235009709166363,
    "avg_bits_err_output": 0.17449255435009922,
    "avg_bits_err_improve": 13.060517154816264,
    "time": 45377.5712890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ -1.0 (- x (* (+ x 1.0) (/ (+ x 1.0) x)))) (fma (+ x 1.0) (* (/ 1.0 x) (+ -1.0 x)) 0.0))",
    "output_parens": 12,
    "avg_bits_err_input": 29.474627970452524,
    "avg_bits_err_output": 25.543655901340813,
    "avg_bits_err_improve": 3.9309720691117107,
    "time": 44886.923583984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ (+ 1.0 x) (fma x x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.010375,
    "avg_bits_err_output": 0.0105,
    "avg_bits_err_improve": -0.0001250000000000001,
    "time": 15695.8388671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (+ -1.0 x)) (- -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.716908677052219,
    "avg_bits_err_output": 0.07625,
    "avg_bits_err_improve": 14.640658677052219,
    "time": 54853.5029296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C)) (* (* (- (pow B 2.0) (* (* 4.0 A) C)) F) -2.0)))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (/ (- (sqrt (* 2.0 (* F (+ C (- A (hypot B (- A C)))))))) (sqrt (fma A (* C -4.0) (* B B)))) (if (<= (/ (- (sqrt (* (- (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))) (+ A C)) (* (* (- (pow B 2.0) (* (* 4.0 A) C)) F) -2.0)))) (- (pow B 2.0) (* (* 4.0 A) C))) INFINITY) (/ (* (/ (fma C (* A -4.0) (* B B)) (/ (sqrt (* (fma C (* A -4.0) (* B B)) (+ A (- C (hypot B (- A C)))))) (+ A (- C (hypot B (- A C)))))) (- (sqrt (* 2.0 F)))) (fma B B (* A (* C -4.0)))) (/ (- (sqrt (* 2.0 (* F (- (+ A C) (hypot B (- A C))))))) (hypot B (sqrt (* A (* C -4.0)))))))",
    "output_parens": 98,
    "avg_bits_err_input": 52.34570415851834,
    "avg_bits_err_output": 39.194552555129434,
    "avg_bits_err_improve": 13.151151603388904,
    "time": 54783.759033203125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.768099971483018,
    "avg_bits_err_output": 13.945656099351067,
    "avg_bits_err_improve": 15.82244387213195,
    "time": 29335.738037109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) -4e-214) (* (/ -1.0 (pow F -0.5)) (sqrt (/ (* 2.0 (+ C (+ A (hypot B (- A C))))) (fma C (* A -4.0) (* B B))))) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) INFINITY) (* (sqrt (/ F (fma C (* A -4.0) (* B B)))) (sqrt (* 2.0 (+ C (+ A (hypot B (- A C))))))) (* (/ -1.0 (hypot (sqrt (* C (* A -4.0))) B)) (* (sqrt (* 2.0 (+ C (+ A (hypot B (- A C)))))) (sqrt F)))))",
    "output_parens": 85,
    "avg_bits_err_input": 52.39194310070474,
    "avg_bits_err_output": 33.45110721287919,
    "avg_bits_err_improve": 18.94083588782555,
    "time": 64915.9091796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt g) (cbrt (* a 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.164742181436335,
    "avg_bits_err_output": 0.9005005624742454,
    "avg_bits_err_improve": 15.264241618962089,
    "time": 21632.438232421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (/ (cbrt (pow (sqrt (- (hypot g h) g)) 2.0)) (cbrt (* 2.0 a))) (/ (cbrt (+ g (hypot g h))) (cbrt (* a -2.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 35.7464310882645,
    "avg_bits_err_output": 2.920376337726624,
    "avg_bits_err_improve": 32.82605475053788,
    "time": 37696.62548828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9913639109464255,
    "avg_bits_err_output": 0.036092293753966366,
    "avg_bits_err_improve": 0.9552716171924591,
    "time": 39506.20458984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- (log1p (exp (- b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.667125,
    "avg_bits_err_output": 0.00826840061561778,
    "avg_bits_err_improve": 0.6588565993843822,
    "time": 13862.32080078125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b1) (/ a2 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-295) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a1 b1) (/ a2 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+257) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b1) (/ a1 b2))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.423395897667953,
    "avg_bits_err_output": 2.5428037224188746,
    "avg_bits_err_improve": 8.88059217524908,
    "time": 11520.04150390625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5129727632595006,
    "avg_bits_err_output": 0.4325,
    "avg_bits_err_improve": 0.08047276325950059,
    "time": 8677.164306640625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -5.0) (- (log1p (- (pow (+ x (+ (hypot 1.0 x) -1.0)) 2.0))) (log (- 2.0 (+ x (hypot 1.0 x))))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 19,
    "avg_bits_err_input": 52.89206785441452,
    "avg_bits_err_output": 13.681992965034615,
    "avg_bits_err_improve": 39.210074889379904,
    "time": 21120.24755859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.651442741400846,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.651442741400846,
    "time": 2005.267822265625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (sqrt (- 1.0 (* x x))) (+ 1.0 x))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.010823120312590145,
    "avg_bits_err_improve": 0.0018018796874098558,
    "time": 4944.530517578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1182.115966796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (pow (* r w) 2.0) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.357390301486214,
    "avg_bits_err_output": 0.20910451250937476,
    "avg_bits_err_improve": 12.148285788976839,
    "time": 40326.727294921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))) (* x1 3.0))) (* (+ 1.0 (* x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.5166551153454957,
    "avg_bits_err_output": 0.316723673360267,
    "avg_bits_err_improve": 0.19993144198522866,
    "time": 82764.9755859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.23924039327486,
    "avg_bits_err_output": 1.2200588557399485,
    "avg_bits_err_improve": 17.01918153753491,
    "time": 9776.30029296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (+ (* x (* x -0.12900613773279798)) 0.954929658551372))",
    "output_parens": 4,
    "avg_bits_err_input": 0.21791748125036056,
    "avg_bits_err_output": 0.18373120312590144,
    "avg_bits_err_improve": 0.034186278124459124,
    "time": 24595.288818359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0026652410118609203,
    "avg_bits_err_output": 0.0026652410118609203,
    "avg_bits_err_improve": 0,
    "time": 12927.832763671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI 0.5) (+ b a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 14.487350327184277,
    "avg_bits_err_output": 0.23939661719245778,
    "avg_bits_err_improve": 14.247953709991819,
    "time": 48887.58984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x)) (/ (+ 1.0 (/ -1.0 eps)) (exp (fma eps x x)))) 2.0)",
    "output_parens": 12,
    "avg_bits_err_input": 29.288659464539627,
    "avg_bits_err_output": 29.29838632848108,
    "avg_bits_err_improve": -0.00972686394145228,
    "time": 50355.918212890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (fma (/ 2.0 (+ 1.0 t)) (+ (/ 2.0 (+ 1.0 t)) -4.0) 6.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.020375,
    "avg_bits_err_output": 0.00764624062518029,
    "avg_bits_err_improve": 0.012728759374819711,
    "time": 10830.8916015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.025625,
    "avg_bits_err_output": 0.025698120312590146,
    "avg_bits_err_improve": -7.312031259014765e-05,
    "time": 37535.861328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.035375,
    "avg_bits_err_output": 0.058625,
    "avg_bits_err_improve": -0.02325,
    "time": 4278.7978515625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3005.09716796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3496.265625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4530.287841796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.80911877941945,
    "avg_bits_err_output": 0.248875,
    "avg_bits_err_improve": 7.56024377941945,
    "time": 17285.318359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.568363101246445,
    "avg_bits_err_output": 7.568363101246445,
    "avg_bits_err_improve": 0,
    "time": 22474.436767578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(fma eps eps (* (* eps 2.0) x))",
    "output_parens": 3,
    "avg_bits_err_input": 16.151271773531636,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 16.142646773531638,
    "time": 12349.030517578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (* x 0.125)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5337284328666234,
    "avg_bits_err_output": 0.34572913594209737,
    "avg_bits_err_improve": 3.187999296924526,
    "time": 26820.0224609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.775483775594797,
    "avg_bits_err_output": 0.016962609764384975,
    "avg_bits_err_improve": 14.758521165830413,
    "time": 8955.586669921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.41319217748289,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.41319217748289,
    "time": 5142.930419921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.72486944223623,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 38.723869442236236,
    "time": 4052.8916015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.301,
    "avg_bits_err_improve": 63.699,
    "time": 64653.022216796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.843250776468324,
    "avg_bits_err_output": 0.392125,
    "avg_bits_err_improve": 61.451125776468324,
    "time": 16793.06884765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -1.3e+154) (* -0.5 (log (pow (pow (exp a) (fma b b (fma b b (* c (* a -4.0))))) (/ (pow a -2.0) (- b (sqrt (fma b b (* c (* a -4.0))))))))) (if (<= b 1.35e+154) (* -0.5 (/ (+ b (sqrt (fma a (* c -4.0) (* b b)))) a)) (* -0.5 (/ (+ b (hypot (pow (pow (* a (* c -4.0)) 2.0) 0.25) b)) a))))",
    "output_parens": 35,
    "avg_bits_err_input": 33.710277482896295,
    "avg_bits_err_output": 24.998877210004164,
    "avg_bits_err_improve": 8.711400272892131,
    "time": 53114.595947265625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) -2e+217) (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a 2.0)) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) -5e-160) (* (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (/ 0.5 a)) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) 2e-228) (/ (* (/ (* a c) a) -2.0) (+ b (hypot b (sqrt (* -4.0 (* a c)))))) (if (<= (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) 1e+276) (/ (- (sqrt (- (* b b) (* (* 4.0 a) c))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 81,
    "avg_bits_err_input": 34.23904482868608,
    "avg_bits_err_output": 21.93828438376533,
    "avg_bits_err_improve": 12.300760444920755,
    "time": 37721.5458984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1754.31884765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ 1.0 (/ x (expm1 x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.02464764542883,
    "avg_bits_err_output": 0.023719360937770436,
    "avg_bits_err_improve": 40.00092828449106,
    "time": 10179.03759765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- x y) (/ (hypot x y) (/ (+ x y) (hypot x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 20.27894301975897,
    "avg_bits_err_output": 0.032891933202876575,
    "avg_bits_err_improve": 20.246051086556093,
    "time": 36520.18701171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.5764649048846247,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.5764649048846247,
    "time": 17136.573486328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0385,
    "avg_bits_err_output": 0.001375,
    "avg_bits_err_improve": 0.037125,
    "time": 5578.093017578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ b (+ b a))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.016948120312590145,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": 0.005823120312590146,
    "time": 7750.462890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.014875,
    "avg_bits_err_improve": 0,
    "time": 4465.31884765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 1564.215087890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ e (+ c (+ b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4032691734413764,
    "avg_bits_err_output": 0.238375,
    "avg_bits_err_improve": 0.1648941734413764,
    "time": 12604.999755859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.500441905640464,
    "avg_bits_err_output": 0.00625,
    "avg_bits_err_improve": 29.494191905640463,
    "time": 10075.21240234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (/ (- (* x x) eps) (sqrt (- (* x x) eps)))))",
    "output_parens": 8,
    "avg_bits_err_input": 24.28423411580665,
    "avg_bits_err_output": 0.04117932343849159,
    "avg_bits_err_improve": 24.24305479236816,
    "time": 15345.0458984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(* (/ (pow (cbrt (- x (sin x))) 2.0) (pow (cbrt (tan x)) 2.0)) (cbrt (* (tan x) (/ (fma (cos x) (pow (/ x (tan x)) 2.0) (* (pow (cos x) 2.0) (/ (- x) (tan x)))) (* x (cos x))))))",
    "output_parens": 26,
    "avg_bits_err_input": 30.51516062313163,
    "avg_bits_err_output": 30.509827303787702,
    "avg_bits_err_improve": 0.0053333193439293325,
    "time": 48529.35888671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006573120312590144,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.005823120312590144,
    "time": 3123.66162109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 1e-6) (/ (- (* (pow (+ 1.0 (/ i n)) n) (* i (/ n i))) n) (* i 0.01)) (* 100.0 (/ (+ (pow (exp n) (log1p (/ i n))) -1.0) (/ i n)))))",
    "output_parens": 40,
    "avg_bits_err_input": 47.94557993578987,
    "avg_bits_err_output": 10.709967077865457,
    "avg_bits_err_improve": 37.235612857924416,
    "time": 33150.10546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(/ (+ (/ a (/ (hypot c d) c)) (* (/ d (hypot c d)) b)) (hypot c d))",
    "output_parens": 9,
    "avg_bits_err_input": 26.41803412600564,
    "avg_bits_err_output": 0.45981701106196154,
    "avg_bits_err_improve": 25.95821711494368,
    "time": 21512.18359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 26.36938487891704,
    "avg_bits_err_output": 0.5990544978493715,
    "avg_bits_err_improve": 25.770330381067666,
    "time": 27556.805419921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.033375,
    "avg_bits_err_output": 0.01840553411825244,
    "avg_bits_err_improve": 0.014969465881747562,
    "time": 9320.58154296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* uy (* 2.0 PI))) (sqrt (+ (* ux (- (fma ux maxCos 1.0) ux)) (- 1.0 (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.604116756017186,
    "avg_bits_err_output": 11.392643051997355,
    "avg_bits_err_improve": 2.2114737040198307,
    "time": 70972.10571289062,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (- 1.0 (log (exp (pow (fma ux maxCos (- 1.0 ux)) 6.0)))) (+ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (* (pow (sqrt (fma ux maxCos (- 1.0 ux))) 4.0) (pow (sqrt (fma ux maxCos (- 1.0 ux))) 4.0))))))",
    "output_parens": 26,
    "avg_bits_err_input": 13.633105205358305,
    "avg_bits_err_output": 12.02792811774178,
    "avg_bits_err_improve": 1.605177087616525,
    "time": 57604.706787109375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (sin (* uy (* 2.0 PI))) (* yi (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))))) (* (* (- 1.0 ux) maxCos) (* ux zi)))",
    "output_parens": 33,
    "avg_bits_err_input": 0.3533256941859234,
    "avg_bits_err_output": 0.35480229649004824,
    "avg_bits_err_improve": -0.00147660230412483,
    "time": 81390.96850585938,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.21003759491720253,
    "avg_bits_err_output": 0.20283496250072117,
    "avg_bits_err_improve": 0.007202632416481364,
    "time": 41263.01171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5273052096597759,
    "avg_bits_err_output": 0.5273052096597759,
    "avg_bits_err_improve": 0,
    "time": 24082.750732421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3268196327186358,
    "avg_bits_err_output": 0.3268196327186358,
    "avg_bits_err_improve": 0,
    "time": 26979.895263671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ -1.0 (/ 1.0 (+ (/ u (+ 1.0 (exp (/ -1.0 (/ s PI))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.33150640204892723,
    "avg_bits_err_output": 0.3308295223615173,
    "avg_bits_err_improve": 0.0006768796874099259,
    "time": 32654.396240234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05803104458225688,
    "avg_bits_err_output": 0.040230239571414854,
    "avg_bits_err_improve": 0.017800805010842025,
    "time": 24112.405029296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (fma s (pow E (/ (fabs x) s)) (* s (+ 2.0 (exp (/ (fabs x) (- s)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.13354197425442763,
    "avg_bits_err_output": 0.11408343605955182,
    "avg_bits_err_improve": 0.019458538194875807,
    "time": 26917.77294921875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6751124505807413,
    "avg_bits_err_output": 0.6751944269136092,
    "avg_bits_err_improve": -8.197633286788353e-05,
    "time": 30800.520263671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.15663811306823494,
    "avg_bits_err_output": 0.15281908933121355,
    "avg_bits_err_improve": 0.003819023737021393,
    "time": 29687.51806640625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* eta eta) 1.0000002153053333e-39) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.561479138020748,
    "avg_bits_err_output": 0.4133794547282853,
    "avg_bits_err_improve": 2.148099683292463,
    "time": 32677.658203125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* (exp (/ (* sinTheta_O (- sinTheta_i)) v)) (* cosTheta_O (* cosTheta_i (/ 1.0 v)))) (/ (* (sinh (/ 1.0 v)) 2.0) (/ 1.0 v)))",
    "output_parens": 14,
    "avg_bits_err_input": 0.46465221439493026,
    "avg_bits_err_output": 0.35929422274217826,
    "avg_bits_err_improve": 0.105357991652752,
    "time": 41951.320556640625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(pow (/ 1.0 (cbrt (/ v (* (exp (+ 0.6931 (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v))) 0.5)))) 3.0)",
    "output_parens": 11,
    "avg_bits_err_input": 0.10215365043857581,
    "avg_bits_err_output": 0.09591941256076933,
    "avg_bits_err_improve": 0.006234237877806484,
    "time": 30023.334228515625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(* (/ -1.0 (* (log alpha) (* PI (fma (fma alpha alpha -1.0) (* cosTheta (* cosTheta 2.0)) 2.0)))) (- 1.0 (* alpha alpha)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4702707101683745,
    "avg_bits_err_output": 0.5497026024448077,
    "avg_bits_err_improve": -0.07943189227643321,
    "time": 51104.080810546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3115123199176546,
    "avg_bits_err_output": 0.5492085642251804,
    "avg_bits_err_improve": 0.7623037556924742,
    "time": 29378.220458984375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.513838276691208,
    "avg_bits_err_output": 0.200875,
    "avg_bits_err_improve": 12.312963276691208,
    "time": 25275.6337890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (* (/ (/ 0.125 PI) s) (/ (exp (/ (- r) s)) r)) (* (/ 0.75 (* s (* PI 6.0))) (/ (exp (* (/ r -3.0) (/ 1.0 s))) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13220703589264557,
    "avg_bits_err_output": 0.14730081906033998,
    "avg_bits_err_improve": -0.015093783167694413,
    "time": 79155.56494140625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8584023282747201,
    "avg_bits_err_output": 0.7303654239647867,
    "avg_bits_err_improve": 0.12803690430993342,
    "time": 39221.71923828125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* cosTheta (sqrt PI))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6866850533746715,
    "avg_bits_err_output": 0.47647309850196984,
    "avg_bits_err_improve": 0.2102119548727016,
    "time": 26436.451904296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.621533033039467,
    "avg_bits_err_output": 0.5351147526715693,
    "avg_bits_err_improve": 13.086418280367898,
    "time": 21480.50634765625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.670547721294065,
    "avg_bits_err_output": 0.30965822388564695,
    "avg_bits_err_improve": 13.360889497408419,
    "time": 25981.122802734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* alpha (- alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.035741003659682,
    "avg_bits_err_output": 0.3305449250014424,
    "avg_bits_err_improve": 13.70519607865824,
    "time": 24438.829345703125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (/ (* alphax alphay) (fma alphay (/ cos2phi alphax) (* alphax (/ sin2phi alphay)))) (- (log1p (- u0))))",
    "output_parens": 10,
    "avg_bits_err_input": 12.619550375658925,
    "avg_bits_err_output": 0.5099437827793805,
    "avg_bits_err_improve": 12.109606592879544,
    "time": 33437.676513671875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -2e+159) (- (* PI l) (/ (/ (tan (pow (/ (* PI l) (cbrt (pow (* PI l) 2.0))) 3.0)) F) F)) (if (<= (* PI l) 1e-125) (+ (* PI l) (/ (/ -1.0 F) (/ F (tan (* PI l))))) (if (<= (* PI l) 2e+117) (- (* PI l) (/ (tan (/ 1.0 (/ (log1p (expm1 (* PI l))) (pow (* PI l) 2.0)))) (* F F))) (- (* PI l) (/ (/ (tan (pow (/ (* PI l) (cbrt (pow (* PI l) 2.0))) 3.0)) F) F)))))",
    "output_parens": 50,
    "avg_bits_err_input": 16.926184191673947,
    "avg_bits_err_output": 6.754553606387694,
    "avg_bits_err_improve": 10.171630585286252,
    "time": 39875.424560546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(/ (- 1.0 (* x (cos B))) (sin B))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21206372187554084,
    "avg_bits_err_output": 0.180535526564393,
    "avg_bits_err_improve": 0.03152819531114784,
    "time": 23264.250732421875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (* F (/ (pow (fma x 2.0 (fma F F 2.0)) -0.5) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.320328265980981,
    "avg_bits_err_output": 10.174591245316014,
    "avg_bits_err_improve": 3.145737020664967,
    "time": 36964.481689453125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (log (tanh (* PI (* f 0.25))))) (* PI -0.25))",
    "output_parens": 7,
    "avg_bits_err_input": 61.322369661325304,
    "avg_bits_err_output": 0.7137762861965321,
    "avg_bits_err_improve": 60.60859337512877,
    "time": 45519.55859375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -9e+153) (/ (* t (sqrt 2.0)) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0)))))) (if (<= t -2.8e-41) (/ (* t (sqrt 2.0)) (sqrt (- (* (+ x 1.0) (/ (* 2.0 (* t t)) (+ x -1.0))) (* l (+ l (* l (/ (- -1.0 x) (+ x -1.0)))))))) (if (or (<= t 3e-61) (not (<= t 4e+102))) (/ (* t (sqrt 2.0)) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0)))))) (/ (* t (sqrt 2.0)) (cbrt (pow (- (* (+ x 1.0) (/ (* 2.0 (* t t)) (+ x -1.0))) (* l (+ l (* l (/ (- -1.0 x) (+ x -1.0)))))) 1.5))))))",
    "output_parens": 68,
    "avg_bits_err_input": 42.89399472837731,
    "avg_bits_err_output": 18.577302781905914,
    "avg_bits_err_improve": 24.316691946471394,
    "time": 59253.83935546875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.9176017611745624,
    "avg_bits_err_output": 0.22536353437914652,
    "avg_bits_err_improve": 3.692238226795416,
    "time": 27390.50927734375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (/ 0.5 (hypot 1.0 (* l (/ 2.0 (/ Om (hypot (sin kx) (sin ky)))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.8943742678845564,
    "avg_bits_err_output": 0.006,
    "avg_bits_err_improve": 0.8883742678845564,
    "time": 17214.96142578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ 2.0 (* (/ l t) (sqrt 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.862531952428254,
    "avg_bits_err_output": 1.217221122888506,
    "avg_bits_err_improve": 9.64531082953975,
    "time": 26729.371337890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -2.1e-37) (sqrt (* (* n 2.0) (+ (fma l (* (/ 1.0 Om) (* U (fma l -2.0 (* (/ n (/ Om l)) (- U* U))))) 0.0) (* U t)))) (if (<= n -6.2e-52) (* (sqrt U) (sqrt (* (* n 2.0) (- t (fma 2.0 (/ l (/ Om l)) (* (/ l Om) (* (- U U*) (/ (* n l) Om)))))))) (if (<= n -1.15e-202) (sqrt (fma (/ (fma (* n (/ l Om)) (- U* U) (* l -2.0)) (/ Om U)) (* 2.0 (* n l)) (* 2.0 (* U (* n t))))) (if (<= n 1.35e-303) (sqrt (fma (* (* l (+ -2.0 (* n (/ (- U* U) Om)))) (/ U Om)) (* 2.0 (* n l)) (* 2.0 (* n (* U t))))) (if (<= n 8e-259) (* (sqrt n) (sqrt (* 2.0 (* U (+ t (* (/ l Om) (* l (+ -2.0 (* n (/ (- U* U) Om)))))))))) (if (<= n 4.4e-198) (sqrt (fma 2.0 (* U (* n t)) (/ (* l (* (* n 2.0) (fma l -2.0 (* (- U* U) (* n (/ l Om)))))) (/ Om U)))) (if (<= n 6.2e-150) (sqrt (* U (* (* n 2.0) (- t (fma (pow (/ Om l) -2.0) (* n (- U U*)) (* 2.0 (/ l (/ Om l)))))))) (if (<= n 3.8e+58) (sqrt (fma (/ l Om) (* (* n 2.0) (* U (fma l -2.0 (* (/ n (/ Om l)) (- U* U))))) (* n (* 2.0 (* U t))))) (* (sqrt (* n 2.0)) (sqrt (* U (- t (fma n (* (- U U*) (pow (/ Om l) -2.0)) (/ 2.0 (/ (/ Om l) l)))))))))))))))",
    "output_parens": 141,
    "avg_bits_err_input": 34.56024740422174,
    "avg_bits_err_output": 27.230566695930477,
    "avg_bits_err_improve": 7.329680708291264,
    "time": 54931.96875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -8e+135) (/ (* 2.0 (/ l k)) (* k (* (/ (sin k) l) (* t (tan k))))) (* 2.0 (/ (/ l k) (* (* t k) (* (/ (sin k) l) (tan k))))))",
    "output_parens": 20,
    "avg_bits_err_input": 47.23044222472221,
    "avg_bits_err_output": 3.3912670876360136,
    "avg_bits_err_improve": 43.839175137086194,
    "time": 107916.05517578125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -2.9e-155) (not (<= t 7.5e-60))) (* (/ (/ 2.0 (/ (* t (* (+ 2.0 (pow (/ k t) 2.0)) (sin k))) l)) t) (/ (/ l t) (tan k))) (* (/ 2.0 (* t (fma (* (tan k) (* t t)) (* 2.0 (sin k)) (* (sin k) (* (tan k) (pow (/ (* t k) t) 2.0)))))) (* l l)))",
    "output_parens": 35,
    "avg_bits_err_input": 32.163229373401556,
    "avg_bits_err_output": 10.397500904152354,
    "avg_bits_err_improve": 21.765728469249204,
    "time": 78145.63989257812,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (* (sqrt 0.5) (cos th)) (fma a2 a2 (* a1 a1)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5397894765845872,
    "avg_bits_err_output": 0.4809778218928499,
    "avg_bits_err_improve": 0.058811654691737325,
    "time": 31190.0654296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* k (pow PI (+ k -1.0))) -0.5) (pow (* 2.0 n) (* (+ k -1.0) -0.5)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.4818863233716547,
    "avg_bits_err_output": 0.41947444761062574,
    "avg_bits_err_improve": 0.06241187576102897,
    "time": 26060.666015625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(fma (* J 2.0) (* (sinh l) (cos (* K 0.5))) U)",
    "output_parens": 6,
    "avg_bits_err_input": 17.829651954521946,
    "avg_bits_err_output": 0.11733496250072116,
    "avg_bits_err_improve": 17.712316992021226,
    "time": 31506.415771484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(/ (- (* 2.0 (log (exp (cos (- (* (+ m n) (* 0.5 K)) M))))) (cos (- (* (+ m n) (* 0.5 K)) M))) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (- l (fabs (- n m))))))",
    "output_parens": 24,
    "avg_bits_err_input": 15.418386189492933,
    "avg_bits_err_output": 15.396873658803742,
    "avg_bits_err_improve": 0.021512530689191678,
    "time": 26323.571533203125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (cos (/ K 2.0)) (* -2.0 (hypot 1.0 (* 0.5 (/ (/ U J) (cos (* K 0.5))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.46453308281331,
    "avg_bits_err_output": 7.853908082813308,
    "avg_bits_err_improve": 9.610625000000002,
    "time": 33155.489990234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (+ 1.0 (/ (* h (* M (* (/ D d) -0.5))) (* (/ 2.0 (* M (/ D d))) l)))))",
    "output_parens": 12,
    "avg_bits_err_input": 13.68570072456706,
    "avg_bits_err_output": 8.409082865559663,
    "avg_bits_err_improve": 5.276617859007397,
    "time": 42936.04296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (/ c0 (/ l (sqrt (* l (/ A V))))) (if (<= (* V l) -1e-290) (* c0 (* (sqrt (- A)) (sqrt (/ (/ -1.0 V) l)))) (if (<= (* V l) 2e-313) (* c0 (/ (sqrt (/ (- A) l)) (sqrt (- V)))) (if (<= (* V l) 1e+295) (* c0 (/ (sqrt A) (sqrt (* V l)))) (* c0 (/ (sqrt (/ A (- V))) (sqrt (- l))))))))",
    "output_parens": 44,
    "avg_bits_err_input": 19.321031222129317,
    "avg_bits_err_output": 7.310003658552626,
    "avg_bits_err_improve": 12.011027563576691,
    "time": 35039.3115234375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= D -9.5e-63) (* (/ M (- (* c0 (* (/ d D) (/ (/ (/ d D) h) w))) (sqrt (- (pow (* c0 (* (/ d D) (/ (/ (/ d D) h) w))) 2.0) (* M M))))) (/ (* (* M c0) 0.5) w)) (if (<= D 8.6e-210) (log (pow (sqrt (exp (/ c0 w))) (* (- M) (/ M (- (hypot (/ (/ (* c0 d) (/ w d)) (* h (* D D))) (sqrt (- (* M M)))) (/ (/ (* c0 d) (/ w d)) (* h (* D D)))))))) (if (<= D 5.1e-122) (* (/ M (- (* c0 (* (/ d D) (/ (/ (/ d D) h) w))) (sqrt (- (pow (* c0 (* (/ d D) (/ (/ (/ d D) h) w))) 2.0) (* M M))))) (/ (* (* M c0) 0.5) w)) (if (<= D 8.8e-103) (* (/ c0 (* w 2.0)) (fma (sqrt (fma (/ (* c0 d) w) (/ d (* h (* D D))) M)) (sqrt (- (* (/ (* c0 d) w) (/ d (* h (* D D)))) M)) (* (/ (* c0 d) w) (/ d (* h (* D D)))))) (if (<= D 1.8e+112) (* (/ M (/ (- (* (/ d (* h (* D D))) (* c0 (/ d w))) (sqrt (- (pow (/ w (* c0 (/ (* d (/ (/ d D) h)) D))) -2.0) (* M M)))) (* c0 0.5))) (/ M w)) (* (* 0.5 (/ c0 w)) (+ (* (/ c0 w) (/ (pow (/ d D) 2.0) h)) (sqrt (- (pow (* (/ c0 w) (/ (pow (/ d D) 2.0) h)) 2.0) (* M M))))))))))",
    "output_parens": 144,
    "avg_bits_err_input": 59.72345062510315,
    "avg_bits_err_output": 33.42064084521211,
    "avg_bits_err_improve": 26.302809779891035,
    "time": 80331.8359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d -7e-129) (* (* (/ (sqrt (- d)) (sqrt (- h))) (sqrt (/ d l))) (- 1.0 (* (* h (* (/ D l) (/ M d))) (/ (/ M d) (/ 8.0 D))))) (if (<= d -2e-310) (* (* (sqrt (/ d h)) (/ (sqrt (- d)) (sqrt (- l)))) (- 1.0 (/ (* M -0.25) (* (/ (/ (* d l) (* M (* D 0.5))) h) (/ (- d) D))))) (if (or (<= d 9e-197) (not (<= d 6.8e-15))) (/ d (* (/ (sqrt l) (fma (* (pow (* (/ M 2.0) (/ D d)) 2.0) (/ h l)) -0.5 1.0)) (sqrt h))) (* (* (sqrt (/ d h)) (* (pow l -0.5) (sqrt d))) (- 1.0 (* (/ (/ M d) (/ 8.0 D)) (/ (* D (/ M d)) (/ l h))))))))",
    "output_parens": 75,
    "avg_bits_err_input": 26.54313077399435,
    "avg_bits_err_output": 17.212367423794213,
    "avg_bits_err_improve": 9.330763350200137,
    "time": 93865.78735351562,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(pow (pow (/ (/ (/ (- (+ 0.015625 (* (/ 0.25 (fma x x 1.0)) 0.0625)) (* (pow (* (fma x x 1.0) 4.0) -2.0) (+ 0.25 (/ 0.25 (fma x x 1.0))))) (* (+ 0.25 (/ 0.25 (fma x x 1.0))) (+ 0.25 (/ 0.25 (fma x x 1.0))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) 3.0) 0.3333333333333333)",
    "output_parens": 32,
    "avg_bits_err_input": 16.014168059511185,
    "avg_bits_err_output": 15.527905737231277,
    "avg_bits_err_improve": 0.4862623222799076,
    "time": 57420.66943359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9868656015629508,
    "avg_bits_err_output": 0.011799039677847345,
    "avg_bits_err_improve": 0.9750665618851034,
    "time": 4727.3447265625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(* (/ (fma v (* v -5.0) 1.0) t) (/ (/ 1.0 (* PI (- 1.0 (* v v)))) (sqrt (fma v (* v -6.0) 2.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.42591781149169733,
    "avg_bits_err_output": 0.29023273754400847,
    "avg_bits_err_improve": 0.13568507394768886,
    "time": 20722.49951171875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (- 1.0 (* v v)) (sqrt (+ 2.0 (* (* v v) -6.0)))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.012707722262221501,
    "avg_bits_err_output": 0.009073120312590145,
    "avg_bits_err_improve": 0.0036346019496313556,
    "time": 7012.209716796875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (+ 1.0 (* (* v v) -5.0)) (+ (* v v) -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5507649356150287,
    "avg_bits_err_output": 0.5507649356150287,
    "avg_bits_err_improve": 0,
    "time": 32969.18896484375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (/ (- -10.0 k) (/ a k))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.14736174471255,
    "avg_bits_err_output": 0.24782832643578384,
    "avg_bits_err_improve": 1.899533418276766,
    "time": 22049.76611328125,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (expm1 (log1p (exp (/ (+ Vef (+ EAccept (- Ev mu))) KbT)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.022732716761480035,
    "avg_bits_err_output": 0.023732716761480036,
    "avg_bits_err_improve": -0.0010000000000000009,
    "time": 8547.68359375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18781373264222415,
    "avg_bits_err_output": 0.013893604128199857,
    "avg_bits_err_improve": 0.17392012851402427,
    "time": 10222.983154296875,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18910664275575975,
    "avg_bits_err_output": 0.023275611257810365,
    "avg_bits_err_improve": 0.1658310314979494,
    "time": 13878.324462890625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18459005351546667,
    "avg_bits_err_output": 0.025010008974795515,
    "avg_bits_err_improve": 0.15958004454067115,
    "time": 13736.14306640625,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (* x (/ 1.0 (hypot x (* p 2.0)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 13.296697980081309,
    "avg_bits_err_output": 13.603766075611109,
    "avg_bits_err_improve": -0.3070680955298002,
    "time": 20544.042724609375,
    "seed": 14,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (/ (expm1 (+ x x)) (expm1 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 40.59271767812149,
    "avg_bits_err_output": 0.049125,
    "avg_bits_err_improve": 40.54359267812149,
    "time": 10547.57568359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x 4.4e-308) (/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (- (log (exp (tan x))) x)) (if (<= x 2.3e-8) (/ (fma (sqrt (sin x)) (sqrt (sin x)) (- x)) (fma (pow (/ 1.0 (/ (pow (cbrt (tan x)) 2.0) (tan x))) 2.0) (cbrt (tan x)) (- x))) (/ (- (sin x) x) (- (* (sin x) (/ 1.0 (cos x))) x))))",
    "output_parens": 42,
    "avg_bits_err_input": 31.110674265336044,
    "avg_bits_err_output": 29.1088539025851,
    "avg_bits_err_improve": 2.0018203627509443,
    "time": 38544.984130859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- INFINITY)) (/ (- c) (+ b_2 (hypot b_2 (pow (pow (* a c) 2.0) 0.25)))) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) -1e-127) (fma (sqrt (- (* b_2 b_2) (* a c))) (/ 1.0 a) (/ (- b_2) a)) (if (or (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 0.0) (not (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 1e+295))) (/ (- c) (+ b_2 (hypot b_2 (pow (pow (* a c) 2.0) 0.25)))) (fma (- b_2) (/ 1.0 a) (/ (sqrt (- (* b_2 b_2) (* a c))) a)))))",
    "output_parens": 64,
    "avg_bits_err_input": 33.820198183972245,
    "avg_bits_err_output": 17.158731466198358,
    "avg_bits_err_improve": 16.661466717773887,
    "time": 32272.51904296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (* c (/ 1.0 (/ (- b_2 (hypot b_2 (pow (pow (* c a) 2.0) 0.25))) (- a)))) a) (if (<= b_2 8.8e-275) (/ (- c) (- b_2 (sqrt (- (* b_2 b_2) (* c a))))) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a)))",
    "output_parens": 28,
    "avg_bits_err_input": 34.05588322986994,
    "avg_bits_err_output": 18.68190621073837,
    "avg_bits_err_improve": 15.373977019131573,
    "time": 26019.360107421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (sin x) x) (/ x (tan (* x 0.5))))",
    "output_parens": 6,
    "avg_bits_err_input": 31.329167050767772,
    "avg_bits_err_output": 0.12985413594209747,
    "avg_bits_err_improve": 31.199312914825676,
    "time": 23361.970703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.00250505090117,
    "avg_bits_err_output": 31.735874129216164,
    "avg_bits_err_improve": 0.2666309216850067,
    "time": 43136.07568359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.40489672648931,
    "avg_bits_err_output": 0.0165,
    "avg_bits_err_improve": 29.388396726489308,
    "time": 12697.845947265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 x) (- -1.0 x))",
    "output_parens": 3,
    "avg_bits_err_input": 14.392850973268146,
    "avg_bits_err_output": 0.068125,
    "avg_bits_err_improve": 14.324725973268146,
    "time": 13155.000244140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -2.3e-60) (fma (sin x) (- (sin eps)) (* (cos x) (+ (cos eps) -1.0))) (if (<= x 5.7e-21) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))))",
    "output_parens": 28,
    "avg_bits_err_input": 39.940981555116096,
    "avg_bits_err_output": 0.6953099300771587,
    "avg_bits_err_improve": 39.24567162503894,
    "time": 33658.42138671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ (+ 1.0 (- x x)) (fma (cbrt x) (+ (cbrt (+ 1.0 x)) (/ x (pow (cbrt x) 2.0))) (/ (+ 1.0 x) (cbrt (+ 1.0 x)))))",
    "output_parens": 15,
    "avg_bits_err_input": 29.536233998661956,
    "avg_bits_err_output": 0.21172913594209716,
    "avg_bits_err_improve": 29.32450486271986,
    "time": 24061.156005859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 29.938340772734886,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 29.938340772734886,
    "time": 12215.639892578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -5e-186) (* (- (hypot (sqrt (fabs (* c (* a -4.0)))) b) b) (/ 0.5 a)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 2e-174) (* (/ c (+ b (hypot b (sqrt (* a (* c -4.0)))))) -2.0) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 5e+277) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) INFINITY) (/ (- (hypot (* (sqrt (* c -4.0)) (sqrt a)) b) b) (* a 2.0)) (* (/ 0.5 a) (- (hypot (/ 1.0 (/ (/ (/ -0.25 c) (pow (* a (* c -4.0)) -0.5)) a)) b) b))))))",
    "output_parens": 82,
    "avg_bits_err_input": 34.148113047899024,
    "avg_bits_err_output": 18.2670448517609,
    "avg_bits_err_improve": 15.881068196138123,
    "time": 40770.3232421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -4.8e+43) (/ (/ (+ b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) a) -2.0) (if (<= c 2.35e-32) (/ (/ (+ b (hypot b (pow (* (* c a) (* (* c a) 16.0)) 0.25))) a) -2.0) (if (<= c 3.1e+93) (/ (/ (* (* c a) 4.0) (- (hypot b (sqrt (* (* c -4.0) a))) b)) (* a 2.0)) (/ (/ (+ b (hypot b (* (sqrt (* -4.0 a)) (sqrt c)))) a) -2.0))))",
    "output_parens": 41,
    "avg_bits_err_input": 34.4079375625893,
    "avg_bits_err_output": 24.67625281416227,
    "avg_bits_err_improve": 9.731684748427025,
    "time": 35584.740966796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.41774068935821,
    "avg_bits_err_output": 0.0020868491443749937,
    "avg_bits_err_improve": 61.415653840213835,
    "time": 12446.107421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(+ (log1p n) (- (+ (* n (log1p n)) -1.0) (* n (log n))))",
    "output_parens": 8,
    "avg_bits_err_input": 63.00128345677194,
    "avg_bits_err_output": 0.6159013302608417,
    "avg_bits_err_improve": 62.3853821265111,
    "time": 33663.203369140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.5901143684253,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 58.582989368425295,
    "time": 11274.135498046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (pow (cbrt (+ -1.0 (/ (tan x) x))) 2.0) (/ (pow (cbrt (tan x)) 2.0) (cbrt (* 3.0 (log (cbrt (exp (+ (/ -1.0 (tan x)) (/ 1.0 x)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 59.937304562023,
    "avg_bits_err_output": 59.92752780172622,
    "avg_bits_err_improve": 0.009776760296780651,
    "time": 45690.2568359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (* (expm1 (* eps (+ a b))) (/ eps (expm1 (* eps b)))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.549631115990856,
    "avg_bits_err_output": 29.620459169167795,
    "avg_bits_err_improve": 30.92917194682306,
    "time": 37605.138671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.02666931851472,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": 41.01554431851472,
    "time": 7512.84033203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.78338549412474,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 58.78263549412474,
    "time": 2936.0498046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.372772749799932,
    "avg_bits_err_output": 0.017067347324700076,
    "avg_bits_err_improve": 29.35570540247523,
    "time": 11513.095947265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(fabs (* (exp x) (/ (fma (pow (exp x) -3.0) (+ (exp x) 2.0) (fma (pow (exp x) -2.0) -4.0 1.0)) (+ 1.0 (/ 2.0 (exp x))))))",
    "output_parens": 15,
    "avg_bits_err_input": 30.072393212563146,
    "avg_bits_err_output": 29.835340768842638,
    "avg_bits_err_improve": 0.2370524437205077,
    "time": 39890.075927734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ 1.0 (- (* (/ (fma 2.0 (- 1.0 x) x) x) (- -1.0 x)) x)) (cbrt (pow (* (+ x -1.0) (- -1.0 x)) 3.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 9.623785173793717,
    "avg_bits_err_output": 9.592600018125504,
    "avg_bits_err_improve": 0.031185155668213227,
    "time": 44214.47509765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (<= eps -2.05e-47) (fma (+ (tan x) (tan eps)) (/ 1.0 (- 1.0 (* (tan x) (tan eps)))) (- (tan x))) (if (<= eps 2.4e-54) (/ (+ (- (/ (sin (+ eps x)) (tan x)) (* (cos eps) (cos x))) (* (sin x) (sin eps))) (/ (cos (+ eps x)) (tan x))) (fma (+ (tan x) (tan eps)) (/ -1.0 (fma (tan x) (tan eps) -1.0)) (- (tan x)))))",
    "output_parens": 42,
    "avg_bits_err_input": 36.96683802788382,
    "avg_bits_err_output": 20.668056088696165,
    "avg_bits_err_improve": 16.298781939187652,
    "time": 40174.64208984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 29.598634197073682,
    "avg_bits_err_output": 0.13173609062806496,
    "avg_bits_err_improve": 29.46689810644562,
    "time": 23236.572265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (+ (cos eps) -1.0) (* (cos x) (sin eps)))",
    "output_parens": 7,
    "avg_bits_err_input": 37.26211806434747,
    "avg_bits_err_output": 0.38340123831415746,
    "avg_bits_err_improve": 36.87871682603331,
    "time": 27157.204833984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 20.01758811801997,
    "avg_bits_err_output": 0.11073120312590146,
    "avg_bits_err_improve": 19.906856914894068,
    "time": 23130.2578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (+ 1.0 (+ N (* N N))))",
    "output_parens": 4,
    "avg_bits_err_input": 15.61891513363768,
    "avg_bits_err_output": 0.42178415719564466,
    "avg_bits_err_improve": 15.197130976442036,
    "time": 21514.8369140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.872719925704544,
    "avg_bits_err_output": 1.2385504134265952,
    "avg_bits_err_improve": 28.63416951227795,
    "time": 26303.68359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (+ (/ (- m (* m m)) v) -1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.08473027599603312,
    "avg_bits_err_output": 0.08292072124054027,
    "avg_bits_err_improve": 0.0018095547554928537,
    "time": 27875.16259765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b a) (/ (/ -1.0 b) a))",
    "output_parens": 4,
    "avg_bits_err_input": 15.945028183788345,
    "avg_bits_err_output": 0.26227406094353933,
    "avg_bits_err_improve": 15.682754122844806,
    "time": 17477.707763671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (/ (sqrt (+ 1.0 (sqrt (pow (cos (pow (cbrt (* PI (* angle 0.011111111111111112))) 3.0)) 2.0)))) (sqrt 2.0))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.515547362137298,
    "avg_bits_err_output": 20.51099629534653,
    "avg_bits_err_improve": 0.004551066790767777,
    "time": 50786.59765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(fma (+ b a) (/ (sin (* PI (* angle 0.011111111111111112))) (/ 1.0 (- b a))) 0.0)",
    "output_parens": 8,
    "avg_bits_err_input": 32.063659563320776,
    "avg_bits_err_output": 21.39423908897714,
    "avg_bits_err_improve": 10.669420474343635,
    "time": 45185.588134765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (* PI 0.005555555555555556))) a) 2.0) (pow (* b (cbrt (pow (cos (/ angle (/ -180.0 PI))) 3.0))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.54605131535058,
    "avg_bits_err_output": 20.513050753806688,
    "avg_bits_err_improve": 0.033000561543893525,
    "time": 52289.379638671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(fma (/ m v) (* m (- 1.0 m)) (- m))",
    "output_parens": 5,
    "avg_bits_err_input": 0.1838492043822976,
    "avg_bits_err_output": 0.17691292625783844,
    "avg_bits_err_improve": 0.006936278124459155,
    "time": 20273.975341796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3173243178783786,
    "avg_bits_err_output": 0.3068214800231922,
    "avg_bits_err_improve": 0.010502837855186409,
    "time": 31220.94873046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13806372187554086,
    "avg_bits_err_output": 0.13806372187554086,
    "avg_bits_err_improve": 0,
    "time": 28127.46923828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (fma (* (cos phi1) (cos phi2)) (* (cos lambda1) (cos lambda2)) (expm1 (log1p (* (cos phi2) (* (cos phi1) (* (sin lambda1) (sin lambda2))))))))) R)",
    "output_parens": 21,
    "avg_bits_err_input": 16.69982691895783,
    "avg_bits_err_output": 3.829176566063905,
    "avg_bits_err_improve": 12.870650352893923,
    "time": 48448.265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* a (/ (* c -4.0) (+ b (sqrt (fma b b (* c (* -4.0 a))))))) (* a 2.0))",
    "output_parens": 10,
    "avg_bits_err_input": 52.48820756036882,
    "avg_bits_err_output": 0.17311353437914653,
    "avg_bits_err_improve": 52.31509402598967,
    "time": 38665.7919921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* -4.0 a)))) b) (* a 2.0)) -5e-14) (* (/ -0.5 a) (/ (/ (- (pow b 36.0) (pow (fma b b (* -4.0 (* c a))) 18.0)) (* (+ (pow b 9.0) (pow (fma b b (* -4.0 (* c a))) 4.5)) (+ (pow b 18.0) (pow (fma b b (* -4.0 (* c a))) 9.0)))) (* (fma b b (fma b (sqrt (fma b b (* a (* -4.0 c)))) (fma b b (* a (* -4.0 c))))) (+ (pow b 6.0) (+ (pow (fma b b (* a (* -4.0 c))) 3.0) (pow (* b (sqrt (fma b b (* a (* -4.0 c))))) 3.0)))))) (/ (* (/ (+ (- (* b b) (* b (sqrt (fma c (* -4.0 a) (* b b))))) (* c (* -4.0 a))) b) (/ b (sqrt (fma c (* -4.0 a) (* b b))))) (* a 2.0)))",
    "output_parens": 75,
    "avg_bits_err_input": 28.15600209448868,
    "avg_bits_err_output": 25.760186957603405,
    "avg_bits_err_improve": 2.3958151368852754,
    "time": 88734.45581054688,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (fma (pow (fma b b (* a (* c -4.0))) 2.25) (- (cbrt (pow (fma b b (* -4.0 (* a c))) 6.75))) (pow b 9.0))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (pow b 6.0) (+ (pow (fma b b (* a (* c -4.0))) 3.0) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0))))) (/ -0.5 a))",
    "output_parens": 39,
    "avg_bits_err_input": 43.623192487426074,
    "avg_bits_err_output": 40.44142854680591,
    "avg_bits_err_improve": 3.181763940620165,
    "time": 95543.07275390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-193) (/ (- (hypot b (sqrt (fabs (* a (* c -4.0))))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (* (fma a (* c -4.0) (- (* b b) (* b b))) (/ (/ 0.5 a) (+ b (hypot b (sqrt (* a (* c -4.0))))))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 5e+277) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) INFINITY) (/ (- (hypot b (* a (* (sqrt (* c -4.0)) (pow a -0.5)))) b) (* a 2.0)) (/ (- (hypot b (* a (* (* c -4.0) (pow (* a (* c -4.0)) -0.5)))) b) (* a 2.0))))))",
    "output_parens": 88,
    "avg_bits_err_input": 34.15091079335884,
    "avg_bits_err_output": 20.54434588555541,
    "avg_bits_err_improve": 13.606564907803431,
    "time": 40703.019287109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (/ (fma (pow (cos phi1) 2.0) (- (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1))) (* (* (cos phi2) (cos phi1)) (- (pow (* (sin lambda1) (sin lambda2)) 2.0) (pow (* (cos lambda2) (cos lambda1)) 2.0)))) (* (cos phi1) (- (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.8504595051628373,
    "avg_bits_err_output": 0.2557107689196715,
    "avg_bits_err_improve": 0.5947487362431658,
    "time": 35181.54638671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(+ (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) -1.0)",
    "output_parens": 5,
    "avg_bits_err_input": 29.14982067071498,
    "avg_bits_err_output": 29.14982067071498,
    "avg_bits_err_improve": 0,
    "time": 97669.11059570312,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.448047843824696,
    "avg_bits_err_output": 0.013625,
    "avg_bits_err_improve": 58.4344228438247,
    "time": 11136.41748046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.18063737195172,
    "avg_bits_err_output": 0.00875,
    "avg_bits_err_improve": 58.17188737195172,
    "time": 7312.453857421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 2.0 (* 2.0 (cosh x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.009521240625180288,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 0.0003962406251802886,
    "time": 3065.932861328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 32.13066524101186,
    "avg_bits_err_output": 0.03594812031259014,
    "avg_bits_err_improve": 32.09471712069927,
    "time": 6892.451416015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.57730135833719,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 58.570176358337186,
    "time": 12761.985107421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.026698120312590144,
    "avg_bits_err_output": 0.027323120312590144,
    "avg_bits_err_improve": -0.0006250000000000006,
    "time": 3791.690673828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.11932312031259014,
    "avg_bits_err_output": 0.11925,
    "avg_bits_err_improve": 7.312031259014418e-05,
    "time": 36587.889892578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (/ 1.0 (hypot 1.0 (/ (tan t) (/ ew eh))))) (* (* eh (sin t)) (sin (atan (/ (* (tan t) (- eh)) ew))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.1252712406251803,
    "avg_bits_err_output": 0.1261462406251803,
    "avg_bits_err_improve": -0.0008749999999999869,
    "time": 40043.53515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (sin (* phi2 0.5)) (- (sin (* 0.5 phi1))) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 38.89351583101381,
    "avg_bits_err_output": 0.13023385834788456,
    "avg_bits_err_improve": 38.76328197266592,
    "time": 36152.88720703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- 1.0 (/ (/ b a) (/ a b)))))",
    "output_parens": 6,
    "avg_bits_err_input": 14.201469142944786,
    "avg_bits_err_output": 0.010432428952329662,
    "avg_bits_err_improve": 14.191036713992457,
    "time": 4103.54736328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (* (sin phi1) (fma (cos delta) (sin phi1) (* (cos phi1) (* (sin delta) (cos theta))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.15155727584531054,
    "avg_bits_err_output": 0.14657058799715272,
    "avg_bits_err_improve": 0.004986687848157811,
    "time": 51786.300537109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* a -3.0) c) (+ b (sqrt (+ (* b b) (* a (* -3.0 c)))))) (* a 3.0))",
    "output_parens": 11,
    "avg_bits_err_input": 52.52465316488392,
    "avg_bits_err_output": 0.3881657906338346,
    "avg_bits_err_improve": 52.13648737425009,
    "time": 33439.26025390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma a (* c -3.0) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 28.28270455726747,
    "avg_bits_err_output": 0.27522180468885205,
    "avg_bits_err_improve": 28.007482752578618,
    "time": 36158.30419921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* a -3.0) c) (+ b (sqrt (fma b b (* (* a -3.0) c))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 43.671751270778614,
    "avg_bits_err_output": 0.4045575203241292,
    "avg_bits_err_improve": 43.26719375045448,
    "time": 45116.30810546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (* 3.0 a) -4e+179) (* -0.3333333333333333 (/ (- b (hypot b (* (sqrt (* a -3.0)) (sqrt c)))) a)) (if (<= (* 3.0 a) 2e+133) (* -0.3333333333333333 (/ (- b (hypot b (sqrt (fabs (* a (* -3.0 c)))))) a)) (* -0.3333333333333333 (/ (- b (hypot b (* (sqrt a) (sqrt (* -3.0 c))))) a))))",
    "output_parens": 30,
    "avg_bits_err_input": 34.18203478559806,
    "avg_bits_err_output": 21.60896700718802,
    "avg_bits_err_improve": 12.573067778410042,
    "time": 47887.425048828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (fma (sin lambda2) (sin lambda1) (* (cos lambda2) (cos lambda1))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.058333628631958,
    "avg_bits_err_output": 0.17912749461034608,
    "avg_bits_err_improve": 12.879206134021612,
    "time": 46789.888671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ 1.0 (- (* (+ 1.0 x) (/ (+ 1.0 x) x)) x)) (* (/ (+ 1.0 x) x) (- 1.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 28.988357069377088,
    "avg_bits_err_output": 25.086189737764332,
    "avg_bits_err_improve": 3.9021673316127554,
    "time": 69345.40087890625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 0,
    "time": 21992.856689453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (+ x 1.0)) (- 1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.406561586031108,
    "avg_bits_err_output": 0.071375,
    "avg_bits_err_improve": 14.335186586031108,
    "time": 33623.47265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (- (pow (* (* (cbrt (+ C (- A (hypot B (- A C))))) (cbrt F)) (cbrt (* 2.0 (fma C (* A -4.0) (* B B))))) 1.5)) (+ (* B B) (* -4.0 (* C A))))",
    "output_parens": 20,
    "avg_bits_err_input": 52.35448496416277,
    "avg_bits_err_output": 39.764983951884545,
    "avg_bits_err_improve": 12.589501012278227,
    "time": 54656.6748046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(/ 1.0 (/ PI (* (atan (/ (- (- C A) (hypot B (- A C))) B)) 180.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 29.9966691977714,
    "avg_bits_err_output": 14.225041668738259,
    "avg_bits_err_improve": 15.771627529033141,
    "time": 29626.455810546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (- (/ (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (+ (pow B 2.0) (* C (* A -4.0))))) 0.0) (/ (* (sqrt (+ A (+ C (hypot B (- A C))))) (* (/ F (* (sqrt (fma A (* C -4.0) (* B B))) (sqrt (* 2.0 F)))) (* (fma A (* C -4.0) (* B B)) -2.0))) (+ (* B B) (* -4.0 (* A C)))) (/ (* (sqrt (* 2.0 (+ (* B (* B F)) (* F (* A (* C -4.0)))))) (- (sqrt (+ A (+ C (hypot B (- A C))))))) (+ (* B B) (* -4.0 (* A C)))))",
    "output_parens": 67,
    "avg_bits_err_input": 52.60273035188702,
    "avg_bits_err_output": 41.03207181698613,
    "avg_bits_err_improve": 11.570658534900886,
    "time": 50548.408935546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt (* g 0.5)) (cbrt a))",
    "output_parens": 4,
    "avg_bits_err_input": 15.795443944367163,
    "avg_bits_err_output": 0.8092612218297375,
    "avg_bits_err_improve": 14.986182722537425,
    "time": 21003.781005859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -5e-295) (+ (* (cbrt (* 0.5 (- (hypot g h) g))) (/ 1.0 (cbrt a))) (cbrt (/ (+ g (hypot h g)) (/ a -0.5)))) (+ (* (cbrt (/ -0.5 a)) (cbrt (+ g (hypot g h)))) (cbrt (* (/ 0.5 a) (- (hypot h g) g)))))",
    "output_parens": 27,
    "avg_bits_err_input": 36.48752067575829,
    "avg_bits_err_output": 2.744876100105269,
    "avg_bits_err_improve": 33.742644575653024,
    "time": 27809.394775390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma 0.6666666666666666 PI (* 0.3333333333333333 (acos (/ g (- h)))))) 3.0) (pow (cos (fma 0.6666666666666666 PI (* 0.3333333333333333 (acos (/ g (- h)))))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9910877828190814,
    "avg_bits_err_output": 0.037851895703597704,
    "avg_bits_err_improve": 0.9532358871154837,
    "time": 14243.794921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- a (log1p (+ (exp a) (expm1 b)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.7174693609377705,
    "avg_bits_err_output": 0.6467624955768584,
    "avg_bits_err_improve": 0.07070686536091209,
    "time": 4703.982177734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (* b1 b2) -1e+300) (/ (/ a2 (/ b1 a1)) b2) (if (<= (* b1 b2) -2e-36) (* a1 (/ a2 (* b1 b2))) (if (or (<= (* b1 b2) -5e-311) (and (not (<= (* b1 b2) 5e-117)) (<= (* b1 b2) 5e+155))) (/ (* a2 a1) (* b1 b2)) (/ (/ a2 b1) (/ b2 a1)))))",
    "output_parens": 28,
    "avg_bits_err_input": 11.130581512558171,
    "avg_bits_err_output": 5.580284918474454,
    "avg_bits_err_improve": 5.550296594083718,
    "time": 12362.873291015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.504616368894811,
    "avg_bits_err_output": 0.43307312031259015,
    "avg_bits_err_improve": 0.07154324858222083,
    "time": 11274.760009765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -2.0) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.246138133384655,
    "avg_bits_err_output": 0.03569812031259015,
    "avg_bits_err_improve": 53.210440013072066,
    "time": 16399.33447265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.657056111221792,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.657056111221792,
    "time": 2932.316162109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (* (/ 1.0 (+ 1.0 x)) (- 1.0 x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.01375,
    "avg_bits_err_improve": -0.0011249999999999993,
    "time": 7217.162109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1208.37548828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (+ (+ 3.0 (/ 2.0 (* r r))) (/ (fma v -0.25 0.375) (* (pow (* r w) -2.0) (+ v -1.0)))) -4.5)",
    "output_parens": 11,
    "avg_bits_err_input": 12.816982311973051,
    "avg_bits_err_output": 0.3169646591633526,
    "avg_bits_err_improve": 12.5000176528097,
    "time": 34558.959228515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (* x1 (* x1 3.0)) (fma 2.0 x2 x1)) (fma x1 x1 1.0)) (fma x1 (/ (+ (* (* x1 3.0) (* 2.0 x2)) (* (* x1 3.0) (- (* 3.0 (* x1 x1)) x1))) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ x1 (+ (* 2.0 (* (pow (/ (fma x1 x1 1.0) (* x1 (- (fma 2.0 x2 (* 3.0 (* x1 x1))) x1))) -1.0) (+ (/ (- (fma 2.0 x2 (* x1 (* x1 3.0))) x1) (fma x1 x1 1.0)) -3.0))) (* x1 (* x1 (fma (/ (fma 2.0 x2 (- (* 3.0 (* x1 x1)) x1)) (fma x1 x1 1.0)) 4.0 -6.0)))))))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.516347479053766,
    "avg_bits_err_output": 0.2874217144239101,
    "avg_bits_err_improve": 0.22892576462985587,
    "time": 91588.70361328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.34940208147552,
    "avg_bits_err_output": 1.339791663635708,
    "avg_bits_err_improve": 17.009610417839813,
    "time": 13281.367919921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (fma (* x x) -0.12900613773279798 0.954929658551372))",
    "output_parens": 3,
    "avg_bits_err_input": 0.25451515121455115,
    "avg_bits_err_output": 0.1870002035125821,
    "avg_bits_err_improve": 0.06751494770196906,
    "time": 20954.124267578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002875,
    "avg_bits_err_output": 0.002875,
    "avg_bits_err_improve": 0,
    "time": 19145.41357421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI 0.5) (+ b a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 14.666970671311079,
    "avg_bits_err_output": 0.24760413594209715,
    "avg_bits_err_improve": 14.419366535368981,
    "time": 48300.05810546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x))) (* (+ (/ 1.0 eps) -1.0) (exp (* x (- -1.0 eps))))) 2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 30.225742800812153,
    "avg_bits_err_output": 30.22552565310914,
    "avg_bits_err_improve": 0.00021714770301173303,
    "time": 41930.62451171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.01925,
    "avg_bits_err_output": 0.005,
    "avg_bits_err_improve": 0.014249999999999999,
    "time": 9710.83154296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))) (+ 2.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.025375,
    "avg_bits_err_output": 0.0095,
    "avg_bits_err_improve": 0.015875,
    "time": 20318.39306640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ (* (/ t (+ 1.0 t)) 4.0) (+ 1.0 (/ 1.0 t)))) (+ (/ (* (/ t (+ 1.0 t)) 4.0) (+ 1.0 (/ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.057125,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 0.04775,
    "time": 17712.172607421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3155.53173828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 4000.5927734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4205.07421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.816005798380656,
    "avg_bits_err_output": 0.251875,
    "avg_bits_err_improve": 7.564130798380656,
    "time": 21289.832763671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.538505130238594,
    "avg_bits_err_output": 7.538505130238594,
    "avg_bits_err_improve": 0,
    "time": 27730.934814453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (* eps 2.0) x) (* eps eps))",
    "output_parens": 4,
    "avg_bits_err_input": 15.801908414872768,
    "avg_bits_err_output": 0.013,
    "avg_bits_err_improve": 15.788908414872768,
    "time": 17862.701416015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5229290729726883,
    "avg_bits_err_output": 0.3917389109464247,
    "avg_bits_err_improve": 3.1311901620262637,
    "time": 27665.76123046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.824278310572428,
    "avg_bits_err_output": 0.017535526564393042,
    "avg_bits_err_improve": 14.806742784008035,
    "time": 8285.1513671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 46.07436253481996,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 46.07436253481996,
    "time": 4483.423095703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.92231583010681,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 38.92169083010681,
    "time": 4172.605712890625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.2985,
    "avg_bits_err_improve": 63.7015,
    "time": 56922.08837890625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* t (* t 1.6e-63))))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84325161638259,
    "avg_bits_err_output": 0.3171462406251803,
    "avg_bits_err_improve": 61.52610537575741,
    "time": 14732.27978515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -4.8e+43) (/ (/ (+ b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) a) -2.0) (if (<= c 2.35e-32) (/ (/ (+ b (hypot b (pow (* (* c a) (* (* c a) 16.0)) 0.25))) a) -2.0) (if (<= c 3.1e+93) (/ (/ (* (* c a) 4.0) (- (hypot b (sqrt (* (* c -4.0) a))) b)) (* a 2.0)) (/ (/ (+ b (hypot b (* (sqrt (* -4.0 a)) (sqrt c)))) a) -2.0))))",
    "output_parens": 41,
    "avg_bits_err_input": 34.4079375625893,
    "avg_bits_err_output": 24.67625281416227,
    "avg_bits_err_improve": 9.731684748427025,
    "time": 38589.902099609375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-193) (/ (- (hypot b (sqrt (fabs (* a (* c -4.0))))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (* (fma a (* c -4.0) (- (* b b) (* b b))) (/ (/ 0.5 a) (+ b (hypot b (sqrt (* a (* c -4.0))))))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 5e+277) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) INFINITY) (/ (- (hypot b (* a (* (sqrt (* c -4.0)) (pow a -0.5)))) b) (* a 2.0)) (/ (- (hypot b (* a (* (* c -4.0) (pow (* a (* c -4.0)) -0.5)))) b) (* a 2.0))))))",
    "output_parens": 88,
    "avg_bits_err_input": 34.15091079335884,
    "avg_bits_err_output": 20.54434588555541,
    "avg_bits_err_improve": 13.606564907803431,
    "time": 43882.714111328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1786.887939453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.913044624331306,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 39.902919624331304,
    "time": 5708.36572265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (/ (- x y) (hypot x y)) (/ (hypot x y) (+ x y)))",
    "output_parens": 7,
    "avg_bits_err_input": 19.96967203494729,
    "avg_bits_err_output": 0.029665414066556525,
    "avg_bits_err_improve": 19.940006620880734,
    "time": 33801.01220703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6203335493770865,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6203335493770865,
    "time": 14622.813232421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.036125,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.03525,
    "time": 3497.81494140625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ b a)) (* a (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02189624062518029,
    "avg_bits_err_output": 0.016125,
    "avg_bits_err_improve": 0.00577124062518029,
    "time": 7376.275146484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014375,
    "avg_bits_err_output": 0.015625,
    "avg_bits_err_improve": -0.0012499999999999994,
    "time": 8839.90185546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00025,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0,
    "time": 1743.3173828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40043665469173684,
    "avg_bits_err_output": 0.24125,
    "avg_bits_err_improve": 0.15918665469173685,
    "time": 20445.285888671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.191106099795643,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 30.184106099795642,
    "time": 12308.3046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (/ (- (* x x) eps) (sqrt (- (* x x) eps)))))",
    "output_parens": 8,
    "avg_bits_err_input": 24.514198845606824,
    "avg_bits_err_output": 0.04453308281331129,
    "avg_bits_err_improve": 24.46966576279351,
    "time": 17506.718505859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (/ (+ (- (* x x) (pow (sin x) 2.0)) (fma (- (pow (cbrt (sin x)) 2.0)) (cbrt (pow (sin x) 4.0)) (* (pow (cbrt (sin x)) 2.0) (cbrt (pow (sin x) 4.0))))) (+ x (sin x))) (tan x))",
    "output_parens": 25,
    "avg_bits_err_input": 30.620194048603626,
    "avg_bits_err_output": 30.534221455313155,
    "avg_bits_err_improve": 0.08597259329047091,
    "time": 46394.565185546875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.008985521314888553,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.007860521314888553,
    "time": 3055.525146484375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 4e-189) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 10000000000000.0) (* n (/ (+ -100.0 (* (pow (+ 1.0 (/ i n)) n) 100.0)) i)) (* 100.0 (/ (+ (pow (exp n) (log1p (/ i n))) -1.0) (/ i n)))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.51389797100418,
    "avg_bits_err_output": 11.138206549782833,
    "avg_bits_err_improve": 36.37569142122135,
    "time": 33160.360107421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= c -2.55e+89) (+ (fma (* a (/ 1.0 (hypot c d))) (/ c (hypot c d)) 0.0) (* d (* b (pow (hypot c d) -2.0)))) (if (<= c -1.2e-190) (+ (* (pow (hypot c d) -2.0) (* c a)) (fma (/ b (hypot c d)) (* d (/ 1.0 (hypot c d))) 0.0)) (if (<= c 2.9e-176) (/ (* (fma a c (* d b)) (/ 1.0 (hypot d c))) (hypot c d)) (if (<= c 1.1e+96) (+ (* (pow (hypot c d) -2.0) (* c a)) (fma (/ b (hypot c d)) (* d (/ 1.0 (hypot c d))) 0.0)) (+ (fma (* a (/ 1.0 (hypot c d))) (/ c (hypot c d)) 0.0) (* d (* b (pow (hypot c d) -2.0))))))))",
    "output_parens": 59,
    "avg_bits_err_input": 26.23347368555568,
    "avg_bits_err_output": 8.860616702607697,
    "avg_bits_err_improve": 17.372856982947983,
    "time": 31699.82421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(/ (- (* c (/ b (hypot c d))) (* d (/ a (hypot c d)))) (hypot c d))",
    "output_parens": 9,
    "avg_bits_err_input": 25.817283732166857,
    "avg_bits_err_output": 1.0722124062518033,
    "avg_bits_err_improve": 24.745071325915053,
    "time": 31057.198486328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.035,
    "avg_bits_err_output": 0.02181088186597836,
    "avg_bits_err_improve": 0.013189118134021644,
    "time": 16810.145751953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* uy (* 2.0 PI))) (sqrt (fma (pow (cbrt (* ux (- (fma ux maxCos 1.0) ux))) 2.0) (cbrt (* ux (fma ux maxCos (- 1.0 ux)))) (fma (fma ux maxCos 1.0) (- (fma ux maxCos (- 1.0 ux))) 1.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.477731247355846,
    "avg_bits_err_output": 11.238549676003256,
    "avg_bits_err_improve": 2.2391815713525904,
    "time": 52097.507568359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (- 1.0 (log (exp (* (pow (fma ux maxCos (- 1.0 ux)) 4.5) (* (pow (fma ux maxCos (- 1.0 ux)) 4.5) (pow (fma ux maxCos (- 1.0 ux)) 9.0)))))) (* (+ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (pow (fma ux maxCos (- 1.0 ux)) 4.0)) (+ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 12.0)) (pow (fma ux maxCos (- 1.0 ux)) 6.0))))))",
    "output_parens": 37,
    "avg_bits_err_input": 13.512545684136345,
    "avg_bits_err_output": 11.912650142575105,
    "avg_bits_err_improve": 1.5998955415612404,
    "time": 79999.81811523438,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (* (- 1.0 ux) maxCos) (* ux zi) (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* ux (* ux (* (* (- 1.0 ux) (- 1.0 ux)) (* maxCos maxCos))))))) xi (* (sqrt (- 1.0 (* ux (* ux (* (* (- 1.0 ux) (- 1.0 ux)) (* maxCos maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.335919802336988,
    "avg_bits_err_output": 0.3249985121187365,
    "avg_bits_err_improve": 0.0109212902182515,
    "time": 71766.43505859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.2037270697866437,
    "avg_bits_err_output": 0.20360206978664372,
    "avg_bits_err_improve": 0.00012499999999998623,
    "time": 26706.72998046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(/ (* (/ u1 (- 1.0 u1)) (sin (* 6.28318530718 u2))) (sqrt (/ u1 (- 1.0 u1))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5349836831455806,
    "avg_bits_err_output": 0.5850858129750308,
    "avg_bits_err_improve": -0.05010212982945017,
    "time": 24516.900390625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (/ u1 (- 1.0 (* u1 u1))) (* u1 (/ u1 (- 1.0 (* u1 u1)))))) (cos (* 6.28318530718 u2)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.3227656436061535,
    "avg_bits_err_output": 0.32722550945530005,
    "avg_bits_err_improve": -0.004459865849146538,
    "time": 28167.224853515625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (pow (sqrt (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))) -1.0)) 2.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.35156261527631183,
    "avg_bits_err_output": 0.3803963097291721,
    "avg_bits_err_improve": -0.02883369445286027,
    "time": 32118.186767578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06832913801329205,
    "avg_bits_err_output": 0.04972732115257504,
    "avg_bits_err_improve": 0.018601816860717005,
    "time": 15280.1240234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (/ 0.5 s) (+ (cosh (/ (fabs x) s)) 1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.16523170877488302,
    "avg_bits_err_output": 0.1790180243582202,
    "avg_bits_err_improve": -0.013786315583337178,
    "time": 32581.416015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.682310690196305,
    "avg_bits_err_output": 0.6773463464738506,
    "avg_bits_err_improve": 0.004964343722454356,
    "time": 33879.541015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.15861638220756208,
    "avg_bits_err_output": 0.15347524502718632,
    "avg_bits_err_improve": 0.00514113718037576,
    "time": 27451.365234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* eta eta) 4.999999675228202e-39) (asin (/ h (hypot eta (sqrt (/ sinTheta_O (/ (hypot 1.0 sinTheta_O) sinTheta_O)))))) (expm1 (log1p (asin (/ h (sqrt (- (* eta eta) (/ sinTheta_O (/ (sqrt (- 1.0 (* sinTheta_O sinTheta_O))) sinTheta_O)))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 2.5935418963603016,
    "avg_bits_err_output": 0.43677536406094175,
    "avg_bits_err_improve": 2.15676653229936,
    "time": 36424.28662109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_O (/ sinTheta_i v)))) (/ (* (/ cosTheta_i 2.0) (* (/ 1.0 v) (/ 1.0 v))) (sinh (/ 1.0 v))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4720714258862903,
    "avg_bits_err_output": 0.37214212139055336,
    "avg_bits_err_improve": 0.09992930449573695,
    "time": 46354.568115234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(pow (* (cbrt (exp (+ (- (fma cosTheta_i (/ cosTheta_O v) (log (/ 0.5 v))) (/ (fma sinTheta_i sinTheta_O 1.0) v)) 0.6931))) (cbrt (sqrt (exp (+ (- (fma cosTheta_i (/ cosTheta_O v) (log (/ 0.5 v))) (/ (fma sinTheta_i sinTheta_O 1.0) v)) 0.6931))))) 2.0)",
    "output_parens": 23,
    "avg_bits_err_input": 0.10872540520199615,
    "avg_bits_err_output": 0.10788990542845685,
    "avg_bits_err_improve": 0.0008354997735393055,
    "time": 36848.519287109375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (/ (/ (- (fma alpha alpha -1.0)) PI) (- (log alpha))) (fma (fma alpha alpha -1.0) (* 2.0 (* cosTheta cosTheta)) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4721451103973117,
    "avg_bits_err_output": 0.49259851447054653,
    "avg_bits_err_improve": -0.020453404073234815,
    "time": 50275.923828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (/ s 0.3333333333333333) (- (log1p (fma -1.3333333333333333 u 0.3333333333333333))))",
    "output_parens": 5,
    "avg_bits_err_input": 1.316074137437004,
    "avg_bits_err_output": 0.5712711114995055,
    "avg_bits_err_improve": 0.7448030259374985,
    "time": 27243.465576171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.215416280237807,
    "avg_bits_err_output": 0.19875,
    "avg_bits_err_improve": 12.016666280237807,
    "time": 26078.32763671875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (* 0.75 (exp (/ (- r) (* s 3.0)))) (* r (* PI (* s 6.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.14434114182003469,
    "avg_bits_err_output": 0.14620862790972458,
    "avg_bits_err_improve": -0.001867486089689896,
    "time": 71413.1083984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (* normAngle (- 1.0 u))) (sin normAngle)) n0_i) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8396854338492937,
    "avg_bits_err_output": 0.7105687724888358,
    "avg_bits_err_improve": 0.12911666136045796,
    "time": 40368.854736328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ 1.0 (/ (sqrt PI) (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) cosTheta))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6941100610671365,
    "avg_bits_err_output": 0.530282614167072,
    "avg_bits_err_improve": 0.16382744690006446,
    "time": 26895.848876953125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (pow (log1p (- u1)) 2.0) 0.25) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.628203123889442,
    "avg_bits_err_output": 0.5400528319882714,
    "avg_bits_err_improve": 13.08815029190117,
    "time": 21660.51416015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (+ (cos (* u2 (* PI 2.0))) (+ (fma (cbrt (pow (sin (* u2 PI)) 4.0)) (cbrt (pow (sin (* u2 PI)) 2.0)) (* 0.5 (+ (cos (* PI (* u2 2.0))) -1.0))) (fma -0.5 (- 1.0 (cos (* PI (* u2 2.0)))) (* 0.5 (- 1.0 (cos (* PI (* u2 2.0)))))))))",
    "output_parens": 34,
    "avg_bits_err_input": 13.681134453204013,
    "avg_bits_err_output": 0.31479010164495086,
    "avg_bits_err_improve": 13.366344351559063,
    "time": 32673.2255859375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* (- alpha) (log1p (- u0))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.204926261487806,
    "avg_bits_err_output": 0.3284530078147537,
    "avg_bits_err_improve": 13.876473253673053,
    "time": 21642.042236328125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (log1p (- u0)) (* alphax (/ (* (/ alphay sin2phi) (- alphay)) (fma (* alphay (/ alphay sin2phi)) (/ cos2phi alphax) alphax))))",
    "output_parens": 12,
    "avg_bits_err_input": 12.649040992138502,
    "avg_bits_err_output": 0.4460607197549262,
    "avg_bits_err_improve": 12.202980272383575,
    "time": 32062.833984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= F -1.7e-214) (- (* PI l) (pow (/ F (/ (tan (* PI l)) F)) -1.0)) (if (<= F 1.3e-155) (- (* PI l) (pow (/ (/ (tan (* PI l)) F) (/ (pow (cbrt (* (tan (* PI l)) (pow F -2.0))) 2.0) (/ 1.0 F))) 3.0)) (- (* (pow PI 2.0) (* l (/ 1.0 PI))) (/ (/ (tan (* PI l)) F) F))))",
    "output_parens": 35,
    "avg_bits_err_input": 17.075932214308526,
    "avg_bits_err_output": 9.360812040503136,
    "avg_bits_err_improve": 7.71512017380539,
    "time": 33647.998046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(/ (- 1.0 (* x (cos B))) (sin B))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21093872187554086,
    "avg_bits_err_output": 0.19020300781475352,
    "avg_bits_err_improve": 0.020735714060787336,
    "time": 22339.5419921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ (* F (pow (fma x 2.0 (fma F F 2.0)) -0.5)) (sin B)) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 14.431978838362001,
    "avg_bits_err_output": 10.920292529136555,
    "avg_bits_err_improve": 3.5116863092254462,
    "time": 37418.76904296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (/ (log (/ (cosh (* PI (* 0.25 f))) (sinh (* PI (* 0.25 f))))) PI) -4.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.47967505940285,
    "avg_bits_err_output": 1.8231420793343847,
    "avg_bits_err_improve": 59.65653298006847,
    "time": 42075.272705078125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ 1.0 (/ (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ 1.0 x) (+ x -1.0))))) (* t (sqrt 2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 42.7656167302722,
    "avg_bits_err_output": 20.536669861492825,
    "avg_bits_err_improve": 22.228946868779374,
    "time": 43634.41015625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.0281374659385,
    "avg_bits_err_output": 0.22020789531691698,
    "avg_bits_err_improve": 3.8079295706215834,
    "time": 21707.8349609375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (log (exp (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.9678373356809318,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 0.9603373356809318,
    "time": 13024.1171875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (/ (sqrt (- 1.0 (pow (/ Om Omc) 4.0))) (hypot 1.0 (/ Om Omc))) (hypot 1.0 (/ 2.0 (* (/ l t) (sqrt 2.0))))))",
    "output_parens": 14,
    "avg_bits_err_input": 10.220808766035601,
    "avg_bits_err_output": 1.1069822471453052,
    "avg_bits_err_improve": 9.113826518890296,
    "time": 26461.220458984375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -4.2e+72) (/ (sqrt (- n)) (sqrt (/ -0.5 (* U (fma (/ l Om) (fma n (* (/ l Om) (- U* U)) (* l -2.0)) t))))) (if (<= n -2.2e-276) (sqrt (+ (* (+ (* l -2.0) (* (/ l Om) (* n (- U* U)))) (/ 1.0 (/ (/ (/ Om l) n) (* U 2.0)))) (* t (* 2.0 (* n U))))) (if (<= n -1.4e-303) (/ (sqrt (- n)) (sqrt (/ -0.5 (* U (fma (/ l Om) (fma n (* (/ l Om) (- U* U)) (* l -2.0)) t))))) (if (<= n 2.2e-304) (sqrt (+ (* (+ (* l -2.0) (* (/ l Om) (* n (- U* U)))) (/ 1.0 (/ (/ (/ Om l) n) (* U 2.0)))) (* t (* 2.0 (* n U))))) (if (<= n 1.85e-210) (* (sqrt (* U (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t))) (sqrt (* n 2.0))) (if (<= n 2.05e+89) (sqrt (+ (* (+ (* l -2.0) (* (/ l Om) (* n (- U* U)))) (/ 1.0 (/ (/ (/ Om l) n) (* U 2.0)))) (* t (* 2.0 (* n U))))) (* (sqrt n) (sqrt (+ (* (* U 2.0) (* (/ l Om) (+ (* l -2.0) (* (- U* U) (/ l (/ Om n)))))) (* t (* U 2.0)))))))))))",
    "output_parens": 117,
    "avg_bits_err_input": 34.04677738193184,
    "avg_bits_err_output": 23.445281933838594,
    "avg_bits_err_improve": 10.601495448093246,
    "time": 49661.955078125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= k -1.22e-43) (/ (/ 1.0 (/ (* k 0.5) l)) (* t (* (* k (tan k)) (/ (sin k) l)))) (if (<= k 2.85e-102) (* (/ t t) (/ (* (/ l k) (/ (/ l (sin k)) (tan k))) (* (* k 0.5) t))) (/ (/ (/ l k) 0.5) (* t (* (* k (tan k)) (/ (sin k) l))))))",
    "output_parens": 34,
    "avg_bits_err_input": 47.5559019041451,
    "avg_bits_err_output": 1.2941021428679462,
    "avg_bits_err_improve": 46.26179976127715,
    "time": 105599.3544921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= k -5e-26) (/ 1.0 (/ t (/ (/ 2.0 (* (sin k) (tan k))) (fma 2.0 (pow (/ t l) 2.0) (pow (/ k l) 2.0))))) (if (<= k 6.2e-71) (/ (* (/ (/ l t) (sin k)) (/ (/ 2.0 t) (+ 2.0 (pow (/ k t) 2.0)))) (* (tan k) (/ t l))) (/ (/ 2.0 (* t (* (sin k) (tan k)))) (fma 2.0 (pow (/ t l) 2.0) (pow (/ k l) 2.0)))))",
    "output_parens": 40,
    "avg_bits_err_input": 31.979910067780295,
    "avg_bits_err_output": 4.358417522616885,
    "avg_bits_err_improve": 27.62149254516341,
    "time": 90620.09448242188,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (* (sqrt 0.5) (cos th)) (+ (* a2 a2) (* a1 a1)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5648131609608497,
    "avg_bits_err_output": 0.5072016937655058,
    "avg_bits_err_improve": 0.057611467195343824,
    "time": 31762.788330078125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow k -0.5) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5456900857066218,
    "avg_bits_err_output": 0.5015309479863673,
    "avg_bits_err_improve": 0.04415913772025448,
    "time": 24576.356689453125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (sinh l) (* (* 2.0 J) (cos (* 0.5 K)))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.53336760725125,
    "avg_bits_err_output": 0.1019293234384916,
    "avg_bits_err_improve": 17.43143828381276,
    "time": 19832.22998046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (fabs (cos (- (* (+ m n) (* K 0.5)) M))) (exp (+ (- (fabs (- m n)) l) (* (- (* (+ m n) 0.5) M) (+ M (* (+ m n) -0.5))))))",
    "output_parens": 19,
    "avg_bits_err_input": 15.488595464350512,
    "avg_bits_err_output": 15.504484863185441,
    "avg_bits_err_improve": -0.015889398834929125,
    "time": 30539.0107421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.323688721875545,
    "avg_bits_err_output": 8.16518872187554,
    "avg_bits_err_improve": 10.158500000000005,
    "time": 44628.925048828125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 2e+285) (* w0 (sqrt (- 1.0 (* (/ (* M D) d) (/ h (* 4.0 (* l (/ d (* M D))))))))) (* w0 (sqrt (- 1.0 (* (/ M (/ (/ l (/ (/ h 4.0) (/ d D))) M)) (/ D d))))))",
    "output_parens": 28,
    "avg_bits_err_input": 13.83694474873081,
    "avg_bits_err_output": 8.146057733389345,
    "avg_bits_err_improve": 5.690887015341465,
    "time": 44614.069091796875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (* c0 (/ (sqrt (/ (- A) l)) (sqrt (- V)))) (if (<= (* V l) -4e-290) (* c0 (/ (sqrt (- A)) (sqrt (* V (- l))))) (if (<= (* V l) 0.0) (* c0 (/ (sqrt (/ A V)) (sqrt l))) (* c0 (/ (sqrt A) (sqrt (* V l)))))))",
    "output_parens": 34,
    "avg_bits_err_input": 19.374822214766585,
    "avg_bits_err_output": 6.485779874748825,
    "avg_bits_err_improve": 12.88904234001776,
    "time": 27824.76123046875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= M -2.65e-61) (* c0 (* (/ 0.5 w) (* M (/ M (- (/ (/ (* (/ c0 D) (/ (* d d) w)) h) D) (hypot (* (/ d (/ w d)) (/ (/ c0 D) (* D h))) (pow (* M (- M)) 0.5))))))) (if (<= M -1.5e-295) (* (/ c0 (* w 2.0)) (/ (* M (- M)) (- (sqrt (- (pow (* (/ d w) (/ (* (/ c0 D) (/ d D)) h)) 2.0) (* M M))) (* (/ d w) (/ (* (/ c0 D) (/ d D)) h))))) (if (<= M 2.45e-223) (log (pow (exp (/ (* c0 0.5) w)) (/ (* M M) (- (* (/ (* d d) w) (/ c0 (* D (* D h)))) (sqrt (- (pow (* (/ (* d d) w) (/ c0 (* D (* D h)))) 2.0) (* M M))))))) (if (<= M 3.5e-100) (* c0 (* (/ 0.5 w) (* M (/ M (- (* d (/ (/ (* c0 (/ d (* D h))) D) w)) (sqrt (- (pow (* (* w D) (/ (* (/ D d) (/ h c0)) d)) -2.0) (* M M)))))))) (if (<= M 2.2e+48) (* (/ c0 (* w 2.0)) (/ (* M (- M)) (- (sqrt (- (pow (* (/ d w) (/ (* (/ c0 D) (/ d D)) h)) 2.0) (* M M))) (* (/ d w) (/ (* (/ c0 D) (/ d D)) h))))) (* c0 (* (/ 0.5 w) (* M (/ M (- (/ (/ (* (/ c0 D) (/ (* d d) w)) h) D) (hypot (* (/ d (/ w d)) (/ (/ c0 D) (* D h))) (pow (* M (- M)) 0.5))))))))))))",
    "output_parens": 146,
    "avg_bits_err_input": 59.372895800855844,
    "avg_bits_err_output": 35.95804937363492,
    "avg_bits_err_improve": 23.414846427220922,
    "time": 92411.2431640625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d -4.6e-147) (* (* (/ (sqrt (- d)) (sqrt (- h))) (sqrt (/ d l))) (- 1.0 (* (/ (* M 0.125) (/ d D)) (/ h (* l (/ d (* M D))))))) (if (<= d -7.1e-298) (* (sqrt (/ d h)) (* (/ (sqrt (- d)) (sqrt (- l))) (- 1.0 (* 0.5 (/ (* (* M D) (* h (/ D (* d (/ 2.0 M))))) (* l (* d 2.0))))))) (if (<= d 6.7e+97) (* (- 1.0 (* (/ (* M 0.125) (/ d D)) (/ h (* l (/ d (* M D)))))) (* (sqrt (/ d h)) (/ (sqrt d) (sqrt l)))) (* (* (sqrt (/ d l)) (/ (sqrt d) (sqrt h))) (- 1.0 (fma (* (* M (* 0.5 (/ D d))) (* 0.5 (/ h l))) (* M (* 0.5 (/ D d))) 0.0))))))",
    "output_parens": 78,
    "avg_bits_err_input": 26.50709304258459,
    "avg_bits_err_output": 16.548850708027867,
    "avg_bits_err_improve": 9.958242334556722,
    "time": 86767.0419921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (+ 0.25 (/ -0.25 (fma x x 1.0))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 13,
    "avg_bits_err_input": 15.410765365702012,
    "avg_bits_err_output": 14.896623244031742,
    "avg_bits_err_improve": 0.51414212167027,
    "time": 61387.336669921875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9845050362151283,
    "avg_bits_err_output": 0.009698120312590146,
    "avg_bits_err_improve": 0.9748069159025382,
    "time": 5998.2802734375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (fma v (* v -5.0) 1.0) (* (sqrt (fma v (* v -6.0) 2.0)) PI)) t) (- 1.0 (* v v)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4633783556607222,
    "avg_bits_err_output": 0.11320336004030046,
    "avg_bits_err_improve": 0.35017499562042176,
    "time": 18362.970947265625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (- 1.0 (* v v)) (sqrt (+ 2.0 (* (* v v) -6.0)))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.011417481250360578,
    "avg_bits_err_output": 0.006896240625180288,
    "avg_bits_err_improve": 0.00452124062518029,
    "time": 13635.853759765625,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(- (* PI 0.5) (asin (* (+ -1.0 (* (* v v) 5.0)) (/ -1.0 (fma v v -1.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5266227886698662,
    "avg_bits_err_output": 0.5434373505811562,
    "avg_bits_err_improve": -0.016814561911289938,
    "time": 32892.646240234375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (- (/ -1.0 a) (* k (/ (+ k 10.0) a))))",
    "output_parens": 8,
    "avg_bits_err_input": 1.8686203510089219,
    "avg_bits_err_output": 0.23581839296791346,
    "avg_bits_err_improve": 1.6328019580410085,
    "time": 26427.892578125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (* (exp (- (log1p (exp (/ (+ Vef (+ Ev (- EAccept mu))) KbT))))) NaChar))",
    "output_parens": 17,
    "avg_bits_err_input": 0.01684419868296054,
    "avg_bits_err_output": 0.016608880880654063,
    "avg_bits_err_improve": 0.00023531780230647698,
    "time": 17097.88232421875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18172445195251588,
    "avg_bits_err_output": 0.013384805462213436,
    "avg_bits_err_improve": 0.16833964649030245,
    "time": 16686.67529296875,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1894806141215219,
    "avg_bits_err_output": 0.026565607080129627,
    "avg_bits_err_improve": 0.16291500704139228,
    "time": 12000.88720703125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.19098629414064683,
    "avg_bits_err_output": 0.024929526951073675,
    "avg_bits_err_improve": 0.16605676718957316,
    "time": 30769.523193359375,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (/ (- (fma (/ x (hypot x (* p 2.0))) (+ (/ x (hypot x (* p 2.0))) -1.0) 1.0) (* (fma (/ x (hypot x (* p 2.0))) (+ (/ x (hypot x (* p 2.0))) -1.0) 1.0) (pow (/ x (- (hypot x (* p 2.0)))) 3.0))) (* (fma (/ x (hypot x (* p 2.0))) (+ (/ x (hypot x (* p 2.0))) -1.0) 1.0) (fma (/ x (hypot x (* p 2.0))) (+ (/ x (hypot x (* p 2.0))) -1.0) 1.0)))))",
    "output_parens": 43,
    "avg_bits_err_input": 13.1530980595127,
    "avg_bits_err_output": 13.147832098405807,
    "avg_bits_err_improve": 0.005265961106893258,
    "time": 23843.43408203125,
    "seed": 15,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.69647215902946,
    "avg_bits_err_output": 0.0225,
    "avg_bits_err_improve": 40.67397215902946,
    "time": 4708.78369140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -1.26e-15) (/ (- (sin x) x) (fma (pow (cbrt (tan x)) 2.0) (cbrt (tan x)) (- x))) (if (<= x 2.45e-8) (/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (/ (- x (* (cbrt (/ x (/ (tan x) x))) (pow (cbrt (/ x (/ (tan x) x))) 2.0))) (/ x (tan x)))) (/ (- (/ 1.0 x) (/ 1.0 (sin x))) (/ (/ (- (tan x) x) x) (sin x)))))",
    "output_parens": 46,
    "avg_bits_err_input": 31.956759432176327,
    "avg_bits_err_output": 26.998089597008846,
    "avg_bits_err_improve": 4.9586698351674805,
    "time": 36216.034912109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -2.65e-238) (/ (- (- (/ b_2 (/ (sqrt (- (* b_2 b_2) (* c a))) b_2)) (/ c (/ (sqrt (- (* b_2 b_2) (* c a))) a))) b_2) a) (/ (/ (* a (- c)) a) (+ b_2 (sqrt (- (* b_2 b_2) (* c a))))))",
    "output_parens": 26,
    "avg_bits_err_input": 34.406898499133696,
    "avg_bits_err_output": 20.667280433562635,
    "avg_bits_err_improve": 13.739618065571062,
    "time": 33725.768798828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -4e+162) (/ (- c) (- b_2 (hypot b_2 (pow (pow (* c a) 2.0) 0.25)))) (if (<= b_2 9e-276) (/ (- c) (- b_2 (sqrt (- (* b_2 b_2) (* c a))))) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a)))",
    "output_parens": 25,
    "avg_bits_err_input": 34.130214017463175,
    "avg_bits_err_output": 16.194805742078838,
    "avg_bits_err_improve": 17.935408275384336,
    "time": 26278.658935546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (* (tan (* x 0.5)) (/ (sin x) x)) x)",
    "output_parens": 6,
    "avg_bits_err_input": 31.26032868957306,
    "avg_bits_err_output": 0.1292103390679989,
    "avg_bits_err_improve": 31.131118350505062,
    "time": 23242.012939453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.901508937959015,
    "avg_bits_err_output": 32.638525399787994,
    "avg_bits_err_improve": 0.2629835381710208,
    "time": 40931.093017578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.93056365801526,
    "avg_bits_err_output": 0.015875,
    "avg_bits_err_improve": 29.91468865801526,
    "time": 14147.022216796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (pow (+ 1.0 x) -2.0) (/ (fma x -1.0 -1.0) x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.68472582155708,
    "avg_bits_err_output": 0.021823120312590146,
    "avg_bits_err_improve": 14.66290270124449,
    "time": 12621.113037109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -3.6e-47) (- (* (cos x) (+ -1.0 (cos eps))) (* (sin eps) (sin x))) (if (<= x 2.9e-46) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (fma (+ -1.0 (cos eps)) (cos x) (* (sin x) (- (sin eps))))))",
    "output_parens": 28,
    "avg_bits_err_input": 39.05257047549476,
    "avg_bits_err_output": 0.790982041340194,
    "avg_bits_err_improve": 38.26158843415457,
    "time": 33069.37158203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (fma (cbrt x) (+ (cbrt (+ 1.0 x)) (/ x (pow (cbrt x) 2.0))) (/ (+ 1.0 x) (cbrt (+ 1.0 x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 30.197480960898407,
    "avg_bits_err_output": 0.21640317561994457,
    "avg_bits_err_improve": 29.981077785278462,
    "time": 23782.64892578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.07695533708086,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 30.07683033708086,
    "time": 10917.38720703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (- (hypot b (/ (* a (* c -4.0)) (pow (pow (* a (* c -4.0)) 2.0) 0.25))) b) (* a 2.0)) (if (<= b 3.2e-258) (/ (- (/ 1.0 (pow (+ (* b b) (* -4.0 (* a c))) -0.5)) b) (* a 2.0)) (if (<= b 3.35e-192) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (/ 1.0 (/ (+ b (hypot b (sqrt (* a (* c -4.0))))) (* 0.5 (/ (* a (* c -4.0)) a)))))))",
    "output_parens": 45,
    "avg_bits_err_input": 34.3501025909059,
    "avg_bits_err_output": 21.343913969407197,
    "avg_bits_err_improve": 13.006188621498701,
    "time": 38354.27197265625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -3.9e+129) (* (/ -0.5 a) (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b))) (if (<= c -1.8e-42) (+ (* (/ -0.5 a) (sqrt (fma b b (* c (* a -4.0))))) (* -0.5 (/ b a))) (if (<= c -3e-201) (* (/ -0.5 a) (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b))) (if (<= c 6.5e+131) (* (/ -0.5 a) (+ b (hypot (pow (pow (* a (* c -4.0)) 2.0) 0.25) b))) (* (/ -0.5 a) (+ b (hypot (* (sqrt (* a -4.0)) (sqrt c)) b)))))))",
    "output_parens": 49,
    "avg_bits_err_input": 33.77893227627691,
    "avg_bits_err_output": 26.17617543387656,
    "avg_bits_err_improve": 7.602756842400353,
    "time": 36348.896728515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.27502969496562,
    "avg_bits_err_output": 0.02135620312590145,
    "avg_bits_err_improve": 61.25367349183971,
    "time": 10334.5439453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (- (log1p n) (log n)) (/ (+ (* (/ (pow (log1p n) 34.0) (exp (* (* (* (log (log1p n)) 28.333333333333332) 3.0) 0.3333333333333333))) (cbrt (log1p n))) -1.0) (* (+ (pow (log1p n) 2.0) (+ (log1p n) 1.0)) (+ 1.0 (pow (log1p n) 3.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 63.00398418059162,
    "avg_bits_err_output": 44.21997700438509,
    "avg_bits_err_improve": 18.78400717620653,
    "time": 44072.86328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.60424749611224,
    "avg_bits_err_output": 0.008,
    "avg_bits_err_improve": 58.596247496112234,
    "time": 11481.141357421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(if (<= x -1.7e-151) (* x (+ (fma 1.0 (pow x -2.0) (/ (/ -1.0 x) (tan x))) 2.0)) (if (<= x 1.3e-153) (/ (- 1.0 (/ x (tan x))) x) (if (<= x 3.8e-13) (* x (+ (fma 1.0 (pow x -2.0) (/ (/ -1.0 x) (tan x))) 2.0)) (+ (fma (/ (* x (tan x)) (tan x)) (/ 1.0 (* x x)) (* (/ (* x (tan x)) (* x x)) (/ (- x) (pow (tan x) 2.0)))) (fma (/ (* x (- (tan x))) (* x x)) (/ x (pow (tan x) 2.0)) (* (/ (* x (tan x)) (* x x)) (/ x (pow (tan x) 2.0))))))))",
    "output_parens": 58,
    "avg_bits_err_input": 59.92112891366323,
    "avg_bits_err_output": 57.40173158246991,
    "avg_bits_err_improve": 2.519397331193325,
    "time": 50969.053466796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (/ (expm1 (* eps (+ a b))) (/ (expm1 (* eps a)) eps)) (expm1 (* eps b)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.140743792295865,
    "avg_bits_err_output": 28.710467560034967,
    "avg_bits_err_improve": 31.430276232260898,
    "time": 36898.161865234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.01706065155699,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 41.00743565155699,
    "time": 5404.506591796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.7997733144941,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.7991483144941,
    "time": 3335.39404296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.25061422360539,
    "avg_bits_err_output": 0.021366638851527356,
    "avg_bits_err_improve": 29.22924758475386,
    "time": 19222.9091796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(fma (/ (* (- 4.0 (pow (exp x) -2.0)) (+ -2.0 (exp (- x)))) (- -2.0 (exp (- x)))) (/ -1.0 (fma 2.0 (sinh x) 2.0)) (/ (pow (exp x) 2.0) (fma 2.0 (sinh x) 2.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 29.786134354770688,
    "avg_bits_err_output": 29.601534455642252,
    "avg_bits_err_improve": 0.1845998991284361,
    "time": 38574.2333984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(+ (+ (/ 1.0 (+ 1.0 x)) (/ -2.0 x)) (/ 1.0 (+ x -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.997585651399895,
    "avg_bits_err_output": 9.997585651399895,
    "avg_bits_err_improve": 0,
    "time": 45732.552978515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (<= eps -4.9e-17) (fma (/ 1.0 (fma (tan eps) (- (tan x)) 1.0)) (fma (sin x) (/ 1.0 (cos x)) (tan eps)) (- (tan x))) (if (<= eps 5.5e-17) (/ (+ (* (cos x) (- (/ (sin (+ eps x)) (sin x)) (cos eps))) (* (sin x) (sin eps))) (/ (cos (+ eps x)) (tan x))) (fma (/ -1.0 (fma (tan x) (tan eps) -1.0)) (+ (tan eps) (tan x)) (- (tan x)))))",
    "output_parens": 44,
    "avg_bits_err_input": 36.81786670156528,
    "avg_bits_err_output": 19.5529416373397,
    "avg_bits_err_improve": 17.26492506422558,
    "time": 42652.73876953125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(pow (pow (+ (sqrt x) (sqrt (+ 1.0 x))) 2.0) -0.5)",
    "output_parens": 6,
    "avg_bits_err_input": 30.252629808651058,
    "avg_bits_err_output": 0.2314691184193967,
    "avg_bits_err_improve": 30.02116069023166,
    "time": 25422.36083984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(+ (* (* (pow (sin eps) 2.0) (/ 1.0 (- -1.0 (cos eps)))) (sin x)) (* (sin eps) (cos x)))",
    "output_parens": 12,
    "avg_bits_err_input": 36.32264449718903,
    "avg_bits_err_output": 0.35553835970072273,
    "avg_bits_err_improve": 35.96710613748831,
    "time": 32962.7119140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(* (pow x -0.5) (/ (pow (+ x 1.0) -0.5) (+ (sqrt x) (sqrt (+ x 1.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.81417387830634,
    "avg_bits_err_output": 0.21908853595363523,
    "avg_bits_err_improve": 19.595085342352707,
    "time": 24518.287841796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(pow (pow (atan2 1.0 (+ 1.0 (fma N N N))) -0.5) -2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 15.39863673234765,
    "avg_bits_err_output": 0.41439013182990425,
    "avg_bits_err_improve": 14.984246600517746,
    "time": 10231.447998046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.97896328006593,
    "avg_bits_err_output": 1.323217114623692,
    "avg_bits_err_improve": 28.65574616544224,
    "time": 28385.2041015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (/ m (/ v (- 1.0 m))) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07897149133190084,
    "avg_bits_err_output": 0.07793145383262201,
    "avg_bits_err_improve": 0.0010400374992788342,
    "time": 31279.48681640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (* b (- a)))",
    "output_parens": 4,
    "avg_bits_err_input": 15.903204116975754,
    "avg_bits_err_output": 0.3044578953169171,
    "avg_bits_err_improve": 15.598746221658837,
    "time": 19068.7626953125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ 1.0 (/ 1.0 (* PI (* angle 0.005555555555555556)))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.387206927066792,
    "avg_bits_err_output": 20.39054965560152,
    "avg_bits_err_improve": -0.003342728534729389,
    "time": 43225.87451171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* PI (* angle 0.011111111111111112))) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 30.9352262690336,
    "avg_bits_err_output": 20.683646550232172,
    "avg_bits_err_improve": 10.251579718801427,
    "time": 44548.7138671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (/ (pow (* (/ 1.0 (cbrt (pow (cbrt (* PI (* angle 0.005555555555555556))) -2.0))) (/ 1.0 (cbrt (cbrt (/ 180.0 (* angle PI)))))) 2.0) (/ 1.0 (cbrt (* PI (* angle 0.005555555555555556))))))) 2.0))",
    "output_parens": 27,
    "avg_bits_err_input": 20.48632514778673,
    "avg_bits_err_output": 20.5399302239687,
    "avg_bits_err_improve": -0.05360507618197019,
    "time": 54421.6123046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (/ (- m (* m m)) v) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.18276502308887604,
    "avg_bits_err_output": 0.18580732814295475,
    "avg_bits_err_improve": -0.003042305054078709,
    "time": 15015.11962890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3224571174867323,
    "avg_bits_err_output": 0.3128059392174768,
    "avg_bits_err_improve": 0.00965117826925549,
    "time": 39165.802734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (- (sin v)) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13652124062518028,
    "avg_bits_err_output": 0.1335212406251803,
    "avg_bits_err_improve": 0.002999999999999975,
    "time": 27262.346435546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (fma (cos lambda2) (cos lambda1) (* (sin lambda1) (sin lambda2)))))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 16.75292398859684,
    "avg_bits_err_output": 3.7104055523106876,
    "avg_bits_err_improve": 13.042518436286153,
    "time": 38266.197998046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* -0.5 (/ (fma 0.0 (* b b) (* c (* a 4.0))) a)) (+ b (sqrt (fma (* c a) -4.0 (* b b)))))",
    "output_parens": 12,
    "avg_bits_err_input": 52.74444090573376,
    "avg_bits_err_output": 0.165981579693179,
    "avg_bits_err_improve": 52.57845932604058,
    "time": 59800.994384765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ (- c) 0.5) (+ b (sqrt (fma b b (* a (* c -4.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 28.281940080108033,
    "avg_bits_err_output": 0.2776699250014423,
    "avg_bits_err_improve": 28.00427015510659,
    "time": 40227.18115234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-21) (/ (/ (- (pow (fma b b (* -4.0 (* a c))) 3.0) (pow b 6.0)) (* (+ b (sqrt (fma b b (* -4.0 (* a c))))) (+ (+ (pow (fma b b (* -4.0 (* a c))) 2.0) (pow b 4.0)) (* (* b b) (fma b b (* -4.0 (* a c))))))) (* a 2.0)) (/ (+ (- b) (pow (pow (fma b b (* c (* a -4.0))) 1.5) 0.3333333333333333)) (* a 2.0)))",
    "output_parens": 46,
    "avg_bits_err_input": 44.09986219561546,
    "avg_bits_err_output": 41.28561059108383,
    "avg_bits_err_improve": 2.814251604531627,
    "time": 62755.64208984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -3e+146) (/ (- (hypot b (/ c (/ (pow (pow (* c (* -4.0 a)) 2.0) 0.25) (* -4.0 a)))) b) (* a 2.0)) (if (<= b -6.2e-90) (/ (- (sqrt (+ (* b b) (* c (* -4.0 a)))) b) (* a 2.0)) (if (<= b -6.2e-274) (/ (- (hypot b (/ c (sqrt (/ c (* -4.0 a))))) b) (* a 2.0)) (if (<= b 4.4e-9) (/ (/ c -0.5) (+ b (hypot b (sqrt (* -4.0 (* c a)))))) (if (<= b 2.5e+162) (/ (/ (* -4.0 (* c a)) (+ b (sqrt (fma (* c a) -4.0 (* b b))))) (* a 2.0)) (if (<= b 2.9e+268) (/ (/ c -0.5) (+ b (hypot b (sqrt (* -4.0 (* c a)))))) (log (pow (exp (/ 0.5 a)) (- (hypot b (sqrt (* a (* c -4.0)))) b)))))))))",
    "output_parens": 72,
    "avg_bits_err_input": 34.37159669082678,
    "avg_bits_err_output": 16.299832518303376,
    "avg_bits_err_improve": 18.0717641725234,
    "time": 45328.775634765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.9558991854781022,
    "avg_bits_err_output": 0.22914635746354114,
    "avg_bits_err_improve": 0.726752828014561,
    "time": 36748.53125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (/ (- (pow (* (pow (+ 1.0 (pow (exp -2.0) x)) 2.0) (+ 0.25 (* 0.25 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))))) -6.0) (pow (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))) -6.0)) (* (pow (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))) -3.0) (+ 1.0 (* 64.0 (pow (+ 1.0 (pow (exp -2.0) x)) -6.0))))) (fma (/ 4.0 (/ (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))) (pow (+ 1.0 (pow (exp -2.0) x)) -2.0))) (/ 4.0 (/ (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))) (pow (+ 1.0 (pow (exp -2.0) x)) -2.0))) (* (/ 1.0 (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))) (+ (/ 4.0 (/ (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))) (pow (+ 1.0 (pow (exp -2.0) x)) -2.0))) (/ 1.0 (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))))))))",
    "output_parens": 82,
    "avg_bits_err_input": 30.090555670984433,
    "avg_bits_err_output": 30.085572457708018,
    "avg_bits_err_improve": 0.004983213276414489,
    "time": 43142.3359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.27648372474449,
    "avg_bits_err_output": 0.013125,
    "avg_bits_err_improve": 58.263358724744485,
    "time": 8965.944091796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.126209404233144,
    "avg_bits_err_output": 0.006875,
    "avg_bits_err_improve": 58.11933440423314,
    "time": 16670.368408203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(cbrt (pow (cosh x) -3.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.015559970711631062,
    "avg_bits_err_output": 0.04764647702609756,
    "avg_bits_err_improve": -0.032086506314466495,
    "time": 3903.772216796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (/ (sqrt (+ x -1.0)) (pow (+ x 1.0) -0.5))))",
    "output_parens": 7,
    "avg_bits_err_input": 32.17,
    "avg_bits_err_output": 0.07425,
    "avg_bits_err_improve": 32.09575,
    "time": 12159.927734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.59154683982613,
    "avg_bits_err_output": 0.008,
    "avg_bits_err_improve": 58.58354683982613,
    "time": 10217.591552734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.027521240625180292,
    "avg_bits_err_output": 0.027521240625180292,
    "avg_bits_err_improve": 0,
    "time": 6435.223388671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cbrt (pow (hypot 1.0 (/ (/ eh ew) (tan t))) -3.0))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.12882312031259016,
    "avg_bits_err_output": 0.13227368437626202,
    "avg_bits_err_improve": -0.0034505640636718626,
    "time": 53132.47607421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (/ 1.0 (hypot 1.0 (/ (tan t) (/ ew eh))))) (* (* eh (sin t)) (sin (atan (/ (* (tan t) (- eh)) ew))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.1260212406251803,
    "avg_bits_err_output": 0.12771936093777045,
    "avg_bits_err_improve": -0.0016981203125901456,
    "time": 42044.312744140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))) (* (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))) (- lambda2 lambda1))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 38.80015680612026,
    "avg_bits_err_output": 0.1250544732452173,
    "avg_bits_err_improve": 38.67510233287505,
    "time": 34927.506591796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (/ (- b) (* a (/ a b))))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.633290516393384,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 14.632540516393384,
    "time": 11488.791259765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (cos delta) (+ (* (cos delta) (pow (sin phi1) 2.0)) (* (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1623259767667463,
    "avg_bits_err_output": 0.16061853472184373,
    "avg_bits_err_improve": 0.0017074420449025574,
    "time": 56810.195556640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (pow (fma a (* c -3.0) (* b b)) 0.5))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 52.72143720535621,
    "avg_bits_err_output": 0.3829133468827528,
    "avg_bits_err_improve": 52.33852385847346,
    "time": 42932.215576171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (- a) (/ a c)) (+ b (sqrt (fma a (* c -3.0) (* b b)))))",
    "output_parens": 9,
    "avg_bits_err_input": 28.434287850800708,
    "avg_bits_err_output": 0.33111879844858794,
    "avg_bits_err_improve": 28.10316905235212,
    "time": 36803.168701171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a -3.0) c))) b) (* a 3.0)) -5e-22) (* (/ -0.3333333333333333 a) (/ (+ (pow b 4.0) (- (* (fma b b (* a (* -3.0 c))) (* a (* c 3.0))) (* (* b b) (fma b b (* a (* -3.0 c)))))) (* (+ b (sqrt (fma (* a -3.0) c (* b b)))) (fma b b (fma (* a -3.0) c (* b b)))))) (/ (+ (- b) (sqrt (pow (pow (fma b b (* -3.0 (* a c))) 3.0) 0.3333333333333333))) (* a 3.0)))",
    "output_parens": 47,
    "avg_bits_err_input": 44.163788074526806,
    "avg_bits_err_output": 41.319053149163324,
    "avg_bits_err_improve": 2.8447349253634826,
    "time": 75990.16040039062,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -1.5e+186) (expm1 (log1p (* (- b (hypot b (/ (* a -3.0) (/ (pow (pow (* a (* -3.0 c)) 2.0) 0.25) c)))) (/ -0.3333333333333333 a)))) (if (<= b 9.6e-262) (/ (fma b (+ -1.0 (/ b (sqrt (fma (* -3.0 c) a (* b b))))) (* -3.0 (* c (* a (pow (fma -3.0 (* a c) (* b b)) -0.5))))) (* a 3.0)) (if (<= b 3.35e-192) (expm1 (log1p (* (/ -0.3333333333333333 a) (- b (hypot b (* (sqrt (* -3.0 c)) (sqrt a))))))) (if (<= b 3.3e-134) (/ (+ (fma b (/ b (sqrt (fma -3.0 (* a c) (* b b)))) b) (* (* -3.0 c) (/ a (sqrt (fma -3.0 (* a c) (* b b)))))) (* a 3.0)) (/ (* (/ -0.3333333333333333 (+ b (hypot b (sqrt (* a (* -3.0 c)))))) (* (* a c) 3.0)) a)))))",
    "output_parens": 73,
    "avg_bits_err_input": 34.420186962105916,
    "avg_bits_err_output": 24.412530949851448,
    "avg_bits_err_improve": 10.007656012254468,
    "time": 57749.773193359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (fma (cos lambda1) (cos lambda2) (* (sin lambda1) (sin lambda2))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.414988571793534,
    "avg_bits_err_output": 0.17731738849262643,
    "avg_bits_err_improve": 13.237671183300908,
    "time": 50471.18701171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(+ (/ -1.0 (+ -1.0 x)) (/ (* x (- (+ -1.0 x) (+ x 1.0))) (* (+ -1.0 x) (+ x 1.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 29.565583672812078,
    "avg_bits_err_output": 25.218785937582233,
    "avg_bits_err_improve": 4.3467977352298455,
    "time": 38129.159423828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ (+ x -1.0) (/ (+ x 1.0) x)) (/ (+ (- -1.0 x) (/ (+ x 1.0) x)) -1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012125,
    "avg_bits_err_output": 0.009665241011860922,
    "avg_bits_err_improve": 0.0024597589881390786,
    "time": 17961.577880859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.508512973173719,
    "avg_bits_err_output": 0.07682312031259013,
    "avg_bits_err_improve": 14.43168985286113,
    "time": 38843.22119140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (* F (+ C (- A (hypot B (- A C)))))) (- (sqrt (* 2.0 (fma C (* A -4.0) (* B B)))))) (+ (* B B) (* -4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (/ (/ (- (hypot B (- A C)) (+ A C)) (/ (sqrt (* (- (+ A C) (hypot B (- A C))) (* 2.0 (* F (fma B B (* A (* C -4.0))))))) (* 2.0 (* F (fma B B (* A (* C -4.0))))))) (+ (* B B) (* -4.0 (* A C)))) (/ 1.0 (/ (hypot B (sqrt (* C (* A -4.0)))) (- (sqrt (* F (* 2.0 (+ A (- C (hypot B (- A C))))))))))))",
    "output_parens": 105,
    "avg_bits_err_input": 52.25923150834944,
    "avg_bits_err_output": 39.7538033938378,
    "avg_bits_err_improve": 12.505428114511638,
    "time": 56955.196044921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(/ (atan (/ (- (- C A) (hypot B (- A C))) B)) (/ PI 180.0))",
    "output_parens": 8,
    "avg_bits_err_input": 28.93617685401632,
    "avg_bits_err_output": 13.789936522912951,
    "avg_bits_err_improve": 15.14624033110337,
    "time": 34682.185546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -2e-310) (sqrt (/ (* (* F (+ (hypot B (- A C)) (+ C A))) 2.0) (fma C (* A -4.0) (* B B)))) (* (sqrt (* 2.0 (+ C (+ A (hypot B (- A C)))))) (/ (- (sqrt F)) (hypot B (pow (pow (* C (* A -4.0)) 2.0) 0.25)))))",
    "output_parens": 28,
    "avg_bits_err_input": 52.02030090309533,
    "avg_bits_err_output": 34.15748008835371,
    "avg_bits_err_improve": 17.862820814741625,
    "time": 76615.22607421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt (* g 0.5)) (cbrt a))",
    "output_parens": 4,
    "avg_bits_err_input": 15.826817317709503,
    "avg_bits_err_output": 0.8144973841402589,
    "avg_bits_err_improve": 15.012319933569245,
    "time": 20893.203857421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (* (cbrt (/ 0.5 a)) (cbrt (- (hypot g h) g))) (/ (cbrt (* (+ g (hypot g h)) -0.5)) (cbrt a)))",
    "output_parens": 13,
    "avg_bits_err_input": 36.579882857277,
    "avg_bits_err_output": 2.7637849683020512,
    "avg_bits_err_improve": 33.81609788897495,
    "time": 35392.25244140625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (- (* (cos (* PI 0.6666666666666666)) (cos (* (acos (/ g (- h))) 0.3333333333333333))) (* (sin (* (acos (/ g (- h))) 0.3333333333333333)) (sin (expm1 (log1p (* PI 0.6666666666666666)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.9890996250072126,
    "avg_bits_err_output": 0.027667481250360577,
    "avg_bits_err_improve": 0.961432143756852,
    "time": 29085.570068359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- a (fabs (log (+ (exp a) (exp b))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5879777323043995,
    "avg_bits_err_output": 0.5607339395468723,
    "avg_bits_err_improve": 0.027243792757527197,
    "time": 8887.370849609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (* a1 (/ a2 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-302) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e-308) (* a2 (/ (/ a1 b1) b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 4e+289) (/ (* a1 a2) (* b1 b2)) (/ a2 (* b1 (/ b2 a1)))))))",
    "output_parens": 36,
    "avg_bits_err_input": 10.981464548096051,
    "avg_bits_err_output": 3.2761013330893896,
    "avg_bits_err_improve": 7.7053632150066615,
    "time": 12867.155517578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4043473413791487,
    "avg_bits_err_output": 0.365875,
    "avg_bits_err_improve": 0.03847234137914868,
    "time": 8878.94873046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -1.65) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.552911619301796,
    "avg_bits_err_output": 0.027,
    "avg_bits_err_improve": 53.525911619301795,
    "time": 16893.3349609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.661859374034152,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.661859374034152,
    "time": 2183.4306640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (sqrt (- 1.0 (* x x))) (+ 1.0 x))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.01375,
    "avg_bits_err_output": 0.010875,
    "avg_bits_err_improve": 0.002875000000000001,
    "time": 9773.522216796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1255.719970703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (* (* r w) (* r w)) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 12.788903629004727,
    "avg_bits_err_output": 0.22393007657304645,
    "avg_bits_err_improve": 12.564973552431681,
    "time": 37502.70458984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (fma (/ 4.0 (fma x1 x1 1.0)) (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 37,
    "avg_bits_err_input": 0.505693749776676,
    "avg_bits_err_output": 0.32205721326560416,
    "avg_bits_err_improve": 0.18363653651107187,
    "time": 95188.36547851562,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (or (<= (/ (* t1 (- v)) (* (+ t1 u) (+ t1 u))) 0.0) (not (<= (/ (* t1 (- v)) (* (+ t1 u) (+ t1 u))) 2e+249))) (* (/ (- t1) (+ t1 u)) (/ v (+ t1 u))) (/ (* t1 (- v)) (* (+ t1 u) (+ t1 u))))",
    "output_parens": 29,
    "avg_bits_err_input": 18.173742226920712,
    "avg_bits_err_output": 1.1495708359096988,
    "avg_bits_err_improve": 17.024171391011013,
    "time": 8648.471435546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma 0.954929658551372 x (* (pow x 3.0) -0.12900613773279798))",
    "output_parens": 3,
    "avg_bits_err_input": 0.262886842188131,
    "avg_bits_err_output": 0.23494812031259013,
    "avg_bits_err_improve": 0.02793872187554089,
    "time": 24576.28515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0025,
    "avg_bits_err_output": 0.0025,
    "avg_bits_err_improve": 0,
    "time": 2475.108642578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI 0.5) (+ b a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 14.359633506226235,
    "avg_bits_err_output": 0.2439672937539662,
    "avg_bits_err_improve": 14.115666212472268,
    "time": 50237.185546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(if (<= (+ (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (* (exp (* x (- -1.0 eps))) (+ 1.0 (/ -1.0 eps)))) 0.0) (/ (fma (+ 1.0 eps) (pow (exp x) (+ eps -1.0)) (* (- 1.0 eps) (exp (* x (- -1.0 eps))))) 2.0) (/ (+ (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (* (exp (* x (- -1.0 eps))) (+ 1.0 (/ -1.0 eps)))) 2.0))",
    "output_parens": 40,
    "avg_bits_err_input": 29.37776484209796,
    "avg_bits_err_output": 0.9226737910394021,
    "avg_bits_err_improve": 28.45509105105856,
    "time": 40962.58447265625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.020875,
    "avg_bits_err_output": 0.005,
    "avg_bits_err_improve": 0.015875,
    "time": 11904.47412109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (+ 2.0 (+ (+ 1.0 (pow (+ 2.0 (/ -2.0 (+ 1.0 t))) 2.0)) -1.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.022125,
    "avg_bits_err_output": 0.0055,
    "avg_bits_err_improve": 0.016625,
    "time": 35925.28076171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02375,
    "avg_bits_err_output": 0.03975,
    "avg_bits_err_improve": -0.016,
    "time": 15806.570068359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3281.213134765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3971.989990234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 5101.881103515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.825823433141715,
    "avg_bits_err_output": 0.244,
    "avg_bits_err_improve": 7.581823433141715,
    "time": 19191.694580078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.3515319460888335,
    "avg_bits_err_output": 7.3515319460888335,
    "avg_bits_err_improve": 0,
    "time": 25073.708251953125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (* eps 2.0) x) (* eps eps))",
    "output_parens": 4,
    "avg_bits_err_input": 15.847349048417943,
    "avg_bits_err_output": 0.01275,
    "avg_bits_err_improve": 15.834599048417942,
    "time": 7056.810546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (* x 0.125)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5123727756933536,
    "avg_bits_err_output": 0.3544154140665565,
    "avg_bits_err_improve": 3.157957361626797,
    "time": 26468.448486328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.166612181515402,
    "avg_bits_err_output": 0.0179954890651142,
    "avg_bits_err_improve": 15.148616692450288,
    "time": 8263.873291015625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.42165213534209,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.42165213534209,
    "time": 5461.334228515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.114711767779134,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 39.114336767779136,
    "time": 4721.172607421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.302375,
    "avg_bits_err_improve": 63.697625,
    "time": 63427.904296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* t (* t 1.6e-63))))",
    "output_parens": 4,
    "avg_bits_err_input": 61.843254462246236,
    "avg_bits_err_output": 0.3250424812503606,
    "avg_bits_err_improve": 61.51821198099587,
    "time": 15091.325927734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -3.9e+129) (* (/ -0.5 a) (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b))) (if (<= c -1.8e-42) (+ (* (/ -0.5 a) (sqrt (fma b b (* c (* a -4.0))))) (* -0.5 (/ b a))) (if (<= c -3e-201) (* (/ -0.5 a) (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b))) (if (<= c 6.5e+131) (* (/ -0.5 a) (+ b (hypot (pow (pow (* a (* c -4.0)) 2.0) 0.25) b))) (* (/ -0.5 a) (+ b (hypot (* (sqrt (* a -4.0)) (sqrt c)) b)))))))",
    "output_parens": 49,
    "avg_bits_err_input": 33.77893227627691,
    "avg_bits_err_output": 26.17617543387656,
    "avg_bits_err_improve": 7.602756842400353,
    "time": 38891.23828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -3e+146) (/ (- (hypot b (/ c (/ (pow (pow (* c (* -4.0 a)) 2.0) 0.25) (* -4.0 a)))) b) (* a 2.0)) (if (<= b -6.2e-90) (/ (- (sqrt (+ (* b b) (* c (* -4.0 a)))) b) (* a 2.0)) (if (<= b -6.2e-274) (/ (- (hypot b (/ c (sqrt (/ c (* -4.0 a))))) b) (* a 2.0)) (if (<= b 4.4e-9) (/ (/ c -0.5) (+ b (hypot b (sqrt (* -4.0 (* c a)))))) (if (<= b 2.5e+162) (/ (/ (* -4.0 (* c a)) (+ b (sqrt (fma (* c a) -4.0 (* b b))))) (* a 2.0)) (if (<= b 2.9e+268) (/ (/ c -0.5) (+ b (hypot b (sqrt (* -4.0 (* c a)))))) (log (pow (exp (/ 0.5 a)) (- (hypot b (sqrt (* a (* c -4.0)))) b)))))))))",
    "output_parens": 72,
    "avg_bits_err_input": 34.37159669082678,
    "avg_bits_err_output": 16.299832518303376,
    "avg_bits_err_improve": 18.0717641725234,
    "time": 44813.459716796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2048.230224609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.22072273549194,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 40.21109773549194,
    "time": 3464.732421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- x y) (* (hypot x y) (/ (hypot x y) (+ x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 20.40656451780972,
    "avg_bits_err_output": 0.036219737505048095,
    "avg_bits_err_improve": 20.370344780304674,
    "time": 18613.869873046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.671258470053417,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.671258470053417,
    "time": 16262.51513671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04025,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.03925,
    "time": 12379.87841796875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ b a)) (* a (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021219360937770434,
    "avg_bits_err_output": 0.0145,
    "avg_bits_err_improve": 0.006719360937770433,
    "time": 7169.494384765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* (+ x 1.0) (* x x))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.02171936093777043,
    "avg_bits_err_improve": -0.00721936093777043,
    "time": 3475.69287109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0,
    "time": 1192.499755859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ d c) (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39365357187842565,
    "avg_bits_err_output": 0.245875,
    "avg_bits_err_improve": 0.14777857187842564,
    "time": 40470.781005859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.024454308598948,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 30.017079308598948,
    "time": 13232.42578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.370254713542884,
    "avg_bits_err_output": 0.298875,
    "avg_bits_err_improve": 24.071379713542886,
    "time": 17063.898193359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (* (fma (- (tan x)) (cos x) x) (/ (/ 1.0 x) (cos x))) (pow (sqrt (/ (/ (tan x) x) (cos x))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 29.915080730161787,
    "avg_bits_err_output": 29.925653076531127,
    "avg_bits_err_improve": -0.010572346369340124,
    "time": 45726.1279296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007875,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.007375,
    "time": 2457.13671875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 5e-271) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 4e-13) (* 100.0 (* (/ n i) (+ (pow (+ 1.0 (/ i n)) n) -1.0))) (* n (/ (+ (* 100.0 (pow (exp n) (log1p (/ i n)))) -100.0) i))))",
    "output_parens": 38,
    "avg_bits_err_input": 48.219958908061635,
    "avg_bits_err_output": 11.156407900681817,
    "avg_bits_err_improve": 37.063551007379814,
    "time": 33793.6298828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= b -1.35e+154) (fma (/ (/ b (hypot c d)) (hypot c d)) d (* a (* c (pow (hypot d c) -2.0)))) (if (<= b -0.021) (/ (/ (- (* (/ a (/ (hypot c d) c)) (/ a (/ (hypot c d) c))) (* (/ b (/ (hypot c d) d)) (/ b (/ (hypot c d) d)))) (- (/ a (/ (hypot c d) c)) (/ b (/ (hypot c d) d)))) (hypot c d)) (if (<= b 1.65e-235) (fma (* b (pow (hypot d c) -2.0)) d (* (/ c (hypot c d)) (/ a (hypot c d)))) (if (<= b 2e+61) (/ (/ (+ (* b d) (* c a)) (hypot c d)) (hypot c d)) (fma (/ (/ b (hypot c d)) (hypot c d)) d (* a (* c (pow (hypot d c) -2.0))))))))",
    "output_parens": 67,
    "avg_bits_err_input": 25.993224218479938,
    "avg_bits_err_output": 11.42194372807907,
    "avg_bits_err_improve": 14.571280490400868,
    "time": 22566.13330078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 25.82646100911031,
    "avg_bits_err_output": 0.527230249067275,
    "avg_bits_err_improve": 25.299230760043034,
    "time": 20656.810302734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037375,
    "avg_bits_err_output": 0.020879533907317657,
    "avg_bits_err_improve": 0.01649546609268234,
    "time": 9048.599365234375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) 2.0) (/ (/ (pow (pow (fma ux maxCos (- 1.0 ux)) 4.0) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (* (pow (sqrt (- (fma ux maxCos 1.0) ux)) 4.0) (pow (sqrt (- (fma ux maxCos 1.0) ux)) 4.0))))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (* (pow (sqrt (- (fma ux maxCos 1.0) ux)) 6.0) (pow (sqrt (- (fma ux maxCos 1.0) ux)) 6.0)) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 73,
    "avg_bits_err_input": 13.446977237234336,
    "avg_bits_err_output": 11.87738350460953,
    "avg_bits_err_improve": 1.5695937326248064,
    "time": 117292.568359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (fma (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 4.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))) (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 4.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))) (* (pow (+ (pow (fma ux maxCos (- 1.0 ux)) 4.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) -2.0) (- (pow (fma ux maxCos (- 1.0 ux)) 12.0)))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 61,
    "avg_bits_err_input": 13.488496597821669,
    "avg_bits_err_output": 11.87362181881482,
    "avg_bits_err_improve": 1.6148747790068487,
    "time": 121766.85131835938,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- 1.0 ux) (* maxCos zi)) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (+ (fma PI (* uy 2.0) 2.0) -2.0)) xi) (* (sin (* uy (* PI 2.0))) yi))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.33099399119083023,
    "avg_bits_err_output": 0.3471785056397804,
    "avg_bits_err_improve": -0.016184514448950194,
    "time": 61810.791259765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.20555927976382687,
    "avg_bits_err_output": 0.20525555837262127,
    "avg_bits_err_improve": 0.0003037213912056025,
    "time": 28089.72509765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5456668669841892,
    "avg_bits_err_output": 0.5456668669841892,
    "avg_bits_err_improve": 0,
    "time": 22263.39208984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3175356435446397,
    "avg_bits_err_output": 0.3175356435446397,
    "avg_bits_err_improve": 0,
    "time": 23490.99169921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (/ (- 1.0 (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0)) (+ -1.0 (/ -1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 0.3393021149501038,
    "avg_bits_err_output": 0.34464849301759387,
    "avg_bits_err_improve": -0.005346378067490054,
    "time": 34024.681640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.06095025814003622,
    "avg_bits_err_output": 0.06095025814003622,
    "avg_bits_err_improve": 0,
    "time": 19703.143310546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (/ (- (fabs x)) s)) (* s (* (+ (exp (/ (- (fabs x)) s)) 1.0) (+ (exp (/ (- (fabs x)) s)) 1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13555194388532374,
    "avg_bits_err_output": 0.1313534577721393,
    "avg_bits_err_improve": 0.004198486113184435,
    "time": 26883.2001953125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6725417830419382,
    "avg_bits_err_output": 0.6725417830419382,
    "avg_bits_err_improve": 0,
    "time": 29632.43701171875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (- (+ (+ 1.0 (* 2.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)))) -1.0) (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.1565655748760634,
    "avg_bits_err_output": 0.16166320685372657,
    "avg_bits_err_improve": -0.005097631977663164,
    "time": 31689.195556640625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.5370615514369237,
    "avg_bits_err_output": 0.3799905614288498,
    "avg_bits_err_improve": 2.157070990008074,
    "time": 36244.72998046875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* cosTheta_i cosTheta_O) (* (/ (sinh (/ 1.0 v)) (* (/ 0.25 v) (/ 2.0 v))) (exp (* (/ sinTheta_O v) sinTheta_i))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4635854936640751,
    "avg_bits_err_output": 0.3743022627913504,
    "avg_bits_err_improve": 0.08928323087272466,
    "time": 51509.852783203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ 0.5 (exp (- (log v) (fma (/ 1.0 v) (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) 0.6931))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.12413746575755602,
    "avg_bits_err_output": 0.1096212031823716,
    "avg_bits_err_improve": 0.014516262575184416,
    "time": 29495.331298828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (* 2.0 (log (cbrt (pow alpha (* PI 3.0))))) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.45308520440294736,
    "avg_bits_err_output": 0.3472560970049695,
    "avg_bits_err_improve": 0.10582910739797785,
    "time": 46933.116455078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3284716984949052,
    "avg_bits_err_output": 0.5441287947290281,
    "avg_bits_err_improve": 0.7843429037658771,
    "time": 34861.57177734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(fma (log1p (* u 4.0)) s (* s (- (log1p (* u (* u -16.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 12.48234462060713,
    "avg_bits_err_output": 0.21418872187554083,
    "avg_bits_err_improve": 12.268155898731589,
    "time": 29232.69970703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ 0.125 (* s PI)) (+ (/ (exp (/ (- r) s)) r) (/ (pow E (* -0.3333333333333333 (/ r s))) r)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.14111506861303263,
    "avg_bits_err_output": 0.15127723006038285,
    "avg_bits_err_improve": -0.010162161447350215,
    "time": 83074.02856445312,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (sin (* normAngle (- 1.0 u))) (/ n0_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9105841127247802,
    "avg_bits_err_output": 0.7578870060371898,
    "avg_bits_err_improve": 0.1526971066875904,
    "time": 36433.039794921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ 1.0 (+ c (/ 1.0 (* cosTheta (* (sqrt (/ PI (fma cosTheta -2.0 1.0))) (exp (* cosTheta cosTheta))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6943907046587724,
    "avg_bits_err_output": 0.4639974006986741,
    "avg_bits_err_improve": 0.23039330396009827,
    "time": 28658.6923828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (expm1 (log1p (pow (log1p (- u1)) 2.0))) 0.25) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.523444399449476,
    "avg_bits_err_output": 0.5428596330307582,
    "avg_bits_err_improve": 12.980584766418717,
    "time": 23992.02099609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p u1) (log1p (* u1 (- u1))))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.569321538697196,
    "avg_bits_err_output": 0.3309354531530552,
    "avg_bits_err_improve": 13.23838608554414,
    "time": 28578.44384765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- (* alpha alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.36378234277145,
    "avg_bits_err_output": 0.3202430453140324,
    "avg_bits_err_improve": 14.043539297457418,
    "time": 20933.95361328125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (* (* (log1p (- u0)) alphax) alphay) (/ (fma alphax (/ sin2phi alphay) (/ alphay (/ alphax cos2phi))) -1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 12.555894410737363,
    "avg_bits_err_output": 0.509868465715362,
    "avg_bits_err_improve": 12.046025945022,
    "time": 31178.485107421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -5e+157) (- (* PI l) (/ (tan (pow (/ (* PI l) (cbrt (pow (* PI l) 2.0))) 3.0)) (* F F))) (if (<= (* PI l) -2e+88) (- (* PI l) (/ (tan (exp (* (log (/ (pow (* PI l) 2.0) (cbrt (pow (* PI l) 4.0)))) 1.5))) (* F F))) (- (* PI l) (* (/ (tan (* PI l)) F) (/ 1.0 F)))))",
    "output_parens": 38,
    "avg_bits_err_input": 15.773801323529252,
    "avg_bits_err_output": 10.67039735216219,
    "avg_bits_err_improve": 5.103403971367062,
    "time": 31289.500732421875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21324615082787057,
    "avg_bits_err_output": 0.15438054926491981,
    "avg_bits_err_improve": 0.05886560156295076,
    "time": 22299.99853515625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ (* F (pow (fma x 2.0 (fma F F 2.0)) -0.5)) (sin B)) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.305414975164256,
    "avg_bits_err_output": 10.04198722875009,
    "avg_bits_err_improve": 3.263427746414166,
    "time": 35145.899658203125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (/ (log (tanh (* PI (* f 0.25)))) PI)) -0.25)",
    "output_parens": 7,
    "avg_bits_err_input": 61.495448534344035,
    "avg_bits_err_output": 0.6156374298467048,
    "avg_bits_err_improve": 60.87981110449733,
    "time": 44611.355224609375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ 1.0 (/ (sqrt (/ (fma l (- l) (+ (* (/ (+ 1.0 x) (+ x -1.0)) (* t (* t 2.0))) (* (/ (+ 1.0 x) (+ x -1.0)) (* l l)))) 2.0)) t))",
    "output_parens": 18,
    "avg_bits_err_input": 43.08167959874521,
    "avg_bits_err_output": 39.616668435130656,
    "avg_bits_err_improve": 3.4650111636145553,
    "time": 43206.25390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.7811349724727923,
    "avg_bits_err_output": 0.22265601562950707,
    "avg_bits_err_improve": 3.558478956843285,
    "time": 30415.303955078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* 2.0 (/ l Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9849839384753238,
    "avg_bits_err_output": 0.006125,
    "avg_bits_err_improve": 0.9788589384753238,
    "time": 12643.569580078125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (* t (/ (sqrt 2.0) l)))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.04127081872016,
    "avg_bits_err_output": 1.0875575174971093,
    "avg_bits_err_improve": 8.95371330122305,
    "time": 27164.126220703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U))))) 0.0) (/ U (sqrt (/ U (* (* 2.0 n) (- t (fma (* n (pow (/ l Om) 2.0)) (- U U*) (* l (* 2.0 (/ l Om))))))))) (if (<= (sqrt (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U))))) 5e+152) (sqrt (+ (* (* (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0))) (* 2.0 (* n U))) (* t (* 2.0 (* n U))))) (if (<= (sqrt (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U))))) INFINITY) (sqrt (+ (* t (* 2.0 (* n U))) (/ (+ (* (* l -2.0) (* n (* 2.0 U))) (* (* n (- U* U)) (* (/ l Om) (* n (* 2.0 U))))) (/ Om l)))) (sqrt (+ (* t (* 2.0 (* n U))) (* (/ (* n l) Om) (* (* 2.0 U) (fma l -2.0 (* (- U* U) (/ (* n l) Om))))))))))",
    "output_parens": 111,
    "avg_bits_err_input": 34.158295003873945,
    "avg_bits_err_output": 21.764660497255978,
    "avg_bits_err_improve": 12.393634506617968,
    "time": 50895.007568359375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ (/ 2.0 t) (* k (/ (tan k) l))) (* k (/ (sin k) l)))",
    "output_parens": 9,
    "avg_bits_err_input": 47.94815009988665,
    "avg_bits_err_output": 0.36309296095529675,
    "avg_bits_err_improve": 47.58505713893135,
    "time": 96009.26538085938,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -6.8e-21) (not (<= t 1.46e-12))) (* (/ (* (/ 2.0 (+ 2.0 (pow (/ k t) 2.0))) (/ l t)) (* t (sin k))) (/ l (* t (tan k)))) (/ 2.0 (fma (/ k t) (* (* t (/ k t)) (* (sin k) (* (tan k) (pow (/ t l) 2.0)))) (* t (* (* (sin k) (pow (/ t l) 2.0)) (* 2.0 (tan k)))))))",
    "output_parens": 38,
    "avg_bits_err_input": 33.04164693993361,
    "avg_bits_err_output": 11.408977225261784,
    "avg_bits_err_improve": 21.63266971467182,
    "time": 68784.89233398438,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (fma a1 a1 (* a2 a2)) (sqrt 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5554900406482592,
    "avg_bits_err_output": 0.5059283859565222,
    "avg_bits_err_improve": 0.04956165469173701,
    "time": 31713.69775390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (sqrt (* 2.0 (* PI n))) (* (sqrt k) (pow (* 2.0 (* PI n)) (* k 0.5))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5035408448820499,
    "avg_bits_err_output": 0.40550076957394143,
    "avg_bits_err_improve": 0.09804007530810843,
    "time": 25074.40087890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* 2.0 (sinh l)) (* (cos (* K 0.5)) J)) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.975882678524336,
    "avg_bits_err_output": 0.07524060156295073,
    "avg_bits_err_improve": 17.900642076961386,
    "time": 19243.186279296875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (pow (pow (cbrt (fma (/ (+ m n) (cbrt (- (* (+ m n) (* K 0.5)) M))) (/ (* K 0.5) (cbrt (- (* (+ m n) (* K 0.5)) M))) (* M (- (pow (cbrt (- (* (+ m n) (* K 0.5)) M)) -2.0))))) 3.0) 3.0)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l))))",
    "output_parens": 37,
    "avg_bits_err_input": 15.11939821613272,
    "avg_bits_err_output": 1.4043171010344542,
    "avg_bits_err_improve": 13.715081115098265,
    "time": 30836.424072265625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.053417481250364,
    "avg_bits_err_output": 7.76379248125036,
    "avg_bits_err_improve": 10.289625000000004,
    "time": 36407.970458984375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) (- INFINITY)) (* w0 (sqrt (- 1.0 (/ (* (/ D (/ d M)) (* h (/ D (/ d M)))) (* l 4.0))))) (if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) 0.0) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (- 1.0 (/ (* M h) (* l (* (/ (* d 4.0) D) (/ (/ d D) M)))))))))",
    "output_parens": 48,
    "avg_bits_err_input": 14.461150724602188,
    "avg_bits_err_output": 9.659152234925529,
    "avg_bits_err_improve": 4.801998489676659,
    "time": 65686.96508789062,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -2e+274) (/ (/ (sqrt (/ A V)) (sqrt l)) (/ 1.0 c0)) (if (<= (* V l) -4e-261) (/ c0 (/ (sqrt (* V (- l))) (sqrt (- A)))) (if (<= (* V l) 0.0) (/ (* (sqrt (/ A V)) c0) (sqrt l)) (if (<= (* V l) 1e+298) (/ c0 (/ (sqrt (* V l)) (sqrt A))) (/ (* c0 (* (sqrt A) (pow V -0.5))) (sqrt l))))))",
    "output_parens": 41,
    "avg_bits_err_input": 18.365234728141775,
    "avg_bits_err_output": 6.212676759429086,
    "avg_bits_err_improve": 12.152557968712689,
    "time": 35004.63525390625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= M -3.9e+124) (* c0 (* (/ 0.5 w) (/ M (/ (- (* (/ c0 w) (/ (pow (/ d D) 2.0) h)) (hypot (* (/ c0 w) (/ (pow (/ d D) 2.0) h)) (sqrt (* M (- M))))) M)))) (if (<= M 1.2e+72) (* c0 (* (/ (* M M) (- (sqrt (- (pow (/ (* c0 (/ d D)) (* w (* h (/ D d)))) 2.0) (* M M))) (/ (* (/ c0 w) (/ d D)) (* h (/ D d))))) (/ -0.5 w))) (* c0 (* (/ M (/ (- (hypot (* c0 (/ (pow (/ d D) 2.0) (* w h))) (sqrt (* M (- M)))) (* c0 (/ (pow (/ d D) 2.0) (* w h)))) M)) (/ -0.5 w)))))",
    "output_parens": 66,
    "avg_bits_err_input": 59.66478830287663,
    "avg_bits_err_output": 32.36974981012268,
    "avg_bits_err_improve": 27.295038492753953,
    "time": 70822.93310546875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) -5e-152) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (fma (* (* M (* 0.5 (/ D d))) (* 0.5 (/ h l))) (* M (* 0.5 (/ D d))) 0.0))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 0.0) (fabs (* (/ d (sqrt (* h l))) (+ 1.0 (* (* (/ h l) -0.125) (pow (/ (* M D) d) 2.0))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 2e+244) (* (* (sqrt (/ d l)) (pow (/ h d) -0.5)) (- 1.0 (* (/ M 8.0) (* (* M (/ D d)) (/ (/ D d) (/ l h)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) INFINITY) (fabs (* d (* (fma (pow (* M (/ D d)) 2.0) (* (/ h l) -0.125) 1.0) (pow (* h l) -0.5)))) (* (sqrt (/ (* d (/ d h)) l)) (fma (* h (* (/ 0.25 l) (/ (pow (* M D) 2.0) d))) (/ -0.5 d) 1.0))))))",
    "output_parens": 132,
    "avg_bits_err_input": 26.39968467194701,
    "avg_bits_err_output": 15.86003726093833,
    "avg_bits_err_improve": 10.53964741100868,
    "time": 80078.29760742188,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (- 0.25 (/ 0.25 (fma x x 1.0))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 13,
    "avg_bits_err_input": 15.823127177455826,
    "avg_bits_err_output": 15.318318450028857,
    "avg_bits_err_improve": 0.504808727426969,
    "time": 31233.128662109375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9849481203125902,
    "avg_bits_err_output": 0.010573120312590145,
    "avg_bits_err_improve": 0.974375,
    "time": 6470.302734375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma (* v v) -5.0 1.0) (* PI (* (sqrt (fma v (* v -6.0) 2.0)) (- 1.0 (* v v))))) t)",
    "output_parens": 11,
    "avg_bits_err_input": 0.45465630542840224,
    "avg_bits_err_output": 0.10678587878993986,
    "avg_bits_err_improve": 0.34787042663846235,
    "time": 21996.39453125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (- 1.0 (* v v)) (/ 4.0 (sqrt (* 2.0 (fma v (* v -3.0) 1.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.011594360937770434,
    "avg_bits_err_output": 0.009073120312590145,
    "avg_bits_err_improve": 0.0025212406251802887,
    "time": 14218.60009765625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(- PI (acos (/ (fma (* v v) -5.0 1.0) (- (fma v v -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.540316684964843,
    "avg_bits_err_output": 0.5409496030957599,
    "avg_bits_err_improve": -0.0006329181309169263,
    "time": 37070.149169921875,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(if (<= (/ (* (pow k m) a) (+ (+ 1.0 (* k 10.0)) (* k k))) -1e-315) (/ (/ a (pow k (- m))) (+ 1.0 (* k (+ k 10.0)))) (if (<= (/ (* (pow k m) a) (+ (+ 1.0 (* k 10.0)) (* k k))) 0.0) (/ (pow k m) (+ (/ -1.0 a) (* k (/ (+ k 10.0) a)))) (/ a (/ (+ 1.0 (* k (+ k 10.0))) (pow k m)))))",
    "output_parens": 38,
    "avg_bits_err_input": 2.1102546721326263,
    "avg_bits_err_output": 0.1589068655250162,
    "avg_bits_err_improve": 1.9513478066076102,
    "time": 27980.6298828125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (* NaChar (/ -1.0 (- -1.0 (exp (/ (+ Vef (+ Ev (- EAccept mu))) KbT))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.01231245750865524,
    "avg_bits_err_output": 0.014046766148394759,
    "avg_bits_err_improve": -0.0017343086397395187,
    "time": 21244.8837890625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.17756308742908467,
    "avg_bits_err_output": 0.01523731985283082,
    "avg_bits_err_improve": 0.16232576757625383,
    "time": 6764.98095703125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18674727088642265,
    "avg_bits_err_output": 0.024698671057966005,
    "avg_bits_err_improve": 0.16204859982845665,
    "time": 15133.796142578125,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.19231989481123013,
    "avg_bits_err_output": 0.02495448599417822,
    "avg_bits_err_improve": 0.16736540881705192,
    "time": 11874.437255859375,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(pow (pow (fma (/ x (hypot x (* 2.0 (sqrt (* p p))))) 0.5 0.5) 1.5) 0.3333333333333333)",
    "output_parens": 8,
    "avg_bits_err_input": 12.608469703750725,
    "avg_bits_err_output": 12.609177923891124,
    "avg_bits_err_improve": -0.000708220140399618,
    "time": 21925.27197265625,
    "seed": 16,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(hypot 1.0 (exp (* 0.5 x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.431867444974664,
    "avg_bits_err_output": 0.005625,
    "avg_bits_err_improve": 41.42624244497466,
    "time": 8239.8125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -7.5e-8) (/ (- x (sin x)) (- x (tan x))) (if (<= x 2e-8) (/ (fma (pow (sin x) 2.0) (/ 1.0 (+ x (sin x))) (* (/ x (+ x (sin x))) (- x))) (/ (fma (* x x) (/ 1.0 (tan x)) (- x)) (/ (- x) (tan x)))) (- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))))",
    "output_parens": 38,
    "avg_bits_err_input": 32.18348031684792,
    "avg_bits_err_output": 0.2625416564723718,
    "avg_bits_err_improve": 31.920938660375548,
    "time": 34858.0625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.2e+165) (/ (- (hypot b_2 (sqrt (* c (- a)))) b_2) a) (if (<= b_2 -1.1e-235) (- (/ (sqrt (- (* b_2 b_2) (* c a))) a) (/ b_2 a)) (/ (- c) (+ b_2 (sqrt (- (* b_2 b_2) (* c a)))))))",
    "output_parens": 24,
    "avg_bits_err_input": 33.63248713143524,
    "avg_bits_err_output": 16.18417215518565,
    "avg_bits_err_improve": 17.44831497624959,
    "time": 29153.98828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) (/ c (- (hypot b_2 (sqrt (* a c))) b_2)) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) -2e-221) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 0.0) (/ (/ (* a (- c)) (- b_2 (sqrt (- (* b_2 b_2) (* a c))))) a) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 4e+291) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) INFINITY) (/ c (- (hypot b_2 (sqrt (* a c))) b_2)) (/ (* c (* a (/ -1.0 (- b_2 (hypot b_2 (* a (/ c (sqrt (* a c))))))))) a))))))",
    "output_parens": 89,
    "avg_bits_err_input": 33.83693593573938,
    "avg_bits_err_output": 21.497139093384767,
    "avg_bits_err_improve": 12.339796842354616,
    "time": 27103.08349609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (sin x) x) (/ x (tan (* x 0.5))))",
    "output_parens": 6,
    "avg_bits_err_input": 30.972926340166577,
    "avg_bits_err_output": 0.12459594011647443,
    "avg_bits_err_improve": 30.848330400050102,
    "time": 21725.30078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.80354560491808,
    "avg_bits_err_output": 32.495974783755436,
    "avg_bits_err_improve": 0.307570821162642,
    "time": 38538.828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.60636451278117,
    "avg_bits_err_output": 0.022875,
    "avg_bits_err_improve": 29.58348951278117,
    "time": 18125.773681640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 (- -1.0 x)) x)",
    "output_parens": 3,
    "avg_bits_err_input": 14.483121854825036,
    "avg_bits_err_output": 0.073625,
    "avg_bits_err_improve": 14.409496854825036,
    "time": 18407.381103515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (* (cos x) (/ (pow (sin eps) 2.0) (- -1.0 (cos eps)))) (* (sin eps) (sin x)))",
    "output_parens": 11,
    "avg_bits_err_input": 39.31030765211852,
    "avg_bits_err_output": 0.6496768249715418,
    "avg_bits_err_improve": 38.660630827146974,
    "time": 36894.839599609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (+ (/ (+ 1.0 x) (cbrt (+ 1.0 x))) (- (/ x (cbrt x)) (* (cbrt (+ 1.0 x)) (cbrt (- x))))))",
    "output_parens": 14,
    "avg_bits_err_input": 29.89126835068925,
    "avg_bits_err_output": 0.23297218125612956,
    "avg_bits_err_improve": 29.658296169433118,
    "time": 22678.121337890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.11700333397715,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 30.11662833397715,
    "time": 11750.04931640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot (pow (pow (* a (* c -4.0)) 2.0) 0.25) b) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -1e-146) (/ (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (/ (/ (fma (* c -4.0) a (- (* b b) (* b b))) (+ b (sqrt (fma -4.0 (* a c) (* b b))))) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 5e+257) (/ (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) INFINITY) (/ (- (hypot (/ a (/ (sqrt a) (sqrt (* c -4.0)))) b) b) (* a 2.0)) (/ (- (hypot (* (* c -4.0) (* a (pow (* a (* c -4.0)) -0.5))) b) b) (* a 2.0)))))))",
    "output_parens": 107,
    "avg_bits_err_input": 34.32765323271245,
    "avg_bits_err_output": 17.841858046998652,
    "avg_bits_err_improve": 16.485795185713798,
    "time": 45341.811279296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -1e-128) (* -0.5 (/ (+ b (pow (+ (* b b) (* a (* c -4.0))) 0.5)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (* -0.5 (/ (/ (fma c (* a -4.0) 0.0) (- (sqrt (fma c (* a -4.0) (* b b))) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 1e+159) (* -0.5 (/ (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) a)) (* -0.5 (/ (+ b (hypot (pow (* (* (* a c) (* a c)) 16.0) 0.25) b)) a))))))",
    "output_parens": 88,
    "avg_bits_err_input": 33.79028626161961,
    "avg_bits_err_output": 18.253464882395242,
    "avg_bits_err_improve": 15.53682137922437,
    "time": 37255.76513671875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.43207225054348,
    "avg_bits_err_output": 0.020584962500721157,
    "avg_bits_err_improve": 61.41148728804276,
    "time": 15989.282958984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(cbrt (pow (+ (log1p n) (fabs (fma n (log (/ (+ n 1.0) n)) -1.0))) 3.0))",
    "output_parens": 9,
    "avg_bits_err_input": 63.00466487177278,
    "avg_bits_err_output": 44.22127500512487,
    "avg_bits_err_improve": 18.78338986664791,
    "time": 38654.3330078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.596153017157654,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 58.58877801715765,
    "time": 8585.944091796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (+ (/ (pow (/ (tan x) x) 6.0) (pow (+ (/ (tan x) x) 1.0) 3.0)) (/ -1.0 (pow (+ (/ (tan x) x) 1.0) 3.0))) (fma (/ 1.0 (+ (/ (tan x) x) 1.0)) (+ (/ 1.0 (+ (/ (tan x) x) 1.0)) (/ (pow (/ (tan x) x) 2.0) (+ (/ (tan x) x) 1.0))) (/ (/ (pow (/ (tan x) x) 4.0) (+ (/ (tan x) x) 1.0)) (+ (/ (tan x) x) 1.0)))) (tan x))",
    "output_parens": 45,
    "avg_bits_err_input": 59.85900928057009,
    "avg_bits_err_output": 59.8536746516793,
    "avg_bits_err_improve": 0.005334628890793169,
    "time": 36032.101806640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (* (/ (expm1 (* eps b)) (expm1 (* eps (+ b a)))) (/ (expm1 (* eps a)) eps)))",
    "output_parens": 11,
    "avg_bits_err_input": 60.058192328871215,
    "avg_bits_err_output": 28.585241241023912,
    "avg_bits_err_improve": 31.472951087847303,
    "time": 32707.639404296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.789398730570014,
    "avg_bits_err_output": 0.009,
    "avg_bits_err_improve": 41.78039873057001,
    "time": 8223.408447265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.5733929586296,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.5727679586296,
    "time": 4965.231689453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.440749570452372,
    "avg_bits_err_output": 0.01680195072789178,
    "avg_bits_err_improve": 29.42394761972448,
    "time": 7903.509033203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(fabs (/ (fma (pow (exp x) -3.0) (+ (exp x) 2.0) (+ 1.0 (* (pow (exp x) -2.0) -4.0))) (* (+ (exp x) 2.0) (pow (exp x) -2.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 29.261318308666194,
    "avg_bits_err_output": 29.045972991344364,
    "avg_bits_err_improve": 0.21534531732183027,
    "time": 38964.660400390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (+ x (* (+ x -1.0) (+ (/ x (+ x 1.0)) -2.0))) (* x (+ x -1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 9.8563395808831,
    "avg_bits_err_output": 9.860132718599727,
    "avg_bits_err_improve": -0.0037931377166273705,
    "time": 61181.404052734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (fma (tan eps) (tan x) (/ (tan eps) (tan x))) (/ (- (tan x)) (+ -1.0 (* (tan eps) (tan x)))))",
    "output_parens": 14,
    "avg_bits_err_input": 37.53202988348641,
    "avg_bits_err_output": 0.3333476623548566,
    "avg_bits_err_improve": 37.198682221131556,
    "time": 37860.05712890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))",
    "output_parens": 5,
    "avg_bits_err_input": 29.986196283008077,
    "avg_bits_err_output": 0.16758740625180288,
    "avg_bits_err_improve": 29.818608876756276,
    "time": 20398.04833984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(* (sin eps) (- (cos x) (* (tan (* eps 0.5)) (sin x))))",
    "output_parens": 8,
    "avg_bits_err_input": 36.6590889673482,
    "avg_bits_err_output": 0.21370063004724763,
    "avg_bits_err_improve": 36.44538833730095,
    "time": 28544.869140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (* (/ (+ x 1.0) (sqrt (+ x 1.0))) (sqrt x))))",
    "output_parens": 10,
    "avg_bits_err_input": 19.679766766756835,
    "avg_bits_err_output": 0.12424548906511423,
    "avg_bits_err_improve": 19.55552127769172,
    "time": 23957.09765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 14.616473437918307,
    "avg_bits_err_output": 0.40956476577475043,
    "avg_bits_err_improve": 14.206908672143557,
    "time": 15985.80126953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.030601608617232,
    "avg_bits_err_output": 1.4594250270877889,
    "avg_bits_err_improve": 28.571176581529443,
    "time": 31050.618408203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(+ (* (/ m v) (+ (- 1.0 m) (* m (+ m -1.0)))) (+ m -1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.07089868437626201,
    "avg_bits_err_output": 0.07501337660623801,
    "avg_bits_err_improve": -0.004114692229976,
    "time": 28291.05615234375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(fma (/ b (/ 1.0 a)) (* b (- a)) 0.0)",
    "output_parens": 5,
    "avg_bits_err_input": 16.222949566939832,
    "avg_bits_err_output": 0.27108985000288455,
    "avg_bits_err_improve": 15.951859716936948,
    "time": 15107.61669921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (+ (* (cos (+ 1.0 (* PI (* 0.005555555555555556 angle)))) (cos 1.0)) (* (sin (+ 1.0 (* PI (* 0.005555555555555556 angle)))) (sin 1.0)))) 2.0) (pow (* b (sin (/ PI (/ 180.0 angle)))) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 20.63888738572131,
    "avg_bits_err_output": 20.684729296863917,
    "avg_bits_err_improve": -0.04584191114260605,
    "time": 49405.82861328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* (/ angle (/ (/ angle 0.011111111111111112) angle)) PI)) (+ b a)) (- b a))",
    "output_parens": 9,
    "avg_bits_err_input": 31.005119747765104,
    "avg_bits_err_output": 21.186417827841385,
    "avg_bits_err_improve": 9.818701919923718,
    "time": 41799.780517578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (* (cbrt (* angle (* PI 0.005555555555555556))) (pow (* (cbrt (cbrt (* angle (* PI 0.005555555555555556)))) (pow (cbrt (cbrt (* angle (* PI 0.005555555555555556)))) 2.0)) 2.0)))) 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 20.73157717929106,
    "avg_bits_err_output": 20.7577667096942,
    "avg_bits_err_improve": -0.026189530403136985,
    "time": 57967.68408203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (* (/ m v) (- 1.0 m)) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.1753656015629507,
    "avg_bits_err_output": 0.17230432343849159,
    "avg_bits_err_improve": 0.0030612781244591103,
    "time": 23976.90380859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (- (tan x)) 1.0) (fma (tan x) (tan x) 1.0))",
    "output_parens": 8,
    "avg_bits_err_input": 0.337931329582567,
    "avg_bits_err_output": 0.321403294084734,
    "avg_bits_err_improve": 0.016528035497832994,
    "time": 40848.576416015625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* e (/ (sin v) (+ 1.0 (* e (cos v)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13375,
    "avg_bits_err_output": 0.13636560156295074,
    "avg_bits_err_improve": -0.0026156015629507368,
    "time": 22499.52587890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (fma (sin lambda2) (sin lambda1) (* (cos lambda1) (cos lambda2)))))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 17.303448346569223,
    "avg_bits_err_output": 4.065921822049347,
    "avg_bits_err_improve": 13.237526524519875,
    "time": 40661.463623046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ c 0.5) (- (- b) (sqrt (fma b b (* a (* c -4.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 52.41704766489184,
    "avg_bits_err_output": 0.08109436093777043,
    "avg_bits_err_improve": 52.33595330395407,
    "time": 35596.61376953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* -2.0 (/ c (+ b (sqrt (fma c (* a -4.0) (* b b))))))",
    "output_parens": 7,
    "avg_bits_err_input": 28.070033190974513,
    "avg_bits_err_output": 0.28261804531403245,
    "avg_bits_err_improve": 27.787415145660482,
    "time": 32244.62451171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ c (* 0.5 (/ a a))) (- (- b) (sqrt (fma c (* a -4.0) (* b b)))))",
    "output_parens": 10,
    "avg_bits_err_input": 44.1178578555359,
    "avg_bits_err_output": 0.15855432343849157,
    "avg_bits_err_improve": 43.95930353209741,
    "time": 33700.79296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -1e-69) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 3.5e-65) (/ (- (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25)) b) (* a 2.0)) (if (<= c 4.2e+75) (* (fma (pow (fma b b (* (* c -4.0) a)) 0.75) (pow (fma b b (* (* c -4.0) a)) -0.25) (- b)) (/ 0.5 a)) (/ (- (hypot b (* (sqrt (* -4.0 a)) (sqrt c))) b) (* a 2.0)))))",
    "output_parens": 42,
    "avg_bits_err_input": 34.33352993524726,
    "avg_bits_err_output": 24.187155580167413,
    "avg_bits_err_improve": 10.14637435507985,
    "time": 52074.140380859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8863062573141274,
    "avg_bits_err_output": 0.22430608659932594,
    "avg_bits_err_improve": 0.6620001707148014,
    "time": 34474.31396484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (/ (- 1.0 (pow (* (pow (+ 1.0 (pow (exp -2.0) x)) -4.0) 16.0) 2.0)) (* (+ 1.0 (* (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 4.0)) (+ 1.0 (* (pow (+ 1.0 (pow (exp -2.0) x)) -4.0) 16.0)))) (+ -1.0 (/ -2.0 (+ 1.0 (pow (exp -2.0) x)))))",
    "output_parens": 27,
    "avg_bits_err_input": 29.548493054417236,
    "avg_bits_err_output": 29.540614651369523,
    "avg_bits_err_improve": 0.007878403047712368,
    "time": 36938.877197265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.16080974381946,
    "avg_bits_err_output": 0.012625,
    "avg_bits_err_improve": 58.14818474381946,
    "time": 13100.3818359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 57.911683130642594,
    "avg_bits_err_output": 0.00825,
    "avg_bits_err_improve": 57.9034331306426,
    "time": 9851.518798828125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00827124062518029,
    "avg_bits_err_output": 0.008,
    "avg_bits_err_improve": 0.0002712406251802902,
    "time": 4451.908203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.5055,
    "avg_bits_err_output": 0.074625,
    "avg_bits_err_improve": 31.430875,
    "time": 5944.69873046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.581499101870136,
    "avg_bits_err_output": 0.007375,
    "avg_bits_err_improve": 58.57412410187013,
    "time": 12695.057861328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (/ (- 1.0 (* x x)) (sqrt (- 1.0 (* x x))))) x))",
    "output_parens": 9,
    "avg_bits_err_input": 0.0595,
    "avg_bits_err_output": 0.059375,
    "avg_bits_err_improve": 0.0001250000000000001,
    "time": 6310.47998046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma ew (* (sin t) (/ 1.0 (hypot 1.0 (/ eh (* ew (tan t)))))) (* (cos t) (* eh (sin (atan (/ (/ eh (tan t)) ew)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13082312031259016,
    "avg_bits_err_output": 0.135237503888851,
    "avg_bits_err_improve": -0.0044143835762608385,
    "time": 42591.059326171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (/ 1.0 (hypot 1.0 (/ (tan t) (/ ew eh))))) (* (* eh (sin t)) (sin (atan (/ (* (tan t) (- eh)) ew))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.13344812031259015,
    "avg_bits_err_output": 0.13554248125036059,
    "avg_bits_err_improve": -0.002094360937770434,
    "time": 47522.635986328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (cos (* phi1 0.5)) (cos (* 0.5 phi2)) (* (sin (* 0.5 phi2)) (- (sin (* phi1 0.5)))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 39.331420605937446,
    "avg_bits_err_output": 0.12803971319107982,
    "avg_bits_err_improve": 39.20338089274637,
    "time": 41025.63232421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 13.897197625531357,
    "avg_bits_err_output": 0.0019303679369810911,
    "avg_bits_err_improve": 13.895267257594377,
    "time": 6342.890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin delta) (* (sin theta) (cos phi1))) (- (- (cos delta) (* (- 1.0 (cos (* phi1 2.0))) (* (cos delta) 0.5))) (* (* (sin delta) (* (cos phi1) (cos theta))) (sin phi1)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.15194354739338634,
    "avg_bits_err_output": 0.15763521961380536,
    "avg_bits_err_improve": -0.005691672220419025,
    "time": 51589.21484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 52.43019930029488,
    "avg_bits_err_output": 0.37712782031835956,
    "avg_bits_err_improve": 52.05307147997652,
    "time": 42271.840576171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma b b (* (* c a) -3.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 28.225461096610402,
    "avg_bits_err_output": 0.27484680468885214,
    "avg_bits_err_improve": 27.95061429192155,
    "time": 37894.496337890625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* a 3.0)) -4e-21) (/ (/ (- (pow (fma b b (* a (* c -3.0))) 3.0) (pow b 6.0)) (* (fma b (+ b (sqrt (fma b b (* a (* c -3.0))))) (fma b b (* a (* c -3.0)))) (+ (pow (fma b b (* a (* c -3.0))) 1.5) (pow b 3.0)))) (* a 3.0)) (/ (+ (- b) (sqrt (pow (pow (fma -3.0 (* a c) (* b b)) 3.0) 0.3333333333333333))) (* a 3.0)))",
    "output_parens": 45,
    "avg_bits_err_input": 44.135650546231574,
    "avg_bits_err_output": 41.28881064719068,
    "avg_bits_err_improve": 2.8468398990408943,
    "time": 65104.70458984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b 6.6e-288) (* 0.3333333333333333 (/ (- (hypot b (sqrt (fabs (* c (* a 3.0))))) b) a)) (if (<= b 7.5e+28) (* 0.3333333333333333 (* c (/ -3.0 (+ b (hypot b (sqrt (/ c (/ -0.3333333333333333 a)))))))) (if (<= b 1.38e+153) (* -0.3333333333333333 (/ (* (/ 1.0 (+ b (sqrt (fma a (* c -3.0) (* b b))))) (* c (* a 3.0))) a)) (if (<= b 3e+237) (* 0.3333333333333333 (* c (/ -3.0 (+ b (hypot b (sqrt (/ c (/ -0.3333333333333333 a)))))))) (* 0.3333333333333333 (/ (* (* c (* a -3.0)) (/ 1.0 (+ b (hypot (pow (pow (* c (* a -3.0)) 2.0) 0.25) b)))) a))))))",
    "output_parens": 55,
    "avg_bits_err_input": 34.36338207535971,
    "avg_bits_err_output": 14.775547342672825,
    "avg_bits_err_improve": 19.587834732686886,
    "time": 43836.742431640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (+ (* (* (cos phi2) (sin phi1)) (* (cos lambda2) (cos lambda1))) (* (cos phi2) (/ (sin phi1) (/ 1.0 (* (sin lambda1) (sin lambda2))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 12.574238166279743,
    "avg_bits_err_output": 0.17819814299857598,
    "avg_bits_err_improve": 12.396040023281166,
    "time": 44554.676025390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ -1.0 (+ -1.0 (/ (- -1.0 x) x))) (* (/ (+ 1.0 x) x) (+ -1.0 x)))",
    "output_parens": 9,
    "avg_bits_err_input": 28.480170105057223,
    "avg_bits_err_output": 0.03378308281331131,
    "avg_bits_err_improve": 28.44638702224391,
    "time": 29479.72509765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ (+ 1.0 x) (fma x x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0.00375,
    "time": 10827.677001953125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.24985535555293,
    "avg_bits_err_output": 0.071625,
    "avg_bits_err_improve": 14.17823035555293,
    "time": 24579.033935546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (/ (* (sqrt (fma B B (* (* A C) -4.0))) (- (sqrt (* 2.0 (* F (+ A (- C (hypot B (- A C))))))))) (- (* B B) (* 4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) INFINITY) (/ (* (sqrt (- (- (hypot B (- A C)) A) C)) (- (sqrt (* (fma C (* A -8.0) (* B (* 2.0 B))) (- F))))) (fma B B (* A (* C -4.0)))) (* 2.0 (* (/ F (sqrt (* (+ A (- C (hypot B (- A C)))) (* 2.0 F)))) (/ (- (- (hypot B (- A C)) C) A) (hypot B (sqrt (* C (* A -4.0)))))))))",
    "output_parens": 101,
    "avg_bits_err_input": 52.29320011853661,
    "avg_bits_err_output": 38.266373922391445,
    "avg_bits_err_improve": 14.026826196145166,
    "time": 55493.783203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* (atan (/ (- (- C A) (hypot B (- C A))) B)) (/ 180.0 PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.835945267164455,
    "avg_bits_err_output": 14.339106623302255,
    "avg_bits_err_improve": 15.4968386438622,
    "time": 37667.776123046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (- (/ (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (+ (pow B 2.0) (* C (* A -4.0))))) 1e-175) (* (/ -1.0 (pow F -0.5)) (sqrt (/ (* 2.0 (+ C (+ A (hypot B (- A C))))) (fma C (* A -4.0) (* B B))))) (if (<= (- (/ (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (+ (pow B 2.0) (* C (* A -4.0))))) INFINITY) (/ (* (/ F (/ (sqrt (- (* B (* B F)) (* (* (* 4.0 A) C) F))) (fma B B (* C (* A -4.0))))) (- (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))))) (+ (* B B) (* -4.0 (* A C)))) (- (/ (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (sqrt F)) (hypot (sqrt (* C (* A -4.0))) B)))))",
    "output_parens": 98,
    "avg_bits_err_input": 52.51048112459206,
    "avg_bits_err_output": 32.140664181229596,
    "avg_bits_err_improve": 20.369816943362466,
    "time": 53979.409912109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt (* g 0.5)) (cbrt a))",
    "output_parens": 4,
    "avg_bits_err_input": 15.627804421622432,
    "avg_bits_err_output": 0.817867250300847,
    "avg_bits_err_improve": 14.809937171321586,
    "time": 22006.941650390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-295) (+ (/ 1.0 (/ 1.0 (/ (cbrt (* (- (hypot g h) g) 0.5)) (cbrt a)))) (cbrt (* (/ -0.5 a) (+ g (hypot g h))))) (+ (* (cbrt (/ -0.5 a)) (cbrt (+ g (hypot g h)))) (/ 1.0 (cbrt (/ (/ a (- (hypot g h) g)) 0.5)))))",
    "output_parens": 29,
    "avg_bits_err_input": 36.08011519144055,
    "avg_bits_err_output": 2.739346502544931,
    "avg_bits_err_improve": 33.340768688895615,
    "time": 37108.6943359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9912152265701634,
    "avg_bits_err_output": 0.03747913594209736,
    "avg_bits_err_improve": 0.953736090628066,
    "time": 18049.591552734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ 1.0 (+ 1.0 (exp (- b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.6922712406251803,
    "avg_bits_err_output": 0.01537520351258208,
    "avg_bits_err_improve": 0.6768960371125983,
    "time": 6097.691162109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (/ a1 b1) (/ b2 a2)) (if (or (<= (/ (* a1 a2) (* b1 b2)) -5e-315) (and (not (<= (/ (* a1 a2) (* b1 b2)) 5e-208)) (<= (/ (* a1 a2) (* b1 b2)) 4e+292))) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b1) (/ a2 b2))))",
    "output_parens": 31,
    "avg_bits_err_input": 11.372823166249141,
    "avg_bits_err_output": 2.934955572571398,
    "avg_bits_err_improve": 8.437867593677744,
    "time": 13528.28662109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4780040635518175,
    "avg_bits_err_output": 0.442625,
    "avg_bits_err_improve": 0.035379063551817524,
    "time": 9370.555419921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -0.5) (- (log (/ (- x (hypot 1.0 x)) -1.0))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 52.93568994831417,
    "avg_bits_err_output": 0.02075,
    "avg_bits_err_improve": 52.91493994831417,
    "time": 24203.455322265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.77550359204577,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.77550359204577,
    "time": 2925.118408203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.013875,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 0,
    "time": 10886.576904296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1314.841064453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= (* w w) 5e+203) (+ (/ 2.0 (* r r)) (- -1.5 (* (/ (+ 0.375 (* v -0.25)) (- 1.0 v)) (* r (* w (* r w)))))) (+ (/ 2.0 (* r r)) (+ -1.5 (* (* w (* (* r r) w)) (/ (+ -0.375 (* v 0.25)) (- 1.0 v))))))",
    "output_parens": 27,
    "avg_bits_err_input": 12.285871629202978,
    "avg_bits_err_output": 0.29279697249404324,
    "avg_bits_err_improve": 11.993074656708934,
    "time": 43551.576416015625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.5128226024455851,
    "avg_bits_err_output": 0.3128591268596897,
    "avg_bits_err_improve": 0.1999634755858954,
    "time": 107615.04345703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.10776151392575,
    "avg_bits_err_output": 1.2903583746430722,
    "avg_bits_err_improve": 16.81740313928268,
    "time": 7491.729248046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma (pow x 3.0) -0.12900613773279798 (* x 0.954929658551372))",
    "output_parens": 3,
    "avg_bits_err_input": 0.2234789628874018,
    "avg_bits_err_output": 0.20034436093777042,
    "avg_bits_err_improve": 0.023134601949631378,
    "time": 26195.903564453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0026981203125901448,
    "avg_bits_err_output": 0.0026981203125901448,
    "avg_bits_err_improve": 0,
    "time": 36845.81982421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ PI (+ b a)) (/ (- b a) (+ (/ 0.5 a) (/ -0.5 b))))",
    "output_parens": 8,
    "avg_bits_err_input": 14.28120578385956,
    "avg_bits_err_output": 0.27473195626045654,
    "avg_bits_err_improve": 14.006473827599104,
    "time": 46312.79150390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (cbrt (exp (* (* x -3.0) (- 1.0 eps))))) (* (+ (/ 1.0 eps) -1.0) (exp (* x (- -1.0 eps))))) 2.0)",
    "output_parens": 16,
    "avg_bits_err_input": 29.59160663785604,
    "avg_bits_err_output": 29.626191647092753,
    "avg_bits_err_improve": -0.03458500923671437,
    "time": 38886.852783203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.00575,
    "avg_bits_err_improve": 0.007875,
    "time": 9069.05078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (+ 2.0 (+ (+ 1.0 (pow (+ 2.0 (/ -2.0 (+ 1.0 t))) 2.0)) -1.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.016375,
    "avg_bits_err_output": 0.00625,
    "avg_bits_err_improve": 0.010125,
    "time": 31127.22265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.048375,
    "avg_bits_err_output": 0.048375,
    "avg_bits_err_improve": 0,
    "time": 23929.90869140625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3001.318603515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3321.34521484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4744.805908203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8035933305167395,
    "avg_bits_err_output": 0.245375,
    "avg_bits_err_improve": 7.558218330516739,
    "time": 19757.57666015625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.0989590952705415,
    "avg_bits_err_output": 7.0989590952705415,
    "avg_bits_err_improve": 0,
    "time": 22024.27294921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(fma eps eps (* (* eps 2.0) x))",
    "output_parens": 3,
    "avg_bits_err_input": 15.626894356708267,
    "avg_bits_err_output": 0.005948120312590144,
    "avg_bits_err_improve": 15.620946236395676,
    "time": 14208.418701171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 160.0) x) (* x 0.0625)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.555339469037401,
    "avg_bits_err_output": 0.3421605265643931,
    "avg_bits_err_improve": 3.2131789424730077,
    "time": 28315.57080078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.8233887960941,
    "avg_bits_err_output": 0.0187454890651142,
    "avg_bits_err_improve": 14.804643307028986,
    "time": 17725.2646484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.17150046941011,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.17150046941011,
    "time": 3968.523681640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.086585328122624,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.08633532812262,
    "time": 3600.027099609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.287625,
    "avg_bits_err_improve": 63.712375,
    "time": 67871.72534179688,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* t (* t 1.6e-63))))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84325163339247,
    "avg_bits_err_output": 0.3214174812503605,
    "avg_bits_err_improve": 61.52183415214211,
    "time": 14780.980224609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -1e-128) (* -0.5 (/ (+ b (pow (+ (* b b) (* a (* c -4.0))) 0.5)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (* -0.5 (/ (/ (fma c (* a -4.0) 0.0) (- (sqrt (fma c (* a -4.0) (* b b))) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 1e+159) (* -0.5 (/ (+ b (sqrt (+ (* b b) (* a (* c -4.0))))) a)) (* -0.5 (/ (+ b (hypot (pow (* (* (* a c) (* a c)) 16.0) 0.25) b)) a))))))",
    "output_parens": 88,
    "avg_bits_err_input": 33.79028626161961,
    "avg_bits_err_output": 18.253464882395242,
    "avg_bits_err_improve": 15.53682137922437,
    "time": 39760.017822265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -1e-69) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 3.5e-65) (/ (- (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25)) b) (* a 2.0)) (if (<= c 4.2e+75) (* (fma (pow (fma b b (* (* c -4.0) a)) 0.75) (pow (fma b b (* (* c -4.0) a)) -0.25) (- b)) (/ 0.5 a)) (/ (- (hypot b (* (sqrt (* -4.0 a)) (sqrt c))) b) (* a 2.0)))))",
    "output_parens": 42,
    "avg_bits_err_input": 34.33352993524726,
    "avg_bits_err_output": 24.187155580167413,
    "avg_bits_err_improve": 10.14637435507985,
    "time": 51488.922607421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2295.852294921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.379538544695365,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 39.369913544695365,
    "time": 3296.056640625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- x y) (/ (hypot x y) (/ (+ x y) (hypot x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 19.832435837777357,
    "avg_bits_err_output": 0.034330451565835356,
    "avg_bits_err_improve": 19.79810538621152,
    "time": 14350.347900390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.7066968622617615,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.7066968622617615,
    "time": 15351.75927734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.039,
    "time": 4324.6708984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ b (+ b a))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.020844360937770434,
    "avg_bits_err_output": 0.010875,
    "avg_bits_err_improve": 0.009969360937770434,
    "time": 8446.7783203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(fma x x (pow x 3.0))",
    "output_parens": 2,
    "avg_bits_err_input": 0.016625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.016,
    "time": 6766.329345703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.000375,
    "time": 2002.341064453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ e (+ c (+ b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4018659781302286,
    "avg_bits_err_output": 0.23825,
    "avg_bits_err_improve": 0.16361597813022863,
    "time": 22810.358642578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.15436374729859,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 30.14786374729859,
    "time": 9640.296142578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.62497337338717,
    "avg_bits_err_output": 0.29382312031259017,
    "avg_bits_err_improve": 24.33115025307458,
    "time": 19130.348388671875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (- (pow (/ x (tan x)) 6.0) (pow (cos x) 6.0)) (* (+ (/ x (tan x)) (cos x)) (+ (+ (pow (/ x (tan x)) 4.0) (pow (cos x) 4.0)) (pow (/ (* x (cos x)) (tan x)) 2.0))))",
    "output_parens": 24,
    "avg_bits_err_input": 29.982081294775853,
    "avg_bits_err_output": 29.992036397255724,
    "avg_bits_err_improve": -0.009955102479871414,
    "time": 50351.8603515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00725,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.006625000000000001,
    "time": 2553.88134765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 1e-243) (/ (* (expm1 (* n (log1p (/ i n)))) 100.0) (/ i n)) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 1e-17) (* 100.0 (/ (- (* n (pow (+ 1.0 (/ i n)) n)) n) i)) (* n (/ (+ (* 100.0 (pow (exp n) (log1p (/ i n)))) -100.0) i))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.579275910185075,
    "avg_bits_err_output": 11.329848779582715,
    "avg_bits_err_improve": 36.249427130602356,
    "time": 33492.43359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= b -1.8e+113) (+ (* (pow (hypot c d) -2.0) (* c a)) (fma (/ b (hypot c d)) (* d (/ 1.0 (hypot c d))) 0.0)) (if (<= b -7e-19) (* (/ 1.0 (hypot c d)) (/ (- (* (/ (* b d) (hypot d c)) (/ (* b d) (hypot d c))) (* (/ a (/ (hypot d c) c)) (/ a (/ (hypot d c) c)))) (- (/ (* b d) (hypot d c)) (/ a (/ (hypot d c) c))))) (if (<= b -3.2e-137) (/ (/ (fma b d (* c a)) (hypot c d)) (hypot c d)) (if (<= b 2.1e-150) (+ (/ (* c (/ a (hypot c d))) (hypot c d)) (* d (* b (pow (hypot c d) -2.0)))) (if (<= b 6.2e+88) (* (/ 1.0 (hypot c d)) (/ (- (* (/ (* b d) (hypot d c)) (/ (* b d) (hypot d c))) (* (/ a (/ (hypot d c) c)) (/ a (/ (hypot d c) c)))) (- (/ (* b d) (hypot d c)) (/ a (/ (hypot d c) c))))) (+ (* (pow (hypot c d) -2.0) (* c a)) (fma (/ b (hypot c d)) (* d (/ 1.0 (hypot c d))) 0.0)))))))",
    "output_parens": 100,
    "avg_bits_err_input": 26.56655196064843,
    "avg_bits_err_output": 10.643925412138374,
    "avg_bits_err_improve": 15.922626548510054,
    "time": 27942.75537109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (or (<= c -4.2e+58) (not (<= c -1.5e-197))) (* (/ 1.0 (hypot c d)) (- (* c (/ b (hypot c d))) (* d (/ a (hypot c d))))) (- (/ b (* (/ 1.0 c) (+ (* d d) (* c c)))) (/ (* a (/ d (hypot d c))) (hypot d c))))",
    "output_parens": 27,
    "avg_bits_err_input": 25.48909648430748,
    "avg_bits_err_output": 1.6071203236405167,
    "avg_bits_err_improve": 23.881976160666966,
    "time": 45701.556884765625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037875,
    "avg_bits_err_output": 0.021110521314888556,
    "avg_bits_err_improve": 0.016764478685111443,
    "time": 35842.04248046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (* (pow (- (pow (fma ux maxCos 1.0) 2.0) (* ux ux)) 4.0) (pow (/ 1.0 (fma ux maxCos (+ 1.0 ux))) 4.0))))) 2.0) (/ (/ (pow (pow (fma ux maxCos (- 1.0 ux)) 4.0) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 68,
    "avg_bits_err_input": 13.770385221272825,
    "avg_bits_err_output": 12.081253468157488,
    "avg_bits_err_improve": 1.689131753115337,
    "time": 96535.40966796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* uy (* 2.0 PI))) (sqrt (+ (/ (/ (- (pow (/ 1.0 (+ (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 6.0) (+ 1.0 (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 3.0)))) 2.0) (/ (/ (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 18.0) (+ (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 6.0) (+ 1.0 (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 3.0)))) (+ (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 6.0) (+ 1.0 (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 3.0))))) (+ (/ 1.0 (+ (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 6.0) (+ 1.0 (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 3.0)))) (/ (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 9.0) (+ (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 6.0) (+ 1.0 (pow (* (fma ux maxCos 1.0) (- (fma ux maxCos 1.0) ux)) 3.0)))))) (+ 1.0 (+ (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 2.0)))) (* ux (fma ux maxCos (- 1.0 ux))))))",
    "output_parens": 100,
    "avg_bits_err_input": 13.808443394040077,
    "avg_bits_err_output": 11.415763866431904,
    "avg_bits_err_improve": 2.3926795276081734,
    "time": 75406.14868164062,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- 1.0 ux) (* maxCos zi)) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (exp (log (* 2.0 (* PI uy))))) xi) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.33048018785438493,
    "avg_bits_err_output": 0.33018652432383483,
    "avg_bits_err_improve": 0.0002936635305501034,
    "time": 65466.951171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (/ 1.0 (+ (/ 1.0 (* (+ 1.0 (pow (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))) 2.0)) (* alphax alphax))) (cbrt (pow (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) alphay) 6.0)))) (/ (- 1.0 u0) u0)))))",
    "output_parens": 30,
    "avg_bits_err_input": 0.19787968083262134,
    "avg_bits_err_output": 0.1919052428037488,
    "avg_bits_err_improve": 0.005974438028872542,
    "time": 90286.11474609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* 39.47841760436263 (* u2 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5395669897023756,
    "avg_bits_err_output": 0.510415442678232,
    "avg_bits_err_improve": 0.029151547024143576,
    "time": 25410.839599609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3182523052562121,
    "avg_bits_err_output": 0.3182523052562121,
    "avg_bits_err_improve": 0,
    "time": 23695.072265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (- s) (log (+ -1.0 (/ 1.0 (fma (fma u -1.0 1.0) (/ 1.0 (+ 1.0 (exp (/ PI s)))) (/ u (+ 1.0 (exp (/ (- PI) s)))))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.3291006081264169,
    "avg_bits_err_output": 0.32946066042444777,
    "avg_bits_err_improve": -0.00036005229803087735,
    "time": 37748.171875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(/ 1.0 (+ 1.0 (pow (exp -2.0) (/ (/ x s) 2.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06253090445323171,
    "avg_bits_err_output": 0.06213536204681619,
    "avg_bits_err_improve": 0.00039554240641552496,
    "time": 16639.377197265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (/ 1.0 (/ (/ 1.0 (fma (expm1 (log1p (cosh (/ (fabs x) s)))) 2.0 2.0)) s)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.1602904943487237,
    "avg_bits_err_output": 0.15503585405661238,
    "avg_bits_err_improve": 0.005254640292111312,
    "time": 24242.347412109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6678888130575138,
    "avg_bits_err_output": 0.6697037708744058,
    "avg_bits_err_improve": -0.0018149578168920044,
    "time": 32037.268310546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.151137259172071,
    "avg_bits_err_output": 0.1448124751468385,
    "avg_bits_err_improve": 0.006324784025232483,
    "time": 31224.208984375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.5843473848796834,
    "avg_bits_err_output": 0.379945999668918,
    "avg_bits_err_improve": 2.2044013852107653,
    "time": 38471.194091796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_O (/ sinTheta_i v)))) (* (/ cosTheta_i (sinh (/ 1.0 v))) (* (/ 1.0 v) (/ 0.5 v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45646508831999544,
    "avg_bits_err_output": 0.35203009909097754,
    "avg_bits_err_improve": 0.1044349892290179,
    "time": 40994.589111328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (pow E (+ (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (+ (/ -1.0 v) 0.6931))) (/ 0.5 v))",
    "output_parens": 10,
    "avg_bits_err_input": 0.1017916211995896,
    "avg_bits_err_output": 0.10979553059038011,
    "avg_bits_err_improve": -0.008003909390790515,
    "time": 12094.873291015625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow alpha (* 2.0 PI))) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.47458210654791216,
    "avg_bits_err_output": 0.4324866286536921,
    "avg_bits_err_improve": 0.04209547789422008,
    "time": 96734.7685546875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3262383922843086,
    "avg_bits_err_output": 0.5623148880545401,
    "avg_bits_err_improve": 0.7639235042297685,
    "time": 31762.0341796875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.264057598280885,
    "avg_bits_err_output": 0.200375,
    "avg_bits_err_improve": 12.063682598280886,
    "time": 25304.95849609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (* (/ (/ 0.125 PI) s) (/ (exp (/ (- r) s)) r)) (* (/ 0.75 (* s (* PI 6.0))) (/ (exp (/ (/ r -3.0) s)) r)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.1294345796303651,
    "avg_bits_err_output": 0.13089195930535283,
    "avg_bits_err_improve": -0.001457379674987741,
    "time": 116023.96069335938,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.946681081244515,
    "avg_bits_err_output": 0.7613295599263478,
    "avg_bits_err_improve": 0.18535152131816723,
    "time": 39047.46875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ 1.0 (* cosTheta (/ 1.0 (sqrt (/ (- 1.0 (+ cosTheta cosTheta)) PI))))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.7156405514643401,
    "avg_bits_err_output": 0.4944161356115832,
    "avg_bits_err_improve": 0.22122441585275693,
    "time": 23986.926025390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (/ -1.0 (/ 1.0 (log1p (- u1))))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.541846383590148,
    "avg_bits_err_output": 0.5383373723864513,
    "avg_bits_err_improve": 13.003509011203697,
    "time": 22752.09033203125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (pow (pow (log1p (- u1)) 2.0) 0.25) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.591794425307109,
    "avg_bits_err_output": 0.30692069451770987,
    "avg_bits_err_improve": 13.2848737307894,
    "time": 29857.18505859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- (* alpha alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.192672930035418,
    "avg_bits_err_output": 0.32731616562662263,
    "avg_bits_err_improve": 13.865356764408794,
    "time": 22127.391845703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (/ (log1p (- u0)) (fma alphax sin2phi (* alphay (/ (* alphay cos2phi) alphax)))) (* (* alphay alphay) (- alphax)))",
    "output_parens": 11,
    "avg_bits_err_input": 12.561665502677593,
    "avg_bits_err_output": 0.4848652876800071,
    "avg_bits_err_improve": 12.076800214997586,
    "time": 28158.705322265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -1e+23) (+ (* PI l) -1.0) (if (<= (* PI l) 200000000000.0) (- (* (pow PI 2.0) (/ l PI)) (/ (/ (tan (* PI l)) F) F)) (+ (* (/ l PI) (/ (* l (pow PI 2.0)) l)) -1.0)))",
    "output_parens": 22,
    "avg_bits_err_input": 16.87330777360657,
    "avg_bits_err_output": 0.7305035502512702,
    "avg_bits_err_improve": 16.1428042233553,
    "time": 36759.71142578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.22167019050571782,
    "avg_bits_err_output": 0.15668797821724945,
    "avg_bits_err_improve": 0.06498221228846837,
    "time": 21479.450439453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 14.174091690595713,
    "avg_bits_err_output": 11.006032015589687,
    "avg_bits_err_improve": 3.1680596750060257,
    "time": 40640.917724609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (/ (log (/ (cosh (* PI (* 0.25 f))) (sinh (* PI (* 0.25 f))))) PI) -4.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.491432612763994,
    "avg_bits_err_output": 2.0544919644783706,
    "avg_bits_err_improve": 59.43694064828562,
    "time": 40995.813232421875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (or (<= t -1.18e+55) (not (<= t 1.8e-68))) (/ (* t (sqrt 2.0)) (sqrt (+ (* (+ x 1.0) (* (/ 2.0 (+ x -1.0)) (* t t))) (* l (- (* l (/ (+ x 1.0) (+ x -1.0))) l))))) (/ 1.0 (/ (/ (hypot l (/ (hypot l (sqrt (* t (* t 2.0)))) (sqrt (/ (+ x -1.0) (+ x 1.0))))) (sqrt 2.0)) t)))",
    "output_parens": 36,
    "avg_bits_err_input": 42.840952807663975,
    "avg_bits_err_output": 37.61088665091943,
    "avg_bits_err_improve": 5.230066156744542,
    "time": 49421.010498046875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.980989365904106,
    "avg_bits_err_output": 0.21452161719245771,
    "avg_bits_err_improve": 3.7664677487116482,
    "time": 27807.656005859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(pow (pow (+ 0.5 (/ 0.5 (hypot 1.0 (* (* 2.0 (/ l Om)) (hypot (sin kx) (sin ky)))))) 1.5) 0.3333333333333333)",
    "output_parens": 11,
    "avg_bits_err_input": 1.094125,
    "avg_bits_err_output": 0.008375,
    "avg_bits_err_improve": 1.08575,
    "time": 18934.861328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (* (/ t l) (sqrt 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.622328598079049,
    "avg_bits_err_output": 1.1152231010495657,
    "avg_bits_err_improve": 9.507105497029483,
    "time": 26069.577392578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -5.5e-39) (sqrt (- (* t (* 2.0 (* n U))) (/ l (/ (- Om) (+ (* (* n (* U 2.0)) (* l -2.0)) (* (* n (* U -2.0)) (* (* n l) (/ (- U U*) Om)))))))) (if (<= n -1.24e-265) (sqrt (fma n (* (* U 2.0) t) (* (* l (+ -2.0 (* (- U* U) (/ n Om)))) (* n (* 2.0 (* l (/ U Om))))))) (if (<= n 1.02e-194) (sqrt (+ (* t (* 2.0 (* n U))) (* (fma l -2.0 (* (- U* U) (* l (/ n Om)))) (* 2.0 (* n (/ (* l U) Om)))))) (if (<= n 2.9e-98) (* (sqrt (* U (fma (/ l Om) (+ (* l -2.0) (* (/ l Om) (* n (- U* U)))) t))) (sqrt (* n 2.0))) (if (<= n 4.9e+27) (sqrt (+ (* t (* 2.0 (* n U))) (* (fma l -2.0 (* (- U* U) (* l (/ n Om)))) (* 2.0 (* n (* U (/ l Om))))))) (* (sqrt n) (sqrt (* (* U 2.0) (fma (/ l Om) (fma l -2.0 (* n (* (- U* U) (/ l Om)))) t)))))))))",
    "output_parens": 99,
    "avg_bits_err_input": 34.67842107000908,
    "avg_bits_err_output": 27.449287332041838,
    "avg_bits_err_improve": 7.229133737967242,
    "time": 46897.924072265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -3.6e+165) (* (/ (/ 2.0 k) (* t (/ (tan k) l))) (/ l (* k (sin k)))) (if (<= t 6.2e-154) (/ (/ (/ l (sin k)) (tan k)) (* (/ k l) (* (* t k) 0.5))) (* (/ 2.0 (* k (* t (* (tan k) (/ (sin k) l))))) (/ l k))))",
    "output_parens": 31,
    "avg_bits_err_input": 47.336429510506825,
    "avg_bits_err_output": 3.0985141458103826,
    "avg_bits_err_improve": 44.23791536469644,
    "time": 119414.75830078125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= k -9e-156) (pow (/ (* (cbrt (/ (/ l (sin k)) (+ 2.0 (pow (/ k t) 2.0)))) (cbrt (* l (/ 2.0 (tan k))))) t) 3.0) (if (<= k 3.65e-171) (* l (/ (* 2.0 (/ (/ l t) (sin k))) (* t (* (+ 2.0 (pow (/ k t) 2.0)) (* t (tan k)))))) (/ (/ l t) (* (* (* (sin k) t) (* (tan k) 0.5)) (* (+ 2.0 (pow (/ k t) 2.0)) (/ t l))))))",
    "output_parens": 44,
    "avg_bits_err_input": 32.277784931514574,
    "avg_bits_err_output": 13.943989898004714,
    "avg_bits_err_improve": 18.33379503350986,
    "time": 66249.5029296875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (* (pow 2.0 -0.5) (fma a1 a1 (* a2 a2))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5807400406482597,
    "avg_bits_err_output": 0.5089516937655064,
    "avg_bits_err_improve": 0.07178834688275326,
    "time": 30020.552978515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (sqrt (* 2.0 (* PI n))) (* (sqrt k) (pow (* 2.0 (* PI n)) (* k 0.5))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5224056608305663,
    "avg_bits_err_output": 0.4347226151769355,
    "avg_bits_err_improve": 0.08768304565363078,
    "time": 26677.734130859375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (sinh l) (* 2.0 J)) (cos (/ K 2.0))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.31369576187562,
    "avg_bits_err_output": 0.08271936093777044,
    "avg_bits_err_improve": 17.230976400937852,
    "time": 22497.813720703125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(/ (cos (- (* K (/ (+ m n) 2.0)) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (- l (fabs (- n m))))))",
    "output_parens": 15,
    "avg_bits_err_input": 15.274467448716402,
    "avg_bits_err_output": 15.260108995502241,
    "avg_bits_err_improve": 0.01435845321416096,
    "time": 31879.38037109375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.00421936093777,
    "avg_bits_err_output": 8.30146936093777,
    "avg_bits_err_improve": 9.702750000000002,
    "time": 34114.2900390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (or (<= (/ h l) -1e-73) (not (<= (/ h l) 0.0))) (* w0 (sqrt (- 1.0 (/ h (/ l (* (* M (/ D d)) (* (* M (/ D d)) 0.25))))))) (* w0 (sqrt (+ 1.0 (* (* (/ M d) (* D 0.5)) (/ (* (/ M d) (* D -0.5)) (/ l h)))))))",
    "output_parens": 30,
    "avg_bits_err_input": 14.127842899506629,
    "avg_bits_err_output": 9.106916412089738,
    "avg_bits_err_improve": 5.02092648741689,
    "time": 49797.352294921875,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (/ c0 (* (sqrt (- V)) (sqrt (/ l (- A))))) (if (<= (* V l) -1e-260) (* (sqrt (- A)) (/ c0 (sqrt (* l (- V))))) (if (<= (* V l) 1e-318) (/ c0 (* (sqrt (- V)) (sqrt (/ l (- A))))) (if (<= (* V l) 5e+302) (* c0 (/ (sqrt A) (sqrt (* V l)))) (/ c0 (* (sqrt l) (sqrt (/ V A))))))))",
    "output_parens": 44,
    "avg_bits_err_input": 19.331082942441245,
    "avg_bits_err_output": 7.173870600411247,
    "avg_bits_err_improve": 12.157212342029998,
    "time": 34568.55224609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= D -9.2e+195) (+ (* (sqrt (- (pow (/ (/ (* c0 (/ d D)) (* w h)) (/ D d)) 2.0) (* M M))) (/ (/ c0 2.0) w)) (* c0 (* (/ 0.5 w) (* (/ c0 (* w h)) (* (/ d D) (/ d D)))))) (if (<= D -9.8e-148) (* c0 (* (/ 0.5 w) (/ M (/ (- (* (/ (/ c0 (* D h)) D) (* d (/ d w))) (sqrt (* (+ M (* (/ (/ c0 (* D h)) D) (* d (/ d w)))) (- (* (/ (/ c0 (* D h)) D) (* d (/ d w))) M)))) M)))) (if (<= D -5e-148) (* c0 (* (/ 0.5 w) (/ M (/ (- (/ (/ c0 D) (/ (* D (/ (* w h) d)) d)) (sqrt (- (pow (/ (/ c0 D) (/ (* D (/ (* w h) d)) d)) 2.0) (* M M)))) M)))) (if (<= D 2.7e-266) (* c0 (* (/ 0.5 w) (/ M (/ (- (* d (/ d (* w (* (* D h) (/ D c0))))) (sqrt (- (pow (* d (/ d (* w (* (* D h) (/ D c0))))) 2.0) (* M M)))) M)))) (if (<= D 1.02e-237) (log (pow (sqrt (exp (/ c0 w))) (fma (/ c0 w) (* (/ d h) (/ d (* D D))) (sqrt (- (pow (* (/ (* c0 d) w) (/ d (* h (* D D)))) 2.0) (* M M)))))) (if (<= D 7.5e+72) (* c0 (* (/ 0.5 w) (/ M (/ (- (* (/ d w) (/ (* c0 d) (* D (* D h)))) (sqrt (- (pow (* (/ d w) (/ (* c0 d) (* D (* D h)))) 2.0) (* M M)))) M)))) (+ (* (sqrt (- (pow (/ (/ (* c0 (/ d D)) (* w h)) (/ D d)) 2.0) (* M M))) (/ (/ c0 2.0) w)) (* c0 (* (/ (/ (* c0 (/ d D)) (* w h)) (/ D d)) (/ 0.5 w))))))))))",
    "output_parens": 173,
    "avg_bits_err_input": 59.43901740849568,
    "avg_bits_err_output": 36.4144276157337,
    "avg_bits_err_improve": 23.02458979276198,
    "time": 93311.33349609375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d -8.4e-215) (* (/ (sqrt (- d)) (sqrt (- h))) (* (/ (sqrt (- d)) (sqrt (- l))) (+ 1.0 (* 0.5 (/ h (* -4.0 (/ l (pow (* M (/ D d)) 2.0)))))))) (if (<= d -5e-310) (* (* (/ (sqrt (- d)) (sqrt (- l))) (sqrt (/ d h))) (- 1.0 (pow (/ (* D (* (sqrt (* 0.5 (/ h l))) (* 0.5 M))) d) 2.0))) (if (<= d 2.1e-168) (+ (/ (* (* h (pow (* M (/ D d)) 2.0)) -0.125) (* l (/ (sqrt (* h l)) d))) (/ d (sqrt (* h l)))) (if (<= d 1.15e+192) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (pow (/ (* D (* (* 0.5 M) (/ (sqrt (* h 0.5)) (sqrt l)))) d) 2.0))) (* (/ d (sqrt (* h l))) (- 1.0 (/ (* h (* (pow (* M (/ D d)) 2.0) 0.125)) l)))))))",
    "output_parens": 87,
    "avg_bits_err_input": 26.404284773602452,
    "avg_bits_err_output": 16.07280028822301,
    "avg_bits_err_improve": 10.331484485379441,
    "time": 123519.04760742188,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(if (<= x -1000.0) (/ (+ 0.5 (/ -0.5 (hypot 1.0 x))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (if (<= x 2.0) (/ (/ (* (+ -2.0 (* (/ -0.5 (hypot 1.0 x)) 4.0)) (* x x)) (* (* (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 2.0) (* 4.0 (fma x x 1.0))) -4.0)) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))) (/ (+ (+ 0.5 (/ (* 0.5 (hypot 1.0 x)) (fma x x 1.0))) -1.0) (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))))",
    "output_parens": 46,
    "avg_bits_err_input": 15.707598007090736,
    "avg_bits_err_output": 0.018054323438491594,
    "avg_bits_err_improve": 15.689543683652245,
    "time": 38539.681396484375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9818340531677464,
    "avg_bits_err_output": 0.011021240625180291,
    "avg_bits_err_improve": 0.9708128125425661,
    "time": 7497.54150390625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (- 1.0 (* v v)))) (* t (sqrt (fma (* v v) -6.0 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.44198733279738894,
    "avg_bits_err_output": 0.3030854919630263,
    "avg_bits_err_improve": 0.13890184083436263,
    "time": 13860.51611328125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt 2.0) 4.0) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.01320366957750995,
    "avg_bits_err_output": 0.012969360937770435,
    "avg_bits_err_improve": 0.00023430863973951561,
    "time": 13683.450927734375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(expm1 (log1p (acos (- (/ (fma v (* v -5.0) 1.0) (- 1.0 (* v v)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5152070115660735,
    "avg_bits_err_output": 0.5163492338097764,
    "avg_bits_err_improve": -0.0011422222437028617,
    "time": 39047.561767578125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ a (/ (+ (* k (+ k 10.0)) 1.0) (pow k m)))",
    "output_parens": 6,
    "avg_bits_err_input": 1.9546565265742808,
    "avg_bits_err_output": 1.9546990078246416,
    "avg_bits_err_improve": -4.248125036077077e-05,
    "time": 21259.9453125,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (exp (log1p (exp (/ (+ Vef (+ Ev (- EAccept mu))) KbT))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.021912583770241124,
    "avg_bits_err_output": 0.021577021498457114,
    "avg_bits_err_improve": 0.00033556227178400955,
    "time": 12201.33447265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18203655590132128,
    "avg_bits_err_output": 0.016064751212469128,
    "avg_bits_err_improve": 0.16597180468885214,
    "time": 7379.67822265625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* a (fma a a a)) (* (* b b) (- 1.0 (* a 3.0)))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18997040104138205,
    "avg_bits_err_output": 0.023949353162100482,
    "avg_bits_err_improve": 0.16602104787928157,
    "time": 19672.99853515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18842033202660644,
    "avg_bits_err_output": 0.027406390433157585,
    "avg_bits_err_improve": 0.16101394159344884,
    "time": 21123.51318359375,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ (/ x (hypot x (* p 2.0))) 1.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 13.208008860755024,
    "avg_bits_err_output": 13.20363225800028,
    "avg_bits_err_improve": 0.004376602754744496,
    "time": 22087.662353515625,
    "seed": 17,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.59321119733226,
    "avg_bits_err_output": 0.040375,
    "avg_bits_err_improve": 40.55283619733226,
    "time": 6212.348876953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (or (<= x -2e-8) (not (<= x 1e-8))) (/ (- x (sin x)) (- x (tan x))) (* (/ (+ x (sin x)) (- (fma x x (/ (pow x 3.0) (tan x))))) (* x (/ x (tan x)))))",
    "output_parens": 22,
    "avg_bits_err_input": 31.68612750779363,
    "avg_bits_err_output": 28.716547546973754,
    "avg_bits_err_improve": 2.9695799608198747,
    "time": 36634.232421875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.75e-127) (/ (- (+ (/ b_2 (/ (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ (- (* a (- c c)) (* a c)) (sqrt (- (* b_2 b_2) (* a c))))) b_2) a) (if (<= b_2 1.2e+166) (/ (/ (* a (- c)) a) (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))) (/ c (- (- (hypot b_2 (sqrt (* a c)))) b_2))))",
    "output_parens": 37,
    "avg_bits_err_input": 33.730158327203675,
    "avg_bits_err_output": 20.097199845985077,
    "avg_bits_err_improve": 13.632958481218598,
    "time": 28667.181396484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -6e+125) (/ c (- (hypot b_2 (sqrt (* c a))) b_2)) (if (<= b_2 -6.8e-168) (/ (/ (* c (- a)) (+ b_2 (/ (- (* c a) (* b_2 b_2)) (sqrt (- (* b_2 b_2) (* c a)))))) a) (/ (- (- (/ a (/ (sqrt (- (* b_2 b_2) (* c a))) c)) (* b_2 (/ b_2 (sqrt (- (* b_2 b_2) (* c a)))))) b_2) a)))",
    "output_parens": 37,
    "avg_bits_err_input": 33.53854291580848,
    "avg_bits_err_output": 20.524449234097595,
    "avg_bits_err_improve": 13.014093681710882,
    "time": 29545.37890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 31.106342939284794,
    "avg_bits_err_output": 0.12487537656727775,
    "avg_bits_err_improve": 30.981467562717516,
    "time": 22125.4482421875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(fma (- (pow x (/ 0.3333333333333333 n))) (pow x (/ 0.6666666666666666 n)) (fma 0.0 (pow x (/ 1.0 n)) (exp (/ (log1p x) n))))",
    "output_parens": 12,
    "avg_bits_err_input": 32.4629577493785,
    "avg_bits_err_output": 32.19869402570143,
    "avg_bits_err_improve": 0.2642637236770753,
    "time": 44362.209716796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.500741789756933,
    "avg_bits_err_output": 0.006875,
    "avg_bits_err_improve": 29.493866789756932,
    "time": 36268.503662109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 (- -1.0 x)) x)",
    "output_parens": 3,
    "avg_bits_err_input": 14.328016796907551,
    "avg_bits_err_output": 0.07607312031259014,
    "avg_bits_err_improve": 14.251943676594962,
    "time": 12197.989013671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -1.85e-106) (fma (sin x) (- (sin eps)) (* (cos x) (+ (cos eps) -1.0))) (if (<= x 1.52e-30) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (- (fma (cos x) (cos eps) (- (cos x))) (* (sin x) (sin eps)))))",
    "output_parens": 29,
    "avg_bits_err_input": 39.60068821796507,
    "avg_bits_err_output": 1.0451153603862913,
    "avg_bits_err_improve": 38.55557285757878,
    "time": 36554.540771484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (<= x 6.4e+230) (/ (/ (+ x (+ x 1.0)) (+ (cbrt (+ x 1.0)) (cbrt x))) (+ (pow (cbrt (+ x 1.0)) 4.0) (fma x (cbrt x) (pow (* (cbrt (+ x 1.0)) (/ x (pow (cbrt x) 2.0))) 2.0)))) (/ 1.0 (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (exp (* (log1p x) 0.6666666666666666)))))",
    "output_parens": 33,
    "avg_bits_err_input": 29.750049245808967,
    "avg_bits_err_output": 4.611278938920585,
    "avg_bits_err_improve": 25.138770306888382,
    "time": 26661.388671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 29.96797140621094,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 29.96759640621094,
    "time": 9031.45751953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -5e-150) (* (- (hypot (* (sqrt (* a -4.0)) (sqrt (fabs c))) b) b) (/ 0.5 a)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (* (/ 0.5 a) (/ (* c (* 4.0 a)) (- (- b) (hypot b (sqrt (* c (* a -4.0))))))) (* (/ 0.5 a) (- (hypot (sqrt (fabs (* c (* a -4.0)))) b) b))))",
    "output_parens": 48,
    "avg_bits_err_input": 33.70671116528833,
    "avg_bits_err_output": 17.964201499023144,
    "avg_bits_err_improve": 15.742509666265189,
    "time": 39934.0927734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -8.2e+70) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= c 4e+67) (* -0.5 (/ (+ b (hypot (pow (* (* c a) (* (* c a) 16.0)) 0.25) b)) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b)) a))))",
    "output_parens": 29,
    "avg_bits_err_input": 33.13804826137772,
    "avg_bits_err_output": 25.052581284225397,
    "avg_bits_err_improve": 8.085466977152322,
    "time": 39315.916259765625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.182643001630375,
    "avg_bits_err_output": 0.02356372187554087,
    "avg_bits_err_improve": 61.159079279754835,
    "time": 10341.4208984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(+ (- (fma n (log1p n) -1.0) (* n (log n))) (log (+ n 1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 63.01021685974004,
    "avg_bits_err_output": 0.6867789625694427,
    "avg_bits_err_improve": 62.3234378971706,
    "time": 33304.7353515625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.60315345304578,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 58.59565345304578,
    "time": 12206.51220703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(* (log (exp (- 1.0 (/ x (tan x))))) (/ 1.0 x))",
    "output_parens": 7,
    "avg_bits_err_input": 59.887347463261065,
    "avg_bits_err_output": 59.89020444547641,
    "avg_bits_err_improve": -0.002856982215341475,
    "time": 45437.192138671875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (/ eps (/ (expm1 (* eps b)) (expm1 (* eps (+ b a))))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.538691125731525,
    "avg_bits_err_output": 28.942098821662103,
    "avg_bits_err_improve": 31.59659230406942,
    "time": 34891.029541015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.86726586985108,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 40.85764086985108,
    "time": 8954.3076171875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.64070708086842,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.639832080868416,
    "time": 3346.7373046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.486760751671497,
    "avg_bits_err_output": 0.022180644893423293,
    "avg_bits_err_improve": 29.464580106778072,
    "time": 9774.286376953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(fma (/ (+ (exp (- x)) -2.0) (/ (+ (exp (- x)) 2.0) (+ (pow (exp x) -2.0) -4.0))) (/ 1.0 (- (+ (exp (- x)) -2.0) (exp x))) (* (pow (exp x) 2.0) (/ -1.0 (- (+ (exp (- x)) -2.0) (exp x)))))",
    "output_parens": 27,
    "avg_bits_err_input": 29.683117156777303,
    "avg_bits_err_output": 29.286326108680708,
    "avg_bits_err_improve": 0.3967910480965955,
    "time": 47034.152099609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(fma (+ (/ 2.0 x) -1.0) (/ -1.0 (- 1.0 x)) (/ 1.0 (+ x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 9.791196462515073,
    "avg_bits_err_output": 9.768446418692164,
    "avg_bits_err_improve": 0.02275004382290824,
    "time": 61128.818359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (<= eps -0.15) (- (/ (+ (tan x) (tan eps)) (- 1.0 (* (tan x) (tan eps)))) (tan x)) (if (<= eps 3.2e-9) (/ (sin eps) (* (cos x) (cos (+ x eps)))) (- (/ (+ (tan x) (tan eps)) (- 1.0 (/ (tan x) (/ (cos eps) (sin eps))))) (tan x))))",
    "output_parens": 32,
    "avg_bits_err_input": 37.32211213782556,
    "avg_bits_err_output": 0.5278890021599951,
    "avg_bits_err_improve": 36.79422313566557,
    "time": 42387.584716796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (fma (- -1.0 x) (/ -1.0 (sqrt (+ 1.0 x))) (sqrt x)))",
    "output_parens": 7,
    "avg_bits_err_input": 29.89520388300476,
    "avg_bits_err_output": 0.1363704890651142,
    "avg_bits_err_improve": 29.758833393939646,
    "time": 21962.8642578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (cos x) (sin eps) (* (sin x) (+ (cos eps) -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 37.076021656316286,
    "avg_bits_err_output": 0.39816943011774464,
    "avg_bits_err_improve": 36.67785222619854,
    "time": 26718.162841796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.768123257986957,
    "avg_bits_err_output": 0.11248120312590146,
    "avg_bits_err_improve": 19.655642054861055,
    "time": 26869.415283203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 14.990133460485552,
    "avg_bits_err_output": 0.4292619474256083,
    "avg_bits_err_improve": 14.560871513059944,
    "time": 17269.630126953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.77134824367137,
    "avg_bits_err_output": 1.4313300565131444,
    "avg_bits_err_improve": 28.340018187158226,
    "time": 24618.5244140625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (fma (/ m v) (- m) (/ m v)) -1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07404492500144229,
    "avg_bits_err_output": 0.06766748125036057,
    "avg_bits_err_improve": 0.006377443751081721,
    "time": 25752.845947265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b (- a)) (/ (/ 1.0 a) b))",
    "output_parens": 5,
    "avg_bits_err_input": 16.724698021241284,
    "avg_bits_err_output": 0.2743812947360936,
    "avg_bits_err_improve": 16.45031672650519,
    "time": 15449.8154296875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ angle (/ 180.0 PI)))) 2.0) (pow (* (sin (* PI (* angle 0.005555555555555556))) b) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.318325708829597,
    "avg_bits_err_output": 20.294066562359397,
    "avg_bits_err_improve": 0.02425914647020022,
    "time": 46321.149169921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(fma (+ b a) (* (- b a) (sin (/ (* (* (pow PI 3.0) 1.3717421124828533e-6) angle) (pow (* PI 0.011111111111111112) 2.0)))) 0.0)",
    "output_parens": 11,
    "avg_bits_err_input": 31.073264448467892,
    "avg_bits_err_output": 21.34648168162362,
    "avg_bits_err_improve": 9.726782766844273,
    "time": 46025.184326171875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (fma (* PI (pow (* (pow (cbrt (* angle 0.005555555555555556)) 2.0) (/ 1.0 (log1p (expm1 (cbrt (* angle 0.005555555555555556)))))) 2.0)) (cbrt (* angle 0.005555555555555556)) 0.0))) 2.0))",
    "output_parens": 23,
    "avg_bits_err_input": 20.21627943539432,
    "avg_bits_err_output": 19.966221184378927,
    "avg_bits_err_improve": 0.2500582510153926,
    "time": 56569.746826171875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (* (/ m v) (- 1.0 m))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17499060156295074,
    "avg_bits_err_output": 0.17195996250072115,
    "avg_bits_err_improve": 0.0030306390622295842,
    "time": 20094.280517578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (/ (tan x) (/ 1.0 (tan x)))) (+ 1.0 (/ (tan x) (/ 1.0 (tan x)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.32144531176572927,
    "avg_bits_err_output": 0.33857318305576467,
    "avg_bits_err_improve": -0.0171278712900354,
    "time": 31650.577392578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13386560156295074,
    "avg_bits_err_output": 0.13386560156295074,
    "avg_bits_err_improve": 0,
    "time": 25251.854248046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (log (exp (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (* (cos phi2) (fma (cos lambda2) (cos lambda1) (* (sin lambda1) (sin lambda2))))))))) R)",
    "output_parens": 17,
    "avg_bits_err_input": 16.50614705770733,
    "avg_bits_err_output": 3.48641911663218,
    "avg_bits_err_improve": 13.01972794107515,
    "time": 43858.714111328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -2e-34) (/ (* (/ -0.5 a) (fma b b (- (fma b b (* a (* c -4.0)))))) (+ b (sqrt (pow (cbrt (fma b b (* a (* c -4.0)))) 3.0)))) (* (/ -0.5 a) (- b (pow (pow (fma (* a c) -4.0 (* b b)) 1.5) 0.3333333333333333))))",
    "output_parens": 33,
    "avg_bits_err_input": 52.60920530351322,
    "avg_bits_err_output": 50.01771060327821,
    "avg_bits_err_improve": 2.5914947002350104,
    "time": 46321.1943359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* c -2.0) (+ b (sqrt (fma b b (* -4.0 (* c a))))))",
    "output_parens": 7,
    "avg_bits_err_input": 28.32917868863751,
    "avg_bits_err_output": 0.2730142859392126,
    "avg_bits_err_improve": 28.056164402698297,
    "time": 33620.617431640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* -4.0 a)))) b) (* a 2.0)) -2e-20) (/ -0.5 (* (/ a (- (* b b) (fma a (* -4.0 c) (* b b)))) (/ 1.0 (/ 1.0 (+ b (sqrt (fma a (* -4.0 c) (* b b)))))))) (/ (+ (- b) (pow (pow (fma c (* -4.0 a) (* b b)) 1.5) 0.3333333333333333)) (* a 2.0)))",
    "output_parens": 34,
    "avg_bits_err_input": 43.78874762707837,
    "avg_bits_err_output": 40.92668727831392,
    "avg_bits_err_improve": 2.8620603487644516,
    "time": 84156.1865234375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-190) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (/ (/ (* c (* a -4.0)) (* a 2.0)) (+ b (hypot b (sqrt (* a (* c -4.0)))))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+246) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 83,
    "avg_bits_err_input": 33.70310996181358,
    "avg_bits_err_output": 20.517150743995334,
    "avg_bits_err_improve": 13.185959217818247,
    "time": 37529.661376953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8872506754157247,
    "avg_bits_err_output": 0.23579353243806153,
    "avg_bits_err_improve": 0.6514571429776631,
    "time": 38969.2626953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (/ (+ (pow (* 8.0 (pow (+ 1.0 (pow (exp -2.0) x)) -3.0)) 2.0) -1.0) (fma 8.0 (pow (+ 1.0 (pow (exp -2.0) x)) -3.0) 1.0)) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (pow (cbrt (+ 1.0 (/ -2.0 (- -1.0 (pow (exp -2.0) x))))) 3.0)))",
    "output_parens": 26,
    "avg_bits_err_input": 29.361745493776258,
    "avg_bits_err_output": 29.355839000903426,
    "avg_bits_err_improve": 0.005906492872831848,
    "time": 45485.963623046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.118687058443555,
    "avg_bits_err_output": 0.01425,
    "avg_bits_err_improve": 58.10443705844356,
    "time": 9201.73486328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.0167606326519,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 58.008885632651904,
    "time": 10002.899169921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.007469360937770434,
    "avg_bits_err_output": 0.006875,
    "avg_bits_err_improve": 0.0005943609377704337,
    "time": 9590.282470703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.55375,
    "avg_bits_err_output": 0.083125,
    "avg_bits_err_improve": 31.470625000000002,
    "time": 6663.810302734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.59061824405141,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 58.58311824405141,
    "time": 12584.023681640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (* (/ 1.0 x) (+ 1.0 (sqrt (- 1.0 (* x x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.020625,
    "avg_bits_err_output": 0.020698120312590145,
    "avg_bits_err_improve": -7.312031259014418e-05,
    "time": 6568.72705078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (/ 1.0 (hypot 1.0 (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.13032312031259013,
    "avg_bits_err_output": 0.13074060156295075,
    "avg_bits_err_improve": -0.00041748125036061845,
    "time": 43742.45556640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cbrt (pow (hypot 1.0 (* (/ eh ew) (tan t))) -3.0))) (* (* eh (sin t)) (sin (atan (/ (* eh (- (tan t))) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.12325,
    "avg_bits_err_output": 0.12723120312590147,
    "avg_bits_err_improve": -0.003981203125901472,
    "time": 44763.280517578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (sin (* phi2 0.5)) (- (sin (* 0.5 phi1)))) (* (- lambda1 lambda2) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 39.03542395506298,
    "avg_bits_err_output": 0.12696623289966283,
    "avg_bits_err_improve": 38.90845772216332,
    "time": 32931.05322265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 14.14076196427245,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 14.14001196427245,
    "time": 10768.021484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (+ (- (cos delta) (* (* (cos phi1) (* (sin delta) (cos theta))) (sin phi1))) (* (cos delta) (+ (/ (cos (* phi1 2.0)) 2.0) -0.5)))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.15376049262704158,
    "avg_bits_err_output": 0.18129383907942612,
    "avg_bits_err_improve": -0.027533346452384533,
    "time": 56497.4990234375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ c (- (- b) (sqrt (+ (* c (* a -3.0)) (* b b)))))",
    "output_parens": 8,
    "avg_bits_err_input": 52.643515077095074,
    "avg_bits_err_output": 0.08193872187554087,
    "avg_bits_err_improve": 52.561576355219536,
    "time": 34090.67578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* a -3.0) c) (+ b (sqrt (+ (* b b) (* a (* -3.0 c)))))) (* a 3.0))",
    "output_parens": 11,
    "avg_bits_err_input": 28.449788997139287,
    "avg_bits_err_output": 0.44365246134175973,
    "avg_bits_err_improve": 28.006136535797527,
    "time": 36968.205322265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) -5e-21) (/ (* (fma b b (* -3.0 (* a c))) (/ (* b (fma (/ (- (pow (fma b b (* c (* a -3.0))) 9.0) (pow (* b (fma b b (* c (* a -3.0)))) 6.0)) (+ (pow (fma b b (* c (* a -3.0))) 4.5) (pow (* b (fma b b (* c (* a -3.0)))) 3.0))) (/ 1.0 (+ (pow (fma b b (* c (* a -3.0))) 3.0) (fma (pow (fma b b (* c (* a -3.0))) 2.5) b (pow (* b (fma b b (* c (* a -3.0)))) 2.0)))) (fma (- b) (fma b b (* c (* a -3.0))) (* b (fma b b (* c (* a -3.0))))))) (* b (pow (fma b b (* -3.0 (* a c))) 2.0)))) (* 3.0 a)) (/ (+ (- b) (sqrt (pow (pow (fma b b (* c (* a -3.0))) 3.0) 0.3333333333333333))) (* 3.0 a)))",
    "output_parens": 80,
    "avg_bits_err_input": 43.86024444686531,
    "avg_bits_err_output": 41.04210763106507,
    "avg_bits_err_improve": 2.818136815800237,
    "time": 68954.15307617188,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -2.45e-126) (/ 0.3333333333333333 (/ a (- (hypot b (sqrt (fabs (* a (* c -3.0))))) b))) (if (<= b 0.00072) (/ (- c) (+ b (hypot b (sqrt (* c (* a -3.0)))))) (/ (/ (* c (* a -3.0)) (+ b (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0))))",
    "output_parens": 29,
    "avg_bits_err_input": 33.75598930418483,
    "avg_bits_err_output": 16.621834662560882,
    "avg_bits_err_improve": 17.134154641623947,
    "time": 42303.95361328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (+ (* (* (sin lambda1) (cos lambda2)) (cos phi2)) (* (cos phi2) (* (cos lambda1) (sin (- lambda2))))) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (fma (sin lambda2) (sin lambda1) (* (cos lambda2) (cos lambda1))))))",
    "output_parens": 27,
    "avg_bits_err_input": 12.83495008420797,
    "avg_bits_err_output": 0.17819677805026965,
    "avg_bits_err_improve": 12.6567533061577,
    "time": 54364.9775390625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (- 1.0 (+ x (* (/ (+ 1.0 x) x) (- -1.0 x)))) (* (/ (+ 1.0 x) x) (- 1.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.214774936467396,
    "avg_bits_err_output": 25.28710477306995,
    "avg_bits_err_improve": 3.9276701633974476,
    "time": 62854.56005859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01325,
    "avg_bits_err_output": 0.01325,
    "avg_bits_err_improve": 0,
    "time": 10138.534912109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 1.0 (/ (+ x -1.0) 2.0)) (- -1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.2279152119211,
    "avg_bits_err_output": 0.076125,
    "avg_bits_err_improve": 14.151790211921101,
    "time": 24981.150146484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -5e-310) (/ (* (sqrt (* F (+ A (- C (hypot B (- A C)))))) (- (sqrt (fma B (* B 2.0) (* C (* A -8.0)))))) (fma B B (* A (* C -4.0)))) (sqrt (* (/ 1.0 (fma -4.0 (* C A) (* B B))) (* (* F 2.0) (- (+ C A) (hypot B (- A C)))))))",
    "output_parens": 31,
    "avg_bits_err_input": 52.022102674683836,
    "avg_bits_err_output": 44.108315444607456,
    "avg_bits_err_improve": 7.91378723007638,
    "time": 56944.94775390625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.622284869091633,
    "avg_bits_err_output": 13.939335853603566,
    "avg_bits_err_improve": 15.682949015488067,
    "time": 26171.171142578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F 7.8e-293) (/ (* (sqrt (* 2.0 (+ (* B (* F B)) (* F (* A (* C -4.0)))))) (- (sqrt (+ A (+ C (hypot B (- A C))))))) (+ (* B B) (* -4.0 (* A C)))) (/ (* (sqrt (+ A (+ C (hypot B (- A C))))) (* (sqrt (* 2.0 (fma (* A -4.0) C (* B B)))) (- (sqrt F)))) (+ (* B B) (* -4.0 (* A C)))))",
    "output_parens": 41,
    "avg_bits_err_input": 52.20052644554488,
    "avg_bits_err_output": 41.16734722826323,
    "avg_bits_err_improve": 11.03317921728165,
    "time": 47070.970458984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt (/ 0.5 a)) (cbrt (/ 1.0 g)))",
    "output_parens": 5,
    "avg_bits_err_input": 16.173155062949267,
    "avg_bits_err_output": 0.832249563462987,
    "avg_bits_err_improve": 15.34090549948628,
    "time": 27291.531005859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -2e-279) (+ (/ (cbrt (- (hypot g h) g)) (cbrt (* a 2.0))) (cbrt (* (+ g (hypot g h)) (/ -0.5 a)))) (+ (/ 1.0 (cbrt (/ (/ a (- (hypot g h) g)) 0.5))) (* (cbrt (* (+ g (hypot g h)) -0.5)) (/ 1.0 (cbrt a)))))",
    "output_parens": 28,
    "avg_bits_err_input": 36.10844214362376,
    "avg_bits_err_output": 3.0575164333642926,
    "avg_bits_err_improve": 33.05092571025947,
    "time": 37869.3193359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.990130264069442,
    "avg_bits_err_output": 0.03354041406655652,
    "avg_bits_err_improve": 0.9565898500028855,
    "time": 30777.532470703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- a (log (+ (exp a) (exp b)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.6863101077719279,
    "avg_bits_err_output": 0.5776440522600175,
    "avg_bits_err_improve": 0.10866605551191044,
    "time": 11521.495849609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b1) (/ a2 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-250) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ (* a1 (/ a2 b2)) b1) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+306) (/ (* a1 a2) (* b1 b2)) (/ (/ a2 b2) (/ b1 a1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.756077792918333,
    "avg_bits_err_output": 3.0174652989298614,
    "avg_bits_err_improve": 8.738612493988471,
    "time": 12001.623046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4106678932626421,
    "avg_bits_err_output": 0.3514693609377705,
    "avg_bits_err_improve": 0.0591985323248716,
    "time": 10059.011474609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(log1p (+ x (+ (hypot 1.0 x) -1.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 53.188717752877125,
    "avg_bits_err_output": 15.54360469837109,
    "avg_bits_err_improve": 37.645113054506034,
    "time": 17980.430419921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.688435062155849,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.688435062155849,
    "time": 1894.194580078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (pow (+ 1.0 x) -0.5) (pow (- 1.0 x) -0.5))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.01525,
    "avg_bits_err_output": 0.01675,
    "avg_bits_err_improve": -0.0015000000000000013,
    "time": 20081.311279296875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1249.103759765625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (pow (* r w) 2.0) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 13.409354168210111,
    "avg_bits_err_output": 0.23620603164569492,
    "avg_bits_err_improve": 13.173148136564416,
    "time": 47816.089599609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (fma (/ 4.0 (fma x1 x1 1.0)) (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 37,
    "avg_bits_err_input": 0.5119075524366935,
    "avg_bits_err_output": 0.31808099657534694,
    "avg_bits_err_improve": 0.19382655586134656,
    "time": 83481.52124023438,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= u -1e+80) (* (/ (- t1) (+ u t1)) (/ v (+ u t1))) (if (<= u 6.5e+83) (/ v (* (+ u t1) (- -1.0 (/ u t1)))) (/ (- t1) (/ (+ u t1) (/ v (+ u t1))))))",
    "output_parens": 21,
    "avg_bits_err_input": 18.199758453382344,
    "avg_bits_err_output": 2.153465259074298,
    "avg_bits_err_improve": 16.046293194308046,
    "time": 7703.7255859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma (pow x 3.0) -0.12900613773279798 (* x 0.954929658551372))",
    "output_parens": 3,
    "avg_bits_err_input": 0.24974869440854447,
    "avg_bits_err_output": 0.22251616037711813,
    "avg_bits_err_improve": 0.027232534031426336,
    "time": 22096.901611328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002625,
    "avg_bits_err_output": 0.002625,
    "avg_bits_err_improve": 0,
    "time": 13202.875244140625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI 0.5) (+ b a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 14.513709106071017,
    "avg_bits_err_output": 0.24380225625468735,
    "avg_bits_err_improve": 14.26990684981633,
    "time": 44900.21044921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (* (+ (/ 1.0 eps) -1.0) (exp (* x (- -1.0 eps))))) 2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 29.52543822715212,
    "avg_bits_err_output": 29.52543822715212,
    "avg_bits_err_improve": 0,
    "time": 44296.95654296875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.005375,
    "avg_bits_err_improve": 0.0063750000000000005,
    "time": 18433.16796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))) (+ 2.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.017875,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 0.007999999999999998,
    "time": 33600.479736328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.047625,
    "avg_bits_err_output": 0.087,
    "avg_bits_err_improve": -0.03937499999999999,
    "time": 3702.17822265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 2739.461181640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 4069.511962890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4547.123046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.856874630548388,
    "avg_bits_err_output": 0.2415,
    "avg_bits_err_improve": 7.615374630548388,
    "time": 29185.224365234375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.5660326112087155,
    "avg_bits_err_output": 7.5660326112087155,
    "avg_bits_err_improve": 0,
    "time": 19776.212890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (* eps 2.0) x) (* eps eps))",
    "output_parens": 4,
    "avg_bits_err_input": 15.333745352421747,
    "avg_bits_err_output": 0.014634601949631355,
    "avg_bits_err_improve": 15.319110750472117,
    "time": 17593.4072265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5732909029815776,
    "avg_bits_err_output": 0.39083571563527697,
    "avg_bits_err_improve": 3.1824551873463007,
    "time": 27515.565185546875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.903628770797948,
    "avg_bits_err_output": 0.020724248439933913,
    "avg_bits_err_improve": 14.882904522358015,
    "time": 5614.635498046875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.26257073515229,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.26257073515229,
    "time": 3998.736328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.62585231336359,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 38.625352313363585,
    "time": 3774.59326171875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.295125,
    "avg_bits_err_improve": 63.704875,
    "time": 63904.07861328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* t (* t 1.6e-63))))",
    "output_parens": 4,
    "avg_bits_err_input": 61.843251581151,
    "avg_bits_err_output": 0.3198962406251803,
    "avg_bits_err_improve": 61.52335534052582,
    "time": 14786.183837890625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -8.2e+70) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= c 4e+67) (* -0.5 (/ (+ b (hypot (pow (* (* c a) (* (* c a) 16.0)) 0.25) b)) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b)) a))))",
    "output_parens": 29,
    "avg_bits_err_input": 33.13804826137772,
    "avg_bits_err_output": 25.052581284225397,
    "avg_bits_err_improve": 8.085466977152322,
    "time": 43420.12353515625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-190) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (/ (/ (* c (* a -4.0)) (* a 2.0)) (+ b (hypot b (sqrt (* a (* c -4.0)))))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+246) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 83,
    "avg_bits_err_input": 33.70310996181358,
    "avg_bits_err_output": 20.517150743995334,
    "avg_bits_err_improve": 13.185959217818247,
    "time": 36815.33935546875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1542.897216796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.778903636442365,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 39.76665363644236,
    "time": 3882.969970703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (+ x y) (* (hypot x y) (/ (hypot x y) (- x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 20.43269442652045,
    "avg_bits_err_output": 0.035009775004326935,
    "avg_bits_err_improve": 20.397684651516123,
    "time": 35230.2158203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ d a) (+ b c)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6682673616342902,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6682673616342902,
    "time": 29299.101318359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.038,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.037,
    "time": 4523.329833984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(* (+ a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.02454248125036058,
    "avg_bits_err_output": 0.02454248125036058,
    "avg_bits_err_improve": 0,
    "time": 12265.6787109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (fma x x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.013625,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": -0.0002500000000000002,
    "time": 6036.388916015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 1756.975341796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ e (+ c (+ b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40139417344137657,
    "avg_bits_err_output": 0.243625,
    "avg_bits_err_improve": 0.15776917344137656,
    "time": 15282.21435546875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.175013497041636,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 30.168513497041637,
    "time": 8441.610107421875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.807716904491198,
    "avg_bits_err_output": 0.2938962406251803,
    "avg_bits_err_improve": 24.513820663866017,
    "time": 17525.3173828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (/ (/ 1.0 (/ 1.0 (- (* x x) (pow (sin x) 2.0)))) (+ x (sin x))) (tan x))",
    "output_parens": 11,
    "avg_bits_err_input": 30.112599360710764,
    "avg_bits_err_output": 30.115851899622093,
    "avg_bits_err_improve": -0.0032525389113295944,
    "time": 52177.914306640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005875,
    "avg_bits_err_output": 0.005875,
    "avg_bits_err_improve": 0,
    "time": 1713.702392578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.004) (* 100.0 (/ 1.0 (/ (/ i (- (* n (* (/ i n) (pow (+ 1.0 (/ i n)) n))) i)) (/ n i)))) (/ (* n (+ (* 100.0 (pow (exp n) (log1p (/ i n)))) -100.0)) i)))",
    "output_parens": 43,
    "avg_bits_err_input": 47.77211882117193,
    "avg_bits_err_output": 10.727495334201247,
    "avg_bits_err_improve": 37.04462348697068,
    "time": 37397.358642578125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (or (<= d -5.6e+183) (not (<= d 1.8e+123))) (fma (/ (/ d (hypot d c)) (hypot d c)) b (* a (* c (pow (hypot d c) -2.0)))) (fma (* d (pow (hypot d c) -2.0)) b (/ (* a (/ c (hypot d c))) (hypot d c))))",
    "output_parens": 23,
    "avg_bits_err_input": 25.981051375107914,
    "avg_bits_err_output": 7.310739269414957,
    "avg_bits_err_improve": 18.670312105692958,
    "time": 28335.365966796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(* (+ (/ b (/ (hypot c d) c)) (* (/ a (hypot c d)) (/ -1.0 (/ 1.0 d)))) (/ 1.0 (hypot c d)))",
    "output_parens": 12,
    "avg_bits_err_input": 26.025556527964095,
    "avg_bits_err_output": 0.9438568793662679,
    "avg_bits_err_improve": 25.081699648597827,
    "time": 25873.210205078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(fma ux (+ maxCos -1.0) 1.0)",
    "output_parens": 2,
    "avg_bits_err_input": 0.036,
    "avg_bits_err_output": 0.019525987607078726,
    "avg_bits_err_improve": 0.01647401239292127,
    "time": 10807.908447265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* uy (* 2.0 PI))) (sqrt (+ (/ (- 1.0 (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 4.0)) (* (fma (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux)) 1.0) (+ 1.0 (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 2.0)))) (* ux (fma ux maxCos (- 1.0 ux))))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.628666110642111,
    "avg_bits_err_output": 11.377026307659314,
    "avg_bits_err_improve": 2.2516398029827975,
    "time": 62345.100830078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (pow (pow (fma (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (* (pow (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))) -2.0) (- (pow (fma ux maxCos (- 1.0 ux)) 12.0)))) 3.0) 0.3333333333333333) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 63,
    "avg_bits_err_input": 13.67249297037591,
    "avg_bits_err_output": 12.068070195677922,
    "avg_bits_err_improve": 1.604422774697987,
    "time": 88946.46850585938,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- 1.0 ux) (* maxCos zi)) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (/ 1.0 (/ (* 2.0 (* PI uy)) (pow (* 2.0 (* PI uy)) 2.0)))) xi) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 28,
    "avg_bits_err_input": 0.33726015310460555,
    "avg_bits_err_output": 0.3450261218761714,
    "avg_bits_err_improve": -0.007765968771565823,
    "time": 66957.70678710938,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (/ 1.0 (+ (/ (/ 1.0 (+ 1.0 (pow (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))) 2.0))) (* alphax alphax)) (pow (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) alphay) 2.0))) (/ (- 1.0 u0) u0)))))",
    "output_parens": 29,
    "avg_bits_err_input": 0.20730650370629405,
    "avg_bits_err_output": 0.20169832382517217,
    "avg_bits_err_improve": 0.005608179881121889,
    "time": 88524.73168945312,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5367695534358211,
    "avg_bits_err_output": 0.5038540659632543,
    "avg_bits_err_improve": 0.032915487472566785,
    "time": 21826.695068359375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 0.02533029591058111 (* 248.05021344244753 u2))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3323867862721689,
    "avg_bits_err_output": 0.32598450027737136,
    "avg_bits_err_improve": 0.00640228599479753,
    "time": 23456.3095703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (/ s -2.0) (log (pow (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))) -1.0) 2.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.3336518788743524,
    "avg_bits_err_output": 0.34579177916376636,
    "avg_bits_err_improve": -0.012139900289413974,
    "time": 36887.08349609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06429548788115326,
    "avg_bits_err_output": 0.044359101830411404,
    "avg_bits_err_improve": 0.019936386050741856,
    "time": 22909.7529296875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (exp (- (log (fma (cosh (/ (fabs x) s)) 2.0 2.0)))) (/ 1.0 s))",
    "output_parens": 9,
    "avg_bits_err_input": 0.14993301787864208,
    "avg_bits_err_output": 0.21506575290796556,
    "avg_bits_err_improve": -0.06513273502932349,
    "time": 23848.7001953125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6669101577778684,
    "avg_bits_err_output": 0.6669101577778684,
    "avg_bits_err_improve": 0,
    "time": 31248.86572265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (- (+ v (* v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)))) v))",
    "output_parens": 9,
    "avg_bits_err_input": 0.15813005669845615,
    "avg_bits_err_output": 0.1700689679394885,
    "avg_bits_err_improve": -0.011938911241032357,
    "time": 26528.319091796875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.4823853075992357,
    "avg_bits_err_output": 0.3684650651733394,
    "avg_bits_err_improve": 2.1139202424258965,
    "time": 35970.5322265625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_O (/ sinTheta_i v)))) (/ (* (/ cosTheta_i 2.0) (* (/ 1.0 v) (/ 1.0 v))) (sinh (/ 1.0 v))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.46618866059225506,
    "avg_bits_err_output": 0.3679161973111401,
    "avg_bits_err_improve": 0.09827246328111494,
    "time": 43697.414794921875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(fma (pow (cbrt (* (exp (fma (/ 1.0 v) (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) 0.6931)) (/ 0.5 v))) 2.0) (cbrt (* (/ 0.5 v) (pow E (+ 0.6931 (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v))))) 0.0)",
    "output_parens": 21,
    "avg_bits_err_input": 0.11093281078861096,
    "avg_bits_err_output": 0.11283577741265605,
    "avg_bits_err_improve": -0.0019029666240450854,
    "time": 41088.303955078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.466228432430596,
    "avg_bits_err_output": 0.4182181896361626,
    "avg_bits_err_improve": 0.04801024279443339,
    "time": 46524.24609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3193486567454937,
    "avg_bits_err_output": 0.5379740841230347,
    "avg_bits_err_improve": 0.781374572622459,
    "time": 28530.954345703125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.206946242590604,
    "avg_bits_err_output": 0.20225,
    "avg_bits_err_improve": 12.004696242590605,
    "time": 25438.9111328125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ 0.125 (* s PI)) (+ (/ (exp (/ (- r) s)) r) (/ (pow (exp -0.6666666666666666) (* 2.0 (/ 0.25 (/ s r)))) r)))",
    "output_parens": 14,
    "avg_bits_err_input": 0.12661813465590116,
    "avg_bits_err_output": 0.145463634700112,
    "avg_bits_err_improve": -0.018845500044210844,
    "time": 79181.54467773438,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (* normAngle (- 1.0 u))) (sin normAngle)) n0_i) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.8848375306681342,
    "avg_bits_err_output": 0.7032089919093529,
    "avg_bits_err_improve": 0.18162853875878127,
    "time": 40722.78564453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (/ (* (pow PI -0.16666666666666666) (sqrt (- 1.0 (+ cosTheta cosTheta)))) cosTheta) (cbrt PI)) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.6889490988543148,
    "avg_bits_err_output": 0.4202492800527459,
    "avg_bits_err_improve": 0.26869981880156885,
    "time": 27290.929931640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (log1p (expm1 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.639527819892129,
    "avg_bits_err_output": 0.5349807795414396,
    "avg_bits_err_improve": 13.104547040350688,
    "time": 26046.6259765625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (+ 0.5 (- (* 0.5 (cos (/ (/ PI u2) (/ (/ 0.5 u2) u2)))) (pow (sin (* PI u2)) 2.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.688588634235135,
    "avg_bits_err_output": 0.3309991559612009,
    "avg_bits_err_improve": 13.357589478273933,
    "time": 28159.166015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- (* alpha alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.112642639836032,
    "avg_bits_err_output": 0.32192932343849157,
    "avg_bits_err_improve": 13.790713316397541,
    "time": 23649.85302734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (* (* (log1p (- u0)) (- alphax)) alphay) (+ (* alphax (/ sin2phi alphay)) (/ 1.0 (/ (/ alphax cos2phi) alphay))))",
    "output_parens": 12,
    "avg_bits_err_input": 12.548936959150813,
    "avg_bits_err_output": 0.5286432555282105,
    "avg_bits_err_improve": 12.020293703622603,
    "time": 29579.551025390625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -2e+104) (- (* PI l) (/ (/ (tan (/ (* l (* l (/ (* PI l) (cbrt (pow l 4.0))))) (cbrt (* l l)))) F) F)) (if (<= (* PI l) -5e+25) (- (* PI l) (/ (/ (tan (/ (pow (* PI l) 3.0) (log1p (expm1 (pow (* PI l) 2.0))))) F) F)) (if (<= (* PI l) 4e-45) (- (* PI l) (/ 1.0 (* F (* F (/ 1.0 (tan (* PI l))))))) (- (* PI l) (/ (/ (tan (/ (* l (* l (/ (* PI l) (cbrt (pow l 4.0))))) (cbrt (* l l)))) F) F)))))",
    "output_parens": 57,
    "avg_bits_err_input": 16.827125798040637,
    "avg_bits_err_output": 2.5205743747383598,
    "avg_bits_err_improve": 14.306551423302277,
    "time": 39687.6396484375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21240808281331133,
    "avg_bits_err_output": 0.1566462406251803,
    "avg_bits_err_improve": 0.055761842188131044,
    "time": 23522.261474609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ (/ F (sqrt (fma x 2.0 (fma F F 2.0)))) (sin B)) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.72987245158614,
    "avg_bits_err_output": 10.517674416322704,
    "avg_bits_err_improve": 3.2121980352634356,
    "time": 31916.814453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (* (log (sqrt (tanh (* PI (* f 0.25))))) -2.0) (* PI -0.25))",
    "output_parens": 8,
    "avg_bits_err_input": 61.54822637419554,
    "avg_bits_err_output": 0.5836776060986102,
    "avg_bits_err_improve": 60.96454876809693,
    "time": 48421.68701171875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* t (sqrt 2.0)) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 43.43996276536648,
    "avg_bits_err_output": 20.362813104868533,
    "avg_bits_err_improve": 23.07714966049795,
    "time": 45648.217041015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.8436816310052255,
    "avg_bits_err_output": 0.21328101562950708,
    "avg_bits_err_improve": 3.6304006153757182,
    "time": 31484.450927734375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (log (exp (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 1.0800849081295463,
    "avg_bits_err_output": 0.006375,
    "avg_bits_err_improve": 1.0737099081295463,
    "time": 13240.338134765625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (* (/ t l) (sqrt 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.384251990995761,
    "avg_bits_err_output": 1.0939143885068117,
    "avg_bits_err_improve": 9.290337602488949,
    "time": 26547.77783203125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -1e+30) (sqrt (+ (* 2.0 (* (fma l -2.0 (* n (* (/ l Om) (- U* U)))) (* n (* (/ l Om) U)))) (* t (* 2.0 (* n U))))) (if (<= n -1.85e-267) (sqrt (+ (* 2.0 (* (fma l -2.0 (* n (* (/ l Om) (- U* U)))) (* n (* (/ l Om) U)))) (* 2.0 (* U (* n t))))) (if (<= n 2.8e-287) (sqrt (+ (* t (* 2.0 (* n U))) (/ (fma (* (fma (/ l Om) (* n (- U* U)) (* l -2.0)) (* 2.0 U)) n 0.0) (/ Om l)))) (if (<= n 1.32e-251) (* (sqrt (* n 2.0)) (sqrt (* U (fma (* l (+ -2.0 (* n (/ (- U* U) Om)))) (/ l Om) t)))) (if (<= n 4.4e-212) (sqrt (+ (* t (* 2.0 (* n U))) (/ (+ (* (* l -2.0) (* n (* 2.0 U))) (* (* (/ l Om) (* n (- U U*))) (* n (* -2.0 U)))) (/ Om l)))) (if (<= n 2.5e-159) (* (sqrt (* n 2.0)) (sqrt (* U (fma (* l (+ -2.0 (* (- U* U) (/ n Om)))) (/ l Om) t)))) (if (<= n 2.95e+178) (sqrt (+ (* 2.0 (* (fma l -2.0 (* n (* (/ l Om) (- U* U)))) (* n (* (/ l Om) U)))) (* t (* 2.0 (* n U))))) (* (sqrt (* n 2.0)) (sqrt (* U (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t)))))))))))",
    "output_parens": 129,
    "avg_bits_err_input": 34.65783381182702,
    "avg_bits_err_output": 26.871030079412062,
    "avg_bits_err_improve": 7.786803732414956,
    "time": 54337.7509765625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= k -1.2e+110) (/ (* (/ l (* k (/ t t))) (/ l (* k (/ t t)))) (* t (* 0.5 (* (sin k) (tan k))))) (if (<= k -6.9e-140) (/ (/ (/ (* l (/ 2.0 (sin k))) (tan k)) k) (* (/ t l) (/ t (/ t k)))) (/ (* (/ l (sin k)) (* (/ t t) (/ 2.0 (* k t)))) (* k (/ (tan k) l)))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.600965719084996,
    "avg_bits_err_output": 4.7861576559584975,
    "avg_bits_err_improve": 42.8148080631265,
    "time": 120216.4453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1.4e-64) (* (/ (/ l t) (tan k)) (/ (/ 2.0 t) (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ t l))))) (if (<= t 4.2e+30) (/ 2.0 (/ (* (fma (/ (* t k) t) (/ k t) (* t 2.0)) (* (tan k) (* (sin k) (/ t l)))) (/ l t))) (* (/ (/ l t) (tan k)) (/ (/ (/ 2.0 (* (+ 2.0 (pow (/ k t) 2.0)) (sin k))) (/ t l)) t))))",
    "output_parens": 44,
    "avg_bits_err_input": 32.70258891534153,
    "avg_bits_err_output": 10.106045382433708,
    "avg_bits_err_improve": 22.596543532907823,
    "time": 70490.66455078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (* (sqrt 0.5) (+ (* a2 a2) (* a1 a1))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5150255672126525,
    "avg_bits_err_output": 0.45614530314321033,
    "avg_bits_err_improve": 0.058880264069442134,
    "time": 25788.5869140625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(if (<= n 4.8e-43) (pow (/ k (pow (* PI (* 2.0 n)) (- 1.0 k))) -0.5) (/ (sqrt (/ k (pow (* 2.0 (* PI n)) (- k 1.0)))) k))",
    "output_parens": 15,
    "avg_bits_err_input": 0.5365099251197049,
    "avg_bits_err_output": 0.6087932166533105,
    "avg_bits_err_improve": -0.07228329153360569,
    "time": 25271.60546875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (* 2.0 J) (cos (* 0.5 K))) (sinh l)) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.293928584652306,
    "avg_bits_err_output": 0.08959991020269024,
    "avg_bits_err_improve": 17.204328674449616,
    "time": 29198.67431640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 1.0) (* (cos (- (/ (+ m n) (/ 2.0 K)) M)) (exp (+ (- (fabs (- m n)) l) (* (- (* (+ m n) 0.5) M) (+ M (* (+ m n) -0.5)))))) (* (fabs (cos (- (pow (* (+ m n) (/ (* K 0.5) (pow (cbrt (* (+ m n) (* K 0.5))) 2.0))) 3.0) M))) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))))",
    "output_parens": 58,
    "avg_bits_err_input": 15.446249203110485,
    "avg_bits_err_output": 1.182580320515923,
    "avg_bits_err_improve": 14.263668882594562,
    "time": 30781.57666015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.973542481250362,
    "avg_bits_err_output": 8.14491748125036,
    "avg_bits_err_improve": 9.828625000000002,
    "time": 33187.1181640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (/ (* M D) d) h) (* (* d (/ 4.0 (* M D))) l)))))",
    "output_parens": 11,
    "avg_bits_err_input": 14.15935888795238,
    "avg_bits_err_output": 8.426444565702253,
    "avg_bits_err_improve": 5.732914322250126,
    "time": 47298.41015625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (* (/ c0 (sqrt (- V))) (sqrt (/ (- A) l))) (if (<= (* V l) -2e-292) (/ c0 (/ (sqrt (* V (- l))) (sqrt (- A)))) (if (<= (* V l) 0.0) (* c0 (/ (sqrt (/ (- A) l)) (sqrt (- V)))) (* c0 (* (pow (* V l) -0.5) (sqrt A))))))",
    "output_parens": 36,
    "avg_bits_err_input": 19.553756028197697,
    "avg_bits_err_output": 6.777697953883478,
    "avg_bits_err_improve": 12.776058074314218,
    "time": 31928.9560546875,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (or (<= w -1.9e+181) (not (<= w 1.1e+242))) (log (pow (sqrt (exp (/ c0 w))) (fma (/ c0 w) (* (/ d h) (/ d (* D D))) (sqrt (- (pow (* (/ (* c0 d) w) (/ d (* h (* D D)))) 2.0) (* M M)))))) (* c0 (* (/ 0.5 w) (* M (/ M (- (* (/ d h) (/ (* (/ c0 w) (/ d D)) D)) (sqrt (* (fma (* (/ c0 w) (/ (/ d D) D)) (/ d h) M) (- (* (/ d h) (* (/ c0 w) (/ (/ d D) D))) M)))))))))",
    "output_parens": 53,
    "avg_bits_err_input": 59.488770402858144,
    "avg_bits_err_output": 33.57644328191381,
    "avg_bits_err_improve": 25.912327120944333,
    "time": 108657.67016601562,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= l -1.66e-149) (* (* (/ (sqrt (- d)) (sqrt (- h))) (sqrt (/ d l))) (+ 1.0 (/ (* (pow (* (* M 0.5) (/ D d)) 2.0) (* h -0.5)) l))) (if (<= l -1e-310) (* (* (sqrt (/ d h)) (/ (sqrt (- d)) (sqrt (- l)))) (+ 1.0 (/ (/ (* (* M 0.5) (* h (* (* M (/ D d)) -0.25))) (/ d D)) l))) (if (<= l 2.15e-131) (* (+ 1.0 (/ (/ (* (* M 0.5) (* h (* (* M (/ D d)) -0.25))) (/ d D)) l)) (* (sqrt (/ d h)) (/ (sqrt d) (sqrt l)))) (* (/ (sqrt d) (sqrt h)) (* (/ (sqrt d) (sqrt l)) (+ 1.0 (* (* (pow (* (/ D d) (/ M 2.0)) 2.0) (/ h l)) -0.5)))))))",
    "output_parens": 75,
    "avg_bits_err_input": 26.928219754942614,
    "avg_bits_err_output": 15.738923748818326,
    "avg_bits_err_improve": 11.189296006124287,
    "time": 140126.0380859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (- (* (/ 0.25 (fma x x 1.0)) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (* 0.25 (+ 0.5 (/ 0.5 (hypot 1.0 x))))) (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 2.0)) (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 22,
    "avg_bits_err_input": 15.2251660647968,
    "avg_bits_err_output": 14.718873549197973,
    "avg_bits_err_improve": 0.5062925155988278,
    "time": 92579.2431640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9836462406251804,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 0.9740212406251804,
    "time": 4816.048828125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (- 1.0 (* v v)))) (* t (sqrt (fma (* v v) -6.0 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.44761267390050846,
    "avg_bits_err_output": 0.2899966572646766,
    "avg_bits_err_improve": 0.15761601663583186,
    "time": 39541.747314453125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* -0.25 (/ (sqrt (+ 2.0 (* (* v v) -6.0))) (/ -1.0 (- 1.0 (* v v)))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.012719360937770433,
    "avg_bits_err_output": 0.013469360937770434,
    "avg_bits_err_improve": -0.0007500000000000007,
    "time": 10620.480224609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(expm1 (log1p (- PI (acos (/ (fma v (* v -5.0) 1.0) (- 1.0 (* v v)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5217996194694392,
    "avg_bits_err_output": 0.5237626266166465,
    "avg_bits_err_improve": -0.0019630071472073185,
    "time": 33309.04931640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (/ (- -10.0 k) (/ a k))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.06863836397435,
    "avg_bits_err_output": 0.2505686823391951,
    "avg_bits_err_improve": 1.8180696816351551,
    "time": 15498.546630859375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (/ 1.0 (exp (/ (+ (+ (- mu Ec) Vef) EDonor) (- KbT)))))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.017803982015155383,
    "avg_bits_err_output": 0.017355861702565235,
    "avg_bits_err_improve": 0.000448120312590148,
    "time": 12180.52099609375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.1843212018417508,
    "avg_bits_err_output": 0.010728962887401789,
    "avg_bits_err_improve": 0.173592238954349,
    "time": 13464.336181640625,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1849417761643687,
    "avg_bits_err_output": 0.02320249094522022,
    "avg_bits_err_improve": 0.16173928521914846,
    "time": 7996.272705078125,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18395327522396127,
    "avg_bits_err_output": 0.0302081012380189,
    "avg_bits_err_improve": 0.15374517398594237,
    "time": 9786.532958984375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (log (exp (+ 1.0 (/ x (hypot x (* p 2.0))))))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.511156673774472,
    "avg_bits_err_output": 13.51029182523283,
    "avg_bits_err_improve": 0.0008648485416422602,
    "time": 19803.769287109375,
    "seed": 18,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.110354816562136,
    "avg_bits_err_output": 0.022875,
    "avg_bits_err_improve": 41.08747981656214,
    "time": 4374.200439453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= (/ (- x (sin x)) (- x (tan x))) 1.000005) (- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x))) (/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (/ (- x (pow (cbrt (/ x (/ (tan x) x))) 3.0)) (/ x (tan x)))))",
    "output_parens": 32,
    "avg_bits_err_input": 31.762109247225116,
    "avg_bits_err_output": 26.585817403141913,
    "avg_bits_err_improve": 5.176291844083202,
    "time": 38716.60986328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 1.16e-110) (/ 1.0 (/ a (- (* b_2 (* b_2 (pow (- (* b_2 b_2) (* a c)) -0.5))) (fma (/ a (sqrt (- (* b_2 b_2) (* a c)))) c b_2)))) (if (<= b_2 1.15e+116) (/ (/ (* a (- c)) (+ b_2 (/ (- (* b_2 b_2) (* a c)) (sqrt (- (* b_2 b_2) (* a c)))))) a) (if (<= b_2 2.45e+185) (/ c (- (- b_2) (hypot b_2 (sqrt (* a c))))) (/ (/ a (/ (+ b_2 (hypot b_2 (pow (pow (* a c) 2.0) 0.25))) c)) (- a)))))",
    "output_parens": 49,
    "avg_bits_err_input": 34.13426978784239,
    "avg_bits_err_output": 20.142594554856316,
    "avg_bits_err_improve": 13.991675232986076,
    "time": 33718.031005859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) (/ (- c) (- b_2 (hypot b_2 (sqrt (* a c))))) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) -2e-245) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 0.0) (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 5e+301) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ -1.0 (/ (- b_2 (sqrt (- (* b_2 b_2) (* a c)))) c))))))",
    "output_parens": 70,
    "avg_bits_err_input": 34.2973491957779,
    "avg_bits_err_output": 19.623009339327265,
    "avg_bits_err_improve": 14.674339856450633,
    "time": 25884.00146484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 31.54762944792096,
    "avg_bits_err_output": 0.12385373968361668,
    "avg_bits_err_improve": 31.423775708237343,
    "time": 23022.45166015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(exp (* (* 3.0 (log (- (exp (/ (log1p x) n)) (pow x (/ 1.0 n))))) 0.3333333333333333))",
    "output_parens": 10,
    "avg_bits_err_input": 32.52726198764511,
    "avg_bits_err_output": 32.59984765533093,
    "avg_bits_err_improve": -0.07258566768582142,
    "time": 40723.119384765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.188278670226154,
    "avg_bits_err_output": 0.00875,
    "avg_bits_err_improve": 29.179528670226155,
    "time": 16177.52294921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (pow (+ 1.0 x) -2.0) (/ (fma x -1.0 -1.0) x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.899962691339875,
    "avg_bits_err_output": 0.02025,
    "avg_bits_err_improve": 14.879712691339874,
    "time": 12157.202880859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= eps -0.00014) (- (fma (cos x) (cos eps) (* (sin eps) (- (sin x)))) (cos x)) (if (<= eps 3.4e-7) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (fma (- (sin x)) (sin eps) (- (* (cos x) (cos eps)) (cos x)))))",
    "output_parens": 30,
    "avg_bits_err_input": 39.72788865800732,
    "avg_bits_err_output": 0.6627466462016153,
    "avg_bits_err_improve": 39.065142011805705,
    "time": 33984.100341796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (+ (+ (/ (+ 1.0 x) (cbrt (+ 1.0 x))) (/ x (cbrt x))) (/ x (/ (/ x (cbrt x)) (cbrt (+ 1.0 x))))))",
    "output_parens": 15,
    "avg_bits_err_input": 29.449209773693745,
    "avg_bits_err_output": 0.19668441445323703,
    "avg_bits_err_improve": 29.252525359240508,
    "time": 22670.2412109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 29.38121018738277,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 29.38071018738277,
    "time": 11597.7734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -2e-162) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (* (/ (* a (* c -4.0)) (- (- b) (hypot b (sqrt (* a (* c -4.0)))))) (/ -0.5 a)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 2e+195) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0))))))) b) (* a 2.0))))))",
    "output_parens": 89,
    "avg_bits_err_input": 34.09578963633692,
    "avg_bits_err_output": 22.0992336917538,
    "avg_bits_err_improve": 11.996555944583118,
    "time": 41370.54541015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 1e+246) (* -0.5 (/ (+ b (sqrt (fma b b (* a (* c -4.0))))) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (* a -4.0)) (sqrt c)) b)) a))))",
    "output_parens": 46,
    "avg_bits_err_input": 33.85652725117812,
    "avg_bits_err_output": 23.542221856748164,
    "avg_bits_err_improve": 10.314305394429958,
    "time": 37429.156005859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.26492470872319,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 61.263674708723194,
    "time": 11234.62744140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (log (/ (+ n 1.0) n)) (+ (pow (exp 0.1111111111111111) (* 9.0 (log (log1p n)))) -1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 63.00460421687091,
    "avg_bits_err_output": 44.19943118074679,
    "avg_bits_err_improve": 18.805173036124117,
    "time": 31821.6201171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(+ (log1p (* eps (- eps))) (* -2.0 (log1p eps)))",
    "output_parens": 6,
    "avg_bits_err_input": 58.61421781599877,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 58.60759281599877,
    "time": 23640.635986328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (- (sin x) (* x (cos x))) x) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 59.95428283110227,
    "avg_bits_err_output": 59.9415119777603,
    "avg_bits_err_improve": 0.012770853341969257,
    "time": 35044.954833984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (/ eps (/ (expm1 (* eps b)) (expm1 (* eps (+ b a))))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.32324488120562,
    "avg_bits_err_output": 29.015223457113823,
    "avg_bits_err_improve": 31.308021424091795,
    "time": 35398.835205078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.37114770170423,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 41.36127270170423,
    "time": 6627.555908203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.694040926597964,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.693415926597964,
    "time": 2500.309814453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.25158828609527,
    "avg_bits_err_output": 0.01600607606577124,
    "avg_bits_err_improve": 29.2355822100295,
    "time": 5187.164794921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (pow (cbrt (fma (pow (exp x) 2.0) (fma (exp x) 2.0 -3.0) 1.0)) 3.0) (fma 2.0 (exp (+ x x)) (exp x)))",
    "output_parens": 12,
    "avg_bits_err_input": 29.636062920659565,
    "avg_bits_err_output": 29.36211136063303,
    "avg_bits_err_improve": 0.27395156002653565,
    "time": 32534.40380859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma x (/ (+ x x) (+ x -1.0)) (- -2.0 (* x 2.0))) (+ x (* x x)))",
    "output_parens": 9,
    "avg_bits_err_input": 10.084907377362468,
    "avg_bits_err_output": 10.075679235262076,
    "avg_bits_err_improve": 0.009228142100392134,
    "time": 46420.113525390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(- (/ (+ (tan x) (tan eps)) (fma (tan eps) (- (tan x)) 1.0)) (tan x))",
    "output_parens": 10,
    "avg_bits_err_input": 37.269582755506676,
    "avg_bits_err_output": 21.777775202013583,
    "avg_bits_err_improve": 15.491807553493093,
    "time": 36890.033447265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(pow (pow (+ (sqrt x) (sqrt (+ 1.0 x))) 2.0) -0.5)",
    "output_parens": 6,
    "avg_bits_err_input": 29.50086927330795,
    "avg_bits_err_output": 0.2023058192543171,
    "avg_bits_err_improve": 29.29856345405363,
    "time": 22429.093994140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (cos x) (sin eps) (/ (* (pow (sin eps) 2.0) (sin x)) (- -1.0 (cos eps))))",
    "output_parens": 10,
    "avg_bits_err_input": 37.201022185864595,
    "avg_bits_err_output": 0.36031468961919294,
    "avg_bits_err_improve": 36.8407074962454,
    "time": 29268.5634765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 20.403880175719536,
    "avg_bits_err_output": 0.1170543234384916,
    "avg_bits_err_improve": 20.286825852281044,
    "time": 24280.186767578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (+ (+ 1.0 N) (* N N)))",
    "output_parens": 4,
    "avg_bits_err_input": 14.088187256374939,
    "avg_bits_err_output": 0.3663833300851483,
    "avg_bits_err_improve": 13.721803926289791,
    "time": 20399.22900390625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.37658192425628,
    "avg_bits_err_output": 1.2947736393344336,
    "avg_bits_err_improve": 28.081808284921845,
    "time": 25853.62158203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (/ m (/ v (- 1.0 m))) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0742920849918798,
    "avg_bits_err_output": 0.07832272405410937,
    "avg_bits_err_improve": -0.004030639062229571,
    "time": 21274.5419921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b (- a)) (/ (/ 1.0 a) b))",
    "output_parens": 5,
    "avg_bits_err_input": 16.21046847030235,
    "avg_bits_err_output": 0.2638802640694408,
    "avg_bits_err_improve": 15.946588206232908,
    "time": 18634.2314453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (/ 2.0 (/ 2.0 (+ (/ (+ (cos (* (* PI angle) 0.005555555555555556)) (cos (fma angle (* PI -0.005555555555555556) 2.0))) 2.0) (* (sin (fma angle (* PI -0.005555555555555556) 1.0)) (sin 1.0)))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 24,
    "avg_bits_err_input": 20.38239609746375,
    "avg_bits_err_output": 20.464237989879013,
    "avg_bits_err_improve": -0.08184189241526241,
    "time": 51320.26123046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* (pow (cbrt PI) 3.0) (* angle 0.011111111111111112))) (+ b a)) (- b a))",
    "output_parens": 9,
    "avg_bits_err_input": 31.088215511093885,
    "avg_bits_err_output": 21.41624798232556,
    "avg_bits_err_improve": 9.671967528768324,
    "time": 45816.677490234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (/ PI 180.0) (/ 1.0 angle)))) 2.0) (pow (* b (cos (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 20.56853517139335,
    "avg_bits_err_output": 20.564424273577746,
    "avg_bits_err_improve": 0.00411089781560392,
    "time": 53473.89501953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (/ m (/ (/ v m) (- 1.0 m))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17595056406367185,
    "avg_bits_err_output": 0.16166768476294266,
    "avg_bits_err_improve": 0.01428287930072919,
    "time": 21960.007568359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3189410841024603,
    "avg_bits_err_output": 0.3107861262378675,
    "avg_bits_err_improve": 0.008154957864592804,
    "time": 34827.88134765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.14049060156295073,
    "avg_bits_err_output": 0.14049060156295073,
    "avg_bits_err_improve": 0,
    "time": 24471.86181640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (exp (log (acos (fma (sin phi1) (sin phi2) (* (* (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda1) (cos lambda2))) (cos phi1)) (cos phi2)))))) R)",
    "output_parens": 18,
    "avg_bits_err_input": 16.351595573944635,
    "avg_bits_err_output": 3.4922357192939346,
    "avg_bits_err_improve": 12.859359854650702,
    "time": 42056.820556640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -5e-31) (/ 0.5 (/ a (/ (- (pow (fma b b (* -4.0 (* a c))) 3.0) (pow b 6.0)) (* (fma b (+ b (sqrt (fma b b (* -4.0 (* a c))))) (fma b b (* -4.0 (* a c)))) (+ (pow (fma b b (* -4.0 (* a c))) 1.5) (pow b 3.0)))))) (* (+ (- b) (pow (pow (fma c (* a -4.0) (* b b)) 1.5) 0.3333333333333333)) (/ 0.5 a)))",
    "output_parens": 44,
    "avg_bits_err_input": 52.37542226341931,
    "avg_bits_err_output": 49.8766219094567,
    "avg_bits_err_improve": 2.498800353962608,
    "time": 57594.446533203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ (- c) 0.5) (+ b (sqrt (+ (* b b) (* a (* c -4.0))))))",
    "output_parens": 9,
    "avg_bits_err_input": 28.841902841350603,
    "avg_bits_err_output": 0.2821329930160015,
    "avg_bits_err_improve": 28.5597698483346,
    "time": 46336.2255859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (/ (fabs (fma (pow b 4.5) (pow b 4.5) (* (pow (fma b b (* (* a c) -4.0)) 2.25) (- (pow (fma b b (* (* a c) -4.0)) 2.25))))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (pow b 6.0) (+ (pow (fma b b (* a (* c -4.0))) 3.0) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0))))) a) -0.5)",
    "output_parens": 40,
    "avg_bits_err_input": 43.7664966882125,
    "avg_bits_err_output": 40.57914934344623,
    "avg_bits_err_improve": 3.187347344766266,
    "time": 90547.04370117188,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -2.8e+173) (/ (- (hypot b (pow (* a (* (* c -4.0) (* a (* c -4.0)))) 0.25)) b) (* a 2.0)) (if (<= b -8e-167) (/ (- (sqrt (- (* b b) (* c (* a 4.0)))) b) (* a 2.0)) (if (<= b 3.55e-13) (/ (* c -2.0) (+ b (hypot b (sqrt (* c (* a -4.0)))))) (if (<= b 1.75e+157) (/ (* (/ 0.5 a) (* -4.0 (* a c))) (+ b (pow (fma b b (* -4.0 (* a c))) 0.5))) (if (<= b 1.85e+208) (/ (* c -2.0) (+ b (hypot b (sqrt (* c (* a -4.0)))))) (/ (* (/ 0.5 a) (* -4.0 (* a c))) (+ b (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)))))))))",
    "output_parens": 63,
    "avg_bits_err_input": 34.09730309892419,
    "avg_bits_err_output": 15.035860414230674,
    "avg_bits_err_improve": 19.061442684693517,
    "time": 41818.45947265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.9115798475594101,
    "avg_bits_err_output": 0.22475630084915738,
    "avg_bits_err_improve": 0.6868235467102528,
    "time": 34587.416015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(+ (/ 4.0 (/ (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))) (pow (+ 1.0 (exp (* -2.0 x))) -2.0))) (/ -1.0 (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 28.889383349182452,
    "avg_bits_err_output": 28.888310070516308,
    "avg_bits_err_improve": 0.0010732786661442617,
    "time": 38537.3427734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.0612262879322,
    "avg_bits_err_output": 0.013448120312590146,
    "avg_bits_err_improve": 58.04777816761961,
    "time": 6912.67724609375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (expm1 (log1p (* 2.0 (sinh x)))) 2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 57.71578129667867,
    "avg_bits_err_output": 0.4679878211787417,
    "avg_bits_err_improve": 57.24779347549993,
    "time": 15486.60009765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(cbrt (pow (cosh x) -3.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007719360937770434,
    "avg_bits_err_output": 0.02793578035754525,
    "avg_bits_err_improve": -0.02021641941977482,
    "time": 7331.1005859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.89775,
    "avg_bits_err_output": 0.08275,
    "avg_bits_err_improve": 31.814999999999998,
    "time": 8431.713134765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (* (log1p x) 2.0) (log1p (* x (- x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 58.60761187666961,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 58.60098687666961,
    "time": 23306.133544921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (* (/ 1.0 x) (sqrt (- 1.0 (* x x))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.05141524101186092,
    "avg_bits_err_output": 0.05148836132445106,
    "avg_bits_err_improve": -7.312031259013724e-05,
    "time": 10823.390869140625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12225,
    "avg_bits_err_output": 0.12094812031259015,
    "avg_bits_err_improve": 0.0013018796874098432,
    "time": 35443.711181640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* eh (- (tan t))) ew)))) (* (* eh (sin t)) (sin (atan (/ (* eh (- (tan t))) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1295,
    "avg_bits_err_output": 0.1295,
    "avg_bits_err_improve": 0,
    "time": 43562.188232421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (cos (* phi1 0.5)) (cos (* 0.5 phi2)) (* (sin (* 0.5 phi2)) (- (sin (* phi1 0.5)))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 40.385934374038776,
    "avg_bits_err_output": 0.12002312912807152,
    "avg_bits_err_improve": 40.265911244910704,
    "time": 33697.216064453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 14.264119382402065,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 14.263119382402065,
    "time": 7715.716552734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (/ (- (* (pow (cos delta) 2.0) (- (* (cos delta) (sin phi1)) (* (cos phi1) (* (sin delta) (cos theta))))) (* (cos delta) (* (sin phi1) (- (pow (* (cos delta) (sin phi1)) 2.0) (pow (* (cos phi1) (* (sin delta) (cos theta))) 2.0))))) (* (cos delta) (- (* (cos delta) (sin phi1)) (* (cos phi1) (* (sin delta) (cos theta))))))))",
    "output_parens": 47,
    "avg_bits_err_input": 0.1612182612364986,
    "avg_bits_err_output": 0.18437231039501312,
    "avg_bits_err_improve": -0.023154049158514517,
    "time": 51386.0830078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) -2e-31) (* (/ (- (pow (fma b b (* a (* c -3.0))) 3.0) (pow b 6.0)) (* (fma b (+ b (sqrt (fma b b (* a (* c -3.0))))) (fma b b (* a (* c -3.0)))) (+ (pow (fma b b (* a (* c -3.0))) 1.5) (pow b 3.0)))) (/ 0.3333333333333333 a)) (/ (fma (pow (* (pow (fma c (* a -3.0) (* b b)) 1.5) 0.037037037037037035) 0.3333333333333333) a (* b (* a -0.3333333333333333))) (* a a)))",
    "output_parens": 46,
    "avg_bits_err_input": 52.381283108553,
    "avg_bits_err_output": 49.90424867307688,
    "avg_bits_err_improve": 2.4770344354761207,
    "time": 59078.991943359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma b b (* c (* a -3.0))))))",
    "output_parens": 7,
    "avg_bits_err_input": 29.000176910769337,
    "avg_bits_err_output": 0.27386540881705207,
    "avg_bits_err_improve": 28.726311501952285,
    "time": 37228.1171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma c (* -3.0 a) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 43.800473786413896,
    "avg_bits_err_output": 0.1691062031259014,
    "avg_bits_err_improve": 43.631367583288,
    "time": 55031.970947265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -7.5e-182) (/ 0.3333333333333333 (/ a (- (hypot b (sqrt (fabs (* a (* c -3.0))))) b))) (if (<= b 1.65e-6) (/ (- c) (+ b (hypot b (sqrt (* a (* c -3.0)))))) (/ (* (/ 1.0 (/ a (* (* a c) 3.0))) -0.3333333333333333) (+ b (hypot b (pow (pow (* a (* c -3.0)) 2.0) 0.25))))))",
    "output_parens": 31,
    "avg_bits_err_input": 34.136680201286005,
    "avg_bits_err_output": 13.013874592343777,
    "avg_bits_err_improve": 21.12280560894223,
    "time": 44062.660888671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (fma (* (sin lambda1) (cos lambda2)) (cos phi2) (* (cos phi2) (* (sin lambda2) (- (cos lambda1))))) (- (* (cos phi1) (sin phi2)) (+ (* (sin phi1) (* (cos phi2) (* (sin lambda1) (sin lambda2)))) (* (sin phi1) (* (cos lambda2) (* (cos phi2) (cos lambda1)))))))",
    "output_parens": 31,
    "avg_bits_err_input": 13.090280293143818,
    "avg_bits_err_output": 0.17760137930812214,
    "avg_bits_err_improve": 12.912678913835697,
    "time": 49401.111328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(+ (/ 1.0 (- 1.0 x)) (+ (/ x (- 1.0 x)) (/ x (+ 1.0 x))))",
    "output_parens": 8,
    "avg_bits_err_input": 29.57652331232844,
    "avg_bits_err_output": 25.83241581091685,
    "avg_bits_err_improve": 3.744107501411591,
    "time": 63075.397216796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ (+ 1.0 x) (fma x x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.00925,
    "avg_bits_err_improve": 0.0022500000000000003,
    "time": 15022.951904296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.87853005323882,
    "avg_bits_err_output": 0.074375,
    "avg_bits_err_improve": 14.80415505323882,
    "time": 22406.857666015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (/ (* (sqrt (* 2.0 (fma B B (* (* A C) -4.0)))) (- (sqrt (* F (+ A (- C (hypot B (- A C)))))))) (- (* B B) (* 4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) INFINITY) (/ (/ (- (hypot B (- A C)) (+ A C)) (/ (sqrt (* (- (+ A C) (hypot B (- A C))) (* 2.0 (* F (fma B B (* A (* C -4.0))))))) (* 2.0 (* F (fma B B (* A (* C -4.0))))))) (- (* B B) (* 4.0 (* A C)))) (/ 1.0 (/ (hypot B (sqrt (* A (* C -4.0)))) (- (sqrt (* (- (- (hypot B (- A C)) A) C) (* F -2.0))))))))",
    "output_parens": 105,
    "avg_bits_err_input": 52.28084410863378,
    "avg_bits_err_output": 39.92130719133464,
    "avg_bits_err_improve": 12.359536917299138,
    "time": 56866.089111328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* (atan (/ (- (- C A) (hypot B (- C A))) B)) (/ 180.0 PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.631214795776373,
    "avg_bits_err_output": 13.864904079256522,
    "avg_bits_err_improve": 15.76631071651985,
    "time": 27174.737060546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F 2.1e-299) (/ (* (sqrt (* (fma B B (* A (* C -4.0))) (* F 2.0))) (- (sqrt (+ C (+ A (hypot B (- A C))))))) (+ (* B B) (* -4.0 (* A C)))) (if (<= F 1.65e+64) (/ (* (sqrt (* 2.0 (fma B B (* C (* A -4.0))))) (- (sqrt (* F (+ A (+ C (hypot B (- A C)))))))) (+ (* B B) (* -4.0 (* A C)))) (if (<= F 1.3e+183) (/ (* (* (hypot B (sqrt (* C (* A -4.0)))) (sqrt F)) (- (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))))) (+ (* B B) (* -4.0 (* A C)))) (/ (* (sqrt (* (* 2.0 (fma B B (* C (* A -4.0)))) (+ A (+ C (hypot B (- A C)))))) (- (sqrt F))) (+ (* B B) (* -4.0 (* A C)))))))",
    "output_parens": 79,
    "avg_bits_err_input": 52.13494609591828,
    "avg_bits_err_output": 42.45830047152424,
    "avg_bits_err_improve": 9.676645624394041,
    "time": 47262.384521484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(* (cbrt (/ 0.5 a)) (cbrt g))",
    "output_parens": 4,
    "avg_bits_err_input": 15.375658357687337,
    "avg_bits_err_output": 0.8357619329077305,
    "avg_bits_err_improve": 14.539896424779606,
    "time": 21816.694580078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (/ (cbrt (* 0.5 (- (hypot g h) g))) (cbrt a)) (/ (cbrt (+ g (hypot g h))) (cbrt (* a -2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 36.11006560959621,
    "avg_bits_err_output": 2.7933025405713092,
    "avg_bits_err_improve": 33.3167630690249,
    "time": 41236.52587890625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9898921062575732,
    "avg_bits_err_output": 0.03846973750504808,
    "avg_bits_err_improve": 0.9514223687525251,
    "time": 17245.292236328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ 1.0 (+ 1.0 (exp (- b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5634481203125902,
    "avg_bits_err_output": 0.011344360937770432,
    "avg_bits_err_improve": 0.5521037593748197,
    "time": 10848.164794921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* a2 (/ (/ a1 b2) b1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-291) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* a2 (/ (/ a1 b1) b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+276) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b1) (/ a2 b2))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.160701667980266,
    "avg_bits_err_output": 3.035606364359354,
    "avg_bits_err_improve": 8.125095303620913,
    "time": 10522.804931640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.49714040828653017,
    "avg_bits_err_output": 0.44719812031259015,
    "avg_bits_err_improve": 0.049942287973940014,
    "time": 8022.18896484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -0.048) (- (log1p (- (pow (+ x (+ (hypot 1.0 x) -1.0)) 2.0))) (log1p (+ 2.0 (- (- -1.0 (hypot 1.0 x)) x)))) (log1p (+ x (+ (hypot 1.0 x) -1.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 53.115667577270706,
    "avg_bits_err_output": 13.705112022317321,
    "avg_bits_err_improve": 39.41055555495338,
    "time": 24122.730224609375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.680914404955915,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.680914404955915,
    "time": 2031.123046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (sqrt (- 1.0 (* x x))) (+ 1.0 x))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.01125,
    "avg_bits_err_improve": 0.002125,
    "time": 7271.12841796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1315.90625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (/ 2.0 (* r r)) (- -1.5 (* (* (* r w) (* r w)) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 13.229562452244346,
    "avg_bits_err_output": 0.35775075313455545,
    "avg_bits_err_improve": 12.871811699109792,
    "time": 46110.05419921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) (* x1 (fma (fma x1 x1 1.0) (fma 2.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -6.0) (* x1 3.0)))) (* (+ 1.0 (* x1 (fma (/ 4.0 (fma x1 x1 1.0)) (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 35,
    "avg_bits_err_input": 0.5125338784601732,
    "avg_bits_err_output": 0.32004033163385953,
    "avg_bits_err_improve": 0.19249354682631364,
    "time": 100058.34204101562,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (or (<= u -1e+103) (not (<= u 1e-137))) (/ (/ v (+ t1 u)) (- -1.0 (/ u t1))) (/ v (* (+ t1 u) (- -1.0 (/ u t1)))))",
    "output_parens": 15,
    "avg_bits_err_input": 17.856409227374165,
    "avg_bits_err_output": 1.147641266983136,
    "avg_bits_err_improve": 16.70876796039103,
    "time": 16090.866455078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma 0.954929658551372 x (* (pow x 3.0) -0.12900613773279798))",
    "output_parens": 3,
    "avg_bits_err_input": 0.22539340061561777,
    "avg_bits_err_output": 0.20685172264890211,
    "avg_bits_err_improve": 0.01854167796671566,
    "time": 22119.67626953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2600.40673828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI 0.5) (+ b a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 13.761072592660604,
    "avg_bits_err_output": 0.24197913594209716,
    "avg_bits_err_improve": 13.519093456718506,
    "time": 52093.71337890625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (* (+ 1.0 (/ 1.0 eps)) (cbrt (pow (exp (* x (+ eps -1.0))) 3.0))) (* (exp (* x (- -1.0 eps))) (+ 1.0 (/ -1.0 eps)))) 2.0)",
    "output_parens": 16,
    "avg_bits_err_input": 29.204602081864202,
    "avg_bits_err_output": 29.207422506103388,
    "avg_bits_err_improve": -0.002820424239185826,
    "time": 42744.582763671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ (+ 2.0 (* (+ 2.0 (/ 2.0 (- -1.0 t))) (+ -2.0 (/ -2.0 (- -1.0 t))))) (- 4.0 (pow (+ 2.0 (/ -2.0 (+ 1.0 t))) 4.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.019375,
    "avg_bits_err_output": 0.00725,
    "avg_bits_err_improve": 0.012125,
    "time": 17321.272705078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))) (+ 2.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.023,
    "avg_bits_err_output": 0.006948120312590145,
    "avg_bits_err_improve": 0.016051879687409856,
    "time": 28307.118896484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (log (exp (/ 4.0 (/ (/ (+ 1.0 t) t) (/ t (+ 1.0 t))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.040125,
    "avg_bits_err_output": 0.04492932343849157,
    "avg_bits_err_improve": -0.004804323438491569,
    "time": 34418.329345703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 4539.616943359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3595.925537109375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4734.813232421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.859650380151461,
    "avg_bits_err_output": 0.24875,
    "avg_bits_err_improve": 7.6109003801514605,
    "time": 23218.944580078125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.644378882563689,
    "avg_bits_err_output": 7.644378882563689,
    "avg_bits_err_improve": 0,
    "time": 23819.864990234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (+ eps (+ x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 16.52739149729937,
    "avg_bits_err_output": 0.01475,
    "avg_bits_err_improve": 16.51264149729937,
    "time": 14593.233154296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5098863314918933,
    "avg_bits_err_output": 0.388321429696064,
    "avg_bits_err_improve": 3.1215649017958293,
    "time": 25253.884765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.731017406151821,
    "avg_bits_err_output": 0.016587406251802897,
    "avg_bits_err_improve": 14.714429999900018,
    "time": 8456.518798828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.124525152334634,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.124525152334634,
    "time": 4890.762451171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.42814559085069,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.42789559085069,
    "time": 5727.970458984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.302375,
    "avg_bits_err_improve": 63.697625,
    "time": 68801.59497070312,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.843251666115286,
    "avg_bits_err_output": 0.3160637218755409,
    "avg_bits_err_improve": 61.52718794423974,
    "time": 14268.305908203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 1e+246) (* -0.5 (/ (+ b (sqrt (fma b b (* a (* c -4.0))))) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (* a -4.0)) (sqrt c)) b)) a))))",
    "output_parens": 46,
    "avg_bits_err_input": 33.85652725117812,
    "avg_bits_err_output": 23.542221856748164,
    "avg_bits_err_improve": 10.314305394429958,
    "time": 38691.69921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -2.8e+173) (/ (- (hypot b (pow (* a (* (* c -4.0) (* a (* c -4.0)))) 0.25)) b) (* a 2.0)) (if (<= b -8e-167) (/ (- (sqrt (- (* b b) (* c (* a 4.0)))) b) (* a 2.0)) (if (<= b 3.55e-13) (/ (* c -2.0) (+ b (hypot b (sqrt (* c (* a -4.0)))))) (if (<= b 1.75e+157) (/ (* (/ 0.5 a) (* -4.0 (* a c))) (+ b (pow (fma b b (* -4.0 (* a c))) 0.5))) (if (<= b 1.85e+208) (/ (* c -2.0) (+ b (hypot b (sqrt (* c (* a -4.0)))))) (/ (* (/ 0.5 a) (* -4.0 (* a c))) (+ b (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)))))))))",
    "output_parens": 63,
    "avg_bits_err_input": 34.09730309892419,
    "avg_bits_err_output": 15.035860414230674,
    "avg_bits_err_improve": 19.061442684693517,
    "time": 42562.86328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2331.91943359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.957346973747235,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 39.949221973747235,
    "time": 3691.041748046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(* (/ (- x y) (hypot x y)) (/ (+ x y) (hypot x y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.07051112173985,
    "avg_bits_err_output": 0.03399793281619594,
    "avg_bits_err_improve": 20.036513188923657,
    "time": 17837.85009765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6618832283851797,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6618832283851797,
    "time": 12532.7138671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.035375,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.034874999999999996,
    "time": 5491.46923828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ b (+ b a))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.023698120312590144,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.013323120312590144,
    "time": 7231.087890625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 0.0001250000000000001,
    "time": 6901.42822265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0,
    "time": 1834.686767578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ b (+ a c)) d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40413477500432715,
    "avg_bits_err_output": 0.234125,
    "avg_bits_err_improve": 0.17000977500432715,
    "time": 12509.58544921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.33689209056337,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 29.33014209056337,
    "time": 13966.606689453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.32207227533444,
    "avg_bits_err_output": 0.2955212406251803,
    "avg_bits_err_improve": 24.026551034709257,
    "time": 12553.91015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (pow (exp (pow (cbrt (log (- (pow (/ x (tan x)) 6.0) (pow (cos x) 6.0)))) 2.0)) (cbrt (log (- (pow (/ x (tan x)) 6.0) (pow (cos x) 6.0))))) (* (+ (/ x (tan x)) (cos x)) (+ (pow (cos x) 4.0) (+ (pow (* (/ x (tan x)) (cos x)) 2.0) (pow (/ x (tan x)) 4.0)))))",
    "output_parens": 37,
    "avg_bits_err_input": 29.891511944556225,
    "avg_bits_err_output": 29.89807032314933,
    "avg_bits_err_improve": -0.006558378593105374,
    "time": 43018.8017578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(- (* a a) (* b b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.008719360937770431,
    "avg_bits_err_output": 0.008719360937770431,
    "avg_bits_err_improve": 0,
    "time": 1982.48779296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 2e-45) (/ (fma 100.0 (pow (+ 1.0 (/ i n)) n) -100.0) (/ i n)) (* n (/ (+ -100.0 (* 100.0 (pow (exp n) (log1p (/ i n))))) i))))",
    "output_parens": 37,
    "avg_bits_err_input": 47.55933602860441,
    "avg_bits_err_output": 11.645417781398393,
    "avg_bits_err_improve": 35.91391824720602,
    "time": 31625.697509765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(/ (+ (/ a (/ (hypot c d) c)) (* (/ d (hypot c d)) b)) (hypot c d))",
    "output_parens": 9,
    "avg_bits_err_input": 26.282295503603127,
    "avg_bits_err_output": 0.45774451607901506,
    "avg_bits_err_improve": 25.824550987524113,
    "time": 18555.71533203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (or (<= (/ (- (* c b) (* d a)) (+ (* c c) (* d d))) (- INFINITY)) (not (<= (/ (- (* c b) (* d a)) (+ (* c c) (* d d))) 2e+262))) (/ (- (* c (/ b (hypot c d))) (* d (/ a (hypot c d)))) (hypot c d)) (/ (/ (- (* c b) (* d a)) (hypot c d)) (hypot c d)))",
    "output_parens": 36,
    "avg_bits_err_input": 25.908890223171973,
    "avg_bits_err_output": 0.9360240520657155,
    "avg_bits_err_improve": 24.972866171106258,
    "time": 27668.95166015625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03425,
    "avg_bits_err_output": 0.024232118979868326,
    "avg_bits_err_improve": 0.010017881020131677,
    "time": 14482.797607421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* uy (* 2.0 PI))) (sqrt (/ (+ (* (- 1.0 (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 2.0)) (fma ux maxCos (+ 1.0 ux))) (* (* ux (- (* ux ux) (pow (fma ux maxCos 1.0) 2.0))) (- -1.0 (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux)))))) (* (fma ux maxCos (+ 1.0 ux)) (+ 1.0 (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))))))))",
    "output_parens": 35,
    "avg_bits_err_input": 13.532161296898241,
    "avg_bits_err_output": 11.290925502628106,
    "avg_bits_err_improve": 2.2412357942701355,
    "time": 57892.142578125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* uy (* 2.0 PI))) (sqrt (/ (- (pow (- 1.0 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos 1.0))) 3.0) (pow (* ux (- (fma ux maxCos (- 1.0 ux)))) 3.0)) (+ (pow (- 1.0 (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos 1.0))) 2.0) (+ (pow (* ux (fma ux maxCos (- 1.0 ux))) 2.0) (* (* ux (fma ux maxCos (- 1.0 ux))) (+ (* (fma ux maxCos (- 1.0 ux)) (fma ux maxCos 1.0)) -1.0)))))))",
    "output_parens": 39,
    "avg_bits_err_input": 13.571100165100978,
    "avg_bits_err_output": 11.282795834374008,
    "avg_bits_err_improve": 2.2883043307269695,
    "time": 92392.96240234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (sin (* uy (* 2.0 PI))) (* yi (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))))) (* (* (- 1.0 ux) maxCos) (* ux zi)))",
    "output_parens": 33,
    "avg_bits_err_input": 0.33834245490952625,
    "avg_bits_err_output": 0.3300267316439902,
    "avg_bits_err_improve": 0.008315723265536035,
    "time": 65792.63842773438,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ (/ 1.0 (+ 1.0 (pow (* alphay (/ (tan (* PI (fma 2.0 u1 0.5))) alphax)) 2.0))) (cos (atan (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5))))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 51,
    "avg_bits_err_input": 0.20443398826188036,
    "avg_bits_err_output": 0.20265824229295937,
    "avg_bits_err_improve": 0.0017757459689209942,
    "time": 41480.720703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(/ (* (pow (/ u1 (- 1.0 u1)) 1.5) (sin (* 6.28318530718 u2))) (/ u1 (- 1.0 u1)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5322783060501183,
    "avg_bits_err_output": 0.5749995494007833,
    "avg_bits_err_improve": -0.04272124335066507,
    "time": 27657.91748046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.32006129259685334,
    "avg_bits_err_output": 0.3119095144619546,
    "avg_bits_err_improve": 0.008151778134898757,
    "time": 24244.958984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (* s 0.5) (log (pow (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))) -1.0) -2.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.3359695363788537,
    "avg_bits_err_output": 0.34863090697650484,
    "avg_bits_err_improve": -0.012661370597651156,
    "time": 30498.862548828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05602140916728211,
    "avg_bits_err_output": 0.041313299846034435,
    "avg_bits_err_improve": 0.014708109321247678,
    "time": 22796.308349609375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 0.5 (+ s (* s (cosh (/ (fabs x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13045220970122418,
    "avg_bits_err_output": 0.11394922292924613,
    "avg_bits_err_improve": 0.016502986771978048,
    "time": 27405.888427734375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6725636303603195,
    "avg_bits_err_output": 0.6725636303603195,
    "avg_bits_err_improve": 0,
    "time": 31066.141845703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (/ (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) (/ 1.0 v)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.15501197676078995,
    "avg_bits_err_output": 0.15609770186758437,
    "avg_bits_err_improve": -0.0010857251067944163,
    "time": 27233.431396484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.6561803163408895,
    "avg_bits_err_output": 0.38731543410082425,
    "avg_bits_err_improve": 2.268864882240065,
    "time": 35506.306396484375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* (exp (/ (* sinTheta_i (- sinTheta_O)) v)) (* cosTheta_i (* cosTheta_O (/ 1.0 v)))) (* (/ (sinh (/ 1.0 v)) -1.0) (/ 2.0 (/ -1.0 v))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.4647366230633134,
    "avg_bits_err_output": 0.389648335550813,
    "avg_bits_err_improve": 0.0750882875125004,
    "time": 39100.53125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (* (pow (pow (cbrt (exp (+ 0.6931 (/ (fma cosTheta_i cosTheta_O (- (fma sinTheta_i sinTheta_O 1.0))) v)))) 8.0) 0.3333333333333333) (cbrt (cbrt (exp (+ 0.6931 (/ (fma cosTheta_i cosTheta_O (- (fma sinTheta_i sinTheta_O 1.0))) v)))))) (/ 0.5 v))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13299457682521126,
    "avg_bits_err_output": 0.41890594187800145,
    "avg_bits_err_improve": -0.2859113650527902,
    "time": 31971.21337890625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (- (* (* alpha alpha) cosTheta) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4683460707194643,
    "avg_bits_err_output": 0.4264351369425501,
    "avg_bits_err_improve": 0.04191093377691424,
    "time": 57486.55615234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (/ (- 0.25 u) 0.75)) (* s -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3189906511052305,
    "avg_bits_err_output": 0.5488528763794398,
    "avg_bits_err_improve": 0.7701377747257907,
    "time": 29632.220458984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.41898949309484,
    "avg_bits_err_output": 0.20894812031259014,
    "avg_bits_err_improve": 12.21004137278225,
    "time": 25433.864990234375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* PI (* 2.0 (* r s)))) (/ (* 0.75 (exp (* r (/ -0.3333333333333333 s)))) (* (/ s (/ PI r)) (/ (pow (* PI 6.0) 2.0) 6.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.1354666053125164,
    "avg_bits_err_output": 0.14438996812081945,
    "avg_bits_err_improve": -0.008923362808303054,
    "time": 88771.57568359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8720949351974231,
    "avg_bits_err_output": 0.6844015854126049,
    "avg_bits_err_improve": 0.18769334978481822,
    "time": 37262.461669921875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) cosTheta) (sqrt PI)) (pow (exp cosTheta) cosTheta))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7015683320417706,
    "avg_bits_err_output": 0.5489692679492485,
    "avg_bits_err_improve": 0.1525990640925221,
    "time": 24968.5498046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (/ (pow (log1p (- u1)) 3.0) (log1p (- u1))) 0.25) (sin (* 2.0 (* PI u2))))",
    "output_parens": 11,
    "avg_bits_err_input": 13.702145640368503,
    "avg_bits_err_output": 0.5268018038661955,
    "avg_bits_err_improve": 13.175343836502307,
    "time": 25503.198486328125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (pow (* (/ 1.0 (pow (log1p (- u1)) -3.0)) (/ 1.0 (log1p (- u1)))) 0.25) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 13,
    "avg_bits_err_input": 13.752268772711531,
    "avg_bits_err_output": 0.33785699749836046,
    "avg_bits_err_improve": 13.414411775213171,
    "time": 26113.365966796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* (- alpha) (log1p (- u0))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.252310686522181,
    "avg_bits_err_output": 0.3266392859392128,
    "avg_bits_err_improve": 13.925671400582969,
    "time": 22311.518798828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ (/ cos2phi alphax) alphax) (* (pow alphay -2.0) sin2phi)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.511917658031727,
    "avg_bits_err_output": 0.5335765723665014,
    "avg_bits_err_improve": 11.978341085665226,
    "time": 31983.880126953125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(+ (* PI l) (/ -1.0 (* F (/ F (tan (* PI l))))))",
    "output_parens": 7,
    "avg_bits_err_input": 16.467013265433167,
    "avg_bits_err_output": 12.451432444145226,
    "avg_bits_err_improve": 4.015580821287941,
    "time": 34120.703857421875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (pow (sin B) -1.0) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.213636842188131,
    "avg_bits_err_output": 0.15521936093777045,
    "avg_bits_err_improve": 0.05841748125036056,
    "time": 19053.34765625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ (* F (pow (fma x 2.0 (fma F F 2.0)) -0.5)) (sin B)) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 14.485261577706648,
    "avg_bits_err_output": 10.893718818415634,
    "avg_bits_err_improve": 3.5915427592910145,
    "time": 33605.471435546875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (log (tanh (* PI (* f 0.25))))) (* PI -0.25))",
    "output_parens": 7,
    "avg_bits_err_input": 61.58862009234665,
    "avg_bits_err_output": 0.6658725640648891,
    "avg_bits_err_improve": 60.92274752828176,
    "time": 39989.085693359375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* t (sqrt 2.0)) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 42.7452470102987,
    "avg_bits_err_output": 20.10000940321075,
    "avg_bits_err_improve": 22.64523760708795,
    "time": 43923.281005859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(/ (sin th) (/ (hypot (sin ky) (sin kx)) (sin ky)))",
    "output_parens": 7,
    "avg_bits_err_input": 3.9675895151539873,
    "avg_bits_err_output": 0.22489906094353948,
    "avg_bits_err_improve": 3.742690454210448,
    "time": 30821.334228515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.967667200391513,
    "avg_bits_err_output": 0.004,
    "avg_bits_err_improve": 0.963667200391513,
    "time": 10762.284423828125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ t (/ l (sqrt 2.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.54989865402811,
    "avg_bits_err_output": 1.1105953617190913,
    "avg_bits_err_improve": 9.439303292309019,
    "time": 27871.701904296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -3.8e+177) (* (sqrt (fma (/ l Om) (+ (* n (* (/ l Om) (- U* U))) (* l -2.0)) t)) (sqrt (* 2.0 (* n U)))) (if (<= n -6.2e+99) (sqrt (* (* 2.0 n) (+ (* U (* (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)))) (* U t)))) (if (<= n -5e-310) (sqrt (* U (* (* 2.0 n) (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t)))) (if (<= n 2.7e-154) (* (sqrt (* U (fma (/ l Om) (fma (/ l Om) (* n (- U* U)) (* l -2.0)) t))) (sqrt (* 2.0 n))) (if (<= n 3.7e+55) (sqrt (* U (* (* 2.0 n) (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t)))) (* (sqrt (* 2.0 n)) (sqrt (* U (- t (fma n (* (- U U*) (pow (/ Om l) -2.0)) (/ (* 2.0 l) (/ Om l))))))))))))",
    "output_parens": 84,
    "avg_bits_err_input": 34.772395436123226,
    "avg_bits_err_output": 26.973251876622797,
    "avg_bits_err_improve": 7.799143559500429,
    "time": 50678.73681640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= k -4.4e-104) (* (/ (/ l (* k (sin k))) (- (tan k))) (/ (/ (* l -2.0) t) k)) (if (<= k 2.7e-88) (* t (/ (/ l k) (* t (* (* (tan k) (/ (* t (sin k)) l)) (* k 0.5))))) (* (/ (/ (* l 2.0) t) k) (/ (/ l (tan k)) (* k (sin k))))))",
    "output_parens": 34,
    "avg_bits_err_input": 47.968548489729244,
    "avg_bits_err_output": 5.878996391388399,
    "avg_bits_err_improve": 42.089552098340846,
    "time": 81749.32836914062,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -9.2e-32) (/ (/ (* 2.0 l) (* t (tan k))) (* t (* (* t (sin k)) (/ (+ 2.0 (pow (/ k t) 2.0)) l)))) (if (<= t 2.4e-230) (/ 2.0 (* (/ (/ (fma (pow (/ (* t k) t) 2.0) t (* 2.0 (pow t 3.0))) l) l) (* (tan k) (sin k)))) (/ (* (/ l t) (/ (/ 2.0 (* (sin k) (+ 2.0 (pow (/ k t) 2.0)))) t)) (* (tan k) (/ t l)))))",
    "output_parens": 43,
    "avg_bits_err_input": 33.357204472368096,
    "avg_bits_err_output": 9.661353268935184,
    "avg_bits_err_improve": 23.695851203432913,
    "time": 113680.87353515625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (* (sqrt 0.5) (cos th)) (+ (* a2 a2) (* a1 a1)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5120276343964563,
    "avg_bits_err_output": 0.4565109047061613,
    "avg_bits_err_improve": 0.055516729690294975,
    "time": 28366.023681640625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (/ 1.0 (* (pow (* PI 2.0) (- (* 0.5 k) 0.5)) (pow n (- (* 0.5 k) 0.5)))) (sqrt k))",
    "output_parens": 11,
    "avg_bits_err_input": 0.5343900507637622,
    "avg_bits_err_output": 0.6222470821390071,
    "avg_bits_err_improve": -0.08785703137524492,
    "time": 28342.66796875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (sinh l) (* 2.0 J)) (cos (/ K 2.0))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.52382925669616,
    "avg_bits_err_output": 0.10035396288740181,
    "avg_bits_err_improve": 17.42347529380876,
    "time": 34521.236572265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(/ (cos (- (/ (* (+ m n) K) (* (/ K (* (+ m n) K)) (* (+ m n) 2.0))) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (+ m (- l n)))))",
    "output_parens": 20,
    "avg_bits_err_input": 15.372463040371839,
    "avg_bits_err_output": 15.433622125310846,
    "avg_bits_err_improve": -0.0611590849390069,
    "time": 38528.479248046875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.87244812031259,
    "avg_bits_err_output": 8.531448120312591,
    "avg_bits_err_improve": 10.341,
    "time": 33184.33349609375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (- INFINITY)) (* w0 (hypot 1.0 (* D (/ M (/ d (sqrt (/ -0.25 (/ l h)))))))) (if (<= (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) 5e+306) (* w0 (sqrt (- 1.0 (* (/ h l) (pow (* (/ M d) (/ D 2.0)) 2.0))))) (if (<= (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) INFINITY) (* w0 (hypot 1.0 (* D (/ M (/ d (sqrt (/ -0.25 (/ l h)))))))) (* w0 (sqrt (- 1.0 (/ (/ M (/ (* l -2.0) (* M (* h (/ D d))))) (/ d (/ D -2.0)))))))))",
    "output_parens": 71,
    "avg_bits_err_input": 14.208183454186809,
    "avg_bits_err_output": 6.505072492994997,
    "avg_bits_err_improve": 7.703110961191812,
    "time": 38441.7880859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (* (sqrt (- A)) (/ (/ c0 (sqrt (- V))) (sqrt l))) (if (<= (* V l) -2e-312) (* c0 (/ (sqrt (- A)) (sqrt (* V (- l))))) (if (<= (* V l) 2e-311) (/ c0 (* (sqrt (- V)) (sqrt (/ l (- A))))) (/ (sqrt A) (/ (sqrt (* V l)) c0)))))",
    "output_parens": 37,
    "avg_bits_err_input": 19.039959213284444,
    "avg_bits_err_output": 7.085741251318678,
    "avg_bits_err_improve": 11.954217961965766,
    "time": 32583.69189453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) -2e-198) (* (/ c0 (* 2.0 w)) (- (* (sqrt (fma d (* (/ c0 (* h D)) (/ d (* w D))) M)) (sqrt (- (* d (* (/ c0 (* h D)) (/ d (* w D)))) M))) (* (* (/ d (- h)) (/ (/ c0 D) D)) (/ d w)))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 0.0) (fma (* c0 (/ (* M 0.5) (* w (- (* (/ d (* w D)) (* (/ c0 D) (/ d h))) (sqrt (- (pow (* (/ d (* w D)) (* (/ c0 D) (/ d h))) 2.0) (* M M))))))) M 0.0) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) M)) (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) (- M))) (* (/ c0 (/ w d)) (/ d (* D (* h D)))))) (* c0 (* (/ 0.5 w) (* M (/ M (- (* (/ (* d (/ c0 D)) h) (/ (/ d D) w)) (sqrt (- (pow (* (/ (* d (/ c0 D)) h) (/ (/ d D) w)) 2.0) (* M M)))))))))))",
    "output_parens": 180,
    "avg_bits_err_input": 59.97466461697975,
    "avg_bits_err_output": 32.04035538497854,
    "avg_bits_err_improve": 27.934309232001212,
    "time": 79513.38403320312,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d -4e+32) (* (* (sqrt (/ d l)) (* (sqrt (- d)) (sqrt (/ 1.0 (- h))))) (- 1.0 (/ h (/ (* l (/ (/ d D) (* M (/ D d)))) (* M 0.125))))) (if (<= d -8.8e-82) (* (sqrt (/ d h)) (* (sqrt (/ d l)) (+ 1.0 (* (/ (* (/ D d) (/ M 2.0)) (/ (/ (* l d) (* D (* 0.5 M))) h)) -0.5)))) (if (<= d -1.5e-300) (* (* (sqrt (/ d h)) (/ (sqrt (- d)) (sqrt (- l)))) (+ 1.0 (/ (/ (* 0.125 (* h M)) (- l)) (/ (/ d D) (* M (/ D d)))))) (if (<= d 3.1e-97) (* (/ d (sqrt (* l h))) (+ 1.0 (* (/ (* -0.5 (* D (* M -0.5))) d) (/ (/ (* D (* M -0.5)) d) (/ l h))))) (* (/ d (* (sqrt h) (sqrt l))) (+ 1.0 (* (pow (* M (/ (* 0.5 D) d)) 2.0) (* (/ h l) -0.5))))))))",
    "output_parens": 91,
    "avg_bits_err_input": 27.179215347818232,
    "avg_bits_err_output": 17.29984406889992,
    "avg_bits_err_improve": 9.879371278918313,
    "time": 110035.81689453125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (- 1.0 (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 4.5)) (* (+ (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ (/ 0.5 (hypot 1.0 x)) 1.5)) (+ (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 1.5) (+ 1.0 (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 3.0)))))",
    "output_parens": 25,
    "avg_bits_err_input": 16.0976448010201,
    "avg_bits_err_output": 15.629409327433665,
    "avg_bits_err_improve": 0.468235473586434,
    "time": 45549.696533203125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9851981203125901,
    "avg_bits_err_output": 0.008969360937770433,
    "avg_bits_err_improve": 0.9762287593748197,
    "time": 5791.626708984375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (fma (* v v) -5.0 1.0) (* PI (- 1.0 (* v v)))) (sqrt (fma v (* v -6.0) 2.0))) t)",
    "output_parens": 11,
    "avg_bits_err_input": 0.4699651755792754,
    "avg_bits_err_output": 0.1125543234384916,
    "avg_bits_err_improve": 0.35741085214078383,
    "time": 18566.60595703125,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (sqrt (+ 2.0 (* v (* v -6.0)))) (- 1.0 (* v v))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.011448120312590146,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 0.002823120312590145,
    "time": 11491.968505859375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(+ (+ (acos (/ (fma v (* v -5.0) 1.0) (fma v v -1.0))) 2.0) -2.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.5498065734829228,
    "avg_bits_err_output": 0.5514504624573633,
    "avg_bits_err_improve": -0.001643888974440455,
    "time": 42681.21826171875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (- (/ -1.0 a) (* (/ k a) (pow (/ 1.0 (+ k 10.0)) -1.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 1.8855198915566997,
    "avg_bits_err_output": 0.2636227391749212,
    "avg_bits_err_improve": 1.6218971523817785,
    "time": 20463.4609375,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.023025757404635052,
    "avg_bits_err_output": 0.023025757404635052,
    "avg_bits_err_improve": 0,
    "time": 9365.23779296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18252857187842536,
    "avg_bits_err_output": 0.01629288827552474,
    "avg_bits_err_improve": 0.1662356836029006,
    "time": 11982.67822265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18674133035577506,
    "avg_bits_err_output": 0.024844767962934597,
    "avg_bits_err_improve": 0.16189656239284045,
    "time": 20149.611572265625,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (+ (+ (* b (* b (* a a))) (pow b 4.0)) (+ (* b (* b (* a a))) (pow a 4.0))) (* 4.0 (+ (* a (* a (- 1.0 a))) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 21,
    "avg_bits_err_input": 0.18881329892135118,
    "avg_bits_err_output": 0.02159620867996708,
    "avg_bits_err_improve": 0.1672170902413841,
    "time": 24539.07763671875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(pow (+ 0.5 (/ x (/ (hypot x (* p 2.0)) 0.5))) 0.5)",
    "output_parens": 6,
    "avg_bits_err_input": 13.46761535571047,
    "avg_bits_err_output": 13.459678638283867,
    "avg_bits_err_improve": 0.007936717426602513,
    "time": 20317.89404296875,
    "seed": 19,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(hypot 1.0 (exp (* x 0.5)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.82770324993401,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 40.82120324993401,
    "time": 6495.876708984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -3e-8) (/ (- (/ x (- (tan x) x)) (* (pow (/ x (- (tan x) x)) 2.0) (/ (- (tan x) x) (sin x)))) (* (/ x (- (tan x) x)) (/ (- (tan x) x) (sin x)))) (if (<= x 2.5e-8) (* (/ x (tan x)) (/ (- (- (sin x)) x) (fma x (/ x (tan x)) x))) (- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))))",
    "output_parens": 44,
    "avg_bits_err_input": 31.2218692274709,
    "avg_bits_err_output": 25.43483287833534,
    "avg_bits_err_improve": 5.787036349135562,
    "time": 40960.02783203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -4.4e+196) (/ (- (hypot b_2 (/ a (/ (sqrt (* a c)) c))) b_2) a) (if (<= b_2 -1.25e+160) (/ (- (hypot b_2 (sqrt (* a (- c)))) b_2) a) (if (<= b_2 -7e-303) (- (/ (sqrt (- (* b_2 b_2) (* a c))) a) (/ b_2 a)) (if (<= b_2 3.3e+154) (/ c (* (- a) (+ (/ (sqrt (- (* b_2 b_2) (* a c))) a) (/ b_2 a)))) (/ c (- (- (hypot b_2 (sqrt (* a c)))) b_2))))))",
    "output_parens": 44,
    "avg_bits_err_input": 33.3586201905314,
    "avg_bits_err_output": 16.426027038772094,
    "avg_bits_err_improve": 16.932593151759303,
    "time": 32011.494140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (- INFINITY)) (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) -1e-216) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 5e-157) (/ c (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) (if (<= (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) 5e+307) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a) (/ c (- (hypot b_2 (sqrt (* a c))) b_2))))))",
    "output_parens": 68,
    "avg_bits_err_input": 34.39088452413298,
    "avg_bits_err_output": 19.46953286065243,
    "avg_bits_err_improve": 14.92135166348055,
    "time": 24826.555419921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 31.249751031140796,
    "avg_bits_err_output": 0.1259178578176383,
    "avg_bits_err_improve": 31.12383317332316,
    "time": 23447.277587890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (/ 1.0 (exp (/ (log1p x) (- n)))) (pow x (/ 1.0 n)))",
    "output_parens": 8,
    "avg_bits_err_input": 32.315236178028606,
    "avg_bits_err_output": 32.049613091607775,
    "avg_bits_err_improve": 0.2656230864208311,
    "time": 41214.789306640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.67818123973979,
    "avg_bits_err_output": 0.025125,
    "avg_bits_err_improve": 29.65305623973979,
    "time": 34543.95703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 x) (- -1.0 x))",
    "output_parens": 3,
    "avg_bits_err_input": 14.62474502994269,
    "avg_bits_err_output": 0.0735,
    "avg_bits_err_improve": 14.551245029942692,
    "time": 10321.489501953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= eps -5e-6) (fma (cos x) (cos eps) (- (fma (sin x) (sin eps) (cos x)))) (if (<= eps 0.0008) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (- (- (* (cos x) (cos eps)) (cos x)) (/ (* (sin x) (pow (sin eps) 3.0)) (pow (sin eps) 2.0)))))",
    "output_parens": 33,
    "avg_bits_err_input": 39.42344523042765,
    "avg_bits_err_output": 0.7109416411944777,
    "avg_bits_err_improve": 38.71250358923317,
    "time": 42197.370361328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (fma (cbrt (+ 1.0 x)) (+ (cbrt (+ 1.0 x)) (cbrt x)) (pow (/ x (pow (cbrt x) 2.0)) 2.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 29.974136662457955,
    "avg_bits_err_output": 0.22708456464214322,
    "avg_bits_err_improve": 29.74705209781581,
    "time": 24319.501708984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.415523609635727,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 30.41502360963573,
    "time": 10054.738525390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -1.42e-77) (/ (- (hypot b (* (/ a (sqrt a)) (sqrt (* c -4.0)))) b) (* a 2.0)) (if (<= c 1.55e-128) (/ (- (hypot b (pow (* -4.0 (* (* a (* c -4.0)) (* c a))) 0.25)) b) (* a 2.0)) (if (<= c 7.4e+18) (/ (- (hypot b (/ 1.0 (pow (* -4.0 (* c a)) -0.5))) b) (* a 2.0)) (if (<= c 3.6e+41) (/ (- (hypot b (pow (* (* (* c c) 16.0) (* a a)) 0.25)) b) (* a 2.0)) (if (<= c 5.9e+208) (* (/ (* a (* c -4.0)) (- (- b) (hypot b (sqrt (* a (* c -4.0)))))) (/ -0.5 a)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)))))))",
    "output_parens": 65,
    "avg_bits_err_input": 33.67674917748502,
    "avg_bits_err_output": 24.86945197956988,
    "avg_bits_err_improve": 8.80729719791514,
    "time": 39359.427978515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (/ 1.0 (/ -1.0 (* c -4.0))) (- b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))))) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -4e-271) (* -0.5 (+ (/ (sqrt (fma b b (* a (* c -4.0)))) a) (/ b a))) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 5e-247) (* -0.5 (/ (/ 1.0 (/ -1.0 (* c -4.0))) (- b (hypot b (pow (pow (* c (* a -4.0)) 2.0) 0.25))))) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 4e+243) (* -0.5 (/ (+ b (sqrt (fma b b (* a (* c -4.0))))) a)) (* -0.5 (/ (+ b (hypot (* (pow (* (* a c) (* c -4.0)) 0.25) (pow (* a -4.0) 0.25)) b)) a))))))",
    "output_parens": 93,
    "avg_bits_err_input": 34.2952012372741,
    "avg_bits_err_output": 15.62690586552715,
    "avg_bits_err_improve": 18.66829537174695,
    "time": 37775.1904296875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.48234358383173,
    "avg_bits_err_output": 0.01998120312590145,
    "avg_bits_err_improve": 61.46236238070583,
    "time": 10668.9345703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (log (/ (+ n 1.0) n)) (/ 1.0 (+ (* 2.0 (log (exp (/ -1.0 (- 1.0 (log1p n)))))) (/ 1.0 (- 1.0 (log1p n))))))",
    "output_parens": 15,
    "avg_bits_err_input": 63.003586208812294,
    "avg_bits_err_output": 44.221890080139296,
    "avg_bits_err_improve": 18.781696128672998,
    "time": 33190.0400390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.50507453227207,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 58.49744953227207,
    "time": 7400.07958984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (- 1.0 (pow (/ x (tan x)) 2.0)) x) (+ 1.0 (/ x (tan x))))",
    "output_parens": 9,
    "avg_bits_err_input": 59.88408315217295,
    "avg_bits_err_output": 59.860696091165195,
    "avg_bits_err_improve": 0.023387061007753118,
    "time": 32009.29541015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (/ (expm1 (* eps b)) (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ b a))))))",
    "output_parens": 11,
    "avg_bits_err_input": 60.029807782035185,
    "avg_bits_err_output": 28.983077926046818,
    "avg_bits_err_improve": 31.046729855988367,
    "time": 40911.931396484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.20346794511585,
    "avg_bits_err_output": 0.0115,
    "avg_bits_err_improve": 41.19196794511585,
    "time": 10931.282958984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.72378344594542,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 58.723033445945426,
    "time": 4944.097412109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.601623270563962,
    "avg_bits_err_output": 0.02071736561972104,
    "avg_bits_err_improve": 29.58090590494424,
    "time": 24281.82763671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (cbrt (pow (fma (pow (exp x) 2.0) (+ (* (exp x) 2.0) -3.0) 1.0) 3.0)) (fma 2.0 (exp (+ x x)) (exp x)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.934927720364247,
    "avg_bits_err_output": 29.690331284208035,
    "avg_bits_err_improve": 0.24459643615621118,
    "time": 36383.642333984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma x (/ (+ x x) (+ x -1.0)) (+ -2.0 (* x -2.0))) (* x (+ x 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 9.74829177130195,
    "avg_bits_err_output": 9.75198668730833,
    "avg_bits_err_improve": -0.0036949160063795006,
    "time": 41198.154541015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (or (<= x -9e-128) (not (<= x 5e-129))) (/ (+ (tan eps) (- (* (/ (- (pow (tan eps) 2.0) (pow (tan x) 2.0)) (fma (tan x) (tan eps) -1.0)) (/ (cos x) (sin x))) (tan x))) (* (/ (cos x) (sin x)) (- (tan x) (tan eps)))) (- (tan (+ x eps)) (tan x)))",
    "output_parens": 34,
    "avg_bits_err_input": 36.43921113191494,
    "avg_bits_err_output": 17.43862789454259,
    "avg_bits_err_improve": 19.000583237372346,
    "time": 40477.856201171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.0311619115621,
    "avg_bits_err_output": 0.13445300781475364,
    "avg_bits_err_improve": 29.89670890374735,
    "time": 26478.7900390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (/ (/ -1.0 (pow (sin eps) -2.0)) (+ 1.0 (cos eps))) (* (sin eps) (cos x)))",
    "output_parens": 11,
    "avg_bits_err_input": 36.6909443846718,
    "avg_bits_err_output": 0.37087850530127237,
    "avg_bits_err_improve": 36.32006587937053,
    "time": 29122.95751953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (- (pow (+ x 1.0) -0.5)) (- (fma (sqrt (+ x 1.0)) (sqrt x) x)))",
    "output_parens": 9,
    "avg_bits_err_input": 19.65787767276261,
    "avg_bits_err_output": 0.24262293281619576,
    "avg_bits_err_improve": 19.415254739946413,
    "time": 22999.1845703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 14.706098295422246,
    "avg_bits_err_output": 0.37845666165454633,
    "avg_bits_err_improve": 14.3276416337677,
    "time": 8963.632568359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.49036338333371,
    "avg_bits_err_output": 1.2922767898901002,
    "avg_bits_err_improve": 28.198086593443612,
    "time": 26749.251708984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07734252772443494,
    "avg_bits_err_output": 0.08488500897479549,
    "avg_bits_err_improve": -0.007542481250360555,
    "time": 22253.869384765625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (* a (- b)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.085804749389116,
    "avg_bits_err_output": 0.30406165469173674,
    "avg_bits_err_improve": 15.78174309469738,
    "time": 16004.348876953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (fma (pow (cbrt (pow (cbrt (* angle 0.005555555555555556)) 2.0)) 3.0) (* (cbrt (* angle 0.005555555555555556)) PI) 0.0))) 2.0) (pow (* b (sin (/ PI (/ 180.0 angle)))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.213355120457617,
    "avg_bits_err_output": 20.308120195773995,
    "avg_bits_err_improve": -0.09476507531637779,
    "time": 47151.76611328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (+ b a) (* (sin (* PI (* angle 0.011111111111111112))) (- b a)))",
    "output_parens": 7,
    "avg_bits_err_input": 31.50825619267726,
    "avg_bits_err_output": 21.053206935929932,
    "avg_bits_err_improve": 10.455049256747326,
    "time": 43980.43310546875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (/ (* (pow PI 3.0) 1.7146776406035666e-7) (/ (* 3.08641975308642e-5 (pow PI 2.0)) angle)))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 20.177170824327334,
    "avg_bits_err_output": 20.16530294619073,
    "avg_bits_err_improve": 0.011867878136602172,
    "time": 48702.982177734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(fma (/ m v) (* m (- 1.0 m)) (- m))",
    "output_parens": 5,
    "avg_bits_err_input": 0.17100804548200058,
    "avg_bits_err_output": 0.16861180485682026,
    "avg_bits_err_improve": 0.002396240625180318,
    "time": 30208.352783203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.33175743549675557,
    "avg_bits_err_output": 0.3334082874467403,
    "avg_bits_err_improve": -0.0016508519499847107,
    "time": 30553.517578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (* e (/ -1.0 (- -1.0 (* e (cos v))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.1347193609377704,
    "avg_bits_err_output": 0.13686560156295072,
    "avg_bits_err_improve": -0.002146240625180318,
    "time": 23681.517822265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (cos phi1) (+ (* (* (cos lambda1) (cos lambda2)) (cos phi2)) (* (cos phi2) (* (sin lambda1) (sin lambda2))))))) R)",
    "output_parens": 18,
    "avg_bits_err_input": 17.104720361712022,
    "avg_bits_err_output": 3.7908638710235145,
    "avg_bits_err_improve": 13.313856490688508,
    "time": 41735.05419921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* (fma c (* a -4.0) (* b (- b (sqrt (fma c (* a -4.0) (* b b)))))) (* b (* (/ 1.0 b) (/ -1.0 (/ (sqrt (fma (* c -4.0) a (* b b))) -1.0))))) (* a 2.0))",
    "output_parens": 20,
    "avg_bits_err_input": 52.76154780897245,
    "avg_bits_err_output": 45.36151249889755,
    "avg_bits_err_improve": 7.400035310074905,
    "time": 54004.3349609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -2e-13) (* (/ -0.5 a) (/ (- (pow b 9.0) (* (pow (fma b b (* a (* c -4.0))) 2.25) (/ (pow (fma a (* c -4.0) (* b b)) 4.5) (pow (fma a (* c -4.0) (* b b)) 2.25)))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (+ (pow b 6.0) (pow (fma b b (* a (* c -4.0))) 3.0)) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0))))) (log (pow (pow (exp (/ (fma c (* a -4.0) (* b (- b (sqrt (fma c (* a -4.0) (* b b)))))) (* a (sqrt (fma c (* a -4.0) (* b b)))))) 1.5) 0.3333333333333333)))",
    "output_parens": 70,
    "avg_bits_err_input": 28.529744901384003,
    "avg_bits_err_output": 25.9455357006494,
    "avg_bits_err_improve": 2.584209200734602,
    "time": 94230.05444335938,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (fma (cbrt (pow b 18.0)) (cbrt (pow b 9.0)) (- (pow (fma b b (* (* a c) -4.0)) 4.5)))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (+ (pow b 6.0) (* (fma b b (* a (* c -4.0))) (pow (pow (cbrt (fma b b (* a (* c -4.0)))) 2.0) 3.0))) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0)))) (/ -0.5 a))",
    "output_parens": 43,
    "avg_bits_err_input": 43.742041672974686,
    "avg_bits_err_output": 40.55059149717184,
    "avg_bits_err_improve": 3.1914501758028493,
    "time": 78119.67993164062,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -1.42e-77) (/ (- (hypot b (/ (sqrt a) (/ (sqrt (* c -4.0)) (* c -4.0)))) b) (* a 2.0)) (if (<= c 1.45e-130) (/ (- (hypot b (pow (* -4.0 (* (* a (* c -4.0)) (* c a))) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 32,
    "avg_bits_err_input": 33.678949773148155,
    "avg_bits_err_output": 23.638434471168438,
    "avg_bits_err_improve": 10.040515301979717,
    "time": 41377.796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8554353573512197,
    "avg_bits_err_output": 0.23708720667449218,
    "avg_bits_err_improve": 0.6183481506767274,
    "time": 35060.993896484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(+ (log1p (expm1 (* (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (/ 4.0 (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x))))))))) (/ -1.0 (+ 1.0 (/ 2.0 (+ 1.0 (exp (* -2.0 x)))))))",
    "output_parens": 20,
    "avg_bits_err_input": 29.589158234542733,
    "avg_bits_err_output": 29.58709955158488,
    "avg_bits_err_improve": 0.0020586829578519428,
    "time": 45656.852294921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.12261903136475,
    "avg_bits_err_output": 0.01464624062518029,
    "avg_bits_err_improve": 58.10797279073957,
    "time": 9754.83837890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.055986656383155,
    "avg_bits_err_output": 0.00725,
    "avg_bits_err_improve": 58.048736656383156,
    "time": 8361.395263671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.008448120312590145,
    "avg_bits_err_output": 0.00825,
    "avg_bits_err_improve": 0.0001981203125901443,
    "time": 8472.523681640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.881625,
    "avg_bits_err_output": 0.098625,
    "avg_bits_err_improve": 31.783,
    "time": 5245.779541015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.4959460051333,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 58.4883210051333,
    "time": 10813.285400390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(- (log (/ x (+ 1.0 (sqrt (- 1.0 (* x x)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.026875,
    "avg_bits_err_output": 0.001625,
    "avg_bits_err_improve": 0.025249999999999998,
    "time": 6741.087646484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12744812031259015,
    "avg_bits_err_output": 0.126125,
    "avg_bits_err_improve": 0.0013231203125901592,
    "time": 34984.163818359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* ew (/ (cos t) (hypot 1.0 (* eh (/ (tan t) ew))))) (* (* eh (sin t)) (sin (atan (/ (* (tan t) (- eh)) ew))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.129,
    "avg_bits_err_output": 0.1306674812503606,
    "avg_bits_err_improve": -0.0016674812503605918,
    "time": 32676.59033203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (sin (* phi2 0.5)) (- (sin (* 0.5 phi1))) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 39.20791525352395,
    "avg_bits_err_output": 0.1255394013050054,
    "avg_bits_err_improve": 39.082375852218945,
    "time": 32582.328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(pow (/ a (* (+ a b) (/ (- a b) a))) -0.5)",
    "output_parens": 6,
    "avg_bits_err_input": 14.227114489635877,
    "avg_bits_err_output": 0.016823120312590145,
    "avg_bits_err_improve": 14.210291369323286,
    "time": 11669.500244140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (+ (cos delta) (- (* (cos delta) (+ (/ (cos (* phi1 2.0)) 2.0) -0.5)) (* (* (cos phi1) (* (sin delta) (cos theta))) (sin phi1))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.1485108369463292,
    "avg_bits_err_output": 0.1513296487871013,
    "avg_bits_err_improve": -0.002818811840772123,
    "time": 51614.332763671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma c (* -3.0 a) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 52.79820351486748,
    "avg_bits_err_output": 0.08311560156295071,
    "avg_bits_err_improve": 52.71508791330453,
    "time": 44818.742919921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.675115352585333,
    "avg_bits_err_output": 0.45039041564104687,
    "avg_bits_err_improve": 28.224724936944288,
    "time": 52632.97607421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma c (* -3.0 a) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 43.717116949100095,
    "avg_bits_err_output": 0.16111560156295077,
    "avg_bits_err_improve": 43.55600134753715,
    "time": 44731.174560546875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= c -4e-159) (/ (* (- b (hypot b (* (sqrt (* c -3.0)) (sqrt (fabs a))))) -0.3333333333333333) a) (if (<= c 2.4e+79) (/ (* -0.3333333333333333 (- b (hypot b (sqrt (fabs (* (* c -3.0) a)))))) a) (/ (* -0.3333333333333333 (- b (hypot b (* c (sqrt (* -3.0 (/ a c))))))) a)))",
    "output_parens": 29,
    "avg_bits_err_input": 33.73140712667356,
    "avg_bits_err_output": 19.514153127032003,
    "avg_bits_err_improve": 14.217253999641557,
    "time": 40223.6005859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (sin lambda1) (cos lambda2) (* (cos lambda1) (- (sin lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (fma (cos lambda2) (cos lambda1) (log1p (expm1 (* (sin lambda1) (sin lambda2))))))))",
    "output_parens": 26,
    "avg_bits_err_input": 12.970295589353583,
    "avg_bits_err_output": 0.17016693649825423,
    "avg_bits_err_improve": 12.800128652855328,
    "time": 54873.919921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (- -1.0 (- (* (+ x 1.0) (/ (+ x 1.0) x)) x)) (* (/ (+ x 1.0) x) (+ -1.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 28.870565557947803,
    "avg_bits_err_output": 24.942339228795294,
    "avg_bits_err_improve": 3.9282263291525084,
    "time": 44356.02294921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ (+ x -1.0) (/ (+ x 1.0) x)) (* (+ x -1.0) (/ (+ x 1.0) x)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.01325,
    "avg_bits_err_output": 0.01464624062518029,
    "avg_bits_err_improve": -0.0013962406251802912,
    "time": 10850.8701171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.062164864266142,
    "avg_bits_err_output": 0.070875,
    "avg_bits_err_improve": 13.991289864266143,
    "time": 22159.48046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (- (pow (* (cbrt (+ A (- C (hypot B (- A C))))) (* (cbrt (* (fma B B (* C (* A -4.0))) 2.0)) (cbrt F))) 1.5)) (+ (* B B) (* -4.0 (* A C))))",
    "output_parens": 20,
    "avg_bits_err_input": 52.255105281448856,
    "avg_bits_err_output": 39.96188451164758,
    "avg_bits_err_improve": 12.293220769801273,
    "time": 53046.857177734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(/ (* 180.0 (atan (/ 1.0 (/ B (- (- C A) (hypot (- A C) B)))))) PI)",
    "output_parens": 9,
    "avg_bits_err_input": 29.818121364011493,
    "avg_bits_err_output": 14.328320842543953,
    "avg_bits_err_improve": 15.48980052146754,
    "time": 31324.57568359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1e-310) (* (/ (sqrt (* 2.0 (+ (* F (* A (* C -4.0))) (* F (* B B))))) (fma (* A -4.0) C (* B B))) (- (sqrt (+ C (+ A (hypot B (- A C))))))) (* (sqrt (+ C (+ A (hypot B (- A C))))) (/ 1.0 (/ (sqrt (fma -4.0 (* C A) (* B B))) (- (sqrt (* F 2.0)))))))",
    "output_parens": 36,
    "avg_bits_err_input": 52.1401115349008,
    "avg_bits_err_output": 38.97190006549087,
    "avg_bits_err_improve": 13.168211469409925,
    "time": 57715.442626953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(* (cbrt (* g 0.5)) (cbrt (/ 1.0 a)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.846903408451233,
    "avg_bits_err_output": 0.8544257477314201,
    "avg_bits_err_improve": 14.992477660719812,
    "time": 23993.51513671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g 4.6e-166) (+ (* (cbrt (/ 0.5 a)) (cbrt (- (hypot g h) g))) (/ 1.0 (cbrt (/ a (* (+ g (hypot g h)) -0.5))))) (+ (cbrt (* (/ 0.5 a) (- (hypot h g) g))) (* (cbrt (+ g (hypot g h))) (cbrt (/ -0.5 a)))))",
    "output_parens": 27,
    "avg_bits_err_input": 36.34708362534482,
    "avg_bits_err_output": 3.4298072395015216,
    "avg_bits_err_improve": 32.9172763858433,
    "time": 35510.958251953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9905714296960648,
    "avg_bits_err_output": 0.03696973750504809,
    "avg_bits_err_improve": 0.9536016921910168,
    "time": 17436.3447265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(/ 1.0 (+ 1.0 (exp (- b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.804125,
    "avg_bits_err_output": 0.014157173480336582,
    "avg_bits_err_improve": 0.7899678265196634,
    "time": 18335.068359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+268) (/ (* a1 (/ a2 b1)) b2) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-308) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b1) (/ a1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+265) (/ (* a1 a2) (* b1 b2)) (* (/ a1 b1) (/ a2 b2))))))",
    "output_parens": 35,
    "avg_bits_err_input": 10.711597641688524,
    "avg_bits_err_output": 2.937712097290087,
    "avg_bits_err_improve": 7.773885544398437,
    "time": 17287.529052734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(+ (+ (* x y) (log1p (exp x))) (* (* x y) -2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.49916476114975633,
    "avg_bits_err_output": 0.478125,
    "avg_bits_err_improve": 0.02103976114975631,
    "time": 15407.899658203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -2.0) (- (log (- (hypot 1.0 x) x))) (log1p (* x (+ 1.0 (/ x (+ 1.0 (hypot 1.0 x)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 52.9795181675399,
    "avg_bits_err_output": 0.026625,
    "avg_bits_err_improve": 52.9528931675399,
    "time": 12660.35498046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.681446684364617,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.681446684364617,
    "time": 2028.637451171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (+ (/ x (- -1.0 x)) (/ (- 1.0 x) (- 1.0 (* x x)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.010875,
    "avg_bits_err_improve": 0.0025000000000000005,
    "time": 7838.247802734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1262.208740234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (/ 2.0 (* r r)) (- -1.5 (* (* (* r w) (* r w)) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 12.774235722855092,
    "avg_bits_err_output": 0.31862067288649315,
    "avg_bits_err_improve": 12.4556150499686,
    "time": 41102.65380859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.5159809249647487,
    "avg_bits_err_output": 0.3181532829585769,
    "avg_bits_err_improve": 0.19782764200617176,
    "time": 88326.06005859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (/ (- t1) (/ (+ t1 u) v)) (+ t1 u))",
    "output_parens": 6,
    "avg_bits_err_input": 18.44557671619713,
    "avg_bits_err_output": 1.479450949775653,
    "avg_bits_err_improve": 16.966125766421477,
    "time": 8150.088623046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma 0.954929658551372 x (* (pow x 3.0) -0.12900613773279798))",
    "output_parens": 3,
    "avg_bits_err_input": 0.2291156015629507,
    "avg_bits_err_output": 0.20294812031259013,
    "avg_bits_err_improve": 0.026167481250360558,
    "time": 24012.202880859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0019481203125901445,
    "avg_bits_err_output": 0.0019481203125901445,
    "avg_bits_err_improve": 0,
    "time": 3601.5048828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI 0.5) (+ b a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 14.481456735071005,
    "avg_bits_err_output": 0.24066541406655625,
    "avg_bits_err_improve": 14.240791321004448,
    "time": 48124.256591796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0))) (* (+ (/ 1.0 eps) -1.0) (/ -1.0 (exp (fma eps x x))))) 2.0)",
    "output_parens": 13,
    "avg_bits_err_input": 29.81263627458951,
    "avg_bits_err_output": 29.824080300829227,
    "avg_bits_err_improve": -0.0114440262397153,
    "time": 46834.734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.00425,
    "avg_bits_err_output": 0.00425,
    "avg_bits_err_improve": 0,
    "time": 11209.611572265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (+ 2.0 (+ -1.0 (+ 1.0 (* (+ 2.0 (/ 2.0 (- -1.0 t))) (+ 2.0 (/ 2.0 (- -1.0 t))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.007375,
    "avg_bits_err_output": 0.005709053167746437,
    "avg_bits_err_improve": 0.0016659468322535627,
    "time": 57011.46923828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ t (+ 0.25 (* t 0.25))) (+ 1.0 t)))) (+ (* t (/ (/ t (+ 0.25 (* t 0.25))) (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.0335,
    "avg_bits_err_output": 0.008875,
    "avg_bits_err_improve": 0.024625,
    "time": 12955.933349609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3085.88037109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3285.4697265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 3890.384521484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.824276137616425,
    "avg_bits_err_output": 0.253125,
    "avg_bits_err_improve": 7.571151137616425,
    "time": 18540.53173828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(expm1 (log1p (- (pow (+ x eps) 5.0) (pow x 5.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 7.796183698191227,
    "avg_bits_err_output": 7.811471594147508,
    "avg_bits_err_improve": -0.015287895956281439,
    "time": 22994.3076171875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(fma (* x 2.0) eps (* eps eps))",
    "output_parens": 3,
    "avg_bits_err_input": 15.942217949882018,
    "avg_bits_err_output": 0.008823120312590145,
    "avg_bits_err_improve": 15.933394829569428,
    "time": 12669.253173828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5227591036483363,
    "avg_bits_err_output": 0.39201710625757236,
    "avg_bits_err_improve": 3.130741997390764,
    "time": 26346.92626953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.88172632941671,
    "avg_bits_err_output": 0.0178704890651142,
    "avg_bits_err_improve": 14.863855840351595,
    "time": 11786.31103515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.74881219898697,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.74881219898697,
    "time": 5130.75732421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.073055117603154,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.07280511760315,
    "time": 4159.471435546875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.29375,
    "avg_bits_err_improve": 63.70625,
    "time": 57739.916015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (* t t) 4e-32)",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325134047954,
    "avg_bits_err_output": 0.410012218755409,
    "avg_bits_err_improve": 61.43323912172413,
    "time": 16574.897705078125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (/ 1.0 (/ -1.0 (* c -4.0))) (- b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))))) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -4e-271) (* -0.5 (+ (/ (sqrt (fma b b (* a (* c -4.0)))) a) (/ b a))) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 5e-247) (* -0.5 (/ (/ 1.0 (/ -1.0 (* c -4.0))) (- b (hypot b (pow (pow (* c (* a -4.0)) 2.0) 0.25))))) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 4e+243) (* -0.5 (/ (+ b (sqrt (fma b b (* a (* c -4.0))))) a)) (* -0.5 (/ (+ b (hypot (* (pow (* (* a c) (* c -4.0)) 0.25) (pow (* a -4.0) 0.25)) b)) a))))))",
    "output_parens": 93,
    "avg_bits_err_input": 34.2952012372741,
    "avg_bits_err_output": 15.62690586552715,
    "avg_bits_err_improve": 18.66829537174695,
    "time": 40034.52392578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -1.42e-77) (/ (- (hypot b (/ (sqrt a) (/ (sqrt (* c -4.0)) (* c -4.0)))) b) (* a 2.0)) (if (<= c 1.45e-130) (/ (- (hypot b (pow (* -4.0 (* (* a (* c -4.0)) (* c a))) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 32,
    "avg_bits_err_input": 33.678949773148155,
    "avg_bits_err_output": 23.638434471168438,
    "avg_bits_err_improve": 10.040515301979717,
    "time": 44443.829833984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2050.82568359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.22878109257118,
    "avg_bits_err_output": 0.009375,
    "avg_bits_err_improve": 40.219406092571184,
    "time": 3736.150634765625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (/ (+ x y) (hypot x y)) (/ (hypot x y) (- x y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.4468839462664,
    "avg_bits_err_output": 0.026446256641368168,
    "avg_bits_err_improve": 20.420437689625032,
    "time": 15280.79345703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6851025900384813,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6851025900384813,
    "time": 20736.569091796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.038125,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.03725,
    "time": 6614.30224609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ b a)) (* a (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.023719360937770433,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 0.009844360937770432,
    "time": 6477.077392578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.015625,
    "avg_bits_err_output": 0.015625,
    "avg_bits_err_improve": 0,
    "time": 3526.1689453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.000875,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.000875,
    "time": 2084.853515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ e (+ d c)) (+ b a))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40499793281619606,
    "avg_bits_err_output": 0.30925,
    "avg_bits_err_improve": 0.09574793281619604,
    "time": 15733.0888671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.082026384833778,
    "avg_bits_err_output": 0.00725,
    "avg_bits_err_improve": 30.07477638483378,
    "time": 10478.87744140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (/ (- (* x x) eps) (sqrt (- (* x x) eps)))))",
    "output_parens": 8,
    "avg_bits_err_input": 24.184016653323592,
    "avg_bits_err_output": 0.04348120312590145,
    "avg_bits_err_improve": 24.140535450197692,
    "time": 13594.462646484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ 1.0 (/ (+ (/ x (tan x)) (cos x)) (/ (+ (pow (pow (/ x (tan x)) 2.0) 3.0) (* (pow (- -1.0 (cos (+ x x))) 3.0) 0.125)) (+ (pow (/ x (tan x)) 4.0) (* (* (- -1.0 (cos (+ x x))) -0.5) (+ (pow (/ x (tan x)) 2.0) (* (- -1.0 (cos (+ x x))) -0.5)))))))",
    "output_parens": 34,
    "avg_bits_err_input": 30.419596007039722,
    "avg_bits_err_output": 30.410242520167564,
    "avg_bits_err_improve": 0.009353486872157646,
    "time": 43348.782958984375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00575,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0.005375,
    "time": 2723.799072265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.2) (* 100.0 (* (/ n i) (+ (pow (+ 1.0 (/ i n)) n) -1.0))) (* 100.0 (/ (+ -1.0 (pow (exp n) (log1p (/ i n)))) (/ i n)))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.8415147810946,
    "avg_bits_err_output": 11.135210283832567,
    "avg_bits_err_improve": 36.70630449726204,
    "time": 31066.057373046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(/ (+ (/ (* d b) (hypot d c)) (* (/ c (hypot d c)) a)) (hypot d c))",
    "output_parens": 9,
    "avg_bits_err_input": 25.609066136059518,
    "avg_bits_err_output": 8.979395979635957,
    "avg_bits_err_improve": 16.62967015642356,
    "time": 23356.736572265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 25.982753069101992,
    "avg_bits_err_output": 0.6119280554763483,
    "avg_bits_err_improve": 25.370825013625645,
    "time": 27576.2392578125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (- (* ux maxCos) ux))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037625,
    "avg_bits_err_output": 0.021926748933204645,
    "avg_bits_err_improve": 0.015698251066795354,
    "time": 8528.66845703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (fma (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (- (pow (fma ux maxCos (- 1.0 ux)) 12.0)) (pow (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))) 2.0))) (+ (/ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)))) (/ (* (pow (- (pow (fma ux maxCos 1.0) 2.0) (* ux ux)) 6.0) (pow (/ 1.0 (+ ux (fma ux maxCos 1.0))) 6.0)) (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))))))))",
    "output_parens": 68,
    "avg_bits_err_input": 13.570782447418955,
    "avg_bits_err_output": 11.98381236233821,
    "avg_bits_err_improve": 1.586970085080745,
    "time": 119766.24609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* uy (* 2.0 PI))) (sqrt (/ (+ (fma (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 4.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))) (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 4.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))) (* (/ (/ (pow (fma ux maxCos (- 1.0 ux)) 12.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 4.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))) (- (pow (fma ux maxCos (- 1.0 ux)) 4.0) (pow (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)) 2.0))) (+ (pow (fma ux maxCos (- 1.0 ux)) 4.0) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))))) (fma (+ (pow (fma ux maxCos (- 1.0 ux)) 4.0) (- 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0))) (/ (/ (pow (fma ux maxCos (- 1.0 ux)) 12.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 4.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))) (- (pow (fma ux maxCos (- 1.0 ux)) 4.0) (pow (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)) 2.0))) (* (- (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) -1.0) (pow (fma ux maxCos (- 1.0 ux)) 4.0)) (/ (/ (pow (fma ux maxCos (- 1.0 ux)) 12.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 4.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))) (- (pow (fma ux maxCos (- 1.0 ux)) 4.0) (pow (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)) 2.0)))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 141,
    "avg_bits_err_input": 13.613212439241869,
    "avg_bits_err_output": 12.006562930491256,
    "avg_bits_err_improve": 1.6066495087506123,
    "time": 81249.64624023438,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (sqrt (fma ux (* (- 1.0 ux) (* (* ux (* maxCos maxCos)) (+ ux -1.0))) 1.0)) (fma (cos (* 2.0 (* uy PI))) xi (* (sin (* 2.0 (* uy PI))) yi)) (* (* ux maxCos) (/ (- 1.0 (* ux ux)) (/ (+ ux 1.0) zi))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.33857795013352554,
    "avg_bits_err_output": 0.3405676944370995,
    "avg_bits_err_improve": -0.0019897443035739593,
    "time": 58476.37060546875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.2018069536215519,
    "avg_bits_err_output": 0.19498120312590148,
    "avg_bits_err_improve": 0.006825750495650429,
    "time": 41463.75341796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* 39.47841760436263 (* u2 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5326200048436213,
    "avg_bits_err_output": 0.504377520364577,
    "avg_bits_err_improve": 0.028242484479044316,
    "time": 22204.362060546875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3063428212477156,
    "avg_bits_err_output": 0.3063428212477156,
    "avg_bits_err_improve": 0,
    "time": 29525.59716796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))) -1.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.33003870797885915,
    "avg_bits_err_output": 0.32995822595513724,
    "avg_bits_err_improve": 8.048202372190616e-05,
    "time": 33532.364013671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.059045489586960445,
    "avg_bits_err_output": 0.04249266654841896,
    "avg_bits_err_improve": 0.016552823038541484,
    "time": 8609.324462890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (fma s (exp (/ (fabs x) s)) (fma s 2.0 (/ s (exp (/ (fabs x) s))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.15872914394076296,
    "avg_bits_err_output": 0.13642753631472695,
    "avg_bits_err_improve": 0.022301607626036002,
    "time": 23857.281982421875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6646417569147469,
    "avg_bits_err_output": 0.671383895373748,
    "avg_bits_err_improve": -0.006742138459001068,
    "time": 28264.37109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.17133664783748395,
    "avg_bits_err_output": 0.16523923275447755,
    "avg_bits_err_improve": 0.006097415083006402,
    "time": 26339.990966796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ sinTheta_O (/ (hypot 1.0 sinTheta_O) sinTheta_O))) eta))) (asin (/ h (sqrt (+ (fma (* eta eta) 1.0 (* (/ (/ sinTheta_O (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))) eta) (/ (* eta (- eta)) (/ eta sinTheta_O)))) (* 0.0 (/ (/ (* sinTheta_O (* sinTheta_O eta)) (sqrt (fma sinTheta_O (- sinTheta_O) 1.0))) eta)))))))",
    "output_parens": 34,
    "avg_bits_err_input": 2.499164735521869,
    "avg_bits_err_output": 0.36459371126455375,
    "avg_bits_err_improve": 2.1345710242573155,
    "time": 40703.501220703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* cosTheta_i cosTheta_O) (* (/ (* (sinh (/ 1.0 v)) (* v 4.0)) (/ 2.0 v)) (exp (* (/ sinTheta_O v) sinTheta_i))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4724252346420962,
    "avg_bits_err_output": 0.41919491439664364,
    "avg_bits_err_improve": 0.053230320245452545,
    "time": 50735.673828125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (pow (* (pow (pow (cbrt (exp (+ 0.6931 (/ (fma cosTheta_i cosTheta_O (- (fma sinTheta_i sinTheta_O 1.0))) v)))) 2.0) 0.3333333333333333) (cbrt (cbrt (exp (+ 0.6931 (/ (fma cosTheta_i cosTheta_O (- (fma sinTheta_i sinTheta_O 1.0))) v)))))) 3.0) (* v 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 0.152237279469318,
    "avg_bits_err_output": 0.09776584003431843,
    "avg_bits_err_improve": 0.054471439434999575,
    "time": 19891.06640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.47341459829872734,
    "avg_bits_err_output": 0.42795002935355086,
    "avg_bits_err_improve": 0.045464568945176476,
    "time": 51999.8974609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (/ (- 0.25 u) 0.75)) (* s -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3315633394986508,
    "avg_bits_err_output": 0.5572921120137136,
    "avg_bits_err_improve": 0.7742712274849372,
    "time": 29664.102783203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.384435603547642,
    "avg_bits_err_output": 0.20125,
    "avg_bits_err_improve": 12.183185603547642,
    "time": 24662.912353515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ 0.125 (* s PI)) (+ (/ (exp (/ (- r) s)) r) (/ (* (pow E (* -0.16666666666666666 (/ r s))) (pow E (* -0.16666666666666666 (/ r s)))) r)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.14616035262140678,
    "avg_bits_err_output": 0.16001013093541452,
    "avg_bits_err_improve": -0.013849778314007744,
    "time": 63767.61962890625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9163473813057331,
    "avg_bits_err_output": 0.722571262759964,
    "avg_bits_err_improve": 0.19377611854576915,
    "time": 38406.39697265625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (* (pow PI -0.16666666666666666) (sqrt (- 1.0 (+ cosTheta cosTheta)))) (* cosTheta (cbrt PI))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.7136843510275821,
    "avg_bits_err_output": 0.42501565984348283,
    "avg_bits_err_improve": 0.28866869118409927,
    "time": 29512.820556640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p u1) (log1p (* u1 (- u1))))) (sin (/ (* (* u2 8.0) (pow PI 3.0)) (pow (* PI 2.0) 2.0))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.477390005953321,
    "avg_bits_err_output": 0.5224686480470724,
    "avg_bits_err_improve": 12.95492135790625,
    "time": 25479.8408203125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.526408367458307,
    "avg_bits_err_output": 0.29078426761155934,
    "avg_bits_err_improve": 13.235624099846747,
    "time": 25273.03759765625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- (* alpha alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.343850610989191,
    "avg_bits_err_output": 0.3283680453140324,
    "avg_bits_err_improve": 14.015482565675159,
    "time": 24148.838134765625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (log1p (- u0))) (+ (/ (/ cos2phi alphax) alphax) (/ (/ sin2phi alphay) alphay)))",
    "output_parens": 9,
    "avg_bits_err_input": 12.578819480856613,
    "avg_bits_err_output": 0.5352218021172644,
    "avg_bits_err_improve": 12.043597678739348,
    "time": 32438.771728515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= F -2.2e-260) (- (* PI l) (/ 1.0 (* F (/ F (tan (* PI l)))))) (if (<= F 5.8e-176) (- (* PI l) (* (tan (* PI l)) (pow (exp -2.0) (- (* (log F) 3.0) (log (* F F)))))) (- (* PI l) (/ (/ (tan (* PI l)) F) F))))",
    "output_parens": 29,
    "avg_bits_err_input": 16.444907328151956,
    "avg_bits_err_output": 10.177659629485618,
    "avg_bits_err_improve": 6.267247698666338,
    "time": 37080.848876953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21333116579459072,
    "avg_bits_err_output": 0.15601744391904987,
    "avg_bits_err_improve": 0.057313721875540846,
    "time": 22853.47705078125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.883072798316967,
    "avg_bits_err_output": 10.62095395105053,
    "avg_bits_err_improve": 3.2621188472664358,
    "time": 36109.091796875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (/ (- (log (/ (sinh (* PI (* 0.25 f))) (pow (sqrt (cosh (* PI (* 0.25 f)))) 2.0)))) PI) -0.25)",
    "output_parens": 13,
    "avg_bits_err_input": 61.58871014308897,
    "avg_bits_err_output": 1.8932944116254515,
    "avg_bits_err_improve": 59.69541573146351,
    "time": 57387.429931640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -5e+139) (pow (/ (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0))))) (* t (sqrt 2.0))) -1.0) (if (<= t -7.5e-141) (/ (* t (sqrt 2.0)) (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (- (* l (/ (+ x 1.0) (+ x -1.0))) l))))) (if (<= t 3e-114) (pow (cbrt (* t (/ (sqrt 2.0) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0)))))))) 3.0) (if (<= t 1.7e+141) (/ (* t (sqrt 2.0)) (sqrt (+ (* (/ (+ x 1.0) (+ x -1.0)) (* 2.0 (* t t))) (* l (- (* l (/ (+ x 1.0) (+ x -1.0))) l))))) (pow (/ (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0))))) (* t (sqrt 2.0))) -1.0)))))",
    "output_parens": 82,
    "avg_bits_err_input": 42.99137361713371,
    "avg_bits_err_output": 16.568973216053717,
    "avg_bits_err_improve": 26.422400401079994,
    "time": 49313.53125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.085453883550879,
    "avg_bits_err_output": 0.21409229375396618,
    "avg_bits_err_improve": 3.871361589796913,
    "time": 24428.416748046875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (expm1 (log1p (hypot 1.0 (* (* 2.0 (/ l Om)) (hypot (sin kx) (sin ky))))))))))",
    "output_parens": 13,
    "avg_bits_err_input": 1.1194553301976353,
    "avg_bits_err_output": 0.004875,
    "avg_bits_err_improve": 1.1145803301976354,
    "time": 16899.956787109375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (* (/ t l) (sqrt 2.0)))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.450937440019898,
    "avg_bits_err_output": 1.1005846534342294,
    "avg_bits_err_improve": 9.350352786585669,
    "time": 23603.0693359375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -2.8e+146) (/ (sqrt (- n)) (sqrt (/ -0.5 (* U (fma (/ l Om) (+ (/ (- U* U) (/ (/ Om l) n)) (* l -2.0)) t))))) (if (<= n -1.9e-151) (pow (/ (/ (/ 0.5 U) n) (fma (/ l Om) (fma (- U* U) (* n (/ l Om)) (* l -2.0)) t)) -0.5) (if (<= n -4e-311) (/ (sqrt (- n)) (sqrt (/ -0.5 (* U (fma (/ l Om) (fma (log (pow (exp n) (/ l Om))) (- U* U) (* l -2.0)) t))))) (* (sqrt (* (* U (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t)) 2.0)) (sqrt n)))))",
    "output_parens": 58,
    "avg_bits_err_input": 34.54947140814998,
    "avg_bits_err_output": 23.895093642397768,
    "avg_bits_err_improve": 10.654377765752209,
    "time": 51763.844970703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -3.1e+18) (/ (* l (/ 2.0 k)) (* k (* t (* (sin k) (/ (tan k) l))))) (if (<= t 1e+54) (/ (* l (/ (/ 2.0 k) t)) (* k (* (sin k) (/ (tan k) l)))) (/ (/ (* l (/ 2.0 (tan k))) k) (* k (/ (* t (sin k)) l)))))",
    "output_parens": 31,
    "avg_bits_err_input": 47.70343549375484,
    "avg_bits_err_output": 1.3990213602044852,
    "avg_bits_err_improve": 46.30441413355035,
    "time": 110597.67724609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= k -3e-125) (* (/ l t) (/ (/ 2.0 (tan k)) (* t (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ t l)))))) (* (/ 2.0 (* t (sin k))) (* (/ l t) (/ (/ l t) (* (tan k) (+ 2.0 (pow (/ k t) 2.0)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 32.342430985604025,
    "avg_bits_err_output": 12.931783266858668,
    "avg_bits_err_improve": 19.41064771874536,
    "time": 68933.85302734375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (* (hypot a1 a2) (cos th)) (/ (pow 2.0 0.5) (hypot a1 a2)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5184238750216361,
    "avg_bits_err_output": 0.445211092202555,
    "avg_bits_err_improve": 0.07321278281908111,
    "time": 33203.063720703125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(if (<= n 2e-25) (sqrt (/ (pow (* PI (* 2.0 n)) (- 1.0 k)) k)) (/ (sqrt (* k (pow (* 2.0 (* PI n)) (- 1.0 k)))) k))",
    "output_parens": 15,
    "avg_bits_err_input": 0.5140279260500398,
    "avg_bits_err_output": 0.4550473830822839,
    "avg_bits_err_improve": 0.0589805429677559,
    "time": 24968.05615234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (* (sinh l) 2.0)) (cos (/ K 2.0))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.213703918742553,
    "avg_bits_err_output": 0.06813460194963136,
    "avg_bits_err_improve": 17.145569316792923,
    "time": 25151.11474609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(log (pow (exp (cos (- (* (+ m n) (* K 0.5)) M))) (exp (- (- (fabs (- m n)) l) (pow (- (* (+ m n) 0.5) M) 2.0)))))",
    "output_parens": 17,
    "avg_bits_err_input": 15.008031903246641,
    "avg_bits_err_output": 1.138327094343497,
    "avg_bits_err_improve": 13.869704808903144,
    "time": 35473.967041015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.203969360937773,
    "avg_bits_err_output": 8.32609436093777,
    "avg_bits_err_improve": 9.877875000000003,
    "time": 35443.9599609375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* 2.0 d) -5e+208) (* w0 (sqrt (+ 1.0 (* M (* (* (* (/ h (* d l)) D) M) (* (/ D d) -0.25)))))) (if (<= (* 2.0 d) 2e-56) (* w0 (sqrt (+ 1.0 (/ -1.0 (/ (/ d (/ M (/ 4.0 D))) (* h (/ (/ (* D M) l) d))))))) (* w0 (sqrt (- 1.0 (* (/ (* M (/ D (* d 4.0))) l) (* h (* M (/ D d)))))))))",
    "output_parens": 40,
    "avg_bits_err_input": 14.624542998972204,
    "avg_bits_err_output": 9.085921947353002,
    "avg_bits_err_improve": 5.538621051619202,
    "time": 37680.5556640625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (/ c0 (/ (sqrt (- V)) (sqrt (- (/ A l))))) (if (<= (* V l) -2e-227) (/ (sqrt (- A)) (/ (sqrt (* V (- l))) c0)) (if (<= (* V l) 0.0) (/ (/ c0 (sqrt (/ V A))) (sqrt l)) (if (<= (* V l) 5e+278) (* c0 (/ (sqrt A) (sqrt (* V l)))) (/ c0 (pow (/ (/ A l) V) -0.5))))))",
    "output_parens": 41,
    "avg_bits_err_input": 19.18210017194593,
    "avg_bits_err_output": 6.562173017245928,
    "avg_bits_err_improve": 12.619927154700001,
    "time": 38369.093505859375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= D -5.7e+130) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ c0 (* w h)) (* (/ d D) (/ d D)) M)) (sqrt (fma (/ c0 (* w h)) (* (/ d D) (/ d D)) (- M))) (* (/ c0 (* w h)) (* (/ d D) (/ d D))))) (if (<= D -1.4e-258) (* M (* M (* (/ c0 (* w (- (* d (/ (* (pow D -2.0) (* d (/ c0 w))) h)) (hypot (* d (/ (* (pow D -2.0) (* d (/ c0 w))) h)) M)))) 0.5))) (if (<= D 5.5e-303) (* 0.5 (* (/ c0 w) (/ M (/ (- (* (/ (/ d w) D) (* c0 (/ d (* D h)))) (hypot (* (/ (/ d w) D) (* c0 (/ d (* D h)))) (pow (* M (- M)) 0.5))) M)))) (if (<= D 2.7e+93) (* M (* M (* (/ c0 (* w (- (* d (/ (* (pow D -2.0) (* d (/ c0 w))) h)) (hypot (* d (/ (* (pow D -2.0) (* d (/ c0 w))) h)) M)))) 0.5))) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ c0 (* w h)) (* (/ d D) (/ d D)) M)) (sqrt (fma (/ c0 (* w h)) (* (/ d D) (/ d D)) (- M))) (* (/ c0 (* w h)) (* (/ d D) (/ d D)))))))))",
    "output_parens": 118,
    "avg_bits_err_input": 59.74169802210378,
    "avg_bits_err_output": 33.95498947849339,
    "avg_bits_err_improve": 25.786708543610395,
    "time": 131653.26953125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) -5e-151) (* (sqrt (/ d h)) (* (sqrt (/ d l)) (+ 1.0 (* (* (* D (/ M d)) (/ (/ (/ h l) (/ d (* M D))) 4.0)) -0.5)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 4e-216) (* (/ (fabs d) (sqrt (* h l))) (fma (/ h l) (* (pow (* (* M D) (/ 0.5 d)) 2.0) -0.5) 1.0)) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 4e+256) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (+ 1.0 (* (/ h l) (* (/ (* M (* D (/ (* M D) d))) d) -0.125)))) (* (/ (fabs d) (sqrt (* h l))) (+ 1.0 (/ (* (* M (* D -0.5)) (* h (* (* D (/ (* 0.5 M) d)) (/ 0.5 l)))) d))))))",
    "output_parens": 107,
    "avg_bits_err_input": 27.016522333590924,
    "avg_bits_err_output": 13.523843747289622,
    "avg_bits_err_improve": 13.492678586301302,
    "time": 92814.7314453125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ 1.0 (/ 1.0 (/ (+ 0.25 (/ -0.25 (fma x x 1.0))) (+ (+ 0.5 (/ 0.5 (hypot 1.0 x))) (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 1.5)))))",
    "output_parens": 14,
    "avg_bits_err_input": 15.448066746173776,
    "avg_bits_err_output": 14.944276334934491,
    "avg_bits_err_improve": 0.5037904112392848,
    "time": 57679.77490234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9822924812503606,
    "avg_bits_err_output": 0.01327124062518029,
    "avg_bits_err_improve": 0.9690212406251804,
    "time": 7752.682861328125,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (sqrt (fma v (* v -6.0) 2.0)))) (* (- 1.0 (* v v)) t))",
    "output_parens": 11,
    "avg_bits_err_input": 0.40754667459338745,
    "avg_bits_err_output": 0.11652144413776237,
    "avg_bits_err_improve": 0.29102523045562506,
    "time": 20270.084228515625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (sqrt (+ 2.0 (* v (* v -6.0)))) (- 1.0 (* v v))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.015026789890100095,
    "avg_bits_err_output": 0.011358795589947927,
    "avg_bits_err_improve": 0.003667994300152168,
    "time": 6249.078369140625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (+ 1.0 (* (* v v) -5.0)) (+ (* v v) -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.586107011897837,
    "avg_bits_err_output": 0.586107011897837,
    "avg_bits_err_improve": 0,
    "time": 31814.650146484375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (- (/ -1.0 a) (/ (+ k 10.0) (/ a k))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.06915416049006,
    "avg_bits_err_output": 0.2558645882082395,
    "avg_bits_err_improve": 1.8132895722818205,
    "time": 24814.0263671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02500558392515775,
    "avg_bits_err_output": 0.02500558392515775,
    "avg_bits_err_improve": 0,
    "time": 10544.383544921875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.1824013316399258,
    "avg_bits_err_output": 0.014459962500721157,
    "avg_bits_err_improve": 0.16794136913920465,
    "time": 15779.435791015625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1823637998834221,
    "avg_bits_err_output": 0.030047837769381698,
    "avg_bits_err_improve": 0.15231596211404042,
    "time": 16657.2138671875,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18817552734808446,
    "avg_bits_err_output": 0.031590960015374994,
    "avg_bits_err_improve": 0.15658456733270948,
    "time": 12287.191650390625,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (* (/ (+ 1.0 (pow (/ (hypot x (* p 2.0)) x) -3.0)) (- 1.0 (pow (/ (- (/ (* x x) (hypot x (* p 2.0))) x) (hypot x (* p 2.0))) 2.0))) (- 1.0 (- (pow (/ (hypot x (* p 2.0)) x) -2.0) (/ x (hypot x (* p 2.0))))))))",
    "output_parens": 28,
    "avg_bits_err_input": 13.050855588987446,
    "avg_bits_err_output": 13.05627601531059,
    "avg_bits_err_improve": -0.005420426323144767,
    "time": 30538.24365234375,
    "seed": 20,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(hypot 1.0 (exp (* 0.5 x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.95910217272023,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 40.95160217272023,
    "time": 5183.221923828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -5e-7) (fma (sin x) (/ 1.0 (- (tan x) x)) (/ x (- x (tan x)))) (if (<= x 2.15e-8) (* (/ (pow (cbrt (+ x (sin x))) 2.0) (fma x (/ x (tan x)) x)) (/ (cbrt (+ x (sin x))) (- (/ (tan x) x)))) (/ 1.0 (/ (+ (/ (tan x) x) -1.0) (+ (/ (sin x) x) -1.0)))))",
    "output_parens": 36,
    "avg_bits_err_input": 31.1622441417708,
    "avg_bits_err_output": 25.39553425134854,
    "avg_bits_err_improve": 5.766709890422259,
    "time": 34230.8447265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 5.2e-222) (/ (fabs (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a) (if (<= b_2 6.5e+162) (/ (- c) (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))) (/ (- c) (+ b_2 (hypot b_2 (sqrt (* a c)))))))",
    "output_parens": 24,
    "avg_bits_err_input": 33.58034283479927,
    "avg_bits_err_output": 18.63613003830504,
    "avg_bits_err_improve": 14.944212796494227,
    "time": 26394.94677734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.16e-243) (/ (/ (* c (- a)) (- b_2 (sqrt (- (* b_2 b_2) (* c a))))) a) (if (<= b_2 4.9e+145) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a) (/ (fma b_2 (- -1.0 (/ b_2 (hypot b_2 (sqrt (* c a))))) (/ a (/ (hypot b_2 (sqrt (* c a))) c))) a)))",
    "output_parens": 32,
    "avg_bits_err_input": 34.07013790512233,
    "avg_bits_err_output": 19.942168550077334,
    "avg_bits_err_improve": 14.127969355044996,
    "time": 30967.999755859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 31.809175377527488,
    "avg_bits_err_output": 0.12521954475914956,
    "avg_bits_err_improve": 31.683955832768337,
    "time": 24694.134033203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(/ 1.0 (/ 1.0 (- (exp (/ (log1p x) n)) (pow x (pow n -1.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 32.28090906370833,
    "avg_bits_err_output": 31.939371824603384,
    "avg_bits_err_improve": 0.3415372391049445,
    "time": 39258.981689453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.299182087719696,
    "avg_bits_err_output": 0.00925,
    "avg_bits_err_improve": 29.289932087719695,
    "time": 22587.8525390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (pow (+ 1.0 x) -2.0) (/ (fma x -1.0 -1.0) x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.731404307233335,
    "avg_bits_err_output": 0.021323120312590146,
    "avg_bits_err_improve": 14.710081186920744,
    "time": 15028.934814453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= eps -0.00013) (- (fma (cos x) (cos eps) (- (cos x))) (* (sin x) (sin eps))) (if (<= eps 0.00055) (* (* (sin (* eps 0.5)) (sin (* 0.5 (+ eps (+ x x))))) -2.0) (fma (cos x) (cos eps) (- (fma (sin x) (sin eps) (cos x))))))",
    "output_parens": 29,
    "avg_bits_err_input": 39.3162565886154,
    "avg_bits_err_output": 0.7060778969150632,
    "avg_bits_err_improve": 38.61017869170034,
    "time": 35664.97119140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (+ (pow (/ x (pow (cbrt x) 2.0)) 2.0) (* (cbrt (+ 1.0 x)) (- (cbrt (+ 1.0 x)) (cbrt (- x))))))",
    "output_parens": 14,
    "avg_bits_err_input": 29.61538023469967,
    "avg_bits_err_output": 0.22671343458139653,
    "avg_bits_err_improve": 29.388666800118276,
    "time": 22811.538330078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.256443566921956,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 30.256318566921955,
    "time": 10815.140380859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -2e-253) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 1e-267) (/ (* 0.5 (fma a (* c -4.0) (- (* b b) (* b b)))) (* a (+ b (hypot (sqrt (* a (* c -4.0))) b)))) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 5e+231) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0))))))) b) (* a 2.0))))))",
    "output_parens": 91,
    "avg_bits_err_input": 33.98275498666728,
    "avg_bits_err_output": 22.746379163608147,
    "avg_bits_err_improve": 11.236375823059134,
    "time": 40338.135498046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b 2.3e-298) (/ (/ (* (* a c) 4.0) (- (hypot b (sqrt (* a (* c -4.0)))) b)) (* a 2.0)) (if (<= b 2.05e-239) (/ (+ b (hypot b (* (sqrt a) (sqrt (* c -4.0))))) (* a -2.0)) (/ (+ b (hypot b (sqrt (fabs (* a (* c -4.0)))))) (* a -2.0))))",
    "output_parens": 30,
    "avg_bits_err_input": 34.42168904118794,
    "avg_bits_err_output": 21.42064555908155,
    "avg_bits_err_improve": 13.00104348210639,
    "time": 38638.290283203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.33684103380118,
    "avg_bits_err_output": 0.022606203125901447,
    "avg_bits_err_improve": 61.314234830675275,
    "time": 11035.882080078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (- (log1p n) (log n)) (/ (/ (+ (* (/ (pow (log1p n) 34.0) (* (pow (pow (log1p n) 70.83333333333333) 0.3333333333333333) (cbrt (pow (log1p n) 14.166666666666666)))) (cbrt (log1p n))) -1.0) (+ (pow (log1p n) 2.0) (+ (log1p n) 1.0))) (+ 1.0 (pow (log1p n) 3.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 63.0083649550288,
    "avg_bits_err_output": 44.213731016992185,
    "avg_bits_err_improve": 18.79463393803662,
    "time": 49184.925537109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.53179012753429,
    "avg_bits_err_output": 0.00725,
    "avg_bits_err_improve": 58.524540127534294,
    "time": 29969.815673828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(cbrt (pow (/ x (/ (+ 1.0 (+ (/ x (tan x)) (* (pow (/ x (tan x)) 2.0) (- -1.0 (/ x (tan x)))))) (* (+ 1.0 (/ x (tan x))) (+ 1.0 (/ x (tan x)))))) -3.0))",
    "output_parens": 22,
    "avg_bits_err_input": 59.87089322200644,
    "avg_bits_err_output": 59.856032073402886,
    "avg_bits_err_improve": 0.014861148603550589,
    "time": 42261.1796875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (/ (expm1 (* eps b)) (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ b a))))))",
    "output_parens": 11,
    "avg_bits_err_input": 60.37253754349297,
    "avg_bits_err_output": 29.536567860006667,
    "avg_bits_err_improve": 30.8359696834863,
    "time": 38403.007568359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.26232657018524,
    "avg_bits_err_output": 0.01204024101186092,
    "avg_bits_err_improve": 41.25028632917338,
    "time": 6575.189208984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.71435071468072,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.71347571468072,
    "time": 3324.495361328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.3258058584518,
    "avg_bits_err_output": 0.01681923215775668,
    "avg_bits_err_improve": 29.308986626294043,
    "time": 8404.096435546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(+ (- (* (pow (exp x) -2.0) (/ 1.0 (+ (exp (- x)) (- 2.0 (exp x))))) (/ (* (fma (+ (exp x) -2.0) (fma (cosh x) 2.0 -2.0) (pow (exp x) -2.0)) (pow (+ (exp x) -2.0) 2.0)) (- (cbrt (pow (exp x) -9.0)) (pow (+ (exp x) -2.0) 3.0)))) (fma (- (fma (+ (exp x) -2.0) (+ -2.0 (+ (exp x) (exp (- x)))) (pow (exp x) -2.0))) (/ (pow (+ (exp x) -2.0) 2.0) (- (pow (exp x) -3.0) (pow (+ (exp x) -2.0) 3.0))) (/ (* (pow (+ (exp x) -2.0) 2.0) (fma (+ (exp x) -2.0) (+ -2.0 (+ (exp x) (exp (- x)))) (pow (exp x) -2.0))) (- (pow (exp x) -3.0) (pow (+ (exp x) -2.0) 3.0)))))",
    "output_parens": 73,
    "avg_bits_err_input": 29.413189572216908,
    "avg_bits_err_output": 29.082754235643,
    "avg_bits_err_improve": 0.3304353365739061,
    "time": 49373.65185546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma (+ x -1.0) (/ x (fma x 2.0 (- -2.0 x))) (- -1.0 x)) (* (+ x 1.0) (* (+ x -1.0) (/ x (fma x 2.0 (- -2.0 x))))))",
    "output_parens": 14,
    "avg_bits_err_input": 9.814365027234135,
    "avg_bits_err_output": 9.773292955810787,
    "avg_bits_err_improve": 0.04107207142334879,
    "time": 50520.682373046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (/ (+ (* (* (tan eps) (sin x)) (tan x)) (* (tan eps) (cos x))) (* (tan x) (cos x))) (/ (tan x) (- 1.0 (* (tan eps) (tan x)))))",
    "output_parens": 20,
    "avg_bits_err_input": 37.270815854716275,
    "avg_bits_err_output": 0.4015132414240392,
    "avg_bits_err_improve": 36.869302613292234,
    "time": 38121.10888671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (fma (- -1.0 x) (/ -1.0 (sqrt (+ 1.0 x))) (sqrt x)))",
    "output_parens": 7,
    "avg_bits_err_input": 29.537471904759915,
    "avg_bits_err_output": 0.13071485000288469,
    "avg_bits_err_improve": 29.40675705475703,
    "time": 25460.787353515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (+ (cos eps) -1.0) (* (cos x) (sin eps)))",
    "output_parens": 7,
    "avg_bits_err_input": 36.47468880428797,
    "avg_bits_err_output": 0.3728154862224118,
    "avg_bits_err_improve": 36.10187331806556,
    "time": 27684.580810546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.69575315252571,
    "avg_bits_err_output": 0.10756372187554086,
    "avg_bits_err_improve": 19.58818943065017,
    "time": 24539.267333984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.167809408758213,
    "avg_bits_err_output": 0.39045851389184283,
    "avg_bits_err_improve": 14.77735089486637,
    "time": 13044.447998046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.719850736957508,
    "avg_bits_err_output": 1.2385090535832974,
    "avg_bits_err_improve": 28.48134168337421,
    "time": 30573.371337890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (/ m (/ v (- 1.0 m))) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.08232272405410936,
    "avg_bits_err_output": 0.07812460374151921,
    "avg_bits_err_improve": 0.004198120312590148,
    "time": 23753.8349609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* a b) (/ (/ -1.0 a) b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.37196471908534,
    "avg_bits_err_output": 0.28287771237028264,
    "avg_bits_err_improve": 16.089087006715058,
    "time": 20534.866943359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ angle (/ 180.0 PI)))) 2.0) (pow (* b (log1p (expm1 (sin (* PI (* angle 0.005555555555555556)))))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.389233911526752,
    "avg_bits_err_output": 20.3701705760277,
    "avg_bits_err_improve": 0.019063335499051703,
    "time": 53446.01123046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (+ b a) (* (* (* 2.0 (* (sin (* angle (* PI 0.005555555555555556))) (fabs (cos (* angle (* PI 0.005555555555555556)))))) 0.5) (- b a))))",
    "output_parens": 15,
    "avg_bits_err_input": 31.27805907037909,
    "avg_bits_err_output": 21.77285059714254,
    "avg_bits_err_improve": 9.50520847323655,
    "time": 51301.662841796875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* (sin (* angle (* PI 0.005555555555555556))) a) 2.0) (pow (* b (cos (/ 1.0 (/ 180.0 (* angle PI))))) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 20.15324652601649,
    "avg_bits_err_output": 20.132929020125097,
    "avg_bits_err_improve": 0.020317505891391363,
    "time": 45057.6572265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (/ m (/ v (* m (- 1.0 m)))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1864505640636719,
    "avg_bits_err_output": 0.17177596583933158,
    "avg_bits_err_improve": 0.014674598224340307,
    "time": 14733.80224609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (/ (* (tan x) (sin x)) (cos x))) (+ 1.0 (/ (* (tan x) (sin x)) (cos x))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.31238967449275823,
    "avg_bits_err_output": 0.30995635729205107,
    "avg_bits_err_improve": 0.0024333172007071635,
    "time": 28806.249755859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1309387218755409,
    "avg_bits_err_output": 0.1309387218755409,
    "avg_bits_err_improve": 0,
    "time": 29212.78955078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (fma (cos lambda1) (cos lambda2) (* (sin lambda1) (sin lambda2))) (* (cos phi1) (cos phi2))))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 17.032407256751274,
    "avg_bits_err_output": 3.889886824951499,
    "avg_bits_err_improve": 13.142520431799774,
    "time": 43081.248046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* c -2.0) (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))))",
    "output_parens": 8,
    "avg_bits_err_input": 52.75275759132865,
    "avg_bits_err_output": 0.08658496250072115,
    "avg_bits_err_improve": 52.66617262882793,
    "time": 32252.447265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (fma b b (- (fma b b (* a (* c -4.0))))) (* (/ a -0.5) (+ b (sqrt (expm1 (log1p (fma b b (* a (* c -4.0)))))))))",
    "output_parens": 15,
    "avg_bits_err_input": 28.499638671508404,
    "avg_bits_err_output": 26.98402194873501,
    "avg_bits_err_improve": 1.5156167227733945,
    "time": 53777.177734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* -4.0 a)))) b) (* a 2.0)) -1e-22) (/ (/ (- (pow (fma b b (* c (* -4.0 a))) 3.0) (pow b 6.0)) (* (+ b (sqrt (fma b b (* c (* -4.0 a))))) (+ (pow (fma b b (* c (* -4.0 a))) 2.0) (+ (pow b 4.0) (* (fma b b (* c (* -4.0 a))) (* b b)))))) (* a 2.0)) (/ (+ (- b) (pow (pow (fma c (* -4.0 a) (* b b)) 1.5) 0.3333333333333333)) (* a 2.0)))",
    "output_parens": 46,
    "avg_bits_err_input": 43.40407546852819,
    "avg_bits_err_output": 40.59671960575162,
    "avg_bits_err_improve": 2.807355862776568,
    "time": 53244.355712890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -2e-253) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e-267) (/ (* 0.5 (fma a (* c -4.0) (- (* b b) (* b b)))) (* a (+ b (hypot (sqrt (* a (* c -4.0))) b)))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 5e+231) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0))))))) b) (* a 2.0))))))",
    "output_parens": 91,
    "avg_bits_err_input": 34.004483310277834,
    "avg_bits_err_output": 22.752107487218694,
    "avg_bits_err_improve": 11.25237582305914,
    "time": 41931.638916015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (fma (cos phi2) (cos (- lambda1 lambda2)) (cos phi1))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8421704250420191,
    "avg_bits_err_output": 0.8392374263551654,
    "avg_bits_err_improve": 0.002932998686853705,
    "time": 36328.7119140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(expm1 (- (log 2.0) (log1p (pow (exp -2.0) x))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.67968941526113,
    "avg_bits_err_output": 29.651940569953975,
    "avg_bits_err_improve": 0.027748845307154824,
    "time": 36417.17138671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.03530237781477,
    "avg_bits_err_output": 0.01625,
    "avg_bits_err_improve": 58.01905237781477,
    "time": 12499.745849609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.10137886102345,
    "avg_bits_err_output": 0.00775,
    "avg_bits_err_improve": 58.09362886102345,
    "time": 9542.640869140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0072712406251802895,
    "avg_bits_err_output": 0.006875,
    "avg_bits_err_improve": 0.00039624062518028944,
    "time": 5372.81103515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 32.2495,
    "avg_bits_err_output": 0.05075,
    "avg_bits_err_improve": 32.19875,
    "time": 6006.776123046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.52155357422325,
    "avg_bits_err_output": 0.00725,
    "avg_bits_err_improve": 58.51430357422325,
    "time": 14311.70947265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.02789624062518029,
    "avg_bits_err_output": 0.02789624062518029,
    "avg_bits_err_improve": 0,
    "time": 6681.072998046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (/ (sin t) (hypot 1.0 (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12275,
    "avg_bits_err_output": 0.12384436093777043,
    "avg_bits_err_improve": -0.0010943609377704333,
    "time": 35229.747314453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* ew (* (cos t) (cos (atan (* eh (/ (tan t) ew)))))) (* eh (* (sin t) (sin (atan (/ (- eh) (/ ew (tan t)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.13019812031259012,
    "avg_bits_err_output": 0.12984436093777044,
    "avg_bits_err_improve": 0.00035375937481968434,
    "time": 40759.753662109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (+ (fma (sin (* 0.5 phi2)) (- (sin (* 0.5 phi1))) (* (sin (* 0.5 phi2)) (sin (* 0.5 phi1)))) (fma (sin (* 0.5 phi2)) (- (sin (* 0.5 phi1))) (* (cos (* 0.5 phi2)) (cos (* 0.5 phi1)))))) (- phi1 phi2)))",
    "output_parens": 28,
    "avg_bits_err_input": 39.42654678543464,
    "avg_bits_err_output": 0.12677319786169677,
    "avg_bits_err_improve": 39.29977358757294,
    "time": 44588.592041015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 14.341059708464464,
    "avg_bits_err_output": 0.001646240625180289,
    "avg_bits_err_improve": 14.339413467839282,
    "time": 6662.192626953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (fma (cos phi1) (* (sin phi1) (* (sin delta) (- (cos theta)))) (* (cos delta) (pow (cos phi1) 2.0)))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.13565926880974163,
    "avg_bits_err_output": 0.07522069881493927,
    "avg_bits_err_improve": 0.06043856999480236,
    "time": 56899.939453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (pow (fma a (* c -3.0) (* b b)) 0.5))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 52.7435470852624,
    "avg_bits_err_output": 0.37282594063094987,
    "avg_bits_err_improve": 52.370721144631446,
    "time": 40676.697021484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (+ (* b b) (* a (* c -3.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 28.642582371706403,
    "avg_bits_err_output": 0.28225264726366367,
    "avg_bits_err_improve": 28.36032972444274,
    "time": 36007.1201171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) -5e-23) (/ (/ (* b (fma (/ (- (pow (fma b b (* c (* a -3.0))) 9.0) (pow (* b (fma b b (* c (* a -3.0)))) 6.0)) (+ (pow (fma b b (* c (* a -3.0))) 4.5) (pow (* b (fma b b (* c (* a -3.0)))) 3.0))) (/ 1.0 (+ (pow (fma b b (* c (* a -3.0))) 3.0) (fma (pow (fma b b (* c (* a -3.0))) 2.5) b (pow (* b (fma b b (* c (* a -3.0)))) 2.0)))) (fma (- b) (fma b b (* c (* a -3.0))) (* b (fma b b (* c (* a -3.0))))))) (* b (fma b b (* c (* a -3.0))))) (* 3.0 a)) (/ (+ (- b) (sqrt (pow (pow (fma b b (* c (* a -3.0))) 3.0) 0.3333333333333333))) (* 3.0 a)))",
    "output_parens": 75,
    "avg_bits_err_input": 43.44111972458669,
    "avg_bits_err_output": 40.6423935325902,
    "avg_bits_err_improve": 2.7987261919964936,
    "time": 65828.537109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= c -3.6e+158) (+ (* b (/ -0.3333333333333333 a)) (* (/ (hypot b (* (sqrt (* c -3.0)) (sqrt a))) a) 0.3333333333333333)) (if (<= c 2.2e+144) (/ -1.0 (* 3.0 (/ a (- b (hypot b (sqrt (fabs (* c (* a 3.0))))))))) (/ -1.0 (* 3.0 (/ a (- b (hypot b (* (sqrt (* a -3.0)) (sqrt c)))))))))",
    "output_parens": 32,
    "avg_bits_err_input": 34.06653552731876,
    "avg_bits_err_output": 20.308001676216886,
    "avg_bits_err_improve": 13.758533851101877,
    "time": 45346.439697265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (- (* (sin lambda1) (* (cos phi2) (cos lambda2))) (* (* (cos phi2) (cos lambda1)) (sin lambda2))) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (fma (cos lambda2) (cos lambda1) (* (sin lambda2) (sin lambda1))))))",
    "output_parens": 26,
    "avg_bits_err_input": 12.991207689749464,
    "avg_bits_err_output": 0.1873377243444711,
    "avg_bits_err_improve": 12.803869965404992,
    "time": 48967.429443359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ 1.0 (- (* (+ 1.0 x) (/ (+ 1.0 x) x)) x)) (fma (+ 1.0 x) (* (/ 1.0 x) (- 1.0 x)) 0.0))",
    "output_parens": 12,
    "avg_bits_err_input": 29.167248913616987,
    "avg_bits_err_output": 25.220477720974863,
    "avg_bits_err_improve": 3.9467711926421245,
    "time": 42092.065185546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ x (/ 1.0 x)) (+ x (/ -1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.011625,
    "avg_bits_err_output": 0.016875,
    "avg_bits_err_improve": -0.005250000000000001,
    "time": 9625.88330078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 1.0 (/ (+ x -1.0) 2.0)) (- -1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.508728574786986,
    "avg_bits_err_output": 0.075125,
    "avg_bits_err_improve": 14.433603574786986,
    "time": 26995.282470703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(/ (- (pow (* (* (cbrt (fma B B (* C (* A -4.0)))) (cbrt F)) (cbrt (* 2.0 (+ C (- A (hypot B (- A C))))))) 1.5)) (- (* B B) (* 4.0 (* C A))))",
    "output_parens": 20,
    "avg_bits_err_input": 52.501496761601125,
    "avg_bits_err_output": 39.971565402488054,
    "avg_bits_err_improve": 12.529931359113071,
    "time": 54915.476806640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.037128243422124,
    "avg_bits_err_output": 13.70591564338093,
    "avg_bits_err_improve": 15.331212600041194,
    "time": 25536.7490234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (- (/ (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (+ (pow B 2.0) (* C (* A -4.0))))) 0.0) (/ (* (sqrt (+ C (+ A (hypot B (- A C))))) (* (sqrt (fma 2.0 (* B B) (* (* A C) -8.0))) (- (sqrt F)))) (+ (* B B) (* (* A C) -4.0))) (/ (* (sqrt (+ (* B (* B (* 2.0 F))) (* (* 2.0 F) (* A (* C -4.0))))) (- (sqrt (+ C (+ A (hypot B (- A C))))))) (+ (* B B) (* (* A C) -4.0))))",
    "output_parens": 63,
    "avg_bits_err_input": 52.11395969337423,
    "avg_bits_err_output": 41.099260407180005,
    "avg_bits_err_improve": 11.014699286194222,
    "time": 48628.125244140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ 1.0 (/ (cbrt (/ 2.0 g)) (/ 1.0 (cbrt a))))",
    "output_parens": 6,
    "avg_bits_err_input": 15.500727153718927,
    "avg_bits_err_output": 0.8892359525239373,
    "avg_bits_err_improve": 14.61149120119499,
    "time": 20755.716552734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -3.5e-271) (+ (/ (cbrt (* 0.5 (- (hypot g h) g))) (cbrt a)) (/ 1.0 (cbrt (/ (/ a (+ g (hypot g h))) -0.5)))) (+ (cbrt (* (/ 0.5 a) (- (hypot h g) g))) (/ (cbrt (* (+ g (hypot g h)) -0.5)) (cbrt a))))",
    "output_parens": 27,
    "avg_bits_err_input": 36.32984600865366,
    "avg_bits_err_output": 3.0050749922119944,
    "avg_bits_err_improve": 33.324771016441666,
    "time": 30742.92626953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (* (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (/ 1.0 (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.990142106257573,
    "avg_bits_err_output": 0.03976221875540865,
    "avg_bits_err_improve": 0.9503798875021644,
    "time": 22202.836181640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- (log1p (exp (- b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.6680212406251803,
    "avg_bits_err_output": 0.008180801617916188,
    "avg_bits_err_improve": 0.6598404390072641,
    "time": 13198.63720703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (/ a2 b1) (/ b2 a1)) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-285) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ (/ a2 b2) (/ b1 a1)) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+269) (/ (* a1 a2) (* b1 b2)) (/ (/ a2 b1) (/ b2 a1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.383478930627295,
    "avg_bits_err_output": 2.389866512806905,
    "avg_bits_err_improve": 8.99361241782039,
    "time": 12127.161865234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5811207016134862,
    "avg_bits_err_output": 0.527125,
    "avg_bits_err_improve": 0.05399570161348621,
    "time": 15584.36767578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -5.0) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.312481655785085,
    "avg_bits_err_output": 0.03674715999043749,
    "avg_bits_err_improve": 53.275734495794644,
    "time": 20719.4140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.658665575112182,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.658665575112182,
    "time": 2287.25634765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (sqrt (- 1.0 (* x x))) (+ 1.0 x))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.012875,
    "avg_bits_err_output": 0.01125,
    "avg_bits_err_improve": 0.0016249999999999997,
    "time": 6464.25537109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1293.736328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(fma (* r w) (* w (* r (/ (fma v 0.25 -0.375) (- 1.0 v)))) (+ -1.5 (* 2.0 (pow r -2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 12.663979549339475,
    "avg_bits_err_output": 0.1656654140665565,
    "avg_bits_err_improve": 12.498314135272919,
    "time": 39132.119384765625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.5179001533525124,
    "avg_bits_err_output": 0.32061234053473825,
    "avg_bits_err_improve": 0.19728781281777413,
    "time": 94872.97290039062,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (/ v (+ t1 u)) (- -1.0 (/ u t1)))",
    "output_parens": 5,
    "avg_bits_err_input": 17.868495681068495,
    "avg_bits_err_output": 1.5043853358424442,
    "avg_bits_err_improve": 16.364110345226052,
    "time": 9640.721435546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma 0.954929658551372 x (* (pow x 3.0) -0.12900613773279798))",
    "output_parens": 3,
    "avg_bits_err_input": 0.2253233238251722,
    "avg_bits_err_output": 0.1967712406251803,
    "avg_bits_err_improve": 0.02855208319999189,
    "time": 19293.92724609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.004,
    "avg_bits_err_output": 0.004,
    "avg_bits_err_improve": 0,
    "time": 26435.725830078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ 0.5 (+ b a)) (* a (/ b PI)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.7775402722595,
    "avg_bits_err_output": 0.28855621473267296,
    "avg_bits_err_improve": 14.488984057526828,
    "time": 62536.301025390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(if (<= eps -1.12e-16) (/ (+ (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (/ (+ 1.0 (/ -1.0 eps)) (exp (* x (+ eps 1.0))))) 2.0) (if (<= eps -1.8e-103) (/ (/ (+ (pow (+ 1.0 (/ 1.0 eps)) 2.0) (+ (pow eps -2.0) (+ (pow eps -3.0) (* (pow (exp x) (- 1.0 eps)) (* (pow (exp (+ eps 1.0)) (- x)) (- 1.0 (pow eps -3.0))))))) (* (+ (+ 1.0 (/ 1.0 eps)) (pow eps -2.0)) (pow (exp (- 1.0 eps)) x))) 2.0) (if (<= eps 1.3e-99) (/ (+ (fma (pow (exp (- 1.0 eps)) (- x)) (+ 1.0 (/ 1.0 eps)) (* (pow (pow (exp (+ eps 1.0)) x) -0.5) (* (pow (pow (exp (+ eps 1.0)) x) -0.5) (+ 1.0 (/ -1.0 eps))))) (fma (- (pow (pow (exp (+ eps 1.0)) x) -0.5)) (* (+ (/ 1.0 eps) -1.0) (pow (pow (exp (+ eps 1.0)) x) -0.5)) (* (pow (pow (exp (+ eps 1.0)) x) -0.5) (* (+ (/ 1.0 eps) -1.0) (pow (pow (exp (+ eps 1.0)) x) -0.5))))) 2.0) (if (<= eps 1.12e-29) (/ (/ (+ (pow (+ 1.0 (/ 1.0 eps)) 2.0) (+ (pow eps -2.0) (+ (pow eps -3.0) (* (pow (exp x) (- 1.0 eps)) (* (pow (exp (+ eps 1.0)) (- x)) (- 1.0 (pow eps -3.0))))))) (* (+ (+ 1.0 (/ 1.0 eps)) (pow eps -2.0)) (pow (exp (- 1.0 eps)) x))) 2.0) (/ (+ (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (/ (+ 1.0 (/ -1.0 eps)) (exp (* x (+ eps 1.0))))) 2.0)))))",
    "output_parens": 140,
    "avg_bits_err_input": 30.29231448085851,
    "avg_bits_err_output": 26.65681285663317,
    "avg_bits_err_improve": 3.6355016242253413,
    "time": 60241.61181640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (fma (/ 2.0 (+ 1.0 t)) (+ (/ 2.0 (+ 1.0 t)) -4.0) 6.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.008323120312590145,
    "avg_bits_err_improve": 0.004301879687409856,
    "time": 21031.67822265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (+ 2.0 (+ (+ 1.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) -1.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 0.019,
    "avg_bits_err_output": 0.016698120312590145,
    "avg_bits_err_improve": 0.0023018796874098545,
    "time": 55642.423583984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017,
    "avg_bits_err_output": 0.041,
    "avg_bits_err_improve": -0.024,
    "time": 14438.293701171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3895.14697265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3111.36669921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4312.274169921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.824674060686979,
    "avg_bits_err_output": 0.250875,
    "avg_bits_err_improve": 7.573799060686979,
    "time": 18318.7802734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.094733465421128,
    "avg_bits_err_output": 7.094733465421128,
    "avg_bits_err_improve": 0,
    "time": 23155.451171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (fma x 2.0 eps))",
    "output_parens": 2,
    "avg_bits_err_input": 15.474514949881973,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 15.460639949881973,
    "time": 10002.459228515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (* x 0.125)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.555566318981618,
    "avg_bits_err_output": 0.3518941734413763,
    "avg_bits_err_improve": 3.2036721455402413,
    "time": 23059.619140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.186054409420443,
    "avg_bits_err_output": 0.0181204890651142,
    "avg_bits_err_improve": 15.16793392035533,
    "time": 8088.802734375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.03636601724201,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.03636601724201,
    "time": 4114.61962890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.05344387228909,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 39.05306887228909,
    "time": 3982.54296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.29625,
    "avg_bits_err_improve": 63.70375,
    "time": 61264.98681640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (/ t 2.5e+31))",
    "output_parens": 2,
    "avg_bits_err_input": 61.84325111880238,
    "avg_bits_err_output": 0.399875,
    "avg_bits_err_improve": 61.44337611880238,
    "time": 15227.675537109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b 2.3e-298) (/ (/ (* (* a c) 4.0) (- (hypot b (sqrt (* a (* c -4.0)))) b)) (* a 2.0)) (if (<= b 2.05e-239) (/ (+ b (hypot b (* (sqrt a) (sqrt (* c -4.0))))) (* a -2.0)) (/ (+ b (hypot b (sqrt (fabs (* a (* c -4.0)))))) (* a -2.0))))",
    "output_parens": 30,
    "avg_bits_err_input": 34.42168904118794,
    "avg_bits_err_output": 21.42064555908155,
    "avg_bits_err_improve": 13.00104348210639,
    "time": 39026.87158203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -2e-253) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e-267) (/ (* 0.5 (fma a (* c -4.0) (- (* b b) (* b b)))) (* a (+ b (hypot (sqrt (* a (* c -4.0))) b)))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 5e+231) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0))))))) b) (* a 2.0))))))",
    "output_parens": 91,
    "avg_bits_err_input": 34.004483310277834,
    "avg_bits_err_output": 22.752107487218694,
    "avg_bits_err_improve": 11.25237582305914,
    "time": 41946.853515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1678.98291015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.857741367063106,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 39.84599136706311,
    "time": 5626.39599609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (/ (- x y) (hypot x y)) (/ (hypot x y) (+ x y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.0666625807642,
    "avg_bits_err_output": 0.02706165469173681,
    "avg_bits_err_improve": 20.039600926072463,
    "time": 26244.05712890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6503057926418863,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6503057926418863,
    "time": 15338.342041015625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.040125,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 0.039125,
    "time": 3521.350830078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ b (+ b a))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.021073120312590145,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0.010823120312590145,
    "time": 16516.043212890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (fma x x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.01325,
    "avg_bits_err_improve": -0.0006249999999999988,
    "time": 5822.10546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0,
    "time": 1383.92578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ a (+ c b)) d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3976960531287862,
    "avg_bits_err_output": 0.240625,
    "avg_bits_err_improve": 0.1570710531287862,
    "time": 24811.16650390625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.717366939253317,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 30.709866939253317,
    "time": 10212.270751953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (* (- (* x x) eps) (/ 1.0 (sqrt (- (* x x) eps))))))",
    "output_parens": 9,
    "avg_bits_err_input": 24.38325999275463,
    "avg_bits_err_output": 0.2326535718784253,
    "avg_bits_err_improve": 24.150606420876205,
    "time": 18127.8642578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (/ (- (* (/ x (tan x)) (* x 2.0)) (* (tan x) (+ 1.0 (cos (* x 2.0))))) (* (tan x) 2.0)) (+ (/ x (tan x)) (cos x)))",
    "output_parens": 18,
    "avg_bits_err_input": 29.847906859935847,
    "avg_bits_err_output": 29.84296599088727,
    "avg_bits_err_improve": 0.004940869048578378,
    "time": 48607.181640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00699715999043749,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.00612215999043749,
    "time": 3140.68798828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 1e-301) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 100.0) (* n (/ (+ (* 100.0 (pow (+ 1.0 (/ i n)) n)) -100.0) i)) (* 100.0 (/ (+ (pow (exp n) (log1p (/ i n))) -1.0) (/ i n)))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.7425151892976,
    "avg_bits_err_output": 11.13417747647742,
    "avg_bits_err_improve": 36.60833771282018,
    "time": 32798.14501953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 1e+307) (/ (/ (+ (* a c) (* b d)) (hypot c d)) (hypot c d)) (fma (/ (/ a (hypot d c)) (hypot d c)) c (* (* b d) (pow (hypot d c) -2.0))))",
    "output_parens": 25,
    "avg_bits_err_input": 25.84041357473784,
    "avg_bits_err_output": 12.789527651944814,
    "avg_bits_err_improve": 13.050885922793027,
    "time": 24914.643798828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(/ (- (* (/ c (hypot c d)) b) (/ a (/ (hypot c d) d))) (hypot c d))",
    "output_parens": 9,
    "avg_bits_err_input": 25.61856440548663,
    "avg_bits_err_output": 0.46676895456679884,
    "avg_bits_err_improve": 25.15179545091983,
    "time": 24473.229248046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037,
    "avg_bits_err_output": 0.02107045289099674,
    "avg_bits_err_improve": 0.015929547109003257,
    "time": 18292.12255859375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (expm1 (log1p (sin (* (* uy PI) 2.0)))) (sqrt (+ (- 1.0 (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux)))) (* ux (fma ux maxCos (- 1.0 ux))))))",
    "output_parens": 16,
    "avg_bits_err_input": 13.68308928991072,
    "avg_bits_err_output": 11.365474781048357,
    "avg_bits_err_improve": 2.3176145088623628,
    "time": 68502.93823242188,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (+ (* 0.0 (/ 1.0 (+ (pow (fma 2.0 (* uy PI) 1.0) 2.0) (fma 2.0 (* uy PI) 2.0)))) (fma (/ (pow (fma 2.0 (* uy PI) 1.0) 3.0) (- (pow (fma 2.0 (* uy PI) 1.0) 4.0) (pow (fma 2.0 (* uy PI) 2.0) 2.0))) (fma (* 2.0 (* uy PI)) (fma 2.0 (* uy PI) 1.0) -1.0) (/ -1.0 (+ (pow (fma 2.0 (* uy PI) 1.0) 2.0) (fma 2.0 (* uy PI) 2.0)))))) (sqrt (+ (- 1.0 (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux)))) (* ux (fma ux maxCos (- 1.0 ux))))))",
    "output_parens": 45,
    "avg_bits_err_input": 13.72367366635082,
    "avg_bits_err_output": 11.379910251869854,
    "avg_bits_err_improve": 2.343763414480966,
    "time": 61270.181396484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- maxCos (* ux maxCos)) zi) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (* uy (* 2.0 PI))) xi) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.33072118587336513,
    "avg_bits_err_output": 0.3273530098051274,
    "avg_bits_err_improve": 0.0033681760682377493,
    "time": 64850.169921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.20541054573943912,
    "avg_bits_err_output": 0.19975244375108173,
    "avg_bits_err_improve": 0.005658101988357395,
    "time": 47535.1484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(/ (sin (* 6.28318530718 u2)) (sqrt (* (/ 1.0 u1) (- 1.0 u1))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5447692852279641,
    "avg_bits_err_output": 0.5405401728151086,
    "avg_bits_err_improve": 0.004229112412855507,
    "time": 22043.807373046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3203414002753925,
    "avg_bits_err_output": 0.3180817050480003,
    "avg_bits_err_improve": 0.0022596952273921667,
    "time": 25671.774658203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (/ (- 1.0 (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0)) (+ -1.0 (/ -1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))))))))",
    "output_parens": 30,
    "avg_bits_err_input": 0.3458643325518788,
    "avg_bits_err_output": 0.3417927224960402,
    "avg_bits_err_improve": 0.004071610055838615,
    "time": 33229.427490234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06266176980599433,
    "avg_bits_err_output": 0.046157923000204826,
    "avg_bits_err_improve": 0.016503846805789507,
    "time": 17668.643798828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (+ (* s 2.0) (* s (* 2.0 (expm1 (log1p (cosh (/ (fabs x) s))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.1694443566847406,
    "avg_bits_err_output": 0.15876182249163234,
    "avg_bits_err_improve": 0.010682534193108245,
    "time": 25924.3349609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* tau (* x PI))) (* tau (* x PI))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6614285520357847,
    "avg_bits_err_output": 0.6614285520357847,
    "avg_bits_err_improve": 0,
    "time": 30283.877685546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ u (exp (+ (/ -2.0 v) (log1p (- u)))))) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.15195905975788243,
    "avg_bits_err_output": 0.14688362180085543,
    "avg_bits_err_improve": 0.005075437957027001,
    "time": 31735.98388671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.527076019302284,
    "avg_bits_err_output": 0.3578191920452715,
    "avg_bits_err_improve": 2.1692568272570125,
    "time": 33238.282470703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_O (* (/ 0.5 v) (/ cosTheta_i (/ (* (sinh (/ 1.0 v)) (exp (/ (* sinTheta_i sinTheta_O) v))) (/ 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4683893808914111,
    "avg_bits_err_output": 0.36267262474049394,
    "avg_bits_err_improve": 0.10571675615091713,
    "time": 53903.20263671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ (+ (/ cosTheta_i (/ v cosTheta_O)) (- (/ -1.0 v) (/ (* sinTheta_i sinTheta_O) v))) (+ 0.6931 (log (/ 0.5 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.11109494293788265,
    "avg_bits_err_output": 0.11122874160386909,
    "avg_bits_err_improve": -0.00013379866598643708,
    "time": 22364.7236328125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4714024399079597,
    "avg_bits_err_output": 0.4230577328607973,
    "avg_bits_err_improve": 0.04834470704716243,
    "time": 59541.578125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3257919615366902,
    "avg_bits_err_output": 0.5442248078085813,
    "avg_bits_err_improve": 0.7815671537281089,
    "time": 31949.098388671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.431461885444705,
    "avg_bits_err_output": 0.20725,
    "avg_bits_err_improve": 12.224211885444705,
    "time": 24592.488037109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (* (/ 0.25 (* s (* 2.0 PI))) (/ (exp (/ (- r) s)) r)) (* (/ (/ 0.125 PI) s) (/ (exp (/ (- r) (* s 3.0))) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.14141178160890722,
    "avg_bits_err_output": 0.14922006527562887,
    "avg_bits_err_improve": -0.007808283666721649,
    "time": 52062.610595703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.884920688474437,
    "avg_bits_err_output": 0.7280123589770725,
    "avg_bits_err_improve": 0.15690832949736444,
    "time": 40863.250244140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ 1.0 (+ c (/ (sqrt (fma cosTheta -2.0 1.0)) (* (pow (exp cosTheta) cosTheta) (* cosTheta (sqrt PI)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.7058440506065694,
    "avg_bits_err_output": 0.49219773235386005,
    "avg_bits_err_improve": 0.21364631825270936,
    "time": 24005.3359375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.577721959130951,
    "avg_bits_err_output": 0.5352277107699448,
    "avg_bits_err_improve": 13.042494248361006,
    "time": 22616.44287109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (fma (fabs (sin (* PI u2))) (- (fabs (sin (* PI u2)))) (+ (cos (* u2 (* PI 2.0))) (pow (sin (* PI u2)) 2.0))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.624678750244207,
    "avg_bits_err_output": 0.3055255105753152,
    "avg_bits_err_improve": 13.319153239668893,
    "time": 28562.550537109375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* (- alpha) (log1p (- u0))))",
    "output_parens": 5,
    "avg_bits_err_input": 13.950693271702217,
    "avg_bits_err_output": 0.3167430453140324,
    "avg_bits_err_improve": 13.633950226388185,
    "time": 20725.376220703125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (/ (log1p (- u0)) (+ (/ (* sin2phi alphax) alphay) (* alphay (/ cos2phi alphax)))) (* alphay (- alphax)))",
    "output_parens": 11,
    "avg_bits_err_input": 12.67562021340418,
    "avg_bits_err_output": 0.4693740467242211,
    "avg_bits_err_improve": 12.206246166679959,
    "time": 31585.014404296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= F -8.2e-224) (+ (* PI l) (/ -1.0 (/ (* F (cos (pow (cbrt (* PI l)) 3.0))) (/ (sin (* PI l)) F)))) (if (<= F 2e-179) (- (* PI l) (/ (exp (- (* 3.0 (log (/ (tan (* PI l)) F))) (log (pow (/ (tan (* PI l)) F) 2.0)))) F)) (- (* PI l) (/ 1.0 (* F (/ F (tan (* PI l))))))))",
    "output_parens": 38,
    "avg_bits_err_input": 16.631047126414845,
    "avg_bits_err_output": 10.760372537014259,
    "avg_bits_err_improve": 5.870674589400586,
    "time": 37774.23828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21008496250072115,
    "avg_bits_err_output": 0.1472712406251803,
    "avg_bits_err_improve": 0.06281372187554085,
    "time": 27425.24462890625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.269348627273855,
    "avg_bits_err_output": 10.165619431400074,
    "avg_bits_err_improve": 3.1037291958737807,
    "time": 37590.146240234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (log (cbrt (pow (/ (cosh (* PI (* 0.25 f))) (sinh (* PI (* 0.25 f)))) (/ 3.0 PI)))) -4.0)",
    "output_parens": 12,
    "avg_bits_err_input": 61.37488063878209,
    "avg_bits_err_output": 1.4966772996329265,
    "avg_bits_err_improve": 59.87820333914916,
    "time": 42309.600830078125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -9.5e+153) (/ (* t (sqrt 2.0)) (hypot (hypot l l) (hypot (* (sqrt (+ 1.0 x)) (/ (hypot l (* t (sqrt 2.0))) (sqrt (+ x -1.0)))) l))) (if (<= t -1.75e-146) (* t (pow (* (+ (* (/ (+ 1.0 x) (+ x -1.0)) (* 2.0 (* t t))) (* (* l l) (+ -1.0 (/ (+ 1.0 x) (+ x -1.0))))) 0.5) -0.5)) (if (<= t 5.5e-159) (/ (* t (sqrt 2.0)) (hypot (hypot l l) (hypot (/ (* (sqrt (+ 1.0 x)) (hypot l (* t (sqrt 2.0)))) (sqrt (+ x -1.0))) l))) (if (<= t 9.5e+153) (* t (/ 1.0 (sqrt (* (+ (* (/ (+ 1.0 x) (+ x -1.0)) (* 2.0 (* t t))) (* (* l l) (+ -1.0 (/ (+ 1.0 x) (+ x -1.0))))) 0.5)))) (/ (* t (sqrt 2.0)) (hypot (hypot l l) (hypot (* (sqrt (+ 1.0 x)) (/ (hypot l (* t (sqrt 2.0))) (sqrt (+ x -1.0)))) l)))))))",
    "output_parens": 86,
    "avg_bits_err_input": 43.048819249214226,
    "avg_bits_err_output": 27.56172878735798,
    "avg_bits_err_improve": 15.487090461856248,
    "time": 56687.705322265625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.9409121748217673,
    "avg_bits_err_output": 0.21953101562950705,
    "avg_bits_err_improve": 3.7213811591922603,
    "time": 24978.709228515625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (pow (+ 1.0 (pow (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))) 2.0)) -0.5))))",
    "output_parens": 12,
    "avg_bits_err_input": 1.1116693791695658,
    "avg_bits_err_output": 0.005875,
    "avg_bits_err_improve": 1.1057943791695657,
    "time": 13241.907958984375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ (* t 2.0) (* l (sqrt 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.46811091450147,
    "avg_bits_err_output": 1.023273238553199,
    "avg_bits_err_improve": 9.444837675948271,
    "time": 31370.112060546875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U)))) 0.0) (* (sqrt (* (* 2.0 n) (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t))) (sqrt U)) (if (<= (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U)))) 2e+84) (sqrt (+ (* (* (/ l Om) (+ (* l -2.0) (/ n (/ (/ Om l) (- U* U))))) (* 2.0 (* n U))) (* t (* 2.0 (* n U))))) (sqrt (+ (* t (* 2.0 (* n U))) (* (fma l -2.0 (* (- U* U) (/ (* n l) Om))) (* 2.0 (* U (/ (* n l) Om))))))))",
    "output_parens": 73,
    "avg_bits_err_input": 34.93906984707936,
    "avg_bits_err_output": 24.09146072097343,
    "avg_bits_err_improve": 10.84760912610593,
    "time": 51830.47998046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(* (/ (/ l (sin k)) k) (/ (* 2.0 (/ (/ l (tan k)) k)) t))",
    "output_parens": 9,
    "avg_bits_err_input": 47.464270556938324,
    "avg_bits_err_output": 0.3470716523738126,
    "avg_bits_err_improve": 47.11719890456451,
    "time": 114259.76928710938,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(* (/ (* (/ 2.0 (* (+ 2.0 (pow (/ k t) 2.0)) (tan k))) (/ l t)) t) (/ (/ l t) (sin k)))",
    "output_parens": 13,
    "avg_bits_err_input": 32.09885611619477,
    "avg_bits_err_output": 11.284316287287497,
    "avg_bits_err_improve": 20.81453982890727,
    "time": 85074.7646484375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (fma a1 a1 (* a2 a2)) (sqrt 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5102094015860297,
    "avg_bits_err_output": 0.4601334609550794,
    "avg_bits_err_improve": 0.05007594063095028,
    "time": 28240.3779296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (/ (sqrt (* 2.0 (* PI n))) (sqrt k)) (pow (* 2.0 (* PI n)) (* k 0.5)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5278220424144104,
    "avg_bits_err_output": 0.44804061757913893,
    "avg_bits_err_improve": 0.07978142483527151,
    "time": 25772.08203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (* 2.0 (sinh l)) (cos (* 0.5 K))) J) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.524502448964775,
    "avg_bits_err_output": 0.1155424812503606,
    "avg_bits_err_improve": 17.408959967714413,
    "time": 23658.958251953125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 1.0) (* (cos (- (/ K (pow (cbrt (/ 2.0 (+ m n))) 3.0)) M)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l)))) (* (cos (- (* (+ m n) (* (- n m) (/ K (/ (/ (- n m) (/ 0.5 K)) K)))) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))))",
    "output_parens": 55,
    "avg_bits_err_input": 15.238814040605956,
    "avg_bits_err_output": 1.236013568380717,
    "avg_bits_err_improve": 14.002800472225239,
    "time": 43788.464599609375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (cos (/ K 2.0)) (* -2.0 (hypot 1.0 (* 0.5 (/ (/ U J) (cos (* K 0.5))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.24563684218813,
    "avg_bits_err_output": 8.05108496250072,
    "avg_bits_err_improve": 10.19455187968741,
    "time": 33874.931640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) -2e-153) (* w0 (sqrt (+ 1.0 (* h (* (/ (* D (/ M d)) (* l (/ d (* D M)))) -0.25))))) (if (<= (/ h l) 0.0) (* w0 (sqrt (+ 1.0 (* (* D (/ (* h (/ M (/ (* l d) (/ D 2.0)))) d)) (* M -0.5))))) (* w0 (pow (pow (+ 1.0 (/ (/ (* h -0.25) (pow (/ (* D M) d) -2.0)) l)) 0.25) 2.0))))",
    "output_parens": 39,
    "avg_bits_err_input": 13.99973424969177,
    "avg_bits_err_output": 9.034824659843279,
    "avg_bits_err_improve": 4.9649095898484905,
    "time": 43550.154296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) (- INFINITY)) (* c0 (/ (sqrt (/ A (- l))) (sqrt (- V)))) (if (<= (* V l) -4e-272) (/ c0 (/ (sqrt (* V (- l))) (sqrt (- A)))) (if (<= (* V l) 0.0) (/ c0 (/ (sqrt l) (/ A (* V (sqrt (/ A V)))))) (* c0 (* (pow (* V l) -0.5) (sqrt A))))))",
    "output_parens": 36,
    "avg_bits_err_input": 19.127674924208797,
    "avg_bits_err_output": 6.457923592675145,
    "avg_bits_err_improve": 12.669751331533654,
    "time": 36656.587158203125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) -2e-249) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ (* c0 d) w) (/ d (* h (* D D))) M)) (sqrt (- (* (/ (* c0 d) w) (/ d (* h (* D D)))) M)) (* (/ (* c0 d) w) (/ d (* h (* D D)))))) (* c0 (* M (/ M (/ (- (* (/ c0 D) (/ (/ d w) (/ D (/ d h)))) (sqrt (* (fma (/ c0 D) (/ d (/ (* w D) (/ d h))) M) (- (* (/ c0 D) (/ d (/ (* w D) (/ d h)))) M)))) (/ 0.5 w))))))",
    "output_parens": 80,
    "avg_bits_err_input": 59.578335426410895,
    "avg_bits_err_output": 31.57279730669666,
    "avg_bits_err_improve": 28.005538119714235,
    "time": 82731.76171875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= l -1.46e-86) (* (* (/ (sqrt (- d)) (sqrt (- h))) (sqrt (/ d l))) (- 1.0 (fma (* (* 0.5 (/ h l)) (* M (* 0.5 (/ D d)))) (* M (* 0.5 (/ D d))) 0.0))) (if (<= l -1.85e-264) (* (sqrt (/ d h)) (* (* (sqrt (- d)) (sqrt (/ 1.0 (- l)))) (+ 1.0 (* (/ h (* d (/ l (/ (* M D) (/ 4.0 (* M (/ D d))))))) -0.5)))) (if (<= l -4e-310) (* (sqrt (/ d h)) (* (sqrt (/ d l)) (+ 1.0 (* (/ h (* d (* (* (/ (/ l D) M) (/ 4.0 M)) (/ d D)))) -0.5)))) (if (<= l 1.7e-62) (* (sqrt (/ d h)) (* (+ 1.0 (* (/ h (* d (/ l (/ (* M D) (/ 4.0 (* M (/ D d))))))) -0.5)) (/ (sqrt d) (sqrt l)))) (/ (* (- d) (fma (pow (* M (* 0.5 (/ D d))) 2.0) (* (/ h l) -0.5) 1.0)) (* (sqrt l) (- (sqrt h))))))))",
    "output_parens": 95,
    "avg_bits_err_input": 26.63086244926833,
    "avg_bits_err_output": 15.143524860455035,
    "avg_bits_err_improve": 11.487337588813297,
    "time": 107157.89477539062,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (/ (/ (+ (* (pow (/ -0.25 (fma x x 1.0)) 6.0) (pow (+ -0.25 (/ -0.25 (fma x x 1.0))) 2.0)) (* (pow (+ -0.25 (/ -0.25 (fma x x 1.0))) 3.0) (/ -0.000244140625 (+ -0.25 (/ -0.25 (fma x x 1.0)))))) (* (pow (+ -0.25 (/ -0.25 (fma x x 1.0))) 2.0) (pow (+ -0.25 (/ -0.25 (fma x x 1.0))) 3.0))) (fma (/ -0.0625 (+ -0.25 (/ -0.25 (fma x x 1.0)))) (/ -0.0625 (+ -0.25 (/ -0.25 (fma x x 1.0)))) (* (/ (pow (* (fma x x 1.0) 4.0) -2.0) (+ 0.25 (/ 0.25 (fma x x 1.0)))) (+ (/ -0.0625 (+ -0.25 (/ -0.25 (fma x x 1.0)))) (/ (pow (* (fma x x 1.0) 4.0) -2.0) (+ 0.25 (/ 0.25 (fma x x 1.0)))))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 68,
    "avg_bits_err_input": 15.009825039194446,
    "avg_bits_err_output": 14.484388234252371,
    "avg_bits_err_improve": 0.5254368049420748,
    "time": 66471.4990234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9824693609377705,
    "avg_bits_err_output": 0.010698120312590145,
    "avg_bits_err_improve": 0.9717712406251804,
    "time": 9654.524169921875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(* (/ (/ (+ -1.0 (* (* v v) 5.0)) (- 1.0 (* v v))) PI) (/ (/ -1.0 (sqrt (fma v (* v -6.0) 2.0))) t))",
    "output_parens": 13,
    "avg_bits_err_input": 0.450863597056105,
    "avg_bits_err_output": 0.29486114417142484,
    "avg_bits_err_improve": 0.15600245288468018,
    "time": 30287.740966796875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt 2.0) 4.0) (* (sqrt (- 1.0 (* 3.0 (* v v)))) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.013219360937770434,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 0.0030943609377704333,
    "time": 19225.675048828125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(- (* PI 0.5) (asin (/ (fma (* v v) -5.0 1.0) (fma v v -1.0))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5547808128388627,
    "avg_bits_err_output": 0.5556415295049589,
    "avg_bits_err_improve": -0.0008607166660962173,
    "time": 35673.57373046875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (/ (- -10.0 k) (/ a k))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.044204896471663,
    "avg_bits_err_output": 0.2672151510365854,
    "avg_bits_err_improve": 1.7769897454350774,
    "time": 22266.33154296875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (exp (log1p (exp (/ (+ Vef (+ Ev (- EAccept mu))) KbT))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.01445373388755319,
    "avg_bits_err_output": 0.014618974899414109,
    "avg_bits_err_improve": -0.0001652410118609185,
    "time": 12523.789306640625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (pow (hypot a b) 4.0) (fma b (* b 4.0) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.1838846127163147,
    "avg_bits_err_output": 0.015419925001442318,
    "avg_bits_err_improve": 0.16846468771487239,
    "time": 14158.9189453125,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (fma b (* b (+ (* a -12.0) 4.0)) (+ (* a (* a (fma a 4.0 4.0))) -1.0)) (pow (hypot a b) 4.0))",
    "output_parens": 11,
    "avg_bits_err_input": 0.18600154215544593,
    "avg_bits_err_output": 0.029970891560838,
    "avg_bits_err_improve": 0.1560306505946079,
    "time": 31831.87744140625,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.1849129259339448,
    "avg_bits_err_output": 0.02835899875393407,
    "avg_bits_err_improve": 0.1565539271800107,
    "time": 18753.65234375,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (- 1.0 (* x (/ -1.0 (hypot x (* 2.0 p)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 13.183217069403334,
    "avg_bits_err_output": 13.383451924592128,
    "avg_bits_err_improve": -0.20023485518879447,
    "time": 20263.473388671875,
    "seed": 21,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.80101797391755,
    "avg_bits_err_output": 0.030875,
    "avg_bits_err_improve": 40.77014297391755,
    "time": 6168.62744140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -2e-8) (/ 1.0 (- (/ (tan x) (- (sin x) x)) (/ x (- (sin x) x)))) (if (<= x 2.15e-8) (/ 1.0 (/ (+ (+ x (sin x)) (* x (/ (+ x (sin x)) (tan x)))) (* (+ x (sin x)) (/ (- (- x) (sin x)) (tan x))))) (/ 1.0 (/ (+ (/ (tan x) x) -1.0) (+ (/ (sin x) x) -1.0)))))",
    "output_parens": 39,
    "avg_bits_err_input": 31.001298892878165,
    "avg_bits_err_output": 25.22009718354236,
    "avg_bits_err_improve": 5.781201709335804,
    "time": 42907.107177734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -5.6e+153) (/ (- (hypot b_2 (/ c (/ (sqrt (* c (- a))) (- a)))) b_2) a) (if (<= b_2 4.1e-91) (/ (fabs (- (sqrt (- (* b_2 b_2) (* c a))) b_2)) a) (if (<= b_2 5.6e-47) (/ (- c) (+ b_2 (hypot b_2 (sqrt (* c a))))) (if (<= b_2 1.65e+140) (/ (/ (* (/ (* c (- a)) (+ b_2 (sqrt (- (* b_2 b_2) (* c a))))) (fma (/ b_2 (+ b_2 (sqrt (- (* b_2 b_2) (* c a))))) b_2 (/ (- (* b_2 b_2) (* c a)) (+ b_2 (sqrt (- (* b_2 b_2) (* c a))))))) (fma (/ b_2 (+ b_2 (sqrt (- (* b_2 b_2) (* c a))))) b_2 (/ (- (* b_2 b_2) (* c a)) (+ b_2 (sqrt (- (* b_2 b_2) (* c a))))))) a) (/ (/ (- a) (/ (+ b_2 (hypot b_2 (pow (pow (* c a) 2.0) 0.25))) c)) a)))))",
    "output_parens": 82,
    "avg_bits_err_input": 33.59610348022696,
    "avg_bits_err_output": 18.132104939218852,
    "avg_bits_err_improve": 15.463998541008106,
    "time": 32788.765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.35e+154) (/ (- c) (- b_2 (hypot b_2 (pow (pow (* c a) 2.0) 0.25)))) (if (<= b_2 6e-207) (/ c (- (sqrt (- (* b_2 b_2) (* c a))) b_2)) (/ (- (- (/ (fma a c (* a (- c c))) (sqrt (- (* b_2 b_2) (* c a)))) (* b_2 (/ b_2 (sqrt (- (* b_2 b_2) (* c a)))))) b_2) a)))",
    "output_parens": 34,
    "avg_bits_err_input": 34.083170787186184,
    "avg_bits_err_output": 14.870599307306094,
    "avg_bits_err_improve": 19.21257147988009,
    "time": 28787.166259765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 31.4356699051609,
    "avg_bits_err_output": 0.12755470000576938,
    "avg_bits_err_improve": 31.30811520515513,
    "time": 23802.796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.65638854650896,
    "avg_bits_err_output": 32.36503237587084,
    "avg_bits_err_improve": 0.29135617063811736,
    "time": 35991.41259765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.519028777784158,
    "avg_bits_err_output": 0.016375,
    "avg_bits_err_improve": 29.502653777784158,
    "time": 15128.15625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 x) (- -1.0 x))",
    "output_parens": 3,
    "avg_bits_err_input": 14.775579121337277,
    "avg_bits_err_output": 0.07025,
    "avg_bits_err_improve": 14.705329121337277,
    "time": 14998.654541015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(* -2.0 (* (sin (* eps 0.5)) (fma (sin (* eps 0.5)) (cos x) (* (sin x) (cos (* eps 0.5))))))",
    "output_parens": 12,
    "avg_bits_err_input": 39.53444158006489,
    "avg_bits_err_output": 0.356332343263475,
    "avg_bits_err_improve": 39.17810923680142,
    "time": 31095.593505859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (<= x 3.05e+184) (/ (+ x (+ x 1.0)) (* (+ (cbrt (+ x 1.0)) (cbrt x)) (+ (pow (cbrt (+ x 1.0)) 4.0) (fma x (cbrt x) (pow (* (cbrt (+ x 1.0)) (/ x (pow (cbrt x) 2.0))) 2.0))))) (/ 1.0 (fma (cbrt x) (+ (cbrt (+ x 1.0)) (cbrt x)) (exp (* (log1p x) 0.6666666666666666)))))",
    "output_parens": 33,
    "avg_bits_err_input": 29.87015529724748,
    "avg_bits_err_output": 7.115514266273796,
    "avg_bits_err_improve": 22.754641030973684,
    "time": 27732.85791015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.325512253725027,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 30.325387253725026,
    "time": 11150.262939453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -1.9e-122) (* (/ -0.5 a) (- b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b))) (if (<= c 5.2e-27) (/ (- b (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25))) (* a -2.0)) (/ (- b (hypot b (* (sqrt (* a -4.0)) (sqrt c)))) (* a -2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 33.76671665607642,
    "avg_bits_err_output": 24.29150185795061,
    "avg_bits_err_improve": 9.475214798125808,
    "time": 44800.76220703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -3.55e+93) (/ (/ (+ b (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25))) a) -2.0) (if (<= b -2.4e+31) (/ (/ (+ b (hypot b (* (* c -4.0) (sqrt (/ (/ a c) -4.0))))) a) -2.0) (if (<= b 1e-154) (/ (/ (+ b (hypot b (sqrt (* a (* c -4.0))))) a) -2.0) (if (<= b 3e+153) (/ (- (- b) (sqrt (+ (* b b) (* -4.0 (* a c))))) (* a 2.0)) (/ (/ (+ b (hypot b (* (* c -4.0) (/ a (pow (pow (* a (* c -4.0)) 2.0) 0.25))))) a) -2.0)))))",
    "output_parens": 52,
    "avg_bits_err_input": 33.90217231269888,
    "avg_bits_err_output": 24.49415398478396,
    "avg_bits_err_improve": 9.40801832791492,
    "time": 40558.081298828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.44332515996419,
    "avg_bits_err_output": 0.018158082813311303,
    "avg_bits_err_improve": 61.42516707715088,
    "time": 10377.459228515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (- (log1p n) (log n)) (/ (/ (+ (pow (log1p n) 6.0) -1.0) (+ (log1p n) 1.0)) (+ 1.0 (+ (pow (log1p n) 2.0) (exp (* (log (/ (pow E (* 36.0 (log (log1p n)))) (exp (* (log (log1p n)) 24.0)))) 0.3333333333333333))))))",
    "output_parens": 27,
    "avg_bits_err_input": 63.009547988953926,
    "avg_bits_err_output": 44.23986976380185,
    "avg_bits_err_improve": 18.769678225152077,
    "time": 42792.91943359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.534877072668486,
    "avg_bits_err_output": 0.00475,
    "avg_bits_err_improve": 58.530127072668485,
    "time": 30192.099853515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(fma (cos x) (/ -1.0 (sin x)) (/ 1.0 x))",
    "output_parens": 5,
    "avg_bits_err_input": 59.796361490079846,
    "avg_bits_err_output": 59.78296594301267,
    "avg_bits_err_improve": 0.013395547067176494,
    "time": 35013.256591796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(* (/ 1.0 (/ (expm1 (* eps b)) eps)) (/ (expm1 (* eps (+ b a))) (expm1 (* eps a))))",
    "output_parens": 11,
    "avg_bits_err_input": 60.24005956845239,
    "avg_bits_err_output": 29.08371612465351,
    "avg_bits_err_improve": 31.156343443798878,
    "time": 31953.65625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.20429917238173,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": 41.19317417238173,
    "time": 6402.722412109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.54128667628145,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 58.54066167628145,
    "time": 2852.68408203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.21804364908251,
    "avg_bits_err_output": 0.017365861892522247,
    "avg_bits_err_improve": 29.20067778718999,
    "time": 12896.130126953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (- (exp (- x))) (exp (- x)) (pow (+ (exp x) -2.0) 2.0)) (+ -2.0 (- (exp x) (exp (- x)))))",
    "output_parens": 15,
    "avg_bits_err_input": 29.494713068448025,
    "avg_bits_err_output": 29.4105219817171,
    "avg_bits_err_improve": 0.08419108673092524,
    "time": 36361.830810546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma (/ (fma -2.0 (+ x -1.0) x) (+ x -1.0)) (+ x 1.0) x) (* x (+ x 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 10.551911233420748,
    "avg_bits_err_output": 10.514094309714425,
    "avg_bits_err_improve": 0.03781692370632328,
    "time": 52001.28662109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(/ (fma (tan x) (tan eps) (+ (/ (+ (tan x) (tan eps)) (tan x)) -1.0)) (- (/ (cos x) (sin x)) (tan eps)))",
    "output_parens": 15,
    "avg_bits_err_input": 36.82284035546564,
    "avg_bits_err_output": 19.301191716430655,
    "avg_bits_err_improve": 17.521648639034982,
    "time": 43029.0576171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.07898519023648,
    "avg_bits_err_output": 0.13068176718957336,
    "avg_bits_err_improve": 29.948303423046905,
    "time": 23308.537353515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(- (* (cos x) (sin eps)) (/ (sin x) (/ 1.0 (- 1.0 (cos eps)))))",
    "output_parens": 9,
    "avg_bits_err_input": 36.994920403285256,
    "avg_bits_err_output": 0.3907149947767211,
    "avg_bits_err_improve": 36.604205408508534,
    "time": 33138.671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (* (/ 1.0 (pow (+ x 1.0) -0.5)) (sqrt x))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.89772360002084,
    "avg_bits_err_output": 0.15985244532557089,
    "avg_bits_err_improve": 19.73787115469527,
    "time": 24477.146728515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(pow (pow (atan2 1.0 (+ 1.0 (fma N N N))) -0.5) -2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 15.240620254415086,
    "avg_bits_err_output": 0.29261164174404436,
    "avg_bits_err_improve": 14.948008612671043,
    "time": 10580.70166015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.45688257295531,
    "avg_bits_err_output": 1.3066603380651296,
    "avg_bits_err_improve": 28.15022223489018,
    "time": 30812.322509765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07492952695107366,
    "avg_bits_err_output": 0.08042952695107367,
    "avg_bits_err_improve": -0.005500000000000005,
    "time": 37304.795654296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (/ a (/ 1.0 b)) (/ -1.0 (/ 1.0 (* a b))))",
    "output_parens": 6,
    "avg_bits_err_input": 16.207636134846265,
    "avg_bits_err_output": 0.29007876094930873,
    "avg_bits_err_improve": 15.917557373896956,
    "time": 19899.793701171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ PI (/ 180.0 angle)))) 2.0) (pow (* b (expm1 (log1p (sin (* angle (* PI 0.005555555555555556)))))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.41193543653165,
    "avg_bits_err_output": 20.40343332395978,
    "avg_bits_err_improve": 0.008502112571868281,
    "time": 47421.00244140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* (* PI 0.011111111111111112) angle)) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 30.96692917185439,
    "avg_bits_err_output": 20.976992802465116,
    "avg_bits_err_improve": 9.989936369389273,
    "time": 44615.91259765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* angle (/ 1.0 (* (/ angle PI) (/ 180.0 angle)))))) 2.0))",
    "output_parens": 14,
    "avg_bits_err_input": 20.225061056929945,
    "avg_bits_err_output": 20.24495684243558,
    "avg_bits_err_improve": -0.019895785505635644,
    "time": 47309.550048828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (/ m (/ v (* m (- 1.0 m)))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17904492500144228,
    "avg_bits_err_output": 0.17097511371527233,
    "avg_bits_err_improve": 0.008069811286169959,
    "time": 16907.37353515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.324533471101042,
    "avg_bits_err_output": 0.3225270587873961,
    "avg_bits_err_improve": 0.0020064123136459,
    "time": 31822.5087890625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (/ (- e) (- -1.0 (* e (cos v)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13295996250072117,
    "avg_bits_err_output": 0.13321936093777043,
    "avg_bits_err_improve": -0.0002593984370492519,
    "time": 23992.987060546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (sin phi1) (sin phi2) (* (* (cos phi1) (cos phi2)) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda1) (cos lambda2)))))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 16.953097082217212,
    "avg_bits_err_output": 3.858531172795838,
    "avg_bits_err_improve": 13.094565909421375,
    "time": 44746.938720703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-27) (/ (* (/ 0.5 a) (- (fma (* a c) -4.0 (* b b)) (* b b))) (+ b (sqrt (fma (* a c) -4.0 (* b b))))) (* (/ 0.5 a) (+ (- b) (sqrt (pow (pow (fma c (* a -4.0) (* b b)) 3.0) 0.3333333333333333)))))",
    "output_parens": 33,
    "avg_bits_err_input": 52.821499066727064,
    "avg_bits_err_output": 50.30569756882157,
    "avg_bits_err_improve": 2.5158014979054926,
    "time": 43251.306396484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -4e-14) (/ (* (pow (/ 0.5 a) 2.0) (- (fma c (* a -4.0) (* b b)) (* b b))) (* (/ 0.5 a) (+ b (sqrt (fma c (* a -4.0) (* b b)))))) (/ (/ (* b (+ (- (* b b) (* b (sqrt (fma c (* a -4.0) (* b b))))) (* c (* a -4.0)))) (* b (sqrt (fma c (* a -4.0) (* b b))))) (* a 2.0)))",
    "output_parens": 45,
    "avg_bits_err_input": 28.60818091170491,
    "avg_bits_err_output": 26.098731705553266,
    "avg_bits_err_improve": 2.5094492061516434,
    "time": 85617.18896484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -2e-22) (/ (/ 1.0 (/ (fma b (+ b (sqrt (fma b b (* -4.0 (* a c))))) (fma b b (* -4.0 (* a c)))) (/ (- (pow (fma b b (* -4.0 (* a c))) 9.0) (pow b 18.0)) (* (+ (pow (fma b b (* -4.0 (* a c))) 1.5) (pow b 3.0)) (+ (pow (fma b b (* -4.0 (* a c))) 6.0) (+ (pow b 12.0) (* (pow (fma b b (* -4.0 (* a c))) 3.0) (pow b 6.0)))))))) (* a 2.0)) (* (+ (- b) (pow (pow (fma c (* a -4.0) (* b b)) 1.5) 0.3333333333333333)) (/ 0.5 a)))",
    "output_parens": 59,
    "avg_bits_err_input": 43.89645211831586,
    "avg_bits_err_output": 41.09631977867359,
    "avg_bits_err_improve": 2.8001323396422677,
    "time": 50696.594970703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -1.9e-122) (* (/ -0.5 a) (- b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b))) (if (<= c 5.2e-27) (/ (- b (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25))) (* a -2.0)) (/ (- b (hypot b (* (sqrt (* a -4.0)) (sqrt c)))) (* a -2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 33.76344596353321,
    "avg_bits_err_output": 24.29150185795061,
    "avg_bits_err_improve": 9.471944105582597,
    "time": 42126.0712890625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8691847769019289,
    "avg_bits_err_output": 0.22589424028743585,
    "avg_bits_err_improve": 0.643290536614493,
    "time": 34111.38671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(expm1 (- (log 2.0) (log1p (pow (exp -2.0) x))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.46947039949891,
    "avg_bits_err_output": 29.44298864456524,
    "avg_bits_err_improve": 0.026481754933669777,
    "time": 55207.38232421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.01768685983989,
    "avg_bits_err_output": 0.013625,
    "avg_bits_err_improve": 58.004061859839894,
    "time": 13814.63916015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.026838844259885,
    "avg_bits_err_output": 0.00825,
    "avg_bits_err_improve": 58.01858884425989,
    "time": 15098.944091796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.008813721875540867,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 0.0011887218755408675,
    "time": 3976.3515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 32.345,
    "avg_bits_err_output": 0.0345,
    "avg_bits_err_improve": 32.3105,
    "time": 5722.675048828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.52256983069233,
    "avg_bits_err_output": 0.00475,
    "avg_bits_err_improve": 58.51781983069233,
    "time": 15176.568115234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(* 2.0 (log (/ (sqrt (fma x (sqrt (- 1.0 (* x x))) x)) x)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.019625,
    "avg_bits_err_output": 0.00725,
    "avg_bits_err_improve": 0.012375,
    "time": 10585.986328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (/ (* ew (sin t)) (hypot 1.0 (/ (/ eh (tan t)) ew))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.131125,
    "avg_bits_err_output": 0.13151184218813103,
    "avg_bits_err_improve": -0.0003868421881310369,
    "time": 39362.292724609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* ew (/ (cos t) (hypot 1.0 (* eh (/ (tan t) ew))))) (* eh (* (sin t) (sin (atan (/ (- eh) (/ ew (tan t)))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.13334436093777044,
    "avg_bits_err_output": 0.13619805653874725,
    "avg_bits_err_improve": -0.0028536956009768133,
    "time": 36082.983642578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (cos (* phi2 0.5)) (cos (* 0.5 phi1)) (* (sin (* phi2 0.5)) (- (sin (* 0.5 phi1)))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 39.19432324589845,
    "avg_bits_err_output": 0.1247919078384007,
    "avg_bits_err_improve": 39.06953133806005,
    "time": 39222.90478515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (fabs (- 1.0 (+ (+ 1.0 (pow (/ b a) 2.0)) -1.0))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.326517097683741,
    "avg_bits_err_output": 0.007573120312590144,
    "avg_bits_err_improve": 14.31894397737115,
    "time": 11003.344482421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin delta) (* (sin theta) (cos phi1))) (fma (sin (asin (fma (sin delta) (* (cos phi1) (cos theta)) (* (cos delta) (sin phi1))))) (- (sin phi1)) (cos delta))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.1540273748569362,
    "avg_bits_err_output": 0.15174854998802775,
    "avg_bits_err_improve": 0.002278824868908458,
    "time": 50286.448486328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* a 3.0)) -5e-28) (/ (/ (- (fma b b (* c (* a -3.0))) (* b b)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0)) (/ (+ (- b) (sqrt (/ 1.0 (pow (pow (fma b b (* c (* a -3.0))) -3.0) 0.3333333333333333)))) (* a 3.0)))",
    "output_parens": 34,
    "avg_bits_err_input": 52.85289051060008,
    "avg_bits_err_output": 50.40162334596477,
    "avg_bits_err_improve": 2.4512671646353112,
    "time": 62536.940673828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(* (/ a a) (/ (- c) (+ b (sqrt (fma a (* c -3.0) (* b b))))))",
    "output_parens": 9,
    "avg_bits_err_input": 28.721469969936166,
    "avg_bits_err_output": 0.2821276472636638,
    "avg_bits_err_improve": 28.439342322672502,
    "time": 38067.129638671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 43.99996235999059,
    "avg_bits_err_output": 0.4182838359478673,
    "avg_bits_err_improve": 43.58167852404272,
    "time": 47678.732666015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (- (* b b) (* (* 3.0 a) c))) b) (* 3.0 a)) -2e-221) (/ -1.0 (* 3.0 (/ a (- b (hypot b (* (sqrt (* a -3.0)) (sqrt (fabs c)))))))) (if (<= (/ (- (sqrt (- (* b b) (* (* 3.0 a) c))) b) (* 3.0 a)) 0.0) (/ (* (/ -0.3333333333333333 (+ b (hypot b (sqrt (* a (* c -3.0)))))) (* 3.0 (* a c))) a) (/ -1.0 (* 3.0 (/ a (- b (hypot b (sqrt (fabs (* (* 3.0 a) c))))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 33.8056581876436,
    "avg_bits_err_output": 18.306454580396398,
    "avg_bits_err_improve": 15.499203607247203,
    "time": 45329.582763671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (cos lambda1) (- (sin lambda2)) (* (cos lambda2) (sin lambda1))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (fma (* (cos phi2) (sin phi1)) (* (cos lambda1) (cos lambda2)) (* (sin phi1) (* (cos phi2) (* (sin lambda2) (sin lambda1)))))))",
    "output_parens": 28,
    "avg_bits_err_input": 13.121493596458414,
    "avg_bits_err_output": 0.16958764172583277,
    "avg_bits_err_improve": 12.951905954732581,
    "time": 47852.65478515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ (- (- (/ x (/ (+ x 1.0) x)) (/ x (+ x 1.0))) x) -1.0) (+ x -1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 29.050979948618203,
    "avg_bits_err_output": 25.118913507204955,
    "avg_bits_err_improve": 3.932066441413248,
    "time": 61247.28857421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ (+ 1.0 x) (fma x x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 0.001875,
    "time": 26636.572509765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.261181778937402,
    "avg_bits_err_output": 0.074625,
    "avg_bits_err_improve": 14.186556778937403,
    "time": 61422.829833984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (/ (* (sqrt (- (* B B) (* (* 4.0 A) C))) (- (sqrt (* (* 2.0 F) (+ C (- A (hypot B (- A C)))))))) (- (* B B) (* 4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) INFINITY) (/ (/ (- (hypot B (- A C)) (+ A C)) (/ (sqrt (* (- (+ A C) (hypot B (- A C))) (* 2.0 (* F (fma B B (* A (* C -4.0))))))) (* 2.0 (* F (fma B B (* A (* C -4.0))))))) (- (* B B) (* 4.0 (* A C)))) (/ (- (sqrt (* (* 2.0 F) (+ C (- A (hypot B (- A C))))))) (hypot B (sqrt (* A (* C -4.0)))))))",
    "output_parens": 105,
    "avg_bits_err_input": 52.75869241148732,
    "avg_bits_err_output": 39.87327701374819,
    "avg_bits_err_improve": 12.88541539773913,
    "time": 59405.640625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.234304135622732,
    "avg_bits_err_output": 13.973059209724058,
    "avg_bits_err_improve": 15.261244925898675,
    "time": 27812.070556640625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (/ (* (sqrt (* 2.0 (* F (+ C (+ A (hypot B (- A C))))))) (- (sqrt (fma B B (* A (* C -4.0)))))) (fma C (* A -4.0) (* B B))) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 2e+208) (pow (* (/ (fma -4.0 (* A C) (* B B)) -1.0) (pow (* F (* (fma -4.0 (* A C) (* B B)) (* 2.0 (+ (+ A C) (hypot B (- A C)))))) -0.5)) -1.0) (pow (sqrt (sqrt (* (/ 2.0 (/ (fma -4.0 (* A C) (* B B)) F)) (+ (+ A C) (hypot B (- A C)))))) 2.0)))",
    "output_parens": 93,
    "avg_bits_err_input": 52.28914102363238,
    "avg_bits_err_output": 42.90342574544912,
    "avg_bits_err_improve": 9.385715278183262,
    "time": 47142.16064453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ 1.0 (* (cbrt (* a 2.0)) (cbrt (/ 1.0 g))))",
    "output_parens": 6,
    "avg_bits_err_input": 15.839933858978108,
    "avg_bits_err_output": 0.8850189652543934,
    "avg_bits_err_improve": 14.954914893723714,
    "time": 17976.927001953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (/ (cbrt (* 0.5 (- (hypot g h) g))) (cbrt a)) (* (cbrt (/ -0.5 a)) (cbrt (pow (sqrt (+ g (hypot g h))) 2.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 36.19173754887036,
    "avg_bits_err_output": 2.9215360092089897,
    "avg_bits_err_improve": 33.270201539661365,
    "time": 28562.266845703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9905926703212454,
    "avg_bits_err_output": 0.042250376567277655,
    "avg_bits_err_improve": 0.9483422937539677,
    "time": 12149.385986328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- (log1p (exp (- b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7236981203125902,
    "avg_bits_err_output": 0.00789624062518029,
    "avg_bits_err_improve": 0.7158018796874099,
    "time": 12233.35302734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -1e+301) (/ (/ a2 b2) (/ b1 a1)) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-323) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* (/ a2 b2) (/ a1 b1)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+278) (/ (* a1 a2) (* b1 b2)) (/ (/ a2 b2) (/ b1 a1))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.187339252153905,
    "avg_bits_err_output": 2.381226695933065,
    "avg_bits_err_improve": 8.806112556220839,
    "time": 11132.930908203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output_parens": 5,
    "avg_bits_err_input": 0.38977469366336176,
    "avg_bits_err_output": 0.38977469366336176,
    "avg_bits_err_improve": 0,
    "time": 14205.8017578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -0.5) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.11471906277841,
    "avg_bits_err_output": 0.059625,
    "avg_bits_err_improve": 53.055094062778416,
    "time": 17313.181884765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.696461706896871,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.696461706896871,
    "time": 2193.083740234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.012625,
    "avg_bits_err_output": 0.012625,
    "avg_bits_err_improve": 0,
    "time": 7954.630615234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1286.34765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (pow (* r w) 2.0) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.764505436557108,
    "avg_bits_err_output": 0.2287695500086536,
    "avg_bits_err_improve": 12.535735886548455,
    "time": 35304.99365234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (- (* x1 (* x1 3.0)) (fma 2.0 x2 x1)) (fma x1 x1 1.0)) (fma x1 (/ (* (* x1 3.0) (fma 2.0 x2 (fma x1 (* x1 3.0) (- x1)))) (fma x1 x1 1.0)) (* (fma x1 x1 1.0) (+ x1 (+ (* 2.0 (* (/ (- (fma 2.0 x2 (* x1 (* x1 3.0))) x1) (fma x1 x1 1.0)) (* x1 (+ (/ (- (fma 2.0 x2 (* x1 (* x1 3.0))) x1) (fma x1 x1 1.0)) -3.0)))) (* x1 (* x1 (fma (/ (fma 2.0 x2 (- (* 3.0 (* x1 x1)) x1)) (fma x1 x1 1.0)) 4.0 -6.0)))))))))",
    "output_parens": 46,
    "avg_bits_err_input": 0.5078143109829513,
    "avg_bits_err_output": 0.2842142519129533,
    "avg_bits_err_improve": 0.22360005906999797,
    "time": 102773.62353515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (/ v (- -1.0 (/ u t1))) (+ u t1))",
    "output_parens": 5,
    "avg_bits_err_input": 18.078678852635576,
    "avg_bits_err_output": 1.3958276118052666,
    "avg_bits_err_improve": 16.68285124083031,
    "time": 19790.16162109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(+ (* 0.954929658551372 x) (/ -0.12900613773279798 (pow x -3.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.25050960194963134,
    "avg_bits_err_output": 0.17354011025765567,
    "avg_bits_err_improve": 0.07696949169197567,
    "time": 23553.50634765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00404024101186092,
    "avg_bits_err_output": 0.00404024101186092,
    "avg_bits_err_improve": 0,
    "time": 2303.78369140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI 0.5) (+ b a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 14.816422851129083,
    "avg_bits_err_output": 0.2444272562546873,
    "avg_bits_err_improve": 14.571995594874396,
    "time": 50610.717529296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (pow E (* x (+ eps -1.0)))) (* (+ (/ 1.0 eps) -1.0) (exp (* x (- -1.0 eps))))) 2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 29.61187939349448,
    "avg_bits_err_output": 29.610595142751677,
    "avg_bits_err_improve": 0.001284250742802584,
    "time": 48597.566650390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(exp (log1p (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ t 1.0))) (+ 2.0 (/ -2.0 (+ t 1.0))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.018625,
    "avg_bits_err_output": 0.0055,
    "avg_bits_err_improve": 0.013125,
    "time": 42077.270263671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))) (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (+ (+ 1.0 (pow (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))) 2.0)) -1.0)))",
    "output_parens": 22,
    "avg_bits_err_input": 0.023375,
    "avg_bits_err_output": 0.02175,
    "avg_bits_err_improve": 0.0016250000000000014,
    "time": 52483.6865234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ (* (/ t (+ 1.0 t)) 4.0) (+ 1.0 (/ 1.0 t)))) (+ (/ (* (/ t (+ 1.0 t)) 4.0) (+ 1.0 (/ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.049625,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 0.041,
    "time": 18052.113037109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3251.045654296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3701.021240234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 3989.611328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.8048787719210315,
    "avg_bits_err_output": 0.24625,
    "avg_bits_err_improve": 7.558628771921032,
    "time": 15364.558349609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.176543722603144,
    "avg_bits_err_output": 7.176543722603144,
    "avg_bits_err_improve": 0,
    "time": 24660.4443359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (+ eps (* x 2.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.948025801308923,
    "avg_bits_err_output": 0.013625,
    "avg_bits_err_improve": 15.934400801308923,
    "time": 14438.97119140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (* x 0.125)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.543833777534675,
    "avg_bits_err_output": 0.3508328953169172,
    "avg_bits_err_improve": 3.193000882217758,
    "time": 25948.036376953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.918746765158422,
    "avg_bits_err_output": 0.019516729690294488,
    "avg_bits_err_improve": 14.899230035468127,
    "time": 13046.21826171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.13048641923284,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.13048641923284,
    "time": 4365.9189453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.37399185609116,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 39.37374185609116,
    "time": 4120.594970703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.307125,
    "avg_bits_err_improve": 63.692875,
    "time": 61629.445068359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* t (* t 1.6e-63))))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84325371826954,
    "avg_bits_err_output": 0.3198656015629507,
    "avg_bits_err_improve": 61.523388116706585,
    "time": 14297.05322265625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -3.55e+93) (/ (/ (+ b (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25))) a) -2.0) (if (<= b -2.4e+31) (/ (/ (+ b (hypot b (* (* c -4.0) (sqrt (/ (/ a c) -4.0))))) a) -2.0) (if (<= b 1e-154) (/ (/ (+ b (hypot b (sqrt (* a (* c -4.0))))) a) -2.0) (if (<= b 3e+153) (/ (- (- b) (sqrt (+ (* b b) (* -4.0 (* a c))))) (* a 2.0)) (/ (/ (+ b (hypot b (* (* c -4.0) (/ a (pow (pow (* a (* c -4.0)) 2.0) 0.25))))) a) -2.0)))))",
    "output_parens": 52,
    "avg_bits_err_input": 33.90217231269888,
    "avg_bits_err_output": 24.49415398478396,
    "avg_bits_err_improve": 9.40801832791492,
    "time": 41580.728271484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -1.9e-122) (* (/ -0.5 a) (- b (hypot (* (sqrt (* c -4.0)) (sqrt a)) b))) (if (<= c 5.2e-27) (/ (- b (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25))) (* a -2.0)) (/ (- b (hypot b (* (sqrt (* a -4.0)) (sqrt c)))) (* a -2.0))))",
    "output_parens": 28,
    "avg_bits_err_input": 33.76344596353321,
    "avg_bits_err_output": 24.29150185795061,
    "avg_bits_err_improve": 9.471944105582597,
    "time": 41564.58447265625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2212.433349609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.674689452994,
    "avg_bits_err_output": 0.00925,
    "avg_bits_err_improve": 39.665439452994,
    "time": 5815.953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (/ (- x y) (hypot x y)) (+ x y)) (hypot x y))",
    "output_parens": 7,
    "avg_bits_err_input": 20.329775514485313,
    "avg_bits_err_output": 0.0333328953169171,
    "avg_bits_err_improve": 20.296442619168396,
    "time": 22700.177734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.665714915995972,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.665714915995972,
    "time": 17775.251220703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(+ (* a (+ d b)) (* a c))",
    "output_parens": 4,
    "avg_bits_err_input": 0.037625,
    "avg_bits_err_output": 0.03825,
    "avg_bits_err_improve": -0.0006250000000000006,
    "time": 4927.910400390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ b (+ b a))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.019344360937770436,
    "avg_bits_err_output": 0.011,
    "avg_bits_err_improve": 0.008344360937770436,
    "time": 6061.35986328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.016625,
    "avg_bits_err_output": 0.016625,
    "avg_bits_err_improve": 0,
    "time": 8933.1396484375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000625,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0,
    "time": 1391.62060546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ c (+ e (+ b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40403101562950744,
    "avg_bits_err_output": 0.2713443609377704,
    "avg_bits_err_improve": 0.13268665469173702,
    "time": 23173.8994140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(/ (* (sin x) (sin (* x 0.5))) (cos (* x -0.5)))",
    "output_parens": 7,
    "avg_bits_err_input": 30.19763256285712,
    "avg_bits_err_output": 0.010365601562950723,
    "avg_bits_err_improve": 30.18726696129417,
    "time": 10847.878662109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.89990283792306,
    "avg_bits_err_output": 0.2848962406251803,
    "avg_bits_err_improve": 24.61500659729788,
    "time": 17223.482177734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(log (exp (/ (- x (sin x)) (tan x))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.992117789079575,
    "avg_bits_err_output": 30.007527497938554,
    "avg_bits_err_improve": -0.015409708858978632,
    "time": 44942.64892578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007337554964767636,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.006212554964767636,
    "time": 2504.723876953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 5e-6) (* 100.0 (/ (+ (* i (/ (pow (+ 1.0 (/ i n)) n) i)) (* n (/ -1.0 n))) (/ i n))) (* 100.0 (/ (- (* n (pow (exp n) (log1p (/ i n)))) n) i))))",
    "output_parens": 42,
    "avg_bits_err_input": 47.798963025806536,
    "avg_bits_err_output": 11.080815518644812,
    "avg_bits_err_improve": 36.718147507161724,
    "time": 33127.489501953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(* (/ -1.0 (hypot c d)) (+ (* (/ d (- (hypot c d))) b) (* (/ c (- (hypot c d))) a)))",
    "output_parens": 12,
    "avg_bits_err_input": 26.035564446303326,
    "avg_bits_err_output": 0.6093098838196823,
    "avg_bits_err_improve": 25.426254562483642,
    "time": 29450.14794921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(/ (- (* (/ c (hypot c d)) b) (/ a (/ (hypot c d) d))) (hypot c d))",
    "output_parens": 9,
    "avg_bits_err_input": 25.95546451676505,
    "avg_bits_err_output": 0.5081947713270648,
    "avg_bits_err_improve": 25.447269745437985,
    "time": 28368.784912109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(fma ux (+ maxCos -1.0) 1.0)",
    "output_parens": 2,
    "avg_bits_err_input": 0.03225,
    "avg_bits_err_output": 0.02122412148784424,
    "avg_bits_err_improve": 0.011025878512155762,
    "time": 9845.01513671875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (+ (fma (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (* (pow (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))) -2.0) (- (pow (fma ux maxCos (- 1.0 ux)) 12.0)))) (fma (- (pow (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))) -2.0)) (pow (fma ux maxCos (- 1.0 ux)) 12.0) (* (pow (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))) -2.0) (pow (fma ux maxCos (- 1.0 ux)) 12.0)))) (+ (/ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)))) (/ (* (pow (pow (cbrt (fma ux maxCos (- 1.0 ux))) 2.0) 6.0) (pow (cbrt (fma ux maxCos (- 1.0 ux))) 6.0)) (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))))))))",
    "output_parens": 96,
    "avg_bits_err_input": 13.686136210332535,
    "avg_bits_err_output": 12.062328666008797,
    "avg_bits_err_improve": 1.6238075443237374,
    "time": 106555.43505859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (/ (+ (* (fma -1.0 (/ (pow (fma ux maxCos (- 1.0 ux)) 24.0) (pow (fma ux maxCos (- 1.0 ux)) 16.0)) 1.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))) (fma (- (hypot (pow (fma ux maxCos (- 1.0 ux)) 4.0) (pow (fma ux maxCos (- 1.0 ux)) 6.0))) (hypot (pow (fma ux maxCos (- 1.0 ux)) 4.0) (pow (fma ux maxCos (- 1.0 ux)) 6.0)) (+ (pow (fma ux maxCos (- 1.0 ux)) 8.0) (pow (fma ux maxCos (- 1.0 ux)) 12.0)))) (* (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)))) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)))))",
    "output_parens": 57,
    "avg_bits_err_input": 13.72487156003154,
    "avg_bits_err_output": 12.09281419939841,
    "avg_bits_err_improve": 1.6320573606331301,
    "time": 128436.0576171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (sqrt (fma ux (* (- 1.0 ux) (* (* ux (* maxCos maxCos)) (+ ux -1.0))) 1.0)) (fma (cos (* 2.0 (* uy PI))) xi (* (sin (* 2.0 (* uy PI))) yi)) (* (* ux maxCos) (* (- 1.0 ux) zi)))",
    "output_parens": 21,
    "avg_bits_err_input": 0.34560481299364165,
    "avg_bits_err_output": 0.3367780477967502,
    "avg_bits_err_improve": 0.008826765196891462,
    "time": 56174.437255859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.2039093460579787,
    "avg_bits_err_output": 0.19891992500144226,
    "avg_bits_err_improve": 0.004989421056536436,
    "time": 44243.864501953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5239761466028169,
    "avg_bits_err_output": 0.49955317561389423,
    "avg_bits_err_improve": 0.024422970988922654,
    "time": 23906.65380859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* 39.47841760436263 (* u2 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.33648332060704467,
    "avg_bits_err_output": 0.3270009689005739,
    "avg_bits_err_improve": 0.00948235170647077,
    "time": 25156.730224609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (log (/ (+ (+ 1.0 (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0)) (/ 1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))))) (+ -1.0 (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -3.0)))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.33416850618637534,
    "avg_bits_err_output": 0.33377160061213007,
    "avg_bits_err_improve": 0.0003969055742452654,
    "time": 31404.676025390625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05882812611399042,
    "avg_bits_err_output": 0.04027349392890941,
    "avg_bits_err_improve": 0.018554632185081014,
    "time": 21588.948974609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (* 2.0 (+ s (* s (cosh (/ (fabs x) s))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13424615967520595,
    "avg_bits_err_output": 0.11504369762122349,
    "avg_bits_err_improve": 0.01920246205398246,
    "time": 21491.21875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6724961202122393,
    "avg_bits_err_output": 0.6782623000482958,
    "avg_bits_err_improve": -0.00576617983605654,
    "time": 30552.40478515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (- (log (pow (fma (- 1.0 u) (exp (/ -2.0 v)) u) 2.0)) (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.15205500933767416,
    "avg_bits_err_output": 0.17103713563442619,
    "avg_bits_err_improve": -0.018982126296752028,
    "time": 38475.487060546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ sinTheta_O (/ (hypot 1.0 sinTheta_O) sinTheta_O))) eta))) (asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.579439253100349,
    "avg_bits_err_output": 0.375799296969289,
    "avg_bits_err_improve": 2.20363995613106,
    "time": 34817.47509765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (/ (* (/ 1.0 v) cosTheta_O) (sinh (/ 1.0 v))) (* (pow (exp sinTheta_O) (/ sinTheta_i v)) (* 2.0 (/ v cosTheta_i))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4524569086763729,
    "avg_bits_err_output": 0.38249045216982447,
    "avg_bits_err_improve": 0.06996645650654842,
    "time": 45441.69091796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(pow (* (sqrt 0.5) (sqrt (/ (exp (+ 0.6931 (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v))) v))) 2.0)",
    "output_parens": 11,
    "avg_bits_err_input": 0.133655879990983,
    "avg_bits_err_output": 0.07193163517531914,
    "avg_bits_err_improve": 0.06172424481566385,
    "time": 34929.701171875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow alpha (* 2.0 PI))) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4727386216274613,
    "avg_bits_err_output": 0.43911470051080176,
    "avg_bits_err_improve": 0.033623921116659516,
    "time": 59668.588623046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3366678960400442,
    "avg_bits_err_output": 0.5475300453140278,
    "avg_bits_err_improve": 0.7891378507260164,
    "time": 28071.073486328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.261449949987062,
    "avg_bits_err_output": 0.20425,
    "avg_bits_err_improve": 12.057199949987062,
    "time": 22868.259765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ 0.125 (* s PI)) (+ (/ (exp (/ (- r) s)) r) (/ (* (sqrt (exp (/ (* r -0.3333333333333333) s))) (exp (* (* (/ r (* s -3.0)) 0.25) 2.0))) r)))",
    "output_parens": 19,
    "avg_bits_err_input": 0.13820640067753484,
    "avg_bits_err_output": 0.1445376229653785,
    "avg_bits_err_improve": -0.006331222287843663,
    "time": 76916.93139648438,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* n1_i (/ (sin (* u normAngle)) (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8725186000838073,
    "avg_bits_err_output": 0.6915044778780118,
    "avg_bits_err_improve": 0.1810141222057955,
    "time": 39340.29443359375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ 1.0 (+ c (/ (/ (exp (- (* cosTheta cosTheta))) cosTheta) (sqrt (/ PI (fma cosTheta -2.0 1.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6713088026669302,
    "avg_bits_err_output": 0.48244263231683554,
    "avg_bits_err_improve": 0.18886617035009462,
    "time": 25907.916259765625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (log1p (expm1 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.367400261435419,
    "avg_bits_err_output": 0.5272822633180994,
    "avg_bits_err_improve": 12.84011799811732,
    "time": 21619.721435546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (- (+ 0.5 (* 0.5 (cos (* PI (* u2 2.0))))) (pow (sin (* PI u2)) 2.0)))",
    "output_parens": 14,
    "avg_bits_err_input": 13.414906258828818,
    "avg_bits_err_output": 0.3410020130288164,
    "avg_bits_err_improve": 13.073904245800001,
    "time": 30225.8544921875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* alpha (- (log1p (- u0)))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.056376922310076,
    "avg_bits_err_output": 0.3311605265643931,
    "avg_bits_err_improve": 13.725216395745683,
    "time": 20666.651123046875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (* alphay (* alphax (- alphax))) (/ (log1p (- u0)) (fma sin2phi (/ (* alphax alphax) alphay) (* alphay cos2phi))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.66285528476113,
    "avg_bits_err_output": 0.47675278217728684,
    "avg_bits_err_improve": 12.186102502583843,
    "time": 28705.237548828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(+ (* PI l) (/ -1.0 (* F (/ F (tan (* PI l))))))",
    "output_parens": 7,
    "avg_bits_err_input": 16.691843987733897,
    "avg_bits_err_output": 12.570948000933384,
    "avg_bits_err_improve": 4.120895986800512,
    "time": 29328.87109375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21904248125036055,
    "avg_bits_err_output": 0.15432312031259016,
    "avg_bits_err_improve": 0.06471936093777039,
    "time": 24030.55859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ (* F (pow (fma x 2.0 (fma F F 2.0)) -0.5)) (sin B)) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.969781206720246,
    "avg_bits_err_output": 10.784918310963297,
    "avg_bits_err_improve": 3.1848628957569485,
    "time": 36887.75244140625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (/ (log (/ (cosh (* PI (* 0.25 f))) (sinh (* PI (* 0.25 f))))) PI) -4.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.33326911280274,
    "avg_bits_err_output": 1.781971120651951,
    "avg_bits_err_improve": 59.551297992150786,
    "time": 41108.540283203125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(pow (cbrt (* t (sqrt (/ 2.0 (fma l (- l) (* (fma t (* 2.0 t) (* l l)) (/ (+ x 1.0) (+ x -1.0)))))))) 3.0)",
    "output_parens": 14,
    "avg_bits_err_input": 42.37771968794223,
    "avg_bits_err_output": 38.986342600267896,
    "avg_bits_err_improve": 3.3913770876743357,
    "time": 51013.81103515625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.860575818610361,
    "avg_bits_err_output": 0.21962293281619572,
    "avg_bits_err_improve": 3.6409528857941655,
    "time": 28284.433349609375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 1.0458010014493448,
    "avg_bits_err_output": 0.006375,
    "avg_bits_err_improve": 1.0394260014493448,
    "time": 11953.060791015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (/ (sqrt (- 1.0 (/ (* (/ Om Omc) (* Om (/ Om Omc))) (* Omc (/ Omc Om))))) (hypot 1.0 (* (/ t l) (sqrt 2.0)))) (hypot 1.0 (/ Om Omc))))",
    "output_parens": 18,
    "avg_bits_err_input": 10.044448814120882,
    "avg_bits_err_output": 1.0502518264396354,
    "avg_bits_err_improve": 8.994196987681246,
    "time": 28462.71630859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (sqrt (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U))))) 0.0) (* (sqrt (* (* 2.0 n) (fma (/ l Om) (- (* l -2.0) (* n (* (/ l Om) (- U U*)))) t))) (sqrt U)) (if (<= (sqrt (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U))))) 1e+146) (sqrt (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U))))) (if (<= (sqrt (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U))))) INFINITY) (* (sqrt (* 2.0 (* n U))) (sqrt (- t (+ (* n (* (- U U*) (pow (/ Om l) -2.0))) (* 2.0 (* l (/ l Om))))))) (sqrt (* (* 2.0 n) (+ (fma (/ l Om) (* U (fma l -2.0 (* (- U* U) (/ n (/ Om l))))) 0.0) (* U t)))))))",
    "output_parens": 103,
    "avg_bits_err_input": 35.1978862865177,
    "avg_bits_err_output": 25.5258641375358,
    "avg_bits_err_improve": 9.672022148981899,
    "time": 54019.8720703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ (* (/ l (sin k)) 2.0) k) (* t (* (tan k) (/ k l))))",
    "output_parens": 9,
    "avg_bits_err_input": 47.38494465601513,
    "avg_bits_err_output": 0.3483631875322,
    "avg_bits_err_improve": 47.03658146848293,
    "time": 137540.63745117188,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= l -2e-107) (not (<= l 5e-169))) (/ (* (/ (* l 2.0) (* (fma (/ k t) (* t (/ k t)) (* 2.0 t)) (tan k))) (/ l t)) (* t (sin k))) (/ (* l (/ 2.0 (* t (sin k)))) (* t (* (+ 2.0 (pow (/ k t) 2.0)) (* t (/ (tan k) l))))))",
    "output_parens": 32,
    "avg_bits_err_input": 32.22962081645923,
    "avg_bits_err_output": 11.28120088496805,
    "avg_bits_err_improve": 20.94841993149118,
    "time": 71072.7880859375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (* a1 (* a1 (sqrt 0.5))) (* (sqrt 0.5) (* a2 a2))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5215889125209148,
    "avg_bits_err_output": 0.48729605470327625,
    "avg_bits_err_improve": 0.03429285781763852,
    "time": 29863.740234375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (sqrt (* 2.0 (* PI n))) (* (sqrt k) (pow (* 2.0 (* PI n)) (* k 0.5))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.49177474195505366,
    "avg_bits_err_output": 0.424375376567278,
    "avg_bits_err_improve": 0.06739936538777569,
    "time": 26063.8427734375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (sinh l) (* (* 2.0 J) (cos (* 0.5 K)))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.508431442493627,
    "avg_bits_err_output": 0.1048962406251803,
    "avg_bits_err_improve": 17.403535201868447,
    "time": 22814.73583984375,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= K -1.25e+40) (* (cos (- (pow (/ (+ m n) (pow (cbrt (* (pow (cbrt (* (+ m n) (* K 0.5))) 2.0) (/ 2.0 K))) 3.0)) 3.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) (if (<= K 1.5e-170) (* (cos (- (* (+ m n) (/ K 2.0)) M)) (exp (- (- m (+ n l)) (pow (- (* (+ m n) 0.5) M) 2.0)))) (* (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0))) (cos (- (pow (/ (+ m n) (pow (cbrt (fma (* (cbrt (* (+ m n) (* K 0.5))) (/ 2.0 K)) (cbrt (* (+ m n) (* K 0.5))) 0.0)) 3.0)) 3.0) M)))))",
    "output_parens": 70,
    "avg_bits_err_input": 15.561705301890038,
    "avg_bits_err_output": 1.7149647767337295,
    "avg_bits_err_improve": 13.846740525156308,
    "time": 40444.720703125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.464323120312592,
    "avg_bits_err_output": 7.7604481203125895,
    "avg_bits_err_improve": 9.703875000000004,
    "time": 36850.084716796875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(* w0 (sqrt (- 1.0 (/ (* (* M (/ D d)) h) (* (/ (* d (/ 4.0 D)) M) l)))))",
    "output_parens": 11,
    "avg_bits_err_input": 14.651517897889446,
    "avg_bits_err_output": 8.81186470239082,
    "avg_bits_err_improve": 5.839653195498627,
    "time": 45909.397705078125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+248) (/ c0 (* (sqrt (- V)) (sqrt (/ (- l) A)))) (if (<= (* V l) -2e-255) (/ c0 (/ (sqrt (* V (- l))) (sqrt (- A)))) (if (<= (* V l) 0.0) (/ (/ c0 (sqrt (/ V A))) (sqrt l)) (if (<= (* V l) 2e+291) (/ c0 (/ (sqrt (* V l)) (sqrt A))) (/ (sqrt (* (/ c0 l) (/ c0 V))) (pow A -0.5))))))",
    "output_parens": 42,
    "avg_bits_err_input": 19.103543663613543,
    "avg_bits_err_output": 6.5811468673819675,
    "avg_bits_err_improve": 12.522396796231575,
    "time": 33196.7607421875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) (- INFINITY)) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ d D) (* (/ d D) (/ c0 (* w h))) M)) (sqrt (- (* (/ d (/ D c0)) (/ (/ d (* w h)) D)) M)) (* (/ d (/ D c0)) (/ (/ d (* w h)) D)))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 2e+204) (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) (* c0 (* (/ 0.5 w) (* M (/ M (- (* d (/ (/ c0 (* w D)) (* h (/ D d)))) (sqrt (* (fma d (* (/ c0 (* w D)) (/ (/ d D) h)) M) (- (* d (* (/ c0 (* w D)) (/ (/ d D) h))) M))))))))))",
    "output_parens": 135,
    "avg_bits_err_input": 59.690435362156144,
    "avg_bits_err_output": 30.558901835859267,
    "avg_bits_err_improve": 29.131533526296877,
    "time": 70031.55126953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* d 2.0)) 2.0)) (/ h l)))) -5e-106) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (+ 1.0 (/ (* (* (* 0.5 M) (/ D d)) (* h -0.5)) (* l (/ 1.0 (* (* 0.5 M) (/ D d))))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* d 2.0)) 2.0)) (/ h l)))) 2e-239) (/ (* (fabs d) (fma (/ h l) (* (pow (* M (* D (/ 0.5 d))) 2.0) -0.5) 1.0)) (sqrt (* h l))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* d 2.0)) 2.0)) (/ h l)))) 4e+301) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (+ 1.0 (* (pow (/ 1.0 (* (/ d D) (/ 2.0 M))) 2.0) (* (/ h l) -0.5)))) (* (/ (fabs d) (sqrt (* h l))) (+ 1.0 (* -0.5 (/ h (/ l (pow (* M (/ D (* d 2.0))) 2.0)))))))))",
    "output_parens": 106,
    "avg_bits_err_input": 26.882942619124844,
    "avg_bits_err_output": 14.036503165496729,
    "avg_bits_err_improve": 12.846439453628115,
    "time": 100667.06689453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (- (/ 0.25 (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (/ (/ 0.25 (fma x x 1.0)) (+ 0.5 (/ 0.5 (hypot 1.0 x))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 17,
    "avg_bits_err_input": 15.55160651413115,
    "avg_bits_err_output": 15.053306762975927,
    "avg_bits_err_improve": 0.49829975115522274,
    "time": 36216.096435546875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9842924812503606,
    "avg_bits_err_output": 0.010323120312590145,
    "avg_bits_err_improve": 0.9739693609377704,
    "time": 4062.010986328125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (fma v (* v -5.0) 1.0) (sqrt (fma v (* v -6.0) 2.0))) (* PI (- 1.0 (* v v)))) t)",
    "output_parens": 11,
    "avg_bits_err_input": 0.42143915857060477,
    "avg_bits_err_output": 0.11313435963533591,
    "avg_bits_err_improve": 0.30830479893526885,
    "time": 20264.161376953125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (- 1.0 (* v v)) (sqrt (+ 2.0 (* v (* v -6.0))))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.01252124062518029,
    "avg_bits_err_output": 0.00875,
    "avg_bits_err_improve": 0.00377124062518029,
    "time": 13357.341064453125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(pow (pow (exp 0.6666666666666666) (log (acos (/ (fma v (* v -5.0) 1.0) (fma v v -1.0))))) 1.5)",
    "output_parens": 9,
    "avg_bits_err_input": 0.5478636605581666,
    "avg_bits_err_output": 0.5482803359846128,
    "avg_bits_err_improve": -0.00041667542644618916,
    "time": 33343.388916015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (pow k m) (+ (* k (/ (+ k 10.0) a)) (/ 1.0 a)))",
    "output_parens": 7,
    "avg_bits_err_input": 1.9274456531526651,
    "avg_bits_err_output": 0.30992969658743,
    "avg_bits_err_improve": 1.617515956565235,
    "time": 25122.002197265625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (* (/ 1.0 (+ 2.0 (expm1 (/ (+ Vef (+ EAccept (- Ev mu))) KbT)))) NaChar))",
    "output_parens": 16,
    "avg_bits_err_input": 0.02812955818689803,
    "avg_bits_err_output": 0.028128899730098595,
    "avg_bits_err_improve": 6.58456799435686e-07,
    "time": 14186.1904296875,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18284945195251592,
    "avg_bits_err_output": 0.01396016601330324,
    "avg_bits_err_improve": 0.16888928593921268,
    "time": 6958.456298828125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.19612962650265922,
    "avg_bits_err_output": 0.02723718260596553,
    "avg_bits_err_improve": 0.1688924438966937,
    "time": 19848.99267578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.1943640478111961,
    "avg_bits_err_output": 0.029136959361699747,
    "avg_bits_err_improve": 0.16522708844949635,
    "time": 11272.529541015625,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ 1.0 (/ (hypot x (* p 2.0)) x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 13.472645032385683,
    "avg_bits_err_output": 13.471398776204014,
    "avg_bits_err_improve": 0.001246256181669736,
    "time": 19793.578125,
    "seed": 22,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.566345583290996,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 40.558470583291,
    "time": 6573.4990234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -2.5e-10) (/ 1.0 (- (/ (tan x) (- (sin x) x)) (/ x (- (sin x) x)))) (if (<= x 2.35e-8) (/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (/ (fma (* x x) (/ 1.0 (tan x)) (- x)) (/ (- x) (tan x)))) (/ 1.0 (/ (- (* (- (sin x) x) (* (sin x) (/ 1.0 (- (sin x) x)))) (* x (cos x))) (* (- (sin x) x) (cos x))))))",
    "output_parens": 47,
    "avg_bits_err_input": 31.668470336410316,
    "avg_bits_err_output": 29.104213458236163,
    "avg_bits_err_improve": 2.5642568781741524,
    "time": 32435.622802734375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.25e-168) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (/ (/ 1.0 (/ -1.0 c)) (+ b_2 (sqrt (fma b_2 b_2 (* c (- a)))))))",
    "output_parens": 16,
    "avg_bits_err_input": 33.71794520895431,
    "avg_bits_err_output": 19.6584239701909,
    "avg_bits_err_improve": 14.059521238763413,
    "time": 24807.47705078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -7.6e+168) (/ (- c) (- b_2 (hypot b_2 (sqrt (* c a))))) (if (<= b_2 -1.85e-196) (/ (/ (* c (- a)) (- b_2 (sqrt (- (* b_2 b_2) (* c a))))) a) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a)))",
    "output_parens": 26,
    "avg_bits_err_input": 33.97385611769561,
    "avg_bits_err_output": 21.727677248797196,
    "avg_bits_err_improve": 12.246178868898415,
    "time": 29952.545654296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 31.376303852537593,
    "avg_bits_err_output": 0.12688721875540876,
    "avg_bits_err_improve": 31.249416633782182,
    "time": 22612.771728515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (/ 1.0 (exp (/ (log1p x) (- n)))) (pow x (/ 1.0 n)))",
    "output_parens": 8,
    "avg_bits_err_input": 32.469962662104635,
    "avg_bits_err_output": 32.1886351543989,
    "avg_bits_err_improve": 0.28132750770573267,
    "time": 47653.162109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(- (log (/ N (+ N 1.0))))",
    "output_parens": 4,
    "avg_bits_err_input": 29.552227315224616,
    "avg_bits_err_output": 29.406351630151644,
    "avg_bits_err_improve": 0.14587568507297277,
    "time": 46654.158203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (pow (+ x 1.0) -2.0) (/ (fma x -1.0 -1.0) x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.553174895831383,
    "avg_bits_err_output": 0.02091748125036058,
    "avg_bits_err_improve": 14.532257414581021,
    "time": 13658.80908203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -1.55e-17) (fma (- (sin x)) (expm1 (log1p (sin eps))) (- (* (cos x) (cos eps)) (cos x))) (if (<= x 6.4e-19) (* (* (sin (* eps 0.5)) (sin (* 0.5 (+ eps (+ x x))))) -2.0) (- (- (* (cos x) (cos eps)) (cos x)) (* (sin eps) (/ (pow (sin x) 2.0) (sin x))))))",
    "output_parens": 35,
    "avg_bits_err_input": 39.93567122901428,
    "avg_bits_err_output": 0.5655074832663527,
    "avg_bits_err_improve": 39.37016374574793,
    "time": 39397.80859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (+ (/ (+ 1.0 x) (cbrt (+ 1.0 x))) (fma (cbrt (+ 1.0 x)) (cbrt x) (/ x (cbrt x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 29.896581344258788,
    "avg_bits_err_output": 0.21589437695395813,
    "avg_bits_err_improve": 29.68068696730483,
    "time": 30891.06201171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.55151258194374,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 30.55138758194374,
    "time": 8813.558837890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -1.25e-93) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 1.3e+41) (/ (- (hypot b (pow (* -4.0 (* (* (* c -4.0) a) (* c a))) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* -4.0 a)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 30,
    "avg_bits_err_input": 33.851531813868164,
    "avg_bits_err_output": 24.35255107520751,
    "avg_bits_err_improve": 9.498980738660652,
    "time": 37643.6865234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -2.7e+155) (* -0.5 (/ (* c -4.0) (- (hypot b (pow (pow (* c (* -4.0 a)) 2.0) 0.25)) b))) (if (<= b 5.1e-280) (* -0.5 (/ (* c -4.0) (- (sqrt (fma c (* -4.0 a) (* b b))) b))) (if (<= b 1.05e+154) (* -0.5 (/ (+ b (sqrt (+ (* b b) (* (* c -4.0) a)))) a)) (* -0.5 (/ (+ b (hypot (sqrt (* (* c -4.0) a)) b)) a)))))",
    "output_parens": 38,
    "avg_bits_err_input": 34.081361275863955,
    "avg_bits_err_output": 12.596651439988916,
    "avg_bits_err_improve": 21.484709835875037,
    "time": 36981.680908203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.06916301485907,
    "avg_bits_err_output": 0.024950564063671885,
    "avg_bits_err_improve": 61.0442124507954,
    "time": 9661.711669921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (- (log1p n) (log n)) (pow (+ -1.0 (pow (exp (pow (pow (cbrt (cbrt (log1p (sqrt (+ (log1p n) -1.0))))) 3.0) 2.0)) (cbrt (log1p (sqrt (+ (log1p n) -1.0)))))) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 63.0130033641234,
    "avg_bits_err_output": 44.20973702321742,
    "avg_bits_err_improve": 18.803266340905978,
    "time": 43612.9736328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.599320036676964,
    "avg_bits_err_output": 0.006125,
    "avg_bits_err_improve": 58.59319503667697,
    "time": 20858.103759765625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (- (cos x) (* (pow (cos x) 2.0) (/ x (sin x)))) (* (cos x) (/ x (sin x)))) (sin x))",
    "output_parens": 14,
    "avg_bits_err_input": 59.906298302052484,
    "avg_bits_err_output": 59.90013520414833,
    "avg_bits_err_improve": 0.0061630979041567,
    "time": 38036.211669921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ (/ eps (/ (expm1 (* eps b)) (expm1 (* eps (+ b a))))) (expm1 (* eps a)))",
    "output_parens": 10,
    "avg_bits_err_input": 60.420969460268275,
    "avg_bits_err_output": 29.4016606924122,
    "avg_bits_err_improve": 31.019308767856074,
    "time": 36461.705078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.9553766315833,
    "avg_bits_err_output": 0.010875,
    "avg_bits_err_improve": 40.9445016315833,
    "time": 7641.365234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.792896419761746,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 58.792396419761744,
    "time": 3244.572509765625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.531069950251908,
    "avg_bits_err_output": 0.016973793617776685,
    "avg_bits_err_improve": 29.51409615663413,
    "time": 5556.399169921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(fma (exp (* x 0.5)) (exp (* x 0.5)) (+ (exp (- x)) -2.0))",
    "output_parens": 8,
    "avg_bits_err_input": 29.62849430006962,
    "avg_bits_err_output": 29.47877902442647,
    "avg_bits_err_improve": 0.14971527564314968,
    "time": 27191.551513671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(fma (+ -1.0 (/ 1.0 (* (/ x (- x 1.0)) 0.5))) (/ 1.0 (- 1.0 x)) (/ 1.0 (+ 1.0 x)))",
    "output_parens": 10,
    "avg_bits_err_input": 10.130581383432595,
    "avg_bits_err_output": 10.134017584455025,
    "avg_bits_err_improve": -0.003436201022429586,
    "time": 42839.005126953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(/ (fma (tan x) (tan eps) (+ (/ (+ (tan x) (tan eps)) (tan x)) -1.0)) (/ (- 1.0 (* (tan x) (tan eps))) (tan x)))",
    "output_parens": 16,
    "avg_bits_err_input": 37.61544432487748,
    "avg_bits_err_output": 20.081183177063107,
    "avg_bits_err_improve": 17.534261147814373,
    "time": 39708.6103515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.010578261194585,
    "avg_bits_err_output": 0.13260864687698318,
    "avg_bits_err_improve": 29.877969614317603,
    "time": 23582.07080078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (cos x) (sin eps) (* (sin x) (+ (cos eps) -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 37.46693857426891,
    "avg_bits_err_output": 0.37648592918908474,
    "avg_bits_err_improve": 37.09045264507982,
    "time": 27705.630859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.90763185922271,
    "avg_bits_err_output": 0.11258496250072116,
    "avg_bits_err_improve": 19.79504689672199,
    "time": 19057.06884765625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 15.003709080553007,
    "avg_bits_err_output": 0.365880028443556,
    "avg_bits_err_improve": 14.637829052109451,
    "time": 20453.4287109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.503171876792933,
    "avg_bits_err_output": 1.2498186336119579,
    "avg_bits_err_improve": 28.253353243180975,
    "time": 33267.50634765625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (+ (/ (- m (* m m)) v) -1.0) (- 1.0 m))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0776488878888441,
    "avg_bits_err_output": 0.07525264726366379,
    "avg_bits_err_improve": 0.0023962406251803042,
    "time": 27312.31640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b (- a)) (/ (/ 1.0 a) b))",
    "output_parens": 5,
    "avg_bits_err_input": 15.817693724844002,
    "avg_bits_err_output": 0.2622127828190803,
    "avg_bits_err_improve": 15.555480942024921,
    "time": 20614.1748046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (+ (* (cos (fma angle (* PI 0.005555555555555556) 1.0)) (cos 1.0)) (* (sin (+ 1.0 (* PI (* angle 0.005555555555555556)))) (sin 1.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 20,
    "avg_bits_err_input": 20.608705022628236,
    "avg_bits_err_output": 20.62869393789317,
    "avg_bits_err_improve": -0.019988915264935514,
    "time": 51979.573486328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* (* PI angle) 0.011111111111111112)) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 31.438873971055294,
    "avg_bits_err_output": 21.81805755399757,
    "avg_bits_err_improve": 9.620816417057725,
    "time": 45121.697509765625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* -0.005555555555555556 (pow (/ -1.0 (* angle PI)) -1.0)))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.29283692702173,
    "avg_bits_err_output": 20.297065368068665,
    "avg_bits_err_improve": -0.00422844104693354,
    "time": 53516.4091796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (/ (* m (- 1.0 m)) (/ v m)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17735620312590142,
    "avg_bits_err_output": 0.1735024437510817,
    "avg_bits_err_improve": 0.003853759374819715,
    "time": 49597.273681640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.31963946681700633,
    "avg_bits_err_output": 0.31826852172968445,
    "avg_bits_err_improve": 0.0013709450873218842,
    "time": 29464.996337890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13694812031259015,
    "avg_bits_err_output": 0.13694812031259015,
    "avg_bits_err_improve": 0,
    "time": 25366.05126953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (cos phi1) (* (cos phi2) (+ (* (sin lambda2) (sin lambda1)) (* (cos lambda2) (cos lambda1))))))) R)",
    "output_parens": 17,
    "avg_bits_err_input": 17.270826726077534,
    "avg_bits_err_output": 3.9811513836910803,
    "avg_bits_err_improve": 13.289675342386452,
    "time": 41806.516845703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-31) (* (- (fma a (* c -4.0) (* b b)) (* b b)) (/ (/ 0.5 a) (+ b (sqrt (fma a (* c -4.0) (* b b)))))) (* (/ 0.5 a) (+ (- b) (pow (pow (fma c (* a -4.0) (* b b)) 0.75) 0.6666666666666666))))",
    "output_parens": 32,
    "avg_bits_err_input": 52.308047170860114,
    "avg_bits_err_output": 49.790679853065036,
    "avg_bits_err_improve": 2.5173673177950775,
    "time": 56341.19580078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ (+ (* (* (/ a b) 0.5) (* a (* c -4.0))) (+ (* 0.5 (* (/ a b) (* b b))) (* b (* a -0.5)))) (* a (/ a b))) (+ b (sqrt (fma b b (* a (* c -4.0))))))",
    "output_parens": 22,
    "avg_bits_err_input": 28.219183359608415,
    "avg_bits_err_output": 10.342941080194157,
    "avg_bits_err_improve": 17.876242279414257,
    "time": 63911.486083984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ (* -4.0 (* c a)) (fma (pow (fma b b (* a (* -4.0 c))) 0.125) (pow (fma b b (* a (* -4.0 c))) 0.375) b)) (* a 2.0))",
    "output_parens": 14,
    "avg_bits_err_input": 43.44645167037662,
    "avg_bits_err_output": 0.40482631719822787,
    "avg_bits_err_improve": 43.04162535317839,
    "time": 38478.75341796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -1.25e-93) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 1.3e+41) (/ (- (hypot b (pow (* -4.0 (* (* (* c -4.0) a) (* c a))) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* -4.0 a)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 30,
    "avg_bits_err_input": 33.861446536139766,
    "avg_bits_err_output": 24.35255107520751,
    "avg_bits_err_improve": 9.508895460932255,
    "time": 39238.106689453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8077925542400564,
    "avg_bits_err_output": 0.22491649373369227,
    "avg_bits_err_improve": 0.5828760605063641,
    "time": 38953.455078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (+ (fma 1.0 (* (* 64.0 (pow (+ 1.0 (pow (exp -2.0) x)) -6.0)) (pow (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))) -2.0)) (* (fma (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (- (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0)) (pow (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0) 2.0)) (/ -1.0 (* (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))) (fma 8.0 (pow (+ 1.0 (pow (exp -2.0) x)) -3.0) (pow (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0) 3.0)))))) (fma (- (fma (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (- (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0)) (pow (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0) 2.0))) (/ 1.0 (* (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))) (fma 8.0 (pow (+ 1.0 (pow (exp -2.0) x)) -3.0) (pow (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0) 3.0)))) (/ (* (fma (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (- (/ 2.0 (+ 1.0 (pow (exp -2.0) x))) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0)) (pow (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0) 2.0)) (/ 1.0 (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))))) (fma 8.0 (pow (+ 1.0 (pow (exp -2.0) x)) -3.0) (pow (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) 1.0) 3.0))))) (* (/ 1.0 (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))))) (+ 1.0 (* 8.0 (pow (+ 1.0 (pow (exp -2.0) x)) -3.0)))))",
    "output_parens": 174,
    "avg_bits_err_input": 29.0979440931814,
    "avg_bits_err_output": 29.091368166709863,
    "avg_bits_err_improve": 0.0065759264715374854,
    "time": 78568.15258789062,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.04622256576127,
    "avg_bits_err_output": 0.0145,
    "avg_bits_err_improve": 58.03172256576127,
    "time": 9551.819091796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.06032060631522,
    "avg_bits_err_output": 0.008875,
    "avg_bits_err_improve": 58.05144560631522,
    "time": 8555.132080078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.008875,
    "avg_bits_err_output": 0.008875,
    "avg_bits_err_improve": 0,
    "time": 4283.032958984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.873125,
    "avg_bits_err_output": 0.09875,
    "avg_bits_err_improve": 31.774375000000003,
    "time": 5097.05419921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (+ (log1p (* x (- x))) (* -2.0 (log1p (- x)))))",
    "output_parens": 8,
    "avg_bits_err_input": 58.59448913333511,
    "avg_bits_err_output": 0.005875,
    "avg_bits_err_improve": 58.588614133335106,
    "time": 21279.61962890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(- (log (/ x (+ 1.0 (sqrt (- 1.0 (* x x)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.003448120312590144,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 0.0021981203125901443,
    "time": 6568.692626953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (/ (* ew (sin t)) (hypot 1.0 (/ (/ eh (tan t)) ew))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12686560156295074,
    "avg_bits_err_output": 0.12781372187554088,
    "avg_bits_err_improve": -0.000948120312590145,
    "time": 34501.639892578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* ew (* (cos (atan (* eh (/ (tan t) ew)))) (cos t))) (* eh (* (sin t) (sin (atan (/ (- eh) (/ ew (tan t)))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.11644812031259014,
    "avg_bits_err_output": 0.11677124062518028,
    "avg_bits_err_improve": -0.0003231203125901444,
    "time": 41701.085205078125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))) (* (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))) (- lambda2 lambda1))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.12043562712222,
    "avg_bits_err_output": 0.13084451691186264,
    "avg_bits_err_improve": 38.989591110210355,
    "time": 39622.220703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (- 1.0 (/ (/ b (/ a b)) a)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.33800257757965,
    "avg_bits_err_output": 0.010930367936981092,
    "avg_bits_err_improve": 14.327072209642669,
    "time": 7811.392578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (* (cos delta) (pow (cos phi1) 2.0)) (* (* (sin delta) (* (cos phi1) (cos theta))) (sin phi1)))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.1580655913209612,
    "avg_bits_err_output": 0.08458815513473072,
    "avg_bits_err_improve": 0.07347743618623048,
    "time": 52829.895263671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* 3.0 a)) -5e-32) (/ (/ (- (fma b b (* c (* a -3.0))) (* b b)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* 3.0 a)) (/ (+ (- b) (sqrt (pow (pow (fma c (* 3.0 a) (* b b)) 3.0) 0.3333333333333333))) (* 3.0 a)))",
    "output_parens": 33,
    "avg_bits_err_input": 52.311331709905836,
    "avg_bits_err_output": 49.915601084453044,
    "avg_bits_err_improve": 2.395730625452792,
    "time": 53001.748046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (+ (* b b) (* a (* c -3.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 28.321092932950116,
    "avg_bits_err_output": 0.2776860853785604,
    "avg_bits_err_improve": 28.043406847571553,
    "time": 34648.06396484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* -3.0 a)) (+ b (sqrt (fma -3.0 (* a c) (* b b))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 43.46908362541463,
    "avg_bits_err_output": 0.4078075203241289,
    "avg_bits_err_improve": 43.061276105090506,
    "time": 43195.143798828125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (fma b (+ -1.0 (/ b (hypot b (sqrt (* a (* c -3.0)))))) (* c (/ -3.0 (/ (hypot b (sqrt (* a (* c -3.0)))) a)))) (* a 3.0)) (if (<= b 1.22e-101) (/ (fma b (+ -1.0 (/ b (sqrt (fma (* c -3.0) a (* b b))))) (/ (/ (* a -3.0) (sqrt (fma c (* a -3.0) (* b b)))) (/ 1.0 c))) (* a 3.0)) (/ (* (/ -0.3333333333333333 (+ b (hypot b (sqrt (* a (* c -3.0)))))) (* 3.0 (* a c))) a)))",
    "output_parens": 47,
    "avg_bits_err_input": 33.8970234565059,
    "avg_bits_err_output": 23.71780123881207,
    "avg_bits_err_improve": 10.17922221769383,
    "time": 47590.04833984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (sin phi1) (* (cos phi2) (fma (cos lambda1) (cos lambda2) (+ (exp (log1p (* (sin lambda1) (sin lambda2)))) -1.0))))))",
    "output_parens": 27,
    "avg_bits_err_input": 13.522863158103593,
    "avg_bits_err_output": 0.18679791240806842,
    "avg_bits_err_improve": 13.336065245695526,
    "time": 48544.654541015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ 1.0 (- (* (fma x -1.0 -1.0) (/ (- -1.0 x) x)) x)) (* (/ (+ 1.0 x) x) (- 1.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.065162798802888,
    "avg_bits_err_output": 25.11454114524955,
    "avg_bits_err_improve": 3.9506216535533376,
    "time": 55646.283935546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ (+ x -1.0) (/ (+ x 1.0) x)) (* (+ x -1.0) (/ (+ x 1.0) x)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.013542481250360578,
    "avg_bits_err_improve": -0.00016748125036057833,
    "time": 8153.964599609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.859461299622096,
    "avg_bits_err_output": 0.07775,
    "avg_bits_err_improve": 14.781711299622096,
    "time": 27062.156005859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= B -2.95e+124) (* (sqrt (* F (* (+ A (- C (hypot B (- A C)))) 2.0))) (/ -1.0 (hypot B (sqrt (* C (* A -4.0)))))) (if (<= B 5.2e+127) (- (/ (pow (* (cbrt (fma B B (* A (* C -4.0)))) (cbrt (* (* F (- (- (hypot B (- A C)) A) C)) -2.0))) 1.5) (+ (* B B) (* -4.0 (* C A))))) (- (/ (sqrt (* F (* (+ A (- C (hypot B (- A C)))) 2.0))) (hypot B (sqrt (* C (* A -4.0))))))))",
    "output_parens": 49,
    "avg_bits_err_input": 51.983211803226446,
    "avg_bits_err_output": 38.58363136115477,
    "avg_bits_err_improve": 13.399580442071674,
    "time": 53614.16259765625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(/ (* 180.0 (atan (/ (- (- C A) (hypot (- A C) B)) B))) PI)",
    "output_parens": 8,
    "avg_bits_err_input": 30.035061182282806,
    "avg_bits_err_output": 14.376740870018198,
    "avg_bits_err_improve": 15.658320312264609,
    "time": 38184.495849609375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (* 2.0 (fma B B (* A (* C -4.0))))) (* (sqrt (+ A (+ C (hypot B (- A C))))) (- (sqrt F)))) (+ (* B B) (* -4.0 (* A C)))) (sqrt (* (/ (+ C (+ A (hypot B (- A C)))) (fma A (* C -4.0) (* B B))) (* 2.0 F))))",
    "output_parens": 53,
    "avg_bits_err_input": 51.99893718574888,
    "avg_bits_err_output": 39.5326036828436,
    "avg_bits_err_improve": 12.466333502905279,
    "time": 58656.037109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt (* g 0.5)) (cbrt a))",
    "output_parens": 4,
    "avg_bits_err_input": 15.240815313840924,
    "avg_bits_err_output": 0.8141198991646073,
    "avg_bits_err_improve": 14.426695414676317,
    "time": 20757.09912109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (/ (cbrt (pow (sqrt (- (hypot g h) g)) 2.0)) (cbrt (* 2.0 a))) (* (cbrt (/ -0.5 a)) (cbrt (+ g (hypot g h)))))",
    "output_parens": 15,
    "avg_bits_err_input": 36.37509049241928,
    "avg_bits_err_output": 2.77108174611921,
    "avg_bits_err_improve": 33.604008746300075,
    "time": 35133.139892578125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma 0.6666666666666666 PI (* 0.3333333333333333 (acos (/ g (- h)))))) 3.0) (/ (+ (cos (* 2.0 (fma 0.6666666666666666 PI (* 0.3333333333333333 (acos (/ g (- h))))))) 1.0) 2.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.9902601515716059,
    "avg_bits_err_output": 0.04377694217767204,
    "avg_bits_err_improve": 0.9464832093939338,
    "time": 20364.489013671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- (log1p (exp (- b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7168231203125902,
    "avg_bits_err_output": 0.012354595584800137,
    "avg_bits_err_improve": 0.7044685247277901,
    "time": 6546.915771484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (/ a2 b2) (/ b1 a1)) (if (or (<= (/ (* a1 a2) (* b1 b2)) -1e-292) (and (not (<= (/ (* a1 a2) (* b1 b2)) 0.0)) (<= (/ (* a1 a2) (* b1 b2)) 1e+284))) (/ (* a1 a2) (* b1 b2)) (* (/ a2 b2) (/ a1 b1))))",
    "output_parens": 31,
    "avg_bits_err_input": 10.990635441032403,
    "avg_bits_err_output": 2.3777470777010388,
    "avg_bits_err_improve": 8.612888363331365,
    "time": 12155.125244140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5058062020706864,
    "avg_bits_err_output": 0.439125,
    "avg_bits_err_improve": 0.0666812020706864,
    "time": 12882.63671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -0.0066) (- (log1p 0.0) (log (- (hypot 1.0 x) x))) (log1p (+ x (+ (hypot 1.0 x) -1.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 53.09023147039252,
    "avg_bits_err_output": 0.3158074869757493,
    "avg_bits_err_improve": 52.77442398341677,
    "time": 13620.72607421875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.677473653900648,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.677473653900648,
    "time": 2432.474853515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (/ (- 1.0 x) (+ 1.0 x)) (sqrt (/ (- 1.0 x) (+ 1.0 x))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.009,
    "avg_bits_err_improve": 0.0027500000000000007,
    "time": 4757.129150390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1274.385498046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (* (* r w) (* r w)) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 12.89513380956406,
    "avg_bits_err_output": 0.23405734726943267,
    "avg_bits_err_improve": 12.661076462294627,
    "time": 39664.43505859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.5029244838468105,
    "avg_bits_err_output": 0.3187530627949089,
    "avg_bits_err_improve": 0.18417142105190165,
    "time": 83590.318359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.21487455932854,
    "avg_bits_err_output": 1.4936878984196205,
    "avg_bits_err_improve": 16.72118666090892,
    "time": 9427.672119140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(+ (* 0.954929658551372 x) (* (pow x 3.0) -0.12900613773279798))",
    "output_parens": 4,
    "avg_bits_err_input": 0.24785620312590143,
    "avg_bits_err_output": 0.2218962406251803,
    "avg_bits_err_improve": 0.025959962500721134,
    "time": 24851.265869140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0025,
    "avg_bits_err_output": 0.0025,
    "avg_bits_err_improve": 0,
    "time": 3815.765380859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(* PI (/ (/ 0.5 (* b a)) (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.088246987263581,
    "avg_bits_err_output": 0.30027237032701304,
    "avg_bits_err_improve": 13.787974616936568,
    "time": 49595.442626953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (* (+ (/ 1.0 eps) -1.0) (exp (* x (- -1.0 eps))))) 2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 29.22088656098563,
    "avg_bits_err_output": 29.22088656098563,
    "avg_bits_err_improve": 0,
    "time": 42438.462890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(exp (log1p (/ -1.0 (+ 2.0 (* (- 2.0 (/ 2.0 (+ t 1.0))) (- 2.0 (/ 2.0 (+ t 1.0))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.020625,
    "avg_bits_err_output": 0.006875,
    "avg_bits_err_improve": 0.013750000000000002,
    "time": 21661.133056640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (+ (* 2.0 (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t))))) (* (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))) (/ -2.0 (+ 1.0 t))))) (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.024875,
    "avg_bits_err_output": 0.028886842188131017,
    "avg_bits_err_improve": -0.004011842188131016,
    "time": 74973.607421875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (log (exp (/ (/ t (+ 1.0 t)) (* (+ 1.0 (/ 1.0 t)) 0.25))))) (+ 2.0 (/ (* (/ t (+ 1.0 t)) 4.0) (+ 1.0 (/ 1.0 t)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.056875,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 0.047,
    "time": 33232.3740234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3206.536376953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3652.929443359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 5026.626953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.82853340489227,
    "avg_bits_err_output": 0.259375,
    "avg_bits_err_improve": 7.56915840489227,
    "time": 18651.781005859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.541647976561522,
    "avg_bits_err_output": 7.541647976561522,
    "avg_bits_err_improve": 0,
    "time": 25307.93359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (fma x 2.0 eps))",
    "output_parens": 2,
    "avg_bits_err_input": 16.250982329742293,
    "avg_bits_err_output": 0.01425,
    "avg_bits_err_improve": 16.236732329742292,
    "time": 3130.288818359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (/ x 8.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5421382670536876,
    "avg_bits_err_output": 0.349872932816196,
    "avg_bits_err_improve": 3.192265334237492,
    "time": 22781.368896484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.06790785240537,
    "avg_bits_err_output": 0.02050488750216348,
    "avg_bits_err_improve": 15.047402964903206,
    "time": 15185.1298828125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.4131633067091,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.4131633067091,
    "time": 5409.396240234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.657742036475284,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 38.65761703647529,
    "time": 4437.470947265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.293125,
    "avg_bits_err_improve": 63.706875,
    "time": 65006.156982421875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84325490773342,
    "avg_bits_err_output": 0.3268443609377704,
    "avg_bits_err_improve": 61.51641054679565,
    "time": 12840.4150390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -2.7e+155) (* -0.5 (/ (* c -4.0) (- (hypot b (pow (pow (* c (* -4.0 a)) 2.0) 0.25)) b))) (if (<= b 5.1e-280) (* -0.5 (/ (* c -4.0) (- (sqrt (fma c (* -4.0 a) (* b b))) b))) (if (<= b 1.05e+154) (* -0.5 (/ (+ b (sqrt (+ (* b b) (* (* c -4.0) a)))) a)) (* -0.5 (/ (+ b (hypot (sqrt (* (* c -4.0) a)) b)) a)))))",
    "output_parens": 38,
    "avg_bits_err_input": 34.081361275863955,
    "avg_bits_err_output": 12.596651439988916,
    "avg_bits_err_improve": 21.484709835875037,
    "time": 38630.14404296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -1.25e-93) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0)) (if (<= c 1.3e+41) (/ (- (hypot b (pow (* -4.0 (* (* (* c -4.0) a) (* c a))) 0.25)) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* -4.0 a)) (sqrt c))) b) (* a 2.0))))",
    "output_parens": 30,
    "avg_bits_err_input": 33.861446536139766,
    "avg_bits_err_output": 24.35255107520751,
    "avg_bits_err_improve": 9.508895460932255,
    "time": 40127.713623046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1915.195556640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (/ 1.0 x) (/ 1.0 (expm1 x)))",
    "output_parens": 4,
    "avg_bits_err_input": 40.144719079365316,
    "avg_bits_err_output": 0.029950564063671883,
    "avg_bits_err_improve": 40.11476851530164,
    "time": 7416.0576171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (/ (- x y) (hypot x y)) (+ x y)) (hypot x y))",
    "output_parens": 7,
    "avg_bits_err_input": 20.2896927656655,
    "avg_bits_err_output": 0.031675016016187885,
    "avg_bits_err_improve": 20.258017749649312,
    "time": 24351.1533203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6723747271657574,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6723747271657574,
    "time": 14645.310546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.039625,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 0.039375,
    "time": 4706.851806640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ b (+ b a))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.022615601562950727,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.012240601562950726,
    "time": 4772.119873046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (fma x x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.015625,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 0.0017499999999999998,
    "time": 4554.719482421875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.0005,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0,
    "time": 1535.043212890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ e (+ c b)) (+ d a))",
    "output_parens": 4,
    "avg_bits_err_input": 0.38537537656727777,
    "avg_bits_err_output": 0.240375,
    "avg_bits_err_improve": 0.14500037656727777,
    "time": 18200.59619140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.096737201696023,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 30.08973720169602,
    "time": 14799.5234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.78045917770206,
    "avg_bits_err_output": 0.2890943609377704,
    "avg_bits_err_improve": 24.49136481676429,
    "time": 22760.312255859375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (/ (- (* (pow (/ x (tan x)) 6.0) (pow (cos x) 6.0)) (* (/ (pow (/ x (tan x)) 2.0) (/ (tan x) x)) (pow (cos x) 9.0))) (* (pow (cos x) 6.0) (pow (/ x (tan x)) 3.0))) (fma (cos x) (+ (/ x (tan x)) (cos x)) (pow (/ x (tan x)) 2.0)))",
    "output_parens": 33,
    "avg_bits_err_input": 30.113208890120433,
    "avg_bits_err_output": 30.114717584775967,
    "avg_bits_err_improve": -0.0015086946555342706,
    "time": 56676.3056640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006698120312590144,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.006198120312590144,
    "time": 6550.693603515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 1e-10) (* (* n (/ 100.0 i)) (+ (pow (+ 1.0 (/ i n)) n) -1.0)) (* n (/ (+ (* 100.0 (pow (exp n) (log1p (/ i n)))) -100.0) i))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.41160314990244,
    "avg_bits_err_output": 10.490226796404343,
    "avg_bits_err_improve": 36.9213763534981,
    "time": 32587.572265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(/ (/ (fma b d (* a c)) (hypot c d)) (hypot c d))",
    "output_parens": 6,
    "avg_bits_err_input": 26.908789764300582,
    "avg_bits_err_output": 17.61927435455746,
    "avg_bits_err_improve": 9.289515409743121,
    "time": 23940.804443359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 26.270625993114052,
    "avg_bits_err_output": 0.5789558772721839,
    "avg_bits_err_improve": 25.69167011584187,
    "time": 33706.1650390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(- 1.0 (- ux (* ux maxCos)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.035625,
    "avg_bits_err_output": 0.02137394680449909,
    "avg_bits_err_improve": 0.014251053195500907,
    "time": 11780.071044921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* uy (* 2.0 PI))) (sqrt (+ (- 1.0 (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux)))) (* ux (fma ux maxCos (- 1.0 ux))))))",
    "output_parens": 14,
    "avg_bits_err_input": 13.462975043700663,
    "avg_bits_err_output": 11.227763447072409,
    "avg_bits_err_improve": 2.235211596628254,
    "time": 53326.147216796875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) 2.0) (/ (/ (pow (pow (fma ux maxCos (- 1.0 ux)) 4.0) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (* (pow (cbrt (- (fma ux maxCos 1.0) ux)) 8.0) (pow (cbrt (- (fma ux maxCos 1.0) ux)) 4.0)))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 67,
    "avg_bits_err_input": 13.507328469036898,
    "avg_bits_err_output": 11.992266931478149,
    "avg_bits_err_improve": 1.5150615375587488,
    "time": 119985.6513671875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- 1.0 ux) (* maxCos zi)) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (log (+ 1.0 (expm1 (* 2.0 (* PI uy)))))) xi) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 26,
    "avg_bits_err_input": 0.328177297868859,
    "avg_bits_err_output": 0.3327332735138095,
    "avg_bits_err_improve": -0.004555975644950472,
    "time": 62319.260009765625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.21051020992672873,
    "avg_bits_err_output": 0.20381392538812287,
    "avg_bits_err_improve": 0.006696284538605851,
    "time": 41641.6220703125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (+ (/ u1 (- 1.0 (* u1 u1))) (* u1 (/ u1 (- 1.0 (* u1 u1)))))) (sin (* 6.28318530718 u2)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.5418959333010298,
    "avg_bits_err_output": 0.5418387614531831,
    "avg_bits_err_improve": 5.717184784670426e-05,
    "time": 23643.15771484375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.31916516594789673,
    "avg_bits_err_output": 0.31543223185998137,
    "avg_bits_err_improve": 0.0037329340879153627,
    "time": 29229.45068359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (* s 0.5) (log (* (pow (+ (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0) -1.0) -2.0) (pow (/ 1.0 (+ 1.0 (/ 1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))))) -2.0))))",
    "output_parens": 33,
    "avg_bits_err_input": 0.3321276630050384,
    "avg_bits_err_output": 0.35000701468971057,
    "avg_bits_err_improve": -0.017879351684672196,
    "time": 34283.29052734375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.058452828504809935,
    "avg_bits_err_output": 0.04223443768491417,
    "avg_bits_err_improve": 0.01621839081989577,
    "time": 21192.883544921875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 0.5 (+ s (* s (cosh (/ (fabs x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.15271362191927917,
    "avg_bits_err_output": 0.13176011610823082,
    "avg_bits_err_improve": 0.02095350581104835,
    "time": 25323.08935546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6767807164693598,
    "avg_bits_err_output": 0.6767807164693598,
    "avg_bits_err_improve": 0,
    "time": 33333.729736328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (pow E (/ -2.0 v)))))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.167893458786857,
    "avg_bits_err_output": 0.1740373061884414,
    "avg_bits_err_improve": -0.0061438474015844124,
    "time": 25450.724365234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.6794854329685642,
    "avg_bits_err_output": 0.38395805371379016,
    "avg_bits_err_improve": 2.295527379254774,
    "time": 32628.291015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_O (/ sinTheta_i v)))) (* (/ 1.0 v) (* cosTheta_i (/ (/ 0.5 v) (sinh (/ 1.0 v))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4523562980781001,
    "avg_bits_err_output": 0.3539436510864087,
    "avg_bits_err_improve": 0.09841264699169144,
    "time": 44048.559814453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(exp (+ (+ (/ cosTheta_i (/ v cosTheta_O)) (- (/ -1.0 v) (/ (* sinTheta_i sinTheta_O) v))) (+ 0.6931 (log (/ 0.5 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.09521814623317311,
    "avg_bits_err_output": 0.09524222686791592,
    "avg_bits_err_improve": -2.4080634742809637e-05,
    "time": 39639.231201171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4769048987141803,
    "avg_bits_err_output": 0.4294659960858502,
    "avg_bits_err_improve": 0.047438902628330115,
    "time": 54439.148681640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (/ (- 0.25 u) 0.75)) (* s -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3117305707750366,
    "avg_bits_err_output": 0.5419981870030061,
    "avg_bits_err_improve": 0.7697323837720306,
    "time": 42975.621337890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.23917750314314,
    "avg_bits_err_output": 0.200875,
    "avg_bits_err_improve": 12.03830250314314,
    "time": 24038.65087890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (* (/ (/ 0.125 PI) s) (/ (exp (/ (- r) s)) r)) (* (/ 0.75 (* s (* PI 6.0))) (/ (pow (exp -1.0) (* r (/ 0.3333333333333333 s))) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12330796069031025,
    "avg_bits_err_output": 0.12024504338843499,
    "avg_bits_err_improve": 0.0030629173018752592,
    "time": 41049.732666015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9352968279169397,
    "avg_bits_err_output": 0.7659347706115235,
    "avg_bits_err_improve": 0.1693620573054162,
    "time": 42623.101318359375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(* (* (/ cosTheta (- (pow (* cosTheta (- 1.0 (* c c))) 2.0) (* (/ (fma cosTheta -2.0 1.0) PI) (pow (/ (+ c -1.0) (pow (exp cosTheta) cosTheta)) 2.0)))) (+ c -1.0)) (- (* (sqrt (/ (fma cosTheta -2.0 1.0) PI)) (/ (+ c -1.0) (- (exp (* cosTheta cosTheta))))) (* cosTheta (fma c (- c) 1.0))))",
    "output_parens": 30,
    "avg_bits_err_input": 0.6754996208738828,
    "avg_bits_err_output": 0.41765868739865586,
    "avg_bits_err_improve": 0.25784093347522696,
    "time": 28610.10498046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (cbrt (pow (log1p (- u1)) 3.0)))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.541353183554238,
    "avg_bits_err_output": 0.5279444009874916,
    "avg_bits_err_improve": 13.013408782566746,
    "time": 25391.654052734375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (+ 1.0 (+ (cos (* PI (* u2 2.0))) -1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.585095345600042,
    "avg_bits_err_output": 0.30388046572576777,
    "avg_bits_err_improve": 13.281214879874273,
    "time": 28612.38037109375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* alpha (- alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.020426091044692,
    "avg_bits_err_output": 0.3282218046888522,
    "avg_bits_err_improve": 13.69220428635584,
    "time": 24362.916015625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (log1p (- u0)) (- (* alphay (* alphay (/ alphax (fma alphay (* alphay (/ cos2phi alphax)) (* alphax sin2phi)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.522760797044796,
    "avg_bits_err_output": 0.49764815955812974,
    "avg_bits_err_improve": 12.025112637486666,
    "time": 28278.71875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -1e+174) (- (* PI l) (/ (tan (pow (/ (* PI l) (cbrt (pow (* PI l) 2.0))) 3.0)) (* F F))) (- (* PI l) (/ (/ (tan (* PI l)) F) F)))",
    "output_parens": 20,
    "avg_bits_err_input": 17.292468979213908,
    "avg_bits_err_output": 12.39317027008345,
    "avg_bits_err_improve": 4.899298709130457,
    "time": 32639.42822265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.216625203512582,
    "avg_bits_err_output": 0.15286560156295073,
    "avg_bits_err_improve": 0.06375960194963126,
    "time": 21962.676025390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ (* F (pow (fma x 2.0 (fma F F 2.0)) -0.5)) (sin B)) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.636061481042615,
    "avg_bits_err_output": 10.349249890681094,
    "avg_bits_err_improve": 3.2868115903615216,
    "time": 32161.86572265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (/ (log (tanh (* PI (* f 0.25)))) PI) 4.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.47469298687306,
    "avg_bits_err_output": 0.682153260637499,
    "avg_bits_err_improve": 60.79253972623556,
    "time": 49110.4228515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (or (<= t -9.4e+153) (not (<= t -1.25e-74))) (/ (* t (sqrt 2.0)) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ 1.0 x) (+ x -1.0)))))) (/ (* t (sqrt 2.0)) (/ (- (* (/ (* 2.0 (* t t)) (+ x -1.0)) (+ 1.0 x)) (* l (+ l (* l (/ (- -1.0 x) (+ x -1.0)))))) (sqrt (- (* (/ (* 2.0 (* t t)) (+ x -1.0)) (+ 1.0 x)) (* l (+ l (* l (/ (- -1.0 x) (+ x -1.0))))))))))",
    "output_parens": 48,
    "avg_bits_err_input": 43.17700125312591,
    "avg_bits_err_output": 19.543144135956982,
    "avg_bits_err_improve": 23.633857117168926,
    "time": 47273.427978515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (sin ky) (/ (sin th) (hypot (sin ky) (sin kx))))",
    "output_parens": 7,
    "avg_bits_err_input": 4.067728561313607,
    "avg_bits_err_output": 0.2696372187554085,
    "avg_bits_err_improve": 3.7980913425581986,
    "time": 27391.790283203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.96675,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 0.96,
    "time": 16345.8486328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ 2.0 (* (/ l t) (sqrt 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 9.789597222722069,
    "avg_bits_err_output": 1.0508549748972793,
    "avg_bits_err_improve": 8.73874224782479,
    "time": 25808.48486328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U)))) 0.0) (sqrt (* (* 2.0 n) (+ (* U (* (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)))) (* U t)))) (if (<= (* (* (* 2.0 n) U) (+ (+ t (* (/ (* l l) Om) -2.0)) (* (* n (pow (/ l Om) 2.0)) (- U* U)))) INFINITY) (sqrt (+ (* (* (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0))) (* 2.0 (* n U))) (* t (* 2.0 (* n U))))) (sqrt (+ (* t (* 2.0 (* n U))) (* 2.0 (* (fma l -2.0 (* (/ l Om) (* n (- U* U)))) (* U (* n (/ l Om)))))))))",
    "output_parens": 73,
    "avg_bits_err_input": 34.475201905767605,
    "avg_bits_err_output": 25.557532309376867,
    "avg_bits_err_improve": 8.917669596390738,
    "time": 46675.40087890625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ (/ (/ l (sin k)) k) (* (* (/ k l) (tan k)) (* t 0.5)))",
    "output_parens": 9,
    "avg_bits_err_input": 47.61331606667237,
    "avg_bits_err_output": 0.3181619280736338,
    "avg_bits_err_improve": 47.29515413859873,
    "time": 104840.046875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -5.2e-82) (/ (* (/ (/ l t) (+ 2.0 (pow (/ k t) 2.0))) (/ (/ l t) (* (tan k) 0.5))) (* t (sin k))) (if (<= t 1.65e-71) (* (/ l (+ (pow (/ (* t k) t) 2.0) (* t (* t 2.0)))) (/ (/ l t) (* (* (tan k) 0.5) (sin k)))) (/ (* (/ l t) (/ (/ 2.0 (* t (+ 2.0 (pow (/ k t) 2.0)))) (sin k))) (* (tan k) (/ t l)))))",
    "output_parens": 44,
    "avg_bits_err_input": 32.67543674537656,
    "avg_bits_err_output": 9.411046054375719,
    "avg_bits_err_improve": 23.26439069100084,
    "time": 79197.32055664062,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (* (sqrt 0.5) (cos th)) (+ (* a2 a2) (* a1 a1)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.49869022814465336,
    "avg_bits_err_output": 0.47439079220832475,
    "avg_bits_err_improve": 0.024299435936328606,
    "time": 30197.2822265625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* k (pow PI (+ k -1.0))) -0.5) (pow (* 2.0 n) (* (+ k -1.0) -0.5)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.49524191574408905,
    "avg_bits_err_output": 0.49706580567528935,
    "avg_bits_err_improve": -0.0018238899312003065,
    "time": 27935.5029296875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* J (* 2.0 (* (sinh l) (cos (* K 0.5))))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.094342382592135,
    "avg_bits_err_output": 0.08054492500144232,
    "avg_bits_err_improve": 17.01379745759069,
    "time": 25645.75,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 0.995) (/ (+ (* (pow (cbrt (cos (fma (+ m n) (* K 0.5) 1.0))) 3.0) (cos (+ M 1.0))) (* (sin (fma (+ m n) (* K 0.5) 1.0)) (sin (+ M 1.0)))) (exp (+ (* (- (* (+ m n) 0.5) M) (- (* (+ m n) 0.5) M)) (- l (fabs (- m n)))))) (* (cos (- (/ K (/ (log1p (expm1 (* (fma m m (* n (+ m n))) (/ 2.0 (+ m n))))) (fma m m (fma n n (* m n))))) M)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l)))))",
    "output_parens": 72,
    "avg_bits_err_input": 14.829365840309114,
    "avg_bits_err_output": 13.06589965105723,
    "avg_bits_err_improve": 1.7634661892518846,
    "time": 37381.11181640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.953490601562955,
    "avg_bits_err_output": 8.384615601562949,
    "avg_bits_err_improve": 9.568875000000006,
    "time": 35551.925048828125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= M -1.52e+147) (* w0 (sqrt (+ 1.0 (* M (/ (* (* h (/ D d)) (* (/ D d) (* M -0.25))) l))))) (if (<= M -4e-144) (* w0 (sqrt (+ 1.0 (/ (* h (* M (* D (/ -0.5 d)))) (* l (* (/ 2.0 D) (/ d M))))))) (* w0 (sqrt (- 1.0 (/ (/ (* M D) d) (/ (* l (/ (/ d (* M D)) 0.25)) h)))))))",
    "output_parens": 38,
    "avg_bits_err_input": 14.144391989015354,
    "avg_bits_err_output": 8.497692470031332,
    "avg_bits_err_improve": 5.646699518984022,
    "time": 45515.953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e-161) (/ (* (sqrt (- A)) c0) (* (sqrt (- V)) (sqrt l))) (if (<= (* V l) 0.0) (/ (/ A (* V (sqrt (/ A V)))) (/ (sqrt l) c0)) (* c0 (/ (sqrt A) (sqrt (* V l))))))",
    "output_parens": 26,
    "avg_bits_err_input": 19.57038228438656,
    "avg_bits_err_output": 7.858971239087451,
    "avg_bits_err_improve": 11.71141104529911,
    "time": 41242.318603515625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) (- INFINITY)) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ c0 (* w h)) (* (/ d D) (/ d D)) M)) (sqrt (- (* (/ c0 (* w h)) (* (/ d D) (/ d D))) M)) (* (/ c0 (* w h)) (* (/ d D) (/ d D))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 2e+63) (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (+ (* (/ d (/ D c0)) (/ (/ d (* w h)) D)) (* (sqrt (fma (/ d D) (* (/ c0 (* w h)) (/ d D)) M)) (sqrt (- (* (/ d (/ D c0)) (/ (/ d (* w h)) D)) M))))) (* c0 (* (/ 0.5 w) (* M (/ M (- (* (/ (/ (* c0 (/ d D)) w) D) (/ d h)) (sqrt (- (pow (* (/ d h) (/ (/ d (/ (* w D) c0)) D)) 2.0) (* M M)))))))))))",
    "output_parens": 184,
    "avg_bits_err_input": 59.65366311255262,
    "avg_bits_err_output": 31.907751257165344,
    "avg_bits_err_improve": 27.745911855387277,
    "time": 100855.30151367188,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) -4e-285) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (* (/ (/ M (/ d D)) (/ l 0.25)) (* h (/ M (/ d (* 0.5 D))))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 0.0) (* (/ (fabs d) (sqrt (* h l))) (+ 1.0 (* (* (/ h l) (pow (* M (/ (* 0.5 D) d)) 2.0)) -0.5))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 5e+257) (* (pow (/ h d) -0.5) (* (sqrt (/ d l)) (+ 1.0 (* -0.5 (* (/ h l) (pow (* (/ M 2.0) (/ D d)) 2.0)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) INFINITY) (* (/ (fabs d) (sqrt (* h l))) (+ 1.0 (* (* (/ h l) (pow (* M (/ (* 0.5 D) d)) 2.0)) -0.5))) (* (sqrt (/ d h)) (* (/ (sqrt d) (sqrt l)) (+ 1.0 (* 0.5 (* (* M (/ (* h (* M (/ D d))) l)) (* (/ D d) -0.25))))))))))",
    "output_parens": 137,
    "avg_bits_err_input": 26.1102377170222,
    "avg_bits_err_output": 14.29088310091932,
    "avg_bits_err_improve": 11.819354616102881,
    "time": 92422.00390625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (/ (- 1.0 (pow (+ 0.5 (sqrt (/ 0.25 (fma x x 1.0)))) 4.0)) (+ 1.0 (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 2.0))) (+ (/ 0.5 (hypot 1.0 x)) 1.5)) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 22,
    "avg_bits_err_input": 15.198639124086169,
    "avg_bits_err_output": 14.713174757103827,
    "avg_bits_err_improve": 0.48546436698234174,
    "time": 41792.34814453125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ -1.3333333333333333 (fma v v -1.0)) PI) (sqrt (fma v (* v -6.0) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.9842712406251803,
    "avg_bits_err_output": 0.01127124062518029,
    "avg_bits_err_improve": 0.9730000000000001,
    "time": 10566.083984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(* (+ (* v (* -5.0 v)) 1.0) (/ (/ (/ 1.0 PI) (- 1.0 (* v v))) (* (sqrt (fma v (* v -6.0) 2.0)) t)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.4232660806086218,
    "avg_bits_err_output": 0.2679718046888521,
    "avg_bits_err_improve": 0.1552942759197697,
    "time": 19604.87744140625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (* (pow (+ 2.0 (* (* v v) -6.0)) 1.5) (/ 1.0 (+ 2.0 (* (* v v) -6.0)))) (- 1.0 (* v v))) 4.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.011240601562950724,
    "avg_bits_err_output": 0.014438721875540869,
    "avg_bits_err_improve": -0.0031981203125901452,
    "time": 22037.9501953125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(- PI (acos (/ (+ (* v (* v -5.0)) 1.0) (- 1.0 (* v v)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5689749779216494,
    "avg_bits_err_output": 0.5689004940014304,
    "avg_bits_err_improve": 7.448392021902617e-05,
    "time": 39929.89306640625,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (- (/ -1.0 a) (/ (+ k 10.0) (/ a k))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.057504563148923,
    "avg_bits_err_output": 0.2542882402641206,
    "avg_bits_err_improve": 1.8032163228848022,
    "time": 21885.8203125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (pow (cbrt (pow (sqrt (exp (/ (+ (- mu (- Ec Vef)) EDonor) KbT))) 2.0)) 3.0))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.024045067776892925,
    "avg_bits_err_output": 0.03255016480637163,
    "avg_bits_err_improve": -0.008505097029478704,
    "time": 10071.34326171875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18088233125324507,
    "avg_bits_err_output": 0.013773684376262025,
    "avg_bits_err_improve": 0.16710864687698304,
    "time": 12525.29736328125,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1909003037584943,
    "avg_bits_err_output": 0.02659129633042139,
    "avg_bits_err_improve": 0.1643090074280729,
    "time": 17079.189208984375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18768732722117645,
    "avg_bits_err_output": 0.025701236593111604,
    "avg_bits_err_improve": 0.16198609062806485,
    "time": 12238.708740234375,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (pow (pow (+ 1.0 (/ x (hypot x (* p 2.0)))) 3.0) 0.3333333333333333)))",
    "output_parens": 8,
    "avg_bits_err_input": 13.275076765494285,
    "avg_bits_err_output": 13.268961452043115,
    "avg_bits_err_improve": 0.006115313451170223,
    "time": 17077.71435546875,
    "seed": 23,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.51736058791459,
    "avg_bits_err_output": 0.01475,
    "avg_bits_err_improve": 40.50261058791459,
    "time": 4578.200439453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -3.9e-140) (/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (fma (pow (tan x) 2.0) (/ 1.0 (+ x (tan x))) (* x (/ (- x) (+ x (tan x)))))) (if (<= x 1.45e-154) (/ (- (/ (pow (sin x) 2.0) (+ x (sin x))) (/ x (/ (+ x (sin x)) x))) (/ (- x (/ (* x x) (tan x))) (/ x (tan x)))) (/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (- (exp (log (/ (pow (tan x) 2.0) (+ x (tan x))))) (/ x (/ (+ x (tan x)) x))))))",
    "output_parens": 61,
    "avg_bits_err_input": 30.93712721710075,
    "avg_bits_err_output": 14.014613152563912,
    "avg_bits_err_improve": 16.922514064536834,
    "time": 42278.922119140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -2.95e-123) (/ (- (- (/ b_2 (/ (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ (+ (* a c) (* (* a c) 0.0)) (sqrt (- (* b_2 b_2) (* a c))))) b_2) a) (if (<= b_2 2e+144) (/ (- c) (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))) (/ (- c) (+ b_2 (hypot b_2 (pow (pow (* a c) 2.0) 0.25))))))",
    "output_parens": 36,
    "avg_bits_err_input": 34.61760259231339,
    "avg_bits_err_output": 15.851677070178269,
    "avg_bits_err_improve": 18.76592552213512,
    "time": 27414.61376953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -2e+154) (/ (- c) (- b_2 (hypot b_2 (pow (pow (* c a) 2.0) 0.25)))) (if (<= b_2 1.2e-308) (/ c (- (sqrt (- (* b_2 b_2) (* c a))) b_2)) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a)))",
    "output_parens": 24,
    "avg_bits_err_input": 35.00094369766507,
    "avg_bits_err_output": 16.465282962853394,
    "avg_bits_err_improve": 18.535660734811678,
    "time": 26095.43017578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (* (/ (sin x) x) (tan (/ x 2.0))) x)",
    "output_parens": 6,
    "avg_bits_err_input": 31.632038646688006,
    "avg_bits_err_output": 0.12078345938058901,
    "avg_bits_err_improve": 31.511255187307416,
    "time": 23312.5283203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 33.07206991980063,
    "avg_bits_err_output": 32.77264318141224,
    "avg_bits_err_improve": 0.29942673838839085,
    "time": 40504.39208984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.804529152916196,
    "avg_bits_err_output": 0.01525,
    "avg_bits_err_improve": 29.789279152916194,
    "time": 12066.38330078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (* (fma x -1.0 -1.0) (pow (+ x 1.0) -2.0)) (/ 1.0 x))",
    "output_parens": 6,
    "avg_bits_err_input": 14.2273226190291,
    "avg_bits_err_output": 0.08071936093777045,
    "avg_bits_err_improve": 14.146603258091329,
    "time": 13518.162841796875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -1.15e-16) (fma (sin x) (- (sin eps)) (* (cos x) (+ (cos eps) -1.0))) (if (<= x 1.95e-54) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (fma (+ (cos eps) -1.0) (cos x) (* (sin eps) (- (sin x))))))",
    "output_parens": 28,
    "avg_bits_err_input": 39.638216277975815,
    "avg_bits_err_output": 0.6109523619628522,
    "avg_bits_err_improve": 39.02726391601296,
    "time": 32460.467041015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (fma (/ (/ x (cbrt x)) (cbrt x)) (+ (cbrt x) (cbrt (+ 1.0 x))) (pow (cbrt (+ 1.0 x)) 2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 30.188358436767803,
    "avg_bits_err_output": 0.22957519666298043,
    "avg_bits_err_improve": 29.95878324010482,
    "time": 36383.573486328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.579054011345196,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 30.578804011345195,
    "time": 10269.080078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -1e-264) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (* (/ 0.5 (+ b (hypot b (sqrt (* a (* c -4.0)))))) (/ (fma a (* c -4.0) 0.0) a)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 1e+273) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 83,
    "avg_bits_err_input": 34.93445466301425,
    "avg_bits_err_output": 21.50740835430238,
    "avg_bits_err_improve": 13.42704630871187,
    "time": 39553.138427734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -1.16e-86) (* (/ (/ (* c (* a -4.0)) a) (- b (hypot (sqrt (* a (* c -4.0))) b))) 0.5) (if (<= b 4e+149) (* -0.5 (/ (+ b (sqrt (fma b b (* a (* c -4.0))))) a)) (* -0.5 (/ (+ b (hypot (pow (pow (* a (* c -4.0)) 2.0) 0.25) b)) a))))",
    "output_parens": 29,
    "avg_bits_err_input": 34.44126964576185,
    "avg_bits_err_output": 22.065455957116093,
    "avg_bits_err_improve": 12.375813688645756,
    "time": 35372.05712890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.38891185717953,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 61.38791185717953,
    "time": 14548.875244140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(fma n (- (log1p n) (log n)) (/ (* (/ 1.0 (+ -1.0 (pow (log1p n) 3.0))) (- (pow (log1p n) 4.0) (pow (+ (log1p n) 1.0) 2.0))) (- (+ (log1p n) 1.0) (log1p n))))",
    "output_parens": 20,
    "avg_bits_err_input": 62.99888327154557,
    "avg_bits_err_output": 35.94726754682943,
    "avg_bits_err_improve": 27.051615724716143,
    "time": 45504.382080078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(+ (log1p (* eps (- eps))) (* -2.0 (log1p eps)))",
    "output_parens": 6,
    "avg_bits_err_input": 58.35341066314982,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 58.34691066314982,
    "time": 22899.749755859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(cbrt (fma (pow (+ (/ 1.0 x) (/ -1.0 (tan x))) 2.0) (/ 1.0 x) (/ (pow (+ (/ 1.0 x) (/ -1.0 (tan x))) 2.0) (- (tan x)))))",
    "output_parens": 16,
    "avg_bits_err_input": 59.79855468872009,
    "avg_bits_err_output": 59.79641589036831,
    "avg_bits_err_improve": 0.0021387983517797693,
    "time": 50778.26806640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ eps (* (/ (expm1 (* eps a)) (expm1 (* eps (+ a b)))) (expm1 (* eps b))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.394072675873275,
    "avg_bits_err_output": 29.020377163814842,
    "avg_bits_err_improve": 31.373695512058433,
    "time": 34040.952392578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ 1.0 (- (expm1 (- x))))",
    "output_parens": 4,
    "avg_bits_err_input": 40.941937859467174,
    "avg_bits_err_output": 0.012,
    "avg_bits_err_improve": 40.929937859467174,
    "time": 6984.3876953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.52065401188685,
    "avg_bits_err_output": 0.001,
    "avg_bits_err_improve": 58.51965401188685,
    "time": 5370.51318359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 28.826777816347242,
    "avg_bits_err_output": 0.017604374069748012,
    "avg_bits_err_improve": 28.809173442277494,
    "time": 3226.208740234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (+ (* (exp x) -2.0) 3.0) (/ -1.0 (exp x))) (fma -2.0 (exp x) -1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 29.476469818524706,
    "avg_bits_err_output": 29.243961026363284,
    "avg_bits_err_improve": 0.23250879216142195,
    "time": 46890.5078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ (fma x (/ (- x) (+ x 1.0)) (+ x -1.0)) (* x 0.5)) (- 1.0 x))",
    "output_parens": 9,
    "avg_bits_err_input": 9.453149699537779,
    "avg_bits_err_output": 9.434384103629553,
    "avg_bits_err_improve": 0.018765595908226018,
    "time": 68510.29931640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (+ (/ (tan eps) (tan x)) (* (tan eps) (tan x))) (/ (tan x) (- 1.0 (* (tan eps) (tan x)))))",
    "output_parens": 14,
    "avg_bits_err_input": 36.94908442066489,
    "avg_bits_err_output": 0.345254298741353,
    "avg_bits_err_improve": 36.60383012192354,
    "time": 37920.310302734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 29.873995510961144,
    "avg_bits_err_output": 0.13490112812734378,
    "avg_bits_err_improve": 29.7390943828338,
    "time": 22570.549560546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (+ (cos eps) -1.0) (* (cos x) (sin eps)))",
    "output_parens": 7,
    "avg_bits_err_input": 36.83406834362443,
    "avg_bits_err_output": 0.36210117991268304,
    "avg_bits_err_improve": 36.471967163711746,
    "time": 30768.44970703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.60310164925825,
    "avg_bits_err_output": 0.11393872187554088,
    "avg_bits_err_improve": 19.489162927382708,
    "time": 24988.09765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (+ (+ 1.0 N) (* N N)))",
    "output_parens": 4,
    "avg_bits_err_input": 15.286482994686681,
    "avg_bits_err_output": 0.3600196580728256,
    "avg_bits_err_improve": 14.926463336613855,
    "time": 21119.46337890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.306553821776255,
    "avg_bits_err_output": 1.2552371300526501,
    "avg_bits_err_improve": 28.051316691723606,
    "time": 27581.552978515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(+ (/ m (/ v (- 1.0 m))) (- -1.0 (* m (fma m (/ (- 1.0 m) v) -1.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.07549304531403245,
    "avg_bits_err_output": 0.07834396467928965,
    "avg_bits_err_improve": -0.002850919365257207,
    "time": 38337.047119140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (- (* a b)) (/ (/ -1.0 (- b)) a))",
    "output_parens": 6,
    "avg_bits_err_input": 16.49007435411809,
    "avg_bits_err_output": 0.26895094821454313,
    "avg_bits_err_improve": 16.221123405903548,
    "time": 18194.65869140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (/ 2.0 (/ 2.0 (+ (* (cos (* (fma angle (* PI -0.005555555555555556) (fma angle (* PI -0.005555555555555556) 2.0)) 0.5)) (cos (* 0.5 (fma angle (* PI 0.005555555555555556) (fma angle (* PI -0.005555555555555556) 2.0))))) (* (cbrt (pow (sin (fma angle (* PI -0.005555555555555556) 1.0)) 3.0)) (sin 1.0)))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 31,
    "avg_bits_err_input": 20.819323155759186,
    "avg_bits_err_output": 20.83770138524475,
    "avg_bits_err_improve": -0.018378229485563224,
    "time": 49916.046142578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* (* PI 0.011111111111111112) angle)) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 31.789190770607956,
    "avg_bits_err_output": 21.878168056230795,
    "avg_bits_err_improve": 9.911022714377161,
    "time": 44081.76025390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (* PI (* angle 0.005555555555555556)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 20.727941041465197,
    "avg_bits_err_output": 20.727033051339195,
    "avg_bits_err_improve": 0.0009079901260022893,
    "time": 46766.693359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (* m (/ m (/ v (- 1.0 m)))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.1719505640636719,
    "avg_bits_err_output": 0.16845996250072118,
    "avg_bits_err_improve": 0.0034906015629507237,
    "time": 17774.825439453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (+ 1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3035934497084736,
    "avg_bits_err_output": 0.30416657002106373,
    "avg_bits_err_improve": -0.0005731203125901585,
    "time": 29461.001220703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1374174812503606,
    "avg_bits_err_output": 0.1374174812503606,
    "avg_bits_err_improve": 0,
    "time": 23480.585205078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda1) (cos lambda2))) (* (cos phi2) (cos phi1)) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 15.907197124315086,
    "avg_bits_err_output": 3.4133187178914786,
    "avg_bits_err_improve": 12.493878406423608,
    "time": 40949.61669921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fma c (* a -4.0) 0.0) (+ b (sqrt (fma c (* a -4.0) (* b b))))) (/ 0.5 a))",
    "output_parens": 10,
    "avg_bits_err_input": 52.231235217471315,
    "avg_bits_err_output": 0.45528214533134176,
    "avg_bits_err_improve": 51.77595307213998,
    "time": 45655.66650390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (fma (pow b 4.5) (pow b 4.5) (- (sqrt (pow (fma b b (* (* a c) -4.0)) 9.0))))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (pow b 6.0) (+ (pow (fma b b (* a (* c -4.0))) 3.0) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0))))) (/ -0.5 a))",
    "output_parens": 36,
    "avg_bits_err_input": 28.56767270190151,
    "avg_bits_err_output": 26.58752834193983,
    "avg_bits_err_improve": 1.980144359961681,
    "time": 79944.3330078125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (+ (- (* b b) (* b b)) (* a (* c 4.0))) (* (/ a -0.5) (+ b (sqrt (fma (* a c) -4.0 (* b b))))))",
    "output_parens": 14,
    "avg_bits_err_input": 43.57419296955966,
    "avg_bits_err_output": 0.41236655821008844,
    "avg_bits_err_improve": 43.16182641134957,
    "time": 53580.167724609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-264) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (* (/ 0.5 (+ b (hypot b (sqrt (* a (* c -4.0)))))) (/ (fma a (* c -4.0) 0.0) a)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+273) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 83,
    "avg_bits_err_input": 34.93790387716921,
    "avg_bits_err_output": 21.51709136839318,
    "avg_bits_err_improve": 13.42081250877603,
    "time": 43978.646728515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (* (cos phi2) (/ (+ (pow (* (cos lambda2) (cos lambda1)) 3.0) (pow (* (sin lambda1) (sin lambda2)) 3.0)) (fma (* (cos lambda2) (cos lambda1)) (fma (cos lambda2) (cos lambda1) (* (sin lambda1) (- (sin lambda2)))) (pow (* (sin lambda1) (sin lambda2)) 2.0)))))))",
    "output_parens": 40,
    "avg_bits_err_input": 0.8057784476292126,
    "avg_bits_err_output": 0.23298286589257816,
    "avg_bits_err_improve": 0.5727955817366344,
    "time": 36894.802978515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(expm1 (- (log 2.0) (log1p (exp (* x -2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 29.634759879073194,
    "avg_bits_err_output": 29.60428444802929,
    "avg_bits_err_improve": 0.03047543104390371,
    "time": 26972.627685546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(expm1 (log1p (tanh x)))",
    "output_parens": 3,
    "avg_bits_err_input": 58.27129468449465,
    "avg_bits_err_output": 0.014719360937770435,
    "avg_bits_err_improve": 58.25657532355688,
    "time": 18146.50537109375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 57.984881001746615,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 57.97813100174662,
    "time": 18088.78369140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(expm1 (log1p (/ 1.0 (cosh x))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.008042481250360577,
    "avg_bits_err_output": 0.009158082813311302,
    "avg_bits_err_improve": -0.001115601562950725,
    "time": 8143.67822265625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (/ 1.0 (* (pow (+ x 1.0) -0.5) (pow (+ x -1.0) -0.5)))))",
    "output_parens": 8,
    "avg_bits_err_input": 32.009,
    "avg_bits_err_output": 0.067,
    "avg_bits_err_improve": 31.942,
    "time": 13356.19384765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (* (log1p x) 2.0) (log1p (* x (- x)))))",
    "output_parens": 7,
    "avg_bits_err_input": 58.344897269166175,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 58.33839726916617,
    "time": 29358.901123046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(- (log (/ x (+ 1.0 (sqrt (- 1.0 (* x x)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.050896240625180285,
    "avg_bits_err_output": 0.002271240625180289,
    "avg_bits_err_improve": 0.048624999999999995,
    "time": 6275.154052734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma ew (* (sin t) (cos (atan (/ (/ eh (tan t)) ew)))) (* (cos t) (* eh (sin (atan (/ (/ eh (tan t)) ew)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12784436093777043,
    "avg_bits_err_output": 0.12707312031259013,
    "avg_bits_err_improve": 0.0007712406251803028,
    "time": 41737.1328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* eh (sin t)) (sin (atan (/ (* eh (- (tan t))) ew)))) (* (/ ew (hypot 1.0 (* (/ eh ew) (tan t)))) (cos t))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12421936093777045,
    "avg_bits_err_output": 0.1301186225132277,
    "avg_bits_err_improve": -0.005899261575457254,
    "time": 42213.050048828125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (fma (- lambda1 lambda2) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))) (* (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))) (- lambda2 lambda1))) (- phi1 phi2)))",
    "output_parens": 17,
    "avg_bits_err_input": 39.155730002212515,
    "avg_bits_err_output": 0.12479651979680932,
    "avg_bits_err_improve": 39.030933482415705,
    "time": 34190.48681640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(pow (/ a (- a (* b (/ b a)))) -0.5)",
    "output_parens": 5,
    "avg_bits_err_input": 14.54596624557503,
    "avg_bits_err_output": 0.011323120312590145,
    "avg_bits_err_improve": 14.53464312526244,
    "time": 10087.849365234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (expm1 (log1p (* (sin delta) (sin theta)))) (cos phi1)) (- (cos delta) (* (sin phi1) (fma (cos delta) (sin phi1) (* (* (sin delta) (cos phi1)) (cos theta)))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.15138822062361698,
    "avg_bits_err_output": 0.1511057186316057,
    "avg_bits_err_improve": 0.00028250199201126924,
    "time": 55788.583984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* -3.0 a)))) b) (* a 3.0)) -5e-33) (/ (* a (* 0.3333333333333333 (- (sqrt (fma b b (* a (* c -3.0)))) b))) (* a a)) (/ (* a (+ b (sqrt (fma b b (* a (* c -3.0)))))) (* a (* -3.0 a))))",
    "output_parens": 28,
    "avg_bits_err_input": 52.30746546370878,
    "avg_bits_err_output": 50.29283783088145,
    "avg_bits_err_improve": 2.0146276328273274,
    "time": 49763.0869140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* (* a -3.0) c) (+ b (sqrt (+ (* b b) (* a (* -3.0 c)))))) (* a 3.0))",
    "output_parens": 11,
    "avg_bits_err_input": 28.70276479473836,
    "avg_bits_err_output": 0.455151861570697,
    "avg_bits_err_improve": 28.247612933167662,
    "time": 37685.737548828125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 43.607102224862125,
    "avg_bits_err_output": 0.40419212227376056,
    "avg_bits_err_improve": 43.20291010258836,
    "time": 42072.281005859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b 5e-190) (/ (fma (hypot b (sqrt (fabs (* a (* c -3.0))))) 0.3333333333333333 (* b -0.3333333333333333)) a) (/ (/ (* -3.0 (* a c)) (+ b (sqrt (fma (* a c) -3.0 (* b b))))) (* a 3.0)))",
    "output_parens": 20,
    "avg_bits_err_input": 34.976433453952566,
    "avg_bits_err_output": 17.68176285763001,
    "avg_bits_err_improve": 17.294670596322558,
    "time": 46427.959228515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (sin lambda1) (cos lambda2) (* (cos lambda1) (sin (- lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (fma (cos lambda2) (cos lambda1) (* (sin lambda1) (sin lambda2))))))",
    "output_parens": 24,
    "avg_bits_err_input": 13.031895371367533,
    "avg_bits_err_output": 0.183542083292207,
    "avg_bits_err_improve": 12.848353288075327,
    "time": 48653.1328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (- 1.0 (+ x (* (fma x -1.0 -1.0) (/ (+ 1.0 x) x)))) (* (/ (+ 1.0 x) x) (- 1.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.449825090040896,
    "avg_bits_err_output": 25.494026723515727,
    "avg_bits_err_improve": 3.955798366525169,
    "time": 39281.92529296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01025,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 0,
    "time": 14740.15478515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (pow (+ x -1.0) -2.0) (/ (/ (- -1.0 x) (+ x -1.0)) 2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 14.314104877727425,
    "avg_bits_err_output": 0.026993045314032467,
    "avg_bits_err_improve": 14.287111832413393,
    "time": 34084.342041015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) (- INFINITY)) (/ (* (sqrt (* (+ C (- A (hypot B (- A C)))) (* 2.0 F))) (sqrt (fma C (* A -4.0) (* B B)))) (- (* 4.0 (* A C)) (* B B))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (/ (sqrt (* 2.0 (* (+ A (- C (hypot B (- A C)))) (* F (fma A (* C -4.0) (* B B)))))) (- (* 4.0 (* A C)) (* B B))) (/ (- (sqrt (* 2.0 (* F (+ A (- C (hypot B (- A C)))))))) (hypot B (sqrt (* A (* C -4.0)))))))",
    "output_parens": 93,
    "avg_bits_err_input": 52.13415897560496,
    "avg_bits_err_output": 39.914218872719445,
    "avg_bits_err_improve": 12.219940102885516,
    "time": 51383.11376953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(/ (atan (/ (- (- C A) (hypot (- C A) B)) B)) (* PI 0.005555555555555556))",
    "output_parens": 8,
    "avg_bits_err_input": 29.800572726157856,
    "avg_bits_err_output": 14.102185197360251,
    "avg_bits_err_improve": 15.698387528797605,
    "time": 34428.13720703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (/ (* (sqrt (* 2.0 (* F (+ C (+ A (hypot B (- A C))))))) (- (sqrt (fma B B (* A (* C -4.0)))))) (fma C (* A -4.0) (* B B))) (/ (* (sqrt (+ C (+ A (hypot B (- A C))))) (- (sqrt (+ (* B (* B (* 2.0 F))) (* F (* C (* A -8.0))))))) (+ (* B B) (* -4.0 (* A C)))))",
    "output_parens": 60,
    "avg_bits_err_input": 52.04447761826772,
    "avg_bits_err_output": 42.971099851586544,
    "avg_bits_err_improve": 9.073377766681176,
    "time": 47609.78369140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ g (* (/ g (cbrt g)) (cbrt (* a 2.0))))",
    "output_parens": 6,
    "avg_bits_err_input": 15.521582783470016,
    "avg_bits_err_output": 0.9134349558949904,
    "avg_bits_err_improve": 14.608147827575026,
    "time": 23077.170166015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -6.4e-195) (+ (/ (cbrt (- (hypot g h) g)) (cbrt (* a 2.0))) (cbrt (* (/ -0.5 a) (+ g (hypot g h))))) (+ (/ (cbrt 0.5) (cbrt (/ a (- (hypot g h) g)))) (/ (cbrt (+ g (hypot g h))) (cbrt (* a -2.0)))))",
    "output_parens": 27,
    "avg_bits_err_input": 35.659372981148096,
    "avg_bits_err_output": 3.317892631084793,
    "avg_bits_err_improve": 32.3414803500633,
    "time": 39341.558349609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.989068985944983,
    "avg_bits_err_output": 0.03700977500432695,
    "avg_bits_err_improve": 0.952059210940656,
    "time": 20383.44970703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- (log1p (exp (- b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.6440212406251803,
    "avg_bits_err_output": 0.00836891058937087,
    "avg_bits_err_improve": 0.6356523300358095,
    "time": 14184.7431640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (/ a2 b1) (/ b2 a1)) (if (<= (/ (* a1 a2) (* b1 b2)) -2e-319) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e-294) (/ a2 (* b2 (/ b1 a1))) (if (<= (/ (* a1 a2) (* b1 b2)) 5e+296) (/ (* a1 a2) (* b1 b2)) (* a2 (/ (/ a1 b2) b1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.476061622241211,
    "avg_bits_err_output": 2.988214730990921,
    "avg_bits_err_improve": 8.48784689125029,
    "time": 11906.044677734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5304528334220815,
    "avg_bits_err_output": 0.472,
    "avg_bits_err_improve": 0.05845283342208152,
    "time": 10039.322021484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -5.0) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.16835519210999,
    "avg_bits_err_output": 0.019823120312590144,
    "avg_bits_err_improve": 53.148532071797405,
    "time": 17584.258544921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.657870842628769,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.657870842628769,
    "time": 1961.073486328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ 1.0 (sqrt (/ (+ 1.0 x) (- 1.0 x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.015375,
    "avg_bits_err_output": 0.01275,
    "avg_bits_err_improve": 0.0026250000000000006,
    "time": 10209.453857421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1313.950927734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (/ 2.0 (* r r)) (- -1.5 (* (* (* r w) (* r w)) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 13.311068669748659,
    "avg_bits_err_output": 0.3263402265701624,
    "avg_bits_err_improve": 12.984728443178497,
    "time": 33485.099365234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (fma (/ 4.0 (fma x1 x1 1.0)) (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 37,
    "avg_bits_err_input": 0.5085803715304767,
    "avg_bits_err_output": 0.30864400979533413,
    "avg_bits_err_improve": 0.19993636173514262,
    "time": 96189.33715820312,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(if (<= (/ (* t1 (- v)) (* (+ t1 u) (+ t1 u))) 0.0) (* (/ (- t1) (+ t1 u)) (/ v (+ t1 u))) (if (<= (/ (* t1 (- v)) (* (+ t1 u) (+ t1 u))) 5e+304) (/ (* t1 (- v)) (* (+ t1 u) (+ t1 u))) (/ (/ v (+ t1 u)) (- -1.0 (/ u t1)))))",
    "output_parens": 33,
    "avg_bits_err_input": 18.47505220014807,
    "avg_bits_err_output": 1.1490798808963165,
    "avg_bits_err_improve": 17.325972319251754,
    "time": 17902.662353515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (+ (/ (* x x) -7.751569170074954) 0.954929658551372))",
    "output_parens": 4,
    "avg_bits_err_input": 0.2332692038992627,
    "avg_bits_err_output": 0.19942236875252398,
    "avg_bits_err_improve": 0.033846835146738724,
    "time": 20718.264404296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.002948120312590144,
    "avg_bits_err_output": 0.002948120312590144,
    "avg_bits_err_improve": 0,
    "time": 2817.0576171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI 0.5) (+ b a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 15.187446997227202,
    "avg_bits_err_output": 0.24302161719245774,
    "avg_bits_err_improve": 14.944425380034744,
    "time": 46594.406982421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (/ 1.0 (exp (- x (* eps x)))) (* (exp (- (fma eps x x))) (+ 1.0 (/ -1.0 eps)))) 2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 29.39176485935185,
    "avg_bits_err_output": 29.42387006316951,
    "avg_bits_err_improve": -0.03210520381766102,
    "time": 43517.901611328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ -2.0 (/ 2.0 (+ 1.0 t))))) (- 4.0 (pow (+ 2.0 (/ -2.0 (+ 1.0 t))) 4.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.02175,
    "avg_bits_err_output": 0.009100919365257202,
    "avg_bits_err_improve": 0.012649080634742797,
    "time": 16822.13720703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ (* (/ 2.0 (+ 1.0 t)) (+ (/ 2.0 (+ 1.0 t)) -4.0)) 5.0) (fma (/ 2.0 (+ 1.0 t)) (+ (/ 2.0 (+ 1.0 t)) -4.0) 6.0))",
    "output_parens": 14,
    "avg_bits_err_input": 0.026875,
    "avg_bits_err_output": 0.0061462406251802885,
    "avg_bits_err_improve": 0.02072875937481971,
    "time": 53722.803466796875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ (* (/ t (+ 1.0 t)) 4.0) (+ 1.0 (/ 1.0 t)))) (+ (/ (* (/ t (+ 1.0 t)) 4.0) (+ 1.0 (/ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017625,
    "avg_bits_err_output": 0.0095,
    "avg_bits_err_improve": 0.008124999999999999,
    "time": 23059.718994140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3345.2197265625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3766.551025390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4082.96484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.794267633753049,
    "avg_bits_err_output": 0.253875,
    "avg_bits_err_improve": 7.540392633753049,
    "time": 17222.1220703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 6.871553505483716,
    "avg_bits_err_output": 6.871553505483716,
    "avg_bits_err_improve": 0,
    "time": 22480.579345703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(fma eps eps (* (* eps 2.0) x))",
    "output_parens": 3,
    "avg_bits_err_input": 15.11161327536692,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 15.10348827536692,
    "time": 13310.4423828125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5214174414767743,
    "avg_bits_err_output": 0.3888545125093753,
    "avg_bits_err_improve": 3.132562928967399,
    "time": 28604.005615234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.937445964149477,
    "avg_bits_err_output": 0.013816165626622608,
    "avg_bits_err_improve": 15.923629798522855,
    "time": 8179.471435546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.9555078319992,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.9555078319992,
    "time": 4079.09130859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.389331828656594,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.38883182865659,
    "time": 3899.2529296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.30475,
    "avg_bits_err_improve": 63.69525,
    "time": 61312.6240234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* (* t t) 4e-32)",
    "output_parens": 2,
    "avg_bits_err_input": 61.843251523038745,
    "avg_bits_err_output": 0.4263778203183597,
    "avg_bits_err_improve": 61.41687370272039,
    "time": 15772.77001953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -1.16e-86) (* (/ (/ (* c (* a -4.0)) a) (- b (hypot (sqrt (* a (* c -4.0))) b))) 0.5) (if (<= b 4e+149) (* -0.5 (/ (+ b (sqrt (fma b b (* a (* c -4.0))))) a)) (* -0.5 (/ (+ b (hypot (pow (pow (* a (* c -4.0)) 2.0) 0.25) b)) a))))",
    "output_parens": 29,
    "avg_bits_err_input": 34.44126964576185,
    "avg_bits_err_output": 22.065455957116093,
    "avg_bits_err_improve": 12.375813688645756,
    "time": 36676.4384765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -1e-264) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (* (/ 0.5 (+ b (hypot b (sqrt (* a (* c -4.0)))))) (/ (fma a (* c -4.0) 0.0) a)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+273) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 83,
    "avg_bits_err_input": 34.93790387716921,
    "avg_bits_err_output": 21.51709136839318,
    "avg_bits_err_improve": 13.42081250877603,
    "time": 42283.96630859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1984.64306640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.5427603283314,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 39.532385328331394,
    "time": 9260.75390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ 1.0 (* (/ (hypot x y) (- x y)) (/ (hypot x y) (+ x y))))",
    "output_parens": 8,
    "avg_bits_err_input": 19.992478467082034,
    "avg_bits_err_output": 0.033625376567277675,
    "avg_bits_err_improve": 19.958853090514754,
    "time": 26233.13232421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6715485494078313,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6715485494078313,
    "time": 14006.18212890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma (+ b d) a (* a c))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04,
    "avg_bits_err_output": 0.004125,
    "avg_bits_err_improve": 0.035875000000000004,
    "time": 3378.67724609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ b (+ b a))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.020844360937770437,
    "avg_bits_err_output": 0.01075,
    "avg_bits_err_improve": 0.010094360937770438,
    "time": 11218.6767578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (+ x (* x x)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0135,
    "avg_bits_err_output": 0.013375,
    "avg_bits_err_improve": 0.0001250000000000001,
    "time": 8061.6181640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0,
    "time": 2118.765380859375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ a (+ c b)) d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40375977500432714,
    "avg_bits_err_output": 0.23725,
    "avg_bits_err_improve": 0.16650977500432715,
    "time": 36738.486328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.43870851392195,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 30.431708513921947,
    "time": 11582.62939453125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.75693699231205,
    "avg_bits_err_output": 0.28694812031259015,
    "avg_bits_err_improve": 24.46998887199946,
    "time": 14115.731201171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(pow (/ (fma (/ 1.0 (tan x)) x (- (cos x))) (pow (/ (tan x) (- x (sin x))) 2.0)) 0.3333333333333333)",
    "output_parens": 12,
    "avg_bits_err_input": 28.788777767944996,
    "avg_bits_err_output": 28.781536676099822,
    "avg_bits_err_improve": 0.007241091845173742,
    "time": 58600.285400390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007363361324451065,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 0.006113361324451064,
    "time": 2551.8720703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (/ (* (expm1 (* n (log1p (/ i n)))) -100.0) (/ (- i) n)) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 5e-9) (* (- (* n (pow (+ 1.0 (/ i n)) n)) n) (/ 100.0 i)) (* n (/ (+ (* 100.0 (pow (exp n) (log1p (/ i n)))) -100.0) i))))",
    "output_parens": 39,
    "avg_bits_err_input": 47.50174955065749,
    "avg_bits_err_output": 10.85476235635753,
    "avg_bits_err_improve": 36.64698719429997,
    "time": 30905.25146484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) -1e-183) (fma (* c (pow (hypot c d) -2.0)) a (* b (* d (pow (hypot c d) -2.0)))) (/ (/ (+ (* a c) (* b d)) (hypot c d)) (hypot c d)))",
    "output_parens": 24,
    "avg_bits_err_input": 26.069959384915816,
    "avg_bits_err_output": 15.817057342578057,
    "avg_bits_err_improve": 10.252902042337759,
    "time": 27088.38916015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(* (- (/ (/ b (hypot c d)) (/ 1.0 c)) (/ a (/ (hypot c d) d))) (/ 1.0 (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 26.65854345701529,
    "avg_bits_err_output": 0.8466220567864599,
    "avg_bits_err_improve": 25.811921400228833,
    "time": 25252.945068359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(fma ux (+ maxCos -1.0) 1.0)",
    "output_parens": 2,
    "avg_bits_err_input": 0.03875,
    "avg_bits_err_output": 0.02072207019312773,
    "avg_bits_err_improve": 0.01802792980687227,
    "time": 29306.02197265625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (pow (sqrt (* uy (* 2.0 PI))) 2.0)) (sqrt (/ (+ (* (- 1.0 (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 3.0)) (fma ux maxCos (+ 1.0 ux))) (* (* ux (- (* ux ux) (pow (fma ux maxCos 1.0) 2.0))) (- -1.0 (+ (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 2.0))))) (* (fma ux maxCos (+ 1.0 ux)) (+ 1.0 (+ (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 2.0)))))))",
    "output_parens": 49,
    "avg_bits_err_input": 13.497687227091795,
    "avg_bits_err_output": 11.287164142448871,
    "avg_bits_err_improve": 2.210523084642924,
    "time": 66070.07006835938,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* uy (* 2.0 PI))) (sqrt (+ (/ (+ (/ (* (pow (* (- (fma ux maxCos 1.0) ux) (- ux (fma ux maxCos 1.0))) 2.0) (* (- (fma ux maxCos 1.0) ux) (- (* ux ux) (pow (fma ux maxCos 1.0) 2.0)))) (* (* (- (fma ux maxCos 1.0) ux) (- ux (fma ux maxCos 1.0))) (+ ux (fma ux maxCos 1.0)))) -1.0) (fma (- (fma ux maxCos 1.0) ux) (- ux (fma ux maxCos 1.0)) -1.0)) (fma (- (cbrt (/ 1.0 (fma (- (fma ux maxCos 1.0) ux) (- ux (fma ux maxCos 1.0)) -1.0)))) (cbrt (pow (fma (- (fma ux maxCos 1.0) ux) (- ux (fma ux maxCos 1.0)) -1.0) -2.0)) (/ 1.0 (fma (- (fma ux maxCos 1.0) ux) (- ux (fma ux maxCos 1.0)) -1.0))))))",
    "output_parens": 58,
    "avg_bits_err_input": 13.540722880457121,
    "avg_bits_err_output": 11.880008041000043,
    "avg_bits_err_improve": 1.6607148394570785,
    "time": 111523.38134765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (* (- 1.0 ux) maxCos) zi) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (* uy (* 2.0 PI))) xi) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.3376173847165654,
    "avg_bits_err_output": 0.33562815967506987,
    "avg_bits_err_improve": 0.0019892250414955126,
    "time": 67815.103515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.20115376181596006,
    "avg_bits_err_output": 0.20170788174186954,
    "avg_bits_err_improve": -0.0005541199259094798,
    "time": 26160.3525390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (pow (+ (/ 1.0 u1) -1.0) -0.5) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5381628816039323,
    "avg_bits_err_output": 0.5515219926829487,
    "avg_bits_err_improve": -0.013359111079016328,
    "time": 23873.873046875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (pow (+ (/ 1.0 u1) -1.0) -0.5) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3323814637931077,
    "avg_bits_err_output": 0.3734409040528676,
    "avg_bits_err_improve": -0.04105944025975994,
    "time": 26511.176025390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* (* s 0.5) (log (* (pow (+ -1.0 (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0)) -2.0) (pow (+ 1.0 (/ 1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))))) 2.0))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.3375540656001496,
    "avg_bits_err_output": 0.3401493891734974,
    "avg_bits_err_improve": -0.0025953235733477964,
    "time": 33896.7451171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07039997381152756,
    "avg_bits_err_output": 0.05387591589253221,
    "avg_bits_err_improve": 0.016524057918995347,
    "time": 15818.16357421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 0.5 (fma s (cosh (/ (fabs x) s)) s))",
    "output_parens": 5,
    "avg_bits_err_input": 0.16534426588581133,
    "avg_bits_err_output": 0.14149643415819269,
    "avg_bits_err_improve": 0.023847831727618646,
    "time": 26059.750732421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6641135874740226,
    "avg_bits_err_output": 0.6727942602193283,
    "avg_bits_err_improve": -0.008680672745305706,
    "time": 29479.476806640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (- (log (/ 1.0 (fma (- 1.0 u) (exp (/ -2.0 v)) u)))) 1.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.15567642670288123,
    "avg_bits_err_output": 0.16660940632791635,
    "avg_bits_err_improve": -0.010932979625035116,
    "time": 33989.64404296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot eta (sqrt (/ sinTheta_O (/ (hypot 1.0 sinTheta_O) sinTheta_O)))))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.5574870978969493,
    "avg_bits_err_output": 0.38962224467926726,
    "avg_bits_err_improve": 2.167864853217682,
    "time": 35044.32470703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* cosTheta_i cosTheta_O) (* (/ (* (* v 4.0) (sinh (/ 1.0 v))) (/ 2.0 v)) (exp (* (/ sinTheta_O v) sinTheta_i))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.44788030619839286,
    "avg_bits_err_output": 0.39443867583102554,
    "avg_bits_err_improve": 0.05344163036736732,
    "time": 44821.45556640625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (pow E (+ (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (+ (/ -1.0 v) 0.6931))) (/ 0.5 v))",
    "output_parens": 10,
    "avg_bits_err_input": 0.11342486894409184,
    "avg_bits_err_output": 0.12213783031799028,
    "avg_bits_err_improve": -0.008712961373898431,
    "time": 26465.852294921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow alpha (* 2.0 PI))) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4767753941579562,
    "avg_bits_err_output": 0.44320003111766987,
    "avg_bits_err_improve": 0.033575363040286355,
    "time": 67044.3515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3345746971356445,
    "avg_bits_err_output": 0.5640380262443974,
    "avg_bits_err_improve": 0.7705366708912471,
    "time": 36456.896484375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.339410347436003,
    "avg_bits_err_output": 0.19894812031259013,
    "avg_bits_err_improve": 12.140462227123413,
    "time": 29095.586669921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ 0.125 (* s PI)) (+ (/ (exp (/ (- r) s)) r) (/ (exp (/ -0.3333333333333333 (/ s r))) r)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.1434555200460597,
    "avg_bits_err_output": 0.17859932475219362,
    "avg_bits_err_improve": -0.03514380470613393,
    "time": 54962.87353515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9247303301421024,
    "avg_bits_err_output": 0.7529243524231539,
    "avg_bits_err_improve": 0.17180597771894845,
    "time": 34680.921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ 1.0 (+ c (/ 1.0 (* cosTheta (* (exp (* cosTheta cosTheta)) (sqrt (/ PI (fma cosTheta -2.0 1.0)))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6900439519084594,
    "avg_bits_err_output": 0.4764661273871941,
    "avg_bits_err_improve": 0.21357782452126522,
    "time": 26681.1884765625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (/ (log1p (- u1)) (/ 1.0 (log1p (- u1)))) 0.25) (sin (* 2.0 (* PI u2))))",
    "output_parens": 11,
    "avg_bits_err_input": 13.513070364833133,
    "avg_bits_err_output": 0.531236900442679,
    "avg_bits_err_improve": 12.981833464390455,
    "time": 21479.760986328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (fma (pow (cbrt (pow (sin (* PI u2)) 2.0)) 3.0) -2.0 1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 13.566173037343615,
    "avg_bits_err_output": 0.34307137228092893,
    "avg_bits_err_improve": 13.223101665062686,
    "time": 25681.85400390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* alpha (* (- alpha) (log1p (- u0))))",
    "output_parens": 5,
    "avg_bits_err_input": 13.967857744198856,
    "avg_bits_err_output": 0.3347855265643931,
    "avg_bits_err_improve": 13.633072217634464,
    "time": 19947.256103515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (* (log1p (- u0)) (- alphay)) (/ (fma (/ sin2phi alphay) (* alphax alphax) (* alphay cos2phi)) (* alphax alphax)))",
    "output_parens": 11,
    "avg_bits_err_input": 12.735171715335717,
    "avg_bits_err_output": 0.46851209491612755,
    "avg_bits_err_improve": 12.26665962041959,
    "time": 28856.730224609375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= F -1e-288) (- (* PI l) (/ (* (/ 1.0 F) (tan (* PI l))) F)) (if (<= F 4.5e-228) (- (* PI l) (* (tan (* PI l)) (pow (exp -2.0) (- (* (log F) 3.0) (log (* F F)))))) (if (<= F 7.6e-186) (+ (* PI l) (/ -1.0 (* F (/ F (tan (* PI l)))))) (if (<= F 1.55e-163) (- (* PI l) (* (tan (* PI l)) (pow (exp -2.0) (- (* (log F) 3.0) (log (* F F)))))) (- (* PI l) (/ (/ (tan (* PI l)) F) F))))))",
    "output_parens": 52,
    "avg_bits_err_input": 16.49249338287027,
    "avg_bits_err_output": 10.78709164943505,
    "avg_bits_err_improve": 5.7054017334352185,
    "time": 31365.703369140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2236497379540208,
    "avg_bits_err_output": 0.15527229420293912,
    "avg_bits_err_improve": 0.06837744375108168,
    "time": 25873.16845703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ (* F (pow (fma x 2.0 (fma F F 2.0)) -0.5)) (sin B)) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.457914018303216,
    "avg_bits_err_output": 10.439313136889016,
    "avg_bits_err_improve": 3.0186008814141996,
    "time": 34589.565185546875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(- (/ (/ (log (/ (cosh (* PI (* f 0.25))) (sinh (* PI (* f 0.25))))) PI) 0.25))",
    "output_parens": 11,
    "avg_bits_err_input": 61.43982144920934,
    "avg_bits_err_output": 1.8603247181122784,
    "avg_bits_err_improve": 59.57949673109706,
    "time": 50174.322265625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -1.95e-157) (* t (/ 1.0 (sqrt (* (+ (* (/ (+ 1.0 x) (+ x -1.0)) (* 2.0 (* t t))) (* (* l l) (+ -1.0 (/ (+ 1.0 x) (+ x -1.0))))) 0.5)))) (if (<= t 7.5e-153) (* (sqrt 2.0) (/ t (hypot (sqrt (* (/ (+ 1.0 x) (+ x -1.0)) (fma l l (* t (* t 2.0))))) l))) (if (<= t 3.9e-21) (* t (sqrt (/ 2.0 (- (* (* (* t t) (/ (- -1.0 x) (+ x -1.0))) -2.0) (* l (+ l (/ (+ l (* x l)) (- 1.0 x)))))))) (/ (* t (sqrt 2.0)) (sqrt (- (* (- -1.0 x) (* (* t t) (/ -2.0 (+ x -1.0)))) (* l (+ l (* l (/ (- -1.0 x) (+ x -1.0)))))))))))",
    "output_parens": 68,
    "avg_bits_err_input": 43.329198102684785,
    "avg_bits_err_output": 35.70626740145044,
    "avg_bits_err_improve": 7.6229307012343455,
    "time": 50552.719970703125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(/ (sin th) (/ (hypot (sin ky) (sin kx)) (sin ky)))",
    "output_parens": 7,
    "avg_bits_err_input": 3.853514213811086,
    "avg_bits_err_output": 0.2247928578176381,
    "avg_bits_err_improve": 3.6287213559934477,
    "time": 25589.95263671875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* 2.0 (/ l Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 1.0863747861547797,
    "avg_bits_err_output": 0.006125,
    "avg_bits_err_improve": 1.0802497861547797,
    "time": 12172.145751953125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ 2.0 (* (/ l t) (sqrt 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 9.724483127932366,
    "avg_bits_err_output": 1.1202379206602688,
    "avg_bits_err_improve": 8.604245207272097,
    "time": 27931.272216796875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n 1.05e-305) (sqrt (+ (* U (* 2.0 (* (/ n (/ Om l)) (fma l -2.0 (* (/ n (/ Om l)) (- U* U)))))) (* t (* 2.0 (* n U))))) (if (<= n 1e-219) (* (sqrt (* n 2.0)) (sqrt (* U (+ t (* (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0))))))) (if (<= n 4.4e+15) (sqrt (+ (* t (* 2.0 (* n U))) (* 2.0 (* (fma l -2.0 (* (/ l Om) (* n (- U* U)))) (* U (* n (/ l Om))))))) (* (sqrt (* n 2.0)) (sqrt (fma (/ l Om) (* U (fma n (* (- U* U) (/ l Om)) (* l -2.0))) (* U t)))))))",
    "output_parens": 62,
    "avg_bits_err_input": 34.46157878550961,
    "avg_bits_err_output": 24.89587239897202,
    "avg_bits_err_improve": 9.565706386537588,
    "time": 46105.8740234375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -3.9e+90) (not (<= t 2.8e-70))) (/ -1.0 (* k (* (* (/ (tan k) l) (* t (* k (/ (sin k) l)))) -0.5))) (/ (* l (/ (* t 2.0) (* t k))) (* (tan k) (* (/ (sin k) l) (* t k)))))",
    "output_parens": 26,
    "avg_bits_err_input": 47.83210195031423,
    "avg_bits_err_output": 2.6699762643428215,
    "avg_bits_err_improve": 45.16212568597141,
    "time": 108114.41357421875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (* (/ t l) (* (* (fma (/ k t) (* (/ k t) (tan k)) (* 2.0 (tan k))) (/ t l)) (* t (sin k)))))",
    "output_parens": 15,
    "avg_bits_err_input": 32.43845866339954,
    "avg_bits_err_output": 12.785808812742996,
    "avg_bits_err_improve": 19.65264985065654,
    "time": 99317.333984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (/ (fma a1 a1 (* a2 a2)) (sqrt 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5028838375223573,
    "avg_bits_err_output": 0.45349661876694797,
    "avg_bits_err_improve": 0.04938721875540936,
    "time": 27720.400390625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (/ (sqrt (* PI (* 2.0 n))) (pow (* PI (* 2.0 n)) (* k 0.5))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.472565155812468,
    "avg_bits_err_output": 0.3487597750043269,
    "avg_bits_err_improve": 0.12380538080814107,
    "time": 26217.069091796875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* 2.0 (sinh l)) (* (cos (* K 0.5)) J)) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.272637600033196,
    "avg_bits_err_output": 0.08163684218813101,
    "avg_bits_err_improve": 17.191000757845064,
    "time": 25736.993408203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 1.0) (* (cos (- (/ K (pow (* (/ 1.0 (cbrt (+ m n))) (cbrt 2.0)) 3.0)) M)) (exp (+ (fabs (- m n)) (- (* (- (* (+ m n) 0.5) M) (+ M (* (+ m n) -0.5))) l)))) (* (exp (+ (fabs (- m n)) (- (* (- (* (+ m n) 0.5) M) (+ M (* (+ m n) -0.5))) l))) (cos (- (/ K (pow (/ 2.0 (* (+ m n) (cbrt (pow (/ 2.0 (+ m n)) 2.0)))) 3.0)) M))))",
    "output_parens": 63,
    "avg_bits_err_input": 15.458969763343148,
    "avg_bits_err_output": 4.288766729781614,
    "avg_bits_err_improve": 11.170203033561535,
    "time": 38309.57861328125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* J (* (hypot 1.0 (* 0.5 (/ (/ U J) (cos (* 0.5 K))))) (* (cos (* 0.5 K)) -2.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 18.28489624062518,
    "avg_bits_err_output": 8.26442932343849,
    "avg_bits_err_improve": 10.02046691718669,
    "time": 32661.77392578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (or (<= h -1e-184) (not (<= h 2e-202))) (* w0 (sqrt (+ 1.0 (/ (* h (* M (* D (/ -0.5 d)))) (* (* (/ 2.0 D) (/ d M)) l))))) (* w0 (sqrt (+ 1.0 (* M (/ (* (* h (/ D d)) (* M (* (/ D d) -0.25))) l))))))",
    "output_parens": 28,
    "avg_bits_err_input": 14.059530863966984,
    "avg_bits_err_output": 8.998719202408516,
    "avg_bits_err_improve": 5.060811661558468,
    "time": 43005.961669921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -1e+232) (* c0 (/ (sqrt (/ A (- l))) (sqrt (- V)))) (if (<= (* V l) -4e-302) (* (sqrt (- A)) (/ c0 (sqrt (* V (- l))))) (if (<= (* V l) 1e-318) (/ (* c0 (sqrt (/ A (- l)))) (sqrt (- V))) (/ c0 (/ (sqrt (* V l)) (sqrt A))))))",
    "output_parens": 35,
    "avg_bits_err_input": 18.9747755837963,
    "avg_bits_err_output": 7.311932294356617,
    "avg_bits_err_improve": 11.662843289439685,
    "time": 37630.71826171875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) -1e-265) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) M)) (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) (- M))) (* (/ c0 (/ w d)) (/ d (* D (* h D)))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 0.0) (* (/ c0 (* 2.0 w)) (/ M (/ (- (* (/ c0 (* w h)) (pow (/ d D) 2.0)) (sqrt (- (pow (* (/ c0 (* w h)) (pow (/ d D) 2.0)) 2.0) (* M M)))) M))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma c0 (* (/ d D) (/ d (* w (* h D)))) M)) (sqrt (fma c0 (* (/ d D) (/ d (* w (* h D)))) (- M))) (* c0 (* (/ d D) (/ d (* w (* h D))))))) (* c0 (log (pow (exp (/ 0.5 w)) (/ (* M M) (- (/ (* (* d d) (/ c0 (* w D))) (* h D)) (sqrt (- (pow (/ (* (* d d) (/ c0 (* w D))) (* h D)) 2.0) (* M M)))))))))))",
    "output_parens": 178,
    "avg_bits_err_input": 59.67273215480821,
    "avg_bits_err_output": 31.47842532319914,
    "avg_bits_err_improve": 28.19430683160907,
    "time": 83712.37744140625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d -5e-310) (* (sqrt (/ d h)) (* (/ (sqrt (- d)) (sqrt (- l))) (+ 1.0 (* (* (/ (* M (/ D d)) 4.0) (/ (* D (* h (/ M d))) l)) -0.5)))) (if (<= d 1.7e-87) (* (/ d (sqrt (* h l))) (+ 1.0 (* (/ h (* (/ d D) (/ 1.0 M))) (/ (/ -0.125 l) (* (/ d D) (/ 1.0 M)))))) (if (<= d 1.08e+82) (* (sqrt (/ d h)) (* (/ (sqrt d) (sqrt l)) (+ 1.0 (* (fma (/ D (* d (/ 2.0 M))) (* (/ D (* d (/ 2.0 M))) (/ h l)) 0.0) -0.5)))) (if (<= d 2e+234) (* (* (/ (sqrt d) (sqrt h)) (sqrt (/ d l))) (- 1.0 (/ h (/ (* l (/ (/ d D) (* M (/ D d)))) (* M 0.125))))) (* (/ d (* (sqrt l) (sqrt h))) (- 1.0 (/ (/ h (* l 8.0)) (pow (* M (/ D d)) -2.0))))))))",
    "output_parens": 88,
    "avg_bits_err_input": 26.44617227584965,
    "avg_bits_err_output": 18.643752618930765,
    "avg_bits_err_improve": 7.802419656918886,
    "time": 93487.01318359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (/ (+ -0.00390625 (pow (* (hypot 1.0 x) 2.0) -8.0)) (+ -0.0625 (* (pow (hypot 1.0 x) -4.0) -0.0625))) (* (+ 0.5 (/ 0.5 (hypot 1.0 x))) (+ 0.25 (/ 0.25 (fma x x 1.0))))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 23,
    "avg_bits_err_input": 14.971667081376712,
    "avg_bits_err_output": 14.480404510632038,
    "avg_bits_err_improve": 0.4912625707446736,
    "time": 50102.37353515625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9823868421881311,
    "avg_bits_err_output": 0.012823120312590145,
    "avg_bits_err_improve": 0.969563721875541,
    "time": 8910.929443359375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (sqrt (fma v (* v -6.0) 2.0)))) (* (- 1.0 (* v v)) t))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4803071376397249,
    "avg_bits_err_output": 0.11331616562662264,
    "avg_bits_err_improve": 0.36699097201310227,
    "time": 30503.727783203125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt 2.0) 4.0) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.014917481250360578,
    "avg_bits_err_output": 0.01225,
    "avg_bits_err_improve": 0.002667481250360577,
    "time": 8769.626708984375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (- 1.0 (+ (fma 5.0 (* v v) 1.0) -1.0)) (+ (* v v) -1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.534914697257525,
    "avg_bits_err_output": 0.5535178879287848,
    "avg_bits_err_improve": -0.018603190671259706,
    "time": 32471.02294921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (* k (/ (- -10.0 k) a))))",
    "output_parens": 8,
    "avg_bits_err_input": 1.9187119986384435,
    "avg_bits_err_output": 0.2591517789881531,
    "avg_bits_err_improve": 1.6595602196502903,
    "time": 22574.842041015625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (/ 1.0 (exp (/ (+ (- mu (- Ec Vef)) EDonor) (- KbT)))))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.01902135833709117,
    "avg_bits_err_output": 0.018865719274861602,
    "avg_bits_err_improve": 0.0001556390622295678,
    "time": 8303.83154296875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18189417344137612,
    "avg_bits_err_output": 0.01345056406367188,
    "avg_bits_err_improve": 0.16844360937770425,
    "time": 16062.8837890625,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1894956925776963,
    "avg_bits_err_output": 0.023346804688852175,
    "avg_bits_err_improve": 0.16614888788884413,
    "time": 18042.247802734375,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (+ (* b (* 4.0 (* b (+ a 3.0)))) (* a (* 4.0 (* a (- 1.0 a)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18585903185262348,
    "avg_bits_err_output": 0.023694730631623865,
    "avg_bits_err_improve": 0.16216430122099962,
    "time": 28096.96044921875,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (hypot (* p 2.0) x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 13.501493261825829,
    "avg_bits_err_output": 13.498489323160735,
    "avg_bits_err_improve": 0.0030039386650937416,
    "time": 19570.358642578125,
    "seed": 24,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(hypot 1.0 (exp (* 0.5 x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.83161298072334,
    "avg_bits_err_output": 0.00625,
    "avg_bits_err_improve": 40.82536298072334,
    "time": 9952.858642578125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (- (+ (* (tan x) 3.0) (* (log (exp (tan x))) -2.0)) x))",
    "output_parens": 16,
    "avg_bits_err_input": 30.978015531159368,
    "avg_bits_err_output": 28.934305132119462,
    "avg_bits_err_improve": 2.043710399039906,
    "time": 34872.588134765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -4.1e+154) (/ (- (hypot b_2 (/ a (/ (sqrt (* a c)) c))) b_2) a) (if (<= b_2 2.6e-117) (/ (fabs (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a) (if (<= b_2 7.5e+187) (/ (fabs (/ (* a c) (+ b_2 (hypot b_2 (sqrt (* c (- a))))))) a) (if (<= b_2 2.4e+259) (* (/ (* a c) -1.0) (/ (/ 1.0 (+ b_2 (hypot b_2 (sqrt (* a c))))) a)) (if (<= b_2 7.2e+291) (/ (fabs (/ (* a c) (+ b_2 (hypot b_2 (sqrt (* c (- a))))))) a) (/ (* c (- a)) (* a (+ b_2 (hypot b_2 (sqrt (* a c)))))))))))",
    "output_parens": 59,
    "avg_bits_err_input": 34.729145063819495,
    "avg_bits_err_output": 23.527847117099384,
    "avg_bits_err_improve": 11.20129794672011,
    "time": 35285.5,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -4.1e+154) (/ c (- (hypot b_2 (pow (pow (* c a) 2.0) 0.25)) b_2)) (if (<= b_2 3.1e-282) (/ c (- (sqrt (- (* b_2 b_2) (* c a))) b_2)) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a)))",
    "output_parens": 23,
    "avg_bits_err_input": 34.436573743810996,
    "avg_bits_err_output": 16.443548969252767,
    "avg_bits_err_improve": 17.99302477455823,
    "time": 27613.30224609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (* (/ (sin x) x) (tan (* x 0.5))) x)",
    "output_parens": 6,
    "avg_bits_err_input": 31.216202271379384,
    "avg_bits_err_output": 0.12661353437914677,
    "avg_bits_err_improve": 31.089588737000238,
    "time": 22761.82861328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (log (exp (- (pow x (/ 1.0 n)) (exp (/ (log1p x) n))))))",
    "output_parens": 9,
    "avg_bits_err_input": 33.38967272288387,
    "avg_bits_err_output": 33.21930474294121,
    "avg_bits_err_improve": 0.17036797994266095,
    "time": 41807.059326171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.44133110348553,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 29.432706103485533,
    "time": 22772.25634765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 (- -1.0 x)) x)",
    "output_parens": 3,
    "avg_bits_err_input": 14.751710394678788,
    "avg_bits_err_output": 0.07894812031259014,
    "avg_bits_err_improve": 14.672762274366198,
    "time": 21552.052490234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -1.15e-26) (fma (sin x) (- (sin eps)) (* (cos x) (+ (cos eps) -1.0))) (if (<= x 2.8e-20) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (fma (+ (cos eps) -1.0) (cos x) (* (sin x) (- (sin eps))))))",
    "output_parens": 28,
    "avg_bits_err_input": 39.33306555243677,
    "avg_bits_err_output": 0.5482025397412753,
    "avg_bits_err_improve": 38.784863012695496,
    "time": 33733.815673828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(if (<= x 6.8e+230) (/ (/ (+ x (+ x 1.0)) (+ (cbrt (+ x 1.0)) (cbrt x))) (+ (pow (cbrt (+ x 1.0)) 4.0) (fma x (cbrt x) (pow (* (cbrt (+ x 1.0)) (/ x (pow (cbrt x) 2.0))) 2.0)))) (/ (+ 1.0 (- x x)) (+ (+ (exp (* (log1p x) 0.6666666666666666)) (/ x (cbrt x))) (* (cbrt (+ x 1.0)) (cbrt x)))))",
    "output_parens": 37,
    "avg_bits_err_input": 29.742797241848077,
    "avg_bits_err_output": 4.6147955834059555,
    "avg_bits_err_improve": 25.128001658442123,
    "time": 23049.524658203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.43307979460694,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 30.43307979460694,
    "time": 11409.48486328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -5e-176) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (/ 0.5 (* (+ b (hypot (sqrt (* a (* c -4.0))) b)) (/ a (fma a (* c -4.0) (- (* b b) (* b b)))))) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 2e+245) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0))))))) b) (* a 2.0))))))",
    "output_parens": 91,
    "avg_bits_err_input": 34.490826374729586,
    "avg_bits_err_output": 21.66213819376161,
    "avg_bits_err_improve": 12.828688180967976,
    "time": 43986.59814453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 1e+303) (* -0.5 (/ (+ b (sqrt (fma a (* c -4.0) (* b b)))) a)) (* -0.5 (/ (+ b (hypot b (* (sqrt (* a -4.0)) (sqrt c)))) a))))",
    "output_parens": 46,
    "avg_bits_err_input": 34.731654172625774,
    "avg_bits_err_output": 23.682278321099403,
    "avg_bits_err_improve": 11.04937585152637,
    "time": 37780.406982421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.25592938520995,
    "avg_bits_err_output": 0.001375,
    "avg_bits_err_improve": 61.25455438520995,
    "time": 12253.92529296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(* (cbrt (pow (+ (log1p n) (fabs (fma n (- (log1p n) (log n)) -1.0))) 2.0)) (pow (pow (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0)) 2.0) 0.16666666666666666))",
    "output_parens": 18,
    "avg_bits_err_input": 63.0043646566278,
    "avg_bits_err_output": 42.638913121034975,
    "avg_bits_err_improve": 20.365451535592825,
    "time": 45286.7763671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.71929061624231,
    "avg_bits_err_output": 0.00575,
    "avg_bits_err_improve": 58.71354061624231,
    "time": 17980.11572265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (+ (fma (cbrt (- x)) (cbrt (* x x)) (* (cbrt (- x)) (- (cbrt (* x x))))) (fma (pow (tan x) 2.0) (/ 1.0 (tan x)) (* (cbrt (- x)) (cbrt (* x x))))) x) (tan x))",
    "output_parens": 25,
    "avg_bits_err_input": 59.86949778009672,
    "avg_bits_err_output": 59.72044249150778,
    "avg_bits_err_improve": 0.14905528858894002,
    "time": 34465.810791015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ eps (* (/ (expm1 (* eps b)) (expm1 (* eps (+ b a)))) (expm1 (* eps a))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.4660750040529,
    "avg_bits_err_output": 29.159964254189493,
    "avg_bits_err_improve": 31.306110749863404,
    "time": 34579.27587890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.16859861326628,
    "avg_bits_err_output": 0.012775524992783767,
    "avg_bits_err_improve": 41.1558230882735,
    "time": 12118.3935546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.76375708417609,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 58.763382084176094,
    "time": 3026.576904296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.016698955664374,
    "avg_bits_err_output": 0.021512548747768777,
    "avg_bits_err_improve": 28.995186406916606,
    "time": 25609.78125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (+ (* (exp x) -2.0) 3.0) (/ -1.0 (exp x))) (fma -2.0 (exp x) -1.0))",
    "output_parens": 10,
    "avg_bits_err_input": 29.54982648154794,
    "avg_bits_err_output": 29.328148846093786,
    "avg_bits_err_improve": 0.22167763545415298,
    "time": 34132.5419921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(fma (/ (- x (fma x 2.0 2.0)) x) (/ 1.0 (+ x 1.0)) (/ 1.0 (+ x -1.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 10.06042986287164,
    "avg_bits_err_output": 10.071481385431914,
    "avg_bits_err_improve": -0.011051522560274307,
    "time": 44926.15283203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (or (<= eps -1.68e-6) (not (<= eps 2.9e-15))) (- (/ (+ (tan x) (tan eps)) (- 1.0 (/ (* (tan eps) (sin x)) (cos x)))) (tan x)) (/ (fma (tan x) (tan eps) (+ -1.0 (/ (+ (tan x) (tan eps)) (tan x)))) (+ (tan eps) (/ 1.0 (tan x)))))",
    "output_parens": 31,
    "avg_bits_err_input": 36.80678994756066,
    "avg_bits_err_output": 19.573549896074727,
    "avg_bits_err_improve": 17.233240051485932,
    "time": 40704.57421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (sqrt (+ 1.0 x)) (sqrt x)))",
    "output_parens": 5,
    "avg_bits_err_input": 29.92762824474874,
    "avg_bits_err_output": 0.16098364687698313,
    "avg_bits_err_improve": 29.766644597871757,
    "time": 23704.5830078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (+ (cos eps) -1.0) (* (cos x) (sin eps)))",
    "output_parens": 7,
    "avg_bits_err_input": 36.96172508371131,
    "avg_bits_err_output": 0.3764164224635464,
    "avg_bits_err_improve": 36.58530866124776,
    "time": 29380.92529296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ x (+ 1.0 (hypot x (sqrt x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 19.97093036205265,
    "avg_bits_err_output": 0.1186580828133113,
    "avg_bits_err_improve": 19.852272279239337,
    "time": 20630.7548828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(pow (pow (atan2 1.0 (+ 1.0 (fma N N N))) -0.5) -2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 15.0705599578238,
    "avg_bits_err_output": 0.344140988844626,
    "avg_bits_err_improve": 14.726418968979175,
    "time": 8171.5439453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.806541770153874,
    "avg_bits_err_output": 1.21246057057931,
    "avg_bits_err_improve": 28.594081199574564,
    "time": 27004.354248046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (/ (* m (- 1.0 m)) v) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0707195644503525,
    "avg_bits_err_output": 0.0707195644503525,
    "avg_bits_err_improve": 0,
    "time": 20875.46923828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* a (- b)) (/ (/ 1.0 a) b))",
    "output_parens": 5,
    "avg_bits_err_input": 16.197419942770384,
    "avg_bits_err_output": 0.2568565796931788,
    "avg_bits_err_improve": 15.940563363077205,
    "time": 20280.7373046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (fma (pow (* (cbrt (* PI angle)) (cbrt 0.005555555555555556)) 2.0) (cbrt (* PI (* angle 0.005555555555555556))) 0.0))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.247295279560415,
    "avg_bits_err_output": 20.32400854210091,
    "avg_bits_err_improve": -0.07671326254049404,
    "time": 44667.635498046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* (* PI 0.011111111111111112) angle)) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 31.860737409601708,
    "avg_bits_err_output": 21.394265232833728,
    "avg_bits_err_improve": 10.46647217676798,
    "time": 42066.939697265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (/ -1.0 (* (pow (cbrt (* PI (* angle 0.005555555555555556))) -2.0) (/ -1.0 (cbrt (* PI (* angle 0.005555555555555556)))))))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.41262782178542,
    "avg_bits_err_output": 20.455652466154543,
    "avg_bits_err_improve": -0.043024644369122456,
    "time": 52028.852783203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (/ (* m (- 1.0 m)) v) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.17216748125036058,
    "avg_bits_err_output": 0.17216748125036058,
    "avg_bits_err_improve": 0,
    "time": 18493.86279296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.31242730941468716,
    "avg_bits_err_output": 0.3018406598076887,
    "avg_bits_err_improve": 0.010586649606998455,
    "time": 37712.154052734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13759436093777044,
    "avg_bits_err_output": 0.13759436093777044,
    "avg_bits_err_improve": 0,
    "time": 24516.302734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi2) (* (cos phi1) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda1) (cos lambda2)))) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 16.86179442777483,
    "avg_bits_err_output": 3.67793540942785,
    "avg_bits_err_improve": 13.183859018346979,
    "time": 41191.95849609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -5e-30) (/ (/ 0.125 (pow a 3.0)) (* (/ (+ b (sqrt (fma (* a c) -4.0 (* b b)))) (- (fma (* a c) -4.0 (* b b)) (* b b))) (+ (/ 0.25 (* a a)) (* 0.0 (/ 0.5 a))))) (* (/ 0.5 a) (fma (pow (fma (* a c) -4.0 (* b b)) 0.16666666666666666) (pow (fma c (* a -4.0) (* b b)) 0.3333333333333333) (- b))))",
    "output_parens": 42,
    "avg_bits_err_input": 52.54893871942147,
    "avg_bits_err_output": 49.995294776350455,
    "avg_bits_err_improve": 2.553643943071016,
    "time": 51826.152099609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ (* (* c a) -2.0) a) (+ b (sqrt (+ (* c (* a -4.0)) (* b b)))))",
    "output_parens": 10,
    "avg_bits_err_input": 28.93968600050526,
    "avg_bits_err_output": 0.3383005960960476,
    "avg_bits_err_improve": 28.601385404409214,
    "time": 37037.504150390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* -2.0 (/ c (+ b (sqrt (fma a (* c -4.0) (* b b))))))",
    "output_parens": 7,
    "avg_bits_err_input": 43.79672286925443,
    "avg_bits_err_output": 0.16615808281331126,
    "avg_bits_err_improve": 43.63056478644112,
    "time": 61160.24658203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -5e-176) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (/ 0.5 (* (+ b (hypot (sqrt (* a (* c -4.0))) b)) (/ a (fma a (* c -4.0) (- (* b b) (* b b)))))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 2e+245) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0))))))) b) (* a 2.0))))))",
    "output_parens": 91,
    "avg_bits_err_input": 34.50892151664608,
    "avg_bits_err_output": 21.671596746973744,
    "avg_bits_err_improve": 12.837324769672339,
    "time": 47046.890380859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (* (cos phi2) (+ (cbrt (pow (* (sin lambda1) (sin lambda2)) 3.0)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.8488395665463114,
    "avg_bits_err_output": 0.2316901445982452,
    "avg_bits_err_improve": 0.6171494219480662,
    "time": 37250.4072265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (+ (/ 512.0 (pow (* (pow (+ 1.0 (pow (exp -2.0) x)) 3.0) (+ 1.0 (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (/ -2.0 (- -1.0 (pow (exp -2.0) x)))))) 3.0)) (/ -1.0 (pow (+ 1.0 (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (/ -2.0 (- -1.0 (pow (exp -2.0) x))))) 3.0))) (+ (* (pow (/ -2.0 (- -1.0 (pow (exp -2.0) x))) 3.0) (* (pow (/ -2.0 (- -1.0 (pow (exp -2.0) x))) 3.0) (pow (/ 1.0 (+ 1.0 (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (/ -2.0 (- -1.0 (pow (exp -2.0) x)))))) 2.0))) (cbrt (pow (* (pow (+ 1.0 (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) (/ -2.0 (- -1.0 (pow (exp -2.0) x))))) -2.0) (+ 1.0 (/ -8.0 (pow (- -1.0 (pow (exp -2.0) x)) 3.0)))) 3.0))))",
    "output_parens": 76,
    "avg_bits_err_input": 29.374745308290716,
    "avg_bits_err_output": 29.361810112130552,
    "avg_bits_err_improve": 0.012935196160164253,
    "time": 56847.23681640625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.278366926252225,
    "avg_bits_err_output": 0.01475,
    "avg_bits_err_improve": 58.263616926252226,
    "time": 8713.451416015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.27560170097852,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 58.26747670097852,
    "time": 6220.797119140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.007823120312590146,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 0.00019812031259014602,
    "time": 3659.229736328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.705625,
    "avg_bits_err_output": 0.04275,
    "avg_bits_err_improve": 31.662875,
    "time": 5895.581298828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (+ (log1p (* x (- x))) (* -2.0 (log1p (- x)))))",
    "output_parens": 8,
    "avg_bits_err_input": 58.70600775417713,
    "avg_bits_err_output": 0.006125,
    "avg_bits_err_improve": 58.69988275417713,
    "time": 12475.901123046875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(- (log (/ x (+ 1.0 (sqrt (- 1.0 (* x x)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.04294812031259015,
    "avg_bits_err_output": 0.0019481203125901445,
    "avg_bits_err_improve": 0.041,
    "time": 5284.250244140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (/ (* ew (sin t)) (hypot 1.0 (/ (/ eh (tan t)) ew))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12507312031259016,
    "avg_bits_err_output": 0.12644812031259015,
    "avg_bits_err_improve": -0.0013749999999999873,
    "time": 36490.3544921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (log (exp (cos (atan (* (- eh) (/ (tan t) ew))))))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.129125,
    "avg_bits_err_output": 0.12939624062518026,
    "avg_bits_err_improve": -0.0002712406251802746,
    "time": 41229.133056640625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (- (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))) (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 38.75888818465462,
    "avg_bits_err_output": 0.12405590253835011,
    "avg_bits_err_improve": 38.63483228211627,
    "time": 30570.08447265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (- 1.0 (/ b (/ a (/ b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 14.35516522605636,
    "avg_bits_err_output": 0.01189624062518029,
    "avg_bits_err_improve": 14.34326898543118,
    "time": 9485.615966796875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (- (* (cos delta) (pow (cos phi1) 2.0)) (* (sin delta) (* (* (cos phi1) (cos theta)) (sin phi1))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.16115112925084202,
    "avg_bits_err_output": 0.08371749726654845,
    "avg_bits_err_improve": 0.07743363198429357,
    "time": 52047.0654296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(* (/ (* a 3.0) (* a 3.0)) (/ c (- (- b) (sqrt (fma a (* c -3.0) (* b b))))))",
    "output_parens": 11,
    "avg_bits_err_input": 52.56052898958039,
    "avg_bits_err_output": 0.08976184218813102,
    "avg_bits_err_improve": 52.47076714739226,
    "time": 41598.732421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma a (* c -3.0) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 29.074130093987623,
    "avg_bits_err_output": 0.27544360937770435,
    "avg_bits_err_improve": 28.79868648460992,
    "time": 35083.28369140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma c (* -3.0 a) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 43.86880553911625,
    "avg_bits_err_output": 0.1622218046888522,
    "avg_bits_err_improve": 43.7065837344274,
    "time": 42304.196533203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= c -6e-224) (/ (/ -0.3333333333333333 (/ 1.0 (- b (hypot b (* (sqrt (* c -3.0)) (sqrt (fabs a))))))) a) (if (<= c 6.2e+146) (/ (* (- (hypot (sqrt (fabs (* (* c -3.0) a))) b) b) 0.3333333333333333) a) (/ (/ -0.3333333333333333 (/ 1.0 (- b (hypot b (* (sqrt (* -3.0 a)) (sqrt c)))))) a)))",
    "output_parens": 31,
    "avg_bits_err_input": 34.5228111051199,
    "avg_bits_err_output": 19.061501142740294,
    "avg_bits_err_improve": 15.461309962379605,
    "time": 42988.117431640625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (sin lambda1) (cos lambda2) (* (cos lambda1) (sin (- lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (/ (* (+ (pow (* (cos lambda2) (cos lambda1)) 3.0) (pow (* (sin lambda1) (sin lambda2)) 3.0)) (* (cos phi2) (sin phi1))) (+ (pow (* (cos lambda2) (cos lambda1)) 2.0) (* (* (sin lambda1) (sin lambda2)) (- (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1))))))))",
    "output_parens": 44,
    "avg_bits_err_input": 13.159819173272345,
    "avg_bits_err_output": 0.17793682706252573,
    "avg_bits_err_improve": 12.981882346209819,
    "time": 46955.302978515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (- 1.0 (+ x (* (+ 1.0 (/ 1.0 x)) (- -1.0 x)))) (* (- 1.0 x) (/ (+ 1.0 x) x)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.148772293790792,
    "avg_bits_err_output": 25.14110174036615,
    "avg_bits_err_improve": 4.007670553424642,
    "time": 34409.674560546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ (+ x -1.0) (/ (+ x 1.0) x)) (* (+ x -1.0) (/ (+ x 1.0) x)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.020875,
    "avg_bits_err_improve": -0.009625000000000002,
    "time": 20937.4326171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.52866119350035,
    "avg_bits_err_output": 0.07782312031259013,
    "avg_bits_err_improve": 14.450838073187759,
    "time": 23365.036865234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -1.15e-304) (/ (* (sqrt (* (fma -4.0 (* A C) (* B B)) 2.0)) (- (pow (* (cbrt (+ C (- A (hypot B (- A C))))) (cbrt F)) 1.5))) (fma B B (* A (* -4.0 C)))) (/ (* (sqrt (* (- (+ A C) (hypot B (- A C))) (* 2.0 (fma A (* -4.0 C) (* B B))))) (- (sqrt F))) (+ (* B B) (* -4.0 (* A C)))))",
    "output_parens": 39,
    "avg_bits_err_input": 52.332486803990264,
    "avg_bits_err_output": 42.340208498615596,
    "avg_bits_err_improve": 9.992278305374668,
    "time": 57133.676513671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.94791697115608,
    "avg_bits_err_output": 14.722659604882729,
    "avg_bits_err_improve": 15.22525736627335,
    "time": 27283.393798828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (/ (* (sqrt (+ C (pow (sqrt (+ A (hypot B (- A C)))) 2.0))) (* (sqrt (* 2.0 F)) (- (sqrt (fma B B (* A (* C -4.0))))))) (+ (* B B) (* -4.0 (* A C)))) (* (sqrt 2.0) (sqrt (/ F (/ (fma A (* C -4.0) (* B B)) (+ A (+ C (hypot B (- A C)))))))))",
    "output_parens": 56,
    "avg_bits_err_input": 52.377085075342315,
    "avg_bits_err_output": 40.34490547588796,
    "avg_bits_err_improve": 12.032179599454352,
    "time": 53303.784423828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(* (/ 1.0 (cbrt (* a 2.0))) (cbrt g))",
    "output_parens": 5,
    "avg_bits_err_input": 15.04371613288221,
    "avg_bits_err_output": 0.8575026150516635,
    "avg_bits_err_improve": 14.186213517830547,
    "time": 22565.27685546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (/ (cbrt (* 0.5 (- (hypot g h) g))) (cbrt a)) (/ (cbrt (+ g (hypot g h))) (cbrt (* a -2.0))))",
    "output_parens": 13,
    "avg_bits_err_input": 36.91913143472072,
    "avg_bits_err_output": 2.8295164944009876,
    "avg_bits_err_improve": 34.089614940319734,
    "time": 34065.294921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9918708656323929,
    "avg_bits_err_output": 0.03812537656727765,
    "avg_bits_err_improve": 0.9537454890651152,
    "time": 22267.9677734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- a (log (+ (exp a) (exp b)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.6469693609377705,
    "avg_bits_err_output": 0.5017353882658561,
    "avg_bits_err_improve": 0.1452339726719144,
    "time": 6134.252685546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b1) (/ a2 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-318) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 1e-267) (/ a1 (/ b2 (/ a2 b1))) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+263) (/ (* a1 a2) (* b1 b2)) (* a2 (/ (/ a1 b1) b2))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.986655253484908,
    "avg_bits_err_output": 3.8446808178772263,
    "avg_bits_err_improve": 8.141974435607683,
    "time": 10981.809326171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5623637626021017,
    "avg_bits_err_output": 0.513625,
    "avg_bits_err_improve": 0.04873876260210175,
    "time": 8979.58837890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -4.0) (- (log1p 0.0) (log (- (hypot 1.0 x) x))) (log1p (* x (+ 1.0 (/ x (+ 1.0 (hypot 1.0 x)))))))",
    "output_parens": 13,
    "avg_bits_err_input": 52.79582136742435,
    "avg_bits_err_output": 0.057344360937770435,
    "avg_bits_err_improve": 52.73847700648658,
    "time": 15552.11962890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.71919993055985,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.71919993055985,
    "time": 2097.6181640625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.01175,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 0,
    "time": 7609.603515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1258.799560546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(fma (* r w) (* w (* r (/ (fma v 0.25 -0.375) (- 1.0 v)))) (+ -1.5 (* 2.0 (pow r -2.0))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.24002046550635,
    "avg_bits_err_output": 0.1549129703154748,
    "avg_bits_err_improve": 13.085107495190874,
    "time": 42235.07177734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (fma (+ x1 (* x1 (* x1 (fma (fma 2.0 x2 (* x1 (fma x1 3.0 -1.0))) (/ 4.0 (fma x1 x1 1.0)) -6.0)))) (* x1 x1) (* x1 (fma x1 (fma (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0)) -6.0) 1.0))))))",
    "output_parens": 45,
    "avg_bits_err_input": 0.5127421811457701,
    "avg_bits_err_output": 0.3193902473444761,
    "avg_bits_err_improve": 0.193351933801294,
    "time": 90065.89916992188,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 19.29623075170551,
    "avg_bits_err_output": 1.3886787140474544,
    "avg_bits_err_improve": 17.907552037658057,
    "time": 7909.85205078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma (pow x 3.0) -0.12900613773279798 (* x 0.954929658551372))",
    "output_parens": 3,
    "avg_bits_err_input": 0.2240614816370412,
    "avg_bits_err_output": 0.19978740100229841,
    "avg_bits_err_improve": 0.02427408063474279,
    "time": 24517.35693359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003919694000577261,
    "avg_bits_err_output": 0.003919694000577261,
    "avg_bits_err_improve": 0,
    "time": 45888.466796875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI 0.5) (+ b a)) (* b a))",
    "output_parens": 5,
    "avg_bits_err_input": 13.938247422578925,
    "avg_bits_err_output": 0.24611597813022815,
    "avg_bits_err_improve": 13.692131444448696,
    "time": 50813.987548828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x)) (/ (+ 1.0 (/ -1.0 eps)) (exp (fma eps x x)))) 2.0)",
    "output_parens": 12,
    "avg_bits_err_input": 29.087406643723906,
    "avg_bits_err_output": 29.13750379077689,
    "avg_bits_err_improve": -0.05009714705298407,
    "time": 43561.180908203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(- 1.0 (/ (- 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (* (/ -2.0 (- 1.0 (* t t))) (- 1.0 t))))) (- 4.0 (pow (+ 2.0 (/ -2.0 (+ 1.0 t))) 4.0))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.017125,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 0.010625000000000002,
    "time": 24035.390869140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.024125,
    "avg_bits_err_output": 0.008,
    "avg_bits_err_improve": 0.016125,
    "time": 24319.80126953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ 2.0 (log (+ 1.0 (expm1 (* t (* (/ t (+ 1.0 t)) (/ 4.0 (+ 1.0 t)))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.023125,
    "avg_bits_err_output": 0.07238666588384264,
    "avg_bits_err_improve": -0.04926166588384264,
    "time": 19070.766357421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3303.6591796875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3711.15576171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4382.540283203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.818228497284723,
    "avg_bits_err_output": 0.240375,
    "avg_bits_err_improve": 7.577853497284723,
    "time": 26366.191162109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.771673768895418,
    "avg_bits_err_output": 7.771673768895418,
    "avg_bits_err_improve": 0,
    "time": 23565.09521484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(fma (* x 2.0) eps (* eps eps))",
    "output_parens": 3,
    "avg_bits_err_input": 16.29147747013905,
    "avg_bits_err_output": 0.00664624062518029,
    "avg_bits_err_improve": 16.28483122951387,
    "time": 15810.556884765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5597346939920094,
    "avg_bits_err_output": 0.38574830938347393,
    "avg_bits_err_improve": 3.1739863846085354,
    "time": 25231.632080078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.862961151971179,
    "avg_bits_err_output": 0.01907800781475362,
    "avg_bits_err_improve": 14.843883144156425,
    "time": 13298.02978515625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.58276838073367,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.58276838073367,
    "time": 4514.401611328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.14358561573015,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.14308561573015,
    "time": 4182.188232421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.306625,
    "avg_bits_err_improve": 63.693375,
    "time": 60069.85205078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.843253347501275,
    "avg_bits_err_output": 0.3251156015629507,
    "avg_bits_err_improve": 61.518137745938326,
    "time": 11905.043212890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* -0.5 (/ (+ b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 1e+303) (* -0.5 (/ (+ b (sqrt (fma a (* c -4.0) (* b b)))) a)) (* -0.5 (/ (+ b (hypot b (* (sqrt (* a -4.0)) (sqrt c)))) a))))",
    "output_parens": 46,
    "avg_bits_err_input": 34.731654172625774,
    "avg_bits_err_output": 23.682278321099403,
    "avg_bits_err_improve": 11.04937585152637,
    "time": 37478.13525390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -5e-176) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (/ 0.5 (* (+ b (hypot (sqrt (* a (* c -4.0))) b)) (/ a (fma a (* c -4.0) (- (* b b) (* b b)))))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 2e+245) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0))))))) b) (* a 2.0))))))",
    "output_parens": 91,
    "avg_bits_err_input": 34.50892151664608,
    "avg_bits_err_output": 21.671596746973744,
    "avg_bits_err_improve": 12.837324769672339,
    "time": 46758.94482421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2077.90185546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.411440673098795,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 39.401565673098794,
    "time": 5362.155517578125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (/ (- x y) (hypot x y)) (/ (hypot x y) (+ x y)))",
    "output_parens": 7,
    "avg_bits_err_input": 19.68575504741409,
    "avg_bits_err_output": 0.029311858204318895,
    "avg_bits_err_improve": 19.65644318920977,
    "time": 34529.3359375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ c (+ d a)) b) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6721265540007746,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6721265540007746,
    "time": 19163.626220703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03875,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0.037625,
    "time": 5707.614990234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ b a)) (* a (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01856372187554087,
    "avg_bits_err_output": 0.01375,
    "avg_bits_err_improve": 0.004813721875540871,
    "time": 5765.642822265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* (+ x 1.0) (* x x))",
    "output_parens": 3,
    "avg_bits_err_input": 0.012875,
    "avg_bits_err_output": 0.02,
    "avg_bits_err_improve": -0.007125000000000001,
    "time": 3910.945556640625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 1750.00244140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ e (+ a (+ c b))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4000428578176385,
    "avg_bits_err_output": 0.23575,
    "avg_bits_err_improve": 0.1642928578176385,
    "time": 17750.8544921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.01115789529748,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 30.00353289529748,
    "time": 9332.7109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.556461837877784,
    "avg_bits_err_output": 0.2931981203125902,
    "avg_bits_err_improve": 24.263263717565195,
    "time": 20506.21923828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(* (/ (pow (cbrt (- x (sin x))) 2.0) (pow (cbrt (tan x)) 2.0)) (cbrt (- (/ x (tan x)) (cos x))))",
    "output_parens": 14,
    "avg_bits_err_input": 29.68532795172709,
    "avg_bits_err_output": 29.674833503843786,
    "avg_bits_err_improve": 0.010494447883303337,
    "time": 50646.097900390625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005625,
    "avg_bits_err_output": 0.00075,
    "avg_bits_err_improve": 0.004875,
    "time": 2800.609130859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 5e-252) (/ (* (expm1 (* n (log1p (/ i n)))) 100.0) (/ i n)) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.01) (* n (+ (* (/ 1.0 i) (* (pow (+ 1.0 (/ i n)) n) 100.0)) (/ 1.0 (/ i -100.0)))) (* n (/ (+ -100.0 (* 100.0 (pow (exp n) (log1p (/ i n))))) i))))",
    "output_parens": 41,
    "avg_bits_err_input": 47.3425093859414,
    "avg_bits_err_output": 10.060421130474014,
    "avg_bits_err_improve": 37.282088255467386,
    "time": 35517.092041015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= c -3.7e+186) (* (/ (- (* (/ (* b d) (hypot d c)) (/ (* b d) (hypot d c))) (* (/ a (/ (hypot d c) c)) (/ a (/ (hypot d c) c)))) (- (/ (* b d) (hypot d c)) (/ a (/ (hypot d c) c)))) (/ 1.0 (hypot c d))) (if (<= c 2.2e+37) (/ (/ (+ (* b d) (* c a)) (hypot c d)) (hypot c d)) (if (<= c 3.3e+114) (fma (* b (pow (hypot d c) -2.0)) d (* a (* c (pow (hypot d c) -2.0)))) (* (/ (- (* (/ (* b d) (hypot d c)) (/ (* b d) (hypot d c))) (* (/ a (/ (hypot d c) c)) (/ a (/ (hypot d c) c)))) (- (/ (* b d) (hypot d c)) (/ a (/ (hypot d c) c)))) (/ 1.0 (hypot c d))))))",
    "output_parens": 73,
    "avg_bits_err_input": 25.980188192230877,
    "avg_bits_err_output": 15.015313710819651,
    "avg_bits_err_improve": 10.964874481411226,
    "time": 34365.26171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(if (or (<= (/ (- (* b c) (* d a)) (+ (* c c) (* d d))) -5e+295) (not (<= (/ (- (* b c) (* d a)) (+ (* c c) (* d d))) 2e+303))) (* (/ 1.0 (hypot c d)) (- (* c (/ b (hypot c d))) (* d (/ a (hypot c d))))) (/ (/ (- (* b c) (* d a)) (hypot c d)) (hypot c d)))",
    "output_parens": 36,
    "avg_bits_err_input": 26.083827027080257,
    "avg_bits_err_output": 0.8106586705203268,
    "avg_bits_err_improve": 25.273168356559932,
    "time": 27997.42919921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.035625,
    "avg_bits_err_output": 0.021447559061526855,
    "avg_bits_err_improve": 0.014177440938473142,
    "time": 9395.77294921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (- -1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0)))) 2.0) (/ (/ (pow (pow (fma ux maxCos (- 1.0 ux)) 4.0) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 61,
    "avg_bits_err_input": 13.44394324418557,
    "avg_bits_err_output": 11.881740141034806,
    "avg_bits_err_improve": 1.5622031031507646,
    "time": 106517.75537109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sqrt (+ (/ (- 1.0 (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 6.0)) (* (fma (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) (fma (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux)) 1.0) 1.0) (+ 1.0 (pow (* (fma ux maxCos 1.0) (fma ux maxCos (- 1.0 ux))) 3.0)))) (* ux (- (fma ux maxCos 1.0) ux)))) (cos (* uy (* 2.0 PI))))",
    "output_parens": 32,
    "avg_bits_err_input": 13.495645621433516,
    "avg_bits_err_output": 11.198692432113933,
    "avg_bits_err_improve": 2.2969531893195825,
    "time": 84637.73266601562,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))) xi (* (sin (* uy (* 2.0 PI))) (* yi (sqrt (- 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* (- 1.0 ux) maxCos)))))))) (* (* (- 1.0 ux) maxCos) (* ux zi)))",
    "output_parens": 33,
    "avg_bits_err_input": 0.32794533011683163,
    "avg_bits_err_output": 0.32165705477176143,
    "avg_bits_err_improve": 0.0062882753450702045,
    "time": 52694.360107421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* PI 0.5)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* PI 0.5))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* PI 0.5)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* PI 0.5))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 50,
    "avg_bits_err_input": 0.19663710765478196,
    "avg_bits_err_output": 0.19663710765478196,
    "avg_bits_err_improve": 0,
    "time": 44634.577392578125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5584054131264333,
    "avg_bits_err_output": 0.513321794529286,
    "avg_bits_err_improve": 0.04508361859714738,
    "time": 21440.881591796875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3288798706505123,
    "avg_bits_err_output": 0.32678706267949276,
    "avg_bits_err_improve": 0.002092807971019517,
    "time": 27524.482177734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))) -1.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.34622139490544057,
    "avg_bits_err_output": 0.34653773796337817,
    "avg_bits_err_improve": -0.00031634305793759587,
    "time": 37770.088134765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.0604678217642843,
    "avg_bits_err_output": 0.03956267642378781,
    "avg_bits_err_improve": 0.020905145340496492,
    "time": 9728.80029296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ (exp (/ (- (fabs x)) s)) (* s (* (+ (exp (/ (- (fabs x)) s)) 1.0) (+ (exp (/ (- (fabs x)) s)) 1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.14691469672015062,
    "avg_bits_err_output": 0.14382872742320255,
    "avg_bits_err_improve": 0.003085969296948071,
    "time": 28018.387939453125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6377393741706877,
    "avg_bits_err_output": 0.6403502679299644,
    "avg_bits_err_improve": -0.0026108937592767,
    "time": 29121.2529296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.16001236850351017,
    "avg_bits_err_output": 0.15965373301264021,
    "avg_bits_err_improve": 0.00035863549086995183,
    "time": 27934.8505859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.5661096639661056,
    "avg_bits_err_output": 0.3793773631985655,
    "avg_bits_err_improve": 2.18673230076754,
    "time": 37427.919677734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* cosTheta_i (* (/ 1.0 v) (* (/ cosTheta_O (* (exp (/ sinTheta_O (/ v sinTheta_i))) (sinh (/ 1.0 v)))) (/ 0.5 v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45987599673795104,
    "avg_bits_err_output": 0.3591755059746266,
    "avg_bits_err_improve": 0.10070049076332444,
    "time": 56072.076904296875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (/ (exp (+ (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v) 0.6931)) v) 0.5)",
    "output_parens": 8,
    "avg_bits_err_input": 0.11523247469693938,
    "avg_bits_err_output": 0.07511662564390106,
    "avg_bits_err_improve": 0.04011584905303832,
    "time": 14338.07421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4714917115735817,
    "avg_bits_err_output": 0.4199633188660072,
    "avg_bits_err_improve": 0.05152839270757453,
    "time": 42706.15380859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (/ (- 0.25 u) 0.75)) (* s -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3181925752395882,
    "avg_bits_err_output": 0.542735106825265,
    "avg_bits_err_improve": 0.7754574684143232,
    "time": 30511.322021484375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.398654350062245,
    "avg_bits_err_output": 0.206,
    "avg_bits_err_improve": 12.192654350062245,
    "time": 24432.9794921875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (* (/ (/ 0.125 PI) s) (/ (exp (/ (- r) s)) r)) (* (/ 0.75 (* s (* PI 6.0))) (/ (exp (/ (- r) (* s 3.0))) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.14816826612545544,
    "avg_bits_err_output": 0.15473406419493937,
    "avg_bits_err_improve": -0.00656579806948393,
    "time": 42543.589111328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8504139139318614,
    "avg_bits_err_output": 0.6861928926721634,
    "avg_bits_err_improve": 0.16422102125969795,
    "time": 40163.315673828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (pow (exp (- cosTheta)) cosTheta) (* cosTheta (sqrt (/ PI (- 1.0 (+ cosTheta cosTheta))))))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.6964411828804143,
    "avg_bits_err_output": 0.46968130421161886,
    "avg_bits_err_improve": 0.2267598786687955,
    "time": 25793.302490234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (pow (log1p (- u1)) 2.0) 0.25) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.626070382870543,
    "avg_bits_err_output": 0.5511130372409616,
    "avg_bits_err_improve": 13.074957345629581,
    "time": 28931.772705078125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (+ 1.0 (+ (cos (* PI (* u2 2.0))) -1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.667632846796424,
    "avg_bits_err_output": 0.3157019008050729,
    "avg_bits_err_improve": 13.351930945991352,
    "time": 25984.00634765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (- (* alpha alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.226162936136163,
    "avg_bits_err_output": 0.3187430453140324,
    "avg_bits_err_improve": 13.90741989082213,
    "time": 20848.30126953125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (* (log1p (- u0)) (* alphax (* alphay alphay))) (- (/ cos2phi (/ alphax (* alphay (- alphay)))) (* alphax sin2phi)))",
    "output_parens": 12,
    "avg_bits_err_input": 12.584607537057988,
    "avg_bits_err_output": 0.476504321465068,
    "avg_bits_err_improve": 12.10810321559292,
    "time": 27139.892822265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -1e+162) (- (* PI l) (/ (tan (* PI l)) (* F F))) (if (<= (* PI l) -5e+19) (- (* PI l) (/ (tan (* (pow (* PI l) 2.0) (log (exp (/ 1.0 (* PI l)))))) (* F F))) (if (<= (* PI l) 5e-8) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (if (<= (* PI l) 2e+140) (- (* PI l) (/ (tan (* (pow (* PI l) 2.0) (log (exp (/ 1.0 (* PI l)))))) (* F F))) (- (* PI l) (/ (tan (fma (pow (cbrt (* PI l)) 2.0) (cbrt (* PI l)) 0.0)) (* F F)))))))",
    "output_parens": 59,
    "avg_bits_err_input": 16.646005884411142,
    "avg_bits_err_output": 10.404001844192525,
    "avg_bits_err_improve": 6.242004040218617,
    "time": 31316.212158203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.2149387218755409,
    "avg_bits_err_output": 0.15225,
    "avg_bits_err_improve": 0.06268872187554089,
    "time": 20579.39990234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.858444100164588,
    "avg_bits_err_output": 10.77918771730636,
    "avg_bits_err_improve": 3.079256382858228,
    "time": 30461.406494140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (log (cbrt (pow (tanh (* PI (* f 0.25))) (* (/ 1.0 PI) 3.0)))) 4.0)",
    "output_parens": 9,
    "avg_bits_err_input": 61.69862389366804,
    "avg_bits_err_output": 0.3321671115537814,
    "avg_bits_err_improve": 61.36645678211426,
    "time": 37757.892822265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (<= t -4e-310) (/ (* t (sqrt 2.0)) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0)))))) (exp (/ (- (pow (log t) 2.0) (pow (log (/ (sqrt 2.0) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0))))))) 2.0)) (log (/ t (/ (sqrt 2.0) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0)))))))))))",
    "output_parens": 45,
    "avg_bits_err_input": 43.0165951562062,
    "avg_bits_err_output": 18.747071654235143,
    "avg_bits_err_improve": 24.269523501971058,
    "time": 47836.331298828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 3.802986425580912,
    "avg_bits_err_output": 0.20966541406655642,
    "avg_bits_err_improve": 3.5933210115143557,
    "time": 27601.88134765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(pow (/ 1.0 (+ 0.5 (/ 0.5 (hypot 1.0 (* l (* 2.0 (/ (hypot (sin kx) (sin ky)) Om))))))) -0.5)",
    "output_parens": 11,
    "avg_bits_err_input": 0.9689041181878356,
    "avg_bits_err_output": 0.00825,
    "avg_bits_err_improve": 0.9606541181878356,
    "time": 17919.26611328125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ (* t (sqrt 2.0)) l))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.004405037257653,
    "avg_bits_err_output": 1.015834723496339,
    "avg_bits_err_improve": 8.988570313761315,
    "time": 27749.138427734375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= t -1.08e+43) (sqrt (fma (/ 2.0 (/ Om (* n l))) (* U (fma l -2.0 (* (/ n (/ Om l)) (- U* U)))) (* n (* 2.0 (* t U))))) (if (<= t 4.1e-274) (sqrt (* U (* (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t) (* 2.0 n)))) (if (<= t 7.2e+183) (sqrt (fma (* (/ l Om) (* 2.0 n)) (* U (fma l -2.0 (* (/ n (/ Om l)) (- U* U)))) (* n (* 2.0 (* t U))))) (* (sqrt (* 2.0 (- t (fma (pow (/ Om l) -2.0) (* n (- U U*)) (/ (* 2.0 l) (/ Om l)))))) (sqrt (* n U))))))",
    "output_parens": 59,
    "avg_bits_err_input": 34.3563435188631,
    "avg_bits_err_output": 27.52794234355017,
    "avg_bits_err_improve": 6.82840117531293,
    "time": 48693.02880859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= k -2.9e-71) (not (<= k 4.8e-89))) (* (* (/ l k) (* 2.0 (/ 1.0 t))) (/ l (* k (* (tan k) (sin k))))) (/ (* (/ 2.0 t) (/ (/ l k) k)) (* (tan k) (/ (sin k) l))))",
    "output_parens": 24,
    "avg_bits_err_input": 47.70244897910644,
    "avg_bits_err_output": 0.46540108987134965,
    "avg_bits_err_improve": 47.23704788923509,
    "time": 105105.13671875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (<= t -1.26e-306) (* (/ (/ l t) (/ t (/ 2.0 (* (+ 2.0 (pow (/ k t) 2.0)) (tan k))))) (/ (/ l t) (sin k))) (if (<= t 1.3e-62) (/ 2.0 (* (+ (pow (/ (* k (pow t 0.75)) (* t (/ l (pow t 0.75)))) 2.0) (* 2.0 (pow (* l (pow t -1.5)) -2.0))) (* (tan k) (sin k)))) (/ 2.0 (* (* (tan k) (* (/ t l) (/ t (/ l (* t (sin k)))))) (+ 2.0 (pow (/ t k) -2.0))))))",
    "output_parens": 47,
    "avg_bits_err_input": 32.00405801311554,
    "avg_bits_err_output": 10.281200486421481,
    "avg_bits_err_improve": 21.722857526694057,
    "time": 81135.349609375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (fma a1 a1 (* a2 a2)) (/ (sqrt 2.0) (cos th)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.530235153146095,
    "avg_bits_err_output": 0.4814328968914071,
    "avg_bits_err_improve": 0.048802256254687926,
    "time": 31333.40087890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (sqrt (* 2.0 (* PI n))) (* (pow (* 2.0 (* PI n)) (* k 0.5)) (sqrt k)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4558140234749733,
    "avg_bits_err_output": 0.3300619201960123,
    "avg_bits_err_improve": 0.12575210327896097,
    "time": 25511.45703125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* J (* 2.0 (* (sinh l) (cos (* K 0.5))))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.295902563258757,
    "avg_bits_err_output": 0.06694812031259013,
    "avg_bits_err_improve": 17.228954442946165,
    "time": 25205.77880859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 1.5) (* (pow (pow (/ (cbrt (/ (cos (- (* (+ m n) (* K 0.5)) M)) (cbrt (cos (- (* (+ m n) (* K 0.5)) M))))) (cbrt (cbrt (cos (- (* (+ m n) (* K 0.5)) M))))) 3.0) 3.0) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) (* (cos (- (pow (/ (+ m n) (/ (pow (cbrt (* (+ m n) (* K 0.5))) 2.0) (* K 0.5))) 3.0) M)) (exp (fma (- (* (+ m n) 0.5) M) (+ M (* (+ m n) -0.5)) (- (fabs (- m n)) l)))))",
    "output_parens": 74,
    "avg_bits_err_input": 15.259977517909437,
    "avg_bits_err_output": 1.3093625544749703,
    "avg_bits_err_improve": 13.950614963434466,
    "time": 35416.259033203125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.33732312031259,
    "avg_bits_err_output": 8.22694812031259,
    "avg_bits_err_improve": 10.110375,
    "time": 34968.690185546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))) 5e+280) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (+ 1.0 (/ (* M (* (* M h) (* D (/ -0.5 d)))) (/ (* 2.0 l) (/ D d)))))))",
    "output_parens": 30,
    "avg_bits_err_input": 13.991339047435492,
    "avg_bits_err_output": 8.603658131352947,
    "avg_bits_err_improve": 5.3876809160825445,
    "time": 41020.740234375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) 0.0) (/ c0 (* (/ (sqrt (- V)) (sqrt (- A))) (sqrt l))) (/ c0 (/ (sqrt (* V l)) (sqrt A))))",
    "output_parens": 16,
    "avg_bits_err_input": 19.489491733666977,
    "avg_bits_err_output": 6.45724999883285,
    "avg_bits_err_improve": 13.032241734834127,
    "time": 38277.171630859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) -5e-135) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) M)) (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) (- M))) (* (/ c0 (/ w d)) (/ d (* D (* h D)))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 0.0) (* (/ c0 (* 2.0 w)) (+ (* (/ d h) (/ (* d (/ c0 w)) (* D D))) (sqrt (- (pow (* (/ d h) (/ (* d (/ c0 w)) (* D D))) 2.0) (* M M))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (+ (* (/ c0 (/ w d)) (/ d (* D (* h D)))) (sqrt (- (pow (* (/ c0 (/ w d)) (/ d (* D (* h D)))) 2.0) (* M M))))) (* c0 (* (/ 0.5 w) (/ M (/ (- (/ (* d (/ d (/ D (/ c0 w)))) (* h D)) (sqrt (fma (- M) M (pow (* d (* (/ d D) (/ (/ c0 (* w D)) h))) 2.0)))) M)))))))",
    "output_parens": 171,
    "avg_bits_err_input": 59.53181243466636,
    "avg_bits_err_output": 32.89259612283243,
    "avg_bits_err_improve": 26.639216311833927,
    "time": 72569.86572265625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) -2e-227) (* (* (sqrt (/ d h)) (pow (/ l d) -0.5)) (+ 1.0 (/ (* (* M (/ D d)) (/ -0.5 l)) (* (/ 1.0 h) (/ 4.0 (* M (/ D d))))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 0.0) (* (* (fabs d) (sqrt (/ (/ 1.0 h) l))) (+ 1.0 (* (pow (/ M (/ (* d 2.0) D)) 2.0) (* h (/ -0.5 l))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 2e+261) (* (pow (/ h d) -0.5) (* (sqrt (/ d l)) (+ 1.0 (* -0.5 (fma (/ (* M D) (* d 2.0)) (* (/ h l) (/ (* M D) (* d 2.0))) 0.0))))) (* (/ (fabs d) (sqrt (* h l))) (- 1.0 (/ (fma (/ (* M D) (* d 2.0)) (* h (/ (* M D) (* d 2.0))) 0.0) (* 2.0 l)))))))",
    "output_parens": 112,
    "avg_bits_err_input": 26.41690728909107,
    "avg_bits_err_output": 12.010825120279923,
    "avg_bits_err_improve": 14.406082168811148,
    "time": 114991.93334960938,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (+ (/ 0.5 (hypot 1.0 x)) -0.5) (- -1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 9,
    "avg_bits_err_input": 15.39205824064325,
    "avg_bits_err_output": 14.90151194904753,
    "avg_bits_err_improve": 0.49054629159572016,
    "time": 84743.25024414062,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (fma v (* v -6.0) 2.0)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9870637218755409,
    "avg_bits_err_output": 0.01129248125036058,
    "avg_bits_err_improve": 0.9757712406251804,
    "time": 9099.297119140625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (* (/ 1.0 (sqrt (fma v (* v -6.0) 2.0))) (/ (fma v (* v -5.0) 1.0) PI)) t) (- 1.0 (* v v)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.45553459325646145,
    "avg_bits_err_output": 0.11084172444079003,
    "avg_bits_err_improve": 0.3446928688156714,
    "time": 19654.362548828125,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt 2.0) (* (sqrt (fma v (* v -3.0) 1.0)) (* (fma v v -1.0) -0.25)))",
    "output_parens": 8,
    "avg_bits_err_input": 0.011167481250360578,
    "avg_bits_err_output": 0.01027124062518029,
    "avg_bits_err_improve": 0.0008962406251802873,
    "time": 20210.546875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(exp (* (log (pow (acos (/ (fma v (* v -5.0) 1.0) (fma v v -1.0))) 0.16666666666666666)) 6.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5285635298177244,
    "avg_bits_err_output": 0.5348291476671974,
    "avg_bits_err_improve": -0.006265617849472993,
    "time": 37956.53662109375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(if (<= k 1.6e+128) (/ (/ a (pow k (- m))) (+ 1.0 (* k (+ k 10.0)))) (/ 1.0 (+ (/ (pow k (- m)) a) (* (/ k a) (/ (+ k 10.0) (pow k m))))))",
    "output_parens": 19,
    "avg_bits_err_input": 2.0529347922808627,
    "avg_bits_err_output": 0.1411624612677703,
    "avg_bits_err_improve": 1.9117723310130925,
    "time": 18399.150634765625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (pow E (/ (+ (+ Vef EDonor) (- mu Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.024823660533951273,
    "avg_bits_err_output": 0.02601257314127101,
    "avg_bits_err_improve": -0.0011889126073197365,
    "time": 15627.51171875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18200977500432683,
    "avg_bits_err_output": 0.014252443751081735,
    "avg_bits_err_improve": 0.1677573312532451,
    "time": 16132.906982421875,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.18484082587449863,
    "avg_bits_err_output": 0.025504222906340707,
    "avg_bits_err_improve": 0.1593366029681579,
    "time": 13258.949462890625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (fma (- 1.0 a) (* (* a a) 4.0) (+ (pow (hypot b a) 4.0) (* (* 4.0 b) (* b (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18622876449628095,
    "avg_bits_err_output": 0.025892594965632898,
    "avg_bits_err_improve": 0.16033616953064805,
    "time": 24895.73291015625,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (- (log (exp (+ 2.0 (/ (* 2.0 x) (hypot x (* 2.0 p)))))) (exp (log1p (/ x (hypot x (* 2.0 p))))))))",
    "output_parens": 15,
    "avg_bits_err_input": 13.036152592432723,
    "avg_bits_err_output": 13.033775856027146,
    "avg_bits_err_improve": 0.0023767364055764517,
    "time": 24027.234130859375,
    "seed": 25,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(hypot 1.0 (exp (* 0.5 x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.89204784365195,
    "avg_bits_err_output": 0.005375,
    "avg_bits_err_improve": 40.88667284365195,
    "time": 11303.181396484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -2e-8) (/ (- x (sin x)) (- x (tan x))) (if (<= x 2.2e-8) (* (/ -1.0 (fma x (/ x (tan x)) x)) (/ (+ x (sin x)) (/ (tan x) x))) (- (/ (sin x) (- (tan x) x)) (/ x (- (tan x) x)))))",
    "output_parens": 27,
    "avg_bits_err_input": 31.55902957880205,
    "avg_bits_err_output": 25.68647744124878,
    "avg_bits_err_improve": 5.872552137553271,
    "time": 33200.024658203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -9.5e-152) (/ (- (- (/ b_2 (/ (sqrt (- (* b_2 b_2) (* a c))) b_2)) (/ (fma a c (* a (- c c))) (sqrt (- (* b_2 b_2) (* a c))))) b_2) a) (/ (- c) (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))))",
    "output_parens": 26,
    "avg_bits_err_input": 33.250716627551554,
    "avg_bits_err_output": 18.676004059267925,
    "avg_bits_err_improve": 14.57471256828363,
    "time": 27269.94580078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -4.6e-218) (/ (- c) (- b_2 (hypot b_2 (pow (* (* c a) (* c a)) 0.25)))) (/ (- (- (/ (fma a c (* a (- c c))) (sqrt (- (* b_2 b_2) (* c a)))) (/ b_2 (/ (sqrt (- (* b_2 b_2) (* c a))) b_2))) b_2) a))",
    "output_parens": 27,
    "avg_bits_err_input": 34.11813922100866,
    "avg_bits_err_output": 17.712536258645837,
    "avg_bits_err_improve": 16.405602962362824,
    "time": 26620.898193359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (* (/ (sin x) x) (tan (/ x 2.0))) x)",
    "output_parens": 6,
    "avg_bits_err_input": 31.86615493825549,
    "avg_bits_err_output": 0.12355800903218947,
    "avg_bits_err_improve": 31.7425969292233,
    "time": 25885.160400390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(/ 1.0 (/ 1.0 (- (exp (/ (log1p x) n)) (pow x (pow n -1.0)))))",
    "output_parens": 8,
    "avg_bits_err_input": 32.852489982194086,
    "avg_bits_err_output": 32.51883334877802,
    "avg_bits_err_improve": 0.3336566334160693,
    "time": 38523.310302734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.80565365569737,
    "avg_bits_err_output": 0.03,
    "avg_bits_err_improve": 29.77565365569737,
    "time": 17105.41162109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (pow (+ 1.0 x) -2.0) (/ (fma x -1.0 -1.0) x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.266997377295024,
    "avg_bits_err_output": 0.017198120312590146,
    "avg_bits_err_improve": 14.249799256982433,
    "time": 15299.36474609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (* (cos x) (/ (pow (sin eps) 2.0) (/ (sin eps) (tan (/ (- eps) 2.0))))) (* (sin eps) (sin x)))",
    "output_parens": 14,
    "avg_bits_err_input": 40.063134977209515,
    "avg_bits_err_output": 0.3669819046127203,
    "avg_bits_err_improve": 39.69615307259679,
    "time": 35313.146484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (+ (+ (/ (+ 1.0 x) (cbrt (+ 1.0 x))) (/ x (cbrt x))) (* (cbrt (+ 1.0 x)) (cbrt x))))",
    "output_parens": 13,
    "avg_bits_err_input": 30.287079827296214,
    "avg_bits_err_output": 0.21275977500432686,
    "avg_bits_err_improve": 30.07432005229189,
    "time": 25375.999267578125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 29.820413235775288,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 29.820163235775286,
    "time": 11559.780517578125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot (* (pow (* c (* c (* a -4.0))) 0.25) (pow (* a -4.0) 0.25)) b) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -5e-247) (- (/ (sqrt (fma c (* a -4.0) (* b b))) (* a 2.0)) (/ b (* a 2.0))) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (/ (/ (* a (* 4.0 c)) (- (- b) (hypot b (sqrt (* a (* c -4.0)))))) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 1e+301) (- (/ (sqrt (fma c (* a -4.0) (* b b))) (* a 2.0)) (/ b (* a 2.0))) (/ (- (hypot (* (pow a 0.25) (* (pow (* c (* c 16.0)) 0.25) (pow a 0.25))) b) b) (* a 2.0))))))",
    "output_parens": 92,
    "avg_bits_err_input": 33.497212251970524,
    "avg_bits_err_output": 20.822827932810622,
    "avg_bits_err_improve": 12.674384319159902,
    "time": 42024.69775390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* (+ b (hypot (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0)))))) b)) (/ -0.5 a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 1e+296) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (* (/ -0.5 a) (+ b (hypot (pow (pow (* a (* c -4.0)) 2.0) 0.25) b)))))",
    "output_parens": 53,
    "avg_bits_err_input": 33.777319510496454,
    "avg_bits_err_output": 25.288381270790477,
    "avg_bits_err_improve": 8.488938239705977,
    "time": 38211.157958984375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.249397783302264,
    "avg_bits_err_output": 0.001396240625180289,
    "avg_bits_err_improve": 61.24800154267708,
    "time": 13013.277099609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(* (cbrt (pow (+ (log1p n) (fabs (fma n (- (log1p n) (log n)) -1.0))) 2.0)) (pow (pow (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0)) 0.08333333333333333) 4.0))",
    "output_parens": 18,
    "avg_bits_err_input": 63.0038189906172,
    "avg_bits_err_output": 42.62969121857687,
    "avg_bits_err_improve": 20.374127772040325,
    "time": 46162.07373046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.505118567529436,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 58.498618567529434,
    "time": 18958.989501953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (- (tan x) x) x) (tan x))",
    "output_parens": 5,
    "avg_bits_err_input": 59.799133600510245,
    "avg_bits_err_output": 59.77766280782805,
    "avg_bits_err_improve": 0.02147079268219443,
    "time": 34232.04931640625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (* (/ (expm1 (* eps b)) (expm1 (* eps (+ b a)))) (/ (expm1 (* eps a)) eps)))",
    "output_parens": 11,
    "avg_bits_err_input": 60.26191170306846,
    "avg_bits_err_output": 29.02849682415333,
    "avg_bits_err_improve": 31.233414878915134,
    "time": 35722.328369140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.198204675298605,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 41.1878296752986,
    "time": 14569.166015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.61771282688367,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.61746282688367,
    "time": 3360.75732421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.76068083760891,
    "avg_bits_err_output": 0.014410952987381808,
    "avg_bits_err_improve": 29.746269884621526,
    "time": 15483.859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fma (exp x) (+ -2.0 (exp (- x))) (pow (+ -2.0 (exp (- x))) 2.0)) (+ -2.0 (exp (- x))))",
    "output_parens": 13,
    "avg_bits_err_input": 30.009672811185897,
    "avg_bits_err_output": 29.537185389175896,
    "avg_bits_err_improve": 0.47248742201000127,
    "time": 32820.093017578125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(- (/ 1.0 (+ 1.0 x)) (- (/ 2.0 x) (/ 1.0 (+ x -1.0))))",
    "output_parens": 7,
    "avg_bits_err_input": 9.253645595574053,
    "avg_bits_err_output": 9.253584917220657,
    "avg_bits_err_improve": 6.067835339607086e-05,
    "time": 50432.740478515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(fma (+ (tan x) (tan eps)) (/ 1.0 (- 1.0 (* (tan x) (tan eps)))) (- (tan x)))",
    "output_parens": 11,
    "avg_bits_err_input": 37.19322870327347,
    "avg_bits_err_output": 21.745668060866038,
    "avg_bits_err_improve": 15.447560642407431,
    "time": 39311.005126953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (fma (- -1.0 x) (/ -1.0 (sqrt (+ 1.0 x))) (sqrt x)))",
    "output_parens": 7,
    "avg_bits_err_input": 30.267771417149046,
    "avg_bits_err_output": 0.1454742484399339,
    "avg_bits_err_improve": 30.12229716870911,
    "time": 22699.35302734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(* (sin eps) (fma (tan (* eps -0.5)) (sin x) (cos x)))",
    "output_parens": 7,
    "avg_bits_err_input": 37.32740431185747,
    "avg_bits_err_output": 0.21349802937081552,
    "avg_bits_err_improve": 37.11390628248665,
    "time": 30346.613037109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (fma (sqrt x) (sqrt (+ x 1.0)) (+ x 1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 19.91670907442092,
    "avg_bits_err_output": 0.12962048906511422,
    "avg_bits_err_improve": 19.787088585355804,
    "time": 22594.513916015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (+ (+ 1.0 N) (* N N)))",
    "output_parens": 4,
    "avg_bits_err_input": 14.767982564178892,
    "avg_bits_err_output": 0.33931066564568674,
    "avg_bits_err_improve": 14.428671898533205,
    "time": 15055.72509765625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.397892207208027,
    "avg_bits_err_output": 1.1879858716004401,
    "avg_bits_err_improve": 28.209906335607588,
    "time": 24953.400390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (/ m (/ v (- 1.0 m))) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07326204570071307,
    "avg_bits_err_output": 0.07538704570071307,
    "avg_bits_err_improve": -0.002125000000000002,
    "time": 35232.87548828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* b a) (* b (- a)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.437323458131658,
    "avg_bits_err_output": 0.31009718125612984,
    "avg_bits_err_improve": 16.12722627687553,
    "time": 16744.95654296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* (/ angle (* angle 0.005555555555555556)) (* (/ angle (* angle 0.005555555555555556)) (/ (pow (cbrt (* angle PI)) 3.0) 5832000.0))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 19,
    "avg_bits_err_input": 20.821060747476913,
    "avg_bits_err_output": 20.884966754060784,
    "avg_bits_err_improve": -0.06390600658387058,
    "time": 51069.8798828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (+ b a) (* (* (sin (* 2.0 (* (* PI angle) 0.005555555555555556))) 0.5) (- b a))))",
    "output_parens": 10,
    "avg_bits_err_input": 30.81752120710567,
    "avg_bits_err_output": 21.24938116056273,
    "avg_bits_err_improve": 9.56814004654294,
    "time": 45977.660400390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (cos (* (* (pow (cbrt (* angle (* PI 0.005555555555555556))) 2.0) (cbrt (* angle PI))) (cbrt 0.005555555555555556)))) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 20.12189732157665,
    "avg_bits_err_output": 20.148885564435783,
    "avg_bits_err_improve": -0.026988242859133038,
    "time": 52197.75048828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (/ m (/ v (- 1.0 m))) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.17863684218813097,
    "avg_bits_err_output": 0.18156372187554085,
    "avg_bits_err_improve": -0.0029268796874098724,
    "time": 22947.024169921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3155272590284995,
    "avg_bits_err_output": 0.31605836151823247,
    "avg_bits_err_improve": -0.0005311024897329819,
    "time": 36460.37255859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13592403967784733,
    "avg_bits_err_output": 0.13592403967784733,
    "avg_bits_err_improve": 0,
    "time": 21482.188720703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (fma (sin lambda2) (sin lambda1) (* (cos lambda1) (cos lambda2)))))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 16.456186758291835,
    "avg_bits_err_output": 3.856243241030544,
    "avg_bits_err_improve": 12.599943517261291,
    "time": 42813.207763671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* (cbrt (/ (* b (fma b (- b (sqrt (fma b b (* -4.0 (* c a))))) (* -4.0 (* c a)))) (* b (sqrt (fma b b (* -4.0 (* c a))))))) (pow (cbrt (/ (* b (fma b (- b (sqrt (fma b b (* -4.0 (* c a))))) (* -4.0 (* c a)))) (* b (sqrt (fma b b (* -4.0 (* c a))))))) 2.0)) (* a 2.0))",
    "output_parens": 36,
    "avg_bits_err_input": 52.120791713719925,
    "avg_bits_err_output": 44.828107606203055,
    "avg_bits_err_improve": 7.29268410751687,
    "time": 57498.262939453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ 1.0 (/ (fma (* a -2.0) (sqrt (fma b b (* a (* c -4.0)))) (* (* a -2.0) b)) (* a (* c 4.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 28.605496859858842,
    "avg_bits_err_output": 0.4703601531460952,
    "avg_bits_err_improve": 28.135136706712746,
    "time": 65118.513427734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (* b (fma c (* a -4.0) (* b (- b (sqrt (fma c (* a -4.0) (* b b))))))) (/ 0.5 (* a (* b (sqrt (fma c (* a -4.0) (* b b)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 43.99124497118306,
    "avg_bits_err_output": 38.856724425911224,
    "avg_bits_err_improve": 5.134520545271833,
    "time": 61416.5283203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -2.8e+158) (/ (- (hypot (* (pow (* a c) 0.25) (pow (* 16.0 (* a c)) 0.25)) b) b) (* a 2.0)) (if (<= b 3.4e-299) (/ (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (* a 2.0)) (if (<= b 1.32e+15) (* (* c (/ (* a -4.0) a)) (/ 0.5 (+ b (hypot (sqrt (* a (* c -4.0))) b)))) (/ 1.0 (* (/ a (* c (* a -4.0))) (* 2.0 (+ b (hypot b (pow (* 16.0 (pow (* a c) 2.0)) 0.25)))))))))",
    "output_parens": 46,
    "avg_bits_err_input": 33.50072855114043,
    "avg_bits_err_output": 15.918819270658565,
    "avg_bits_err_improve": 17.581909280481867,
    "time": 47969.174560546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (fma (* (sin lambda1) (sin lambda2)) (cos phi2) (fma (cos phi2) (* (cos lambda2) (cos lambda1)) (cos phi1)))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8208514187129492,
    "avg_bits_err_output": 0.22889254027095174,
    "avg_bits_err_improve": 0.5919588784419975,
    "time": 34743.23974609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (- (* (* 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0)) (* (pow (/ 1.0 (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))) 2.0) (* 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0)))) (pow (/ 1.0 (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))) 2.0)) (fma (pow (cbrt (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))) -2.0) (cbrt (/ 1.0 (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))))) (/ (/ 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) 2.0)) (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))))))",
    "output_parens": 54,
    "avg_bits_err_input": 29.025259517857783,
    "avg_bits_err_output": 29.01919462190925,
    "avg_bits_err_improve": 0.006064895948533433,
    "time": 53235.404052734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.14127252826874,
    "avg_bits_err_output": 0.01325,
    "avg_bits_err_improve": 58.128022528268744,
    "time": 9622.559814453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.0175177741536,
    "avg_bits_err_output": 0.007125,
    "avg_bits_err_improve": 58.0103927741536,
    "time": 14516.41455078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(+ (+ 1.0 (/ 1.0 (cosh x))) -1.0)",
    "output_parens": 4,
    "avg_bits_err_input": 0.008563721875540865,
    "avg_bits_err_output": 0.1285272146433883,
    "avg_bits_err_improve": -0.11996349276784743,
    "time": 3989.474365234375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 32.345625,
    "avg_bits_err_output": 0.051125,
    "avg_bits_err_improve": 32.2945,
    "time": 9193.903564453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.49709355993969,
    "avg_bits_err_output": 0.0065,
    "avg_bits_err_improve": 58.49059355993969,
    "time": 25133.181396484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.06044812031259014,
    "avg_bits_err_output": 0.06044812031259014,
    "avg_bits_err_improve": 0,
    "time": 3857.078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma ew (/ (sin t) (hypot 1.0 (/ eh (* ew (tan t))))) (* (cos t) (* eh (sin (atan (/ (/ eh (tan t)) ew)))))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.12719812031259015,
    "avg_bits_err_output": 0.12744812031259015,
    "avg_bits_err_improve": -0.0002500000000000002,
    "time": 36426.106689453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (* (/ eh ew) (tan t))))) (* (* eh (sin t)) (sin (atan (/ (* eh (- (tan t))) ew))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.12925,
    "avg_bits_err_output": 0.13113468020386565,
    "avg_bits_err_improve": -0.0018846802038656463,
    "time": 34126.95166015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (+ (* (- lambda1 lambda2) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1)))) (* (sin (* phi2 0.5)) (* (- lambda2 lambda1) (sin (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 38.41878921237882,
    "avg_bits_err_output": 0.13012478472983174,
    "avg_bits_err_improve": 38.28866442764899,
    "time": 35765.44580078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 14.75590394101239,
    "avg_bits_err_output": 0.0015402410118609202,
    "avg_bits_err_improve": 14.754363700000528,
    "time": 6175.935546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin theta) (* (sin delta) (cos phi1))) (/ (+ (- (pow (cos delta) 2.0) (pow (* (sin phi1) (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))) 2.0)) (fma (- (cbrt (pow (* (sin phi1) (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))) 2.0))) (cbrt (pow (* (sin phi1) (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))) 4.0)) (pow (* (sin phi1) (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta))))) 2.0))) (+ (cos delta) (* (sin phi1) (fma (cos delta) (sin phi1) (* (sin delta) (* (cos phi1) (cos theta)))))))))",
    "output_parens": 72,
    "avg_bits_err_input": 0.15402250659705077,
    "avg_bits_err_output": 0.1732518929439497,
    "avg_bits_err_improve": -0.019229386346898913,
    "time": 60835.019775390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (+ (- (* b b) (* b b)) (fma (* a 3.0) c 0.0)) (- (- b) (sqrt (+ (* b b) (* a (* c -3.0)))))) (* a 3.0))",
    "output_parens": 16,
    "avg_bits_err_input": 52.16219721394157,
    "avg_bits_err_output": 0.3890383468827527,
    "avg_bits_err_improve": 51.77315886705882,
    "time": 40106.437744140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.741924115096033,
    "avg_bits_err_output": 0.44540470158025947,
    "avg_bits_err_improve": 28.296519413515774,
    "time": 40776.029541015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(* (/ (fabs (fma (pow b 4.0) (* b b) (- (pow (fma b b (* c (* -3.0 a))) 3.0)))) (* (fma b b (fma b (sqrt (fma (* -3.0 a) c (* b b))) (fma (* -3.0 a) c (* b b)))) (+ (pow b 3.0) (pow (fma (* -3.0 a) c (* b b)) 1.5)))) (/ -0.3333333333333333 a))",
    "output_parens": 28,
    "avg_bits_err_input": 44.026525042560394,
    "avg_bits_err_output": 40.76617187732018,
    "avg_bits_err_improve": 3.260353165240211,
    "time": 61124.64501953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -1.32e+154) (/ (+ (* a -3.0) (* (hypot b (pow (pow (* a (* -3.0 c)) 2.0) 0.25)) (/ 3.0 (/ b a)))) (* (* a -3.0) (/ -3.0 (/ b a)))) (if (<= b 1.35e+154) (/ (fma (* c (/ -3.0 (sqrt (fma b b (* a (* -3.0 c)))))) a (fma b (/ b (sqrt (fma b b (* a (* -3.0 c))))) (- b))) (* a 3.0)) (log (pow (pow (exp a) (- b (hypot b (sqrt (* a (* -3.0 c)))))) (* -0.3333333333333333 (pow a -2.0))))))",
    "output_parens": 46,
    "avg_bits_err_input": 33.5403086642602,
    "avg_bits_err_output": 25.28374302846956,
    "avg_bits_err_improve": 8.256565635790643,
    "time": 74662.60595703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (+ (* (* (sin lambda1) (cos lambda2)) (cos phi2)) (* (cos phi2) (* (cos lambda1) (sin (- lambda2))))) (- (* (cos phi1) (sin phi2)) (+ (* (* (sin lambda1) (sin lambda2)) (* (cos phi2) (sin phi1))) (/ (* (cos lambda2) (cos lambda1)) (/ 1.0 (* (cos phi2) (sin phi1)))))))",
    "output_parens": 33,
    "avg_bits_err_input": 13.392803135743739,
    "avg_bits_err_output": 0.19974190195021324,
    "avg_bits_err_improve": 13.193061233793525,
    "time": 55474.68701171875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (/ (+ 1.0 (- (* (+ 1.0 x) (/ (+ 1.0 x) x)) x)) (/ (- -1.0 x) x)) (+ x -1.0))",
    "output_parens": 11,
    "avg_bits_err_input": 29.25925549259497,
    "avg_bits_err_output": 25.30757301919048,
    "avg_bits_err_improve": 3.951682473404489,
    "time": 55187.890380859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.01125,
    "avg_bits_err_output": 0.01125,
    "avg_bits_err_improve": 0,
    "time": 15039.029052734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (- -1.0 x)) (+ -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.255973601060752,
    "avg_bits_err_output": 0.075125,
    "avg_bits_err_improve": 14.180848601060752,
    "time": 35802.646728515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) -2e-175) (/ (* (sqrt (* F (+ A (- C (hypot B (- A C)))))) (- (sqrt (* 2.0 (fma A (* C -4.0) (* B B)))))) (- (* B B) (* 4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (sqrt (/ (* F (* 2.0 (+ A (- C (hypot B (- A C)))))) (fma B B (* -4.0 (* A C))))) (* 2.0 (* (/ F (sqrt (* (+ A (- C (hypot B (- A C)))) (* 2.0 F)))) (/ (- (- (hypot B (- A C)) C) A) (hypot B (pow (pow (* A (* C -4.0)) 2.0) 0.25)))))))",
    "output_parens": 95,
    "avg_bits_err_input": 52.337215148945475,
    "avg_bits_err_output": 38.257802934984895,
    "avg_bits_err_improve": 14.07941221396058,
    "time": 59593.623779296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.861659304921883,
    "avg_bits_err_output": 14.065273884060755,
    "avg_bits_err_improve": 15.796385420861128,
    "time": 34476.88671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (- (/ (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0)))))) (+ (pow B 2.0) (* C (* A -4.0))))) 0.0) (/ (* (* (sqrt (fma 2.0 (* B B) (* (* A C) -8.0))) (sqrt F)) (- (sqrt (+ C (+ A (hypot B (- A C))))))) (+ (* B B) (* (* A C) -4.0))) (exp (log (sqrt (/ (* (+ A (+ C (hypot B (- A C)))) (* 2.0 F)) (fma B B (* (* A C) -4.0)))))))",
    "output_parens": 55,
    "avg_bits_err_input": 52.21040211276203,
    "avg_bits_err_output": 41.125800646896955,
    "avg_bits_err_improve": 11.084601465865077,
    "time": 45932.597412109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt (* g 0.5)) (cbrt a))",
    "output_parens": 4,
    "avg_bits_err_input": 15.428865641902025,
    "avg_bits_err_output": 0.80664017421813,
    "avg_bits_err_improve": 14.622225467683895,
    "time": 19364.48876953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (* (cbrt (/ 0.5 a)) (cbrt (- (hypot g h) g))) (/ (cbrt (/ 1.0 (/ 1.0 (+ g (hypot g h))))) (cbrt (* a -2.0))))",
    "output_parens": 15,
    "avg_bits_err_input": 35.81181306384064,
    "avg_bits_err_output": 2.8123279942191672,
    "avg_bits_err_improve": 32.99948506962147,
    "time": 37249.1259765625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (* (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (/ 1.0 (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.9892646625064913,
    "avg_bits_err_output": 0.03643909844281852,
    "avg_bits_err_improve": 0.9528255640636727,
    "time": 19462.5966796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- a (log1p (+ (exp a) (expm1 b)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.7293776763925557,
    "avg_bits_err_output": 0.6291416864042744,
    "avg_bits_err_improve": 0.10023598998828132,
    "time": 11547.396240234375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (/ (/ a2 b2) (/ b1 a1)) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-289) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ a1 (/ b2 (/ a2 b1))) (if (<= (/ (* a1 a2) (* b1 b2)) 1e+308) (/ (* a1 a2) (* b1 b2)) (/ (/ a1 b1) (/ b2 a2))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.259932373714525,
    "avg_bits_err_output": 2.427228599775355,
    "avg_bits_err_improve": 8.83270377393917,
    "time": 12283.689697265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.5141795882180192,
    "avg_bits_err_output": 0.4405,
    "avg_bits_err_improve": 0.07367958821801923,
    "time": 17121.2568359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -2.0) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.072991959607606,
    "avg_bits_err_output": 0.02889624062518029,
    "avg_bits_err_improve": 53.044095718982426,
    "time": 18624.324462890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.737987692005759,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.737987692005759,
    "time": 1958.591796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (sqrt (- 1.0 (* x x))) (+ 1.0 x))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.009875,
    "avg_bits_err_improve": 0.0016249999999999997,
    "time": 10475.85205078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1259.431396484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (/ 2.0 (* r r)) (- -1.5 (* (* (* r w) (* r w)) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 12.927482184284866,
    "avg_bits_err_output": 0.3329201088228213,
    "avg_bits_err_improve": 12.594562075462045,
    "time": 39345.25830078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (+ (+ x1 (pow x1 3.0)) (* (fma (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0)) -6.0) (+ (pow x1 4.0) (* x1 x1)))))))",
    "output_parens": 39,
    "avg_bits_err_input": 0.5116336805139391,
    "avg_bits_err_output": 0.3185283257832437,
    "avg_bits_err_improve": 0.1931053547306954,
    "time": 85997.73364257812,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(/ (/ v (+ t1 u)) (- -1.0 (/ u t1)))",
    "output_parens": 5,
    "avg_bits_err_input": 17.88612866222424,
    "avg_bits_err_output": 1.4773667720982484,
    "avg_bits_err_improve": 16.408761890125994,
    "time": 9887.04541015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma (pow x 3.0) -0.12900613773279798 (* x 0.954929658551372))",
    "output_parens": 3,
    "avg_bits_err_input": 0.22938228322697118,
    "avg_bits_err_output": 0.20521768337330012,
    "avg_bits_err_improve": 0.02416459985367106,
    "time": 20703.740234375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003,
    "avg_bits_err_output": 0.003,
    "avg_bits_err_improve": 0,
    "time": 2415.044921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (* (/ (/ PI b) a) 0.5) (+ b a))",
    "output_parens": 5,
    "avg_bits_err_input": 14.76977070297973,
    "avg_bits_err_output": 0.24963477500432665,
    "avg_bits_err_improve": 14.520135927975405,
    "time": 63627.989990234375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (+ (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (* (exp (* x (- -1.0 eps))) (+ 1.0 (/ -1.0 eps)))) 2.0)",
    "output_parens": 14,
    "avg_bits_err_input": 29.50826244526362,
    "avg_bits_err_output": 29.50826244526362,
    "avg_bits_err_improve": 0,
    "time": 44175.8896484375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.027875,
    "avg_bits_err_output": 0.005375,
    "avg_bits_err_improve": 0.0225,
    "time": 25519.9755859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t))))) (+ 2.0 (+ (+ 1.0 (pow (+ 2.0 (/ -2.0 (+ 1.0 t))) 2.0)) -1.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.03175,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 0.02475,
    "time": 46720.63232421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.033625,
    "avg_bits_err_output": 0.05675,
    "avg_bits_err_improve": -0.023125,
    "time": 21180.48876953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3345.308349609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3655.5205078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 5512.42724609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.869208202763694,
    "avg_bits_err_output": 0.258875,
    "avg_bits_err_improve": 7.6103332027636945,
    "time": 23647.757080078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.704921750259623,
    "avg_bits_err_output": 7.704921750259623,
    "avg_bits_err_improve": 0,
    "time": 21283.0380859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (fma x 2.0 eps))",
    "output_parens": 2,
    "avg_bits_err_input": 16.39349772541454,
    "avg_bits_err_output": 0.012625,
    "avg_bits_err_improve": 16.38087272541454,
    "time": 10332.809326171875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 80.0) x) (* x 0.125)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.549624384460356,
    "avg_bits_err_output": 0.3409554515658354,
    "avg_bits_err_improve": 3.2086689328945206,
    "time": 27300.410400390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.440684010593156,
    "avg_bits_err_output": 0.01905676718957333,
    "avg_bits_err_improve": 15.421627243403583,
    "time": 9373.49609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.83574125539821,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.83574125539821,
    "time": 5406.29541015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.76474219334192,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 38.76349219334192,
    "time": 3728.547119140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.300125,
    "avg_bits_err_improve": 63.699875,
    "time": 64019.8408203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.843245613873904,
    "avg_bits_err_output": 0.3220943609377705,
    "avg_bits_err_improve": 61.521151252936136,
    "time": 13050.606201171875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (- INFINITY)) (* (+ b (hypot (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0)))))) b)) (/ -0.5 a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 1e+296) (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) (* (/ -0.5 a) (+ b (hypot (pow (pow (* a (* c -4.0)) 2.0) 0.25) b)))))",
    "output_parens": 53,
    "avg_bits_err_input": 33.777319510496454,
    "avg_bits_err_output": 25.288381270790477,
    "avg_bits_err_improve": 8.488938239705977,
    "time": 40863.755859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -2.8e+158) (/ (- (hypot (* (pow (* a c) 0.25) (pow (* 16.0 (* a c)) 0.25)) b) b) (* a 2.0)) (if (<= b 3.4e-299) (/ (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (* a 2.0)) (if (<= b 1.32e+15) (* (* c (/ (* a -4.0) a)) (/ 0.5 (+ b (hypot (sqrt (* a (* c -4.0))) b)))) (/ 1.0 (* (/ a (* c (* a -4.0))) (* 2.0 (+ b (hypot b (pow (* 16.0 (pow (* a c) 2.0)) 0.25)))))))))",
    "output_parens": 46,
    "avg_bits_err_input": 33.50072855114043,
    "avg_bits_err_output": 15.918819270658565,
    "avg_bits_err_improve": 17.581909280481867,
    "time": 48073.10498046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1708.40380859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.21935763276731,
    "avg_bits_err_output": 0.01025,
    "avg_bits_err_improve": 40.209107632767314,
    "time": 6582.227294921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- x y) (* (hypot x y) (/ (hypot x y) (+ x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 20.589307546808183,
    "avg_bits_err_output": 0.03614661719245796,
    "avg_bits_err_improve": 20.553160929615725,
    "time": 10590.987060546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6405157901204688,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6405157901204688,
    "time": 26199.61181640625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.034625,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.034125,
    "time": 7048.814697265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ b a)) (* a (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.024188721875540872,
    "avg_bits_err_output": 0.017448120312590146,
    "avg_bits_err_improve": 0.0067406015629507265,
    "time": 5229.40673828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.012375,
    "avg_bits_err_output": 0.012375,
    "avg_bits_err_improve": 0,
    "time": 1843.507080078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000375,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 0,
    "time": 1035.006103515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ (+ d c) (+ e (+ b a)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39340601562950744,
    "avg_bits_err_output": 0.248,
    "avg_bits_err_improve": 0.14540601562950745,
    "time": 12495.987060546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.811700122557763,
    "avg_bits_err_output": 0.006375,
    "avg_bits_err_improve": 29.805325122557765,
    "time": 9862.080078125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.456523389874434,
    "avg_bits_err_output": 0.30016748125036063,
    "avg_bits_err_improve": 24.15635590862407,
    "time": 13001.620361328125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(* (* 3.0 (log (cbrt (exp (pow (cbrt (/ (- x (sin x)) (tan x))) 2.0))))) (cbrt (- (/ x (tan x)) (cos x))))",
    "output_parens": 16,
    "avg_bits_err_input": 29.421632279398324,
    "avg_bits_err_output": 29.41325186267211,
    "avg_bits_err_improve": 0.008380416726215145,
    "time": 43917.644287109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.005375,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.00475,
    "time": 2209.14404296875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.1) (* 100.0 (- (/ 1.0 (/ (- i) (* (- n) (pow (+ 1.0 (/ i n)) n)))) (/ n i))) (* (/ 100.0 i) (* n (+ (pow (exp n) (log1p (/ i n))) -1.0)))))",
    "output_parens": 42,
    "avg_bits_err_input": 47.941282953079444,
    "avg_bits_err_output": 10.248192159949868,
    "avg_bits_err_improve": 37.69309079312958,
    "time": 34331.68994140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (or (<= c -1.75e+105) (not (<= c 45.0))) (+ (/ (* c (/ a (hypot c d))) (hypot c d)) (* d (* b (pow (hypot c d) -2.0)))) (+ (* (pow (hypot c d) -2.0) (* c a)) (fma (/ b (hypot c d)) (* d (/ 1.0 (hypot c d))) 0.0)))",
    "output_parens": 26,
    "avg_bits_err_input": 25.80754034068526,
    "avg_bits_err_output": 8.282180556712062,
    "avg_bits_err_improve": 17.5253597839732,
    "time": 26764.244140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(/ (- (/ b (/ (hypot c d) c)) (/ a (/ (hypot c d) d))) (hypot c d))",
    "output_parens": 9,
    "avg_bits_err_input": 25.95044423935469,
    "avg_bits_err_output": 0.4640714400129655,
    "avg_bits_err_improve": 25.486372799341726,
    "time": 27145.72802734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.035125,
    "avg_bits_err_output": 0.023646444137762374,
    "avg_bits_err_improve": 0.01147855586223763,
    "time": 23966.46923828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ 1.0 (/ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (- 1.0 (log (exp (+ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)) -1.0))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 13.579489360709896,
    "avg_bits_err_output": 12.161046786570491,
    "avg_bits_err_improve": 1.418442574139405,
    "time": 62655.263427734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (/ 1.0 (sqrt (/ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (- 1.0 (log (exp (+ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)) -1.0))))))))",
    "output_parens": 19,
    "avg_bits_err_input": 13.63019050459329,
    "avg_bits_err_output": 12.172315259916537,
    "avg_bits_err_improve": 1.4578752446767531,
    "time": 56164.294921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(+ (fma (* (cos (* uy (* 2.0 PI))) (sqrt (+ 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* maxCos (+ ux -1.0))))))) xi (* (sin (* uy (* 2.0 PI))) (* yi (sqrt (+ 1.0 (* (* ux (* (- 1.0 ux) maxCos)) (* ux (* maxCos (+ ux -1.0))))))))) (* (* (- 1.0 ux) maxCos) (* ux zi)))",
    "output_parens": 33,
    "avg_bits_err_input": 0.33401348843591894,
    "avg_bits_err_output": 0.3297950645326108,
    "avg_bits_err_improve": 0.004218423903308122,
    "time": 64095.246337890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.19987260553560118,
    "avg_bits_err_output": 0.19585620312590143,
    "avg_bits_err_improve": 0.004016402409699749,
    "time": 40458.863037109375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (pow (+ (/ 1.0 u1) -1.0) -0.5) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.5308800480580345,
    "avg_bits_err_output": 0.544270561696205,
    "avg_bits_err_improve": -0.013390513638170565,
    "time": 26675.6923828125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.3397218907425026,
    "avg_bits_err_output": 0.3397218907425026,
    "avg_bits_err_improve": 0,
    "time": 26211.30810546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ (- 1.0 u) (+ 1.0 (exp (/ 1.0 (/ s PI))))))) -1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.3406485254221038,
    "avg_bits_err_output": 0.34324344209800306,
    "avg_bits_err_improve": -0.0025949166758992837,
    "time": 33061.317626953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05871110042782082,
    "avg_bits_err_output": 0.04649475208758201,
    "avg_bits_err_improve": 0.012216348340238811,
    "time": 24971.53857421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (+ (+ (* s (expm1 (log1p (exp (/ (fabs x) s))))) (/ s (exp (/ (fabs x) s)))) (* s 2.0)))",
    "output_parens": 14,
    "avg_bits_err_input": 0.16424616026081912,
    "avg_bits_err_output": 0.14612069359806817,
    "avg_bits_err_improve": 0.018125466662750944,
    "time": 28572.42626953125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6632781777917213,
    "avg_bits_err_output": 0.6632781777917213,
    "avg_bits_err_improve": 0,
    "time": 28084.55908203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.1462528737561116,
    "avg_bits_err_output": 0.14301424957475212,
    "avg_bits_err_improve": 0.0032386241813594785,
    "time": 34152.420166015625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.2895482299233305,
    "avg_bits_err_output": 0.3510596318617779,
    "avg_bits_err_improve": 1.9384885980615527,
    "time": 36519.85498046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_O (/ sinTheta_i v)))) (/ (* -0.5 (/ (/ -1.0 v) (/ v cosTheta_i))) (sinh (/ 1.0 v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.46097934380132244,
    "avg_bits_err_output": 0.3912571073177092,
    "avg_bits_err_improve": 0.06972223648361325,
    "time": 45106.9033203125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (pow (pow (pow (exp (+ (/ (- (* cosTheta_i cosTheta_O) (fma sinTheta_i sinTheta_O 1.0)) v) 0.6931)) 0.16666666666666666) 2.0) 3.0) (/ 0.5 v))",
    "output_parens": 11,
    "avg_bits_err_input": 0.10302601290249022,
    "avg_bits_err_output": 0.111415440394096,
    "avg_bits_err_improve": -0.008389427491605775,
    "time": 35900.57421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4681064950266719,
    "avg_bits_err_output": 0.42144753909128235,
    "avg_bits_err_improve": 0.046658955935389546,
    "time": 44821.812255859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3060568408883189,
    "avg_bits_err_output": 0.5422085627755834,
    "avg_bits_err_improve": 0.7638482781127355,
    "time": 35397.666748046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.538021244643698,
    "avg_bits_err_output": 0.200375,
    "avg_bits_err_improve": 12.337646244643699,
    "time": 25735.51025390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (* 0.75 (exp (/ (- r) (* s 3.0)))) (* (* PI (* r 6.0)) (* s (* s (/ 1.0 s))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.14880376278430135,
    "avg_bits_err_output": 0.15530051367806877,
    "avg_bits_err_improve": -0.006496750893767417,
    "time": 73012.26196289062,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.8751437394991366,
    "avg_bits_err_output": 0.7068873691129368,
    "avg_bits_err_improve": 0.16825637038619978,
    "time": 38447.47802734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (/ (/ (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) cosTheta) (sqrt PI)) (pow (exp cosTheta) cosTheta))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.7016228866725667,
    "avg_bits_err_output": 0.5339974909401185,
    "avg_bits_err_improve": 0.16762539573244817,
    "time": 28058.544677734375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (pow (log1p (- u1)) 2.0) 0.25) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.571038820056883,
    "avg_bits_err_output": 0.5307458788767088,
    "avg_bits_err_improve": 13.040292941180173,
    "time": 21022.5068359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p u1) (log1p (* u1 (- u1))))) (cos (* (* 2.0 PI) u2)))",
    "output_parens": 10,
    "avg_bits_err_input": 13.618980245072857,
    "avg_bits_err_output": 0.35084150269245223,
    "avg_bits_err_improve": 13.268138742380405,
    "time": 21743.949462890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* alpha (- alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.342785358530046,
    "avg_bits_err_output": 0.3293468046888521,
    "avg_bits_err_improve": 14.013438553841194,
    "time": 22983.515869140625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (* (log1p (- u0)) (- alphay)) (/ (+ (* (/ sin2phi alphay) (* alphax alphax)) (* alphay cos2phi)) (* alphax alphax)))",
    "output_parens": 12,
    "avg_bits_err_input": 12.85168414432041,
    "avg_bits_err_output": 0.47746009410726664,
    "avg_bits_err_improve": 12.374224050213144,
    "time": 26877.33935546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -1e+157) (- (* PI l) (* (exp (log (pow F -2.0))) (fabs (tan (* PI l))))) (if (<= (* PI l) -2e+23) (+ (* PI l) (/ (/ -1.0 F) (/ F (tan (/ (pow (* PI l) 2.0) (log1p (expm1 (* PI l)))))))) (if (<= (* PI l) 1e-38) (- (* PI l) (/ (/ (tan (* PI l)) F) F)) (if (<= (* PI l) 2e+150) (+ (* PI l) (/ (/ -1.0 F) (/ F (tan (/ (pow (* PI l) 2.0) (log1p (expm1 (* PI l)))))))) (if (<= (* PI l) 2e+197) (- (* PI l) (/ (/ (tan (/ (pow (* PI l) 1.5) (/ (pow (* PI l) 2.0) (pow (* PI l) 1.5)))) F) F)) (if (<= (* PI l) 1e+234) (- (* PI l) (* (tan (* PI l)) (exp (- (* -6.0 (log F)) (log (pow F -4.0)))))) (- (* PI l) (/ (sqrt (pow (/ (tan (* PI l)) F) 2.0)) F))))))))",
    "output_parens": 89,
    "avg_bits_err_input": 16.58024427079044,
    "avg_bits_err_output": 6.359298060240823,
    "avg_bits_err_improve": 10.220946210549618,
    "time": 42989.441650390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.20717164837040855,
    "avg_bits_err_output": 0.14606544524450715,
    "avg_bits_err_improve": 0.0611062031259014,
    "time": 22486.97216796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 14.041987773608499,
    "avg_bits_err_output": 10.676199848767698,
    "avg_bits_err_improve": 3.3657879248408005,
    "time": 44683.26318359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(/ (- (log (tanh (* PI (* f 0.25))))) (* PI -0.25))",
    "output_parens": 7,
    "avg_bits_err_input": 61.52293558095672,
    "avg_bits_err_output": 0.6043592146502431,
    "avg_bits_err_improve": 60.918576366306475,
    "time": 41198.459716796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(* t (/ (pow 0.5 -0.5) (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ 1.0 x) (+ x -1.0)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 42.9698256132607,
    "avg_bits_err_output": 20.49533426449275,
    "avg_bits_err_improve": 22.474491348767952,
    "time": 51233.4326171875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.155389877793806,
    "avg_bits_err_output": 0.2156984968798676,
    "avg_bits_err_improve": 3.9396913809139384,
    "time": 26156.746337890625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (pow (sqrt (hypot 1.0 (* l (* (/ 2.0 Om) (hypot (sin kx) (sin ky)))))) -2.0))))",
    "output_parens": 12,
    "avg_bits_err_input": 1.0022106035144864,
    "avg_bits_err_output": 0.00625,
    "avg_bits_err_improve": 0.9959606035144865,
    "time": 12966.946044921875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ (sqrt 2.0) (/ l t)))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.401775337236556,
    "avg_bits_err_output": 1.0018042014578696,
    "avg_bits_err_improve": 9.399971135778687,
    "time": 29512.4638671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -2e-49) (sqrt (* (* U (* 2.0 n)) (+ (- t (* 2.0 (* l (/ l Om)))) (* (* n (pow (/ l Om) 2.0)) (- U* U))))) (if (<= U -8.8e-302) (sqrt (* (* 2.0 n) (* U (fma (/ l Om) (+ (* l (/ (- U* U) (/ Om n))) (* l -2.0)) t)))) (* (sqrt (* 2.0 (* n (fma (/ l Om) (fma n (* (/ l Om) (- U* U)) (* l -2.0)) t)))) (sqrt U))))",
    "output_parens": 42,
    "avg_bits_err_input": 34.784326591242504,
    "avg_bits_err_output": 27.43659154831279,
    "avg_bits_err_improve": 7.347735042929713,
    "time": 53509.923095703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= l -1e-28) (not (<= l 4.5e+116))) (* 2.0 (* (/ (/ l (* k (sin k))) (* (tan k) t)) (/ l k))) (/ (/ (/ 2.0 (* k t)) (/ k l)) (* (tan k) (/ (sin k) l))))",
    "output_parens": 23,
    "avg_bits_err_input": 47.17592741129102,
    "avg_bits_err_output": 1.391695291684297,
    "avg_bits_err_improve": 45.78423211960672,
    "time": 101573.693359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -3.05e-229) (not (<= t 1.46e-174))) (/ 2.0 (* (* t (* (sin k) (/ t l))) (/ (* (tan k) (+ 2.0 (pow (/ k t) 2.0))) (/ l t)))) (/ 2.0 (pow (* (sin k) (* (sqrt (/ t (cos k))) (* (/ t l) (hypot 1.0 (hypot 1.0 (/ k t)))))) 2.0)))",
    "output_parens": 31,
    "avg_bits_err_input": 32.06283414055706,
    "avg_bits_err_output": 12.028199080261862,
    "avg_bits_err_improve": 20.034635060295194,
    "time": 117114.65991210938,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (* (hypot a1 a2) (* (hypot a1 a2) (sqrt 0.5))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5179001906453743,
    "avg_bits_err_output": 0.46383646876983314,
    "avg_bits_err_improve": 0.05406372187554115,
    "time": 29746.854248046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (/ (sqrt (* 2.0 (* PI n))) (pow k 0.5)) (pow (* 2.0 (* PI n)) (* k 0.5)))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5012922630313916,
    "avg_bits_err_output": 0.3490705334313177,
    "avg_bits_err_improve": 0.1522217296000739,
    "time": 27532.001220703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (sinh l) (* 2.0 J)) (cos (/ K 2.0))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.579718509402472,
    "avg_bits_err_output": 0.12799060156295072,
    "avg_bits_err_improve": 17.451727907839523,
    "time": 23204.637939453125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(log (pow (exp (cos (- (* (+ m n) (* 0.5 K)) M))) (exp (- (- (- m n) l) (pow (- (* (+ m n) 0.5) M) 2.0)))))",
    "output_parens": 16,
    "avg_bits_err_input": 14.906355391942377,
    "avg_bits_err_output": 1.355682353735818,
    "avg_bits_err_improve": 13.55067303820656,
    "time": 33461.361572265625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.52152124062518,
    "avg_bits_err_output": 8.09702124062518,
    "avg_bits_err_improve": 9.4245,
    "time": 35914.5634765625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= M -5e+15) (* w0 (sqrt (+ 1.0 (/ M (/ (* l (/ -4.0 (* M (/ D d)))) (* (/ D d) h)))))) (* w0 (sqrt (+ 1.0 (* (* M (/ D d)) (* h (* (* (/ D d) (/ M l)) -0.25)))))))",
    "output_parens": 24,
    "avg_bits_err_input": 14.68144798762942,
    "avg_bits_err_output": 9.079782695275675,
    "avg_bits_err_improve": 5.601665292353745,
    "time": 47221.432373046875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -2e+220) (/ (* (/ c0 (sqrt (- V))) (sqrt (- A))) (sqrt l)) (if (<= (* V l) -1e-264) (/ (* c0 (sqrt (- A))) (sqrt (* V (- l)))) (if (<= (* V l) 0.0) (* c0 (/ (sqrt (/ A V)) (sqrt l))) (* c0 (/ (sqrt A) (sqrt (* V l)))))))",
    "output_parens": 34,
    "avg_bits_err_input": 19.267624367244505,
    "avg_bits_err_output": 7.003556121952779,
    "avg_bits_err_improve": 12.264068245291725,
    "time": 37386.58984375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 0.0) (* (/ c0 (* 2.0 w)) (+ (* (/ c0 (/ w d)) (/ d (* D (* h D)))) (sqrt (- (pow (* (/ c0 (/ w d)) (/ d (* D (* h D)))) 2.0) (* M M))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (fma (/ (* c0 d) (* h (* w D))) (/ d D) (* (sqrt (fma (/ (/ c0 w) h) (pow (/ d D) 2.0) M)) (sqrt (- (* (/ (/ c0 w) h) (pow (/ d D) 2.0)) M))))) (log (pow (pow (exp c0) (/ 0.5 w)) (* M (/ (- M) (- (hypot (/ (* c0 (/ d w)) (/ D (/ d (* h D)))) (/ (* M M) M)) (/ (* c0 (/ d w)) (/ D (/ d (* h D)))))))))))",
    "output_parens": 123,
    "avg_bits_err_input": 59.816706543722134,
    "avg_bits_err_output": 31.137780245473223,
    "avg_bits_err_improve": 28.67892629824891,
    "time": 84214.87133789062,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* d 2.0)) 2.0)) (/ h l)))) -5e-231) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (pow (* (/ 0.5 d) (* (* M D) (sqrt (/ (* h 0.5) l)))) 2.0))) (if (or (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* d 2.0)) 2.0)) (/ h l)))) 0.0) (not (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (- 1.0 (* (* 0.5 (pow (/ (* M D) (* d 2.0)) 2.0)) (/ h l)))) 4e+254))) (fabs (* (/ d (sqrt (* h l))) (+ 1.0 (* h (* (pow (/ (* 0.5 (* M D)) d) 2.0) (/ -0.5 l)))))) (* (sqrt (/ d h)) (* (sqrt (/ d l)) (+ 1.0 (* (* (/ h l) (pow (* D (* M (/ 0.5 d))) 2.0)) -0.5))))))",
    "output_parens": 91,
    "avg_bits_err_input": 26.594621883612902,
    "avg_bits_err_output": 13.610793767960836,
    "avg_bits_err_improve": 12.983828115652067,
    "time": 100391.92138671875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(* (/ (/ 1.0 (/ 1.0 (+ 0.25 (/ -0.25 (fma x x 1.0))))) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (/ 1.0 (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))",
    "output_parens": 16,
    "avg_bits_err_input": 15.363753683668655,
    "avg_bits_err_output": 14.860826623802588,
    "avg_bits_err_improve": 0.5029270598660673,
    "time": 38405.511474609375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(* (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (pow (fma v (* v -6.0) 2.0) -0.5))",
    "output_parens": 8,
    "avg_bits_err_input": 0.9814481203125902,
    "avg_bits_err_output": 0.014975919365257202,
    "avg_bits_err_improve": 0.966472200947333,
    "time": 5560.985107421875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (sqrt (fma v (* v -6.0) 2.0)))) (* (- 1.0 (* v v)) t))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4544076372987831,
    "avg_bits_err_output": 0.10779208499187982,
    "avg_bits_err_improve": 0.3466155523069033,
    "time": 17491.985595703125,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (/ (sqrt 2.0) 4.0) (* (sqrt (+ 1.0 (* (* v v) -3.0))) (- 1.0 (* v v))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.012719360937770435,
    "avg_bits_err_output": 0.01127124062518029,
    "avg_bits_err_improve": 0.0014481203125901454,
    "time": 12945.394775390625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(exp (log (acos (/ (fma (* v v) -5.0 1.0) (fma v v -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5944290227989761,
    "avg_bits_err_output": 0.594353751194172,
    "avg_bits_err_improve": 7.527160480413908e-05,
    "time": 50655.749755859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (* k (/ (- -10.0 k) a))))",
    "output_parens": 8,
    "avg_bits_err_input": 1.9715034027665266,
    "avg_bits_err_output": 0.30637525217834755,
    "avg_bits_err_improve": 1.665128150588179,
    "time": 25195.6865234375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (* (/ 1.0 (+ 1.0 (exp (/ (+ (+ Vef EDonor) (- mu Ec)) KbT)))) NdChar) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.015878218412193564,
    "avg_bits_err_output": 0.01788986227612345,
    "avg_bits_err_improve": -0.0020116438639298864,
    "time": 8454.052978515625,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18413233125324513,
    "avg_bits_err_output": 0.011752443751081738,
    "avg_bits_err_improve": 0.1723798875021634,
    "time": 10883.55810546875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.19084249726654834,
    "avg_bits_err_output": 0.023722008201434257,
    "avg_bits_err_improve": 0.1671204890651141,
    "time": 27403.584716796875,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (pow (hypot a b) 4.0) (fma a (+ (* a (* a -4.0)) (* a 4.0)) (fma (* b b) (fma a 4.0 12.0) -1.0)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.19892162183657477,
    "avg_bits_err_output": 0.03033230849788827,
    "avg_bits_err_improve": 0.16858931333868651,
    "time": 27519.068359375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (* x (pow (+ (* x x) (* 4.0 (* p p))) -0.5)))))",
    "output_parens": 9,
    "avg_bits_err_input": 13.28311631048599,
    "avg_bits_err_output": 13.52964027129589,
    "avg_bits_err_improve": -0.24652396080989902,
    "time": 18355.99755859375,
    "seed": 26,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.871881448441904,
    "avg_bits_err_output": 0.01525,
    "avg_bits_err_improve": 41.8566314484419,
    "time": 6533.27099609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= x -0.02) (/ (- (sin x) x) (fma x (/ (tan x) x) (- x))) (if (<= x 1.42e-8) (/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (/ (- x (pow (cbrt (/ x (/ (tan x) x))) 3.0)) (/ x (tan x)))) (/ (+ (- x (tan x)) (* (sin x) (/ (- (tan x) x) x))) (* (- (tan x) x) (/ (fma (sin x) (/ 1.0 (cos x)) (- x)) x)))))",
    "output_parens": 46,
    "avg_bits_err_input": 31.219757239076408,
    "avg_bits_err_output": 26.227304381494694,
    "avg_bits_err_improve": 4.992452857581714,
    "time": 38738.486572265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1.26e+157) (/ (- (hypot b_2 (sqrt (* c (- a)))) b_2) a) (if (<= b_2 1.92e-221) (/ (fabs (- (sqrt (- (* b_2 b_2) (* c a))) b_2)) a) (if (<= b_2 2.05e+172) (* (/ 1.0 a) (/ (* c a) (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))))) (if (<= b_2 1.5e+278) (/ (- c) (+ b_2 (hypot b_2 (sqrt (* c a))))) (/ (fabs (/ (* c a) (+ b_2 (hypot b_2 (sqrt (* c (- a))))))) a)))))",
    "output_parens": 46,
    "avg_bits_err_input": 33.3946016815262,
    "avg_bits_err_output": 18.572659026888466,
    "avg_bits_err_improve": 14.82194265463773,
    "time": 30498.60986328125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -6e-106) (/ c (- (hypot b_2 (pow (pow (* c a) 2.0) 0.25)) b_2)) (if (<= b_2 1e+143) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a) (/ (fma b_2 (- -1.0 (/ b_2 (hypot b_2 (sqrt (* c a))))) (/ a (/ (hypot b_2 (sqrt (* c a))) c))) a)))",
    "output_parens": 29,
    "avg_bits_err_input": 33.82572493381178,
    "avg_bits_err_output": 14.812082226732228,
    "avg_bits_err_improve": 19.013642707079548,
    "time": 27605.960205078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (/ (sin x) x) (/ x (tan (* x 0.5))))",
    "output_parens": 6,
    "avg_bits_err_input": 31.760817682830556,
    "avg_bits_err_output": 0.12425549803990978,
    "avg_bits_err_improve": 31.636562184790645,
    "time": 24080.929443359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (/ 1.0 (exp (/ (log1p x) (- n)))) (pow x (/ 1.0 n)))",
    "output_parens": 8,
    "avg_bits_err_input": 32.572839008559924,
    "avg_bits_err_output": 32.31609547975021,
    "avg_bits_err_improve": 0.2567435288097144,
    "time": 44503.355712890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.759153922008,
    "avg_bits_err_output": 0.023875,
    "avg_bits_err_improve": 29.735278922008,
    "time": 17441.1181640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (* (- -1.0 x) (pow (- -1.0 x) -2.0)) x)",
    "output_parens": 5,
    "avg_bits_err_input": 14.891865061230554,
    "avg_bits_err_output": 0.03764624062518029,
    "avg_bits_err_improve": 14.854218820605373,
    "time": 9319.276611328125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -6.6e-61) (fma (+ -1.0 (cos eps)) (cos x) (* (sin x) (- (sin eps)))) (if (<= x 9.5e-68) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (fma (sin x) (- (sin eps)) (* (cos x) (+ -1.0 (cos eps))))))",
    "output_parens": 28,
    "avg_bits_err_input": 39.967193054080916,
    "avg_bits_err_output": 0.8483892086446582,
    "avg_bits_err_improve": 39.118803845436254,
    "time": 38152.822998046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (+ (/ (+ 1.0 x) (cbrt (+ 1.0 x))) (- (/ x (cbrt x)) (* (cbrt (+ 1.0 x)) (cbrt (- x))))))",
    "output_parens": 14,
    "avg_bits_err_input": 30.00037727883092,
    "avg_bits_err_output": 0.21763273827840915,
    "avg_bits_err_improve": 29.78274454055251,
    "time": 22985.01708984375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 29.610853563576264,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 29.610728563576263,
    "time": 12305.9189453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (pow (* a c) 0.25) (pow (* (* a c) 16.0) 0.25))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -1e-220) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (/ (pow (/ (+ b (hypot b (sqrt (* a (* c -4.0))))) (fma a (* c -4.0) (- (* b b) (* b b)))) -1.0) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 1e+300) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (/ 0.5 (/ a (- (hypot b (* (sqrt a) (sqrt (* c -4.0)))) b)))))))",
    "output_parens": 89,
    "avg_bits_err_input": 33.953378994917635,
    "avg_bits_err_output": 23.277886608286067,
    "avg_bits_err_improve": 10.675492386631568,
    "time": 40756.68994140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -5e-136) (* -0.5 (/ (+ b (hypot (/ (* 2.0 (sqrt (fabs a))) (/ (sqrt (fabs c)) (fabs c))) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (* -0.5 (/ (/ (fma a (* c -4.0) 0.0) (- (sqrt (fma a (* c -4.0) (* b b))) b)) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (fabs c)) (sqrt (* 4.0 (fabs a)))) b)) a))))",
    "output_parens": 54,
    "avg_bits_err_input": 33.98620127500834,
    "avg_bits_err_output": 10.435478877342204,
    "avg_bits_err_improve": 23.550722397666135,
    "time": 38187.596923828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.454338070962,
    "avg_bits_err_output": 0.000771240625180289,
    "avg_bits_err_improve": 61.453566830336825,
    "time": 13726.584228515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(* (cbrt (pow (+ (log1p n) (fabs (fma n (log (/ (+ n 1.0) n)) -1.0))) 2.0)) (cbrt (+ (log1p n) (fma n (log (/ (+ n 1.0) n)) -1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 63.00612660175783,
    "avg_bits_err_output": 42.62810418199205,
    "avg_bits_err_improve": 20.378022419765777,
    "time": 45396.1298828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.77575192202896,
    "avg_bits_err_output": 0.006375,
    "avg_bits_err_improve": 58.76937692202896,
    "time": 13788.873779296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (fma (- (cos x)) x (sin x)) x) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 59.955196340111364,
    "avg_bits_err_output": 59.93065159090769,
    "avg_bits_err_improve": 0.02454474920367744,
    "time": 43483.88720703125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (* (/ (expm1 (* eps b)) (expm1 (* eps (+ b a)))) (/ (expm1 (* eps a)) eps)))",
    "output_parens": 11,
    "avg_bits_err_input": 60.40087358858221,
    "avg_bits_err_output": 29.035019109147594,
    "avg_bits_err_improve": 31.365854479434613,
    "time": 35914.613037109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 42.19630522812508,
    "avg_bits_err_output": 0.011268857240317356,
    "avg_bits_err_improve": 42.18503637088476,
    "time": 6393.76416015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.820127470369236,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.819252470369236,
    "time": 3294.106201171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.66894960581914,
    "avg_bits_err_output": 0.018188651651654526,
    "avg_bits_err_improve": 29.650760954167485,
    "time": 17117.699951171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (/ (fma (* (pow (exp x) 4.0) (fma (exp x) 2.0 -3.0)) (fma (exp x) 2.0 -3.0) -1.0) (fma (pow (exp x) 2.0) (fma (exp x) 2.0 -3.0) -1.0)) (* (exp x) (fma (exp x) 2.0 1.0)))",
    "output_parens": 19,
    "avg_bits_err_input": 30.426038065991328,
    "avg_bits_err_output": 30.162543691072283,
    "avg_bits_err_improve": 0.2634943749190448,
    "time": 43862.98095703125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma (/ (+ x (* 2.0 (- 1.0 x))) x) (- -1.0 x) (- 1.0 x)) (* (- 1.0 x) (+ 1.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 10.026637176608501,
    "avg_bits_err_output": 10.026374603808744,
    "avg_bits_err_improve": 0.00026257279975716585,
    "time": 54227.360107421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (or (<= x -9.5e-151) (not (<= x 4e-121))) (/ (+ (tan eps) (- (* (/ (- (pow (tan x) 2.0) (pow (tan eps) 2.0)) (- 1.0 (* (tan x) (tan eps)))) (/ (cos x) (sin x))) (tan x))) (* (/ (cos x) (sin x)) (- (tan x) (tan eps)))) (- (* (+ (tan x) (tan eps)) (/ 1.0 (- 1.0 (* (tan x) (tan eps))))) (tan x)))",
    "output_parens": 42,
    "avg_bits_err_input": 37.16310756923978,
    "avg_bits_err_output": 17.6712235221791,
    "avg_bits_err_improve": 19.491884047060676,
    "time": 42257.140869140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.11088690925882,
    "avg_bits_err_output": 0.13165112812734384,
    "avg_bits_err_improve": 29.979235781131475,
    "time": 22757.14794921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (cos x) (sin eps) (/ (* (pow (sin eps) 2.0) (sin x)) (- -1.0 (cos eps))))",
    "output_parens": 10,
    "avg_bits_err_input": 37.574983091242494,
    "avg_bits_err_output": 0.3443831505515885,
    "avg_bits_err_improve": 37.23059994069091,
    "time": 25992.27099609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.36414428848915,
    "avg_bits_err_output": 0.11858496250072116,
    "avg_bits_err_improve": 19.245559325988427,
    "time": 20865.412841796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 14.865302624446377,
    "avg_bits_err_output": 0.374106242340501,
    "avg_bits_err_improve": 14.491196382105876,
    "time": 17285.334716796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.399025438664076,
    "avg_bits_err_output": 1.263901333936852,
    "avg_bits_err_improve": 28.135124104727225,
    "time": 25541.286376953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (/ (* m (- 1.0 m)) v) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07928328632589335,
    "avg_bits_err_output": 0.07928328632589335,
    "avg_bits_err_improve": 0,
    "time": 37808.995849609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(* (* a b) (* a (- b)))",
    "output_parens": 4,
    "avg_bits_err_input": 16.35089717574628,
    "avg_bits_err_output": 0.3145334593805891,
    "avg_bits_err_improve": 16.036363716365692,
    "time": 20612.7763671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (+ (* (cos (+ 1.0 (* PI (* angle 0.005555555555555556)))) (cos 1.0)) (* (sin (+ 1.0 (* PI (* angle 0.005555555555555556)))) (sin 1.0)))) 2.0) (pow (* b (sin (* 0.005555555555555556 (* PI angle)))) 2.0))",
    "output_parens": 21,
    "avg_bits_err_input": 20.189043207596974,
    "avg_bits_err_output": 20.19738858432486,
    "avg_bits_err_improve": -0.008345376727884712,
    "time": 48031.404052734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (+ b a) (* (* (sin (* 2.0 (* PI (* angle 0.005555555555555556)))) 0.5) (- b a))))",
    "output_parens": 10,
    "avg_bits_err_input": 31.20189951601392,
    "avg_bits_err_output": 21.057261112131002,
    "avg_bits_err_improve": 10.144638403882919,
    "time": 44064.889892578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (* angle 0.005555555555555556) PI))) 2.0) (pow (* b (cos (* angle (* 0.005555555555555556 PI)))) 2.0))",
    "output_parens": 11,
    "avg_bits_err_input": 19.956372670681894,
    "avg_bits_err_output": 19.936494869833712,
    "avg_bits_err_improve": 0.019877800848181693,
    "time": 45084.450927734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (/ m (/ (/ v m) (- 1.0 m))) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17507928248159613,
    "avg_bits_err_output": 0.16912520351258203,
    "avg_bits_err_improve": 0.005954078969014093,
    "time": 26055.623291015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3109950042093892,
    "avg_bits_err_output": 0.30797442312357537,
    "avg_bits_err_improve": 0.0030205810858138227,
    "time": 40749.768310546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(* (sin v) (/ e (+ 1.0 (* e (cos v)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1321887218755409,
    "avg_bits_err_output": 0.130136842188131,
    "avg_bits_err_improve": 0.0020518796874098855,
    "time": 22905.156982421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (fma (cos phi2) (* (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda1) (cos lambda2))) (cos phi1)) (* (sin phi1) (sin phi2)))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 17.180040983176863,
    "avg_bits_err_output": 3.996429428357507,
    "avg_bits_err_improve": 13.183611554819356,
    "time": 43472.9677734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* (fma c (* a -4.0) (* b (- b (sqrt (fma c (* a -4.0) (* b b)))))) (/ (* (* b b) (pow (* b (sqrt (fma c (* a -4.0) (* b b)))) -3.0)) (* b (+ (/ (pow b -2.0) (fma c (* a -4.0) (* b b))) (* 0.0 (/ (pow (fma c (* a -4.0) (* b b)) -0.5) b)))))) (* a 2.0))",
    "output_parens": 33,
    "avg_bits_err_input": 52.74936595178498,
    "avg_bits_err_output": 45.35594235780471,
    "avg_bits_err_improve": 7.393423593980273,
    "time": 55622.955322265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (* (* a (* c -4.0)) (/ 1.0 (+ b (sqrt (+ (* a (* c -4.0)) (* b b)))))) (/ 0.5 a))",
    "output_parens": 12,
    "avg_bits_err_input": 28.589142920712227,
    "avg_bits_err_output": 0.5709210738684458,
    "avg_bits_err_improve": 28.01822184684378,
    "time": 86821.0283203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* (pow (/ a -0.5) -3.0) (+ (- (* b b) (fma b b (* a (* c -4.0)))) (+ (- (fma b b (* a (* c -4.0))) (* b b)) (* a (* c 4.0))))) (* (/ 0.25 (* a a)) (+ b (sqrt (fma (* a c) -4.0 (* b b))))))",
    "output_parens": 26,
    "avg_bits_err_input": 44.01897761971098,
    "avg_bits_err_output": 0.6100120701074077,
    "avg_bits_err_improve": 43.40896554960357,
    "time": 69308.04296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (pow (* a c) 0.25) (pow (* (* a c) 16.0) 0.25))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -2e-227) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (* (/ (fma a (* c -4.0) (- (* b b) (* b b))) (+ b (hypot b (sqrt (* a (* c -4.0)))))) (/ 0.5 a)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+300) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 88,
    "avg_bits_err_input": 33.96554197578415,
    "avg_bits_err_output": 23.247033555452077,
    "avg_bits_err_improve": 10.718508420332071,
    "time": 37279.544921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8053622766329612,
    "avg_bits_err_output": 0.23274263644502768,
    "avg_bits_err_improve": 0.5726196401879335,
    "time": 37320.36572265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (+ (+ (/ 8.0 (pow (+ 1.0 (pow (exp -2.0) x)) 3.0)) (* 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0))) (+ -1.0 (/ -2.0 (+ 1.0 (pow (exp -2.0) x))))) (pow (+ 1.0 (/ 2.0 (+ 1.0 (exp (* 2.0 (log (sqrt (pow (exp -2.0) x)))))))) 2.0))",
    "output_parens": 28,
    "avg_bits_err_input": 28.53750820755532,
    "avg_bits_err_output": 28.532492523440737,
    "avg_bits_err_improve": 0.005015684114582086,
    "time": 58660.04150390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.14652874571676,
    "avg_bits_err_output": 0.013875,
    "avg_bits_err_improve": 58.13265374571676,
    "time": 16906.83349609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.07901046630942,
    "avg_bits_err_output": 0.00675,
    "avg_bits_err_improve": 58.07226046630942,
    "time": 8974.29150390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.009823120312590146,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 0.00019812031259014602,
    "time": 3120.806640625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.753875,
    "avg_bits_err_output": 0.07525,
    "avg_bits_err_improve": 31.678625,
    "time": 7239.793212890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.76182474844535,
    "avg_bits_err_output": 0.006375,
    "avg_bits_err_improve": 58.75544974844535,
    "time": 9951.100830078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(- (log (/ x (+ 1.0 (sqrt (- 1.0 (* x x)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.03475,
    "avg_bits_err_output": 0.001375,
    "avg_bits_err_improve": 0.033375,
    "time": 5257.41650390625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.12694812031259015,
    "avg_bits_err_output": 0.12694812031259015,
    "avg_bits_err_improve": 0,
    "time": 42193.3857421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (/ ew (hypot 1.0 (* eh (/ (tan t) ew)))) (cos t)) (* eh (* (sin t) (sin (atan (/ (- eh) (/ ew (tan t)))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.126,
    "avg_bits_err_output": 0.12761560156295074,
    "avg_bits_err_improve": -0.0016156015629507359,
    "time": 47135.023193359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (sin (* phi2 0.5)) (- (sin (* 0.5 phi1))) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 39.209571044582276,
    "avg_bits_err_output": 0.11975995103359194,
    "avg_bits_err_improve": 39.08981109354868,
    "time": 37549.575927734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (- 1.0 (/ (/ b (/ a b)) a)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.451062335672834,
    "avg_bits_err_output": 0.011683800584633206,
    "avg_bits_err_improve": 14.439378535088201,
    "time": 7230.629638671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (/ 1.0 (/ 1.0 (fma (sin phi1) (- (fma (sin phi1) (cos delta) (* (sin delta) (* (cos phi1) (cos theta))))) (cos delta))))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.15682207471488516,
    "avg_bits_err_output": 0.16056110296832454,
    "avg_bits_err_improve": -0.003739028253439386,
    "time": 50347.830078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 52.787022170868994,
    "avg_bits_err_output": 0.3883283843820313,
    "avg_bits_err_improve": 52.398693786486966,
    "time": 40981.2001953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ 1.0 (/ -1.0 c)) (+ b (sqrt (fma -3.0 (* c a) (* b b)))))",
    "output_parens": 8,
    "avg_bits_err_input": 28.74547855708578,
    "avg_bits_err_output": 0.3666921222737603,
    "avg_bits_err_improve": 28.378786434812017,
    "time": 43728.1572265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma c (* a -3.0) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 44.08677076960128,
    "avg_bits_err_output": 0.16095996250072117,
    "avg_bits_err_improve": 43.92581080710056,
    "time": 40613.139892578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -2.2e+208) (* -0.3333333333333333 (/ (- b (hypot (/ a (/ (sqrt (* c (* a -3.0))) (* c -3.0))) b)) a)) (if (<= b -1.35e+154) (* -0.3333333333333333 (/ (- b (hypot (sqrt (sqrt (* (pow (* a c) 2.0) 9.0))) b)) a)) (if (<= b -6.8e-308) (+ (* (/ 0.3333333333333333 a) (sqrt (fma a (* c -3.0) (* b b)))) (* b (/ -0.3333333333333333 a))) (if (or (<= b 7.2e-19) (not (<= b 4.4e+173))) (/ c (- (- b) (hypot b (sqrt (* a (* c -3.0)))))) (/ (* (fma c (* a -3.0) 0.0) (/ 1.0 (+ b (sqrt (fma c (* a -3.0) (* b b)))))) (* a 3.0))))))",
    "output_parens": 57,
    "avg_bits_err_input": 34.00292884734385,
    "avg_bits_err_output": 16.964808116389328,
    "avg_bits_err_improve": 17.038120730954525,
    "time": 45789.05859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (sin lambda1) (cos lambda2) (/ (sin lambda2) (/ (- (pow (cos lambda1) 2.0)) (pow (cos lambda1) 3.0)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (+ (* (* (cos phi2) (sin phi1)) (* (cos lambda2) (cos lambda1))) (* (cos phi2) (* (sin phi1) (* (sin lambda1) (sin lambda2)))))))",
    "output_parens": 33,
    "avg_bits_err_input": 13.311878993256501,
    "avg_bits_err_output": 0.18297716267639522,
    "avg_bits_err_improve": 13.128901830580105,
    "time": 53214.314697265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ 1.0 (- (* (fma x -1.0 -1.0) (/ (- -1.0 x) x)) x)) (* (/ (+ 1.0 x) x) (- 1.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.710162012746203,
    "avg_bits_err_output": 25.694604094494633,
    "avg_bits_err_improve": 4.01555791825157,
    "time": 75633.2568359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ (+ 1.0 x) (fma x x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.009375,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 0.0014999999999999996,
    "time": 23253.419189453125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (+ -1.0 x)) (- -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.884995437822148,
    "avg_bits_err_output": 0.072625,
    "avg_bits_err_improve": 14.812370437822148,
    "time": 24069.793212890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (sqrt (* F (+ A (- C (hypot B (- A C)))))) (- (sqrt (* 2.0 (fma B B (* (* A C) -4.0)))))) (+ (* (* A C) -4.0) (* B B))) (- (/ (sqrt (* 2.0 (* (fma B B (* (* A C) -4.0)) (* F (+ C (- A (hypot B (- A C)))))))) (+ (* (* A C) -4.0) (* B B)))))",
    "output_parens": 58,
    "avg_bits_err_input": 52.0230816104221,
    "avg_bits_err_output": 44.023234279792874,
    "avg_bits_err_improve": 7.99984733062923,
    "time": 50300.246337890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 29.12373037427018,
    "avg_bits_err_output": 14.23975041196907,
    "avg_bits_err_improve": 14.883979962301112,
    "time": 28695.41796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (* (pow (* 2.0 (fma B B (* A (* C -4.0)))) 0.5) (sqrt F)) (- (sqrt (+ C (+ A (hypot B (- A C))))))) (- (* B B) (* 4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) INFINITY) (/ (* (sqrt (+ C (+ A (hypot B (- A C))))) (* (/ F (sqrt (* F (* 2.0 (fma B B (* A (* C -4.0))))))) (* (fma B B (* A (* C -4.0))) -2.0))) (- (* B B) (* 4.0 (* A C)))) (/ (- (sqrt (* (+ C (+ A (hypot B (- A C)))) (* 2.0 F)))) (hypot B (sqrt (* C (* A -4.0)))))))",
    "output_parens": 101,
    "avg_bits_err_input": 51.50106194647084,
    "avg_bits_err_output": 35.40249387623371,
    "avg_bits_err_improve": 16.09856807023713,
    "time": 60667.234619140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt (* g 0.5)) (cbrt a))",
    "output_parens": 4,
    "avg_bits_err_input": 15.469744216549094,
    "avg_bits_err_output": 0.8076413433023697,
    "avg_bits_err_improve": 14.662102873246724,
    "time": 20135.413818359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (/ (cbrt (- (hypot g h) g)) (cbrt (* a 2.0))) (/ (cbrt (* (pow (sqrt (+ g (hypot g h))) 2.0) -0.5)) (cbrt a)))",
    "output_parens": 15,
    "avg_bits_err_input": 35.493450781234436,
    "avg_bits_err_output": 2.8936537418153634,
    "avg_bits_err_improve": 32.59979703941907,
    "time": 34140.522216796875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9897246250072126,
    "avg_bits_err_output": 0.03625977500432694,
    "avg_bits_err_improve": 0.9534648500028856,
    "time": 21312.717041015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- a (fabs (log (+ (exp a) (exp b))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.7338443609377705,
    "avg_bits_err_output": 0.5970436272910837,
    "avg_bits_err_improve": 0.13680073364668677,
    "time": 11032.60791015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (or (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (and (not (<= (/ (* a1 a2) (* b1 b2)) -2e-254)) (or (<= (/ (* a1 a2) (* b1 b2)) 2e-301) (not (<= (/ (* a1 a2) (* b1 b2)) 2e+307))))) (/ (/ a1 b1) (/ b2 a2)) (/ (* a1 a2) (* b1 b2)))",
    "output_parens": 29,
    "avg_bits_err_input": 10.946943699076499,
    "avg_bits_err_output": 2.539776162708056,
    "avg_bits_err_improve": 8.407167536368442,
    "time": 10901.591552734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.45766730763229724,
    "avg_bits_err_output": 0.416375,
    "avg_bits_err_improve": 0.04129230763229724,
    "time": 10486.1875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -0.22) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 53.15309295628262,
    "avg_bits_err_output": 0.02775,
    "avg_bits_err_improve": 53.12534295628262,
    "time": 22904.92626953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.671864244806499,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.671864244806499,
    "time": 1950.828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.01525,
    "avg_bits_err_output": 0.01525,
    "avg_bits_err_improve": 0,
    "time": 3917.27978515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1254.40576171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(if (<= (* w w) 1e+306) (+ (/ 2.0 (* r r)) (- -1.5 (* (/ (+ 0.375 (* v -0.25)) (- 1.0 v)) (* r (* w (* r w)))))) (+ (/ 2.0 (* r r)) (+ -1.5 (* (* w (* w (* r r))) (/ (+ -0.375 (* v 0.25)) (- 1.0 v))))))",
    "output_parens": 27,
    "avg_bits_err_input": 12.854716806468947,
    "avg_bits_err_output": 0.30662218915790457,
    "avg_bits_err_improve": 12.548094617311042,
    "time": 44207.361083984375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (fma (/ 4.0 (fma x1 x1 1.0)) (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 37,
    "avg_bits_err_input": 0.5202355044794914,
    "avg_bits_err_output": 0.3196940854368756,
    "avg_bits_err_improve": 0.2005414190426158,
    "time": 95435.19799804688,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.55169286973226,
    "avg_bits_err_output": 1.44247650195021,
    "avg_bits_err_improve": 17.10921636778205,
    "time": 10239.62744140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(fma (pow x 3.0) -0.12900613773279798 (* x 0.954929658551372))",
    "output_parens": 3,
    "avg_bits_err_input": 0.23429268476294263,
    "avg_bits_err_output": 0.20796936093777044,
    "avg_bits_err_improve": 0.02632332382517219,
    "time": 20324.18701171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.00325,
    "avg_bits_err_output": 0.00325,
    "avg_bits_err_improve": 0,
    "time": 24631.7392578125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (* PI (+ (/ 0.5 a) (/ -0.5 b))) (+ a b)) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 14.10479569368505,
    "avg_bits_err_output": 0.2871588359478664,
    "avg_bits_err_improve": 13.817636857737183,
    "time": 51383.546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(if (<= eps -7.5e-17) (/ (+ (* (+ 1.0 (/ 1.0 eps)) (exp (fma (- 1.0 eps) (* x -3.0) (* 2.0 (* (- 1.0 eps) x))))) (* (exp (* x (- -1.0 eps))) (- 1.0 (/ 1.0 eps)))) 2.0) (if (<= eps -7.5e-155) (/ (/ (+ (fma (- -1.0 (pow eps -2.0)) (exp (- (fma eps x (fma eps x x)) x)) (+ (/ 1.0 eps) (pow eps -2.0))) (- -1.0 (/ 1.0 eps))) (* (- -1.0 (/ 1.0 eps)) (exp (fma eps x x)))) 2.0) (if (<= eps 7.5e-155) (/ (fma (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0))) (* (pow (exp (+ eps 1.0)) (- x)) (- 1.0 (/ 1.0 eps)))) 2.0) (if (<= eps 6.8e-17) (/ (/ (+ (fma (- -1.0 (pow eps -2.0)) (exp (- (fma eps x (fma eps x x)) x)) (+ (/ 1.0 eps) (pow eps -2.0))) (- -1.0 (/ 1.0 eps))) (* (- -1.0 (/ 1.0 eps)) (exp (fma eps x x)))) 2.0) (/ (+ (* (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x))) (* (exp (* x (- -1.0 eps))) (- 1.0 (/ 1.0 eps)))) 2.0)))))",
    "output_parens": 94,
    "avg_bits_err_input": 29.01462423991279,
    "avg_bits_err_output": 26.826324527354178,
    "avg_bits_err_improve": 2.1882997125586137,
    "time": 48937.5732421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ (+ 6.0 (/ -4.0 (+ 1.0 t))) (/ (+ -4.0 (/ 4.0 (+ 1.0 t))) (+ 1.0 t)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.02,
    "avg_bits_err_output": 0.0055,
    "avg_bits_err_improve": 0.0145,
    "time": 15531.43798828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))) (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (log (+ 1.0 (expm1 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))))",
    "output_parens": 24,
    "avg_bits_err_input": 0.0245,
    "avg_bits_err_output": 0.02431148163704121,
    "avg_bits_err_improve": 0.00018851836295879013,
    "time": 155337.9521484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* t (/ (/ (* t 4.0) (+ 1.0 t)) (+ 1.0 t)))) (+ 2.0 (log (+ 1.0 (expm1 (* t (* (/ t (+ 1.0 t)) (/ 4.0 (+ 1.0 t)))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.022375,
    "avg_bits_err_output": 0.08362744375108175,
    "avg_bits_err_improve": -0.06125244375108175,
    "time": 13573.97607421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 2866.210205078125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3366.656494140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 3904.046630859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.807484438451687,
    "avg_bits_err_output": 0.24925,
    "avg_bits_err_improve": 7.558234438451687,
    "time": 25065.07763671875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.429971816061293,
    "avg_bits_err_output": 7.429971816061293,
    "avg_bits_err_improve": 0,
    "time": 23790.162353515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (* eps 2.0) x) (* eps eps))",
    "output_parens": 4,
    "avg_bits_err_input": 16.15167030008723,
    "avg_bits_err_output": 0.013125,
    "avg_bits_err_improve": 16.13854530008723,
    "time": 9985.878173828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (pow (exp 20.0) x) (- x)) -0.5))",
    "output_parens": 7,
    "avg_bits_err_input": 3.509632368915222,
    "avg_bits_err_output": 0.4074325203241292,
    "avg_bits_err_improve": 3.1021998485910927,
    "time": 25835.7890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.674814088112495,
    "avg_bits_err_output": 0.02030921094065507,
    "avg_bits_err_improve": 14.65450487717184,
    "time": 7961.193115234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.04050213454488,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.04050213454488,
    "time": 5233.736083984375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.0585255882019,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.0580255882019,
    "time": 4821.24365234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.301625,
    "avg_bits_err_improve": 63.698375,
    "time": 66417.52880859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84325366599201,
    "avg_bits_err_output": 0.32352124062518034,
    "avg_bits_err_improve": 61.519732425366826,
    "time": 13519.33740234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) -5e-136) (* -0.5 (/ (+ b (hypot (/ (* 2.0 (sqrt (fabs a))) (/ (sqrt (fabs c)) (fabs c))) b)) a)) (if (<= (/ (- (- b) (sqrt (+ (* b b) (* (* a c) -4.0)))) (* a 2.0)) 0.0) (* -0.5 (/ (/ (fma a (* c -4.0) 0.0) (- (sqrt (fma a (* c -4.0) (* b b))) b)) a)) (* -0.5 (/ (+ b (hypot (* (sqrt (fabs c)) (sqrt (* 4.0 (fabs a)))) b)) a))))",
    "output_parens": 54,
    "avg_bits_err_input": 33.98620127500834,
    "avg_bits_err_output": 10.435478877342204,
    "avg_bits_err_improve": 23.550722397666135,
    "time": 39071.669921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (pow (* a c) 0.25) (pow (* (* a c) 16.0) 0.25))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -2e-227) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 0.0) (* (/ (fma a (* c -4.0) (- (* b b) (* b b))) (+ b (hypot b (sqrt (* a (* c -4.0)))))) (/ 0.5 a)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+300) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (/ (- (hypot b (* (sqrt (* c -4.0)) (sqrt a))) b) (* a 2.0))))))",
    "output_parens": 88,
    "avg_bits_err_input": 33.96554197578415,
    "avg_bits_err_output": 23.247033555452077,
    "avg_bits_err_improve": 10.718508420332071,
    "time": 37748.211669921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1830.142822265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 40.34420391507517,
    "avg_bits_err_output": 0.01075,
    "avg_bits_err_improve": 40.33345391507517,
    "time": 2835.430419921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (- x y) (* (hypot x y) (/ (hypot x y) (+ x y))))",
    "output_parens": 7,
    "avg_bits_err_input": 19.965563736638746,
    "avg_bits_err_output": 0.03250977500432695,
    "avg_bits_err_improve": 19.933053961634418,
    "time": 20881.822021484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ c (+ d a)) b) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.687790786378916,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.687790786378916,
    "time": 25495.3193359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.036625,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.036125,
    "time": 4721.11572265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (+ (* a (+ a b)) (* a b)) (* b b))",
    "output_parens": 6,
    "avg_bits_err_input": 0.019969360937770436,
    "avg_bits_err_output": 0.010375,
    "avg_bits_err_improve": 0.009594360937770436,
    "time": 5121.406005859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* x (* x (+ x 1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.014875,
    "avg_bits_err_output": 0.02239624062518029,
    "avg_bits_err_improve": -0.007521240625180291,
    "time": 6289.875732421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(fma x x x)",
    "output_parens": 1,
    "avg_bits_err_input": 0.00075,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0.00075,
    "time": 2517.737060546875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ b (+ a c)) d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40486109062806497,
    "avg_bits_err_output": 0.232,
    "avg_bits_err_improve": 0.17286109062806496,
    "time": 27258.58154296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.606384526306954,
    "avg_bits_err_output": 0.006375,
    "avg_bits_err_improve": 29.600009526306955,
    "time": 16044.298583984375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ (* (+ (* x (/ x (+ x (sqrt (- (* x x) eps))))) (/ (- (* x x) eps) (+ x (sqrt (- (* x x) eps))))) (/ eps (+ x (sqrt (- (* x x) eps))))) (+ (* x (/ x (+ x (sqrt (- (* x x) eps))))) (/ (- (* x x) eps) (+ x (sqrt (- (* x x) eps))))))",
    "output_parens": 35,
    "avg_bits_err_input": 24.73343322037492,
    "avg_bits_err_output": 0.29004492500144224,
    "avg_bits_err_improve": 24.443388295373477,
    "time": 20386.76611328125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(* (cos x) (/ (/ (/ (fma (+ (/ x (cos x)) (tan x)) (pow (/ x (cos x)) 2.0) (* (+ (/ x (cos x)) (tan x)) (- (pow (tan x) 2.0)))) (+ (/ x (cos x)) (tan x))) (+ (/ x (cos x)) (tan x))) (tan x)))",
    "output_parens": 30,
    "avg_bits_err_input": 30.39446080742367,
    "avg_bits_err_output": 30.403940038348342,
    "avg_bits_err_improve": -0.009479230924672066,
    "time": 44941.84912109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007698120312590144,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.0071981203125901436,
    "time": 3433.960693359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 2000.0) (* (* 100.0 (/ n i)) (+ (pow (+ 1.0 (/ i n)) n) -1.0)) (* n (/ (+ (* 100.0 (pow (exp n) (log1p (/ i n)))) -100.0) i))))",
    "output_parens": 38,
    "avg_bits_err_input": 48.210164515605314,
    "avg_bits_err_output": 10.861620617209432,
    "avg_bits_err_improve": 37.34854389839588,
    "time": 32128.080322265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (or (<= c -1.9e+166) (not (<= c 1.9e+63))) (+ (/ (* c (/ a (hypot c d))) (hypot c d)) (* d (* b (pow (hypot c d) -2.0)))) (+ (* (pow (hypot c d) -2.0) (* c a)) (fma (/ b (hypot c d)) (* d (/ 1.0 (hypot c d))) 0.0)))",
    "output_parens": 26,
    "avg_bits_err_input": 25.946804357537932,
    "avg_bits_err_output": 8.335474650909234,
    "avg_bits_err_improve": 17.6113297066287,
    "time": 24057.640869140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 25.666643687069257,
    "avg_bits_err_output": 0.522974146219535,
    "avg_bits_err_improve": 25.14366954084972,
    "time": 33587.2919921875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(fma ux (+ maxCos -1.0) 1.0)",
    "output_parens": 2,
    "avg_bits_err_input": 0.035875,
    "avg_bits_err_output": 0.019382565223713778,
    "avg_bits_err_improve": 0.01649243477628622,
    "time": 16388.533203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) 2.0) (/ (/ (* (pow (cbrt (pow (- (fma ux maxCos 1.0) ux) 8.0)) 3.0) (pow (- (fma ux maxCos 1.0) ux) 4.0)) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 66,
    "avg_bits_err_input": 13.634844888315962,
    "avg_bits_err_output": 12.117548599822813,
    "avg_bits_err_improve": 1.5172962884931493,
    "time": 98055.0283203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (- (pow (/ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 2.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)))) 2.0) (/ (/ (* (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (cbrt (pow (fma ux maxCos (- 1.0 ux)) 8.0)) 3.0)) (+ (pow (- (fma ux maxCos 1.0) ux) 2.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)))) (+ (pow (- (fma ux maxCos 1.0) ux) 2.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0))))) (+ (/ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 2.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)))) (/ (pow (- (fma ux maxCos 1.0) ux) 6.0) (+ (pow (- (fma ux maxCos 1.0) ux) 2.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0))))))))",
    "output_parens": 66,
    "avg_bits_err_input": 13.671874358429502,
    "avg_bits_err_output": 12.08592503752494,
    "avg_bits_err_improve": 1.5859493209045628,
    "time": 108209.00463867188,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* maxCos (* zi (- 1.0 ux))) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (* uy (* 2.0 PI))) xi) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.3319351082645813,
    "avg_bits_err_output": 0.3295906606055396,
    "avg_bits_err_improve": 0.002344447659041682,
    "time": 68140.55615234375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.20653324229295936,
    "avg_bits_err_output": 0.20095996250072112,
    "avg_bits_err_improve": 0.005573279792238234,
    "time": 43266.69287109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5450989847503924,
    "avg_bits_err_output": 0.5208689599806422,
    "avg_bits_err_improve": 0.024230024769750225,
    "time": 22036.58154296875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (/ 1.0 (/ (/ 1.0 u2) 6.28318530718))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3222715960245229,
    "avg_bits_err_output": 0.3410826486261604,
    "avg_bits_err_improve": -0.018811052601637512,
    "time": 26846.17822265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(fma (log1p (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))) -2.0)) (- s) 0.0)",
    "output_parens": 16,
    "avg_bits_err_input": 0.3322475408065705,
    "avg_bits_err_output": 0.3335366069811811,
    "avg_bits_err_improve": -0.0012890661746106091,
    "time": 36931.025634765625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(pow (exp -1.0) (log1p (exp (/ x (- s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05262998408642589,
    "avg_bits_err_output": 0.04183131255812226,
    "avg_bits_err_improve": 0.010798671528303633,
    "time": 10824.915283203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (+ (* s (* 2.0 (/ 2.0 (exp (log (/ 2.0 (cosh (/ (fabs x) s)))))))) (* 2.0 s)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.1491181812836496,
    "avg_bits_err_output": 0.11779600141737814,
    "avg_bits_err_improve": 0.03132217986627145,
    "time": 25939.4658203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* x (* PI tau))) (* x (* PI tau))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6652467142518929,
    "avg_bits_err_output": 0.667276720285483,
    "avg_bits_err_improve": -0.0020300060335901593,
    "time": 30492.8896484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)) 1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18097698960340125,
    "avg_bits_err_output": 0.18105312629467737,
    "avg_bits_err_improve": -7.61366912761241e-05,
    "time": 26252.77978515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot eta (sqrt (/ sinTheta_O (/ (hypot 1.0 sinTheta_O) sinTheta_O)))))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.7722461908401734,
    "avg_bits_err_output": 0.4400138812717415,
    "avg_bits_err_improve": 2.332232309568432,
    "time": 29687.2236328125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_O (/ sinTheta_i v)))) (* (/ (/ cosTheta_i v) (sinh (/ 1.0 v))) (/ 0.5 v)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4536425977964531,
    "avg_bits_err_output": 0.3783270132795157,
    "avg_bits_err_improve": 0.07531558451693743,
    "time": 58034.12548828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (exp (+ (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (+ (/ -1.0 v) 0.6931))) 0.5) v)",
    "output_parens": 10,
    "avg_bits_err_input": 0.0918517741805179,
    "avg_bits_err_output": 0.0811634955811879,
    "avg_bits_err_improve": 0.010688278599329998,
    "time": 29467.6201171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow (* alpha alpha) PI)) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4546062307488622,
    "avg_bits_err_output": 0.410732275195051,
    "avg_bits_err_improve": 0.043873955553811184,
    "time": 47001.96826171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3239806661406583,
    "avg_bits_err_output": 0.5593151163981519,
    "avg_bits_err_improve": 0.7646655497425064,
    "time": 25989.30908203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.377611995813469,
    "avg_bits_err_output": 0.1995,
    "avg_bits_err_improve": 12.178111995813468,
    "time": 25982.3349609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ (/ 0.125 s) PI) (+ (/ (exp (/ (- r) s)) r) (/ (pow E (* -0.3333333333333333 (/ r s))) r)))",
    "output_parens": 12,
    "avg_bits_err_input": 0.12956170487676072,
    "avg_bits_err_output": 0.14230609164022098,
    "avg_bits_err_improve": -0.012744386763460264,
    "time": 40327.6123046875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.926627020375334,
    "avg_bits_err_output": 0.7872644971749022,
    "avg_bits_err_improve": 0.13936252320043174,
    "time": 41379.90380859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ 1.0 (+ c (/ (exp (- (* 0.5 (log1p (* cosTheta -2.0))) (* cosTheta cosTheta))) (/ (* cosTheta PI) (sqrt PI))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6796139703323612,
    "avg_bits_err_output": 0.39844634325558415,
    "avg_bits_err_improve": 0.281167627076777,
    "time": 27692.396728515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (pow (pow (log1p (- u1)) 2.0) 0.25) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.595958155964459,
    "avg_bits_err_output": 0.5433792945007591,
    "avg_bits_err_improve": 13.052578861463699,
    "time": 24552.609619140625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (/ 1.0 (/ (* PI u2) (pow (* PI u2) 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 13.650115896474576,
    "avg_bits_err_output": 0.3285627679861767,
    "avg_bits_err_improve": 13.3215531284884,
    "time": 26949.431396484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* alpha (- alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.194763032863586,
    "avg_bits_err_output": 0.32164868437626204,
    "avg_bits_err_improve": 13.873114348487324,
    "time": 22026.65478515625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(/ (- (* (* (log1p (- u0)) alphax) (* alphay alphay))) (fma alphax sin2phi (* alphay (* alphay (/ cos2phi alphax)))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.722424199082445,
    "avg_bits_err_output": 0.48822042684368255,
    "avg_bits_err_improve": 12.234203772238763,
    "time": 30478.65380859375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (* (/ 1.0 F) (tan (* PI l))) F))",
    "output_parens": 7,
    "avg_bits_err_input": 16.24167241562882,
    "avg_bits_err_output": 12.160094509075385,
    "avg_bits_err_improve": 4.081577906553434,
    "time": 29002.29736328125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.20531372187554084,
    "avg_bits_err_output": 0.1505,
    "avg_bits_err_improve": 0.054813721875540844,
    "time": 25990.844970703125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (* F (/ (pow (fma x 2.0 (fma F F 2.0)) -0.5) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.279575600895308,
    "avg_bits_err_output": 10.309998602259943,
    "avg_bits_err_improve": 2.9695769986353646,
    "time": 38047.53173828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (/ (log (/ (cosh (* PI (* 0.25 f))) (sinh (* PI (* 0.25 f))))) PI) -4.0)",
    "output_parens": 10,
    "avg_bits_err_input": 61.35206920019215,
    "avg_bits_err_output": 2.01202464384576,
    "avg_bits_err_improve": 59.340044556346385,
    "time": 43784.681396484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* t (sqrt 2.0)) (hypot l (* (hypot (* t (sqrt 2.0)) l) (sqrt (/ (+ x 1.0) (+ x -1.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 42.8761941606873,
    "avg_bits_err_output": 21.08240846122396,
    "avg_bits_err_improve": 21.79378569946334,
    "time": 54069.052734375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(/ (sin th) (/ (hypot (sin ky) (sin kx)) (sin ky)))",
    "output_parens": 7,
    "avg_bits_err_input": 3.9029741489722687,
    "avg_bits_err_output": 0.22335657969317887,
    "avg_bits_err_improve": 3.67961756927909,
    "time": 25483.67724609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))))))))",
    "output_parens": 11,
    "avg_bits_err_input": 1.0585228084366862,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 1.0506478084366861,
    "time": 13176.28662109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ (sqrt 2.0) (/ l t)))))",
    "output_parens": 11,
    "avg_bits_err_input": 10.236104477331978,
    "avg_bits_err_output": 1.0996617755814309,
    "avg_bits_err_improve": 9.136442701750546,
    "time": 30547.1357421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -1e+56) (sqrt (fma (- l) (* (fma l -2.0 (* (- U* U) (* l (/ n Om)))) (* -2.0 (/ (* U n) Om))) (* 2.0 (* (* U n) t)))) (if (<= U 5.3e-197) (sqrt (fma (* (* n 2.0) (/ l Om)) (* U (fma l -2.0 (* (- U* U) (/ n (/ Om l))))) (* n (* 2.0 (* U t))))) (* (sqrt (* U 2.0)) (sqrt (fma n t (* (fma l -2.0 (* (- U* U) (* n (/ l Om)))) (* n (/ l Om))))))))",
    "output_parens": 46,
    "avg_bits_err_input": 34.36355138032334,
    "avg_bits_err_output": 22.19668712865285,
    "avg_bits_err_improve": 12.166864251670486,
    "time": 50929.8408203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(* (/ (/ 2.0 t) (* k (/ (tan k) l))) (/ (/ l (sin k)) k))",
    "output_parens": 9,
    "avg_bits_err_input": 47.61774772707072,
    "avg_bits_err_output": 0.36977087486911053,
    "avg_bits_err_improve": 47.24797685220161,
    "time": 150913.31860351562,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -3.6e-100) (not (<= t 1.25e-60))) (* (/ (/ l t) (tan k)) (/ 2.0 (* t (* (+ 2.0 (pow (/ k t) 2.0)) (* (sin k) (/ t l)))))) (/ (* (/ (* l l) t) (/ 2.0 (* (tan k) (sin k)))) (+ (pow (* t (/ k t)) 2.0) (* t (* t 2.0)))))",
    "output_parens": 32,
    "avg_bits_err_input": 32.54339100056812,
    "avg_bits_err_output": 11.066238372019978,
    "avg_bits_err_improve": 21.477152628548144,
    "time": 70862.87915039062,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(* (cos th) (+ (* (pow 2.0 -0.5) (* a2 a2)) (* (pow 2.0 -0.5) (* a1 a1))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5459639125209151,
    "avg_bits_err_output": 0.5029141000173093,
    "avg_bits_err_improve": 0.043049812503605844,
    "time": 27694.00537109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (/ (sqrt (* PI (* 2.0 n))) (pow (* PI (* 2.0 n)) (* k 0.5))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5113231719727442,
    "avg_bits_err_output": 0.3944920786455071,
    "avg_bits_err_improve": 0.11683109332723712,
    "time": 25241.839599609375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* (sinh l) (* 2.0 J)) (cos (/ K 2.0))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.876537267042494,
    "avg_bits_err_output": 0.09929248125036058,
    "avg_bits_err_improve": 17.777244785792135,
    "time": 27347.94384765625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(* (cos (- (* (+ m n) (/ K 2.0)) M)) (exp (+ (- (fabs (- m n)) l) (* (- (* (+ m n) 0.5) M) (+ M (* (+ m n) -0.5))))))",
    "output_parens": 18,
    "avg_bits_err_input": 15.541636401465324,
    "avg_bits_err_output": 15.517636401465325,
    "avg_bits_err_improve": 0.023999999999999133,
    "time": 9656.943359375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.158271240625183,
    "avg_bits_err_output": 8.096146240625181,
    "avg_bits_err_improve": 10.062125000000002,
    "time": 37443.404541015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) -5e+221) (* w0 (sqrt (+ 1.0 (/ (* M h) (* l (/ -4.0 (* (/ D d) (* M (/ D d))))))))) (if (<= (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)) 0.05) (* w0 (sqrt (- 1.0 (* (/ h l) (pow (/ M (/ (* 2.0 d) D)) 2.0))))) (* w0 (sqrt (+ 1.0 (/ (* h (* D (/ (* M -0.5) d))) (* l (* (/ 2.0 D) (/ d M)))))))))",
    "output_parens": 48,
    "avg_bits_err_input": 14.204097075735564,
    "avg_bits_err_output": 8.934566505366952,
    "avg_bits_err_improve": 5.269530570368612,
    "time": 44933.97265625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) 0.0) (/ (/ c0 (sqrt l)) (* (sqrt (- V)) (sqrt (/ -1.0 A)))) (* c0 (/ (sqrt A) (sqrt (* V l)))))",
    "output_parens": 16,
    "avg_bits_err_input": 18.97941775789509,
    "avg_bits_err_output": 7.458340718335943,
    "avg_bits_err_improve": 11.521077039559145,
    "time": 36008.109375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) -4e-231) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) M)) (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) (- M))) (* (/ c0 (/ w d)) (/ d (* D (* h D)))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 0.0) (/ M (/ (* (- (* c0 (* (/ d (* D (* h D))) (/ d w))) (sqrt (- (pow (* c0 (* (/ d (* D (* h D))) (/ d w))) 2.0) (* M M)))) (* 2.0 (/ w c0))) M)) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ c0 (* w h)) (pow (/ d D) 2.0) M)) (sqrt (- (* (/ c0 (* w h)) (pow (/ d D) 2.0)) M)) (* (/ c0 (* w h)) (pow (/ d D) 2.0)))) (log (sqrt (pow (exp (/ M w)) (/ (* c0 M) (- (/ (/ (* d (* d (/ c0 w))) (* h D)) D) (hypot (* (/ d (* D (* h D))) (/ d (/ w c0))) (pow (* M (- M)) 0.5))))))))))",
    "output_parens": 177,
    "avg_bits_err_input": 59.5038495139375,
    "avg_bits_err_output": 30.917400423666052,
    "avg_bits_err_improve": 28.58644909027145,
    "time": 106114.37158203125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) -1000000000.0) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (+ 1.0 (/ (* (/ M (/ d D)) (* h -0.125)) (* l (/ d (* M D)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 0.0) (* (fma (pow (* M (/ D d)) 2.0) (/ (* h -0.125) l) 1.0) (/ (fabs d) (sqrt (* h l)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 5e+279) (* (* (sqrt (/ d h)) (sqrt (/ d l))) (- 1.0 (/ (pow (/ (* M D) d) 2.0) (* (/ l h) 8.0)))) (+ (* (fabs d) (sqrt (/ 1.0 (* h l)))) (* h (/ (/ (* (/ (* M D) d) (/ (* -0.125 (fabs d)) (sqrt (* h l)))) (/ d (* M D))) l))))))",
    "output_parens": 106,
    "avg_bits_err_input": 26.64818285572742,
    "avg_bits_err_output": 12.940107663198855,
    "avg_bits_err_improve": 13.708075192528565,
    "time": 90917.90087890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (- (+ 0.125 (* 0.25 (/ 0.5 (hypot 1.0 x)))) (* (+ 0.5 (/ 0.5 (hypot 1.0 x))) (pow (* (hypot 1.0 x) 2.0) -2.0))) (pow (+ 0.5 (/ 0.5 (hypot 1.0 x))) 2.0)) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 23,
    "avg_bits_err_input": 15.291291794951803,
    "avg_bits_err_output": 14.806764895743067,
    "avg_bits_err_improve": 0.4845268992087366,
    "time": 44381.4462890625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9862383613244511,
    "avg_bits_err_output": 0.008573120312590145,
    "avg_bits_err_improve": 0.9776652410118609,
    "time": 4140.46484375,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (- 1.0 (* v v)))) (* t (sqrt (fma (* v v) -6.0 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4528530939519554,
    "avg_bits_err_output": 0.2994125029494021,
    "avg_bits_err_improve": 0.1534405910025533,
    "time": 16641.281982421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (sqrt (+ 2.0 (* v (* v -6.0)))) (- 1.0 (* v v))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.011292481250360578,
    "avg_bits_err_output": 0.009363361324451066,
    "avg_bits_err_improve": 0.0019291199259095122,
    "time": 9467.236328125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(expm1 (log1p (- PI (acos (/ (fma v (* v -5.0) 1.0) (- 1.0 (* v v)))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.524612494388833,
    "avg_bits_err_output": 0.5249968723098072,
    "avg_bits_err_improve": -0.0003843779209742326,
    "time": 32076.260986328125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (- (/ -1.0 a) (/ (+ k 10.0) (/ a k))))",
    "output_parens": 8,
    "avg_bits_err_input": 2.17998571354413,
    "avg_bits_err_output": 0.2544037950282888,
    "avg_bits_err_improve": 1.925581918515841,
    "time": 19637.199951171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (/ 1.0 (exp (/ (+ (- mu (- Ec Vef)) EDonor) (- KbT)))))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.018873997935444798,
    "avg_bits_err_output": 0.018789238947305716,
    "avg_bits_err_improve": 8.475898813908173e-05,
    "time": 5912.95166015625,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.17492481250360573,
    "avg_bits_err_output": 0.017837406251802898,
    "avg_bits_err_improve": 0.15708740625180284,
    "time": 13465.28857421875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1863240526179966,
    "avg_bits_err_output": 0.02815544631633088,
    "avg_bits_err_improve": 0.1581686063016657,
    "time": 18444.050048828125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.1862157017554753,
    "avg_bits_err_output": 0.02635356662892102,
    "avg_bits_err_improve": 0.15986213512655428,
    "time": 15295.528076171875,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (hypot x (* p 2.0))))))",
    "output_parens": 6,
    "avg_bits_err_input": 13.55708596115098,
    "avg_bits_err_output": 13.550321911835724,
    "avg_bits_err_improve": 0.006764049315256315,
    "time": 15319.0126953125,
    "seed": 27,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.036489005031974,
    "avg_bits_err_output": 0.01425,
    "avg_bits_err_improve": 41.02223900503198,
    "time": 5431.35595703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (- (+ (* (tan x) 3.0) (* -2.0 (log (exp (tan x))))) x))",
    "output_parens": 16,
    "avg_bits_err_input": 31.3597885931389,
    "avg_bits_err_output": 29.21805576350509,
    "avg_bits_err_improve": 2.14173282963381,
    "time": 34209.704833984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -7e-238) (- (/ (sqrt (- (* b_2 b_2) (* a c))) a) (/ b_2 a)) (/ (- c) (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))))",
    "output_parens": 16,
    "avg_bits_err_input": 33.896260775808834,
    "avg_bits_err_output": 19.625526227785286,
    "avg_bits_err_improve": 14.270734548023547,
    "time": 28405.974365234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -3.5e-92) (/ (- c) (- b_2 (hypot b_2 (pow (pow (* c a) 2.0) 0.25)))) (if (<= b_2 3.7e+148) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a) (/ (+ (/ (* a (+ c (- c c))) (hypot b_2 (sqrt (* c a)))) (* b_2 (- -1.0 (/ b_2 (hypot b_2 (sqrt (* c a))))))) a)))",
    "output_parens": 33,
    "avg_bits_err_input": 34.34583601879705,
    "avg_bits_err_output": 15.465188622084149,
    "avg_bits_err_improve": 18.880647396712902,
    "time": 27845.887939453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 32.197380032654614,
    "avg_bits_err_output": 0.12441785781763832,
    "avg_bits_err_improve": 32.072962174836974,
    "time": 23055.238525390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (exp (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.265012022629655,
    "avg_bits_err_output": 31.9984962003709,
    "avg_bits_err_improve": 0.2665158222587536,
    "time": 40977.53564453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.181923357574714,
    "avg_bits_err_output": 0.033375,
    "avg_bits_err_improve": 29.148548357574715,
    "time": 15772.07080078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(* (pow (- -1.0 x) -2.0) (/ (- -1.0 x) x))",
    "output_parens": 5,
    "avg_bits_err_input": 14.227152949135515,
    "avg_bits_err_output": 0.01939624062518029,
    "avg_bits_err_improve": 14.207756708510335,
    "time": 8388.89599609375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(if (<= x -3.4e-9) (- (fma (cos x) (cos eps) (- (cos x))) (* (sin eps) (sin x))) (if (<= x 3.4e-57) (* (* -2.0 (sin (* (+ eps (+ x x)) 0.5))) (sin (* eps 0.5))) (- (* (cos x) (log (exp (+ -1.0 (cos eps))))) (* (sin eps) (sin x)))))",
    "output_parens": 31,
    "avg_bits_err_input": 39.48883795789857,
    "avg_bits_err_output": 0.6128549141238202,
    "avg_bits_err_improve": 38.875983043774745,
    "time": 41375.02685546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (fma (cbrt (+ 1.0 x)) (+ (cbrt (+ 1.0 x)) (cbrt x)) (pow (* x (pow (cbrt x) -2.0)) 2.0)))",
    "output_parens": 12,
    "avg_bits_err_input": 29.434190690407554,
    "avg_bits_err_output": 0.2458104840074004,
    "avg_bits_err_improve": 29.188380206400154,
    "time": 22774.927978515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 29.684109682184822,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 29.683734682184824,
    "time": 12015.526123046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -9.5e+39) (/ (- (hypot (* (sqrt (* c -4.0)) (sqrt a)) b) b) (* a 2.0)) (if (<= c -4.5e-119) (* (fma (pow (fma b b (* (* c -4.0) a)) 0.25) (cbrt (pow (fma b b (* -4.0 (* c a))) 0.75)) (- b)) (/ 0.5 a)) (if (<= c 7.6e-37) (/ (- (hypot (pow (* a (* (* c -4.0) (* c (* -4.0 a)))) 0.25) b) b) (* a 2.0)) (/ (- (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b) b) (* a 2.0)))))",
    "output_parens": 45,
    "avg_bits_err_input": 33.82758938682075,
    "avg_bits_err_output": 24.925703388179745,
    "avg_bits_err_improve": 8.901885998641003,
    "time": 47339.135986328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -2.5e-46) (* -0.5 (/ (/ 1.0 (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a (* c -4.0)))) a)) (if (<= b 1.7e-290) (* -0.5 (/ (* c -4.0) (- (hypot b (sqrt (* a (* c -4.0)))) b))) (if (<= b 3.7e+148) (* -0.5 (/ (+ b (sqrt (+ (* a (* c -4.0)) (* b b)))) a)) (* -0.5 (/ (+ b (hypot (pow (* (* a c) (* (* a c) 16.0)) 0.25) b)) a)))))",
    "output_parens": 43,
    "avg_bits_err_input": 33.980636546105906,
    "avg_bits_err_output": 16.516586179115414,
    "avg_bits_err_improve": 17.46405036699049,
    "time": 39801.24072265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ 1.0 (/ (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 61.26344024916715,
    "avg_bits_err_output": 0.0287124062518029,
    "avg_bits_err_improve": 61.23472784291534,
    "time": 17149.17626953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(exp (* (pow (cbrt (log (+ (log1p n) (fabs (fma n (- (log1p n) (log n)) -1.0))))) 2.0) (cbrt (log (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0))))))",
    "output_parens": 20,
    "avg_bits_err_input": 63.00405331366263,
    "avg_bits_err_output": 42.653031926153716,
    "avg_bits_err_improve": 20.351021387508915,
    "time": 34719.32275390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.70969124861712,
    "avg_bits_err_output": 0.005875,
    "avg_bits_err_improve": 58.703816248617116,
    "time": 12028.641845703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(* (/ (- (tan x) x) x) (/ 1.0 (tan x)))",
    "output_parens": 6,
    "avg_bits_err_input": 59.914072478982206,
    "avg_bits_err_output": 59.90015189949451,
    "avg_bits_err_improve": 0.013920579487695761,
    "time": 40734.713134765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (/ (expm1 (* eps b)) (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ b a))))))",
    "output_parens": 11,
    "avg_bits_err_input": 60.20264697536054,
    "avg_bits_err_output": 29.26698533989062,
    "avg_bits_err_improve": 30.935661635469916,
    "time": 36487.515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.35365944160877,
    "avg_bits_err_output": 0.01366669190001383,
    "avg_bits_err_improve": 41.339992749708756,
    "time": 7461.45263671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.60070967651047,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.60045967651047,
    "time": 2690.933837890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.59846497119116,
    "avg_bits_err_output": 0.015469822378330845,
    "avg_bits_err_improve": 29.582995148812827,
    "time": 27278.7099609375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (fabs (pow (cbrt (fma (pow (exp x) -3.0) (+ (exp x) 2.0) (fma (exp (* x -2.0)) -4.0 1.0))) 3.0)) (* (+ (exp x) 2.0) (pow (exp x) -2.0)))",
    "output_parens": 17,
    "avg_bits_err_input": 30.00743125467056,
    "avg_bits_err_output": 29.912298675909003,
    "avg_bits_err_improve": 0.09513257876155734,
    "time": 40029.468505859375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(if (or (<= (+ (+ (/ 1.0 (+ 1.0 x)) (/ -2.0 x)) (/ 1.0 (+ x -1.0))) -5e-14) (not (<= (+ (+ (/ 1.0 (+ 1.0 x)) (/ -2.0 x)) (/ 1.0 (+ x -1.0))) 5e-26))) (/ (+ (* (- x (* 2.0 (+ 1.0 x))) (- 1.0 x)) (* x (- -1.0 x))) (* (- 1.0 x) (* x (+ 1.0 x)))) (/ (/ -1.0 (fma x -2.0 -2.0)) (* x (+ 1.0 x))))",
    "output_parens": 37,
    "avg_bits_err_input": 9.152640581308404,
    "avg_bits_err_output": 7.958989810518802,
    "avg_bits_err_improve": 1.1936507707896018,
    "time": 40032.805419921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(/ (fma (/ 1.0 (tan x)) (tan eps) (* (tan x) (tan eps))) (/ (fma (tan eps) (tan x) -1.0) (- (tan x))))",
    "output_parens": 14,
    "avg_bits_err_input": 36.78331177612614,
    "avg_bits_err_output": 0.31977435741776783,
    "avg_bits_err_improve": 36.46353741870837,
    "time": 40959.95068359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (fma (- -1.0 x) (/ -1.0 (sqrt (+ 1.0 x))) (sqrt x)))",
    "output_parens": 7,
    "avg_bits_err_input": 29.579155592790897,
    "avg_bits_err_output": 0.12880676718957337,
    "avg_bits_err_improve": 29.450348825601324,
    "time": 21077.528076171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (+ (cos eps) -1.0) (* (cos x) (sin eps)))",
    "output_parens": 7,
    "avg_bits_err_input": 36.933256363557675,
    "avg_bits_err_output": 0.37604020934650845,
    "avg_bits_err_improve": 36.55721615421117,
    "time": 28726.21337890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.311396114594427,
    "avg_bits_err_output": 0.11127368437626202,
    "avg_bits_err_improve": 19.200122430218165,
    "time": 25424.548095703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(pow (pow (atan2 1.0 (+ 1.0 (fma N N N))) -0.5) -2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 15.176901341954409,
    "avg_bits_err_output": 0.36457170386210236,
    "avg_bits_err_improve": 14.812329638092306,
    "time": 15649.017822265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.6802993283027,
    "avg_bits_err_output": 1.4740945429348011,
    "avg_bits_err_improve": 28.2062047853679,
    "time": 31432.96923828125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(+ (* (/ m v) (* (- 1.0 m) (- 1.0 m))) (+ m -1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.07752953698335613,
    "avg_bits_err_output": 0.07341380440922632,
    "avg_bits_err_improve": 0.00411573257412981,
    "time": 34861.33642578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* a b) (/ (/ -1.0 a) b))",
    "output_parens": 4,
    "avg_bits_err_input": 16.036826129186863,
    "avg_bits_err_output": 0.27063832984063624,
    "avg_bits_err_improve": 15.766187799346227,
    "time": 17373.855712890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* (* PI -0.005555555555555556) (/ 1.0 (/ -1.0 angle))))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.55777104414763,
    "avg_bits_err_output": 20.539602594478275,
    "avg_bits_err_improve": 0.018168449669353492,
    "time": 46791.51611328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* 2.0 (* (+ b a) (* (* (sin (* 2.0 (* (* PI 0.005555555555555556) angle))) 0.5) (- b a))))",
    "output_parens": 10,
    "avg_bits_err_input": 30.946381846740348,
    "avg_bits_err_output": 21.191780735190274,
    "avg_bits_err_improve": 9.754601111550073,
    "time": 43316.93603515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (* angle PI) 180.0))) 2.0) (pow (* b (/ 2.0 (/ 2.0 (* (+ 1.0 (pow (/ (pow (sin (* PI (* angle -0.005555555555555556))) 2.0) (- -1.0 (cos (* PI (* angle -0.005555555555555556))))) 3.0)) (/ 1.0 (+ (+ 1.0 (pow (+ -1.0 (cos (* PI (* angle -0.005555555555555556)))) 2.0)) (- 1.0 (cos (* PI (* angle -0.005555555555555556)))))))))) 2.0))",
    "output_parens": 34,
    "avg_bits_err_input": 21.097963081477836,
    "avg_bits_err_output": 21.126086502445368,
    "avg_bits_err_improve": -0.028123420967531843,
    "time": 67321.96801757812,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (/ (- m (* m m)) v) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.1742127584773497,
    "avg_bits_err_output": 0.17467987917662048,
    "avg_bits_err_improve": -0.0004671206992707677,
    "time": 22642.117919921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.31606680393017456,
    "avg_bits_err_output": 0.30725938587369506,
    "avg_bits_err_improve": 0.008807418056479499,
    "time": 36060.945556640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.1368962406251803,
    "avg_bits_err_output": 0.1368962406251803,
    "avg_bits_err_improve": 0,
    "time": 23330.607177734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (fma (cos lambda2) (cos lambda1) (* (sin lambda1) (sin lambda2)))))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 17.16051448746713,
    "avg_bits_err_output": 3.700218803766184,
    "avg_bits_err_improve": 13.460295683700945,
    "time": 40718.10302734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (+ (fabs (- (pow b 9.0) (pow (fma b b (* a (* c -4.0))) 4.5))) (fma (- (pow (fma b b (* a (* c -4.0))) 1.5)) (pow (fma b b (* a (* c -4.0))) 3.0) (pow (fma b b (* a (* c -4.0))) 4.5)))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (+ (pow (fma b b (* a (* c -4.0))) 3.0) (pow b 6.0)) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0)))) (/ -0.5 a))",
    "output_parens": 49,
    "avg_bits_err_input": 52.55899760197495,
    "avg_bits_err_output": 49.389025587232354,
    "avg_bits_err_improve": 3.169972014742598,
    "time": 72141.1953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (/ c 0.25) (/ (+ b (sqrt (fma b b (* c (* a -4.0))))) -0.5))",
    "output_parens": 8,
    "avg_bits_err_input": 28.791949948158187,
    "avg_bits_err_output": 0.2763562031259014,
    "avg_bits_err_improve": 28.515593745032287,
    "time": 37692.328857421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fabs (fma (pow b 4.5) (pow b 4.5) (/ (- (pow (fma b b (* (* a c) -4.0)) 6.75)) (/ (pow (fma b b (* (* a c) -4.0)) 9.0) (pow (fma b b (* (* a c) -4.0)) 6.75))))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (+ (pow b 6.0) (pow (fma b b (* a (* c -4.0))) 3.0)) (pow (* b (sqrt (fma b b (* a (* c -4.0))))) 3.0)))) (/ -0.5 a))",
    "output_parens": 45,
    "avg_bits_err_input": 43.909366179606586,
    "avg_bits_err_output": 40.70304034992546,
    "avg_bits_err_improve": 3.206325829681127,
    "time": 70768.4501953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -5e+40) (/ (- (hypot (* (sqrt (* c -4.0)) (sqrt a)) b) b) (* a 2.0)) (if (<= c -3.4e-112) (fma (/ -0.5 a) b (* (sqrt (fma (* c a) -4.0 (* b b))) (/ 0.5 a))) (if (<= c 8.5e-37) (/ (- (hypot (pow (pow (* c (* -4.0 a)) 2.0) 0.25) b) b) (* a 2.0)) (/ (- (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b) b) (* a 2.0)))))",
    "output_parens": 38,
    "avg_bits_err_input": 33.83231652137298,
    "avg_bits_err_output": 24.46246215815402,
    "avg_bits_err_improve": 9.369854363218963,
    "time": 46673.70654296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (cos phi1) (* (cos phi2) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.8195144067283671,
    "avg_bits_err_output": 0.2251343522634617,
    "avg_bits_err_improve": 0.5943800544649054,
    "time": 35533.35595703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(+ (exp (- (log 2.0) (log1p (pow (exp -2.0) x)))) -1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 29.38406440195118,
    "avg_bits_err_output": 29.373104626144208,
    "avg_bits_err_improve": 0.010959775806970384,
    "time": 25963.856689453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.214160224743246,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 58.20241022474325,
    "time": 8281.076904296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 58.073115069838195,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 58.064990069838196,
    "time": 16577.745849609375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.008865601562950725,
    "avg_bits_err_output": 0.00775,
    "avg_bits_err_improve": 0.001115601562950725,
    "time": 5891.04931640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.777,
    "avg_bits_err_output": 0.05907312031259014,
    "avg_bits_err_improve": 31.71792687968741,
    "time": 5822.166015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (+ (log1p (* x (- x))) (* -2.0 (log1p (- x)))))",
    "output_parens": 8,
    "avg_bits_err_input": 58.70562520356331,
    "avg_bits_err_output": 0.006,
    "avg_bits_err_improve": 58.69962520356331,
    "time": 37100.787109375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (/ (+ 1.0 (sqrt (- 1.0 (* x x)))) x))",
    "output_parens": 6,
    "avg_bits_err_input": 0.04394812031259015,
    "avg_bits_err_output": 0.043875,
    "avg_bits_err_improve": 7.312031259015112e-05,
    "time": 4199.213134765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.127375,
    "avg_bits_err_output": 0.127375,
    "avg_bits_err_improve": 0,
    "time": 35767.08056640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output_parens": 20,
    "avg_bits_err_input": 0.13125,
    "avg_bits_err_output": 0.13125,
    "avg_bits_err_improve": 0,
    "time": 46236.311767578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (+ (* (* (- lambda1 lambda2) (cos (* phi2 0.5))) (cos (* 0.5 phi1))) (* (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))) (- lambda2 lambda1))) (- phi1 phi2)))",
    "output_parens": 18,
    "avg_bits_err_input": 38.1486844613934,
    "avg_bits_err_output": 0.12432713490856723,
    "avg_bits_err_improve": 38.02435732648483,
    "time": 35767.989501953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (/ (/ (- b) a) (/ a b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 14.65675921527103,
    "avg_bits_err_output": 0.0006981203125901445,
    "avg_bits_err_improve": 14.65606109495844,
    "time": 5723.004150390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin delta) (* (sin theta) (cos phi1))) (expm1 (log1p (- (- (cos delta) (* (cos delta) (pow (sin phi1) 2.0))) (* (* (cos phi1) (cos theta)) (* (sin delta) (sin phi1))))))))",
    "output_parens": 23,
    "avg_bits_err_input": 0.15562405006909605,
    "avg_bits_err_output": 0.15749351985837537,
    "avg_bits_err_improve": -0.001869469789279321,
    "time": 50954.497802734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -3.0)))) b) (* a 3.0)) -1e-32) (* (- (sqrt (fma b b (* c (* a -3.0)))) b) (/ (* (/ 0.3333333333333333 a) (/ 0.3333333333333333 a)) (/ 0.3333333333333333 a))) (/ (+ (- b) (pow (pow (fma -3.0 (* a c) (* b b)) 1.5) 0.3333333333333333)) (* a 3.0)))",
    "output_parens": 30,
    "avg_bits_err_input": 52.56642732981351,
    "avg_bits_err_output": 50.26170870377873,
    "avg_bits_err_improve": 2.304718626034777,
    "time": 59738.461181640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (+ (* b b) (* a (* c -3.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 28.92385788802242,
    "avg_bits_err_output": 0.2736911656266226,
    "avg_bits_err_improve": 28.6501667223958,
    "time": 36784.40234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma c (* -3.0 a) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 43.97902241094706,
    "avg_bits_err_output": 0.16284680468885215,
    "avg_bits_err_improve": 43.816175606258206,
    "time": 42732.40673828125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= (* 3.0 a) -1e-298) (/ -1.0 (* 3.0 (/ a (- b (hypot b (* (sqrt (* a -3.0)) (sqrt (fabs c)))))))) (if (<= (* 3.0 a) 5e+111) (/ -1.0 (* 3.0 (/ a (- b (hypot b (sqrt (fabs (* (* a -3.0) c)))))))) (if (<= (* 3.0 a) 1e+236) (/ -1.0 (* 3.0 (/ a (- b (hypot b (* a (* 3.0 (sqrt (* c (/ -0.3333333333333333 a)))))))))) (/ -1.0 (* 3.0 (/ a (- b (hypot b (* (sqrt (* -3.0 c)) (sqrt a))))))))))",
    "output_parens": 47,
    "avg_bits_err_input": 33.856203313246255,
    "avg_bits_err_output": 19.70610494932407,
    "avg_bits_err_improve": 14.150098363922183,
    "time": 45918.5546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (sin lambda1) (cos lambda2) (* (cos lambda1) (sin (- lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (+ (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1))))))",
    "output_parens": 25,
    "avg_bits_err_input": 13.010364323226927,
    "avg_bits_err_output": 0.17839872295377623,
    "avg_bits_err_improve": 12.83196560027315,
    "time": 49346.70947265625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ 1.0 (+ x (* x (/ (- 1.0 x) (+ x 1.0))))) (- 1.0 x))",
    "output_parens": 8,
    "avg_bits_err_input": 29.967350305388614,
    "avg_bits_err_output": 25.84480739231427,
    "avg_bits_err_improve": 4.122542913074344,
    "time": 29208.22998046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ (+ 1.0 x) (fma x x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.010625,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 0.0010000000000000009,
    "time": 5618.30029296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (+ -1.0 x)) (- -1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.035714261268229,
    "avg_bits_err_output": 0.07344812031259015,
    "avg_bits_err_improve": 13.962266140955638,
    "time": 30511.829345703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (fma (/ (sqrt (* F (* 2.0 (+ A (- C (hypot B (- A C))))))) -1.0) (pow (fma C (* A -4.0) (* B B)) -0.5) 0.0) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 5e+248) (/ (- (sqrt (* 2.0 (fma (+ A C) (* F (fma B B (* -4.0 (* A C)))) (* (hypot B (- A C)) (* (fma B B (* -4.0 (* A C))) (- F))))))) (+ (* B B) (* -4.0 (* A C)))) (if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) INFINITY) (sqrt (/ F (/ (fma C (* A -4.0) (* B B)) (* 2.0 (- (+ A C) (hypot B (- A C))))))) (/ (- (sqrt (* F (* 2.0 (+ A (- C (hypot B (- A C)))))))) (hypot B (sqrt (* C (* A -4.0))))))))",
    "output_parens": 128,
    "avg_bits_err_input": 51.828736731426396,
    "avg_bits_err_output": 37.40937868946295,
    "avg_bits_err_improve": 14.419358041963449,
    "time": 55588.8681640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (* (+ C A) (/ (- C A) (+ C A))) (hypot B (- A C))) B)) PI))",
    "output_parens": 12,
    "avg_bits_err_input": 29.104482211257125,
    "avg_bits_err_output": 14.019738877127246,
    "avg_bits_err_improve": 15.084743334129879,
    "time": 36701.369873046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (* (sqrt (+ C (+ A (hypot B (- A C))))) (* (* (sqrt (fma A (* C -4.0) (* B B))) (sqrt (* 2.0 F))) (/ -1.0 (fma A (* C -4.0) (* B B))))) (/ (* (sqrt (* 2.0 (+ (* B (* B F)) (* F (* A (* C -4.0)))))) (- (sqrt (+ A (+ C (hypot B (- A C))))))) (+ (* B B) (* -4.0 (* A C)))))",
    "output_parens": 61,
    "avg_bits_err_input": 52.28626989007919,
    "avg_bits_err_output": 39.99839608860885,
    "avg_bits_err_improve": 12.28787380147034,
    "time": 48776.51904296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ (cbrt g) (cbrt (* a 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 15.23335130055074,
    "avg_bits_err_output": 0.8298245295570057,
    "avg_bits_err_improve": 14.403526770993736,
    "time": 21481.813232421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(if (<= g -1e-289) (+ (* (cbrt (/ 0.5 a)) (cbrt (- (hypot g h) g))) (/ (cbrt (/ (+ g (hypot g h)) a)) (pow 4.0 0.16666666666666666))) (+ (pow (pow (* (/ 0.5 a) (- (hypot h g) g)) 2.0) 0.16666666666666666) (/ (cbrt (+ g (hypot g h))) (cbrt (* a -2.0)))))",
    "output_parens": 28,
    "avg_bits_err_input": 35.849081053277125,
    "avg_bits_err_output": 2.778325631220567,
    "avg_bits_err_improve": 33.07075542205656,
    "time": 44237.259765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma 0.6666666666666666 PI (* 0.3333333333333333 (acos (/ g (- h)))))) 3.0) (/ (+ (cos (* 2.0 (fma 0.6666666666666666 PI (* 0.3333333333333333 (acos (/ g (- h))))))) 1.0) 2.0)))",
    "output_parens": 18,
    "avg_bits_err_input": 0.9904133468827534,
    "avg_bits_err_output": 0.04301018202949108,
    "avg_bits_err_improve": 0.9474031648532624,
    "time": 29611.343505859375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(sqrt (pow (+ (exp (- b a)) 1.0) -2.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.5334749102026902,
    "avg_bits_err_output": 0.03898658374812605,
    "avg_bits_err_improve": 0.4944883264545642,
    "time": 12872.65625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) -5e+288) (/ a1 (/ b2 (/ a2 b1))) (if (<= (/ (* a1 a2) (* b1 b2)) -1e-296) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (/ a2 (* b2 (/ b1 a1))) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+303) (/ (* a1 a2) (* b1 b2)) (/ (/ a1 b1) (/ b2 a2))))))",
    "output_parens": 35,
    "avg_bits_err_input": 11.45150533875889,
    "avg_bits_err_output": 2.9014714872737204,
    "avg_bits_err_improve": 8.55003385148517,
    "time": 11964.33984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(fma x (- y) (log1p (exp x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4214587964875865,
    "avg_bits_err_output": 0.361125,
    "avg_bits_err_improve": 0.06033379648758652,
    "time": 9326.001708984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -500.0) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 52.89417892955714,
    "avg_bits_err_output": 0.0556760525832439,
    "avg_bits_err_improve": 52.8385028769739,
    "time": 17467.414306640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.721221891303513,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.721221891303513,
    "time": 2987.281982421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (pow (/ (+ 1.0 x) (- 1.0 x)) -0.5)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.013875,
    "avg_bits_err_output": 0.013375,
    "avg_bits_err_improve": 0.0005000000000000004,
    "time": 5369.09619140625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1227.504150390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (pow (* r w) 2.0) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.709489423258463,
    "avg_bits_err_output": 0.20924851289605548,
    "avg_bits_err_improve": 12.500240910362407,
    "time": 38218.8818359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (fma (/ 4.0 (fma x1 x1 1.0)) (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 37,
    "avg_bits_err_input": 0.5159012060702414,
    "avg_bits_err_output": 0.3102561087717329,
    "avg_bits_err_improve": 0.2056450972985085,
    "time": 96365.22705078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.295043589852305,
    "avg_bits_err_output": 1.2204356285023057,
    "avg_bits_err_improve": 17.07460796135,
    "time": 7597.056884765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(+ (* 0.954929658551372 x) (* (* x (* x x)) -0.12900613773279798))",
    "output_parens": 5,
    "avg_bits_err_input": 0.23467251746548876,
    "avg_bits_err_output": 0.23467251746548876,
    "avg_bits_err_improve": 0,
    "time": 20839.42626953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003875,
    "avg_bits_err_output": 0.003875,
    "avg_bits_err_improve": 0,
    "time": 4040.55517578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ PI (* a 2.0)) b) (+ a b))",
    "output_parens": 5,
    "avg_bits_err_input": 14.138060384022722,
    "avg_bits_err_output": 0.254281015629507,
    "avg_bits_err_improve": 13.883779368393215,
    "time": 51878.764404296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(if (<= eps -5e-9) (/ (+ (* (+ 1.0 (/ 1.0 eps)) (exp (* x (+ eps -1.0)))) (* (exp (* x (- -1.0 eps))) (- 1.0 (/ 1.0 eps)))) 2.0) (if (<= eps 1.85e-22) (/ (expm1 (log (+ (+ 1.0 (exp (+ (log1p eps) (* x (+ eps -1.0))))) (* (- 1.0 eps) (exp (- (- x) (* eps x))))))) 2.0) (/ (+ (/ 1.0 (exp (- (* x (- 1.0 eps)) (log1p (/ 1.0 eps))))) (* (exp (* x (- -1.0 eps))) (- 1.0 (/ 1.0 eps)))) 2.0)))",
    "output_parens": 49,
    "avg_bits_err_input": 29.543531437114826,
    "avg_bits_err_output": 1.693968029617979,
    "avg_bits_err_improve": 27.849563407496845,
    "time": 41687.629638671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (+ (* 2.0 (+ 2.0 (/ -2.0 (+ 1.0 t)))) (* (/ 2.0 (+ 1.0 t)) (+ (/ 2.0 (+ 1.0 t)) -2.0))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.029,
    "avg_bits_err_output": 0.005,
    "avg_bits_err_improve": 0.024,
    "time": 33688.841796875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))) (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (+ (+ 1.0 (pow (+ 2.0 (/ (/ -2.0 t) (+ 1.0 (/ 1.0 t)))) 2.0)) -1.0)))",
    "output_parens": 22,
    "avg_bits_err_input": 0.032875,
    "avg_bits_err_output": 0.030125,
    "avg_bits_err_improve": 0.0027500000000000024,
    "time": 73177.40771484375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (* 4.0 (/ (* t (/ t (+ t 1.0))) (+ t 1.0)))) (+ (* 4.0 (/ (* t (/ t (+ t 1.0))) (+ t 1.0))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 0.048,
    "avg_bits_err_output": 0.007875,
    "avg_bits_err_improve": 0.040125,
    "time": 17715.930908203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3042.671630859375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3255.59423828125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 3906.5810546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.840824799560117,
    "avg_bits_err_output": 0.255375,
    "avg_bits_err_improve": 7.585449799560117,
    "time": 20597.013916015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.3247496513254875,
    "avg_bits_err_output": 7.3247496513254875,
    "avg_bits_err_improve": 0,
    "time": 24190.64111328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (fma x 2.0 eps))",
    "output_parens": 2,
    "avg_bits_err_input": 15.708367810745404,
    "avg_bits_err_output": 0.012625,
    "avg_bits_err_improve": 15.695742810745404,
    "time": 3866.177490234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (sqrt (pow (pow (exp 20.0) x) x)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.541094055679177,
    "avg_bits_err_output": 0.4172274453255719,
    "avg_bits_err_improve": 3.123866610353605,
    "time": 28314.13720703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.28559916519377,
    "avg_bits_err_output": 0.021495489065114205,
    "avg_bits_err_improve": 14.264103676128656,
    "time": 7144.206787109375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.92305890107985,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.92305890107985,
    "time": 4344.60546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.353893905130626,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 39.35376890513063,
    "time": 4006.405517578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.300125,
    "avg_bits_err_improve": 63.699875,
    "time": 63389.43603515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* t (* t 1.6e-63))))",
    "output_parens": 4,
    "avg_bits_err_input": 61.843250060791135,
    "avg_bits_err_output": 0.3265637218755409,
    "avg_bits_err_improve": 61.51668633891559,
    "time": 18716.23779296875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -2.5e-46) (* -0.5 (/ (/ 1.0 (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a (* c -4.0)))) a)) (if (<= b 1.7e-290) (* -0.5 (/ (* c -4.0) (- (hypot b (sqrt (* a (* c -4.0)))) b))) (if (<= b 3.7e+148) (* -0.5 (/ (+ b (sqrt (+ (* a (* c -4.0)) (* b b)))) a)) (* -0.5 (/ (+ b (hypot (pow (* (* a c) (* (* a c) 16.0)) 0.25) b)) a)))))",
    "output_parens": 43,
    "avg_bits_err_input": 33.980636546105906,
    "avg_bits_err_output": 16.516586179115414,
    "avg_bits_err_improve": 17.46405036699049,
    "time": 39312.813720703125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= c -5e+40) (/ (- (hypot (* (sqrt (* c -4.0)) (sqrt a)) b) b) (* a 2.0)) (if (<= c -3.4e-112) (fma (/ -0.5 a) b (* (sqrt (fma (* c a) -4.0 (* b b))) (/ 0.5 a))) (if (<= c 8.5e-37) (/ (- (hypot (pow (pow (* c (* -4.0 a)) 2.0) 0.25) b) b) (* a 2.0)) (/ (- (hypot (* (sqrt (* -4.0 a)) (sqrt c)) b) b) (* a 2.0)))))",
    "output_parens": 38,
    "avg_bits_err_input": 33.83231652137298,
    "avg_bits_err_output": 24.46246215815402,
    "avg_bits_err_improve": 9.369854363218963,
    "time": 46778.427001953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 1661.2734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ (expm1 x) x)",
    "output_parens": 2,
    "avg_bits_err_input": 39.83810762505364,
    "avg_bits_err_output": 0.013125,
    "avg_bits_err_improve": 39.824982625053636,
    "time": 4980.023193359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (/ (+ x y) (/ (hypot x y) (- x y))) (hypot x y))",
    "output_parens": 7,
    "avg_bits_err_input": 20.041416061583668,
    "avg_bits_err_output": 0.03390377539100758,
    "avg_bits_err_improve": 20.00751228619266,
    "time": 36845.392578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (fma 1.0 (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.661189081637689,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.661189081637689,
    "time": 73621.38916015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.039375,
    "time": 10681.099853515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(* (+ a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.022490601562950727,
    "avg_bits_err_output": 0.022490601562950727,
    "avg_bits_err_improve": 0,
    "time": 6142.742431640625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.0135,
    "avg_bits_err_output": 0.0135,
    "avg_bits_err_improve": 0,
    "time": 3164.072998046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.000875,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0,
    "time": 1732.864990234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ (+ b (+ a c)) d))",
    "output_parens": 4,
    "avg_bits_err_input": 0.39465601562950725,
    "avg_bits_err_output": 0.23475,
    "avg_bits_err_improve": 0.15990601562950726,
    "time": 16902.87548828125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 30.292060223209155,
    "avg_bits_err_output": 0.005875,
    "avg_bits_err_improve": 30.286185223209156,
    "time": 12087.036376953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 25.038366505204042,
    "avg_bits_err_output": 0.28032312031259016,
    "avg_bits_err_improve": 24.75804338489145,
    "time": 16133.445068359375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ (fma (pow (/ x (sin x)) 2.0) (/ x (sin x)) -1.0) (/ (+ (/ x (sin x)) (+ (pow (/ x (sin x)) 2.0) 1.0)) (cos x)))",
    "output_parens": 16,
    "avg_bits_err_input": 30.486938587298585,
    "avg_bits_err_output": 30.504093335233662,
    "avg_bits_err_improve": -0.017154747935077097,
    "time": 43149.964599609375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0065,
    "avg_bits_err_output": 0.001375,
    "avg_bits_err_improve": 0.005124999999999999,
    "time": 2117.3115234375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 100000000000.0) (/ (+ (* (pow (+ 1.0 (/ i n)) n) 100.0) -100.0) (/ i n)) (* n (/ (+ -100.0 (* 100.0 (pow (exp n) (log1p (/ i n))))) i))))",
    "output_parens": 38,
    "avg_bits_err_input": 47.609822427305765,
    "avg_bits_err_output": 10.19376421873157,
    "avg_bits_err_improve": 37.4160582085742,
    "time": 29087.59326171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 1e+301) (/ (/ (+ (* a c) (* b d)) (hypot c d)) (hypot c d)) (+ (* (/ d (hypot d c)) (/ b (hypot d c))) (/ c (/ (pow (hypot d c) 2.0) a))))",
    "output_parens": 26,
    "avg_bits_err_input": 26.369552687193668,
    "avg_bits_err_output": 9.453628190805025,
    "avg_bits_err_improve": 16.91592449638864,
    "time": 26811.2509765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 26.351501031704768,
    "avg_bits_err_output": 0.6884929354389165,
    "avg_bits_err_improve": 25.66300809626585,
    "time": 20400.10498046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (/ (* ux (- (* ux (* maxCos maxCos)) ux)) (+ ux (* ux maxCos))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.03275,
    "avg_bits_err_output": 0.02939297441854895,
    "avg_bits_err_improve": 0.00335702558145105,
    "time": 7337.215576171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (+ (fma (exp (* -0.3333333333333333 (log1p (pow (- (fma ux maxCos 1.0) ux) 2.0)))) (exp (* (log1p (pow (- (fma ux maxCos 1.0) ux) 2.0)) -0.6666666666666666)) (* (/ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 6.0))) (+ -1.0 (- (pow (- (fma ux maxCos 1.0) ux) 2.0) (pow (- (fma ux maxCos 1.0) ux) 4.0))))) (fma (+ -1.0 (- (pow (- (fma ux maxCos 1.0) ux) 2.0) (pow (- (fma ux maxCos 1.0) ux) 4.0))) (/ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 6.0))) (* (+ 1.0 (- (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) (/ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 6.0))))))))",
    "output_parens": 70,
    "avg_bits_err_input": 13.64969994492842,
    "avg_bits_err_output": 12.125338779544052,
    "avg_bits_err_improve": 1.5243611653843683,
    "time": 121083.92138671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (+ (fma (/ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)))) (/ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)))) (* (fma (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (- (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (pow (- (fma ux maxCos 1.0) ux) 2.0)) (pow (- (fma ux maxCos 1.0) ux) 4.0)) (/ (/ (- (pow (- (fma ux maxCos 1.0) ux) 12.0)) (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0)))) (+ (pow (- (fma ux maxCos 1.0) ux) 6.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 3.0))))) (+ (fma (sqrt (/ (fma (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (+ 1.0 (- (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) (pow (- (fma ux maxCos 1.0) ux) 4.0)) (* (+ (pow (- (fma ux maxCos 1.0) ux) 6.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 3.0)) (/ (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) (pow (- (fma ux maxCos 1.0) ux) 12.0))))) (sqrt (/ (fma (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (+ 1.0 (- (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) (pow (- (fma ux maxCos 1.0) ux) 4.0)) (* (+ (pow (- (fma ux maxCos 1.0) ux) 6.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 3.0)) (/ (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) (pow (- (fma ux maxCos 1.0) ux) 12.0))))) (* (fma (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 3.0) (- (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 3.0) (pow (- (fma ux maxCos 1.0) ux) 6.0)) (pow (- (fma ux maxCos 1.0) ux) 12.0)) (/ (* (fma (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (+ 1.0 (- (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) (pow (- (fma ux maxCos 1.0) ux) 4.0)) (/ (- (pow (- (fma ux maxCos 1.0) ux) 12.0)) (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))))) (+ (pow (- (fma ux maxCos 1.0) ux) 18.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 9.0))))) (fma (- (fma (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 3.0) (- (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 3.0) (pow (- (fma ux maxCos 1.0) ux) 6.0)) (pow (- (fma ux maxCos 1.0) ux) 12.0))) (/ (* (fma (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (+ 1.0 (- (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) (pow (- (fma ux maxCos 1.0) ux) 4.0)) (/ (pow (- (fma ux maxCos 1.0) ux) 12.0) (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))))) (+ (pow (- (fma ux maxCos 1.0) ux) 18.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 9.0))) (* (fma (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 3.0) (- (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 3.0) (pow (- (fma ux maxCos 1.0) ux) 6.0)) (pow (- (fma ux maxCos 1.0) ux) 12.0)) (/ (* (fma (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) (+ 1.0 (- (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))) (pow (- (fma ux maxCos 1.0) ux) 4.0)) (/ (pow (- (fma ux maxCos 1.0) ux) 12.0) (+ 1.0 (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (pow (- (fma ux maxCos 1.0) ux) 2.0))))) (+ (pow (- (fma ux maxCos 1.0) ux) 18.0) (pow (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 4.0)) 9.0))))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 346,
    "avg_bits_err_input": 13.686038579350132,
    "avg_bits_err_output": 12.154439614472293,
    "avg_bits_err_improve": 1.5315989648778388,
    "time": 154175.49560546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- 1.0 ux) (* maxCos zi)) (* (sqrt (+ 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (+ ux -1.0)))))))) (+ (* (cos (log1p (expm1 (* 2.0 (* PI uy))))) xi) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.34590803930447744,
    "avg_bits_err_output": 0.3462848392268601,
    "avg_bits_err_improve": -0.0003767999223826535,
    "time": 60751.71337890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))))) alphax) (/ (/ 1.0 (hypot 1.0 (* (/ alphay alphax) (tan (expm1 (log1p (* PI (fma 2.0 u1 0.5)))))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ 0.5 (* 2.0 u1))))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.20441147540404264,
    "avg_bits_err_output": 0.20006372187554083,
    "avg_bits_err_improve": 0.004347753528501808,
    "time": 53782.245361328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output_parens": 6,
    "avg_bits_err_input": 0.543769143854134,
    "avg_bits_err_output": 0.543769143854134,
    "avg_bits_err_improve": 0,
    "time": 21804.189453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.32032849407495295,
    "avg_bits_err_output": 0.3127792241404537,
    "avg_bits_err_improve": 0.007549269934499225,
    "time": 23332.169677734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))) -1.0))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.33984281472053063,
    "avg_bits_err_output": 0.34069079804167246,
    "avg_bits_err_improve": -0.000847983321141832,
    "time": 33478.72314453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05787217015750099,
    "avg_bits_err_output": 0.04193869786308746,
    "avg_bits_err_improve": 0.015933472294413532,
    "time": 10617.572509765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (fma s (* 2.0 (cosh (/ (fabs x) s))) (* s 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.13712960107210362,
    "avg_bits_err_output": 0.10494799749258528,
    "avg_bits_err_improve": 0.03218160357951834,
    "time": 26956.968994140625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6680207908937882,
    "avg_bits_err_output": 0.6680207908937882,
    "avg_bits_err_improve": 0,
    "time": 31200.567626953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (- (log (/ 1.0 (+ u (* (- 1.0 u) (exp (/ -2.0 v))))))) 1.0)",
    "output_parens": 9,
    "avg_bits_err_input": 0.16185322714897074,
    "avg_bits_err_output": 0.1712046916479441,
    "avg_bits_err_improve": -0.009351464498973366,
    "time": 26356.25732421875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot (sqrt (/ (* sinTheta_O sinTheta_O) (hypot 1.0 sinTheta_O))) eta))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.583018703851672,
    "avg_bits_err_output": 0.37819709333913876,
    "avg_bits_err_improve": 2.2048216105125333,
    "time": 27650.13916015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (exp (* sinTheta_O (/ sinTheta_i v)))) (/ (/ 0.5 v) (* (/ v cosTheta_i) (sinh (/ 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4653512624968681,
    "avg_bits_err_output": 0.41766283478435207,
    "avg_bits_err_improve": 0.047688427712516024,
    "time": 44058.590576171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (* (pow (cbrt (exp (+ (/ -1.0 v) (+ 0.6931 (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v))))) 3.0) 0.5) v)",
    "output_parens": 12,
    "avg_bits_err_input": 0.10650240332098712,
    "avg_bits_err_output": 0.09069887612081969,
    "avg_bits_err_improve": 0.015803527200167436,
    "time": 30342.3671875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (fma alpha alpha -1.0) (* (* PI (* (log alpha) 2.0)) (+ 1.0 (* (fma alpha alpha -1.0) (* cosTheta cosTheta)))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.4558456497706566,
    "avg_bits_err_output": 0.4606520511596358,
    "avg_bits_err_improve": -0.004806401388979198,
    "time": 74751.14892578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* 3.0 (* s (- (log1p (* (+ u -0.25) 1.3333333333333333)) (log1p (/ (pow (+ u -0.25) 2.0) -0.5625)))))",
    "output_parens": 10,
    "avg_bits_err_input": 1.3065097947354827,
    "avg_bits_err_output": 0.5716911853645688,
    "avg_bits_err_improve": 0.7348186093709139,
    "time": 31499.89892578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.348574563720144,
    "avg_bits_err_output": 0.20425,
    "avg_bits_err_improve": 12.144324563720144,
    "time": 22570.91650390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (* 0.75 (exp (/ (- r) (* s 3.0)))) (* (/ (pow (* PI 6.0) 2.0) PI) (/ (* r s) 6.0))))",
    "output_parens": 21,
    "avg_bits_err_input": 0.13655677100410343,
    "avg_bits_err_output": 0.1422119265568561,
    "avg_bits_err_improve": -0.005655155552752672,
    "time": 46850.57958984375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(+ (* (/ (sin (- normAngle (* normAngle u))) (sin normAngle)) n0_i) (* (/ (sin (* normAngle u)) (sin normAngle)) n1_i))",
    "output_parens": 12,
    "avg_bits_err_input": 0.905243938932086,
    "avg_bits_err_output": 0.7220450937510114,
    "avg_bits_err_improve": 0.18319884518107454,
    "time": 40824.623291015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (* (pow PI -0.16666666666666666) (sqrt (- 1.0 (+ cosTheta cosTheta)))) (* cosTheta (cbrt PI))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.6794786001993081,
    "avg_bits_err_output": 0.40828729408537234,
    "avg_bits_err_improve": 0.2711913061139357,
    "time": 29985.49560546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (log1p (expm1 (sin (* 2.0 (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.343898601823916,
    "avg_bits_err_output": 0.5414264801652768,
    "avg_bits_err_improve": 12.802472121658639,
    "time": 22272.40380859375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (* (pow (* PI u2) 2.0) (/ 1.0 (* PI u2))))))",
    "output_parens": 12,
    "avg_bits_err_input": 13.384857568120973,
    "avg_bits_err_output": 0.3151439550197116,
    "avg_bits_err_improve": 13.06971361310126,
    "time": 25547.162353515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(/ (- (log1p (- u0))) (pow alpha -2.0))",
    "output_parens": 5,
    "avg_bits_err_input": 14.05757635386599,
    "avg_bits_err_output": 0.3392218046888522,
    "avg_bits_err_improve": 13.718354549177137,
    "time": 22034.28271484375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (log1p (- u0)) (* (/ (* alphay alphay) (fma sin2phi alphax (/ (* (* alphay alphay) cos2phi) alphax))) (- alphax)))",
    "output_parens": 11,
    "avg_bits_err_input": 12.58468902222884,
    "avg_bits_err_output": 0.4981616253988671,
    "avg_bits_err_improve": 12.086527396829974,
    "time": 30860.7978515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (<= (* PI l) -1e+155) (- (* PI l) (/ (/ (tan (/ 1.0 (* (/ (cbrt (pow (* PI l) 2.0)) (* PI l)) (/ (cbrt (* PI l)) (* PI l))))) F) F)) (if (<= (* PI l) -1e-15) (- (* PI l) (/ (/ (tan (/ 1.0 (/ (log1p (expm1 (* PI l))) (pow (* PI l) 2.0)))) F) F)) (if (<= (* PI l) 10000000000000.0) (+ (* PI l) (/ (/ -1.0 F) (* F (/ 1.0 (tan (* PI l)))))) (if (<= (* PI l) 2e+150) (- (* PI l) (/ (/ (tan (/ 1.0 (/ (log1p (expm1 (* PI l))) (pow (* PI l) 2.0)))) F) F)) (- (* PI l) (/ (/ (tan (/ 1.0 (* (/ (cbrt (pow (* PI l) 2.0)) (* PI l)) (/ (cbrt (* PI l)) (* PI l))))) F) F))))))",
    "output_parens": 76,
    "avg_bits_err_input": 16.52083657805504,
    "avg_bits_err_output": 0.6025934572861337,
    "avg_bits_err_improve": 15.918243120768906,
    "time": 41901.66162109375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(+ (/ 1.0 (sin B)) (* x (/ -1.0 (tan B))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.21641748125036056,
    "avg_bits_err_output": 0.21641748125036056,
    "avg_bits_err_improve": 0,
    "time": 25466.02587890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.764258446437987,
    "avg_bits_err_output": 10.712533976714658,
    "avg_bits_err_improve": 3.051724469723329,
    "time": 31774.2998046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (log (cbrt (pow (/ (cosh (* PI (* 0.25 f))) (sinh (* PI (* 0.25 f)))) (/ 3.0 PI)))) -4.0)",
    "output_parens": 12,
    "avg_bits_err_input": 61.37742317936748,
    "avg_bits_err_output": 1.6160306717362838,
    "avg_bits_err_improve": 59.7613925076312,
    "time": 46088.182861328125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (or (<= t -1.75e-299) (not (<= t 2.05e-238))) (/ 2.0 (/ (hypot l (* (hypot l (* t (sqrt 2.0))) (sqrt (/ (+ x 1.0) (+ x -1.0))))) (* t (pow 2.0 -0.5)))) (exp (log1p (/ (/ (+ -1.0 (pow (/ (* t (sqrt 2.0)) (hypot l (sqrt (* (/ (+ x 1.0) (+ x -1.0)) (fma 2.0 (* t t) (* l l)))))) 4.0)) (fma 2.0 (* t (/ t (fma (fma 2.0 (* t t) (* l l)) (/ (+ x 1.0) (+ x -1.0)) (* l l)))) 1.0)) (fma t (/ (sqrt 2.0) (hypot l (sqrt (* (/ (+ x 1.0) (+ x -1.0)) (fma 2.0 (* t t) (* l l)))))) 1.0)))))",
    "output_parens": 59,
    "avg_bits_err_input": 43.053375779353544,
    "avg_bits_err_output": 19.93138218609538,
    "avg_bits_err_improve": 23.121993593258164,
    "time": 46422.512451171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(/ (sin th) (/ (hypot (sin ky) (sin kx)) (sin ky)))",
    "output_parens": 7,
    "avg_bits_err_input": 3.650189929377229,
    "avg_bits_err_output": 0.22526466250649016,
    "avg_bits_err_improve": 3.424925266870739,
    "time": 31130.436767578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (/ 0.5 (hypot 1.0 (* l (/ 2.0 (/ Om (hypot (sin kx) (sin ky)))))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.918375,
    "avg_bits_err_output": 0.006625,
    "avg_bits_err_improve": 0.9117500000000001,
    "time": 15872.67578125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (* (/ Om Omc) (/ Om Omc)))) (hypot 1.0 (/ 2.0 (* (/ l t) (sqrt 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.159428568136615,
    "avg_bits_err_output": 1.0454212404289767,
    "avg_bits_err_improve": 9.114007327707638,
    "time": 30085.742919921875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -1.22e+64) (pow (pow (* 2.0 (* (* U n) (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t))) 0.25) 2.0) (if (<= U 7.5e-151) (sqrt (fma (/ l Om) (* (* U (fma l -2.0 (* (- U* U) (/ n (/ Om l))))) (* 2.0 n)) (* n (* 2.0 (* U t))))) (* (sqrt (* (fma (/ l Om) (fma (* n (/ l Om)) (- U* U) (* l -2.0)) t) (* 2.0 n))) (sqrt U))))",
    "output_parens": 42,
    "avg_bits_err_input": 34.64485074348534,
    "avg_bits_err_output": 24.277824781231086,
    "avg_bits_err_improve": 10.367025962254257,
    "time": 58812.22314453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= k 4.5e-102) (not (<= k 8.6e-48))) (* (/ (/ (/ l k) (* t (sin k))) (tan k)) (* (/ l k) 2.0)) (/ (/ 2.0 (* k k)) (* (/ (sin k) l) (* t (/ (tan k) l)))))",
    "output_parens": 23,
    "avg_bits_err_input": 47.67671050232394,
    "avg_bits_err_output": 1.2551838619035909,
    "avg_bits_err_improve": 46.42152664042035,
    "time": 110297.85083007812,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -4.6e-123) (not (<= t 16.0))) (/ (/ (/ (* 2.0 (/ l t)) (sin k)) (+ 2.0 (pow (/ k t) 2.0))) (* t (* (tan k) (/ t l)))) (/ 2.0 (* t (- (fma (* t (* (/ k t) (/ (* (sin k) (* (tan k) (/ t l))) (- l)))) (/ k t) (* (sin k) (* (* (tan k) (/ t l)) (* (/ t l) -2.0))))))))",
    "output_parens": 41,
    "avg_bits_err_input": 32.03275996639717,
    "avg_bits_err_output": 9.651388478927874,
    "avg_bits_err_improve": 22.3813714874693,
    "time": 79840.03759765625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* a2 (* (sqrt 0.5) (* (cos th) a2))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.5189406047119312,
    "avg_bits_err_output": 0.48225883752235754,
    "avg_bits_err_improve": 0.03668176718957361,
    "time": 36938.755126953125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(* (pow (* k (pow PI (+ k -1.0))) -0.5) (pow (* 2.0 n) (* (+ k -1.0) -0.5)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.49293429273022,
    "avg_bits_err_output": 0.4648342630170479,
    "avg_bits_err_improve": 0.028100029713172103,
    "time": 27116.651123046875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (* J (* (sinh l) 2.0)) (cos (/ K 2.0))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 16.864990563002465,
    "avg_bits_err_output": 0.0892289628874018,
    "avg_bits_err_improve": 16.775761600115064,
    "time": 23439.375244140625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 1.0) (* (cos (/ 1.0 (pow (- (cbrt (/ -1.0 (- (* (+ m n) (* K 0.5)) M)))) 3.0))) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) (* (cos (- (/ K (pow (/ 2.0 (* (+ m n) (pow (pow (/ 2.0 (+ m n)) 4.0) 0.16666666666666666))) 3.0)) M)) (exp (- (fabs (- m n)) (+ (pow (- (/ (+ m n) 2.0) M) 2.0) l)))))",
    "output_parens": 58,
    "avg_bits_err_input": 15.698836307057327,
    "avg_bits_err_output": 1.9456583891700139,
    "avg_bits_err_improve": 13.753177917887314,
    "time": 60692.38525390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.95346936093777,
    "avg_bits_err_output": 8.06171936093777,
    "avg_bits_err_improve": 9.89175,
    "time": 34044.027099609375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (/ h l) (- INFINITY)) (* w0 (sqrt (- 1.0 (/ (* h (/ D (/ d M))) (* l (/ (/ (* d 4.0) M) D)))))) (if (<= (/ h l) 2e+68) (* w0 (sqrt (- 1.0 (/ (/ D (/ d M)) (* (/ l h) (* (/ d M) (/ 4.0 D))))))) (* w0 (/ (- 1.0 (/ (/ h (* 4.0 (/ d (* M (* M (* D D)))))) (* l d))) (sqrt (- 1.0 (/ (/ h (* 4.0 (/ d (* M (* M (* D D)))))) (* l d))))))))",
    "output_parens": 50,
    "avg_bits_err_input": 14.633980344312715,
    "avg_bits_err_output": 9.663153319396796,
    "avg_bits_err_improve": 4.970827024915918,
    "time": 56652.3125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -5e+306) (* (sqrt (- A)) (/ (/ c0 (sqrt (- V))) (sqrt l))) (if (<= (* V l) -2e-294) (* c0 (/ (sqrt (- A)) (sqrt (* V (- l))))) (if (<= (* V l) 5e-317) (* (/ c0 l) (sqrt (* A (/ l V)))) (if (<= (* V l) 2e+302) (/ (* c0 (sqrt A)) (sqrt (* V l))) (* c0 (/ (sqrt (/ A (- l))) (sqrt (- V))))))))",
    "output_parens": 44,
    "avg_bits_err_input": 19.03711654221674,
    "avg_bits_err_output": 6.656492383897849,
    "avg_bits_err_improve": 12.380624158318891,
    "time": 33838.60302734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) -4e-255) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) M)) (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) (- M))) (* (/ c0 (/ w d)) (/ d (* D (* h D)))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 0.0) (* (/ M (- (* (/ c0 w) (/ (pow (/ d D) 2.0) h)) (hypot M (* (/ c0 w) (/ (pow (/ d D) 2.0) h))))) (/ M (/ w (/ c0 2.0)))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) INFINITY) (* (/ c0 (* 2.0 w)) (fma (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) M)) (sqrt (fma (/ c0 (/ w d)) (/ d (* D (* h D))) (- M))) (* (/ c0 (/ w d)) (/ d (* D (* h D)))))) (log (pow (sqrt (exp (/ c0 w))) (* M (/ M (- (* (pow (/ d D) 2.0) (/ c0 (* w h))) (hypot (* (pow (/ d D) 2.0) (/ c0 (* w h))) M)))))))))",
    "output_parens": 170,
    "avg_bits_err_input": 59.78790956957688,
    "avg_bits_err_output": 29.252879465308972,
    "avg_bits_err_improve": 30.53503010426791,
    "time": 115765.91455078125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= h -5.5e-127) (* (* (sqrt (/ d h)) (/ -1.0 (/ (sqrt (- l)) (sqrt (- d))))) (+ (/ (/ (* h (* (* M (/ D d)) 0.25)) (/ (/ d D) (* M 0.5))) l) -1.0)) (if (<= h -5e-310) (* (+ 1.0 (/ (/ (* h (* (* M (/ D d)) -0.25)) (/ (/ d D) (* M 0.5))) l)) (* (/ (sqrt (- d)) (sqrt (- h))) (sqrt (/ d l)))) (if (<= h 8e-98) (* (/ (sqrt d) (sqrt h)) (* (sqrt (/ d l)) (+ 1.0 (* (/ (* (* M D) (* h (/ D (* d (/ 2.0 M))))) (* l (* d 2.0))) -0.5)))) (* (+ 1.0 (/ (/ (* h (* (* M (/ D d)) -0.25)) (/ (/ d D) (* M 0.5))) l)) (* (sqrt (/ d h)) (/ (sqrt d) (sqrt l)))))))",
    "output_parens": 80,
    "avg_bits_err_input": 26.30444984918681,
    "avg_bits_err_output": 15.960186744873063,
    "avg_bits_err_improve": 10.344263104313747,
    "time": 88355.51000976562,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(/ (/ (* (fma 0.0625 (pow (fma x x 1.0) -2.0) -0.0625) (/ 1.0 (+ 0.25 (/ 0.25 (fma x x 1.0))))) (+ -0.5 (/ -0.5 (hypot 1.0 x)))) (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x))))))",
    "output_parens": 18,
    "avg_bits_err_input": 15.46220520852375,
    "avg_bits_err_output": 14.949826623597348,
    "avg_bits_err_improve": 0.5123785849264024,
    "time": 41569.410400390625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9868443609377705,
    "avg_bits_err_output": 0.01175,
    "avg_bits_err_improve": 0.9750943609377705,
    "time": 4039.75439453125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (- (fma v (* v -5.0) 1.0)) (* (sqrt (fma v (* v -6.0) 2.0)) PI)) (* t (+ -1.0 (* v v))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4341304608686311,
    "avg_bits_err_output": 0.1070332863258934,
    "avg_bits_err_improve": 0.3270971745427377,
    "time": 16537.408203125,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(/ (* (sqrt (+ 2.0 (* v (* v -6.0)))) (- 1.0 (* v v))) 4.0)",
    "output_parens": 8,
    "avg_bits_err_input": 0.011323120312590145,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 0.0031981203125901452,
    "time": 10489.7685546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(expm1 (log1p (acos (/ (- (fma v (* v -5.0) 1.0)) (- 1.0 (* v v))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.5474621861276876,
    "avg_bits_err_output": 0.5490000208579454,
    "avg_bits_err_improve": -0.0015378347302578144,
    "time": 37943.293212890625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (* k (/ (- -10.0 k) a))))",
    "output_parens": 8,
    "avg_bits_err_input": 1.9828245666930557,
    "avg_bits_err_output": 0.2734924801107943,
    "avg_bits_err_improve": 1.7093320865822614,
    "time": 17353.326171875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (/ 1.0 (exp (/ (+ Vef (+ Ev (- EAccept mu))) (- KbT)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.016935321751558364,
    "avg_bits_err_output": 0.017335735647800467,
    "avg_bits_err_improve": -0.0004004138962421036,
    "time": 6873.60791015625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.1862998125036057,
    "avg_bits_err_output": 0.01411804531403246,
    "avg_bits_err_improve": 0.17218176718957323,
    "time": 7616.99560546875,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (pow (hypot b a) 4.0) (+ (* 4.0 (fma (* a a) (+ a 1.0) (* (* b b) (+ 1.0 (* a -3.0))))) -1.0))",
    "output_parens": 12,
    "avg_bits_err_input": 0.19424740211637467,
    "avg_bits_err_output": 0.033016555334299806,
    "avg_bits_err_improve": 0.16123084678207486,
    "time": 14376.62353515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.18480271804288967,
    "avg_bits_err_output": 0.029060819813890415,
    "avg_bits_err_improve": 0.15574189822899925,
    "time": 19639.44677734375,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (hypot (* p 2.0) x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 13.23647577207128,
    "avg_bits_err_output": 13.226846507087354,
    "avg_bits_err_improve": 0.009629264983926689,
    "time": 17125.740478515625,
    "seed": 28,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(sqrt (+ 1.0 (exp x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.901760617157315,
    "avg_bits_err_output": 0.046375,
    "avg_bits_err_improve": 40.85538561715732,
    "time": 4860.295166015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(if (<= (/ (- x (sin x)) (- x (tan x))) 2.0) (/ (- x (sin x)) (- x (tan x))) (* (/ (/ x (tan x)) (fma x (/ x (tan x)) x)) (- (- x) (sin x))))",
    "output_parens": 22,
    "avg_bits_err_input": 31.902755490590717,
    "avg_bits_err_output": 25.9811823339489,
    "avg_bits_err_improve": 5.921573156641816,
    "time": 32819.948486328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (- INFINITY)) (/ (- (hypot b_2 (* (sqrt (- a)) (sqrt c))) b_2) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) -2e-197) (/ (fabs (- (sqrt (- (* b_2 b_2) (* a c))) b_2)) a) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 1e-146) (/ (- c) (+ b_2 (sqrt (- (* b_2 b_2) (* a c))))) (if (<= (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) 5e+305) (/ (- (sqrt (- (* b_2 b_2) (* a c))) b_2) a) (/ (- (hypot b_2 (* (sqrt (- c)) (sqrt a))) b_2) a)))))",
    "output_parens": 67,
    "avg_bits_err_input": 34.40584995319248,
    "avg_bits_err_output": 14.493125662583719,
    "avg_bits_err_improve": 19.91272429060876,
    "time": 32657.00341796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -1e+164) (/ c (- (hypot b_2 (sqrt (* c a))) b_2)) (if (<= b_2 -3e-280) (/ c (- (sqrt (- (* b_2 b_2) (* c a))) b_2)) (if (<= b_2 4e+150) (/ (- (- b_2) (sqrt (- (* b_2 b_2) (* c a)))) a) (/ (fma b_2 (- -1.0 (/ b_2 (hypot b_2 (sqrt (* c a))))) (/ a (/ (hypot b_2 (sqrt (* c a))) c))) a))))",
    "output_parens": 36,
    "avg_bits_err_input": 34.3828390476411,
    "avg_bits_err_output": 15.841428343949817,
    "avg_bits_err_improve": 18.541410703691284,
    "time": 34201.32763671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(/ (* (sin x) (/ (tan (* x 0.5)) x)) x)",
    "output_parens": 6,
    "avg_bits_err_input": 31.402821974584036,
    "avg_bits_err_output": 0.13092030156872006,
    "avg_bits_err_improve": 31.271901673015314,
    "time": 24332.214111328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (pow E (/ (log1p x) n)) (pow x (/ 1.0 n)))",
    "output_parens": 6,
    "avg_bits_err_input": 32.65858272605914,
    "avg_bits_err_output": 32.30276132190949,
    "avg_bits_err_improve": 0.35582140414964414,
    "time": 37767.28662109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.889323456536772,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 29.881198456536772,
    "time": 15384.853759765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 x) (- -1.0 x))",
    "output_parens": 3,
    "avg_bits_err_input": 14.376828836079588,
    "avg_bits_err_output": 0.070125,
    "avg_bits_err_improve": 14.306703836079587,
    "time": 6949.5830078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (* (cos x) (/ (pow (sin eps) 2.0) (- -1.0 (cos eps)))) (* (sin eps) (sin x)))",
    "output_parens": 11,
    "avg_bits_err_input": 39.32695016404619,
    "avg_bits_err_output": 0.6369258566537911,
    "avg_bits_err_improve": 38.6900243073924,
    "time": 35760.450439453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (fma (cbrt x) (+ (cbrt (+ 1.0 x)) (/ x (pow (cbrt x) 2.0))) (/ (+ 1.0 x) (cbrt (+ 1.0 x)))))",
    "output_parens": 13,
    "avg_bits_err_input": 30.409551823361127,
    "avg_bits_err_output": 0.2105287753910074,
    "avg_bits_err_improve": 30.19902304797012,
    "time": 26992.79443359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.43412667195782,
    "avg_bits_err_output": 0.000375,
    "avg_bits_err_improve": 30.433751671957822,
    "time": 12117.206787109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (- (hypot (/ (* c (* -4.0 a)) (pow (pow (* c (* -4.0 a)) 2.0) 0.25)) b) b) (* a 2.0)) (if (<= b -1.1e-142) (/ (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (* a 2.0)) (* (/ (* -4.0 a) (* a 2.0)) (/ c (+ b (hypot b (sqrt (* 4.0 (fabs (* c a))))))))))",
    "output_parens": 34,
    "avg_bits_err_input": 34.45820643720567,
    "avg_bits_err_output": 9.118383412055309,
    "avg_bits_err_improve": 25.33982302515036,
    "time": 40637.762451171875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -1.02e-73) (/ (/ (+ b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) a) -2.0) (if (<= c 3.5e+47) (/ (/ (+ b (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25))) a) -2.0) (/ (/ (+ b (hypot b (* (sqrt (* -4.0 a)) (sqrt c)))) a) -2.0)))",
    "output_parens": 28,
    "avg_bits_err_input": 34.47193849760178,
    "avg_bits_err_output": 24.62713692373369,
    "avg_bits_err_improve": 9.844801573868093,
    "time": 37536.527587890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(+ (/ (log1p (* x (- x))) (log1p x)) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 61.34023281158273,
    "avg_bits_err_output": 0.0010731203125901444,
    "avg_bits_err_improve": 61.33915969127014,
    "time": 12315.562744140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(if (<= n 5.5e+102) (- (+ (- (+ -1.0 (* n (log1p n))) (* n (log n))) (log1p (pow n 3.0))) (log (- (fma n n 1.0) n))) (fma n (- (log1p n) (log n)) (exp (* 2.0 (+ (fma (pow (cbrt (log (sqrt (+ -1.0 (log1p n))))) 2.0) (* (cbrt (log (sqrt (+ -1.0 (log1p n))))) 2.0) (- (log (sqrt (+ -1.0 (log1p n)))))) (fma (- (sqrt (log (sqrt (+ -1.0 (log1p n)))))) (sqrt (log (sqrt (+ -1.0 (log1p n))))) (log (sqrt (+ -1.0 (log1p n))))))))))",
    "output_parens": 56,
    "avg_bits_err_input": 63.005504915345526,
    "avg_bits_err_output": 30.744945842038845,
    "avg_bits_err_improve": 32.26055907330668,
    "time": 44174.599609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (* (log1p (- eps)) 2.0) (log1p (* eps (- eps))))",
    "output_parens": 7,
    "avg_bits_err_input": 58.6068582932264,
    "avg_bits_err_output": 0.00825,
    "avg_bits_err_improve": 58.598608293226405,
    "time": 21101.90185546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (+ (fma (cbrt (pow (/ (/ (pow (tan x) 2.0) x) (+ x (tan x))) 2.0)) (cbrt (/ (/ (pow (tan x) 2.0) x) (+ x (tan x)))) (* (/ 1.0 (- x)) (/ (* x x) (+ x (tan x))))) (* 0.0 (/ x (+ x (tan x))))) (tan x))",
    "output_parens": 30,
    "avg_bits_err_input": 59.946070332992555,
    "avg_bits_err_output": 59.54027972830928,
    "avg_bits_err_improve": 0.40579060468327555,
    "time": 36748.32275390625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ eps (* (expm1 (* eps b)) (/ (expm1 (* eps a)) (expm1 (* eps (+ b a))))))",
    "output_parens": 10,
    "avg_bits_err_input": 60.25634483926499,
    "avg_bits_err_output": 29.273102579796312,
    "avg_bits_err_improve": 30.98324225946868,
    "time": 32834.01318359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.33060170075053,
    "avg_bits_err_output": 0.009125,
    "avg_bits_err_improve": 41.32147670075053,
    "time": 6966.1435546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.64451325328932,
    "avg_bits_err_output": 0.00025,
    "avg_bits_err_improve": 58.64426325328932,
    "time": 4201.83056640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.473618010929215,
    "avg_bits_err_output": 0.02225475254202879,
    "avg_bits_err_improve": 29.451363258387186,
    "time": 42834.2001953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(/ (* (sqrt (pow (+ (exp x) -2.0) 4.0)) (fma (exp x) (+ (exp x) -2.0) 1.0)) (* (exp x) (pow (+ (exp x) -2.0) 2.0)))",
    "output_parens": 15,
    "avg_bits_err_input": 29.784773665693805,
    "avg_bits_err_output": 29.135884908252002,
    "avg_bits_err_improve": 0.648888757441803,
    "time": 61873.265869140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (fma (/ (+ x (* 2.0 (- -1.0 x))) (+ x 1.0)) (+ x -1.0) x) (* x (+ x -1.0)))",
    "output_parens": 10,
    "avg_bits_err_input": 9.6849076618687,
    "avg_bits_err_output": 9.699827430073796,
    "avg_bits_err_improve": -0.014919768205096773,
    "time": 42507.553466796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(* (+ (/ (tan eps) (tan x)) (* (tan eps) (tan x))) (/ (tan x) (- 1.0 (* (tan eps) (tan x)))))",
    "output_parens": 14,
    "avg_bits_err_input": 37.45831012305874,
    "avg_bits_err_output": 0.3420882605579042,
    "avg_bits_err_improve": 37.116221862500836,
    "time": 38651.373046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (+ (/ 1.0 (pow (+ 1.0 x) -0.5)) (sqrt x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.451153362379326,
    "avg_bits_err_output": 0.12893176718957336,
    "avg_bits_err_improve": 30.322221595189752,
    "time": 22926.370849609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (/ (pow (sin eps) 2.0) (- -1.0 (cos eps))) (* (sin eps) (cos x)))",
    "output_parens": 10,
    "avg_bits_err_input": 36.814638662066,
    "avg_bits_err_output": 0.3434607009029542,
    "avg_bits_err_improve": 36.47117796116305,
    "time": 24026.55224609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 20.194070471701124,
    "avg_bits_err_output": 0.11615808281331132,
    "avg_bits_err_improve": 20.077912388887814,
    "time": 21185.794189453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(atan2 1.0 (fma N N (+ 1.0 N)))",
    "output_parens": 3,
    "avg_bits_err_input": 14.985983612324597,
    "avg_bits_err_output": 0.3152452578336286,
    "avg_bits_err_improve": 14.670738354490968,
    "time": 9521.04541015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.800148016001764,
    "avg_bits_err_output": 1.4198377343724662,
    "avg_bits_err_improve": 28.3803102816293,
    "time": 29463.11962890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07936580507553277,
    "avg_bits_err_output": 0.07876204570071307,
    "avg_bits_err_improve": 0.0006037593748196984,
    "time": 24511.587158203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(/ (* b (- a)) (/ (/ 1.0 a) b))",
    "output_parens": 5,
    "avg_bits_err_input": 16.681680381599026,
    "avg_bits_err_output": 0.2718453841902883,
    "avg_bits_err_improve": 16.409834997408737,
    "time": 18018.805419921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* (pow (/ (/ angle angle) (* angle 3.08641975308642e-5)) -1.0) (/ PI 0.005555555555555556)))) 2.0))",
    "output_parens": 15,
    "avg_bits_err_input": 20.634345486172702,
    "avg_bits_err_output": 20.700627910347002,
    "avg_bits_err_improve": -0.0662824241743003,
    "time": 47001.831298828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (* (sin (* PI (* angle 0.011111111111111112))) (+ b a)) (- b a))",
    "output_parens": 7,
    "avg_bits_err_input": 31.456268841423093,
    "avg_bits_err_output": 21.68391552733294,
    "avg_bits_err_improve": 9.772353314090154,
    "time": 44135.916259765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (/ (/ PI 180.0) (/ 1.0 angle)))) 2.0) (pow (* b (cos (/ PI (/ 180.0 angle)))) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 21.348467854042926,
    "avg_bits_err_output": 21.3555194075305,
    "avg_bits_err_improve": -0.00705155348757458,
    "time": 51679.323486328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(* m (+ (/ (* m (- 1.0 m)) v) -1.0))",
    "output_parens": 5,
    "avg_bits_err_input": 0.1812550362151282,
    "avg_bits_err_output": 0.1812550362151282,
    "avg_bits_err_improve": 0,
    "time": 21500.7080078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (fma (tan x) (tan x) -1.0) (- -1.0 (pow (tan x) 2.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.32299789178787647,
    "avg_bits_err_output": 0.31375567096001583,
    "avg_bits_err_improve": 0.009242220827860637,
    "time": 40249.538330078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13271936093777043,
    "avg_bits_err_output": 0.13271936093777043,
    "avg_bits_err_improve": 0,
    "time": 24746.919189453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (fma (cos lambda1) (cos lambda2) (* (sin lambda1) (sin lambda2))) (* (cos phi1) (cos phi2))))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 16.845404614420108,
    "avg_bits_err_output": 3.870370472992401,
    "avg_bits_err_improve": 12.975034141427706,
    "time": 41683.723876953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(/ (* (/ a a) (/ (* c 4.0) -2.0)) (+ b (sqrt (+ (* b b) (* a (* c -4.0))))))",
    "output_parens": 11,
    "avg_bits_err_input": 52.64142193928883,
    "avg_bits_err_output": 0.08738684218813102,
    "avg_bits_err_improve": 52.5540350971007,
    "time": 61195.23681640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (/ (fma (pow b 18.0) (+ (pow b 9.0) (pow (fma b b (* a (* c -4.0))) 4.5)) (* (pow (fma b b (* a (* c -4.0))) 9.0) (- (- (pow b 9.0)) (pow (fma b b (* a (* c -4.0))) 4.5)))) (* (+ (pow b 9.0) (pow (fma b b (* a (* c -4.0))) 4.5)) (+ (pow b 9.0) (pow (fma b b (* a (* c -4.0))) 4.5)))) (* (fma b b (fma b (sqrt (fma b b (* a (* c -4.0)))) (fma b b (* a (* c -4.0))))) (+ (+ (pow b 6.0) (pow (fma b b (* a (* c -4.0))) 3.0)) (pow (* (fma b b (* a (* c -4.0))) (* b b)) 1.5)))) (/ -0.5 a))",
    "output_parens": 60,
    "avg_bits_err_input": 28.61555811155753,
    "avg_bits_err_output": 27.136158862236783,
    "avg_bits_err_improve": 1.4793992493207462,
    "time": 81118.05615234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (fma a (* c -4.0) (* b (- b b))) a) (/ 0.5 (+ b (sqrt (fma b b (* a (* c -4.0)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 43.974908201120016,
    "avg_bits_err_output": 0.3952016937655054,
    "avg_bits_err_improve": 43.57970650735451,
    "time": 64228.8544921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot (* (sqrt c) (sqrt (* a -4.0))) b) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -5e-189) (/ (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 2e-146) (/ (/ 0.5 a) (/ (+ b (hypot b (sqrt (* -4.0 (* a c))))) (* -4.0 (* a c)))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+277) (/ (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (* a 2.0)) (/ (- (hypot (* (pow (* (* (* 4.0 a) c) (* 4.0 c)) 0.25) (pow a 0.25)) b) b) (* a 2.0))))))",
    "output_parens": 86,
    "avg_bits_err_input": 34.46880819558325,
    "avg_bits_err_output": 22.03222620472756,
    "avg_bits_err_improve": 12.43658199085569,
    "time": 42137.0390625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (sin lambda2) (cos lambda1)))) (/ (+ (* (pow (cos phi1) 2.0) (- (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))) (* (cos phi1) (* (cos phi2) (- (pow (* (sin lambda1) (sin lambda2)) 2.0) (pow (* (cos lambda2) (cos lambda1)) 2.0))))) (* (cos phi1) (- (* (sin lambda1) (sin lambda2)) (* (cos lambda2) (cos lambda1)))))))",
    "output_parens": 45,
    "avg_bits_err_input": 0.9314431385492803,
    "avg_bits_err_output": 0.26803600130655963,
    "avg_bits_err_improve": 0.6634071372427206,
    "time": 34781.398681640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(/ (/ (+ (pow (fma 8.0 (pow (+ 1.0 (pow (exp -2.0) x)) -3.0) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) -1.0)) 2.0) (* (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) -4.0)) (+ (fma 8.0 (pow (+ 1.0 (pow (exp -2.0) x)) -3.0) (fma 4.0 (pow (+ 1.0 (pow (exp -2.0) x)) -2.0) -1.0)) (/ 2.0 (+ 1.0 (pow (exp -2.0) x))))) (pow (+ 1.0 (/ 2.0 (+ 1.0 (pow (exp -2.0) x)))) 2.0))",
    "output_parens": 40,
    "avg_bits_err_input": 29.52380263861097,
    "avg_bits_err_output": 29.51443688816097,
    "avg_bits_err_improve": 0.009365750450001542,
    "time": 39402.10009765625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.12213032889227,
    "avg_bits_err_output": 0.01375,
    "avg_bits_err_improve": 58.10838032889227,
    "time": 8731.6162109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 57.996967362018786,
    "avg_bits_err_output": 0.00875,
    "avg_bits_err_improve": 57.98821736201879,
    "time": 13170.61962890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ (+ (pow (+ 1.0 (/ 1.0 (cosh x))) 2.0) -1.0) (+ (/ 1.0 (cosh x)) 2.0))",
    "output_parens": 9,
    "avg_bits_err_input": 0.008323120312590145,
    "avg_bits_err_output": 0.16421104516055302,
    "avg_bits_err_improve": -0.15588792484796288,
    "time": 10189.531494140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (/ (+ x 1.0) (sqrt (/ (+ x 1.0) (+ x -1.0))))))",
    "output_parens": 8,
    "avg_bits_err_input": 32.07419812031259,
    "avg_bits_err_output": 0.08194812031259013,
    "avg_bits_err_improve": 31.99225,
    "time": 13294.06298828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (+ (log1p (* x (- x))) (* -2.0 (log1p (- x)))))",
    "output_parens": 8,
    "avg_bits_err_input": 58.596442739326356,
    "avg_bits_err_output": 0.00825,
    "avg_bits_err_improve": 58.58819273932636,
    "time": 16499.92138671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(- (log (/ x (+ 1.0 (sqrt (- 1.0 (* x x)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.020049039677847345,
    "avg_bits_err_output": 0.0019759193652572004,
    "avg_bits_err_improve": 0.018073120312590146,
    "time": 7904.47998046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (+ (* ew (/ (sin t) (hypot 1.0 (/ eh (* ew (tan t)))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.12707312031259016,
    "avg_bits_err_output": 0.12832312031259016,
    "avg_bits_err_improve": -0.0012500000000000011,
    "time": 35144.08203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (/ ew (hypot 1.0 (* eh (/ (tan t) ew)))) (cos t)) (* eh (* (sin t) (sin (atan (/ (- eh) (/ ew (tan t)))))))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.1242712406251803,
    "avg_bits_err_output": 0.12813684218813104,
    "avg_bits_err_improve": -0.003865601562950738,
    "time": 41736.96435546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (* (- lambda1 lambda2) (fma (sin (* phi2 0.5)) (- (sin (* 0.5 phi1))) (* (cos (* phi2 0.5)) (cos (* 0.5 phi1))))) (- phi1 phi2)))",
    "output_parens": 16,
    "avg_bits_err_input": 38.40633293832862,
    "avg_bits_err_output": 0.11928226983402808,
    "avg_bits_err_improve": 38.28705066849459,
    "time": 36154.14111328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(exp (* 0.5 (log1p (- (pow (/ b a) 2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 15.024248602497597,
    "avg_bits_err_output": 0.0015614816370412093,
    "avg_bits_err_improve": 15.022687120860555,
    "time": 6524.693115234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin delta) (* (sin theta) (cos phi1))) (- (cos delta) (fma (+ -1.0 (cos (* phi1 2.0))) (* (cos delta) -0.5) (* (sin delta) (* (cos phi1) (* (cos theta) (sin phi1))))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.1503200559205525,
    "avg_bits_err_output": 0.17903729799837725,
    "avg_bits_err_improve": -0.02871724207782475,
    "time": 54341.409912109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 52.66005239941638,
    "avg_bits_err_output": 0.3805265046946216,
    "avg_bits_err_improve": 52.27952589472176,
    "time": 40304.72705078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.78284198433713,
    "avg_bits_err_output": 0.4407842125151451,
    "avg_bits_err_improve": 28.342057771821985,
    "time": 51431.857666015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (- c) (+ b (sqrt (fma c (* -3.0 a) (* b b)))))",
    "output_parens": 7,
    "avg_bits_err_input": 44.025899448391854,
    "avg_bits_err_output": 0.163636842188131,
    "avg_bits_err_improve": 43.86226260620372,
    "time": 40117.8046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= b -8.5e-88) (/ (fma (hypot b (sqrt (fabs (* a (* c -3.0))))) 0.3333333333333333 (* b -0.3333333333333333)) a) (if (<= b 1.1e-44) (/ 1.0 (- (/ (+ b (hypot b (sqrt (* a (* c -3.0))))) c))) (if (<= b 4.6e+47) (/ (/ (+ (* c (* a -3.0)) (- (* b b) (* b b))) (+ b (sqrt (fma c (* a -3.0) (* b b))))) (* a 3.0)) (* 0.3333333333333333 (/ (/ c -0.3333333333333333) (+ b (hypot b (sqrt (* a (* c -3.0))))))))))",
    "output_parens": 44,
    "avg_bits_err_input": 34.50402994997815,
    "avg_bits_err_output": 17.578059386069494,
    "avg_bits_err_improve": 16.925970563908653,
    "time": 51628.479736328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (sin lambda1) (cos lambda2) (* (cos lambda1) (- (sin lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (cos phi2) (sin phi1)) (+ (log1p (expm1 (* (sin lambda1) (sin lambda2)))) (* (cos lambda2) (cos lambda1))))))",
    "output_parens": 27,
    "avg_bits_err_input": 12.948513061722045,
    "avg_bits_err_output": 0.1691059544693145,
    "avg_bits_err_improve": 12.77940710725273,
    "time": 47794.681396484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (- 1.0 (+ x (* (+ 1.0 x) (+ -1.0 (/ -1.0 x))))) (* (- 1.0 x) (/ (+ 1.0 x) x)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.37113755413338,
    "avg_bits_err_output": 25.433446988159222,
    "avg_bits_err_improve": 3.937690565974158,
    "time": 32579.266357421875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(+ (/ 1.0 (+ x -1.0)) (/ x (+ 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.011125,
    "avg_bits_err_output": 0.011125,
    "avg_bits_err_improve": 0,
    "time": 12608.43115234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (/ 2.0 (+ x 1.0)) (- 1.0 x))",
    "output_parens": 4,
    "avg_bits_err_input": 14.321671084054008,
    "avg_bits_err_output": 0.074625,
    "avg_bits_err_improve": 14.24704608405401,
    "time": 30902.1904296875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -8.4e-308) (/ (* (sqrt (fma B B (* (* A C) -4.0))) (- (sqrt (* (* F (- A (- (hypot B (- A C)) C))) 2.0)))) (+ (* B B) (* (* A C) -4.0))) (/ (* (sqrt (* (- A (- (hypot B (- A C)) C)) (fma B (* B 2.0) (* C (* A -8.0))))) (- (sqrt F))) (fma B B (* A (* C -4.0)))))",
    "output_parens": 37,
    "avg_bits_err_input": 52.16865161148619,
    "avg_bits_err_output": 43.873344498632825,
    "avg_bits_err_improve": 8.295307112853365,
    "time": 53966.013916015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(* 180.0 (/ (atan (/ (- (- C A) (hypot B (- A C))) B)) PI))",
    "output_parens": 8,
    "avg_bits_err_input": 30.0025210089891,
    "avg_bits_err_output": 14.378202653940248,
    "avg_bits_err_improve": 15.624318355048851,
    "time": 37225.090576171875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (+ (pow B 2.0) (* C (* A -4.0))) F)) (+ (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (+ (pow B 2.0) (* C (* A -4.0)))) 0.0) (/ (* (* (sqrt F) (sqrt (fma B B (* A (* C -4.0))))) (- (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))))) (+ (* B B) (* -4.0 (* A C)))) (/ (* (sqrt (* 2.0 (+ A (+ C (hypot B (- A C)))))) (- (sqrt (+ (* B (* B F)) (* F (* C (* A -4.0))))))) (+ (* B B) (* -4.0 (* A C)))))",
    "output_parens": 62,
    "avg_bits_err_input": 52.36921926210302,
    "avg_bits_err_output": 41.061285045352,
    "avg_bits_err_improve": 11.307934216751022,
    "time": 44751.33984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(/ 1.0 (* (cbrt (/ 2.0 g)) (cbrt a)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.690131836924849,
    "avg_bits_err_output": 0.8821012992291143,
    "avg_bits_err_improve": 14.808030537695734,
    "time": 21775.181640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (* (/ 1.0 (cbrt (* a 2.0))) (cbrt (- (hypot g h) g))) (/ (cbrt (* (+ g (hypot g h)) -0.5)) (cbrt a)))",
    "output_parens": 14,
    "avg_bits_err_input": 35.53274624010303,
    "avg_bits_err_output": 2.8638433890814055,
    "avg_bits_err_improve": 32.66890285102163,
    "time": 31147.490478515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (* (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (/ 1.0 (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.9904251890708848,
    "avg_bits_err_output": 0.042703384382031244,
    "avg_bits_err_improve": 0.9477218046888536,
    "time": 24558.1669921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- (log1p (exp (- b a)))))",
    "output_parens": 5,
    "avg_bits_err_input": 0.7035212406251803,
    "avg_bits_err_output": 0.008552083199991933,
    "avg_bits_err_improve": 0.6949691574251884,
    "time": 14364.010498046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (<= (/ (* a1 a2) (* b1 b2)) (- INFINITY)) (* (/ a1 b1) (/ a2 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) -5e-259) (/ (* a1 a2) (* b1 b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 0.0) (* a1 (/ (/ a2 b1) b2)) (if (<= (/ (* a1 a2) (* b1 b2)) 2e+289) (/ (* a1 a2) (* b1 b2)) (/ (/ a2 b2) (/ b1 a1))))))",
    "output_parens": 36,
    "avg_bits_err_input": 11.326408975029926,
    "avg_bits_err_output": 2.9283367985604922,
    "avg_bits_err_improve": 8.398072176469434,
    "time": 13064.6474609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.3967590118918804,
    "avg_bits_err_output": 0.35021599005682036,
    "avg_bits_err_improve": 0.04654302183506004,
    "time": 6484.395751953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -0.5) (- (log (- (hypot 1.0 x) x))) (log1p (+ x (/ x (/ (+ 1.0 (hypot 1.0 x)) x)))))",
    "output_parens": 12,
    "avg_bits_err_input": 52.82564529594612,
    "avg_bits_err_output": 0.019125,
    "avg_bits_err_improve": 52.806520295946115,
    "time": 18726.674072265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.740093080754705,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.740093080754705,
    "time": 1859.638671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ 1.0 (sqrt (/ (+ 1.0 x) (- 1.0 x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.01475,
    "avg_bits_err_output": 0.01425,
    "avg_bits_err_improve": 0.0004999999999999987,
    "time": 10163.07666015625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1288.707763671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (/ (/ -2.0 r) (- r)) (+ -1.5 (* (pow (* r w) 2.0) (/ (+ -0.375 (* v 0.25)) (- 1.0 v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 12.980985044843623,
    "avg_bits_err_output": 0.3078007448090121,
    "avg_bits_err_improve": 12.67318430003461,
    "time": 42086.62744140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (* (+ 1.0 (* x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0))) (+ x1 (pow x1 3.0))))))",
    "output_parens": 38,
    "avg_bits_err_input": 0.5128586979480503,
    "avg_bits_err_output": 0.3160787972412417,
    "avg_bits_err_improve": 0.19677990070680856,
    "time": 85281.32983398438,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 18.39720575079531,
    "avg_bits_err_output": 1.3159152972399017,
    "avg_bits_err_improve": 17.08129045355541,
    "time": 14948.73583984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (+ (* x (* x -0.12900613773279798)) 0.954929658551372))",
    "output_parens": 4,
    "avg_bits_err_input": 0.23615584257481162,
    "avg_bits_err_output": 0.18730432343849157,
    "avg_bits_err_improve": 0.04885151913632005,
    "time": 19251.54833984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.003625,
    "avg_bits_err_output": 0.003625,
    "avg_bits_err_improve": 0,
    "time": 2827.927490234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ (/ PI b) (/ a 0.5)) (+ b a))",
    "output_parens": 5,
    "avg_bits_err_input": 14.242238088516295,
    "avg_bits_err_output": 0.25007105312878586,
    "avg_bits_err_improve": 13.99216703538751,
    "time": 46536.30078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (exp (- (* eps x) x)) (* (+ (/ 1.0 eps) -1.0) (/ -1.0 (exp (fma eps x x))))) 2.0)",
    "output_parens": 13,
    "avg_bits_err_input": 30.23530296898333,
    "avg_bits_err_output": 30.25012608292639,
    "avg_bits_err_improve": -0.01482311394305924,
    "time": 43053.89453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.019,
    "avg_bits_err_output": 0.004375,
    "avg_bits_err_improve": 0.014624999999999999,
    "time": 15802.80908203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (fma (/ 2.0 (+ 1.0 t)) (+ (/ 2.0 (+ 1.0 t)) -4.0) 5.0) (fma (/ 2.0 (+ 1.0 t)) (+ (/ 2.0 (+ 1.0 t)) -4.0) 6.0))",
    "output_parens": 13,
    "avg_bits_err_input": 0.022625,
    "avg_bits_err_output": 0.006792481250360578,
    "avg_bits_err_improve": 0.01583251874963942,
    "time": 72769.83471679688,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(/ (+ 1.0 (/ 4.0 (pow (/ (+ 1.0 t) t) 2.0))) (+ 2.0 (/ 4.0 (pow (/ (+ 1.0 t) t) 2.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.04875,
    "avg_bits_err_output": 0.00875,
    "avg_bits_err_improve": 0.04,
    "time": 26217.123046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3605.819091796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3692.521484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4480.59033203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.847342034684209,
    "avg_bits_err_output": 0.2395,
    "avg_bits_err_improve": 7.607842034684209,
    "time": 21527.693115234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.638903356860634,
    "avg_bits_err_output": 7.638903356860634,
    "avg_bits_err_improve": 0,
    "time": 29930.743896484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(+ (* (* eps 2.0) x) (* eps eps))",
    "output_parens": 4,
    "avg_bits_err_input": 16.03787629900214,
    "avg_bits_err_output": 0.013375,
    "avg_bits_err_improve": 16.02450129900214,
    "time": 12034.5302734375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.5614595501176867,
    "avg_bits_err_output": 0.38765394844570356,
    "avg_bits_err_improve": 3.173805601671983,
    "time": 29505.345458984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 15.11125884618631,
    "avg_bits_err_output": 0.01751428593921275,
    "avg_bits_err_improve": 15.093744560247098,
    "time": 9570.069580078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 45.42939066357538,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 45.42939066357538,
    "time": 3900.83642578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 38.73041824971003,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 38.729918249710025,
    "time": 3962.819091796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.293875,
    "avg_bits_err_improve": 63.706125,
    "time": 65783.77197265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(/ (* t t) 2.5e+31)",
    "output_parens": 2,
    "avg_bits_err_input": 61.8432546466958,
    "avg_bits_err_output": 0.4151842109406551,
    "avg_bits_err_improve": 61.428070435755146,
    "time": 12701.53662109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= c -1.02e-73) (/ (/ (+ b (hypot b (* (sqrt (* c -4.0)) (sqrt a)))) a) -2.0) (if (<= c 3.5e+47) (/ (/ (+ b (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25))) a) -2.0) (/ (/ (+ b (hypot b (* (sqrt (* -4.0 a)) (sqrt c)))) a) -2.0)))",
    "output_parens": 28,
    "avg_bits_err_input": 34.47193849760178,
    "avg_bits_err_output": 24.62713692373369,
    "avg_bits_err_improve": 9.844801573868093,
    "time": 37068.49267578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot (* (sqrt c) (sqrt (* a -4.0))) b) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -5e-189) (/ (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 2e-146) (/ (/ 0.5 a) (/ (+ b (hypot b (sqrt (* -4.0 (* a c))))) (* -4.0 (* a c)))) (if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) 1e+277) (/ (- (sqrt (+ (* b b) (* a (* c -4.0)))) b) (* a 2.0)) (/ (- (hypot (* (pow (* (* (* 4.0 a) c) (* 4.0 c)) 0.25) (pow a 0.25)) b) b) (* a 2.0))))))",
    "output_parens": 86,
    "avg_bits_err_input": 34.46880819558325,
    "avg_bits_err_output": 22.03222620472756,
    "avg_bits_err_improve": 12.43658199085569,
    "time": 43172.104248046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2176.746337890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ 1.0 (/ x (expm1 x)))",
    "output_parens": 3,
    "avg_bits_err_input": 39.95170034462739,
    "avg_bits_err_output": 0.015115601562950724,
    "avg_bits_err_improve": 39.93658474306444,
    "time": 9362.5810546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (/ (- x y) (hypot x y)) (/ (hypot x y) (+ x y)))",
    "output_parens": 7,
    "avg_bits_err_input": 20.466781533013744,
    "avg_bits_err_output": 0.02819401640286851,
    "avg_bits_err_improve": 20.438587516610877,
    "time": 26188.247802734375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (fma 1.0 (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6390114363130643,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6390114363130643,
    "time": 53024.08642578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(* a (+ c (+ b d)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.03625,
    "avg_bits_err_output": 0.037125,
    "avg_bits_err_improve": -0.0008750000000000008,
    "time": 4484.5517578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* a (+ a (+ b b))) (* b b))",
    "output_parens": 5,
    "avg_bits_err_input": 0.020969360937770437,
    "avg_bits_err_output": 0.010125,
    "avg_bits_err_improve": 0.010844360937770437,
    "time": 3780.005615234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(+ (* x x) (* x (* x x)))",
    "output_parens": 4,
    "avg_bits_err_input": 0.015,
    "avg_bits_err_output": 0.015,
    "avg_bits_err_improve": 0,
    "time": 5411.531005859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.00125,
    "avg_bits_err_output": 0.00125,
    "avg_bits_err_improve": 0,
    "time": 1631.023681640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ d (+ e (+ c (+ b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.40246729375396656,
    "avg_bits_err_output": 0.24,
    "avg_bits_err_improve": 0.16246729375396657,
    "time": 10395.233154296875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.91012317378537,
    "avg_bits_err_output": 0.007625,
    "avg_bits_err_improve": 29.902498173785368,
    "time": 14922.173583984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.34135249968183,
    "avg_bits_err_output": 0.29389624062518027,
    "avg_bits_err_improve": 24.04745625905665,
    "time": 11960.073974609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(* (/ (+ (+ (pow (/ x (sin x)) 3.0) (pow (/ x (sin x)) 2.0)) (- -1.0 (/ x (sin x)))) (* (pow (cbrt (+ (/ x (sin x)) 1.0)) 2.0) (cbrt (pow (+ (/ x (sin x)) 1.0) 4.0)))) (cos x))",
    "output_parens": 25,
    "avg_bits_err_input": 30.08428995822381,
    "avg_bits_err_output": 30.104327980265413,
    "avg_bits_err_improve": -0.020038022041603654,
    "time": 45540.38623046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.007792481250360578,
    "avg_bits_err_output": 0.000625,
    "avg_bits_err_improve": 0.0071674812503605785,
    "time": 2312.35888671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ (pow (+ 1.0 (/ i n)) n) -1.0) (/ i n)) 100.0) (+ (* n (* 100.0 (/ (pow (+ 1.0 (/ i n)) n) i))) (/ n (/ i -100.0))) (* n (/ (+ -100.0 (* 100.0 (pow (exp n) (log1p (/ i n))))) i))))",
    "output_parens": 40,
    "avg_bits_err_input": 47.80853741260593,
    "avg_bits_err_output": 10.606769537991536,
    "avg_bits_err_improve": 37.20176787461439,
    "time": 34837.2568359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(fma b (/ (/ d (hypot d c)) (hypot d c)) (/ (* c (/ a (hypot d c))) (hypot d c)))",
    "output_parens": 10,
    "avg_bits_err_input": 26.722039910265075,
    "avg_bits_err_output": 2.2959775354552057,
    "avg_bits_err_improve": 24.42606237480987,
    "time": 32876.5419921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(- (/ (/ b (/ (hypot c d) c)) (hypot c d)) (/ (/ a (/ (hypot c d) d)) (hypot c d)))",
    "output_parens": 11,
    "avg_bits_err_input": 26.48712388619866,
    "avg_bits_err_output": 0.5628525818813127,
    "avg_bits_err_improve": 25.924271304317347,
    "time": 32241.11572265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.032125,
    "avg_bits_err_output": 0.02092096949993182,
    "avg_bits_err_improve": 0.011204030500068182,
    "time": 8323.647216796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (sin (* (* uy 2.0) PI)) (sqrt (/ (pow (pow (- (pow (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))) -2.0) (* (pow (+ (pow (- (fma ux maxCos 1.0) ux) 4.0) (+ 1.0 (pow (- (fma ux maxCos 1.0) ux) 2.0))) -2.0) (log (+ 1.0 (expm1 (pow (fma ux maxCos (- 1.0 ux)) 12.0)))))) 3.0) 0.3333333333333333) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 6.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 56,
    "avg_bits_err_input": 13.636810760200278,
    "avg_bits_err_output": 12.027911027442412,
    "avg_bits_err_improve": 1.608899732757866,
    "time": 115689.97924804688,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* PI (* uy 2.0))) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) 2.0) (/ (/ (pow (pow (fma ux maxCos (- 1.0 ux)) 4.0) 3.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (* (pow (sqrt (- (fma ux maxCos 1.0) ux)) 6.0) (pow (sqrt (- (fma ux maxCos 1.0) ux)) 6.0)) (+ (pow (fma ux maxCos (- 1.0 ux)) 2.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0))))))))",
    "output_parens": 67,
    "avg_bits_err_input": 13.665775788780483,
    "avg_bits_err_output": 12.039555959957314,
    "avg_bits_err_improve": 1.626219828823169,
    "time": 92199.8408203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma (* (- 1.0 ux) maxCos) (* ux zi) (fma (* (cos (* uy (* 2.0 PI))) (sqrt (- 1.0 (* ux (* ux (* (* (- 1.0 ux) (- 1.0 ux)) (* maxCos maxCos))))))) xi (* (sqrt (- 1.0 (* ux (* ux (* (* (- 1.0 ux) (- 1.0 ux)) (* maxCos maxCos)))))) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 32,
    "avg_bits_err_input": 0.3375869690582136,
    "avg_bits_err_output": 0.3263072711866592,
    "avg_bits_err_improve": 0.011279697871554417,
    "time": 76343.4892578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ u0 (* (fma (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (/ (cos (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) alphax) (* (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (/ (sin (atan (* (/ alphay alphax) (tan (* PI (+ (* 2.0 u1) 0.5)))))) (* alphay alphay)))) (- 1.0 u0))))))",
    "output_parens": 44,
    "avg_bits_err_input": 0.19545630303031034,
    "avg_bits_err_output": 0.19618730264362969,
    "avg_bits_err_improve": -0.0007309996133193497,
    "time": 27772.958251953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* u2 (* 39.47841760436263 u2)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5380415291800155,
    "avg_bits_err_output": 0.5013141016581473,
    "avg_bits_err_improve": 0.036727427521868194,
    "time": 23483.0673828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3137584999820968,
    "avg_bits_err_output": 0.3087610769126925,
    "avg_bits_err_improve": 0.0049974230694043165,
    "time": 25750.4970703125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (- (log (+ (/ 1.0 (+ (/ u (+ 1.0 (exp (/ (- PI) s)))) (/ (- 1.0 u) (+ 1.0 (exp (/ 1.0 (/ s PI))))))) -1.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.3369293245419511,
    "avg_bits_err_output": 0.33854716634340154,
    "avg_bits_err_improve": -0.0016178418014504148,
    "time": 32336.795654296875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ x (- s))))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.06315855607968592,
    "avg_bits_err_output": 0.04392676477927609,
    "avg_bits_err_improve": 0.019231791300409827,
    "time": 17401.157958984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(/ 1.0 (expm1 (log1p (* s (+ 2.0 (* 2.0 (cosh (/ (fabs x) s))))))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.1565690076009342,
    "avg_bits_err_output": 0.1584440800127248,
    "avg_bits_err_improve": -0.001875072411790607,
    "time": 30809.61083984375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* tau (expm1 (log1p (* x PI))))) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 13,
    "avg_bits_err_input": 0.6513452135954878,
    "avg_bits_err_output": 0.6835950235245164,
    "avg_bits_err_improve": -0.032249809929028594,
    "time": 29565.548828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(fma v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v))))) 1.0)",
    "output_parens": 7,
    "avg_bits_err_input": 0.16747158469483756,
    "avg_bits_err_output": 0.16173303305689957,
    "avg_bits_err_improve": 0.005738551637937989,
    "time": 23006.865234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot eta (sqrt (/ sinTheta_O (/ (hypot 1.0 sinTheta_O) sinTheta_O)))))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 20,
    "avg_bits_err_input": 2.612310869104001,
    "avg_bits_err_output": 0.3759399880594171,
    "avg_bits_err_improve": 2.236370881044584,
    "time": 36249.956787109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(/ (* cosTheta_i cosTheta_O) (* (* (/ (* 2.0 v) (/ 1.0 v)) (sinh (/ 1.0 v))) (exp (* (/ sinTheta_O v) sinTheta_i))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.4526825504145021,
    "avg_bits_err_output": 0.4006691628365766,
    "avg_bits_err_improve": 0.05201338757792551,
    "time": 42739.60205078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(* (pow (pow (cbrt (sqrt (exp (fma (/ 1.0 v) (+ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) -1.0) 0.6931)))) 3.0) 2.0) (/ 0.5 v))",
    "output_parens": 13,
    "avg_bits_err_input": 0.10742929765524199,
    "avg_bits_err_output": 0.10584389288026824,
    "avg_bits_err_improve": 0.0015854047749737504,
    "time": 33723.725830078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (+ (* alpha alpha) -1.0) (* (log (pow alpha (* 2.0 PI))) (+ 1.0 (* cosTheta (* (+ (* alpha alpha) -1.0) cosTheta)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.46684033353438215,
    "avg_bits_err_output": 0.43789869330450504,
    "avg_bits_err_improve": 0.028941640229877108,
    "time": 53553.2548828125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* (log1p (/ (- 0.25 u) 0.75)) (* s -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.311871300643012,
    "avg_bits_err_output": 0.5383784941039985,
    "avg_bits_err_improve": 0.7734928065390135,
    "time": 26004.7099609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.31327778622974,
    "avg_bits_err_output": 0.2045,
    "avg_bits_err_improve": 12.10877778622974,
    "time": 23508.720703125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(* (/ (/ 0.125 s) PI) (+ (/ (exp (/ (- r) s)) r) (/ (* (cbrt (pow (exp -0.6666666666666666) (/ r s))) (exp (/ (* r -0.1111111111111111) s))) r)))",
    "output_parens": 17,
    "avg_bits_err_input": 0.1346384577372028,
    "avg_bits_err_output": 0.2898347188006975,
    "avg_bits_err_improve": -0.1551962610634947,
    "time": 76293.62084960938,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* normAngle u)) (sin normAngle)) n1_i (* (sin (- normAngle (* normAngle u))) (/ n0_i (sin normAngle))))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9343527535727689,
    "avg_bits_err_output": 0.7890206378674076,
    "avg_bits_err_improve": 0.1453321157053613,
    "time": 39528.346435546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ (sqrt (- 1.0 (+ cosTheta cosTheta))) (* cosTheta (sqrt PI))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 13,
    "avg_bits_err_input": 0.7028325369087378,
    "avg_bits_err_output": 0.4751081446810973,
    "avg_bits_err_improve": 0.22772439222764052,
    "time": 22807.1611328125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (/ -1.0 (/ 1.0 (log1p (- u1))))) (sin (* (* 2.0 PI) u2)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.395732373251557,
    "avg_bits_err_output": 0.5442839286275041,
    "avg_bits_err_improve": 12.851448444624053,
    "time": 24558.15478515625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.434744053587542,
    "avg_bits_err_output": 0.2958049570455201,
    "avg_bits_err_improve": 13.138939096542021,
    "time": 30117.171142578125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* alpha (- alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.340866284373869,
    "avg_bits_err_output": 0.32058740625180293,
    "avg_bits_err_improve": 14.020278878122065,
    "time": 20181.878662109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (/ (log1p (- u0)) (fma (/ sin2phi alphay) alphax (/ (* alphay cos2phi) alphax))) (* alphay (- alphax)))",
    "output_parens": 10,
    "avg_bits_err_input": 12.601033155138609,
    "avg_bits_err_output": 0.49577556141614537,
    "avg_bits_err_improve": 12.105257593722463,
    "time": 29778.211669921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(- (* PI l) (/ (/ (tan (* PI l)) F) F))",
    "output_parens": 6,
    "avg_bits_err_input": 16.22565607336345,
    "avg_bits_err_output": 11.921618422855103,
    "avg_bits_err_improve": 4.304037650508347,
    "time": 32193.101318359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(- (/ 1.0 (sin B)) (/ x (tan B)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.21874060156295072,
    "avg_bits_err_output": 0.15557312031259016,
    "avg_bits_err_improve": 0.06316748125036056,
    "time": 22522.138671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(if (<= x -1.0) (- (/ F (* (sqrt (fma x 2.0 (fma F F 2.0))) (sin B))) (/ x (tan B))) (- (/ (/ F (hypot F (sqrt (fma 2.0 x 2.0)))) (sin B)) (/ x (tan B))))",
    "output_parens": 20,
    "avg_bits_err_input": 13.570001173261042,
    "avg_bits_err_output": 0.3469642947132049,
    "avg_bits_err_improve": 13.223036878547838,
    "time": 33371.8896484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* (/ (log (/ 1.0 (tanh (* PI (* 0.25 f))))) PI) -4.0)",
    "output_parens": 7,
    "avg_bits_err_input": 61.5730331379407,
    "avg_bits_err_output": 0.6125703385910185,
    "avg_bits_err_improve": 60.96046279934968,
    "time": 49611.1591796875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(if (or (<= t -3e-29) (not (<= t 1.35e-38))) (/ (* t (sqrt 2.0)) (sqrt (- (* (/ (* 2.0 (* t t)) (+ x -1.0)) (+ x 1.0)) (* l (+ l (* l (/ (- -1.0 x) (+ x -1.0)))))))) (/ 1.0 (/ (/ (hypot l (sqrt (/ (* (+ x 1.0) (fma l l (* t (* t 2.0)))) (+ x -1.0)))) (sqrt 2.0)) t)))",
    "output_parens": 35,
    "avg_bits_err_input": 42.57509323770458,
    "avg_bits_err_output": 36.492551437429796,
    "avg_bits_err_improve": 6.082541800274782,
    "time": 46284.44921875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(* (/ (sin ky) (hypot (sin ky) (sin kx))) (sin th))",
    "output_parens": 7,
    "avg_bits_err_input": 4.150766573662981,
    "avg_bits_err_output": 0.21689661719245773,
    "avg_bits_err_improve": 3.9338699564705233,
    "time": 23154.86376953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (pow (+ 1.0 (pow (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky))) 2.0)) -0.5))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.9363905959419778,
    "avg_bits_err_output": 0.006375,
    "avg_bits_err_improve": 0.9300155959419778,
    "time": 18691.68212890625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (/ (sqrt (- 1.0 (/ (/ Om Omc) (/ Omc Om)))) (hypot 1.0 (/ 1.0 (/ l (* t (sqrt 2.0)))))))",
    "output_parens": 12,
    "avg_bits_err_input": 10.298768464718043,
    "avg_bits_err_output": 1.0647911833759383,
    "avg_bits_err_improve": 9.233977281342105,
    "time": 23997.1123046875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= n -1.2e+29) (pow (pow (* 2.0 (* (* U n) (fma (/ l Om) (+ (* l -2.0) (* n (* (/ l Om) (- U* U)))) t))) 0.25) 2.0) (if (<= n -1.05e-267) (sqrt (* U (* (* n 2.0) (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t)))) (if (<= n 3e-281) (sqrt (+ (* t (* 2.0 (* U n))) (* 2.0 (* (fma l -2.0 (* n (* (/ l Om) (- U* U)))) (* n (/ U (/ Om l))))))) (if (<= n 1.6e-201) (* (sqrt n) (sqrt (+ (* (* (/ l Om) (fma l -2.0 (* (/ l Om) (* n (- U* U))))) (* U 2.0)) (* t (* U 2.0))))) (if (<= n 1.45e+41) (sqrt (+ (* t (* 2.0 (* U n))) (* 2.0 (* (fma l -2.0 (* n (* (/ l Om) (- U* U)))) (/ n (/ (/ Om l) U)))))) (* (sqrt n) (sqrt (* (* U 2.0) (fma (/ l Om) (fma l -2.0 (* n (* (/ l Om) (- U* U)))) t)))))))))",
    "output_parens": 91,
    "avg_bits_err_input": 35.01707994436509,
    "avg_bits_err_output": 26.534976114324696,
    "avg_bits_err_improve": 8.482103830040398,
    "time": 52627.9404296875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(/ 2.0 (/ (fma (* k (* t (/ (sin k) l))) (tan k) 0.0) (/ l k)))",
    "output_parens": 9,
    "avg_bits_err_input": 47.900483413567684,
    "avg_bits_err_output": 4.742458320045245,
    "avg_bits_err_improve": 43.15802509352244,
    "time": 104355.91943359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -2e-87) (not (<= t 1.9e-33))) (/ 2.0 (* (* (* (+ 2.0 (pow (/ k t) 2.0)) (/ t l)) (tan k)) (* t (* (/ t l) (sin k))))) (/ 2.0 (* (* (/ t l) (/ (* t (+ 2.0 (pow (/ k t) 2.0))) (/ l t))) (* (tan k) (sin k)))))",
    "output_parens": 31,
    "avg_bits_err_input": 32.95536768404197,
    "avg_bits_err_output": 12.215007916136909,
    "avg_bits_err_improve": 20.74035976790506,
    "time": 87405.27612304688,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (* (cos th) (+ (* a1 a1) (* a2 a2))) (sqrt 2.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5071832734586856,
    "avg_bits_err_output": 0.4690484984543582,
    "avg_bits_err_improve": 0.03813477500432744,
    "time": 30268.612060546875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (/ (sqrt (* PI (* 2.0 n))) (pow (* PI (* 2.0 n)) (* k 0.5))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5371243047279676,
    "avg_bits_err_output": 0.4407644542370038,
    "avg_bits_err_improve": 0.0963598504909638,
    "time": 26501.880615234375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(+ (* (/ J 0.5) (* (cos (* 0.5 K)) (sinh l))) U)",
    "output_parens": 7,
    "avg_bits_err_input": 17.263152104342474,
    "avg_bits_err_output": 0.11186560156295075,
    "avg_bits_err_improve": 17.151286502779524,
    "time": 27267.403076171875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 2.0) (/ (cos (- (/ (+ m n) (/ (cbrt 8.0) K)) M)) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (- l (fabs (- m n)))))) (/ (fabs (cos (- (pow (* (+ m n) (* K (sqrt (/ 0.5 (* K (+ m n)))))) 2.0) M))) (exp (+ (pow (- (/ (+ m n) 2.0) M) 2.0) (- l (fabs (- m n)))))))",
    "output_parens": 54,
    "avg_bits_err_input": 14.61046555967511,
    "avg_bits_err_output": 1.3257239506024716,
    "avg_bits_err_improve": 13.284741609072638,
    "time": 35990.132568359375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 18.37494812031259,
    "avg_bits_err_output": 8.00932312031259,
    "avg_bits_err_improve": 10.365625000000001,
    "time": 55562.150146484375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 5e-204) (* w0 (sqrt (+ 1.0 (/ (* h (* M (* D (/ -0.5 d)))) (* (* (/ 2.0 D) (/ d M)) l))))) (if (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 2e+286) (* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l))))) (* w0 (sqrt (+ 1.0 (* (/ (* M (/ (* M h) l)) (/ d D)) (/ (* D -0.25) d)))))))",
    "output_parens": 44,
    "avg_bits_err_input": 14.388696426827504,
    "avg_bits_err_output": 8.47014657401547,
    "avg_bits_err_improve": 5.918549852812035,
    "time": 50477.460205078125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= A -5e-310) (* (sqrt (- A)) (/ (/ c0 (sqrt (- V))) (sqrt l))) (/ c0 (* (pow A -0.5) (sqrt (* V l)))))",
    "output_parens": 15,
    "avg_bits_err_input": 19.034376758014886,
    "avg_bits_err_output": 8.539297312568136,
    "avg_bits_err_improve": 10.49507944544675,
    "time": 32495.594970703125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= d -1.4e+38) (log (pow (exp (* M (/ (- M) (- (hypot (* d (* (/ d D) (/ (/ c0 h) (* D w)))) M) (* d (fabs (* (/ d D) (/ (/ c0 h) (* D w))))))))) (* c0 (/ 0.5 w)))) (if (<= d -3.5e-104) (* (/ c0 (* w 2.0)) (/ (* M (- M)) (- (sqrt (- (pow (* (- d) (* d (/ c0 (* (* D w) (* D (- h)))))) 2.0) (* M M))) (* d (* d (/ (/ c0 w) (* D (* D h)))))))) (if (<= d 3e-135) (* (/ c0 (* w 2.0)) (fma (sqrt (fma (/ c0 (* h w)) (pow (/ d D) 2.0) M)) (sqrt (- (* (/ c0 (* h w)) (pow (/ d D) 2.0)) M)) (* (/ c0 (* h w)) (pow (/ d D) 2.0)))) (log (pow (exp (* M (/ (- M) (- (hypot (* d (* (/ d D) (/ (/ c0 w) (* D h)))) (/ (* M M) M)) (* d (/ (/ (* d (/ c0 (* D w))) D) h)))))) (* c0 (/ 0.5 w)))))))",
    "output_parens": 100,
    "avg_bits_err_input": 59.680442275452414,
    "avg_bits_err_output": 34.34684032610522,
    "avg_bits_err_improve": 25.33360194934719,
    "time": 100109.39501953125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= d -2.05e+179) (fabs (* d (/ (fma (/ h (* d l)) (/ (* (pow (* M D) 2.0) -0.125) d) 1.0) (sqrt (* h l))))) (if (<= d -1.35e-85) (* (/ (sqrt (- d)) (sqrt (- h))) (* (sqrt (/ d l)) (+ 1.0 (* (/ (* (* M (/ D d)) (* h (* M D))) (* l (* d 4.0))) -0.5)))) (if (<= d -8.8e-305) (* (* (pow (/ d h) 0.5) (/ (sqrt (- d)) (sqrt (- l)))) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) (/ (* d (+ -1.0 (/ (* h (* (pow (* M (/ D d)) 2.0) 0.125)) l))) (* (sqrt l) (- (sqrt h)))))))",
    "output_parens": 67,
    "avg_bits_err_input": 26.930657258275332,
    "avg_bits_err_output": 17.0790018261709,
    "avg_bits_err_improve": 9.851655432104433,
    "time": 95674.87866210938,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(* (/ (pow (pow (+ (/ 0.0625 (+ 0.25 (/ 0.25 (fma x x 1.0)))) (/ -0.0625 (* (+ 0.25 (/ 0.25 (fma x x 1.0))) (pow (fma x x 1.0) 2.0)))) 3.0) 0.3333333333333333) (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (/ 1.0 (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))",
    "output_parens": 25,
    "avg_bits_err_input": 15.501832345748937,
    "avg_bits_err_output": 15.002630218176037,
    "avg_bits_err_improve": 0.49920212757290017,
    "time": 35119.4140625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ (/ 1.3333333333333333 PI) (- 1.0 (* v v))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9846981203125902,
    "avg_bits_err_output": 0.011021240625180291,
    "avg_bits_err_improve": 0.9736768796874099,
    "time": 5986.5439453125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (/ (fma v (* v -5.0) 1.0) (* (sqrt (fma v (* v -6.0) 2.0)) PI)) t) (- 1.0 (* v v)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.4177905635405,
    "avg_bits_err_output": 0.11190808281331134,
    "avg_bits_err_improve": 0.30588248072718865,
    "time": 16479.832763671875,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (- 1.0 (* v v)) (* (sqrt (+ 2.0 (* (* v v) -6.0))) 0.25))",
    "output_parens": 8,
    "avg_bits_err_input": 0.011594360937770434,
    "avg_bits_err_output": 0.009625,
    "avg_bits_err_improve": 0.001969360937770434,
    "time": 8205.1474609375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(acos (/ (+ 1.0 (* (* v v) -5.0)) (+ (* v v) -1.0)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5259832657021648,
    "avg_bits_err_output": 0.5259832657021648,
    "avg_bits_err_improve": 0,
    "time": 46759.571533203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (- (/ -1.0 a) (/ (/ k a) (/ 1.0 (+ k 10.0)))))",
    "output_parens": 9,
    "avg_bits_err_input": 2.32511591314059,
    "avg_bits_err_output": 0.2774439579252891,
    "avg_bits_err_improve": 2.047671955215301,
    "time": 22153.6005859375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (exp (log1p (exp (/ (+ EDonor (+ Vef (- mu Ec))) KbT))))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 16,
    "avg_bits_err_input": 0.0160842797537534,
    "avg_bits_err_output": 0.015992159054482622,
    "avg_bits_err_improve": 9.212069927077779e-05,
    "time": 9795.851806640625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* 4.0 (* b b))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.18960905390214727,
    "avg_bits_err_output": 0.012721804688852173,
    "avg_bits_err_improve": 0.1768872492132951,
    "time": 10011.80908203125,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1865633717196659,
    "avg_bits_err_output": 0.024710236415705737,
    "avg_bits_err_improve": 0.16185313530396014,
    "time": 19952.5322265625,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 12,
    "avg_bits_err_input": 0.1860512990690369,
    "avg_bits_err_output": 0.02299250516832314,
    "avg_bits_err_improve": 0.16305879390071376,
    "time": 11514.78662109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(pow (fma (* (fma (/ x (hypot x (* 2.0 p))) 0.5 0.5) (/ 0.5 (hypot x (* 2.0 p)))) x (* 0.5 (fma (/ x (hypot x (* 2.0 p))) 0.5 0.5))) 0.25)",
    "output_parens": 15,
    "avg_bits_err_input": 13.049863174189971,
    "avg_bits_err_output": 13.05211827198721,
    "avg_bits_err_improve": -0.0022550977972386477,
    "time": 18951.738037109375,
    "seed": 29,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sqrtexp (problem 3.4.4)",
    "input": "(sqrt (/ (- (exp (* 2.0 x)) 1.0) (- (exp x) 1.0)))",
    "output": "(hypot 1.0 (exp (* 0.5 x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.581795527543186,
    "avg_bits_err_output": 0.007,
    "avg_bits_err_improve": 41.57479552754319,
    "time": 7846.733154296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "sintan (problem 3.4.5)",
    "input": "(/ (- x (sin x)) (- x (tan x)))",
    "output": "(/ (fma (pow (cbrt (sin x)) 2.0) (cbrt (sin x)) (- x)) (- (log (exp (tan x))) x))",
    "output_parens": 12,
    "avg_bits_err_input": 31.616592616403562,
    "avg_bits_err_output": 30.499822770123096,
    "avg_bits_err_improve": 1.1167698462804658,
    "time": 37932.34765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2p (problem 3.2.1, positive)",
    "input": "(/ (+ (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -4.8e+175) (/ (/ 1.0 (/ -1.0 c)) (/ (* c a) (- b_2 (hypot b_2 (sqrt (- (* c a))))))) (if (<= b_2 -1.6e-162) (/ (- (- (* b_2 (/ b_2 (sqrt (- (* b_2 b_2) (* c a))))) (/ c (/ (sqrt (- (* b_2 b_2) (* c a))) a))) b_2) a) (if (<= b_2 1.5e+149) (/ (- c) (+ b_2 (sqrt (fma b_2 b_2 (- (* c a)))))) (/ (/ (/ 1.0 (/ 1.0 a)) (/ (+ b_2 (hypot b_2 (pow (pow (* c a) 2.0) 0.25))) (- c))) a))))",
    "output_parens": 49,
    "avg_bits_err_input": 34.45107456429824,
    "avg_bits_err_output": 15.713244653817974,
    "avg_bits_err_improve": 18.737829910480265,
    "time": 34350.484130859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quad2m (problem 3.2.1, negative)",
    "input": "(/ (- (- b_2) (sqrt (- (* b_2 b_2) (* a c)))) a)",
    "output": "(if (<= b_2 -7.2e+182) (/ (- c) (- b_2 (hypot b_2 (sqrt (* c a))))) (if (<= b_2 1e-165) (/ c (- (sqrt (- (* b_2 b_2) (* c a))) b_2)) (/ (fma b_2 (- -1.0 (/ b_2 (sqrt (fma c (- a) (* b_2 b_2))))) (/ a (/ (sqrt (fma c (- a) (* b_2 b_2))) (- c (fma c -1.0 c))))) a)))",
    "output_parens": 32,
    "avg_bits_err_input": 34.62861518651838,
    "avg_bits_err_output": 17.795847255399515,
    "avg_bits_err_improve": 16.832767931118866,
    "time": 31344.14501953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "cos2 (problem 3.4.1)",
    "input": "(/ (- 1.0 (cos x)) (* x x))",
    "output": "(* (/ (tan (* x 0.5)) x) (/ (sin x) x))",
    "output_parens": 6,
    "avg_bits_err_input": 31.382620110201913,
    "avg_bits_err_output": 0.1231984968798679,
    "avg_bits_err_improve": 31.259421613322043,
    "time": 22111.4423828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2nthrt (problem 3.4.6)",
    "input": "(- (pow (+ x 1.0) (/ 1.0 n)) (pow x (/ 1.0 n)))",
    "output": "(- (/ 1.0 (exp (/ (log1p x) (- n)))) (pow x (/ 1.0 n)))",
    "output_parens": 8,
    "avg_bits_err_input": 32.97007266637754,
    "avg_bits_err_output": 32.66195168999831,
    "avg_bits_err_improve": 0.30812097637922875,
    "time": 45385.876953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2log (problem 3.3.6)",
    "input": "(- (log (+ N 1.0)) (log N))",
    "output": "(log1p (/ 1.0 N))",
    "output_parens": 2,
    "avg_bits_err_input": 29.545799160346263,
    "avg_bits_err_output": 0.0165,
    "avg_bits_err_improve": 29.529299160346262,
    "time": 12243.97119140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2frac (problem 3.3.1)",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 x))",
    "output": "(/ (/ 1.0 (- -1.0 x)) x)",
    "output_parens": 3,
    "avg_bits_err_input": 14.45404023870485,
    "avg_bits_err_output": 0.07657312031259014,
    "avg_bits_err_improve": 14.37746711839226,
    "time": 11072.8896484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cos (problem 3.3.5)",
    "input": "(- (cos (+ x eps)) (cos x))",
    "output": "(- (/ (* (pow (sin eps) 2.0) (cos x)) (- -1.0 (cos eps))) (* (sin eps) (sin x)))",
    "output_parens": 11,
    "avg_bits_err_input": 40.45591082540549,
    "avg_bits_err_output": 0.6434200926913818,
    "avg_bits_err_improve": 39.81249073271411,
    "time": 37453.794189453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2cbrt (problem 3.3.4)",
    "input": "(- (cbrt (+ x 1.0)) (cbrt x))",
    "output": "(/ 1.0 (fma (cbrt (+ 1.0 x)) (+ (cbrt (+ 1.0 x)) (cbrt x)) (pow (/ (/ x (cbrt x)) (cbrt x)) 2.0)))",
    "output_parens": 13,
    "avg_bits_err_input": 29.832082985190723,
    "avg_bits_err_output": 0.23120428088149902,
    "avg_bits_err_improve": 29.600878704309224,
    "time": 25079.84228515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "tanhf (example 3.4)",
    "input": "(/ (- 1.0 (cos x)) (sin x))",
    "output": "(tan (/ x 2.0))",
    "output_parens": 2,
    "avg_bits_err_input": 30.87957046301514,
    "avg_bits_err_output": 0.000125,
    "avg_bits_err_improve": 30.879445463015138,
    "time": 11475.637451171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadp (p42, positive)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (- INFINITY)) (/ (- (hypot b (* (sqrt (* a -4.0)) (sqrt c))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) -2e-253) (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 0.0) (* (/ 0.5 (+ b (hypot b (sqrt (* a (* c -4.0)))))) (/ (fma a (* c -4.0) 0.0) a)) (if (<= (/ (- (sqrt (+ (* b b) (* (* a c) -4.0))) b) (* a 2.0)) 2e+223) (+ (* (- (sqrt (fma b b (* c (* a -4.0)))) b) (/ 0.5 a)) (fma (/ -0.5 a) b (* b (/ 0.5 a)))) (/ (- (hypot b (* (sqrt (sqrt a)) (sqrt (sqrt (* (* c -4.0) (* a (* c -4.0))))))) b) (* a 2.0))))))",
    "output_parens": 92,
    "avg_bits_err_input": 34.453524917576104,
    "avg_bits_err_output": 21.446116033145024,
    "avg_bits_err_improve": 13.00740888443108,
    "time": 37905.2685546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "quadm (p42, negative)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -3.5e+156) (* -0.5 (/ (* c -4.0) (- (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25)) b))) (if (<= b 5.4e-257) (* -0.5 (/ (* c -4.0) (- (sqrt (fma b b (* -4.0 (* c a)))) b))) (if (<= b 1.35e+154) (* -0.5 (/ (+ b (sqrt (+ (* (* c -4.0) a) (* b b)))) a)) (* -0.5 (/ (+ b (hypot (pow (pow (* (* c -4.0) a) 2.0) 0.25) b)) a)))))",
    "output_parens": 39,
    "avg_bits_err_input": 35.01359457323689,
    "avg_bits_err_output": 12.082908440585314,
    "avg_bits_err_improve": 22.930686132651573,
    "time": 37754.123291015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "qlog (example 3.10)",
    "input": "(/ (log (- 1.0 x)) (log (+ 1.0 x)))",
    "output": "(/ (log1p (- x)) (log1p x))",
    "output_parens": 4,
    "avg_bits_err_input": 61.617755739700655,
    "avg_bits_err_output": 0.018313721875540867,
    "avg_bits_err_improve": 61.59944201782511,
    "time": 11980.824462890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logs (example 3.8)",
    "input": "(- (- (* (+ n 1.0) (log (+ n 1.0))) (* n (log n))) 1.0)",
    "output": "(* (pow (cbrt (+ (log1p n) (fabs (fma n (- (log1p n) (log n)) -1.0)))) 2.0) (pow (pow (+ (log1p n) (fma n (- (log1p n) (log n)) -1.0)) 0.16666666666666666) 2.0))",
    "output_parens": 18,
    "avg_bits_err_input": 63.00704683582842,
    "avg_bits_err_output": 42.60828514499302,
    "avg_bits_err_improve": 20.3987616908354,
    "time": 39604.6845703125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "logq (problem 3.4.3)",
    "input": "(log (/ (- 1.0 eps) (+ 1.0 eps)))",
    "output": "(- (log1p (- eps)) (log1p eps))",
    "output_parens": 4,
    "avg_bits_err_input": 58.510085398497004,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 58.501460398497,
    "time": 15721.0712890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "invcot (example 3.9)",
    "input": "(- (/ 1.0 x) (/ 1.0 (tan x)))",
    "output": "(/ (/ (- (sin x) (* x (cos x))) x) (sin x))",
    "output_parens": 7,
    "avg_bits_err_input": 59.818693213327315,
    "avg_bits_err_output": 59.8086802865571,
    "avg_bits_err_improve": 0.010012926770215813,
    "time": 34512.116455078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq3 (problem 3.4.2)",
    "input": "(/ (* eps (- (exp (* (+ a b) eps)) 1.0)) (* (- (exp (* a eps)) 1.0) (- (exp (* b eps)) 1.0)))",
    "output": "(/ 1.0 (/ (expm1 (* eps b)) (* (/ eps (expm1 (* eps a))) (expm1 (* eps (+ b a))))))",
    "output_parens": 11,
    "avg_bits_err_input": 60.298200043857314,
    "avg_bits_err_output": 28.586767429985507,
    "avg_bits_err_improve": 31.711432613871807,
    "time": 35167.370361328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expq2 (section 3.11)",
    "input": "(/ (exp x) (- (exp x) 1.0))",
    "output": "(/ -1.0 (expm1 (- x)))",
    "output_parens": 3,
    "avg_bits_err_input": 41.96361656350097,
    "avg_bits_err_output": 0.00975,
    "avg_bits_err_improve": 41.95386656350097,
    "time": 8930.908447265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expm1 (example 3.7)",
    "input": "(- (exp x) 1.0)",
    "output": "(expm1 x)",
    "output_parens": 1,
    "avg_bits_err_input": 58.6588772568554,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 58.6580022568554,
    "time": 4452.883544921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "expax (section 3.5)",
    "input": "(- (exp (* a x)) 1.0)",
    "output": "(expm1 (* a x))",
    "output_parens": 2,
    "avg_bits_err_input": 29.42017257535626,
    "avg_bits_err_output": 0.016070789202753646,
    "avg_bits_err_improve": 29.404101786153507,
    "time": 27418.705810546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "exp2 (problem 3.3.7)",
    "input": "(+ (- (exp x) 2.0) (exp (- x)))",
    "output": "(exp (log (/ (fma (exp x) (fma (exp x) -2.0 3.0) (/ -1.0 (exp x))) (fma (exp x) -2.0 -1.0))))",
    "output_parens": 11,
    "avg_bits_err_input": 29.97926091000864,
    "avg_bits_err_output": 29.750762510896,
    "avg_bits_err_improve": 0.2284983991126417,
    "time": 36984.8642578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "3frac (problem 3.3.3)",
    "input": "(+ (- (/ 1.0 (+ x 1.0)) (/ 2.0 x)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (- 1.0 (fma (/ (fma 2.0 (- 1.0 x) x) x) (+ 1.0 x) x)) (/ (* (- 1.0 x) (- 1.0 (* x x))) (- 1.0 x)))",
    "output_parens": 13,
    "avg_bits_err_input": 9.523050693013245,
    "avg_bits_err_output": 9.541634826766954,
    "avg_bits_err_improve": -0.018584133753709153,
    "time": 54202.87890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2tan (problem 3.3.2)",
    "input": "(- (tan (+ x eps)) (tan x))",
    "output": "(if (<= eps -1.02e-26) (- (/ (+ (tan x) (tan eps)) (- (fma (tan x) (tan eps) -1.0))) (tan x)) (if (<= eps 1.38e-53) (/ (+ (- (/ (sin (+ eps x)) (tan x)) (* (cos eps) (cos x))) (* (sin x) (sin eps))) (/ (cos (+ eps x)) (tan x))) (/ (fma (- (- (tan x)) (tan eps)) (/ 1.0 (tan x)) (- 1.0 (* (tan x) (tan eps)))) (/ (+ -1.0 (* (tan x) (tan eps))) (tan x)))))",
    "output_parens": 49,
    "avg_bits_err_input": 36.559457049524056,
    "avg_bits_err_output": 20.670461890142516,
    "avg_bits_err_improve": 15.88899515938154,
    "time": 45076.990966796875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sqrt (example 3.1)",
    "input": "(- (sqrt (+ x 1.0)) (sqrt x))",
    "output": "(/ 1.0 (fma (- -1.0 x) (/ -1.0 (sqrt (+ 1.0 x))) (sqrt x)))",
    "output_parens": 7,
    "avg_bits_err_input": 30.066230535009122,
    "avg_bits_err_output": 0.13265112812734375,
    "avg_bits_err_improve": 29.93357940688178,
    "time": 23217.527587890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2sin (example 3.3)",
    "input": "(- (sin (+ x eps)) (sin x))",
    "output": "(fma (sin x) (* (sin eps) (tan (/ (- eps) 2.0))) (* (sin eps) (cos x)))",
    "output_parens": 10,
    "avg_bits_err_input": 37.50143438815844,
    "avg_bits_err_output": 0.21785675318888392,
    "avg_bits_err_improve": 37.283577634969554,
    "time": 27490.6640625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2isqrt (example 3.6)",
    "input": "(- (/ 1.0 (sqrt x)) (/ 1.0 (sqrt (+ x 1.0))))",
    "output": "(/ (pow x -0.5) (+ (+ x 1.0) (/ (+ x 1.0) (sqrt (/ (+ x 1.0) x)))))",
    "output_parens": 9,
    "avg_bits_err_input": 19.546716205344698,
    "avg_bits_err_output": 0.10833496250072117,
    "avg_bits_err_improve": 19.438381242843978,
    "time": 23833.48486328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2atan (example 3.5)",
    "input": "(- (atan (+ N 1.0)) (atan N))",
    "output": "(pow (pow (atan2 1.0 (+ 1.0 (fma N N N))) -0.5) -2.0)",
    "output_parens": 5,
    "avg_bits_err_input": 14.54986387644225,
    "avg_bits_err_output": 0.30536756228812706,
    "avg_bits_err_improve": 14.244496314154123,
    "time": 9547.390380859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "symmetry log of sum of exp",
    "input": "(log (+ (exp a) (exp b)))",
    "output": "(log1p (+ (exp a) (expm1 b)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.5427609228867,
    "avg_bits_err_output": 1.5133184183111608,
    "avg_bits_err_improve": 28.029442504575538,
    "time": 26283.556884765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "b parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) (- 1.0 m))",
    "output": "(* (- 1.0 m) (+ (* (- 1.0 m) (/ m v)) -1.0))",
    "output_parens": 6,
    "avg_bits_err_input": 0.07596240625180288,
    "avg_bits_err_output": 0.07862988750216346,
    "avg_bits_err_improve": -0.002667481250360579,
    "time": 39553.52490234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF D",
    "input": "(- (* (* (* a a) b) b))",
    "output": "(- (pow (* a b) 2.0))",
    "output_parens": 3,
    "avg_bits_err_input": 16.31332318650586,
    "avg_bits_err_output": 0.30196973750504796,
    "avg_bits_err_improve": 16.01135344900081,
    "time": 20728.161376953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF C",
    "input": "(+ (pow (* a (cos (* PI (/ angle 180.0)))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output": "(+ (pow (* a (cos (/ (pow PI -3.0) (* (pow PI -2.0) (* (/ 180.0 angle) (pow PI -2.0)))))) 2.0) (pow (* b (sin (* PI (/ angle 180.0)))) 2.0))",
    "output_parens": 16,
    "avg_bits_err_input": 20.741136635939192,
    "avg_bits_err_output": 20.756324343226307,
    "avg_bits_err_improve": -0.01518770728711516,
    "time": 48620.6015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF B",
    "input": "(* (* (* 2.0 (- (pow b 2.0) (pow a 2.0))) (sin (* PI (/ angle 180.0)))) (cos (* PI (/ angle 180.0))))",
    "output": "(* (/ (sin (* PI (* angle 0.011111111111111112))) (/ 1.0 (+ b a))) (- b a))",
    "output_parens": 8,
    "avg_bits_err_input": 31.095909298799665,
    "avg_bits_err_output": 21.03080970516842,
    "avg_bits_err_improve": 10.065099593631246,
    "time": 41094.187255859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ab-angle->ABCF A",
    "input": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ angle 180.0) PI))) 2.0))",
    "output": "(+ (pow (* a (sin (* (/ angle 180.0) PI))) 2.0) (pow (* b (cos (* (/ 1.0 (/ 0.005555555555555556 angle)) (* PI 3.08641975308642e-5)))) 2.0))",
    "output_parens": 13,
    "avg_bits_err_input": 20.55448105433022,
    "avg_bits_err_output": 20.636073191345748,
    "avg_bits_err_improve": -0.08159213701552659,
    "time": 49159.265380859375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "a parameter of renormalized beta distribution",
    "input": "(* (- (/ (* m (- 1.0 m)) v) 1.0) m)",
    "output": "(- (/ (- m (* m m)) (/ v m)) m)",
    "output_parens": 5,
    "avg_bits_err_input": 0.17812744375108172,
    "avg_bits_err_output": 0.1764242431904294,
    "avg_bits_err_improve": 0.0017032005606523182,
    "time": 28598.64501953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry B",
    "input": "(/ (- 1.0 (* (tan x) (tan x))) (+ 1.0 (* (tan x) (tan x))))",
    "output": "(/ (- 1.0 (pow (tan x) 2.0)) (fma (tan x) (tan x) 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 0.3237485555484409,
    "avg_bits_err_output": 0.3222196541248029,
    "avg_bits_err_improve": 0.001528901423637985,
    "time": 32717.38232421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trigonometry A",
    "input": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output": "(/ (* e (sin v)) (+ 1.0 (* e (cos v))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.13684436093777044,
    "avg_bits_err_output": 0.13684436093777044,
    "avg_bits_err_improve": 0,
    "time": 34019.4892578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Spherical law of cosines",
    "input": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (cos (- lambda1 lambda2))))) R)",
    "output": "(* (acos (+ (* (sin phi1) (sin phi2)) (* (* (cos phi1) (cos phi2)) (fma (cos lambda2) (cos lambda1) (* (sin lambda1) (sin lambda2)))))) R)",
    "output_parens": 16,
    "avg_bits_err_input": 16.749913700046047,
    "avg_bits_err_output": 3.8305646781012723,
    "avg_bits_err_improve": 12.919349021944775,
    "time": 42355.068603515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) -4e-32) (/ (* (/ 0.125 (pow a 3.0)) (- (fma (* a c) -4.0 (* b b)) (* b b))) (* (+ (/ 0.25 (* a a)) (* 0.0 (/ -0.5 a))) (+ b (sqrt (fma (* a c) -4.0 (* b b)))))) (* (/ 0.5 a) (fma (pow (fma (* a c) -4.0 (* b b)) 0.16666666666666666) (pow (cbrt (cbrt (fma c (* a -4.0) (* b b)))) 3.0) (- b))))",
    "output_parens": 44,
    "avg_bits_err_input": 52.24080678802017,
    "avg_bits_err_output": 49.78509801417721,
    "avg_bits_err_improve": 2.4557087738429644,
    "time": 49868.18798828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* -2.0 (/ c (+ b (sqrt (fma b b (* a (* c -4.0)))))))",
    "output_parens": 7,
    "avg_bits_err_input": 28.163699049436563,
    "avg_bits_err_output": 0.28110620312590145,
    "avg_bits_err_improve": 27.88259284631066,
    "time": 38018.239013671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(* (/ (+ (* c (* (* a -4.0) (pow (fma c (* a -4.0) (* b b)) 2.0))) (- (pow (* b (fma c (* a -4.0) (* b b))) 2.0) (pow b 6.0))) (* (+ b (sqrt (fma (* c a) -4.0 (* b b)))) (+ (pow (fma (* c a) -4.0 (* b b)) 2.0) (+ (* (* b b) (fma (* c a) -4.0 (* b b))) (pow b 4.0))))) (/ 0.5 a))",
    "output_parens": 36,
    "avg_bits_err_input": 43.55315757788315,
    "avg_bits_err_output": 40.477764582642465,
    "avg_bits_err_improve": 3.0753929952406835,
    "time": 56929.827392578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quadratic roots, full range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a 2.0)) (if (<= b -1.9e-308) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= b 1e+48) (/ (* c -2.0) (+ b (hypot b (sqrt (* -4.0 (* a c)))))) (* (/ 0.5 (+ b (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)))) (/ (fma a (* c -4.0) 0.0) a)))))",
    "output_parens": 40,
    "avg_bits_err_input": 34.47102289653146,
    "avg_bits_err_output": 14.83770269411909,
    "avg_bits_err_improve": 19.63332020241237,
    "time": 38163.802001953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Midpoint on a great circle",
    "input": "(+ lambda1 (atan2 (* (cos phi2) (sin (- lambda1 lambda2))) (+ (cos phi1) (* (cos phi2) (cos (- lambda1 lambda2))))))",
    "output": "(+ lambda1 (atan2 (* (cos phi2) (- (* (sin lambda1) (cos lambda2)) (* (cos lambda1) (sin lambda2)))) (+ (+ (cos phi1) (* (cos phi2) (* (cos lambda2) (cos lambda1)))) (log (pow (exp (sin lambda1)) (* (cos phi2) (sin lambda2)))))))",
    "output_parens": 26,
    "avg_bits_err_input": 0.8806065906188587,
    "avg_bits_err_output": 0.23540346109392885,
    "avg_bits_err_improve": 0.6452031295249299,
    "time": 38823.865478515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function from Lakshay Garg",
    "input": "(- (/ 2.0 (+ 1.0 (exp (* -2.0 x)))) 1.0)",
    "output": "(expm1 (- (log 2.0) (log1p (exp (* x -2.0)))))",
    "output_parens": 6,
    "avg_bits_err_input": 28.599473414399565,
    "avg_bits_err_output": 28.576333652925417,
    "avg_bits_err_improve": 0.0231397614741482,
    "time": 53367.142822265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic tangent",
    "input": "(/ (- (exp x) (exp (- x))) (+ (exp x) (exp (- x))))",
    "output": "(tanh x)",
    "output_parens": 1,
    "avg_bits_err_input": 57.93453049033198,
    "avg_bits_err_output": 0.01389624062518029,
    "avg_bits_err_improve": 57.9206342497068,
    "time": 9741.5712890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic sine",
    "input": "(/ (- (exp x) (exp (- x))) 2.0)",
    "output": "(/ (* (sinh x) 2.0) 2.0)",
    "output_parens": 3,
    "avg_bits_err_input": 57.90369207397151,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 57.89506707397151,
    "time": 6398.487060546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic secant",
    "input": "(/ 2.0 (+ (exp x) (exp (- x))))",
    "output": "(/ 1.0 (cosh x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.005948120312590145,
    "avg_bits_err_output": 0.00575,
    "avg_bits_err_improve": 0.00019812031259014515,
    "time": 3879.3515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-cosine",
    "input": "(log (+ x (sqrt (- (* x x) 1.0))))",
    "output": "(log (+ x (* (sqrt (+ x 1.0)) (sqrt (+ x -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 31.68993242895233,
    "avg_bits_err_output": 0.083,
    "avg_bits_err_improve": 31.60693242895233,
    "time": 5530.084228515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)tangent",
    "input": "(* (/ 1.0 2.0) (log (/ (+ 1.0 x) (- 1.0 x))))",
    "output": "(* 0.5 (- (log1p x) (log1p (- x))))",
    "output_parens": 5,
    "avg_bits_err_input": 58.502049688533155,
    "avg_bits_err_output": 0.008625,
    "avg_bits_err_improve": 58.49342468853315,
    "time": 21305.253173828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arc-(co)secant",
    "input": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output": "(log (+ (/ 1.0 x) (/ (sqrt (- 1.0 (* x x))) x)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.003625,
    "avg_bits_err_output": 0.003625,
    "avg_bits_err_improve": 0,
    "time": 3792.619140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example from Robby",
    "input": "(fabs (+ (* (* ew (sin t)) (cos (atan (/ (/ eh ew) (tan t))))) (* (* eh (cos t)) (sin (atan (/ (/ eh ew) (tan t)))))))",
    "output": "(fabs (fma (* ew (sin t)) (cos (atan (/ eh (* ew (tan t))))) (* eh (* (cos t) (sin (atan (/ eh (* ew (tan t)))))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.131875,
    "avg_bits_err_output": 0.13125,
    "avg_bits_err_improve": 0.0006249999999999867,
    "time": 31152.156494140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Example 2 from Robby",
    "input": "(fabs (- (* (* ew (cos t)) (cos (atan (/ (* (- eh) (tan t)) ew)))) (* (* eh (sin t)) (sin (atan (/ (* (- eh) (tan t)) ew))))))",
    "output": "(fabs (- (* (* ew (cos t)) (/ 1.0 (hypot 1.0 (/ (tan t) (/ ew eh))))) (* (* eh (sin t)) (sin (atan (/ (* (tan t) (- eh)) ew))))))",
    "output_parens": 19,
    "avg_bits_err_input": 0.12189624062518029,
    "avg_bits_err_output": 0.12518872187554086,
    "avg_bits_err_improve": -0.0032924812503605794,
    "time": 39082.575439453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Equirectangular approximation to distance on a great circle",
    "input": "(* R (sqrt (+ (* (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0))) (* (- lambda1 lambda2) (cos (/ (+ phi1 phi2) 2.0)))) (* (- phi1 phi2) (- phi1 phi2)))))",
    "output": "(* R (hypot (+ (fma (- lambda1 lambda2) (* (sin (* phi2 0.5)) (- (sin (* 0.5 phi1)))) (* (- lambda1 lambda2) (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))))) (fma (* (- lambda1 lambda2) (cos (* phi2 0.5))) (cos (* 0.5 phi1)) (* (* (sin (* phi2 0.5)) (sin (* 0.5 phi1))) (- lambda2 lambda1)))) (- phi1 phi2)))",
    "output_parens": 33,
    "avg_bits_err_input": 39.14955991869289,
    "avg_bits_err_output": 0.11884544281072414,
    "avg_bits_err_improve": 39.030714475882164,
    "time": 33994.767578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Eccentricity of an ellipse",
    "input": "(sqrt (fabs (/ (- (* a a) (* b b)) (* a a))))",
    "output": "(sqrt (/ (- a (* b (/ b a))) a))",
    "output_parens": 5,
    "avg_bits_err_input": 15.030912421810992,
    "avg_bits_err_output": 0.01325,
    "avg_bits_err_improve": 15.017662421810993,
    "time": 9229.735107421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Destination given bearing on a great circle",
    "input": "(+ lambda1 (atan2 (* (* (sin theta) (sin delta)) (cos phi1)) (- (cos delta) (* (sin phi1) (sin (asin (+ (* (sin phi1) (cos delta)) (* (* (cos phi1) (sin delta)) (cos theta)))))))))",
    "output": "(+ lambda1 (atan2 (* (sin delta) (* (sin theta) (cos phi1))) (- (* (cos delta) (- 1.0 (+ 0.5 (* (cos (* phi1 2.0)) -0.5)))) (* (* (cos phi1) (cos theta)) (* (sin delta) (sin phi1))))))",
    "output_parens": 22,
    "avg_bits_err_input": 0.1634541690030238,
    "avg_bits_err_output": 0.17136880432868057,
    "avg_bits_err_improve": -0.007914635325656755,
    "time": 58640.33203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, wide range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ 1.0 (* (+ b (sqrt (fma c (* -3.0 a) (* b b)))) (/ -1.0 c)))",
    "output_parens": 8,
    "avg_bits_err_input": 52.281141624971596,
    "avg_bits_err_output": 0.40448851468794406,
    "avg_bits_err_improve": 51.876653110283655,
    "time": 42177.428466796875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, narrow range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* a (* c -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 28.35602565152832,
    "avg_bits_err_output": 0.44083364845147305,
    "avg_bits_err_improve": 27.915192003076847,
    "time": 42760.122314453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical, medium range",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(/ (/ (* c (* a -3.0)) (+ b (sqrt (fma b b (* c (* a -3.0)))))) (* a 3.0))",
    "output_parens": 10,
    "avg_bits_err_input": 43.60290176876151,
    "avg_bits_err_output": 0.40601503907376846,
    "avg_bits_err_improve": 43.19688672968774,
    "time": 43380.5361328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Cubic critical",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 3.0 a) c)))) (* 3.0 a))",
    "output": "(if (<= c -8.2e+208) (/ (fma (hypot b (* (sqrt (* c -3.0)) (sqrt a))) 0.3333333333333333 (* b -0.3333333333333333)) a) (if (<= c 3.4e+177) (/ 0.3333333333333333 (/ a (- (hypot b (sqrt (fabs (* (* c -3.0) a)))) b))) (/ 0.3333333333333333 (/ a (- (hypot b (* (/ (* -3.0 a) (sqrt (* -3.0 a))) (sqrt c))) b)))))",
    "output_parens": 30,
    "avg_bits_err_input": 34.48780767584708,
    "avg_bits_err_output": 20.913334242660227,
    "avg_bits_err_improve": 13.574473433186853,
    "time": 37244.846435546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bearing on a great circle",
    "input": "(atan2 (* (sin (- lambda1 lambda2)) (cos phi2)) (- (* (cos phi1) (sin phi2)) (* (* (sin phi1) (cos phi2)) (cos (- lambda1 lambda2)))))",
    "output": "(atan2 (* (fma (sin lambda1) (cos lambda2) (* (cos lambda1) (- (sin lambda2)))) (cos phi2)) (- (* (cos phi1) (sin phi2)) (+ (* (* (cos phi2) (* (cos lambda2) (cos lambda1))) (sin phi1)) (* (sin phi1) (* (cos phi2) (* (sin lambda1) (sin lambda2)))))))",
    "output_parens": 29,
    "avg_bits_err_input": 13.212609150528868,
    "avg_bits_err_output": 0.16885271240519442,
    "avg_bits_err_improve": 13.043756438123674,
    "time": 49049.273193359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote C",
    "input": "(- (/ x (+ x 1.0)) (/ (+ x 1.0) (- x 1.0)))",
    "output": "(/ (+ -1.0 (+ x (* (+ x 1.0) (/ (- -1.0 x) x)))) (* (/ (+ x 1.0) x) (+ -1.0 x)))",
    "output_parens": 11,
    "avg_bits_err_input": 29.079432701395508,
    "avg_bits_err_output": 25.115490045368936,
    "avg_bits_err_improve": 3.963942656026571,
    "time": 33178.611083984375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote B",
    "input": "(+ (/ 1.0 (- x 1.0)) (/ x (+ x 1.0)))",
    "output": "(/ (+ (+ x -1.0) (/ (+ x 1.0) x)) (* (+ x -1.0) (/ (+ x 1.0) x)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.0115,
    "avg_bits_err_output": 0.013344360937770436,
    "avg_bits_err_improve": -0.0018443609377704357,
    "time": 8008.921142578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Asymptote A",
    "input": "(- (/ 1.0 (+ x 1.0)) (/ 1.0 (- x 1.0)))",
    "output": "(/ (* -2.0 (* (+ x -1.0) (pow (+ x -1.0) -2.0))) (+ x 1.0))",
    "output_parens": 7,
    "avg_bits_err_input": 14.383260165823431,
    "avg_bits_err_output": 0.04662744375108173,
    "avg_bits_err_improve": 14.33663272207235,
    "time": 51464.357421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle b",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= (/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (- (+ A C) (sqrt (+ (pow B 2.0) (pow (- A C) 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C))) 0.0) (/ (* (sqrt (* 2.0 (fma A (* C -4.0) (* B B)))) (- (sqrt (* F (+ A (- C (hypot B (- A C)))))))) (+ (* B B) (* -4.0 (* A C)))) (pow (/ (fma B B (* -4.0 (* A C))) (- (sqrt (* (* F (fma B B (* -4.0 (* A C)))) (* 2.0 (+ C (- A (hypot B (- A C))))))))) -1.0))",
    "output_parens": 58,
    "avg_bits_err_input": 52.48032292019452,
    "avg_bits_err_output": 44.4383365378126,
    "avg_bits_err_improve": 8.041986382381914,
    "time": 46958.251220703125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle angle",
    "input": "(* 180.0 (/ (atan (* (/ 1.0 B) (- (- C A) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0)))))) PI))",
    "output": "(/ (/ (atan (/ (- (- C A) (hypot (- A C) B)) B)) PI) 0.005555555555555556)",
    "output_parens": 8,
    "avg_bits_err_input": 29.428998426865522,
    "avg_bits_err_output": 14.198709292695312,
    "avg_bits_err_improve": 15.23028913417021,
    "time": 27061.30810546875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ABCF->ab-angle a",
    "input": "(/ (- (sqrt (* (* 2.0 (* (- (pow B 2.0) (* (* 4.0 A) C)) F)) (+ (+ A C) (sqrt (+ (pow (- A C) 2.0) (pow B 2.0))))))) (- (pow B 2.0) (* (* 4.0 A) C)))",
    "output": "(if (<= F -6.6e+140) (/ (- (pow (* (cbrt (* 2.0 (* (+ A (+ C (hypot B (- A C)))) (fma B B (* A (* C -4.0)))))) (cbrt F)) 1.5)) (+ (* B B) (* -4.0 (* A C)))) (if (<= F 3.7e+145) (/ (- (pow (* (cbrt (* 2.0 (* F (+ A (+ C (hypot B (- A C))))))) (cbrt (fma B B (* A (* C -4.0))))) 1.5)) (+ (* B B) (* -4.0 (* A C)))) (* (/ (sqrt (* 2.0 (+ C (+ A (hypot B (- A C)))))) (fma B B (* C (* A -4.0)))) (* (hypot B (sqrt (* C (* A -4.0)))) (- (sqrt F))))))",
    "output_parens": 60,
    "avg_bits_err_input": 52.40359133940805,
    "avg_bits_err_output": 40.771836571574084,
    "avg_bits_err_improve": 11.631754767833968,
    "time": 50493.955322265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, zero discriminant",
    "input": "(cbrt (/ g (* 2.0 a)))",
    "output": "(* (* (cbrt g) (cbrt 0.5)) (cbrt (/ 1.0 a)))",
    "output_parens": 6,
    "avg_bits_err_input": 15.752350087011,
    "avg_bits_err_output": 0.843321174306272,
    "avg_bits_err_improve": 14.909028912704727,
    "time": 21857.444580078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, positive discriminant",
    "input": "(+ (cbrt (* (/ 1.0 (* 2.0 a)) (+ (- g) (sqrt (- (* g g) (* h h)))))) (cbrt (* (/ 1.0 (* 2.0 a)) (- (- g) (sqrt (- (* g g) (* h h)))))))",
    "output": "(+ (* (/ 1.0 (cbrt (* 2.0 a))) (cbrt (- (hypot g h) g))) (/ (cbrt (* (+ g (hypot g h)) -0.5)) (cbrt a)))",
    "output_parens": 14,
    "avg_bits_err_input": 35.99520121547135,
    "avg_bits_err_output": 2.9733482758510883,
    "avg_bits_err_improve": 33.02185293962026,
    "time": 38492.328857421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "2-ancestry mixing, negative discriminant",
    "input": "(* 2.0 (cos (+ (/ (* 2.0 PI) 3.0) (/ (acos (/ (- g) h)) 3.0))))",
    "output": "(* 2.0 (/ (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 3.0) (pow (cos (fma PI 0.6666666666666666 (* (acos (/ g (- h))) 0.3333333333333333))) 2.0)))",
    "output_parens": 16,
    "avg_bits_err_input": 0.9882127828190815,
    "avg_bits_err_output": 0.03625037656727766,
    "avg_bits_err_improve": 0.9519624062518038,
    "time": 38903.7421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of sum of exps",
    "input": "(/ (exp a) (+ (exp a) (exp b)))",
    "output": "(exp (- a (log (+ (exp a) (exp b)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.6085433791303934,
    "avg_bits_err_output": 0.5057619313327314,
    "avg_bits_err_improve": 0.10278144779766196,
    "time": 5929.142578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Quotient of products",
    "input": "(/ (* a1 a2) (* b1 b2))",
    "output": "(if (or (<= (/ (* a1 a2) (* b1 b2)) -5e+273) (and (not (<= (/ (* a1 a2) (* b1 b2)) -2e-322)) (or (<= (/ (* a1 a2) (* b1 b2)) 0.0) (not (<= (/ (* a1 a2) (* b1 b2)) 5e+280))))) (/ (/ a2 b2) (/ b1 a1)) (/ (* a1 a2) (* b1 b2)))",
    "output_parens": 28,
    "avg_bits_err_input": 11.32111551295781,
    "avg_bits_err_output": 2.607553953503836,
    "avg_bits_err_improve": 8.713561559453975,
    "time": 11057.5732421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic regression 2",
    "input": "(- (log (+ 1.0 (exp x))) (* x y))",
    "output": "(- (log1p (exp x)) (* x y))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4924154457670652,
    "avg_bits_err_output": 0.459125,
    "avg_bits_err_improve": 0.03329044576706519,
    "time": 9355.35888671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Hyperbolic arcsine",
    "input": "(log (+ x (sqrt (+ (* x x) 1.0))))",
    "output": "(if (<= x -5e+17) (- (log1p (- (pow (+ x (+ (hypot 1.0 x) -1.0)) 2.0))) (log1p (- 1.0 (+ x (hypot 1.0 x))))) (log1p (* x (+ 1.0 (/ x (+ 1.0 (hypot 1.0 x)))))))",
    "output_parens": 19,
    "avg_bits_err_input": 53.03431540410139,
    "avg_bits_err_output": 13.447997611071369,
    "avg_bits_err_improve": 39.58631779303002,
    "time": 24396.558837890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Exp of sum of logs",
    "input": "(exp (+ (log a) (log b)))",
    "output": "(* a b)",
    "output_parens": 1,
    "avg_bits_err_input": 5.650665790699693,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 5.650665790699693,
    "time": 2064.795654296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "arccos",
    "input": "(* 2.0 (atan (sqrt (/ (- 1.0 x) (+ 1.0 x)))))",
    "output": "(* 2.0 (atan (/ (- 1.0 x) (sqrt (- 1.0 (* x x))))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.0145,
    "avg_bits_err_output": 0.014625,
    "avg_bits_err_improve": -0.0001250000000000001,
    "time": 5839.70947265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rump's expression from Stadtherr's award speech",
    "input": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (- (- (- (* (* (* (* 11.0 x) x) y) y) (pow y 6.0)) (* 121.0 (pow y 4.0))) 2.0))) (* 5.5 (pow y 8.0))) (/ x (* 2.0 y)))",
    "output": "(+ (+ (+ (* 333.75 (pow y 6.0)) (* (* x x) (+ (+ (- (* y (* y (* x (* x 11.0)))) (pow y 6.0)) (* (pow y 4.0) -121.0)) -2.0))) (* 5.5 (pow y 8.0))) (/ x (* y 2.0)))",
    "output_parens": 21,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 58.136380241123696,
    "avg_bits_err_improve": 0,
    "time": 1320.7724609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's TurbineBenchmark",
    "input": "(- (- (+ 3.0 (/ 2.0 (* r r))) (/ (* (* 0.125 (- 3.0 (* 2.0 v))) (* (* (* w w) r) r)) (- 1.0 v))) 4.5)",
    "output": "(+ (* (pow r -2.0) 2.0) (- -1.5 (* (pow (* r w) 2.0) (/ (+ 0.375 (* v -0.25)) (- 1.0 v)))))",
    "output_parens": 11,
    "avg_bits_err_input": 12.898187306960708,
    "avg_bits_err_output": 0.23110659045986212,
    "avg_bits_err_improve": 12.667080716500845,
    "time": 43186.388427734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's FloatVsDoubleBenchmark",
    "input": "(+ x1 (+ (+ (+ (+ (* (+ (* (* (* 2.0 x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) (- (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)) 3.0)) (* (* x1 x1) (- (* 4.0 (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0))) 6.0))) (+ (* x1 x1) 1.0)) (* (* (* 3.0 x1) x1) (/ (- (+ (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))) (* (* x1 x1) x1)) x1) (* 3.0 (/ (- (- (* (* 3.0 x1) x1) (* 2.0 x2)) x1) (+ (* x1 x1) 1.0)))))",
    "output": "(+ x1 (fma 3.0 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 -2.0)) (fma x1 x1 1.0)) (+ (* (* x1 (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0))) (+ (* x1 3.0) (* (fma x1 x1 1.0) (* 2.0 (+ (/ (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (fma x1 x1 1.0)) -3.0))))) (fma (* (fma x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0) 1.0) (* x1 x1)) x1 (* x1 (fma x1 (+ (* (fma x1 (fma x1 3.0 -1.0) (* x2 2.0)) (/ 4.0 (fma x1 x1 1.0))) -6.0) 1.0))))))",
    "output_parens": 46,
    "avg_bits_err_input": 0.5135698396923305,
    "avg_bits_err_output": 0.3059817654358256,
    "avg_bits_err_improve": 0.20758807425650488,
    "time": 89481.0654296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's DopplerBench",
    "input": "(/ (* (- t1) v) (* (+ t1 u) (+ t1 u)))",
    "output": "(* (/ (- t1) (+ t1 u)) (/ v (+ t1 u)))",
    "output_parens": 6,
    "avg_bits_err_input": 17.915628747042692,
    "avg_bits_err_output": 1.2893388056900368,
    "avg_bits_err_improve": 16.626289941352656,
    "time": 10832.9072265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rosa's Benchmark",
    "input": "(- (* 0.954929658551372 x) (* 0.12900613773279798 (* (* x x) x)))",
    "output": "(* x (+ (* x (* x -0.12900613773279798)) 0.954929658551372))",
    "output_parens": 4,
    "avg_bits_err_input": 0.25346936093777045,
    "avg_bits_err_output": 0.18920996250072117,
    "avg_bits_err_improve": 0.06425939843704928,
    "time": 19783.985107421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Radioactive exchange between two surfaces",
    "input": "(- (pow x 4.0) (pow y 4.0))",
    "output": "(- (pow x 4.0) (pow y 4.0))",
    "output_parens": 3,
    "avg_bits_err_input": 0.0025,
    "avg_bits_err_output": 0.0025,
    "avg_bits_err_improve": 0,
    "time": 34325.41357421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, B",
    "input": "(* (* (/ PI 2.0) (/ 1.0 (- (* b b) (* a a)))) (- (/ 1.0 a) (/ 1.0 b)))",
    "output": "(/ (/ PI (+ b a)) (* a (* b 2.0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.770976513200347,
    "avg_bits_err_output": 0.2400003765672774,
    "avg_bits_err_improve": 14.53097613663307,
    "time": 59066.447265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "NMSE Section 6.1 mentioned, A",
    "input": "(/ (- (* (+ 1.0 (/ 1.0 eps)) (exp (- (* (- 1.0 eps) x)))) (* (- (/ 1.0 eps) 1.0) (exp (- (* (+ 1.0 eps) x))))) 2.0)",
    "output": "(/ (fma (+ 1.0 (/ 1.0 eps)) (+ (exp (log1p (exp (- (* eps x) x)))) -1.0) (/ (+ 1.0 (/ -1.0 eps)) (exp (fma eps x x)))) 2.0)",
    "output_parens": 15,
    "avg_bits_err_input": 29.453644125620823,
    "avg_bits_err_output": 29.471574900180322,
    "avg_bits_err_improve": -0.017930774559498985,
    "time": 54184.45263671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 3",
    "input": "(- 1.0 (/ 1.0 (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t))))))))",
    "output": "(+ 1.0 (/ -1.0 (+ 2.0 (* (+ 2.0 (/ -2.0 (+ 1.0 t))) (+ 2.0 (/ -2.0 (+ 1.0 t)))))))",
    "output_parens": 10,
    "avg_bits_err_input": 0.011625,
    "avg_bits_err_output": 0.005,
    "avg_bits_err_improve": 0.006625,
    "time": 10626.794677734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 2",
    "input": "(/ (+ 1.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))) (+ 2.0 (* (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))) (- 2.0 (/ (/ 2.0 t) (+ 1.0 (/ 1.0 t)))))))",
    "output": "(/ (+ 1.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))) (+ 2.0 (* (- 2.0 (/ 2.0 (+ 1.0 t))) (- 2.0 (/ 2.0 (+ 1.0 t))))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.01625,
    "avg_bits_err_output": 0.008125,
    "avg_bits_err_improve": 0.008125,
    "time": 55272.84521484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p13 Example 1",
    "input": "(/ (+ 1.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))) (+ 2.0 (* (/ (* 2.0 t) (+ 1.0 t)) (/ (* 2.0 t) (+ 1.0 t)))))",
    "output": "(* (/ (+ 1.0 (* 4.0 (pow (/ t (+ 1.0 t)) 2.0))) (+ 4.0 (* (pow (/ t (+ 1.0 t)) 4.0) -16.0))) (- 2.0 (* 4.0 (pow (/ t (+ 1.0 t)) 2.0))))",
    "output_parens": 17,
    "avg_bits_err_input": 0.03925,
    "avg_bits_err_output": 0.019804730463655756,
    "avg_bits_err_improve": 0.019445269536344244,
    "time": 16980.837646484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Warwick Tucker's Validated Numerics",
    "input": "(+ (+ (+ (* 333.75 (pow 33096.0 6.0)) (* (* 77617.0 77617.0) (+ (+ (+ (* (* 11.0 (* 77617.0 77617.0)) (* 33096.0 33096.0)) (- (pow 33096.0 6.0))) (* -121.0 (pow 33096.0 4.0))) -2.0))) (* 5.5 (pow 33096.0 8.0))) (/ 77617.0 (* 2.0 33096.0)))",
    "output": "-0.8273960599468214",
    "output_parens": 0,
    "avg_bits_err_input": 58.136380241123696,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 58.136380241123696,
    "time": 3239.698974609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper, rewritten",
    "input": "(- (* 9.0 (pow x 4.0)) (* (* y y) (- (* y y) 2.0)))",
    "output": "(fma (fma y y -2.0) (- (* y y)) (* 9.0 (pow x 4.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 61.99859042973555,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 61.99859042973555,
    "time": 3775.211669921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "From Rump in a 1983 paper",
    "input": "(+ (- (* 9.0 (pow x 4.0)) (pow y 4.0)) (* 2.0 (* y y)))",
    "output": "(+ (* (+ (* 3.0 (* x x)) (* y y)) (- (* 3.0 (* x x)) (* y y))) (* (* y y) 2.0))",
    "output_parens": 12,
    "avg_bits_err_input": 52,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 52,
    "time": 4449.998779296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, B",
    "input": "(/ 10.0 (- 1.0 (* x x)))",
    "output": "(/ -10.0 (fma x x -1.0))",
    "output_parens": 2,
    "avg_bits_err_input": 7.801530994643082,
    "avg_bits_err_output": 0.243,
    "avg_bits_err_improve": 7.558530994643082,
    "time": 15768.767822265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=5",
    "input": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output": "(- (pow (+ x eps) 5.0) (pow x 5.0))",
    "output_parens": 4,
    "avg_bits_err_input": 7.8289289514031815,
    "avg_bits_err_output": 7.8289289514031815,
    "avg_bits_err_improve": 0,
    "time": 24988.325927734375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4b, n=2",
    "input": "(- (pow (+ x eps) 2.0) (pow x 2.0))",
    "output": "(* eps (fma x 2.0 eps))",
    "output_parens": 2,
    "avg_bits_err_input": 16.614361036599533,
    "avg_bits_err_output": 0.01275,
    "avg_bits_err_improve": 16.601611036599532,
    "time": 10033.562744140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 1",
    "input": "(* (cos x) (exp (* 10.0 (* x x))))",
    "output": "(* (cos x) (pow (pow (exp 20.0) x) (/ x 2.0)))",
    "output_parens": 6,
    "avg_bits_err_input": 3.564018320784271,
    "avg_bits_err_output": 0.39530018907088377,
    "avg_bits_err_improve": 3.1687181317133875,
    "time": 25931.79296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "x / (x^2 + 1)",
    "input": "(/ x (+ (* x x) 1.0))",
    "output": "(* (/ x (hypot 1.0 x)) (/ 1.0 (hypot 1.0 x)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.876132882244992,
    "avg_bits_err_output": 0.01784924843993391,
    "avg_bits_err_improve": 14.858283633805058,
    "time": 7968.354736328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "simple fma test",
    "input": "(- (fma x y z) (+ 1.0 (+ (* x y) z)))",
    "output": "-1.0",
    "output_parens": 0,
    "avg_bits_err_input": 44.65687027405402,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 44.65687027405402,
    "time": 4010.996826171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ln(1 + x)",
    "input": "(log (+ 1.0 x))",
    "output": "(log1p x)",
    "output_parens": 1,
    "avg_bits_err_input": 39.03638582326905,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 39.03588582326905,
    "time": 5927.014892578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test2",
    "input": "(- (* 1.7e+308 t) 1.7e+308)",
    "output": "(fma 1.7e+308 t -1.7e+308)",
    "output_parens": 1,
    "avg_bits_err_input": 64,
    "avg_bits_err_output": 0.299375,
    "avg_bits_err_improve": 63.700625,
    "time": 65703.0986328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "fma_test1",
    "input": "(+ (* (+ 1.0 (* t 2e-16)) (+ 1.0 (* t 2e-16))) (- -1.0 (* 2.0 (* t 2e-16))))",
    "output": "(* t (sqrt (* (* t t) 1.6e-63)))",
    "output_parens": 4,
    "avg_bits_err_input": 61.84325519148306,
    "avg_bits_err_output": 0.3217924812503606,
    "avg_bits_err_improve": 61.5214627102327,
    "time": 12253.9072265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r2)",
    "input": "(/ (- (- b) (sqrt (- (* b b) (* 4.0 (* a c))))) (* 2.0 a))",
    "output": "(if (<= b -3.5e+156) (* -0.5 (/ (* c -4.0) (- (hypot b (pow (pow (* (* c -4.0) a) 2.0) 0.25)) b))) (if (<= b 5.4e-257) (* -0.5 (/ (* c -4.0) (- (sqrt (fma b b (* -4.0 (* c a)))) b))) (if (<= b 1.35e+154) (* -0.5 (/ (+ b (sqrt (+ (* (* c -4.0) a) (* b b)))) a)) (* -0.5 (/ (+ b (hypot (pow (pow (* (* c -4.0) a) 2.0) 0.25) b)) a)))))",
    "output_parens": 39,
    "avg_bits_err_input": 35.01359457323689,
    "avg_bits_err_output": 12.082908440585314,
    "avg_bits_err_improve": 22.930686132651573,
    "time": 40812.994384765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "The quadratic formula (r1)",
    "input": "(/ (+ (- b) (sqrt (- (* b b) (* (* 4.0 a) c)))) (* 2.0 a))",
    "output": "(if (<= b -1.35e+154) (/ (- (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)) b) (* a 2.0)) (if (<= b -1.9e-308) (/ (- (sqrt (+ (* b b) (* c (* a -4.0)))) b) (* a 2.0)) (if (<= b 1e+48) (/ (* c -2.0) (+ b (hypot b (sqrt (* -4.0 (* a c)))))) (* (/ 0.5 (+ b (hypot b (pow (pow (* a (* c -4.0)) 2.0) 0.25)))) (/ (fma a (* c -4.0) 0.0) a)))))",
    "output_parens": 40,
    "avg_bits_err_input": 34.47102289653146,
    "avg_bits_err_output": 14.83770269411909,
    "avg_bits_err_improve": 19.63332020241237,
    "time": 37981.983642578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Rectangular parallelepiped of dimension a×b×c",
    "input": "(* 2.0 (+ (+ (* 1.0 (/ 1.0 9.0)) (* (/ 1.0 9.0) (/ 1.0 9.0))) (* (/ 1.0 9.0) 1.0)))",
    "output": "0.4691358024691358",
    "output_parens": 0,
    "avg_bits_err_input": 0,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 0,
    "time": 2061.092529296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan's exp quotient",
    "input": "(/ (- (exp x) 1.0) x)",
    "output": "(/ 1.0 (/ x (expm1 x)))",
    "output_parens": 3,
    "avg_bits_err_input": 40.386030501860056,
    "avg_bits_err_output": 0.016136842188131013,
    "avg_bits_err_improve": 40.369893659671924,
    "time": 6333.526611328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Kahan p9 Example",
    "input": "(/ (* (- x y) (+ x y)) (+ (* x x) (* y y)))",
    "output": "(/ (* (/ (- x y) (hypot x y)) (+ x y)) (hypot x y))",
    "output_parens": 7,
    "avg_bits_err_input": 19.900819241230433,
    "avg_bits_err_output": 0.03595809882949916,
    "avg_bits_err_improve": 19.864861142400933,
    "time": 33572.80517578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p6",
    "input": "(* (+ a (+ b (+ c d))) 2.0)",
    "output": "(* (+ (+ b c) (+ d a)) 2.0)",
    "output_parens": 4,
    "avg_bits_err_input": 3.6717340797998848,
    "avg_bits_err_output": 0,
    "avg_bits_err_improve": 3.6717340797998848,
    "time": 16430.771240234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression, p14",
    "input": "(* a (+ (+ b c) d))",
    "output": "(fma d a (* a (+ b c)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.04275,
    "avg_bits_err_output": 0.0005,
    "avg_bits_err_improve": 0.04225,
    "time": 9433.83837890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 4, p15",
    "input": "(* (+ a b) (+ a b))",
    "output": "(+ (* b (+ b a)) (* a (+ b a)))",
    "output_parens": 5,
    "avg_bits_err_input": 0.02177124062518029,
    "avg_bits_err_output": 0.016198120312590145,
    "avg_bits_err_improve": 0.005573120312590146,
    "time": 5747.064697265625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 3, p15",
    "input": "(+ (* x (* x x)) (* x x))",
    "output": "(* (+ x 1.0) (* x x))",
    "output_parens": 3,
    "avg_bits_err_input": 0.013375,
    "avg_bits_err_output": 0.02254248125036058,
    "avg_bits_err_improve": -0.00916748125036058,
    "time": 3175.76220703125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 2, p15",
    "input": "(+ x (* x x))",
    "output": "(+ x (* x x))",
    "output_parens": 2,
    "avg_bits_err_input": 0.001125,
    "avg_bits_err_output": 0.001125,
    "avg_bits_err_improve": 0,
    "time": 1634.342529296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Expression 1, p15",
    "input": "(+ (+ (+ (+ e d) c) b) a)",
    "output": "(+ e (+ d (+ c (+ b a))))",
    "output_parens": 4,
    "avg_bits_err_input": 0.4040216171924582,
    "avg_bits_err_output": 0.2285,
    "avg_bits_err_improve": 0.1755216171924582,
    "time": 26616.953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Mentioned, A",
    "input": "(- 1.0 (cos x))",
    "output": "(* (sin x) (tan (/ x 2.0)))",
    "output_parens": 4,
    "avg_bits_err_input": 29.880607605573434,
    "avg_bits_err_output": 0.00775,
    "avg_bits_err_improve": 29.872857605573433,
    "time": 9887.113037109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4d",
    "input": "(- x (sqrt (- (* x x) eps)))",
    "output": "(/ eps (+ x (sqrt (- (* x x) eps))))",
    "output_parens": 5,
    "avg_bits_err_input": 24.61180531814241,
    "avg_bits_err_output": 0.28675,
    "avg_bits_err_improve": 24.325055318142407,
    "time": 15597.58154296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "ENA, Section 1.4, Exercise 4a",
    "input": "(/ (- x (sin x)) (tan x))",
    "output": "(/ 1.0 (* (/ 1.0 (- x (sin x))) (tan x)))",
    "output_parens": 6,
    "avg_bits_err_input": 30.371839472538547,
    "avg_bits_err_output": 30.371698348082443,
    "avg_bits_err_improve": 0.00014112445610336977,
    "time": 44873.09033203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Difference of squares",
    "input": "(- (* a a) (* b b))",
    "output": "(* (- a b) (+ a b))",
    "output_parens": 3,
    "avg_bits_err_input": 0.006600919365257201,
    "avg_bits_err_output": 0.000875,
    "avg_bits_err_improve": 0.005725919365257201,
    "time": 3886.609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Compound Interest",
    "input": "(* 100.0 (/ (- (pow (+ 1.0 (/ i n)) n) 1.0) (/ i n)))",
    "output": "(if (<= (/ (+ -1.0 (pow (+ 1.0 (/ i n)) n)) (/ i n)) 0.0) (* 100.0 (/ (expm1 (* n (log1p (/ i n)))) (/ i n))) (if (<= (/ (+ -1.0 (pow (+ 1.0 (/ i n)) n)) (/ i n)) 20000000.0) (* 100.0 (/ (- (* (/ 1.0 n) (pow (+ 1.0 (/ i n)) n)) (* (/ i n) (/ 1.0 i))) (* (/ i n) (/ 1.0 n)))) (* n (* (/ 100.0 i) (+ -1.0 (pow (exp n) (log1p (/ i n))))))))",
    "output_parens": 45,
    "avg_bits_err_input": 47.40229719414461,
    "avg_bits_err_output": 11.00003907628792,
    "avg_bits_err_improve": 36.40225811785669,
    "time": 37943.290283203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, real part",
    "input": "(/ (+ (* a c) (* b d)) (+ (* c c) (* d d)))",
    "output": "(if (<= (/ (+ (* a c) (* b d)) (+ (* c c) (* d d))) 5e+299) (/ (/ (+ (* a c) (* b d)) (hypot c d)) (hypot c d)) (* (/ (- (* (/ (* b d) (hypot d c)) (/ (* b d) (hypot d c))) (* (/ a (/ (hypot d c) c)) (/ a (/ (hypot d c) c)))) (- (/ (* b d) (hypot d c)) (/ a (/ (hypot d c) c)))) (/ 1.0 (hypot c d))))",
    "output_parens": 42,
    "avg_bits_err_input": 26.114874810140503,
    "avg_bits_err_output": 14.141133263948946,
    "avg_bits_err_improve": 11.973741546191556,
    "time": 24014.136474609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Complex division, imag part",
    "input": "(/ (- (* b c) (* a d)) (+ (* c c) (* d d)))",
    "output": "(/ (- (/ b (/ (hypot c d) c)) (* (/ d (hypot c d)) a)) (hypot c d))",
    "output_parens": 9,
    "avg_bits_err_input": 26.210439665110023,
    "avg_bits_err_output": 0.4621788742670242,
    "avg_bits_err_improve": 25.748260790843,
    "time": 22927.832275390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, z",
    "input": "(+ (- 1.0 ux) (* ux maxCos))",
    "output": "(+ 1.0 (* ux (+ maxCos -1.0)))",
    "output_parens": 3,
    "avg_bits_err_input": 0.037,
    "avg_bits_err_output": 0.022478257067009146,
    "avg_bits_err_improve": 0.014521742932990852,
    "time": 17039.426513671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, y",
    "input": "(* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(/ (* (pow (sin (* 2.0 (* PI uy))) 3.0) (sqrt (/ (- (pow (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 8.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) 2.0) (/ (/ (pow (fma ux maxCos (- 1.0 ux)) 24.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 8.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (+ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)) (* (pow (pow (cbrt (fma ux maxCos (- 1.0 ux))) 2.0) 8.0) (pow (cbrt (fma ux maxCos (- 1.0 ux))) 8.0))))) (+ (/ 1.0 (+ (pow (fma ux maxCos (- 1.0 ux)) 8.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))) (/ (pow (fma ux maxCos (- 1.0 ux)) 12.0) (+ (pow (fma ux maxCos (- 1.0 ux)) 8.0) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 4.0)))))))) (* (pow (sin (* 2.0 (* PI uy))) 2.0) (hypot 1.0 (fma ux maxCos (- 1.0 ux)))))",
    "output_parens": 77,
    "avg_bits_err_input": 13.701491355935918,
    "avg_bits_err_output": 12.118045154315038,
    "avg_bits_err_improve": 1.5834462016208803,
    "time": 98533.07690429688,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone, x",
    "input": "(* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (+ (- 1.0 ux) (* ux maxCos)) (+ (- 1.0 ux) (* ux maxCos))))))",
    "output": "(* (cos (* (* uy 2.0) PI)) (sqrt (/ (- 1.0 (log (+ 1.0 (expm1 (exp (* (log (pow (fma ux maxCos (- 1.0 ux)) 2.0)) 6.0)))))) (* (+ (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 2.0)) (pow (fma ux maxCos (- 1.0 ux)) 4.0)) (+ 1.0 (pow (fma ux maxCos (- 1.0 ux)) 6.0))))))",
    "output_parens": 29,
    "avg_bits_err_input": 13.736653736431963,
    "avg_bits_err_output": 12.126772463876067,
    "avg_bits_err_improve": 1.6098812725558957,
    "time": 73802.94799804688,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "UniformSampleCone 2",
    "input": "(+ (+ (* (* (cos (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) xi) (* (* (sin (* (* uy 2.0) PI)) (sqrt (- 1.0 (* (* (* (- 1.0 ux) maxCos) ux) (* (* (- 1.0 ux) maxCos) ux))))) yi)) (* (* (* (- 1.0 ux) maxCos) ux) zi))",
    "output": "(fma ux (* (- 1.0 ux) (* maxCos zi)) (* (sqrt (- 1.0 (* ux (* ux (* maxCos (* maxCos (* (- 1.0 ux) (- 1.0 ux)))))))) (+ (* (cos (/ (* (* uy uy) (* 2.0 PI)) uy)) xi) (* (sin (* uy (* 2.0 PI))) yi))))",
    "output_parens": 25,
    "avg_bits_err_input": 0.34700233475199505,
    "avg_bits_err_output": 0.35169640146438275,
    "avg_bits_err_improve": -0.004694066712387701,
    "time": 67154.15795898438,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, sample surface normal, cosTheta",
    "input": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (* (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (cos (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* (* 2.0 PI) u1) (* 0.5 PI))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output": "(/ 1.0 (sqrt (+ 1.0 (/ (* (/ 1.0 (+ (/ (/ 1.0 (+ 1.0 (pow (* (/ alphay alphax) (tan (* PI (fma 2.0 u1 0.5)))) 2.0))) (* alphax alphax)) (/ (* (sin (atan (* (/ alphay alphax) (tan (+ (* u1 (* PI 2.0)) (* PI 0.5)))))) (sin (atan (* (/ alphay alphax) (tan (+ (* u1 (* PI 2.0)) (* PI 0.5))))))) (* alphay alphay)))) u0) (- 1.0 u0)))))",
    "output_parens": 39,
    "avg_bits_err_input": 0.1992409899958042,
    "avg_bits_err_output": 0.19563684218813096,
    "avg_bits_err_improve": 0.003604147807673236,
    "time": 33619.948974609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_y",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (sin (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.5327953589052737,
    "avg_bits_err_output": 0.4964870765534343,
    "avg_bits_err_improve": 0.036308282351839416,
    "time": 21903.279541015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Trowbridge-Reitz Sample, near normal, slope_x",
    "input": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (* 6.28318530718 u2)))",
    "output": "(* (sqrt (/ u1 (- 1.0 u1))) (cos (sqrt (* u2 (* u2 39.47841760436263)))))",
    "output_parens": 8,
    "avg_bits_err_input": 0.3269974191468956,
    "avg_bits_err_output": 0.32250037147217914,
    "avg_bits_err_improve": 0.004497047674716481,
    "time": 28817.177490234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Sample trimmed logistic on [-pi, pi]",
    "input": "(* (- s) (log (- (/ 1.0 (+ (* u (- (/ 1.0 (+ 1.0 (exp (/ (- PI) s)))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) (/ 1.0 (+ 1.0 (exp (/ PI s)))))) 1.0)))",
    "output": "(* s (log (/ (+ -1.0 (- (/ -1.0 (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s)))))) (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -2.0))) (- 1.0 (pow (+ (/ u (+ 1.0 (exp (/ PI (- s))))) (/ (- 1.0 u) (+ 1.0 (exp (/ PI s))))) -3.0)))))",
    "output_parens": 42,
    "avg_bits_err_input": 0.33157011017982335,
    "avg_bits_err_output": 0.328564216401177,
    "avg_bits_err_improve": 0.0030058937786463513,
    "time": 37512.36474609375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic function",
    "input": "(/ 1.0 (+ 1.0 (exp (/ (- x) s))))",
    "output": "(exp (- (log1p (exp (/ (- x) s)))))",
    "output_parens": 6,
    "avg_bits_err_input": 0.05277137048278721,
    "avg_bits_err_output": 0.03487778576674878,
    "avg_bits_err_improve": 0.017893584716038434,
    "time": 14222.640869140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Logistic distribution",
    "input": "(/ (exp (/ (- (fabs x)) s)) (* (* s (+ 1.0 (exp (/ (- (fabs x)) s)))) (+ 1.0 (exp (/ (- (fabs x)) s)))))",
    "output": "(* (/ 1.0 (+ 2.0 (* 2.0 (expm1 (log1p (cosh (/ (fabs x) s))))))) (/ 1.0 s))",
    "output_parens": 10,
    "avg_bits_err_input": 0.14704880041152202,
    "avg_bits_err_output": 0.21784816115275404,
    "avg_bits_err_improve": -0.07079936074123203,
    "time": 23724.94091796875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Lanczos kernel",
    "input": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output": "(* (/ (sin (* (* x PI) tau)) (* (* x PI) tau)) (/ (sin (* x PI)) (* x PI)))",
    "output_parens": 11,
    "avg_bits_err_input": 0.6610546146344237,
    "avg_bits_err_output": 0.6610546146344237,
    "avg_bits_err_improve": 0,
    "time": 32356.085693359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, sample_f, cosTheta",
    "input": "(+ 1.0 (* v (log (+ u (* (- 1.0 u) (exp (/ -2.0 v)))))))",
    "output": "(+ 1.0 (- (* v (+ 1.0 (log (fma (- 1.0 u) (exp (/ -2.0 v)) u)))) v))",
    "output_parens": 9,
    "avg_bits_err_input": 0.1607340264575818,
    "avg_bits_err_output": 0.18128563942748677,
    "avg_bits_err_improve": -0.02055161296990496,
    "time": 33459.12841796875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, gamma for a refracted ray",
    "input": "(asin (/ h (sqrt (- (* eta eta) (/ (* sinTheta_O sinTheta_O) (sqrt (- 1.0 (* sinTheta_O sinTheta_O))))))))",
    "output": "(if (<= (* sinTheta_O sinTheta_O) 0.0) (asin (/ h (hypot eta (sqrt (/ (* sinTheta_O sinTheta_O) (- (hypot 1.0 sinTheta_O))))))) (asin (/ h (sqrt (fma eta eta (/ (* sinTheta_O (- sinTheta_O)) (sqrt (- 1.0 (* sinTheta_O sinTheta_O)))))))))",
    "output_parens": 21,
    "avg_bits_err_input": 2.4787252456347293,
    "avg_bits_err_output": 0.3782733971873449,
    "avg_bits_err_improve": 2.1004518484473844,
    "time": 32446.200439453125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, upper",
    "input": "(/ (* (exp (- (/ (* sinTheta_i sinTheta_O) v))) (/ (* cosTheta_i cosTheta_O) v)) (* (* (sinh (/ 1.0 v)) 2.0) v))",
    "output": "(* (/ cosTheta_O (sinh (/ 1.0 v))) (/ (/ 1.0 v) (* (/ (/ v 0.5) cosTheta_i) (exp (/ (* sinTheta_O sinTheta_i) v)))))",
    "output_parens": 12,
    "avg_bits_err_input": 0.44697668449907874,
    "avg_bits_err_output": 0.39179826094848075,
    "avg_bits_err_improve": 0.05517842355059799,
    "time": 43804.098388671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "HairBSDF, Mp, lower",
    "input": "(exp (+ (+ (- (- (/ (* cosTheta_i cosTheta_O) v) (/ (* sinTheta_i sinTheta_O) v)) (/ 1.0 v)) 0.6931) (log (/ 1.0 (* 2.0 v)))))",
    "output": "(/ (exp (+ (/ (- (* cosTheta_i cosTheta_O) (* sinTheta_i sinTheta_O)) v) (+ (/ -1.0 v) 0.6931))) (* v 2.0))",
    "output_parens": 10,
    "avg_bits_err_input": 0.1127232469302494,
    "avg_bits_err_output": 0.08075239561184859,
    "avg_bits_err_improve": 0.031970851318400814,
    "time": 31430.525146484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "GTR1 distribution",
    "input": "(/ (- (* alpha alpha) 1.0) (* (* PI (log (* alpha alpha))) (+ 1.0 (* (* (- (* alpha alpha) 1.0) cosTheta) cosTheta))))",
    "output": "(/ (fma alpha alpha -1.0) (* (* PI (* (log alpha) 2.0)) (fma (fma alpha alpha -1.0) (* cosTheta cosTheta) 1.0)))",
    "output_parens": 9,
    "avg_bits_err_input": 0.46684617393572764,
    "avg_bits_err_output": 0.47146394297880106,
    "avg_bits_err_improve": -0.0046177690430734275,
    "time": 61528.3203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, upper",
    "input": "(* (* 3.0 s) (log (/ 1.0 (- 1.0 (/ (- u 0.25) 0.75)))))",
    "output": "(* s (* (log1p (/ (- 0.25 u) 0.75)) -3.0))",
    "output_parens": 5,
    "avg_bits_err_input": 1.3155586273297748,
    "avg_bits_err_output": 0.5506806086442536,
    "avg_bits_err_improve": 0.7648780186855212,
    "time": 25161.9501953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, sample scattering profile, lower",
    "input": "(* s (log (/ 1.0 (- 1.0 (* 4.0 u)))))",
    "output": "(* (log1p (* u -4.0)) (- s))",
    "output_parens": 4,
    "avg_bits_err_input": 12.177074462391777,
    "avg_bits_err_output": 0.206875,
    "avg_bits_err_improve": 11.970199462391777,
    "time": 25697.198486328125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Disney BSSRDF, PDF of scattering profile",
    "input": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* (* (* 2.0 PI) s) r)) (/ (* 0.75 (exp (/ (- r) (* 3.0 s)))) (* (* (* 6.0 PI) s) r)))",
    "output": "(+ (/ (* 0.25 (exp (/ (- r) s))) (* r (* s (* 2.0 PI)))) (/ (* 0.75 (exp (/ (- r) (* s 3.0)))) (* r (* s (* PI 6.0)))))",
    "output_parens": 18,
    "avg_bits_err_input": 0.14136866499793704,
    "avg_bits_err_output": 0.14136866499793704,
    "avg_bits_err_improve": 0,
    "time": 56706.72607421875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Curve intersection, scale width based on ribbon orientation",
    "input": "(+ (* (* (sin (* (- 1.0 u) normAngle)) (/ 1.0 (sin normAngle))) n0_i) (* (* (sin (* u normAngle)) (/ 1.0 (sin normAngle))) n1_i))",
    "output": "(fma (/ (sin (* (- 1.0 u) normAngle)) (sin normAngle)) n0_i (* (/ (sin (* u normAngle)) (sin normAngle)) n1_i))",
    "output_parens": 11,
    "avg_bits_err_input": 0.9211949337940752,
    "avg_bits_err_output": 0.7530427915193327,
    "avg_bits_err_improve": 0.1681521422747425,
    "time": 39124.281494140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, normalization factor",
    "input": "(/ 1.0 (+ (+ 1.0 c) (* (* (/ 1.0 (sqrt PI)) (/ (sqrt (- (- 1.0 cosTheta) cosTheta)) cosTheta)) (exp (* (- cosTheta) cosTheta)))))",
    "output": "(/ 1.0 (+ (+ 1.0 c) (* (/ 1.0 (* cosTheta (/ 1.0 (sqrt (/ (- 1.0 (+ cosTheta cosTheta)) PI))))) (exp (* cosTheta (- cosTheta))))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.6968330656105688,
    "avg_bits_err_output": 0.4934957539005241,
    "avg_bits_err_improve": 0.2033373117100447,
    "time": 24473.09521484375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_y",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (sin (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (sin (* 2.0 (* PI u2))))",
    "output_parens": 8,
    "avg_bits_err_input": 13.602537837612301,
    "avg_bits_err_output": 0.5172734402693678,
    "avg_bits_err_improve": 13.085264397342934,
    "time": 27213.75830078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Sample, near normal, slope_x",
    "input": "(* (sqrt (- (log (- 1.0 u1)))) (cos (* (* 2.0 PI) u2)))",
    "output": "(* (sqrt (- (log1p (- u1)))) (cos (* 2.0 (expm1 (log1p (* PI u2))))))",
    "output_parens": 10,
    "avg_bits_err_input": 13.650906166182418,
    "avg_bits_err_output": 0.3467494980498107,
    "avg_bits_err_improve": 13.304156668132608,
    "time": 22971.795166015625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax == alphay",
    "input": "(* (* (- alpha) alpha) (log (- 1.0 u0)))",
    "output": "(* (* alpha (- alpha)) (log1p (- u0)))",
    "output_parens": 5,
    "avg_bits_err_input": 14.142857218853672,
    "avg_bits_err_output": 0.32187988750216356,
    "avg_bits_err_improve": 13.820977331351509,
    "time": 21246.656494140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Beckmann Distribution sample, tan2theta, alphax != alphay, u1 <= 0.5",
    "input": "(/ (- (log (- 1.0 u0))) (+ (/ cos2phi (* alphax alphax)) (/ sin2phi (* alphay alphay))))",
    "output": "(* (/ (log1p (- u0)) (fma (/ cos2phi alphax) (/ alphay sin2phi) (/ alphax alphay))) (* alphax (/ (- alphay) sin2phi)))",
    "output_parens": 11,
    "avg_bits_err_input": 12.704742806965966,
    "avg_bits_err_output": 0.5107062335296685,
    "avg_bits_err_improve": 12.194036573436296,
    "time": 28600.405517578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (6)",
    "input": "(- (* PI l) (* (/ 1.0 (* F F)) (tan (* PI l))))",
    "output": "(if (or (<= (* PI l) -1e+23) (not (<= (* PI l) 100000.0))) (+ (* PI l) -1.0) (- (* PI l) (/ 1.0 (* F (/ F (tan (* PI l)))))))",
    "output_parens": 16,
    "avg_bits_err_input": 16.27470222508504,
    "avg_bits_err_output": 0.7731127128783989,
    "avg_bits_err_improve": 15.50158951220664,
    "time": 36617.786376953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (24)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (/ 1.0 (sin B)))",
    "output": "(/ (- (/ (tan B) (sin B)) x) (tan B))",
    "output_parens": 6,
    "avg_bits_err_input": 0.21018872187554086,
    "avg_bits_err_output": 0.17841052656439302,
    "avg_bits_err_improve": 0.03177819531114784,
    "time": 20669.59228515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (23)",
    "input": "(+ (- (* x (/ 1.0 (tan B)))) (* (/ F (sin B)) (pow (+ (+ (* F F) 2.0) (* 2.0 x)) (- (/ 1.0 2.0)))))",
    "output": "(- (/ (/ F (sqrt (fma x 2.0 (fma F F 2.0)))) (sin B)) (/ x (tan B)))",
    "output_parens": 9,
    "avg_bits_err_input": 13.931669761833206,
    "avg_bits_err_output": 10.80165095355039,
    "avg_bits_err_improve": 3.1300188082828164,
    "time": 39432.258544921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "VandenBroeck and Keller, Equation (20)",
    "input": "(- (* (/ 1.0 (/ PI 4.0)) (log (/ (+ (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f)))) (- (exp (* (/ PI 4.0) f)) (exp (- (* (/ PI 4.0) f))))))))",
    "output": "(* PI (/ (* (log (tanh (* PI (* f 0.25)))) (pow (* PI 0.25) -2.0)) 4.0))",
    "output_parens": 9,
    "avg_bits_err_input": 61.35569690165737,
    "avg_bits_err_output": 0.6545280402662625,
    "avg_bits_err_improve": 60.7011688613911,
    "time": 52763.8173828125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (7)",
    "input": "(/ (* (sqrt 2.0) t) (sqrt (- (* (/ (+ x 1.0) (- x 1.0)) (+ (* l l) (* 2.0 (* t t)))) (* l l))))",
    "output": "(/ (* t (sqrt 2.0)) (hypot l (* (sqrt (/ (+ x 1.0) (+ x -1.0))) (hypot l (* t (sqrt 2.0))))))",
    "output_parens": 12,
    "avg_bits_err_input": 42.76990330589846,
    "avg_bits_err_output": 20.20739919495297,
    "avg_bits_err_improve": 22.56250411094549,
    "time": 46342.09716796875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3b), real",
    "input": "(* (/ (sin ky) (sqrt (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))) (sin th))",
    "output": "(/ (sin th) (/ (hypot (sin ky) (sin kx)) (sin ky)))",
    "output_parens": 7,
    "avg_bits_err_input": 3.964076345249619,
    "avg_bits_err_output": 0.225929700005769,
    "avg_bits_err_improve": 3.73814664524385,
    "time": 29695.39501953125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (3a)",
    "input": "(sqrt (* (/ 1.0 2.0) (+ 1.0 (/ 1.0 (sqrt (+ 1.0 (* (pow (/ (* 2.0 l) Om) 2.0) (+ (pow (sin kx) 2.0) (pow (sin ky) 2.0)))))))))",
    "output": "(sqrt (+ 0.5 (* 0.5 (/ 1.0 (+ (exp (log1p (hypot 1.0 (* (* l (/ 2.0 Om)) (hypot (sin kx) (sin ky)))))) -1.0)))))",
    "output_parens": 14,
    "avg_bits_err_input": 0.941,
    "avg_bits_err_output": 0.0075,
    "avg_bits_err_improve": 0.9335,
    "time": 21604.222412109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (2)",
    "input": "(asin (sqrt (/ (- 1.0 (pow (/ Om Omc) 2.0)) (+ 1.0 (* 2.0 (pow (/ t l) 2.0))))))",
    "output": "(asin (* (cbrt (- 1.0 (pow (/ Om Omc) 2.0))) (/ (pow (- 1.0 (pow (/ Om Omc) 2.0)) 0.16666666666666666) (hypot 1.0 (* (/ t l) (sqrt 2.0))))))",
    "output_parens": 15,
    "avg_bits_err_input": 10.513191713756571,
    "avg_bits_err_output": 1.0757660396926705,
    "avg_bits_err_improve": 9.4374256740639,
    "time": 27448.677978515625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (13)",
    "input": "(sqrt (* (* (* 2.0 n) U) (- (- t (* 2.0 (/ (* l l) Om))) (* (* n (pow (/ l Om) 2.0)) (- U U*)))))",
    "output": "(if (<= U -7.2e+158) (* (sqrt 2.0) (sqrt (+ (* (* (/ l Om) (fma l -2.0 (* (/ l Om) (* n (- U* U))))) (* U n)) (* (* U n) t)))) (if (<= U -5e-81) (sqrt (fma (/ l Om) (* (* U (fma l -2.0 (* (- U* U) (/ n (/ Om l))))) (* 2.0 n)) (* n (* 2.0 (* U t))))) (if (<= U -5.5e-94) (* (sqrt (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t)) (sqrt (* 2.0 (* U n)))) (if (<= U -9.5e-175) (* (sqrt (* 2.0 n)) (sqrt (* U (+ t (* (/ l Om) (fma n (* (/ l Om) (- U* U)) (* l -2.0))))))) (if (<= U 8e-303) (sqrt (* (* 2.0 n) (+ (/ (* U (fma l -2.0 (* (- U* U) (/ n (/ Om l))))) (/ Om l)) (* U t)))) (* (sqrt (* (* 2.0 n) (fma (/ l Om) (fma (* (/ l Om) n) (- U* U) (* l -2.0)) t))) (sqrt U)))))))",
    "output_parens": 89,
    "avg_bits_err_input": 34.81510642911647,
    "avg_bits_err_output": 26.765245581593856,
    "avg_bits_err_improve": 8.049860847522613,
    "time": 59555.494140625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10-)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (- (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= k -2.05e-97) (not (<= k 1.4e-98))) (* (/ (/ l (sin k)) (* k (tan k))) (/ 2.0 (* t (/ k l)))) (/ (/ l (tan k)) (* k (* (* (/ (sin k) l) 0.5) (* k t)))))",
    "output_parens": 23,
    "avg_bits_err_input": 47.393965477818895,
    "avg_bits_err_output": 1.0975030077174728,
    "avg_bits_err_improve": 46.296462470101424,
    "time": 125845.35400390625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Toniolo and Linder, Equation (10+)",
    "input": "(/ 2.0 (* (* (* (/ (pow t 3.0) (* l l)) (sin k)) (tan k)) (+ (+ 1.0 (pow (/ k t) 2.0)) 1.0)))",
    "output": "(if (or (<= t -6.8e-56) (not (<= t 8.4e-38))) (* (* (/ 2.0 (* (+ 2.0 (pow (/ k t) 2.0)) (sin k))) (/ l t)) (/ (/ l t) (* t (tan k)))) (/ 2.0 (* (* (/ (+ (pow (* t (/ k t)) 2.0) (* 2.0 (* t t))) l) (/ -1.0 (/ (- l) t))) (* (sin k) (tan k)))))",
    "output_parens": 34,
    "avg_bits_err_input": 32.28531013236232,
    "avg_bits_err_output": 8.66681792926303,
    "avg_bits_err_improve": 23.61849220309929,
    "time": 67072.95874023438,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (64)",
    "input": "(+ (* (/ (cos th) (sqrt 2.0)) (* a1 a1)) (* (/ (cos th) (sqrt 2.0)) (* a2 a2)))",
    "output": "(/ (+ (* a2 a2) (* a1 a1)) (/ (sqrt 2.0) (cos th)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5056808297076038,
    "avg_bits_err_output": 0.4592466187669485,
    "avg_bits_err_improve": 0.04643421094065525,
    "time": 25532.4921875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Migdal et al, Equation (51)",
    "input": "(* (/ 1.0 (sqrt k)) (pow (* (* 2.0 PI) n) (/ (- 1.0 k) 2.0)))",
    "output": "(/ (* (sqrt (* PI (* 2.0 n))) (pow (* PI (* 2.0 n)) (* k -0.5))) (sqrt k))",
    "output_parens": 10,
    "avg_bits_err_input": 0.5319846978978081,
    "avg_bits_err_output": 0.4239742764844014,
    "avg_bits_err_improve": 0.10801042141340672,
    "time": 26792.74951171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (4)",
    "input": "(+ (* (* J (- (exp l) (exp (- l)))) (cos (/ K 2.0))) U)",
    "output": "(fma (* J 2.0) (* (cos (* K 0.5)) (sinh l)) U)",
    "output_parens": 6,
    "avg_bits_err_input": 17.644283046851097,
    "avg_bits_err_output": 0.0884971599904375,
    "avg_bits_err_improve": 17.555785886860658,
    "time": 28188.64404296875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (32)",
    "input": "(* (cos (- (/ (* K (+ m n)) 2.0) M)) (exp (- (- (pow (- (/ (+ m n) 2.0) M) 2.0)) (- l (fabs (- m n))))))",
    "output": "(if (<= (* (cos (- (/ (* (+ m n) K) 2.0) M)) (exp (- (- (fabs (- m n)) l) (pow (- (/ (+ m n) 2.0) M) 2.0)))) 2.0) (* (cos (- (/ K (/ 2.0 (+ m n))) M)) (exp (- (- m n) (+ l (pow (- (* (+ m n) 0.5) M) 2.0))))) (* (exp (- (- m n) (+ l (pow (- (* (+ m n) 0.5) M) 2.0)))) (cos (- (/ K (* (+ m n) 0.5)) M))))",
    "output_parens": 45,
    "avg_bits_err_input": 15.451455712274758,
    "avg_bits_err_output": 1.390058112644817,
    "avg_bits_err_improve": 14.06139759962994,
    "time": 26039.179443359375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Maksimov and Kolovsky, Equation (3)",
    "input": "(* (* (* -2.0 J) (cos (/ K 2.0))) (sqrt (+ 1.0 (pow (/ U (* (* 2.0 J) (cos (/ K 2.0)))) 2.0))))",
    "output": "(* (* J (* -2.0 (cos (/ K 2.0)))) (hypot 1.0 (/ U (* J (* 2.0 (cos (/ K 2.0)))))))",
    "output_parens": 11,
    "avg_bits_err_input": 17.888448120312592,
    "avg_bits_err_output": 7.939698120312591,
    "avg_bits_err_improve": 9.94875,
    "time": 33839.074462890625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (9a)",
    "input": "(* w0 (sqrt (- 1.0 (* (pow (/ (* M D) (* 2.0 d)) 2.0) (/ h l)))))",
    "output": "(if (or (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 1e-178) (not (<= (pow (/ (* M D) (* 2.0 d)) 2.0) 4e+264))) (* w0 (sqrt (- 1.0 (/ (* (* M (* 0.5 (/ D d))) h) (* (/ 2.0 (* M (/ D d))) l))))) (* w0 (sqrt (- 1.0 (* (pow (* (/ M d) (/ D 2.0)) 2.0) (/ h l))))))",
    "output_parens": 34,
    "avg_bits_err_input": 13.773766496309056,
    "avg_bits_err_output": 8.302175455373641,
    "avg_bits_err_improve": 5.471591040935415,
    "time": 53102.17578125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (3)",
    "input": "(* c0 (sqrt (/ A (* V l))))",
    "output": "(if (<= (* V l) -2e+292) (* (/ c0 (sqrt (- V))) (sqrt (/ (- A) l))) (if (<= (* V l) -1e-310) (* (sqrt (- A)) (/ c0 (sqrt (* l (- V))))) (if (<= (* V l) 0.0) (/ (pow l -0.5) (/ (sqrt (/ V A)) c0)) (if (<= (* V l) 2e+282) (* c0 (* (pow (* V l) -0.5) (sqrt A))) (* c0 (/ (sqrt (/ A (- l))) (sqrt (- V))))))))",
    "output_parens": 43,
    "avg_bits_err_input": 19.38393505942606,
    "avg_bits_err_output": 7.845701854104201,
    "avg_bits_err_improve": 11.53823320532186,
    "time": 39337.509765625,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (13)",
    "input": "(* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M)))))",
    "output": "(if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) -2e-309) (* (/ c0 (* 2.0 w)) (fma (/ c0 (* w h)) (pow (/ d D) 2.0) (* (sqrt (fma (/ c0 (* w h)) (pow (/ d D) 2.0) M)) (sqrt (- (* (/ c0 (* w h)) (pow (/ d D) 2.0)) M))))) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 0.0) (fma (* (* c0 (/ 0.5 w)) (/ M (- (* d (* (/ d w) (/ c0 (* h (* D D))))) (hypot (* d (* (/ d w) (/ c0 (* h (* D D))))) M)))) M 0.0) (if (<= (* (/ c0 (* 2.0 w)) (+ (/ (* c0 (* d d)) (* (* w h) (* D D))) (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))))) 2e+268) (* (/ c0 (* 2.0 w)) (+ (sqrt (- (* (/ (* c0 (* d d)) (* (* w h) (* D D))) (/ (* c0 (* d d)) (* (* w h) (* D D)))) (* M M))) (/ (* d (/ c0 (/ D d))) (* (* w h) D)))) (* c0 (* (/ 0.5 w) (/ M (/ (- (* (/ d D) (/ c0 (* h (* D (/ w d))))) (hypot (* (/ d D) (/ c0 (* h (* D (/ w d))))) M)) M)))))))",
    "output_parens": 170,
    "avg_bits_err_input": 59.63760002667698,
    "avg_bits_err_output": 27.707881178334112,
    "avg_bits_err_improve": 31.929718848342866,
    "time": 82424.01489257812,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Henrywood and Agarwal, Equation (12)",
    "input": "(* (* (pow (/ d h) (/ 1.0 2.0)) (pow (/ d l) (/ 1.0 2.0))) (- 1.0 (* (* (/ 1.0 2.0) (pow (/ (* M D) (* 2.0 d)) 2.0)) (/ h l))))",
    "output": "(if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) -1e-143) (* (sqrt (/ d h)) (* (sqrt (/ d l)) (+ 1.0 (* (pow (* (/ M 2.0) (* (/ D d) (sqrt (/ h l)))) 2.0) -0.5)))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 0.0) (* (* (fabs d) (sqrt (/ (/ 1.0 h) l))) (fma (/ h l) (* -0.5 (pow (* 0.5 (/ (* M D) d)) 2.0)) 1.0)) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) 2e+254) (* (pow (/ h d) -0.5) (* (sqrt (/ d l)) (+ 1.0 (* 0.5 (* (/ M (/ d D)) (* (* (/ h l) (/ M (/ d D))) -0.25)))))) (if (<= (* (* (pow (/ d h) 0.5) (pow (/ d l) 0.5)) (+ 1.0 (* (/ h l) (* (pow (/ (* M D) (* d 2.0)) 2.0) -0.5)))) INFINITY) (* (* (fabs d) (sqrt (/ 1.0 (* h l)))) (+ 1.0 (* (/ h l) (* (pow (* D (/ M d)) 2.0) -0.125)))) (/ (+ (* (sqrt (* h l)) (* (/ (fabs d) (sqrt (* h l))) (* (* h -0.125) (pow (* M (/ D d)) 2.0)))) (* l (fabs d))) (* l (sqrt (* h l))))))))",
    "output_parens": 141,
    "avg_bits_err_input": 26.269140892190727,
    "avg_bits_err_output": 14.236522423040592,
    "avg_bits_err_improve": 12.032618469150135,
    "time": 113620.62817382812,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example, simplified",
    "input": "(- 1.0 (sqrt (* 0.5 (+ 1.0 (/ 1.0 (hypot 1.0 x))))))",
    "output": "(* (- (/ 0.25 (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (/ (/ 0.25 (+ 0.5 (/ 0.5 (hypot 1.0 x)))) (fma x x 1.0))) (/ 1.0 (+ 1.0 (sqrt (+ 0.5 (/ 0.5 (hypot 1.0 x)))))))",
    "output_parens": 18,
    "avg_bits_err_input": 15.558024646213862,
    "avg_bits_err_output": 15.047127855779824,
    "avg_bits_err_improve": 0.5108967904340389,
    "time": 43907.037109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (22+)",
    "input": "(/ 4.0 (* (* (* 3.0 PI) (- 1.0 (* v v))) (sqrt (- 2.0 (* 6.0 (* v v))))))",
    "output": "(/ (/ 1.3333333333333333 (* PI (- 1.0 (* v v)))) (sqrt (+ 2.0 (* (* v v) -6.0))))",
    "output_parens": 9,
    "avg_bits_err_input": 0.9827924812503607,
    "avg_bits_err_output": 0.01214624062518029,
    "avg_bits_err_improve": 0.9706462406251803,
    "time": 3785.831787109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Equation (20:1,3)",
    "input": "(/ (- 1.0 (* 5.0 (* v v))) (* (* (* PI t) (sqrt (* 2.0 (- 1.0 (* 3.0 (* v v)))))) (- 1.0 (* v v))))",
    "output": "(/ (/ (fma v (* v -5.0) 1.0) (* PI (sqrt (fma v (* v -6.0) 2.0)))) (* (- 1.0 (* v v)) t))",
    "output_parens": 11,
    "avg_bits_err_input": 0.41964857393116367,
    "avg_bits_err_output": 0.11086804531403248,
    "avg_bits_err_improve": 0.3087805286171312,
    "time": 16281.368408203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 2",
    "input": "(* (* (/ (sqrt 2.0) 4.0) (sqrt (- 1.0 (* 3.0 (* v v))))) (- 1.0 (* v v)))",
    "output": "(* (sqrt (* (fma (* v v) -3.0 1.0) 0.125)) (- 1.0 (* v v)))",
    "output_parens": 7,
    "avg_bits_err_input": 0.013146240625180288,
    "avg_bits_err_output": 0.010646240625180289,
    "avg_bits_err_improve": 0.0024999999999999988,
    "time": 4146.53662109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix B, 1",
    "input": "(acos (/ (- 1.0 (* 5.0 (* v v))) (- (* v v) 1.0)))",
    "output": "(- PI (acos (/ (fma (* v v) -5.0 1.0) (- (fma v v -1.0)))))",
    "output_parens": 7,
    "avg_bits_err_input": 0.5191202699468207,
    "avg_bits_err_output": 0.519377638232029,
    "avg_bits_err_improve": -0.0002573682852082815,
    "time": 25875.85595703125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Falkner and Boettcher, Appendix A",
    "input": "(/ (* a (pow k m)) (+ (+ 1.0 (* 10.0 k)) (* k k)))",
    "output": "(/ (- (pow k m)) (+ (/ -1.0 a) (* k (/ (- -10.0 k) a))))",
    "output_parens": 8,
    "avg_bits_err_input": 1.96427427963445,
    "avg_bits_err_output": 0.28386448359129884,
    "avg_bits_err_improve": 1.680409796043151,
    "time": 19702.455078125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bulmash initializePoisson",
    "input": "(+ (/ NdChar (+ 1.0 (exp (/ (- (- (- (- Ec Vef) EDonor) mu)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (+ (+ (+ Ev Vef) EAccept) (- mu)) KbT)))))",
    "output": "(+ (/ NdChar (+ 1.0 (exp (/ (+ mu (- (+ Vef EDonor) Ec)) KbT)))) (/ NaChar (+ 1.0 (exp (/ (- (+ Vef (+ Ev EAccept)) mu) KbT)))))",
    "output_parens": 15,
    "avg_bits_err_input": 0.017326569372752045,
    "avg_bits_err_output": 0.017326569372752045,
    "avg_bits_err_improve": 0,
    "time": 6139.707763671875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (26)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (* b b))) 1.0)",
    "output": "(+ (+ (pow (hypot a b) 4.0) (* b (* b 4.0))) -1.0)",
    "output_parens": 6,
    "avg_bits_err_input": 0.17891093358955718,
    "avg_bits_err_output": 0.01705473046365575,
    "avg_bits_err_improve": 0.16185620312590143,
    "time": 10448.02490234375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (25)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (+ 1.0 a)) (* (* b b) (- 1.0 (* 3.0 a)))))) 1.0)",
    "output": "(+ (+ (pow (hypot b a) 4.0) (* 4.0 (+ (* (* a a) (+ a 1.0)) (* (* b b) (+ 1.0 (* a -3.0)))))) -1.0)",
    "output_parens": 13,
    "avg_bits_err_input": 0.1845460060198135,
    "avg_bits_err_output": 0.0258784065143748,
    "avg_bits_err_improve": 0.15866759950543868,
    "time": 14462.977783203125,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Bouland and Aaronson, Equation (24)",
    "input": "(- (+ (pow (+ (* a a) (* b b)) 2.0) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ 3.0 a))))) 1.0)",
    "output": "(+ (+ (+ (pow b 4.0) (+ (pow a 4.0) (+ (* b (* b (* a a))) (* b (* b (* a a)))))) (* 4.0 (+ (* (* a a) (- 1.0 a)) (* (* b b) (+ a 3.0))))) -1.0)",
    "output_parens": 21,
    "avg_bits_err_input": 0.1884003703942341,
    "avg_bits_err_output": 0.02076261454716297,
    "avg_bits_err_improve": 0.16763775584707113,
    "time": 25138.69287109375,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  },
  {
    "test": "Given's Rotation SVD example",
    "input": "(sqrt (* 0.5 (+ 1.0 (/ x (sqrt (+ (* (* 4.0 p) p) (* x x)))))))",
    "output": "(sqrt (* 0.5 (+ 1.0 (/ x (hypot (* p 2.0) x)))))",
    "output_parens": 6,
    "avg_bits_err_input": 13.537728423626795,
    "avg_bits_err_output": 13.53245086482154,
    "avg_bits_err_improve": 0.005277558805255822,
    "time": 20434.1826171875,
    "seed": 30,
    "npts": 256,
    "herbie_iters": 4,
    "config": "main"
  }
]
